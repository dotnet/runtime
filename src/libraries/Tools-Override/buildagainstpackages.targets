<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="AddDependenciesToProjectJson" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <UsingTask TaskName="GetPackageNumberFromPackageDrop" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <UsingTask TaskName="DumpItem" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>

  <ItemGroup>
    <_PackagesDrops Include="$(PackagesDrops)" />
  </ItemGroup>
  <PropertyGroup>
    <!-- Note: escape msbuild characters with ascii escape codes.  < == %3C, > == %3E-->
    <PackageNameRegex Condition="'$(PackageNameRegex)' == ''">(?%3Cname%3E.*)\.(?%3Cversion%3E\d+\.\d+\.\d+)(-(?%3Cprerelease%3E.*)?)?</PackageNameRegex>
  </PropertyGroup>
  <PropertyGroup>
    <!-- overridden in repo -->
    <GeneratedProjectJsonDir Condition="'$(GeneratedProjectJsonDir)' == ''">$(ObjDir)generated</GeneratedProjectJsonDir>
  </PropertyGroup>

  <PropertyGroup>
    <!-- We have to add BeforeResolveReferences to CleanDependsOn otherwise CleanDependsOn will Call AssignProjectConfigurations before we get a chance
         to swap out the ProjectReferences if we are swapping project references to package dependencies -->
    <CleanDependsOn>
      BeforeResolveReferences;
      $(CleanDependsOn)
    </CleanDependsOn>
    <BuildDependsOn>
      GenerateTestProjectJson;
      $(BuildDependsOn);
    </BuildDependsOn>
    <ResolveAssemblyReferencesDependsOn>
      $(ResolveAssemblyReferencesDependsOn);
      DetermineProjectJsonPath;
      ResolveNuGetPackages;
    </ResolveAssemblyReferencesDependsOn>
    <ResolveNuGetPackagesDependsOn>
      $(ResolveNuGetPackagesDependsOn);
      DetermineProjectJsonPath;
    </ResolveNuGetPackagesDependsOn>
  </PropertyGroup>
  
  <PropertyGroup>
    <GenerateTestProjectJsonDependsOn Condition="'$(SkipGenerateTestProjectJson)'!='true'">
      ExtractProjectReferences;
      GatherProjectReferenceForProjectJson;
      DetermineProjectJsonPath;
      AddDependenciesToProjectJson
    </GenerateTestProjectJsonDependsOn>
  </PropertyGroup>
 
  <Target Name="GenerateTestProjectJson" DependsOnTargets="$(GenerateTestProjectJsonDependsOn)" />

  <Target Name="GenerateAllTestProjectJsons" DependsOnTargets="GenerateTestProjectJson" />

  <Target Name="DetermineProjectJsonPath">
    <PropertyGroup>
      <OriginalProjectJson>$(ProjectJson)</OriginalProjectJson>
      <GeneratedTargetGroup Condition="'$(GeneratedTargetGroup)' == ''">$(TargetGroup)</GeneratedTargetGroup>
      <GeneratedOSGroup Condition="'$(GeneratedOSGroup)' == ''">$(OSGroup)</GeneratedOSGroup>
      <!-- We can't put the generated project.json in the output path or NuGet will interpret Microsoft.Win32.Primitives as a "project"
           type instead of a "package" type when generating the project.lock.json file, so we have to place our project.json in a different path location. -->
      <ProjectsGeneratedProjectJsonDir>$(GeneratedProjectJsonDir)\$(MSBuildProjectName)\</ProjectsGeneratedProjectJsonDir>
      <ProjectsGeneratedProjectJsonDir Condition="'$(GeneratedOSGroup)' != ''">$(ProjectsGeneratedProjectJsonDir)$(GeneratedOSGroup)\</ProjectsGeneratedProjectJsonDir>
      <ProjectsGeneratedProjectJsonDir Condition="'$(GeneratedTargetGroup)' != ''">$(ProjectsGeneratedProjectJsonDir)$(GeneratedTargetGroup)\</ProjectsGeneratedProjectJsonDir>
      <ProjectJson>$(ProjectsGeneratedProjectJsonDir)project.json</ProjectJson>
      <GeneratedProjectLockJson>$(ProjectsGeneratedProjectJsonDir)project.lock.json</GeneratedProjectLockJson>
      <!-- Not all projects generate a new project.json, so only update the project.lock.json if it has been restored. -->
      <ProjectLockJson Condition="Exists('$(GeneratedProjectLockJson)')">$(GeneratedProjectLockJson)</ProjectLockJson>
    </PropertyGroup>
    <Message Condition="Exists('$(ProjectLockJson)')" Text="Using '$(ProjectLockJson)'" Importance="Low"/>
  </Target>

  <!-- Before resolving references, separate out project references we are converting to package dependencies. -->
  <Target Name="BeforeResolveReferences" DependsOnTargets="ExtractProjectReferences">
    <ItemGroup>
      <!-- These project references have been converted to package dependencies and a new project.json has been created.  -->
      <ProjectReference Remove="@(_PackageProjectReference)" />
    </ItemGroup>
  </Target>

  <!-- Before resolving references, separate out project references we are converting to package dependencies. -->
  <Target Name="ExtractProjectReferences">
    <ItemGroup Condition="'$(KeepAllProjectReferences)' != 'true'">
      <!-- Don't alter the ProjectReference's from the project during the extraction phase -->
      <_ClonedProjectReference Include="@(ProjectReference)" />
      <_RemovePackageProjectReference Condition="'%(_ClonedProjectReference.KeepProjectReference)' != 'true' and !$([System.Text.RegularExpressions.Regex]::IsMatch('%(_ClonedProjectReference.FullPath)', '[\\/]tests[\\/]', System.Text.RegularExpressions.RegexOptions.IgnoreCase))"
      Include="%(_ClonedProjectReference.Identity)" />
      <!-- Populate items first with the project references so that we can trim them but keep the item metadata -->
      <_PackageProjectReference Include="@(_ClonedProjectReference)" />
      <_ClonedProjectReference Remove="@(_RemovePackageProjectReference)" />
      <_PackageProjectReference Remove="@(_ClonedProjectReference)" />
    </ItemGroup>
  </Target>

  <Target Name="GatherProjectReferenceForProjectJson"
          Condition="'$(KeepAllProjectReferences)' != 'true'"
          Inputs="%(_PackageProjectReference.Identity)"
          Outputs="fake">
    <PropertyGroup>
      <_PackageReferenceName>%(_PackageProjectReference.PackageReferenceName)</_PackageReferenceName>
      <_InjectProjectReference>%(_PackageProjectReference.FileName)</_InjectProjectReference>
    </PropertyGroup>

    <ItemGroup>
      <_AdditionalProperties Condition="'$(AssemblyVersionTransition)' != ''" Include="AssemblyVersionTransition=$(AssemblyVersionTransition);" />
    </ItemGroup>

    <!-- Evaluate the project references to determine the assembly version for the package dependency.
         Only evaluate the project reference if we were not able to find an assembly version in "PackageDrops" -->
    <MSBuild Condition="'%(_PackageProjectReference.Identity)' != ''"
             Projects="%(_PackageProjectReference.Identity)"
             Targets="GetAssemblyVersion"
             Properties="@(_AdditionalProperties)">
      <Output TaskParameter="TargetOutputs"
              PropertyName="_EvaluatedAssemblyVersion" />
    </MSBuild>
    <PropertyGroup>
      <_AssemblyVersion Condition="'$(_AssemblyVersion)' == ''">$(_EvaluatedAssemblyVersion)</_AssemblyVersion>
    </PropertyGroup>

    <Error Condition="'$(_AssemblyVersion)' == ''" Text="Unable to determine assembly version for project reference '%(_PackageProjectReference.Identity)'" />

    <PropertyGroup>
      <!-- Use the alternative PackageReferenceName metadata if available -->
      <_InjectProjectReferenceDependencyName Condition="'$(_PackageReferenceName)' == ''">%(_PackageProjectReference.FileName)</_InjectProjectReferenceDependencyName>
      <_InjectProjectReferenceDependencyName Condition="'$(_PackageReferenceName)' != ''">$(_PackageReferenceName)</_InjectProjectReferenceDependencyName>
    </PropertyGroup>

    <ItemGroup>
      <_InjectProjectReferenceDependency  Include="$(_InjectProjectReferenceDependencyName)">
        <Name>$(_InjectProjectReferenceDependencyName)</Name>
        <OriginalName>$(_InjectProjectReference)</OriginalName>
        <Version>$(_AssemblyVersion)</Version>
        <FilePath>%(_PackageProjectReference.Identity)</FilePath>
        <TargetGroup>%(_PackageProjectReference.TargetGroup)</TargetGroup>
        </_InjectProjectReferenceDependency>
    </ItemGroup>

    <Message Condition="'@(_InjectProjectReferenceDependency)' != ''" Text="Converting project reference (%(_InjectProjectReferenceDependency.OriginalName)) to package dependency - %(_InjectProjectReferenceDependency.Name): %(_InjectProjectReferenceDependency.Version)" />
  </Target>

  <Target Name="AddDependenciesToProjectJson"
          DependsOnTargets="GatherProjectReferenceForProjectJson;DetermineProjectJsonPath;GetDefaultTestRid"
          Condition="'@(_InjectProjectReferenceDependency)' != '' and '$(RestoreDuringBuild)' != 'false'">
          
    <!-- If VersionsFiles were passed on the command-line, convert them to an item group -->
    <ItemGroup>
      <_VersionsFiles Include="$(VersionsFiles)" />
    </ItemGroup>
    <PropertyGroup>
      <SupportsDefinitionFile Condition="'$(SupportsDefinitionFile)' == '' and Exists('$(CommonTestProjectJson)')">$(CommonTestProjectJson)</SupportsDefinitionFile>
    </PropertyGroup>

    <AddDependenciesToProjectJson Condition="'$(ErrorNoVersion)' == ''"
                                  AdditionalDependencies="@(_InjectProjectReferenceDependency)"
                                  PackagesDrops="@(_PackagesDrops)"
                                  PackageNameRegex="$(PackageNameRegex)"
                                  VersionsFiles="@(_VersionsFiles)"
                                  ProjectJson="$(OriginalProjectJson)"
                                  Frameworks="$(GeneratedTargetGroup)"
                                  OutputProjectJson="$(ProjectJson)"
                                  ExcludedRuntimes="@(ExcludedRuntimes)"
                                  ExternalPackages="@(ExternalPackage)"
                                  UseNewestAvailablePackages="$(UseNewestAvailablePackages)"
                                  SupportsFile="$(SupportsDefinitionFile)"
                                  TestRuntime="$(TestNugetRuntimeId)"
                                  TestTargetFramework="$(FilterTestNugetTargetMoniker)"
                                  />

    <Message Condition="'$(ErrorNoVersion)' == ''" Text="Generated project.json file - '$(ProjectJson)'" />
  </Target>

  <Target Name="GenerateEvaluatedProjectFilePaths"
          Inputs="%(_InjectProjectReferenceDependency.Identity)"
          Outputs="fake" >
    <!-- Evaluate the injected project reference dependencies so that we can remove the paths from the contentwithtargetpath items. -->
    <ItemGroup>
      <_EvaluatedProjectFilePath Include="%(_InjectProjectReferenceDependency.Identity)\..\%(_InjectProjectReferenceDependency.FilePath)" />
    </ItemGroup>
  </Target>
</Project>
