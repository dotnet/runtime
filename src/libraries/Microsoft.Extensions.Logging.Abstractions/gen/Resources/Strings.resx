<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidLoggingMethodNameMessage" xml:space="preserve">
    <value>Logging method names cannot start with _</value>
  </data>
  <data name="InvalidLoggingMethodParameterNameMessage" xml:space="preserve">
    <value>Logging method parameter names cannot start with _</value>
  </data>
  <data name="MissingRequiredTypeTitle" xml:space="preserve">
    <value>Could not find a required type definition</value>
  </data>
  <data name="MissingRequiredTypeMessage" xml:space="preserve">
    <value>Could not find definition for type {0}</value>
  </data>
  <data name="ShouldntReuseEventIdsTitle" xml:space="preserve">
    <value>Multiple logging methods cannot use the same event id within a class</value>
  </data>
  <data name="ShouldntReuseEventIdsMessage" xml:space="preserve">
    <value>Multiple logging methods are using event id {0} in class {1}</value>
  </data>
  <data name="LoggingMethodMustReturnVoidMessage" xml:space="preserve">
    <value>Logging methods must return void</value>
  </data>
  <data name="MissingLoggerArgumentTitle" xml:space="preserve">
    <value>One of the arguments to a static logging method must implement the Microsoft.Extensions.Logging.ILogger interface</value>
    <comment>{Locked="Microsoft.Extensions.Logging.ILogger"}</comment>
  </data>
  <data name="MissingLoggerArgumentMessage" xml:space="preserve">
    <value>One of the arguments to the static logging method '{0}' must implement the Microsoft.Extensions.Logging.ILogger interface</value>
    <comment>{Locked="Microsoft.Extensions.Logging.ILogger"}</comment>
  </data>
  <data name="LoggingMethodShouldBeStaticMessage" xml:space="preserve">
    <value>Logging methods must be static</value>
  </data>
  <data name="LoggingMethodMustBePartialMessage" xml:space="preserve">
    <value>Logging methods must be partial</value>
  </data>
  <data name="LoggingMethodIsGenericMessage" xml:space="preserve">
    <value>Logging methods cannot be generic</value>
  </data>
  <data name="ShouldntMentionInTemplateMessage" xml:space="preserve">
    <value>Don't include a template for {0} in the logging message since it is implicitly taken care of</value>
  </data>
  <data name="ShouldntMentionExceptionInMessageTitle" xml:space="preserve">
    <value>Don't include exception parameters as templates in the logging message</value>
  </data>
  <data name="RedundantQualifierInMessageMessage" xml:space="preserve">
    <value>Remove redundant qualifier (Info:, Warning:, Error:, etc) from the logging message since it is implicit in the specified log level.</value>
  </data>
  <data name="RedundantQualifierInMessageTitle" xml:space="preserve">
    <value>Redundant qualifier in logging message</value>
  </data>
  <data name="ArgumentHasNoCorrespondingTemplateMessage" xml:space="preserve">
    <value>Argument '{0}' is not referenced from the logging message</value>
  </data>
  <data name="ArgumentHasNoCorrespondingTemplateTitle" xml:space="preserve">
    <value>Argument is not referenced from the logging message</value>
  </data>
  <data name="TemplateHasNoCorrespondingArgumentMessage" xml:space="preserve">
    <value>Template '{0}' is not provided as argument to the logging method</value>
  </data>
  <data name="TemplateHasNoCorrespondingArgumentTitle" xml:space="preserve">
    <value>Logging template has no corresponding method argument</value>
  </data>
  <data name="LoggingMethodHasBodyMessage" xml:space="preserve">
    <value>Logging methods cannot have a body</value>
  </data>
  <data name="MissingLogLevelMessage" xml:space="preserve">
    <value>A LogLevel value must be supplied in the LoggerMessage attribute or as a parameter to the logging method</value>
  </data>
  <data name="ShouldntMentionLogLevelInMessageTitle" xml:space="preserve">
    <value>Don't include log level parameters as templates in the logging message</value>
  </data>
  <data name="ShouldntMentionLoggerInMessageTitle" xml:space="preserve">
    <value>Don't include logger parameters as templates in the logging message</value>
  </data>
  <data name="MissingLoggerFieldMessage" xml:space="preserve">
    <value>Couldn't find a field of type Microsoft.Extensions.Logging.ILogger in class {0}</value>
    <comment>{Locked="Microsoft.Extensions.Logging.ILogger"}</comment>
  </data>
  <data name="MissingLoggerFieldTitle" xml:space="preserve">
    <value>Couldn't find a field of type Microsoft.Extensions.Logging.ILogger</value>
    <comment>{Locked="Microsoft.Extensions.Logging.ILogger"}</comment>
  </data>
  <data name="MultipleLoggerFieldsMessage" xml:space="preserve">
    <value>Found multiple fields of type Microsoft.Extensions.Logging.ILogger in class {0}</value>
    <comment>{Locked="Microsoft.Extensions.Logging.ILogger"}</comment>
  </data>
  <data name="MultipleLoggerFieldsTitle" xml:space="preserve">
    <value>Found multiple fields of type Microsoft.Extensions.Logging.ILogger</value>
    <comment>{Locked="Microsoft.Extensions.Logging.ILogger"}</comment>
  </data>
  <data name="InconsistentTemplateCasingMessage" xml:space="preserve">
    <value>Can't have the same template with different casing</value>
  </data>
  <data name="MalformedFormatStringsMessage" xml:space="preserve">
    <value>Can't have malformed format strings (like dangling {, etc)</value>
  </data>
  <data name="GeneratingForMax6ArgumentsMessage" xml:space="preserve">
    <value>Generating more than 6 arguments is not supported</value>
  </data>
</root>