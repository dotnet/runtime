<Project Sdk="Microsoft.Build.Traversal">
  <Import Project="Sdk.props" Sdk="Microsoft.DotNet.Build.Tasks.SharedFramework.Sdk" />

  <PropertyGroup>
    <TraversalGlobalProperties>BuildAllProjects=true</TraversalGlobalProperties>
  </PropertyGroup>

  <PropertyGroup Condition="'$(ContinuousIntegrationBuild)' != 'true'">
    <!-- Create an intermediate runsettings file to enable VSTest discovery. -->
    <EnableRunSettingsSupport>true</EnableRunSettingsSupport>
    <CreateIntermediateRunSettingsFile>true</CreateIntermediateRunSettingsFile>
  </PropertyGroup>

  <!-- Explicitly build the runtime.depproj project first to correctly set up the testhost. -->
  <ItemGroup>
    <RuntimeProject Include="$(MSBuildThisFileDirectory)restore\runtime\runtime.depproj" />
    <ProjectReference Include="@(RuntimeProject)" Condition="'$(MSBuildRestoreSessionId)' != ''" />

    <ProjectReference Include="$(CommonTestPath)AppleTestRunner\AppleTestRunner.csproj" Condition="'$(TargetOS)' == 'iOS' or '$(TargetOS)' == 'tvOS'"/>
    <ProjectReference Include="$(CommonTestPath)AndroidTestRunner\AndroidTestRunner.csproj" Condition="'$(TargetOS)' == 'Android'" />
    <ProjectReference Include="$(CommonTestPath)WasmTestRunner\WasmTestRunner.csproj" Condition="'$(TargetOS)' == 'Browser'" />
  </ItemGroup>

  <Target Name="RestoreTestHost"
          BeforeTargets="Build">
    <MSBuild Targets="Build"
             Projects="@(RuntimeProject)"
             Properties="$(TraversalGlobalProperties)" />
  </Target>

  <Target Name="CreateIntermediateRunSettingsFile"
          Condition="'$(CreateIntermediateRunSettingsFile)' == 'true'"
          DependsOnTargets="GenerateRunSettingsFile"
          BeforeTargets="Build" />

  <!-- Microsoft.XmlSerializer.Generator should not be marked as a platform item and be copy-local instead. -->
  <Target Name="CollectSharedFrameworkRuntimeFiles"
          Condition="'$(BuildTargetFramework)' == '$(NetCoreAppCurrent)'">
    <ItemGroup>
      <_manualSharedFrameworkRuntimeFiles Include="System.Security.Cryptography.Native.OpenSsl.so" />
      <_manualSharedFrameworkRuntimeFiles Include="System.Security.Cryptography.Native.Apple.dylib" />
      <_manualSharedFrameworkRuntimeFiles Include="System.Security.Cryptography.Native.OpenSsl.dylib" />
    </ItemGroup>
    <ItemGroup>
      <SharedFrameworkRuntimeFiles Include="$(TestHostRuntimePath)*;@(_manualSharedFrameworkRuntimeFiles->'$(TestHostRuntimePath)%(Identity)')"
                                   Exclude="$(TestHostRuntimePath)dotnet-Microsoft.XmlSerializer.Generator.*"
                                   TargetPath="runtimes/" />
    </ItemGroup>
  </Target>

  <UsingTask TaskName="GenerateFileVersionProps" AssemblyFile="$(InstallerTasksAssemblyPath)"/>
  <Target Name="GenerateFileVersionProps"
          DependsOnTargets="CollectSharedFrameworkRuntimeFiles"
          Condition="'$(PlatformManifestFile)' != '' and '$(BuildTargetFramework)' == '$(NetCoreAppCurrent)'"
          AfterTargets="RestoreTestHost">
    <GenerateFileVersionProps Files="@(SharedFrameworkRuntimeFiles)"
                              PackageId="$(SharedFrameworkName)"
                              PackageVersion="$(ProductVersion)"
                              PlatformManifestFile="$(PlatformManifestFile)"
                              PreferredPackages="$(SharedFrameworkName)"
                              PermitDllAndExeFilesLackingFileVersion="true" />

    <Copy SourceFiles="$(PlatformManifestFile)"
          DestinationFolder="$(MicrosoftNetCoreAppRefPackDataDir)"
          UseHardlinksIfPossible="true"
          SkipUnchangedFiles="true" />
  </Target>

  <!--
    Shared framework deps file generation.
    Produces a test shared-framework deps file.
    To use invoke target directly specifying NETCoreAppTestSharedFrameworkPath property.
  -->
  <UsingTask TaskName="GenerateTestSharedFrameworkDepsFile" AssemblyFile="$(InstallerTasksAssemblyPath)"/>
  <Target Name="GenerateTestSharedFrameworkDepsFile"
          Condition="'$(BinplaceTestSharedFramework)' == 'true' and '$(BuildTargetFramework)' == '$(NetCoreAppCurrent)'"
          AfterTargets="RestoreTestHost">
    <GenerateTestSharedFrameworkDepsFile SharedFrameworkDirectory="$(NETCoreAppTestSharedFrameworkPath)"
                                         RuntimeGraphFiles="$(RuntimeIdGraphDefinitionFile)"
                                         TargetRuntimeIdentifier="$(PackageRID)" />
  </Target>

  <UsingTask TaskName="CreateFrameworkListFile" AssemblyFile="$(DotNetBuildTasksSharedFrameworkTaskFile)"/>
  <Target Name="GenerateFrameworkListFile"
          Condition="'$(BuildTargetFramework)' == '$(NetCoreAppCurrent)'"
          AfterTargets="RestoreTestHost">
    <ItemGroup>
      <_refPackLibFile Include="$(MicrosoftNetCoreAppRefPackRefDir)*.*">
        <TargetPath>ref/$(NetCoreAppCurrent)</TargetPath>
      </_refPackLibFile>
      <_runtimePackLibFiles Include="$(MicrosoftNetCoreAppRuntimePackRidLibTfmDir)*.*">
        <TargetPath>runtimes/$(PackageRID)/lib/$(NetCoreAppCurrent)</TargetPath>
      </_runtimePackLibFiles>
      <_runtimePackNativeFiles Include="$(MicrosoftNetCoreAppRuntimePackNativeDir)*.*">
        <TargetPath>runtimes/$(PackageRID)/native</TargetPath>
        <IsNative>true</IsNative>
      </_runtimePackNativeFiles>
      <!-- Clear the IsNative flag on System.PrivateCoreLib given that it is present in native dir but it is actually managed -->
      <_runtimePackNativeFiles Update="@(_runtimePackNativeFiles)" Condition="'%(FileName)%(Extension)' == 'System.Private.CoreLib.dll'" IsNative="" />

      <FrameworkListRootAttributes Include="Name" Value="$(NetCoreAppCurrentBrandName)" />
      <FrameworkListRootAttributes Include="TargetFrameworkIdentifier" Value="$(NetCoreAppCurrentIdentifier)" />
      <FrameworkListRootAttributes Include="TargetFrameworkVersion" Value="$(NetCoreAppCurrentVersion)" />
      <FrameworkListRootAttributes Include="FrameworkName" Value="$(SharedFrameworkName)" />
    </ItemGroup>

    <!-- We need to set this metadata in a separate ItemGroup than when the Items are initially populated in order to
    have access to the Extension metadata. -->
    <ItemGroup>
      <_refPackLibFile>
        <IsSymbolFile Condition="'%(Extension)' == '.pdb'">true</IsSymbolFile>
      </_refPackLibFile>
      <_runtimePackLibFiles>
        <IsSymbolFile Condition="'%(Extension)' == '.pdb'">true</IsSymbolFile>
      </_runtimePackLibFiles>
      <_runtimePackNativeFiles>
        <IsSymbolFile Condition="'%(Extension)' == '.pdb'">true</IsSymbolFile>
      </_runtimePackNativeFiles>
    </ItemGroup>

    <CreateFrameworkListFile Files="@(_refPackLibFile)"
                             TargetFile="$(MicrosoftNetCoreAppRefPackDataDir)FrameworkList.xml"
                             TargetFilePrefixes="ref/;runtimes/"
                             RootAttributes="@(FrameworkListRootAttributes)" />

    <CreateFrameworkListFile Files="@(_runtimePackLibFiles);@(_runtimePackNativeFiles)"
                             TargetFile="$(MicrosoftNetCoreAppRuntimePackDir)data\RuntimeList.xml"
                             TargetFilePrefixes="ref/;runtimes/"
                             RootAttributes="@(FrameworkListRootAttributes)" />
  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.DotNet.Build.Tasks.SharedFramework.Sdk" />
</Project>
