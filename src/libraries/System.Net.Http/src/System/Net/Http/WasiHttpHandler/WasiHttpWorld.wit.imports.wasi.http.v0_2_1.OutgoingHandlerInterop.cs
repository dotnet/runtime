// Generated by `wit-bindgen` 0.29.0. DO NOT EDIT!
// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

namespace WasiHttpWorld.wit.imports.wasi.http.v0_2_1
{
    internal static class OutgoingHandlerInterop {

        internal static class HandleWasmInterop
        {
            [DllImport("wasi:http/outgoing-handler@0.2.1", EntryPoint = "handle"), WasmImportLinkage]
            internal static extern void wasmImportHandle(int p0, int p1, int p2, nint p3);

        }

        internal  static unsafe global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.FutureIncomingResponse Handle(global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.OutgoingRequest request, global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.RequestOptions? options)
        {
            var handle = request.Handle;
            request.Handle = 0;

            int lowered;
            int lowered4;

            if (options != null) {
                var payload2 = (global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.RequestOptions) options;
                var handle3 = payload2.Handle;
                payload2.Handle = 0;

                lowered = 1;
                lowered4 = handle3;

            } else {

                lowered = 0;
                lowered4 = 0;

            }

            var retArea = new ulong[5];
            fixed (ulong* retAreaByte0 = &retArea[0])
            {
                var ptr = (nint)retAreaByte0;
                HandleWasmInterop.wasmImportHandle(handle, lowered, lowered4, ptr);

                Result<global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.FutureIncomingResponse, global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode> lifted197;

                switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                    case 0: {
                        var resource = new global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.FutureIncomingResponse(new global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.FutureIncomingResponse.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                        lifted197 = Result<global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.FutureIncomingResponse, global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode>.ok(resource);
                        break;
                    }
                    case 1: {

                        global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode lifted196;

                        switch (new Span<byte>((void*)(ptr + 8), 1)[0]) {
                            case 0: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.dnsTimeout();
                                break;
                            }
                            case 1: {

                                string? lifted;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted = Encoding.UTF8.GetString((byte*)BitConverter.ToInt32(new Span<byte>((void*)(ptr + 20), 4)), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 24), 4)));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                ushort? lifted21;

                                switch (new Span<byte>((void*)(ptr + 28), 1)[0]) {
                                    case 0: {
                                        lifted21 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted21 = ((ushort)BitConverter.ToUInt16(new Span<byte>((void*)(ptr + 30), 2)));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 28), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.dnsError(new global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.DnsErrorPayload (
                                lifted, lifted21));
                                break;
                            }
                            case 2: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.destinationNotFound();
                                break;
                            }
                            case 3: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.destinationUnavailable();
                                break;
                            }
                            case 4: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.destinationIpProhibited();
                                break;
                            }
                            case 5: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.destinationIpUnroutable();
                                break;
                            }
                            case 6: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.connectionRefused();
                                break;
                            }
                            case 7: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.connectionTerminated();
                                break;
                            }
                            case 8: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.connectionTimeout();
                                break;
                            }
                            case 9: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.connectionReadTimeout();
                                break;
                            }
                            case 10: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.connectionWriteTimeout();
                                break;
                            }
                            case 11: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.connectionLimitReached();
                                break;
                            }
                            case 12: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.tlsProtocolError();
                                break;
                            }
                            case 13: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.tlsCertificateError();
                                break;
                            }
                            case 14: {

                                byte? lifted52;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted52 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted52 = ((byte)new Span<byte>((void*)(ptr + 17), 1)[0]);
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                string? lifted57;

                                switch (new Span<byte>((void*)(ptr + 20), 1)[0]) {
                                    case 0: {
                                        lifted57 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted57 = Encoding.UTF8.GetString((byte*)BitConverter.ToInt32(new Span<byte>((void*)(ptr + 24), 4)), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 28), 4)));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 20), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.tlsAlertReceived(new global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.TlsAlertReceivedPayload (
                                lifted52, lifted57));
                                break;
                            }
                            case 15: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpRequestDenied();
                                break;
                            }
                            case 16: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpRequestLengthRequired();
                                break;
                            }
                            case 17: {

                                ulong? lifted68;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted68 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted68 = unchecked((ulong)(BitConverter.ToInt64(new Span<byte>((void*)(ptr + 24), 8))));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpRequestBodySize(lifted68);
                                break;
                            }
                            case 18: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpRequestMethodInvalid();
                                break;
                            }
                            case 19: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpRequestUriInvalid();
                                break;
                            }
                            case 20: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpRequestUriTooLong();
                                break;
                            }
                            case 21: {

                                uint? lifted81;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted81 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted81 = unchecked((uint)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 20), 4))));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpRequestHeaderSectionSize(lifted81);
                                break;
                            }
                            case 22: {

                                global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.FieldSizePayload? lifted98;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted98 = null;
                                        break;
                                    }

                                    case 1: {

                                        string? lifted92;

                                        switch (new Span<byte>((void*)(ptr + 20), 1)[0]) {
                                            case 0: {
                                                lifted92 = null;
                                                break;
                                            }

                                            case 1: {

                                                lifted92 = Encoding.UTF8.GetString((byte*)BitConverter.ToInt32(new Span<byte>((void*)(ptr + 24), 4)), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 28), 4)));
                                                break;
                                            }

                                            default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 20), 1)[0]));
                                        }

                                        uint? lifted97;

                                        switch (new Span<byte>((void*)(ptr + 32), 1)[0]) {
                                            case 0: {
                                                lifted97 = null;
                                                break;
                                            }

                                            case 1: {

                                                lifted97 = unchecked((uint)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 36), 4))));
                                                break;
                                            }

                                            default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 32), 1)[0]));
                                        }

                                        lifted98 = new global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.FieldSizePayload (
                                        lifted92, lifted97);
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpRequestHeaderSize(lifted98);
                                break;
                            }
                            case 23: {

                                uint? lifted105;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted105 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted105 = unchecked((uint)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 20), 4))));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpRequestTrailerSectionSize(lifted105);
                                break;
                            }
                            case 24: {

                                string? lifted112;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted112 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted112 = Encoding.UTF8.GetString((byte*)BitConverter.ToInt32(new Span<byte>((void*)(ptr + 20), 4)), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 24), 4)));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                uint? lifted117;

                                switch (new Span<byte>((void*)(ptr + 28), 1)[0]) {
                                    case 0: {
                                        lifted117 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted117 = unchecked((uint)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 32), 4))));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 28), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpRequestTrailerSize(new global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.FieldSizePayload (
                                lifted112, lifted117));
                                break;
                            }
                            case 25: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpResponseIncomplete();
                                break;
                            }
                            case 26: {

                                uint? lifted126;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted126 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted126 = unchecked((uint)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 20), 4))));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpResponseHeaderSectionSize(lifted126);
                                break;
                            }
                            case 27: {

                                string? lifted133;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted133 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted133 = Encoding.UTF8.GetString((byte*)BitConverter.ToInt32(new Span<byte>((void*)(ptr + 20), 4)), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 24), 4)));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                uint? lifted138;

                                switch (new Span<byte>((void*)(ptr + 28), 1)[0]) {
                                    case 0: {
                                        lifted138 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted138 = unchecked((uint)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 32), 4))));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 28), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpResponseHeaderSize(new global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.FieldSizePayload (
                                lifted133, lifted138));
                                break;
                            }
                            case 28: {

                                ulong? lifted145;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted145 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted145 = unchecked((ulong)(BitConverter.ToInt64(new Span<byte>((void*)(ptr + 24), 8))));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpResponseBodySize(lifted145);
                                break;
                            }
                            case 29: {

                                uint? lifted152;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted152 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted152 = unchecked((uint)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 20), 4))));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpResponseTrailerSectionSize(lifted152);
                                break;
                            }
                            case 30: {

                                string? lifted159;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted159 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted159 = Encoding.UTF8.GetString((byte*)BitConverter.ToInt32(new Span<byte>((void*)(ptr + 20), 4)), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 24), 4)));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                uint? lifted164;

                                switch (new Span<byte>((void*)(ptr + 28), 1)[0]) {
                                    case 0: {
                                        lifted164 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted164 = unchecked((uint)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 32), 4))));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 28), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpResponseTrailerSize(new global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.FieldSizePayload (
                                lifted159, lifted164));
                                break;
                            }
                            case 31: {

                                string? lifted171;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted171 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted171 = Encoding.UTF8.GetString((byte*)BitConverter.ToInt32(new Span<byte>((void*)(ptr + 20), 4)), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 24), 4)));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpResponseTransferCoding(lifted171);
                                break;
                            }
                            case 32: {

                                string? lifted178;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted178 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted178 = Encoding.UTF8.GetString((byte*)BitConverter.ToInt32(new Span<byte>((void*)(ptr + 20), 4)), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 24), 4)));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpResponseContentCoding(lifted178);
                                break;
                            }
                            case 33: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpResponseTimeout();
                                break;
                            }
                            case 34: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpUpgradeFailed();
                                break;
                            }
                            case 35: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.httpProtocolError();
                                break;
                            }
                            case 36: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.loopDetected();
                                break;
                            }
                            case 37: {

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.configurationError();
                                break;
                            }
                            case 38: {

                                string? lifted195;

                                switch (new Span<byte>((void*)(ptr + 16), 1)[0]) {
                                    case 0: {
                                        lifted195 = null;
                                        break;
                                    }

                                    case 1: {

                                        lifted195 = Encoding.UTF8.GetString((byte*)BitConverter.ToInt32(new Span<byte>((void*)(ptr + 20), 4)), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 24), 4)));
                                        break;
                                    }

                                    default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 16), 1)[0]));
                                }

                                lifted196 = global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode.internalError(lifted195);
                                break;
                            }

                            default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 8), 1)[0]}");
                        }

                        lifted197 = Result<global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.FutureIncomingResponse, global::WasiHttpWorld.wit.imports.wasi.http.v0_2_1.ITypes.ErrorCode>.err(lifted196);
                        break;
                    }

                    default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
                }
                if (lifted197.IsOk) {
                    var tmp = lifted197.AsOk;
                    return tmp;
                } else {
                    throw new WitException(lifted197.AsErr!, 0);
                }
            }

            //TODO: free alloc handle (interopString) if exists
        }

    }
}
