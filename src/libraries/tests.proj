<Project>
  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.props" />
  <Import Project="$(RepositoryEngineeringDir)testing\coverage.props" Condition="'$(Coverage)' == 'true'" />

  <PropertyGroup>
    <TargetFramework>$(BuildTargetFramework)</TargetFramework>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Coverage)' == 'true'">
    <CoverageReportInputPath>$(ArtifactsBinDir)*.Tests/**/coverage.xml</CoverageReportInputPath>
    <CoverageReportDir>$(ArtifactsDir)coverage</CoverageReportDir>
    <SerializeProjects>true</SerializeProjects>
  </PropertyGroup>

  <ItemGroup Condition="'$(BuildAllConfigurations)' != 'true'">
    <!-- We currently only test with C# projects. -->
    <ProjectReference Include="$(MSBuildThisFileDirectory)*\tests\**\*.Tests.csproj" Exclude="@(ProjectExclusions)" />
    <ProjectReference Remove="$(CommonTestPath)System\Net\Prerequisites\**\*.csproj" />
  </ItemGroup>

  <ItemGroup Condition="'$(BuildAllConfigurations)' == 'true'">
    <ProjectReference Include="$(MSBuildThisFileDirectory)pkg\test\testPackages.proj" />
  </ItemGroup>

  <Target Name="GenerateCoverageReport"
          Condition="'$(EnableCoverageSupport)' == 'true' and '$(SkipCoverageReport)' != 'true'"
          AfterTargets="TestAllProjects"
          Inputs="$(CoverageReportInputPath)"
          Outputs="$(CoverageReportResultsPath)">
    <Exec Command="$(CoverageReportCommandLine)" />
  </Target>

  <Import Project="$(RepositoryEngineeringDir)coverage.targets" Condition="'$(EnableCoverageSupport)' == 'true'" />
  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets" />
  
  <ItemGroup>
    <SetupProjects Include="$(MSBuildThisFileDirectory)restore\runtime\runtime.depproj" />
    <SetupProjects Include="$(MSBuildThisFileDirectory)\pretest.proj" />
  </ItemGroup>

  <!-- Ordering matters! Overwriting the Build and Test target after the Sdk.targets import. -->
  <Target Name="Build" DependsOnTargets="BuildAllProjects" />
  <Target Name="BuildAllProjects">
    <!-- These projects are required to restore the runtime and setup testhost -->
    <MSBuild Targets="Build"
             Projects="@(SetupProjects)"
             Condition="'$(DotNetBuildFromSource)' != 'true' and '$(BuildAllConfigurations)' != 'true' and '$(ContinuousIntegrationBuild)' == 'true'" 
             BuildInParallel="false"
             ContinueOnError="ErrorAndStop" />
    <MSBuild Targets="Build"
             Projects="@(ProjectReference)"
             Properties="BuildAllProjects=true"
             BuildInParallel="true"
             ContinueOnError="ErrorAndStop" />
  </Target>

  <Target Name="Test" DependsOnTargets="TestAllProjects" />
  <Target Name="TestAllProjects">
    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity
         however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="Test"
             Projects="@(ProjectReference)"
             Condition="'$(SerializeProjects)' == 'true' and '%(Identity)' != ''"
             Properties="TestAllProjects=true"
             ContinueOnError="ErrorAndContinue" />

    <MSBuild Targets="Test"
             Projects="@(ProjectReference)"
             Condition="'$(SerializeProjects)' != 'true'"
             Properties="TestAllProjects=true"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)' == 'false'" />
  </Target>
</Project>
