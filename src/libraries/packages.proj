<Project>
  <PropertyGroup>
    <EnableProjectRestore>true</EnableProjectRestore>
  </PropertyGroup>

  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.props" />

  <PropertyGroup>
    <TargetFramework>$(BuildTargetFramework)</TargetFramework>
    <AdditionalBuildTargetFrameworks Condition="'$(DotNetBuildFromSource)' == 'true'">$(AdditionalBuildTargetFrameworks);package-$(Configuration)</AdditionalBuildTargetFrameworks>
  </PropertyGroup>

  <ItemGroup Condition="'$(SkipManagedPackageBuild)' != 'true'">
    <ProjectReference Include="$(PkgDir)*\*.builds" />
    <ProjectReference Include="*\pkg\**\*.pkgproj" Condition="'$(BuildAllConfigurations)' == 'true' or '$(DotNetBuildFromSource)' == 'true'" />
  </ItemGroup>

  <!-- Need the PackageIndexFile file property from baseline.props -->
  <Import Project="$(RepositoryEngineeringDir)restore\harvestPackages.targets" />

  <!--
    Updates the package index to mark all packages we are building that can go stable as stable.
    this will allow for a kicked off build to control package stability at queue time. This does edit
    the package index in-place but that shouldn't cause any problems for official builds are the only
    ones that might do this. After we ship a stable set of packages this target should be ran and the
    changes to the package index should be commited to the repo.
  -->
  <Target Name="UpdatePackageIndexWithStableVersions"
          BeforeTargets="BuildAllProjects"
          Condition="'$(DotNetFinalVersionKind)' == 'release'">
    <ItemGroup>
      <!--
      The private packages don't get stabilized so they don't need to be included
      in the set of packages that we are gathering stable versions from.
      -->
      <PkgProjects Include="$(PkgDir)*\*.pkgproj" Exclude="$(MSBuildThisFileDirectory)pkg\*Private*\*.pkgproj" />
      <PkgProjects Include="*\pkg\**\*.pkgproj" />
    </ItemGroup>

    <MSBuild Targets="GetPackageIdentityIfStable"
             BuildInParallel="$(BuildInParallel)"
             Projects="@(PkgProjects)"
             RemoveProperties="Configuration">
      <Output TaskParameter="TargetOutputs"
              ItemName="_StablePackages" />
    </MSBuild>

    <Message Text="Marking package '%(_StablePackages.Identity)' stable with version '%(_StablePackages.Version)'" />

    <UpdatePackageIndex
      PackageIndexFile="$(PackageIndexFile)"
      StablePackages="@(_StablePackages)" />

  </Target>

  <!-- Generate a version text file we include in our packages -->
  <Target Name="GenerateVersionFileForPackages"
          BeforeTargets="BuildAllProjects"
          DependsOnTargets="InitializeSourceControlInformationFromSourceControlManager">

    <Error Condition="'$(SourceRevisionId)' == ''" Text="SourceRevisionId is not set, which means the SourceLink targets are not included in the build. Those are needed to produce a correct sha for our build outputs." />

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(VersionFileForPackages)))" />

    <WriteLinesToFile
      File="$(VersionFileForPackages)"
      Lines="$(SourceRevisionId)"
      Overwrite="true" />
  </Target>

  <Target Name="SetAzureDevOpsVariableForBuiltPackages"
          Condition="'$(ContinuousIntegrationBuild)' == 'true'"
          AfterTargets="BuildAllProjects">
    <ItemGroup>
      <_PackageReports Include="$(PackageReportDir)*.json" />
    </ItemGroup>

    <Message Condition="'@(_PackageReports)' != ''" Importance="High" Text="##vso[task.setvariable variable=_librariesBuildProducedPackages]true" />
  </Target>

  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets" />

  <!-- Ordering matters! Overwriting the Build and Test target after the Sdk.targets import. -->
  <Target Name="Build" DependsOnTargets="BuildAllProjects" />
  <Target Name="BuildAllProjects">
    <MSBuild Targets="Build"
             Projects="@(ProjectReference)"
             Properties="BuildAllProjects=true"
             BuildInParallel="true"
             ContinueOnError="ErrorAndStop" />
  </Target>
</Project>
