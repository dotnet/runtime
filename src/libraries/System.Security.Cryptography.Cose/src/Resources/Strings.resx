<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CoseHeaderMapCborEncodedValueNotValid" xml:space="preserve">
    <value>Not a valid CBOR encoded value, it must be a single value with no trailing data.</value>
  </data>
  <data name="CoseHeaderMapDecodedMapIsReadOnlyCannotSetValue" xml:space="preserve">
    <value>Decoded map is read only, headers cannot be added nor deleted.</value>
  </data>
  <data name="CoseHeaderMapHeaderDoesNotAcceptSpecifiedValue" xml:space="preserve">
    <value>Header '{0}' does not accept the specified value.</value>
  </data>
  <data name="CoseHeaderMapLabelDoeNotExist" xml:space="preserve">
    <value>Label '{0}' does not exist is the map.</value>
  </data>
  <data name="DecodeSign1ArrayLengthMustBeFour" xml:space="preserve">
    <value>Array length for COSE_Sign1 must be four.</value>
  </data>
  <data name="DecodeSign1EncodedProtectedMapIncorrect" xml:space="preserve">
    <value>Protected map was incorrect.</value>
  </data>
  <data name="DecodeSign1ErrorWhileDecoding" xml:space="preserve">
    <value>Error while decoding COSE message. {0}</value>
  </data>
  <data name="DecodeSign1ErrorWhileDecodingSeeInnerEx" xml:space="preserve">
    <value>Error while decoding COSE message. See the inner exception for details.</value>
  </data>
  <data name="DecodeSign1IncorrectTag" xml:space="preserve">
    <value>Incorrect tag. Expected Sign1(18) or Untagged, Actual '{0}'.</value>
  </data>
  <data name="DecodeSign1MapLabelWasIncorrect" xml:space="preserve">
    <value>Map label was incorrect.</value>
  </data>
  <data name="DecodeSign1MesageContainedTrailingData" xml:space="preserve">
    <value>CBOR payload contained trailing data after Sign1 message was complete.</value>
  </data>
  <data name="DecodeSign1PayloadWasIncorrect" xml:space="preserve">
    <value>Payload was incorrect.</value>
  </data>
  <data name="Sign1AlgDoesNotMatchWithTheOnesSupportedByTypeOfKey" xml:space="preserve">
    <value>COSE algorithm '{0}' doesn't match with the supported algorithms of '{1}'.</value>
  </data>
  <data name="Sign1ArgumentStreamNotReadable" xml:space="preserve">
    <value>Stream was not readable.</value>
  </data>
  <data name="Sign1ArgumentStreamNotSeekable" xml:space="preserve">
    <value>Stream does not support seeking.</value>
  </data>
  <data name="Sign1SignAlgMustBeProtected" xml:space="preserve">
    <value>If specified, Algorithm (alg) must be a protected header.</value>
  </data>
  <data name="Sign1SignCoseAlgorithDoesNotMatchSpecifiedKeyAndHashAlgorithm" xml:space="preserve">
    <value>COSE Algorithm '{0}' doesn't match with the specified Key '{1}' and Hash Algorithm '{2}'.</value>
  </data>
  <data name="Sign1SignHeaderDuplicateLabels" xml:space="preserve">
    <value>Protected and Unprotected buckets must not contain duplicate labels.</value>
  </data>
  <data name="Sign1SignUnsupportedHashAlgorithm" xml:space="preserve">
    <value>Unsuppoerted hash algorithm '{0}'.</value>
  </data>
  <data name="Sign1UnknownCoseAlgorithm" xml:space="preserve">
    <value>COSE algorithm '{0}' is unknown.</value>
  </data>
  <data name="Sign1UnsupportedKey" xml:space="preserve">
    <value>Unsupported key '{0}'.</value>
  </data>
  <data name="Sign1VerifyAlgHeaderWasIncorrect" xml:space="preserve">
    <value>Algorithm header CBOR type was incorrect, expected int or tstr.</value>
  </data>
  <data name="Sign1VerifyAlgIsRequired" xml:space="preserve">
    <value>Algorithm (alg) header is required and it must be a protected header.</value>
  </data>
  <data name="Sign1VerifyAlgorithmHeaderParameterWasMissing" xml:space="preserve">
    <value>Algorithm (alg) header parameter was missing.</value>
  </data>
  <data name="Sign1VerifyContentWasDetached" xml:space="preserve">
    <value>Content was not included in the message (detached message), provide a content to verify.</value>
  </data>
  <data name="Sign1VerifyContentWasEmbedded" xml:space="preserve">
    <value>Content was included in the message (embedded message) and yet another content was provided for verification.</value>
  </data>
  <data name="Sign1VerifyCriticalAndCounterSignNotSupported" xml:space="preserve">
    <value>Critical and Counter Signature headers are currently not supported.</value>
  </data>
</root>