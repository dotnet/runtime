<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="ko" original="../Strings.resx">
    <body>
      <trans-unit id="AddMissingCustomTypeMarshallerMembers">
        <source>Add missing custom type marshaller members</source>
        <target state="translated">누락된 사용자 지정 형식 마샬러 구성원 추가</target>
        <note />
      </trans-unit>
      <trans-unit id="AddMissingFeaturesToCustomTypeMarshaller">
        <source>Add missing features to the 'CustomTypeMarshallerAttribute' attribute</source>
        <target state="translated">'CustomTypeMarshallerAttribute' 특성에 누락된 기능 추가</target>
        <note />
      </trans-unit>
      <trans-unit id="CallerAllocConstructorMustHaveBufferSizeDescription">
        <source>When a constructor taking a 'Span&lt;byte&gt;' is specified on the native type, the type must set the BufferSize field on the 'System.Runtime.InteropServices.CustomTypeMarshallerAttribute' to provide the size of the caller-allocated buffer.</source>
        <target state="translated">'Span&lt;byte&gt;'을 사용하는 생성자가 네이티브 형식에 지정되면 형식은 호출자 할당 버퍼의 크기를 제공하기 위해 'System.Runtime.InteropServices.CustomTypeMarshallerAttribute'의 BufferSize 필드를 설정해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CallerAllocConstructorMustHaveBufferSizeMessage">
        <source>The native type '{0}' must set the 'BufferSize' field on the applied 'System.Runtime.InteropServices.CustomTypeMarshallerAttribute' to specify the size of the caller-allocated buffer because it has a constructor that takes a caller-allocated 'Span&lt;byte&gt;'</source>
        <target state="translated">네이티브 형식 '{0}'에는 호출자 할당 'Span&lt;byte&gt;'을 사용하는 생성자가 있으므로 호출자 할당 버퍼의 크기를 지정하려면 적용된 'System.Runtime.InteropServices.CustomTypeMarshallerAttribute'에 'BufferSize' 필드를 설정해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CallerAllocConstructorMustHaveBufferSizeTitle">
        <source>'BufferSize' should be set on 'CustomTypeMarshallerAttribute'</source>
        <target state="translated">'BufferSize'는 'CustomTypeMarshallerAttribute'에서 설정해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CallerAllocMarshallingShouldSupportAllocatingMarshallingFallbackDescription">
        <source>A type that supports marshalling from managed to native using a caller-allocated buffer should also support marshalling from managed to native where using a caller-allocated buffer is impossible.</source>
        <target state="translated">호출자 할당 버퍼를 사용하여 관리 형식에서 네이티브 형식으로의 마샬링을 지원하는 형식은 호출자 할당된 버퍼를 사용할 수 없는 경우 관리 형식에서 네이티브 형식으로의 마샬링도 지원해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CallerAllocMarshallingShouldSupportAllocatingMarshallingFallbackMessage">
        <source>Native type '{0}' has a constructor taking a caller-allocated buffer, but does not support marshalling in scenarios where using a caller-allocated buffer is impossible</source>
        <target state="translated">네이티브 형식 '{0}'에는 호출자 할당 버퍼를 사용하는 생성자가 있지만 호출자 할당 버퍼를 사용할 수 없는 시나리오에서는 마샬링을 지원하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CallerAllocatedBufferConstructorProvidedShouldSpecifyFeatureDescription">
        <source>A marshaller type that provides a constructor taking a caller-allocated 'Span&lt;byte&gt;' should specify that it supports the 'CallerAllocatedBuffer' feature.</source>
        <target state="translated">호출자 할당 'Span&lt;byte&gt;'을 사용하는 생성자를 제공하는 마샬러 형식은 'CallerAllocatedBuffer' 기능을 지원하도록 지정해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CallerAllocatedBufferConstructorProvidedShouldSpecifyFeatureMessage">
        <source>The type '{0}' provides a constructor taking a caller-allocated 'Span&lt;byte&gt;' but does not specify that it supports the 'CallerAllocatedBuffer' feature. The constructor will not be used unless the feature is specified.</source>
        <target state="translated">형식 '{0}'은(는) 호출자 할당 'Span&lt;byte&gt;'을 사용하는 생성자를 제공하지만 'CallerAllocatedBuffer' 기능을 지원하도록 지정하지 않습니다. 기능을 지정하지 않으면 생성자가 사용되지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CannotForwardToDllImportDescription">
        <source>The generated 'DllImportAttribute' will not have a value corresponding to '{0}'.</source>
        <target state="translated">생성된 'DllImportAttribute'에는 '{0}'에 해당하는 값이 없습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CannotForwardToDllImportMessage">
        <source>'{0}' has no equivalent in 'DllImportAtttribute' and will not be forwarded</source>
        <target state="translated">'{0}'에는 'DllImportAtttribute'에 해당하는 항목이 없으며 전달되지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CannotForwardToDllImportTitle">
        <source>Specified 'LibraryImportAttribute' arguments cannot be forwarded to 'DllImportAttribute'</source>
        <target state="translated">지정된 'LibraryImportAttribute' 인수는 'DllImportAttribute'로 전달할 수 없습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConfigurationNotSupportedDescription">
        <source>Source-generated P/Invokes will ignore any configuration that is not supported.</source>
        <target state="translated">소스 생성 P/Invoke는 지원되지 않는 구성을 무시합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConfigurationNotSupportedMessage">
        <source>The '{0}' configuration is not supported by source-generated P/Invokes. If the specified configuration is required, use a regular `DllImport` instead.</source>
        <target state="translated">'{0}' 구성은 소스 생성 P/Invoke에서 지원되지 않습니다. 지정된 구성이 필요한 경우 일반 'DllImport'를 대신 사용하세요.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConfigurationNotSupportedMessageMarshallingInfo">
        <source>The specified marshalling configuration is not supported by source-generated P/Invokes. {0}.</source>
        <target state="translated">지정된 마샬링 구성은 소스 생성 P/Invoke에서 지원되지 않습니다. {0}.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConfigurationNotSupportedMessageParameter">
        <source>The specified '{0}' configuration for parameter '{1}' is not supported by source-generated P/Invokes. If the specified configuration is required, use a regular `DllImport` instead.</source>
        <target state="translated">매개 변수 '{1}'에 대해 지정된 '{0}' 구성이 소스 생성 P/Invoke에서 지원되지 않습니다. 지정된 구성이 필요한 경우 일반 'DllImport'를 대신 사용하세요.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConfigurationNotSupportedMessageReturn">
        <source>The specified '{0}' configuration for the return value of method '{1}' is not supported by source-generated P/Invokes. If the specified configuration is required, use a regular `DllImport` instead.</source>
        <target state="translated">메서드 '{1}'의 반환 값에 대해 지정된 '{0}' 구성은 소스 생성 P/Invoke에서 지원되지 않습니다. 지정된 구성이 필요한 경우 일반 'DllImport'를 대신 사용하세요.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConfigurationNotSupportedMessageValue">
        <source>The specified value '{0}' for '{1}' is not supported by source-generated P/Invokes. If the specified value is required, use a regular `DllImport` instead.</source>
        <target state="translated">'{0}'에 대해 지정된 값 '{1}은(는) 소스 생성 P/Invoke에서 지원되지 않습니다. 지정된 값이 필요한 경우 일반 ‘DllImport’를 대신 사용하세요.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConfigurationNotSupportedTitle">
        <source>Specified configuration is not supported by source-generated P/Invokes.</source>
        <target state="translated">지정된 구성은 소스 생성 P/Invoke에서 지원되지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConstantAndElementCountInfoDisallowed">
        <source>Only one of 'ConstantElementCount' or 'ElementCountInfo' may be used in a 'MarshalUsingAttribute' for a given 'ElementIndirectionDepth'</source>
        <target state="translated">'ConstantElementCount' 또는 'ElementCountInfo' 중 하나만 지정된 'ElementIndirectionDepth'에 대한 'MarshalUsingAttribute'에서 사용할 수 있습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertNoPreserveSigDllImportToGeneratedMayProduceInvalidCode">
        <source>Automatically converting a P/Invoke with 'PreserveSig' set to 'false' to a source-generated P/Invoke may produce invalid code</source>
        <target state="translated">'PreserveSig'가 'false'로 설정된 P/Invoke를 소스 생성 P/Invoke로 자동 변환하면 잘못된 코드가 생성될 수 있습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToLibraryImport">
        <source>Convert to 'LibraryImport'</source>
        <target state="translated">'LibraryImport'로 변환</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToLibraryImportDescription">
        <source>Use 'LibraryImportAttribute' instead of 'DllImportAttribute' to generate P/Invoke marshalling code at compile time</source>
        <target state="translated">컴파일 타임에 P/Invoke 마샬링 코드를 생성하려면 'DllImportAttribute' 대신 'LibraryImportAttribute'를 사용하세요.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToLibraryImportMessage">
        <source>Mark the method '{0}' with 'LibraryImportAttribute' instead of 'DllImportAttribute' to generate P/Invoke marshalling code at compile time</source>
        <target state="translated">컴파일 타임에 P/Invoke 마샬링 코드를 생성하려면 'DllImportAttribute' 대신 'LibraryImportAttribute'를 사용하여 '{0}' 메서드를 표시하세요.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToLibraryImportTitle">
        <source>Use 'LibraryImportAttribute' instead of 'DllImportAttribute' to generate P/Invoke marshalling code at compile time</source>
        <target state="translated">컴파일 타임에 P/Invoke 마샬링 코드를 생성하려면 'DllImportAttribute' 대신 'LibraryImportAttribute'를 사용하세요.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToLibraryImportWarning">
        <source>Conversion to 'LibraryImport' may change behavior and compatibility. See {0} for more information.</source>
        <target state="translated">'LibraryImport'로 변환하면 동작과 호환성이 변경될 수 있습니다. 자세한 내용은 {0}을(를) 참조하세요.</target>
        <note>{0} is a documentation link</note>
      </trans-unit>
      <trans-unit id="ConvertToLibraryImportWithSuffix">
        <source>Convert to 'LibraryImport' with '{0}' suffix</source>
        <target state="translated">'{0}' 접미사가 있는 'LibraryImport'로 변환</target>
        <note />
      </trans-unit>
      <trans-unit id="CustomMarshallerTypeMustHaveRequiredShapeTitle">
        <source>Marshaller type does not have the required shape</source>
        <target state="translated">마샬러 형식에 필요한 셰이프가 없습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CustomMarshallerTypeMustSupportDirectionDescription">
        <source>A native must set the 'Direction' property on the 'CustomTypeMarshallerAttribute' to a value that sets at least one known flag value on the 'CustomTypeMarshallerDirection' enum</source>
        <target state="translated">네이티브는 'CustomTypeMarshallerDirection' 열거형에서 알려진 플래그 값을 하나 이상 설정하는 값으로 'CustomTypeMarshallerAttribute'의 'Direction' 속성을 설정해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CustomMarshallerTypeMustSupportDirectionMessage">
        <source>The native type '{0}' must set the 'Direction' property on the 'CustomTypeMarshallerAttribute' to a value that sets at least one known flag value on the 'CustomTypeMarshallerDirection' enum</source>
        <target state="translated">네이티브 형식 '{0}'은(는) 'CustomTypeMarshallerDirection' 열거형에서 알려진 플래그 값을 하나 이상 설정하는 값으로 'CustomTypeMarshallerAttribute'의 'Direction' 속성을 설정해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CustomTypeMarshallerAttributeMustBeValidDescription">
        <source>The 'CustomTypeMarshallerAttribute' attribute must be semantically valid</source>
        <target state="translated">'CustomTypeMarshallerAttribute' 특성은 의미 체계상 유효해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CustomTypeMarshallerAttributeMustBeValidMessage">
        <source>The 'CustomTypeMarshallerAttribute' on '{0}' is semantically invalid</source>
        <target state="translated">'{0}'의 'CustomTypeMarshallerAttribute'가 의미상 잘못되었습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CustomTypeMarshallingManagedToNativeUnsupported">
        <source>The specified parameter needs to be marshalled from managed to native, but the native type '{0}' does not support it.</source>
        <target state="translated">지정된 매개 변수를 관리 형식에서 네이티브 형식으로 마샬링해야 하지만 네이티브 형식 '{0}'에서 지원되지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CustomTypeMarshallingNativeToManagedUnsupported">
        <source>The specified parameter needs to be marshalled from native to managed, but the native type '{0}' does not support it.</source>
        <target state="translated">지정된 매개 변수는 네이티브 형식에서 관리 형식으로 마샬링되어야 하지만 네이티브 형식 '{0}'은(는) 이를 지원하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="FreeNativeMethodProvidedShouldSpecifyUnmanagedResourcesFeatureDescription">
        <source>A marshaller type that provides a 'FreeNative' method should specify that it supports the 'UnmanagedResources' feature.</source>
        <target state="translated">'FreeNative' 메서드를 제공하는 마샬러 형식은 'UnmanagedResources' 기능을 지원하도록 지정해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="FreeNativeMethodProvidedShouldSpecifyUnmanagedResourcesFeatureMessage">
        <source>The type '{0}' provides a 'FreeNative' method but does not specify that it supports the 'UnmanagedResources' feature. The method will not be used unless the feature is specified.</source>
        <target state="translated">형식 '{0}'은(는) 'FreeNative' 메서드를 제공하지만 'UnmanagedResources' 기능을 지원하도록 지정하지 않습니다. 기능을 지정하지 않으면 메서드가 사용되지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="FromNativeValueMethodProvidedShouldSpecifyTwoStageMarshallingFeatureDescription">
        <source>A marshaller type that provides a 'FromNativeValue' method should specify that it supports the 'TwoStageMarshalling' feature.</source>
        <target state="translated">'FromNativeValue' 메서드를 제공하는 마샬러 형식은 'TwoStageMarshalling' 기능을 지원하도록 지정해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="FromNativeValueMethodProvidedShouldSpecifyTwoStageMarshallingFeatureMessage">
        <source>The type '{0}' provides a 'FromNativeValue' method but does not specify that it supports the 'TwoStageMarshalling' feature. The method will not be used unless the feature is specified.</source>
        <target state="translated">형식 '{0}'은(는) 'FromNativeValue' 메서드를 제공하지만 'TwoStageMarshalling' 기능을 지원하도록 지정하지 않습니다. 기능을 지정하지 않으면 메서드가 사용되지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="GetPinnableReferenceReturnTypeBlittableDescription">
        <source>The return type of 'GetPinnableReference' (after accounting for 'ref') must be blittable.</source>
        <target state="translated">'GetPinnableReference'의 반환 형식('ref'를 고려한 후)은 blittable이어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="GetPinnableReferenceReturnTypeBlittableMessage">
        <source>The dereferenced type of the return type of the 'GetPinnableReference' method must be blittable</source>
        <target state="translated">'GetPinnableReference' 메서드 반환 형식의 역참조 형식은 blittable이어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="GetPinnableReferenceShouldSupportAllocatingMarshallingFallbackDescription">
        <source>A type that supports marshalling from managed to native by pinning should also support marshalling from managed to native where pinning is impossible.</source>
        <target state="translated">고정을 통해 관리 형식에서 네이티브 형식으로의 마샬링을 지원하는 형식은 고정이 불가능한 관리 형식에서 네이티브 형식으로의 마샬링도 지원해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="GetPinnableReferenceShouldSupportAllocatingMarshallingFallbackMessage">
        <source>Type '{0}' has a 'GetPinnableReference' method but its native type does not support marshalling in scenarios where pinning is impossible</source>
        <target state="translated">형식 '{0}'에 'GetPinnableReference' 메서드가 있지만 네이티브 형식은 고정이 불가능한 시나리오에서 마샬링을 지원하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="InTwoStageMarshallingRequiresToNativeValueDescription">
        <source>The 'TwoStageMarshalling' feature requires a 'TNativeType ToNativeValue()' method for the 'In' direction.</source>
        <target state="translated">'TwoStageMarshalling' 기능을 사용하려면 'In' 방향에 대해 'TNativeType ToNativeValue()' 메서드가 필요합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="InTwoStageMarshallingRequiresToNativeValueMessage">
        <source>A marshaller type '{0}' that supports marshalling in the 'In' direction with the 'TwoStageMarshalling' feature must provide a 'ToNativeValue' instance method that returns the native value</source>
        <target state="translated">'TwoStageMarshalling' 기능을 사용하여 'In' 방향의 마샬링을 지원하는 마샬러 형식 '{0}'은(는) 네이티브 값을 반환하는 'ToNativeValue' 인스턴스 메서드를 제공해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="InvalidAttributedMethodContainingTypeMissingModifiersMessage">
        <source>Method '{0}' is contained in a type '{1}' that is not marked 'partial'. P/Invoke source generation will ignore method '{0}'.</source>
        <target state="translated">메서드 '{0}'은(는) 'partial'로 표시되지 않은 '{1}' 형식에 포함되어 있습니다. P/Invoke 소스 생성은 '{0}' 메서드를 무시합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="InvalidAttributedMethodDescription">
        <source>Methods marked with 'LibraryImportAttribute' should be 'static', 'partial', and non-generic. P/Invoke source generation will ignore methods that are non-'static', non-'partial', or generic.</source>
        <target state="translated">'LibraryImportAttribute'로 표시된 메소드는 'static', 'partial' 및 비제네릭이어야 합니다. P/Invoke 소스 생성은 'static'이 아니거나 'partial'이 아니거나 제네릭인 메서드를 무시합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="InvalidAttributedMethodSignatureMessage">
        <source>Method '{0}' should be 'static', 'partial', and non-generic when marked with 'LibraryImportAttribute'. P/Invoke source generation will ignore method '{0}'.</source>
        <target state="translated">'{0}' 메서드는 'LibraryImportAttribute'로 표시된 경우 '정적', '부분적'이어야 하며 일반이 아니어야 합니다. P/Invoke 소스 생성은 '{0}' 메서드를 무시합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="InvalidCustomTypeMarshallerAttributeUsageTitle">
        <source>Invalid `CustomTypeMarshallerAttribute` usage</source>
        <target state="translated">잘못된 ‘CustomTypeMarshallerAttribute’ 사용법</target>
        <note />
      </trans-unit>
      <trans-unit id="InvalidLibraryImportAttributeUsageTitle">
        <source>Invalid 'LibraryImportAttribute' usage</source>
        <target state="translated">잘못된 'LibraryImportAttribute' 사용</target>
        <note />
      </trans-unit>
      <trans-unit id="InvalidNativeTypeTitle">
        <source>Specified native type is invalid</source>
        <target state="translated">지정한 네이티브 형식이 잘못되었습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="InvalidSignaturesInMarshallerShapeTitle">
        <source>Marshaller type has incompatible method signatures</source>
        <target state="translated">마샬러 형식에 호환되지 않는 메서드 시그니처가 있습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="InvalidStringMarshallingConfigurationDescription">
        <source>The configuration of 'StringMarshalling' and 'StringMarshallingCustomType' is invalid.</source>
        <target state="translated">'StringMarshalling' 및 'StringMarshallingCustomType'의 구성이 잘못되었습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="InvalidStringMarshallingConfigurationMessage">
        <source>The configuration of 'StringMarshalling' and 'StringMarshallingCustomType' on method '{0}' is invalid. {1}</source>
        <target state="translated">'{0}' 메서드의 'StringMarshalling' 및 'StringMarshallingCustomType' 구성이 잘못되었습니다. {1}</target>
        <note>{1} is a message containing additional details about what is not valid</note>
      </trans-unit>
      <trans-unit id="InvalidStringMarshallingConfigurationMissingCustomType">
        <source>'StringMarshallingCustomType' must be specified when 'StringMarshalling' is set to 'StringMarshalling.Custom'.</source>
        <target state="translated">'StringMarshalling'이 'StringMarshalling.Custom'으로 설정된 경우 'StringMarshallingCustomType'을 지정해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="InvalidStringMarshallingConfigurationNotCustom">
        <source>'StringMarshalling' should be set to 'StringMarshalling.Custom' when 'StringMarshallingCustomType' is specified.</source>
        <target state="translated">'StringMarshallingCustomType'이 지정된 경우 'StringMarshalling'은 'StringMarshalling.Custom'으로 설정되어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="LinearCollectionElementTypesMustMatchDescription">
        <source>The element type of the 'ReadOnlySpan' returned by 'GetManagedValuesSource' must be the same as the element type returned by 'GetManagedValuesDestination'.</source>
        <target state="translated">'GetManagedValuesSource'에서 반환된 'ReadOnlySpan'의 요소 형식은 'GetManagedValuesDestination'에서 반환된 요소 형식과 동일해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="LinearCollectionElementTypesMustMatchMessage">
        <source>The element type of the 'ReadOnlySpan' returned by 'GetManagedValuesSource' must be the same as the element type returned by 'GetManagedValuesDestination'</source>
        <target state="translated">'GetManagedValuesSource'에서 반환된 'ReadOnlySpan'의 요소 형식은 'GetManagedValuesDestination'에서 반환된 요소 형식과 동일해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="LinearCollectionInCallerAllocatedBufferRequiresSpanConstructorDescription">
        <source>A 'LinearCollection'-kind native type that supports the 'CallerAllocatedBuffer' feature must provide a three-parameter constructor taking the managed type as the first parameter, a 'Span&lt;byte&gt;' as the second parameter, and the native size of the element as the third parameter</source>
        <target state="translated">'CallerAllocatedBuffer' 기능을 지원하는 'LinearCollection' 종류의 네이티브 형식은 관리되는 형식을 첫 번째 매개 변수로 사용하고, 'Span&lt;byte&gt;'을 두 번째 매개 변수로 사용하고, 요소의 네이티브 크기를 세 번째 매개 변수로 사용하는 세 개의 매개 변수 생성자를 제공해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="LinearCollectionInCallerAllocatedBufferRequiresSpanConstructorMessage">
        <source>The type '{0}' specifies that it supports 'In' marshalling with the 'CallerAllocatedBuffer' feature for '{1}' but does not provide a three-parameter constructor that takes a '{1}' , a 'Span&lt;byte&gt;', and an 'int'</source>
        <target state="translated">형식 '{0}'은(는) '{1}'에 대한 'CallerAllocatedBuffer' 기능을 사용하여 'In' 마샬링을 지원하지만 '{1}', 'Span&lt;byte&gt;' 및 'int'를 사용하는 3개의 매개 변수 생성자를 제공하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="LinearCollectionInRequiresCollectionMethodsDescription">
        <source>A 'LinearCollection'-kind native type that supports marshalling in the 'In' direction must provide a 'GetManagedValuesSource' that returns a 'ReadOnlySpan&lt;&gt;' and a 'GetNativeValuesDestination' method that returns a 'Span&lt;byte&gt;'.</source>
        <target state="translated">'In' 방향으로 마샬링을 지원하는 'LinearCollection' 종류의 네이티브 형식은 'ReadOnlySpan&lt;&gt;'을 반환하는 'GetManagedValuesSource'와 'Span&lt;byte&gt;'를 반환하는 'GetNativeValuesDestination' 메서드를 제공해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="LinearCollectionInRequiresCollectionMethodsMessage">
        <source>The type '{0}' specifies that is supports marshalling in the 'In' direction, but it does not provide a 'GetManagedValuesSource' that returns a 'ReadOnlySpan&lt;&gt;' and a 'GetNativeValuesDestination' method that returns a 'Span&lt;byte&gt;'</source>
        <target state="translated">형식 '{0}'은(는) 'In' 방향으로 마샬링을 지원하도록 지정하지만 'ReadOnlySpan&lt;&gt;'을 반환하는 'GetManagedValuesSource'와 'Span&lt;byte&gt;를 반환하는 'GetNativeValuesDestination' 메서드를 제공하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="LinearCollectionInRequiresTwoParameterConstructorDescription">
        <source>A 'LinearCollection'-kind native type must provide a two-parameter constructor taking the managed type as the first parameter and the native size of the element as the second parameter</source>
        <target state="translated">'LinearCollection' 종류의 네이티브 형식은 관리되는 형식을 첫 번째 매개 변수로 사용하고 요소의 네이티브 크기를 두 번째 매개 변수로 사용하는 두 개의 매개 변수 생성자를 제공해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="LinearCollectionInRequiresTwoParameterConstructorMessage">
        <source>The type '{0}' specifies that it supports 'In' marshalling of '{1}' but does not provide a two-parameter constructor that takes a '{1}' as the first parameter and an 'int' as the second parameter</source>
        <target state="translated">형식 '{0}'은(는) '{1}'의 'In' 마샬링을 지원하도록 지정하지만 '{1}'을 첫 번째 매개 변수로 사용하고 'int'를 두 번째 매개 변수로 사용하는 두 개의 매개 변수 생성자를 제공하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="LinearCollectionOutRequiresCollectionMethodsDescription">
        <source>A 'LinearCollection'-kind native type that supports marshalling in the 'Out' direction must provide a 'GetManagedValuesDestination' that takes an 'int' and returns a 'Span&lt;&gt;' and a 'GetNativeValuesSource' method that takes an 'int' and rreturns a 'ReadOnlySpan&lt;byte&gt;'.</source>
        <target state="translated">'Out' 방향으로 마샬링을 지원하는 'LinearCollection' 종류의 네이티브 형식은 'int'를 사용하고 'Span&lt;&gt;'을 반환하는 'GetManagedValuesDestination'과 'int'를 사용하고 'ReadOnlySpan&lt;byte&gt;'를 반환하는 'GetNativeValuesSource' 메서드를 제공해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="LinearCollectionOutRequiresCollectionMethodsMessage">
        <source>The type '{0}' specifies that it supports marshalling in the 'Out' direction, but it does not provide a 'GetManagedValuesDestination' that takes an 'int' and returns a 'Span&lt;&gt;' and a 'GetNativeValuesSource' method that takes an 'int' and rreturns a 'ReadOnlySpan&lt;byte&gt;'</source>
        <target state="translated">형식 '{0}'은(는) 'Out' 방향으로 마샬링을 지원하지만 'int'를 사용하고 'Span&lt;&gt;'을 반환하는 'GetManagedValuesDestination' 및 'int'를 사용하고 'ReadOnlySpan&lt;byte&gt;'를 반환하는 'GetNativeValuesSource' 메서드를 제공하지 않음을 지정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="LinearCollectionOutRequiresIntConstructorDescription">
        <source>A 'LinearCollection'-kind native type that supports marshalling in the 'Out' direction must provide a constructor that takes the size of the native element as an 'int'.</source>
        <target state="translated">'Out' 방향으로 마샬링을 지원하는 'LinearCollection' 종류의 네이티브 형식은 네이티브 요소의 크기를 'int'로 사용하는 생성자를 제공해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="LinearCollectionOutRequiresIntConstructorMessage">
        <source>The type '{0}' specifies that it supports marshalling in the 'Out' direction, but it does not provide a constructor that takes the size of the native element as an 'int'.</source>
        <target state="translated">형식 '{0}'은(는) 'Out' 방향으로 마샬링을 지원하도록 지정하지만 네이티브 요소의 크기를 'int'로 사용하는 생성자를 제공하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="MarshallerDirectionMustBeValidDescription">
        <source>The specified marshaller direction must be a valid value of the 'System.Runtime.InteropServices.CustomMarshallerDirection' enum.</source>
        <target state="translated">지정된 마샬러 방향은 'System.Runtime.InteropServices.CustomMarshallerDirection' 열거형의 유효한 값이어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="MarshallerDirectionMustBeValidMessage">
        <source>The specified custom marshaller direction for '{0}' is invalid</source>
        <target state="translated">'{0}'에 대해 지정된 사용자 지정 마샬러 방향이 잘못되었습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="MarshallerGetPinnableReferenceRequiresTwoStageMarshallingDescription">
        <source>The use cases for 'GetPinnableReference' are not applicable in any scenarios where 'TwoStageMarshalling' is not also required.</source>
        <target state="translated">'GetPinnableReference'의 사용 사례는 'TwoStageMarshalling'도 필요하지 않은 시나리오에는 적용되지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="MarshallerGetPinnableReferenceRequiresTwoStageMarshallingMessage">
        <source>The 'GetPinnableReference' method cannot be provided on the native type '{0}' unless the 'TwoStageMarshalling' feature is also supported</source>
        <target state="translated">'TwoStageMarshalling' 기능도 지원되지 않는 한 'GetPinnableReference' 메서드는 네이티브 형식 '{0}'에 제공할 수 없습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="MarshallerKindMustBeValidDescription">
        <source>The specified marshaller kind must be a valid value of the 'System.Runtime.InteropServices.CustomMarshallerKind' enum.</source>
        <target state="translated">지정된 마샬러 종류는 'System.Runtime.InteropServices.CustomMarshallerKind' 열거형의 유효한 값이어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="MarshallerKindMustBeValidMessage">
        <source>The specified custom marshaller kind for '{0}' is invalid</source>
        <target state="translated">'{0}'에 대한 지정된 사용자 지정 마샬러 종류가 잘못되었습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="MarshallerTypeMustSpecifyManagedTypeDescription">
        <source>A type with a 'System.Runtime.InteropServices.CustomTypeMarshallerAttribute' must specify a managed type</source>
        <target state="translated">'System.Runtime.InteropServices.CustomTypeMarshallerAttribute'가 있는 형식은 관리 형식을 지정해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="MarshallerTypeMustSpecifyManagedTypeMessage">
        <source>The type '{0}' does not specify a managed type in the 'System.Runtime.InteropServices.CustomTypeMarshallerAttribute' applied to the type</source>
        <target state="translated">형식 '{0}'은(는) 해당 형식에 적용된 'System.Runtime.InteropServices.CustomTypeMarshallerAttribute'의 관리 형식을 지정하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="MissingAllocatingMarshallingFallbackTitle">
        <source>Marshaller type does not support allocating constructor</source>
        <target state="translated">마샬러 형식은 생성자 할당을 지원하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="NativeGenericTypeMustBeClosedOrMatchArityDescription">
        <source>The native type '{0}' must be a closed generic or have the same number of generic parameters as the managed type so the emitted code can use a specific instantiation.</source>
        <target state="translated">네이티브 형식 '{0}'은(는) 닫힌 제네릭이거나 내보낸 코드에서 특정 인스턴스화를 사용할 수 있도록 관리되는 형식과 동일한 수의 제네릭 매개 변수를 가져야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="NativeGenericTypeMustBeClosedOrMatchArityMessage">
        <source>The native type '{0}' for managed type '{1}' must be a closed generic type or have the same arity as the managed type.</source>
        <target state="translated">관리 형식 '{1}'에 대한 네이티브 형식 '{0}'은(는) 폐쇄된 일반 형식이거나 관리 형식과 인자가 동일해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="NativeTypeMustBeBlittableDescription">
        <source>A native type must be blittable.</source>
        <target state="translated">네이티브 형식은 blittable이어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="NativeTypeMustBeBlittableMessage">
        <source>The native type '{0}' for type '{1}' must be blittable</source>
        <target state="translated">형식 '{1}'의 네이티브 형식 '{0}'은(는) blittable이어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="NativeTypeMustBePointerSizedDescription">
        <source>The native type must be pointer sized so the pinned result of 'GetPinnableReference' can be cast to the native type.</source>
        <target state="translated">네이티브 형식은 'GetPinnableReference'의 고정된 결과를 네이티브 형식으로 캐스팅할 수 있도록 포인터 크기여야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="NativeTypeMustBePointerSizedMessage">
        <source>The native type '{0}' must be pointer sized because the managed type '{1}' has a 'GetPinnableReference' method</source>
        <target state="translated">관리 형식 '{1}'에 'GetPinnableReference' 메서드가 있으므로 네이티브 형식 '{0}'은(는) 포인터 크기여야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="NativeTypeMustHaveCustomTypeMarshallerAttributeDescription">
        <source>A native type for a given type must have the 'System.Runtime.InteropServices.CustomTypeMarshallerAttribute' that specifies this type as the managed type.</source>
        <target state="translated">지정된 형식의 네이티브 형식에는 이 형식을 관리 형식으로 지정하는 'System.Runtime.InteropServices.CustomTypeMarshallerAttribute'가 있어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="NativeTypeMustHaveCustomTypeMarshallerAttributeMessage">
        <source>The native type for the type '{0}' must be a type with the 'System.Runtime.InteropServices.CustomTypeMarshallerAttribute' that specifies this type as the managed type</source>
        <target state="translated">형식 '{0}'의 네이티브 형식은 이 형식을 관리 형식으로 지정하는 'System.Runtime.InteropServices.CustomTypeMarshallerAttribute'가 있는 형식이어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="OutRequiresToManagedDescription">
        <source>A 'Value' or 'LinearCollection'-kind native type that supports marshalling in the 'Out' direction must provide a 'ToManaged' method that returns the managed type.</source>
        <target state="translated">'Out' 방향으로 마샬링을 지원하는 'Value' 또는 'LinearCollection' 종류의 네이티브 형식은 관리 형식을 반환하는 'ToManaged' 메서드를 제공해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="OutRequiresToManagedMessage">
        <source>The type '{0}' specifies it supports marshalling in the 'Out' direction, but it does not provide a 'ToManaged' method that returns the managed type</source>
        <target state="translated">형식 '{0}'은(는) 'Out' 방향으로 마샬링을 지원하도록 지정하지만 관리 형식을 반환하는 'ToManaged' 메서드를 제공하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="OutTwoStageMarshallingRequiresFromNativeValueDescription">
        <source>The 'TwoStageMarshalling' feature requires a 'void FromNativeValue(TNativeType value)' method for the 'Out' direction.</source>
        <target state="translated">'TwoStageMarshalling' 기능을 사용하려면 'Out' 방향에 대해 'void FromNativeValue(TNativeType 값)' 메서드가 필요합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="OutTwoStageMarshallingRequiresFromNativeValueMessage">
        <source>The marshaller type '{0}' supports marshalling in the 'Out' direction with the 'TwoStageMarshalling' feature, but it does not provide a 'FromNativeValue' instance method that returns 'void' and takes one parameter.</source>
        <target state="translated">마샬러 형식 '{0}'은(는) 'TwoStageMarshalling' 기능을 사용하여 'Out' 방향으로 마샬링을 지원하지만 'void'를 반환하고 하나의 매개 변수를 사용하는 'FromNativeValue' 인스턴스 메서드를 제공하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ProvidedMethodsNotSpecifiedInFeaturesTitle">
        <source>Marshaller type defines a well-known method without specifying support for the corresponding feature</source>
        <target state="translated">마샬러 형식은 해당 기능에 대한 지원을 지정하지 않고 잘 알려진 메서드를 정의합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="RefNativeValueUnsupportedDescription">
        <source>The 'Value' property must not be a 'ref' or 'readonly ref' property.</source>
        <target state="translated">'값' 속성은 'ref' 또는 'readonly ref' 속성이 아니어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="RefNativeValueUnsupportedMessage">
        <source>The 'Value' property on the native type '{0}' must not be a 'ref' or 'readonly ref' property.</source>
        <target state="translated">네이티브 형식 '{0}'의 'Value' 속성은 'ref' 또는 'readonly ref' 속성이 아니어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="SafeHandleByRefMustBeConcrete">
        <source>An abstract type derived from 'SafeHandle' cannot be marshalled by reference. The provided type must be concrete.</source>
        <target state="translated">'SafeHandle'에서 파생된 추상 형식은 참조로 마샬링할 수 없습니다. 제공된 형식은 구체적이어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ToNativeValueMethodProvidedShouldSpecifyTwoStageMarshallingFeatureDescription">
        <source>A marshaller type that provides a 'ToNativeValue' method should specify that it supports the 'TwoStageMarshalling' feature.</source>
        <target state="translated">'ToNativeValue' 메서드를 제공하는 마샬러 형식은 'TwoStageMarshalling' 기능을 지원하도록 지정해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ToNativeValueMethodProvidedShouldSpecifyTwoStageMarshallingFeatureMessage">
        <source>The type '{0}' provides a 'ToNativeValue' method but does not specify that it supports the 'TwoStageMarshalling' feature. The method will not be used unless the feature is specified.</source>
        <target state="translated">형식 '{0}'은(는) 'ToNativeValue' 메서드를 제공하지만 'TwoStageMarshalling' 기능을 지원하도록 지정하지 않습니다. 기능을 지정하지 않으면 메서드가 사용되지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="TwoStageMarshallingNativeTypesMustMatchDescription">
        <source>The return type of 'ToNativeValue' and the parameter type of 'FromNativeValue' must be the same.</source>
        <target state="translated">'ToNativeValue'의 반환 형식과 'FromNativeValue'의 매개 변수 형식은 동일해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="TwoStageMarshallingNativeTypesMustMatchMessage">
        <source>The return type of 'ToNativeValue' and the parameter type of 'FromNativeValue' must be the same</source>
        <target state="translated">'ToNativeValue'의 반환 형식과 'FromNativeValue'의 매개 변수 형식은 동일해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="TypeNotSupportedDescription">
        <source>For types that are not supported by source-generated P/Invokes, the resulting P/Invoke will rely on the underlying runtime to marshal the specified type.</source>
        <target state="translated">소스 생성 P/Invoke에서 지원하지 않는 형식의 경우 결과 P/Invoke는 기본 런타임에 의존하여 지정된 형식을 마샬링합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="TypeNotSupportedMessageParameter">
        <source>The type '{0}' is not supported by source-generated P/Invokes. The generated source will not handle marshalling of parameter '{1}'.</source>
        <target state="translated">형식 '{0}'은(는) 소스 생성 P/Invoke에서 지원되지 않습니다. 생성된 소스는 '{1}' 매개 변수의 마샬링을 처리하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="TypeNotSupportedMessageParameterWithDetails">
        <source>{0} The generated source will not handle marshalling of parameter '{1}'.</source>
        <target state="translated">{0} 생성된 소스는 '{1}' 매개 변수의 마샬링을 처리하지 않습니다.</target>
        <note>{0} is a message containing additional details about what is not supported
{1} is the name of the parameter</note>
      </trans-unit>
      <trans-unit id="TypeNotSupportedMessageReturn">
        <source>The type '{0}' is not supported by source-generated P/Invokes. The generated source will not handle marshalling of the return value of method '{1}'.</source>
        <target state="translated">형식 '{0}'은(는) 소스 생성 P/Invoke에서 지원되지 않습니다. 생성된 소스는 '{1}' 메서드의 반환 값 마샬링을 처리하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="TypeNotSupportedMessageReturnWithDetails">
        <source>{0} The generated source will not handle marshalling of the return value of method '{1}'.</source>
        <target state="translated">{0} 생성된 소스는 '{1}' 메서드의 반환 값 마샬링을 처리하지 않습니다.</target>
        <note>{0} is a message containing additional details about what is not supported
{1} is the name of the method</note>
      </trans-unit>
      <trans-unit id="TypeNotSupportedTitle">
        <source>Specified type is not supported by source-generated P/Invokes</source>
        <target state="translated">지정된 형식은 소스 생성 P/Invoke에서 지원되지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="UnmanagedResourcesRequiresFreeNativeDescription">
        <source>The 'UnmanagedResources' feature requires a 'void FreeNative()' method.</source>
        <target state="translated">'UnmanagedResources' 기능에는 'void FreeNative()' 메서드가 필요합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="UnmanagedResourcesRequiresFreeNativeMessage">
        <source>The marshaller type '{0}' supports marshalling with the 'UnmanagedResources' feature, but it does not provide a parameterless 'FreeNative' instance method that returns 'void'</source>
        <target state="translated">마샬러 형식 '{0}'은(는) 'UnmanagedResources' 기능을 사용한 마샬링을 지원하지만 'void'를 반환하는 매개 변수 없는 'FreeNative' 인스턴스 메서드를 제공하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ValueInCallerAllocatedBufferRequiresSpanConstructorDescription">
        <source>A 'Value'-kind native type that supports the 'CallerAllocatedBuffer' feature must provide a two-parameter constructor taking the managed type and a 'Span' of an 'unmanaged' type as parameters</source>
        <target state="translated">'CallerAllocatedBuffer' 기능을 지원하는 '값' 종류의 네이티브 형식은 관리되는 형식과 '관리되지 않는' 형식의 'Span'을 매개 변수로 사용하는 두 개의 매개 변수 생성자를 제공해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ValueInCallerAllocatedBufferRequiresSpanConstructorMessage">
        <source>The type '{0}' specifies that it supports 'In' marshalling with the 'CallerAllocatedBuffer' feature for '{1}' but does not provide a two-parameter constructor that takes a '{1}' and 'Span' of an 'unmanaged' type as parameters</source>
        <target state="translated">형식 '{0}은(는) '{1}에 대한 'CallerAllocatedBuffer' 기능으로 'In' 마샬링을 지원하도록 지정하지만 '{1} 및 '관리되지 않는' 형식의 'Span'을 매개 변수로 사용하는 2개의 매개 변수 생성자는 제공하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ValueInRequiresOneParameterConstructorDescription">
        <source>A 'Value'-kind native type must provide a one-parameter constructor taking the managed type as a parameter</source>
        <target state="translated">'Value' 종류의 네이티브 형식은 관리 형식을 매개 변수로 사용하는 단일 매개 변수 생성자를 제공해야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ValueInRequiresOneParameterConstructorMessage">
        <source>The type '{0}' specifies that it supports 'In' marshalling of '{1}' but does not provide a one-parameter constructor that takes a '{1}' as a parameter</source>
        <target state="translated">형식 '{0}'은(는) '{1}'의 'In' 마샬링을 지원하도록 지정하지만 '{1}'을(를) 매개 변수로 사용하는 단일 매개 변수 생성자는 제공하지 않습니다.</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>