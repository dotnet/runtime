// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Microsoft.Interop
{
    public static class IncrementalGeneratorInitializationContextExtensions
    {
        public static IncrementalValueProvider<StubEnvironment> CreateStubEnvironmentProvider(this IncrementalGeneratorInitializationContext context)
        {
            return context.CompilationProvider
                .Select(static (compilation, ct) =>
                {
                    TargetFramework targetFramework = DetermineTargetFramework(compilation, out Version targetFrameworkVersion);
                    return (compilation, targetFramework, targetFrameworkVersion);
                })
                .Select(
                    static (data, ct) =>
                        new StubEnvironment(
                            data.compilation,
                            data.targetFramework,
                            data.targetFrameworkVersion,
                            data.compilation.SourceModule.GetAttributes().Any(attr => attr.AttributeClass?.ToDisplayString() == TypeNames.System_Runtime_CompilerServices_SkipLocalsInitAttribute))
                );

            static TargetFramework DetermineTargetFramework(Compilation compilation, out Version version)
            {
                IAssemblySymbol systemAssembly = compilation.GetSpecialType(SpecialType.System_Object).ContainingAssembly;
                version = systemAssembly.Identity.Version;

                return systemAssembly.Identity.Name switch
                {
                    // .NET Framework
                    "mscorlib" => TargetFramework.Framework,
                    // .NET Standard
                    "netstandard" => TargetFramework.Standard,
                    // .NET Core (when version < 5.0) or .NET
                    "System.Runtime" or "System.Private.CoreLib" =>
                        (version.Major < 5) ? TargetFramework.Core : TargetFramework.Net,
                    _ => TargetFramework.Unknown,
                };
            }
        }

        public static void RegisterDiagnostics(this IncrementalGeneratorInitializationContext context, IncrementalValuesProvider<Diagnostic> diagnostics)
        {
            context.RegisterSourceOutput(diagnostics, (context, diagnostic) =>
            {
                context.ReportDiagnostic(diagnostic);
            });
        }

        public static void RegisterConcatenatedSyntaxOutputs<TNode>(this IncrementalGeneratorInitializationContext context, IncrementalValuesProvider<TNode> nodes, string fileName)
            where TNode : SyntaxNode
        {
            IncrementalValueProvider<string> generatedMethods = nodes
                .Select(
                    static (node, ct) => node.NormalizeWhitespace().ToFullString())
                .Collect()
                .Select(static (generatedSources, ct) =>
                {
                    StringBuilder source = new();
                    // Mark in source that the file is auto-generated.
                    source.AppendLine("// <auto-generated/>");
                    foreach (string generated in generatedSources)
                    {
                        source.AppendLine(generated);
                    }
                    return source.ToString();
                });

            context.RegisterSourceOutput(generatedMethods,
                (context, source) =>
                {
                    context.AddSource(fileName, source);
                });
        }
    }
}
