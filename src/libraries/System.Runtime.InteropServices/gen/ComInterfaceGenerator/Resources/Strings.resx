<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfigurationNotSupportedDescription" xml:space="preserve">
    <value>Source-generated COM will ignore any configuration that is not supported.</value>
  </data>
  <data name="ConfigurationNotSupportedMessage" xml:space="preserve">
    <value>The '{0}' configuration is not supported by source-generated COM. If the specified configuration is required, use `ComImport` instead.</value>
  </data>
  <data name="ConfigurationNotSupportedMessageMarshallingInfo" xml:space="preserve">
    <value>The specified marshalling configuration is not supported by source-generated COM. {0}.</value>
  </data>
  <data name="ConfigurationNotSupportedMessageParameter" xml:space="preserve">
    <value>The specified '{0}' configuration for parameter '{1}' is not supported by source-generated COM. If the specified configuration is required, use `ComImport` instead.</value>
  </data>
  <data name="ConfigurationNotSupportedMessageReturn" xml:space="preserve">
    <value>The specified '{0}' configuration for the return value of method '{1}' is not supported by source-generated COM. If the specified configuration is required, use `ComImport` instead.</value>
  </data>
  <data name="ConfigurationNotSupportedMessageValue" xml:space="preserve">
    <value>The specified value '{0}' for '{1}' is not supported by source-generated COM. If the specified configuration is required, use `ComImport` instead.</value>
  </data>
  <data name="ConfigurationNotSupportedTitle" xml:space="preserve">
    <value>Specified configuration is not supported by source-generated COM.</value>
  </data>
  <data name="InvalidStringMarshallingConfigurationDescription" xml:space="preserve">
    <value>The configuration of 'StringMarshalling' and 'StringMarshallingCustomType' is invalid.</value>
  </data>
  <data name="InvalidStringMarshallingConfigurationOnMethodMessage" xml:space="preserve">
    <value>The configuration of 'StringMarshalling' and 'StringMarshallingCustomType' on method '{0}' is invalid. {1}</value>
    <comment>{1} is a message containing additional details about what is not valid</comment>
  </data>
  <data name="InvalidStringMarshallingConfigurationMissingCustomType" xml:space="preserve">
    <value>'StringMarshallingCustomType' must be specified when 'StringMarshalling' is set to 'StringMarshalling.Custom'.</value>
  </data>
  <data name="InvalidStringMarshallingConfigurationNotCustom" xml:space="preserve">
    <value>'StringMarshalling' should be set to 'StringMarshalling.Custom' when 'StringMarshallingCustomType' is specified.</value>
  </data>
  <data name="TypeNotSupportedDescription" xml:space="preserve">
    <value>For types that are not supported by source-generated COM, the resulting function pointer will rely on the underlying runtime to marshal the specified type.</value>
  </data>
  <data name="TypeNotSupportedMessageParameter" xml:space="preserve">
    <value>The type '{0}' is not supported by source-generated COM. The generated source will not handle marshalling of parameter '{1}'.</value>
  </data>
  <data name="TypeNotSupportedMessageParameterWithDetails" xml:space="preserve">
    <value>{0} The generated source will not handle marshalling of parameter '{1}'.</value>
    <comment>{0} is a message containing additional details about what is not supported
{1} is the name of the parameter</comment>
  </data>
  <data name="TypeNotSupportedMessageReturn" xml:space="preserve">
    <value>The type '{0}' is not supported by source-generated COM. The generated source will not handle marshalling of the return value of method '{1}'.</value>
  </data>
  <data name="TypeNotSupportedMessageReturnWithDetails" xml:space="preserve">
    <value>{0} The generated source will not handle marshalling of the return value of method '{1}'.</value>
    <comment>{0} is a message containing additional details about what is not supported
{1} is the name of the method</comment>
  </data>
  <data name="TypeNotSupportedTitle" xml:space="preserve">
    <value>Specified type is not supported by source-generated COM</value>
  </data>
  <data name="InvalidAttributedMethodContainingTypeMissingModifiersMessage" xml:space="preserve">
    <value>Method '{0}' is contained in a type '{1}' that is not marked 'partial'. COM source generation will ignore method '{0}'.</value>
  </data>
  <data name="InvalidAttributedMethodDescription" xml:space="preserve">
    <value>Methods on interfaces marked with 'GeneratedComInterfaceAttribute' should be non-generic. COM source generation will ignore methods that are generic.</value>
  </data>
  <data name="InvalidAttributedMethodSignatureMessage" xml:space="preserve">
    <value>Method '{0}' should be non-generic when on interfaces marked with the 'GeneratedComInterfaceAttribute'. COM source generation will ignore method '{0}'.</value>
  </data>
  <data name="InvalidVirtualMethodIndexAttributeUsage" xml:space="preserve">
    <value>Invalid 'VirtualMethodIndexAttribute' usage</value>
  </data>
  <data name="InvalidExceptionMarshallingConfigurationDescription" xml:space="preserve">
    <value>The configuration of 'ExceptionMarshalling' and 'ExceptionMarshallingCustomType' is invalid.</value>
  </data>
  <data name="InvalidExceptionMarshallingConfigurationMessage" xml:space="preserve">
    <value>The configuration of 'ExceptionMarshalling' and 'ExceptionMarshallingCustomType' on method '{0}' is invalid. {1}</value>
    <comment>{1} is a message containing additional details about what is not valid</comment>
  </data>
  <data name="InvalidExceptionMarshallingConfigurationMissingCustomType" xml:space="preserve">
    <value>'ExceptionMarshallingCustomType' must be specified when 'ExceptionMarshalling' is set to 'ExceptionMarshalling.Custom'.</value>
  </data>
  <data name="InvalidExceptionMarshallingConfigurationNotCustom" xml:space="preserve">
    <value>'ExceptionMarshalling' should be set to 'ExceptionMarshalling.Custom' when 'ExceptionMarshallingCustomType' is specified.</value>
  </data>
  <data name="InvalidExceptionMarshallingValue" xml:space="preserve">
    <value>The provided value is not a known flag of the 'ExceptionMarshalling' enum.</value>
  </data>
  <data name="InterfaceTypeNotSupportedTitle" xml:space="preserve">
    <value>'GeneratedComInterfaceType' does not support the 'ComInterfaceType' value supplied to 'InterfaceTypeAttribute' on the same type.</value>
  </data>
  <data name="InterfaceTypeNotSupportedMessage" xml:space="preserve">
    <value>Using 'GeneratedComInterfaceAttribute' and 'InterfaceTypeAttribute' is not supported with 'ComInterfaceType' value '{0}'.</value>
  </data>
  <data name="InvalidAttributedMethodContainingTypeMissingUnmanagedObjectUnwrapperAttributeMessage" xml:space="preserve">
    <value>Containing type of method with VirtualMethodIndexAttribute does not have a UnmanagedObjectUnwrapperAttribute. </value>
  </data>
  <data name="MethodNotDeclaredInAttributedInterfaceDescription" xml:space="preserve">
    <value>All methods must be declared in the same partial definition of a 'GeneratedComInterface'-attributed interface type to ensure reliable calculation for virtual method table offsets.</value>
  </data>
  <data name="MethodNotDeclaredInAttributedInterfaceMessage" xml:space="preserve">
    <value>The method '{0}' is declared on a different partial definition of the interface '{1}' than the definition that has the 'GeneratedComInterface' attribute</value>
  </data>
  <data name="MethodNotDeclaredInAttributedInterfaceTitle" xml:space="preserve">
    <value>Method is declared in different partial declaration than the 'GeneratedComInterface' attribute.</value>
  </data>
  <data name="InvalidGeneratedComInterfaceAttributeUsageDescription" xml:space="preserve">
    <value>Interfaces attributed with 'GeneratedComInterfaceAttribute' must have 'public' or 'internal' accessibility and be partial, non-generic, and must specify a GUID with 'System.Runtime.InteropServices.GuidAttribute'.</value>
  </data>
  <data name="InvalidGeneratedComInterfaceAttributeUsageMissingGuidAttribute" xml:space="preserve">
    <value>Interface '{0}' is attributed with 'GeneratedComInterfaceAttribute' but is missing 'System.Runtime.InteropServices.GuidAttribute'.</value>
  </data>
  <data name="InvalidGeneratedComInterfaceAttributeUsageTitle" xml:space="preserve">
    <value>Invalid 'GeneratedComInterfaceAttribute' usage.</value>
  </data>
  <data name="MultipleComInterfaceBaseTypesDescription" xml:space="preserve">
    <value>A 'GeneratedComInterfaceAttribute'-attributed interface can only derive from at most one other 'GeneratedComInterfaceAttribute'-attributed interface.</value>
  </data>
  <data name="MultipleComInterfaceBaseTypesMessage" xml:space="preserve">
    <value>Interface '{0}' is derived from two or more interfaces attributed with 'GeneratedComInterfaceAttribute'.</value>
  </data>
  <data name="MultipleComInterfaceBaseTypesTitle" xml:space="preserve">
    <value>Specified interface derives from two or more 'GeneratedComInterfaceAttribute'-attributed interfaces.</value>
  </data>
  <data name="InvalidGeneratedComInterfaceAttributeUsageInterfaceIsGeneric" xml:space="preserve">
    <value>Interface '{0}' is attributed with 'GeneratedComInterfaceAttribute' but is generic.</value>
  </data>
  <data name="AnalysisFailedDescription" xml:space="preserve">
    <value>The analysis required to generate code for this interface or method has failed due to an unexpected code pattern. If you are using new or unconventional syntax, consider using other syntax.</value>
  </data>
  <data name="AnalysisFailedInterfaceMessage" xml:space="preserve">
    <value>Analysis of interface '{0}' has failed. ComInterfaceGenerator will not generate code for this interface.</value>
  </data>
  <data name="AnalysisFailedMethodMessage" xml:space="preserve">
    <value>Analysis of method '{0}' has failed. ComInterfaceGenerator will not generate code for this method.</value>
  </data>
  <data name="AnalysisFailedTitle" xml:space="preserve">
    <value>Analysis for COM interface generation has failed.</value>
  </data>
  <data name="GeneratedComInterfaceStringMarshallingMustMatchBase" xml:space="preserve">
    <value>The configuration of 'StringMarshalling' and 'StringMarshallingCustomType' must match the base COM interface.</value>
  </data>
  <data name="BaseInterfaceCannotBeGeneratedDescription" xml:space="preserve">
    <value>COM interface source generation requires all base COM interfaces to be valid interfaces. Fix any issues on the base interface to resolve this diagnostic.</value>
  </data>
  <data name="BaseInterfaceCannotBeGeneratedMessage" xml:space="preserve">
    <value>COM interface {0} inherits from {1}, which has errors. ComInterfaceGenerator will not generate source for {0}.</value>
  </data>
  <data name="BaseInterfaceCannotBeGeneratedTitle" xml:space="preserve">
    <value>The base COM interface failed to generate source. Code will not be generated for this interface.</value>
  </data>
  <data name="InvalidStringMarshallingConfigurationOnInterfaceMessage" xml:space="preserve">
    <value>The configuration of 'StringMarshalling' and 'StringMarshallingCustomType' on interface '{0}' is invalid. {1}</value>
  </data>
  <data name="InvalidGeneratedComInterfaceAttributeUsageInterfaceNotAccessible" xml:space="preserve">
    <value>Interface '{0}' is attributed with 'GeneratedComInterfaceAttribute' but is not accessible by generated code. The interface and all containing types must have accessibility 'internal' or 'public' for generated code to access it. {1}</value>
    <comment>{1} is details about which type/containing type is not accessible</comment>
  </data>
  <data name="StringMarshallingCustomTypeNotAccessibleByGeneratedCode" xml:space="preserve">
    <value>The type '{0}' specified as 'GeneratedComInterfaceAttribute.StringMarshallingCustomType' is not accessible by generated code. The type must have at least 'internal' accessibility. {1}</value>
    <comment>{1} is details about which type/containing type is not accessible</comment>
  </data>
  <data name="RequiresAllowUnsafeBlocksDescription" xml:space="preserve">
    <value>'GeneratedComInterfaceAttribute' and 'GeneratedComClassAttribute' require unsafe code. Project must be updated with '&lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;'.</value>
  </data>
  <data name="RequiresAllowUnsafeBlocksMessage" xml:space="preserve">
    <value>'GeneratedComInterfaceAttribute' and 'GeneratedComClassAttribute' require unsafe code. Project must be updated with '&lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;'.</value>
  </data>
  <data name="RequiresAllowUnsafeBlocksTitle" xml:space="preserve">
    <value>'GeneratedComInterfaceAttribute' and 'GeneratedComClassAttribute' require unsafe code.</value>
  </data>
  <data name="InvalidGeneratedComInterfaceUsageMissingPartialModifier" xml:space="preserve">
    <value>The interface '{0}' or one of its containing types is missing the 'partial' keyword. Code will not be generated for '{0}'.</value>
  </data>
  <data name="InvalidGeneratedComClassAttributeUsageDescription" xml:space="preserve">
    <value>Classes with 'GeneratedComClassAttribute' must implement one or more interfaces with 'GeneratedComInterfaceAttribute', be marked partial, and be non-generic.</value>
  </data>
  <data name="InvalidGeneratedComClassAttributeUsageMissingPartialModifier" xml:space="preserve">
    <value>Class '{0}' with 'GeneratedComClassAttribute' or one of its containing types is not marked 'partial'.</value>
  </data>
  <data name="InvalidGeneratedComClassAttributeUsageTitle" xml:space="preserve">
    <value>Invalid 'GeneratedComClassAttribute' usage</value>
  </data>
  <data name="ConvertToGeneratedComInterfaceDescription" xml:space="preserve">
    <value>Use 'GeneratedComInterfaceAttribute' instead of 'ComImportAttribute' to generate COM marshalling code at compile time</value>
  </data>
  <data name="ConvertToGeneratedComInterfaceMayRequireCustomMarshalling" xml:space="preserve">
    <value>Converting this API to 'GeneratedComInterfaceAttribute' will require additional code to provide custom marshallers for some parameters.</value>
  </data>
  <data name="ConvertToGeneratedComInterfaceMessage" xml:space="preserve">
    <value>Mark the type '{0}' with 'GeneratedComInterfaceAttribute' instead of 'ComImportAttribute' to generate COM marshalling code at compile time</value>
  </data>
  <data name="ConvertToGeneratedComInterfaceTitle" xml:space="preserve">
    <value>Convert to 'GeneratedComInterface'</value>
  </data>
  <data name="AddGeneratedComClassAttributeDescription" xml:space="preserve">
    <value>This type implements at least one type with the 'GeneratedComInterfaceAttribute' attribute. Add the 'GeneratedComClassAttribute' to enable passing this type to COM and exposing the COM interfaces for the types with the 'GeneratedComInterfaceAttribute' from objects of this type.</value>
  </data>
  <data name="AddGeneratedComClassAttributeMessage" xml:space="preserve">
    <value>Add the 'GeneratedComClassAttribute' to '{0}' to enable passing objects of type '{0}' to COM</value>
  </data>
  <data name="AddGeneratedComClassAttributeTitle" xml:space="preserve">
    <value>Add 'GeneratedComClassAttribute' to enable passing objects of this type to COM</value>
  </data>
  <data name="ComHostingDoesNotSupportGeneratedComInterfaceDescription" xml:space="preserve">
    <value>.NET COM hosting with 'EnableComHosting' only supports built-in COM interop. It does not support source-generated COM interop with 'GeneratedComInterfaceAttribute'.</value>
  </data>
  <data name="ComHostingDoesNotSupportGeneratedComInterfaceMessage" xml:space="preserve">
    <value>.NET COM hosting with 'EnableComHosting' does not support interfaces with the 'GeneratedComInterfaceAttribute'. Change any COM exposed interfaces implemented by '{0}' to use the 'System.Runtime.InteropServices.ComVisibleAttribute' instead</value>
  </data>
  <data name="ComHostingDoesNotSupportGeneratedComInterfaceTitle" xml:space="preserve">
    <value>.NET COM hosting with 'EnableComHosting' does not support interfaces with the 'GeneratedComInterfaceAttribute'</value>
  </data>
  <data name="AddGeneratedComClassAddUnsafe" xml:space="preserve">
    <value>Add 'GeneratedComClassAttribute' to enable passing objects of this type to COM and allow unsafe code</value>
  </data>
  <data name="ConvertToGeneratedComInterfaceAddUnsafe" xml:space="preserve">
    <value>Convert to 'GeneratedComInterface' and allow unsafe code</value>
  </data>
  <data name="RuntimeComApisDoNotSupportSourceGeneratedComDescription" xml:space="preserve">
    <value>COM Interop APIs on 'System.Runtime.InteropServices.Marshal' do not support source-generated COM and will fail at runtime</value>
  </data>
  <data name="RuntimeComApisDoNotSupportSourceGeneratedComMessage" xml:space="preserve">
    <value>The method '{0}' only supports runtime-based COM interop and will not work with type '{1}'</value>
  </data>
  <data name="RuntimeComApisDoNotSupportSourceGeneratedComTitle" xml:space="preserve">
    <value>COM Interop APIs on 'System.Runtime.InteropServices.Marshal' do not support source-generated COM</value>
  </data>
  <data name="ConvertComInterfaceMayProduceInvalidCode" xml:space="preserve">
    <value>Converting this interface to use 'GeneratedComInterfaceAttribute' may produce invalid code and may require additional work</value>
  </data>
  <data name="ClassDoesNotImplementAnyGeneratedComInterfacesDescription" xml:space="preserve">
    <value>A class with 'GeneratedComClassAttribute' must implement at least one interface with 'GeneratedComInterfaceAttribute' or else the generated code with not have an effect.</value>
  </data>
  <data name="ClassDoesNotImplementAnyGeneratedComInterfacesMessage" xml:space="preserve">
    <value>Class '{0}' with 'GeneratedComClassAttribute' does not implement any interfaces with 'GeneratedComInterfaceAttribute'. Source will not be generated for '{0}'.</value>
  </data>
  <data name="CastsBetweenRuntimeComAndSourceGeneratedComNotSupportedDescription" xml:space="preserve">
    <value>Casting between a 'ComImport' type and a source-generated COM type is not supported and will fail at runtime</value>
  </data>
  <data name="CastsBetweenRuntimeComAndSourceGeneratedComNotSupportedMessage" xml:space="preserve">
    <value>Casting between a 'ComImport' type and a source-generated COM type is not supported</value>
  </data>
  <data name="CastsBetweenRuntimeComAndSourceGeneratedComNotSupportedTitle" xml:space="preserve">
    <value>Casting between a 'ComImport' type and a source-generated COM type is not supported</value>
  </data>
</root>
