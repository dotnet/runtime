<Project>
  <Import Sdk="Microsoft.Build.Traversal" Project="Sdk.props" />

  <PropertyGroup>
    <TraversalGlobalProperties>BuildAllProjects=true</TraversalGlobalProperties>
    <AdditionalBuildTargetFrameworks Condition="'$(DotNetBuildFromSource)' == 'true'">$(AdditionalBuildTargetFrameworks);package-$(Configuration)</AdditionalBuildTargetFrameworks>
    <BuildAllOOBPackages Condition="'$(BuildAllOOBPackages)' == ''">true</BuildAllOOBPackages>
  </PropertyGroup>
  
  <PropertyGroup>
    <PackagingTaskAssembly>$(NuGetPackageRoot)microsoft.dotnet.build.tasks.packaging\$(MicrosoftDotNetBuildTasksPackagingVersion)\tools\</PackagingTaskAssembly>
    <PackagingTaskAssembly Condition="'$(MSBuildRuntimeType)' == 'core'">$(PackagingTaskAssembly)netcoreapp2.1\</PackagingTaskAssembly>
    <PackagingTaskAssembly Condition="'$(MSBuildRuntimeType)' != 'core'">$(PackagingTaskAssembly)net472\</PackagingTaskAssembly>
    <PackagingTaskAssembly>$(PackagingTaskAssembly)Microsoft.DotNet.Build.Tasks.Packaging.dll</PackagingTaskAssembly>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="$(PkgDir)*\*.proj" Exclude="$(PkgDir)test\*" />
    <ProjectReference Include="$(MSBuildThisFileDirectory)*\pkg\**\*.pkgproj" Condition="('$(BuildAllConfigurations)' == 'true' or '$(DotNetBuildFromSource)' == 'true') And '$(BuildAllOOBPackages)' == 'true'" />
    <!-- If setting BuildAllOOBPackages to false, add bellow the individual OOB packages you want to continue to build -->
  </ItemGroup>

  <!-- Need the PackageIndexFile file property from baseline.props -->
  <Import Project="$(PkgDir)baseline\baseline.props" />

  <!-- Calculate PackageDownload items for restore. -->
  <Import Project="$(RepositoryEngineeringDir)restore\harvestPackages.targets" Condition="'$(MSBuildRestoreSessionId)' != ''" />

  <!--
    Updates the package index to mark all packages we are building that can go stable as stable.
    this will allow for a kicked off build to control package stability at queue time. This does edit
    the package index in-place but that shouldn't cause any problems for official builds are the only
    ones that might do this. After we ship a stable set of packages this target should be ran and the
    changes to the package index should be commited to the repo.
  -->
  <UsingTask TaskName="UpdatePackageIndex" AssemblyFile="$(PackagingTaskAssembly)"/>
  <Target Name="UpdatePackageIndexWithStableVersions"
          BeforeTargets="Build"
          Condition="'$(DotNetFinalVersionKind)' == 'release'">
    <ItemGroup>
      <!--
      The private packages don't get stabilized so they don't need to be included
      in the set of packages that we are gathering stable versions from.
      -->
      <PkgProjects Include="$(PkgDir)*\*.pkgproj" Exclude="$(MSBuildThisFileDirectory)pkg\*Private*\*.pkgproj" />
      <PkgProjects Include="*\pkg\**\*.pkgproj" />
    </ItemGroup>

    <MSBuild Targets="GetPackageIdentityIfStable"
             BuildInParallel="$(BuildInParallel)"
             Projects="@(PkgProjects)"
             RemoveProperties="Configuration">
      <Output TaskParameter="TargetOutputs" ItemName="_StablePackages" />
    </MSBuild>

    <Message Text="Marking package '%(_StablePackages.Identity)' stable with version '%(_StablePackages.Version)'" />

    <UpdatePackageIndex
      PackageIndexFile="$(PackageIndexFile)"
      StablePackages="@(_StablePackages)" />

  </Target>

  <!-- Generate a version text file we include in our packages -->
  <Target Name="GenerateVersionFileForPackages"
          BeforeTargets="Build"
          DependsOnTargets="InitializeSourceControlInformationFromSourceControlManager">
    <Error Condition="'$(SourceRevisionId)' == ''" Text="SourceRevisionId is not set, which means the SourceLink targets are not included in the build. Those are needed to produce a correct sha for our build outputs." />

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(VersionFileForPackages)))" />
    <WriteLinesToFile File="$(VersionFileForPackages)"
                      Lines="$(SourceRevisionId)"
                      Overwrite="true" />
  </Target>

  <Target Name="SetAzureDevOpsVariableForBuiltPackages"
          Condition="'$(ContinuousIntegrationBuild)' == 'true'"
          AfterTargets="Build">
    <ItemGroup>
      <_PackageReports Include="$(PackageReportDir)*.json" />
    </ItemGroup>

    <Message Condition="'@(_PackageReports)' != '' and Exists('$(ArtifactsDir)packages')" Importance="High" Text="##vso[task.setvariable variable=_librariesBuildProducedPackages]true" />
  </Target>

  <Import Sdk="Microsoft.Build.Traversal" Project="Sdk.targets" />

  <!-- Pack is a no-op and should just invoke build. -->
  <Target Name="Pack" DependsOnTargets="Build" />
</Project>
