<Project Sdk="Microsoft.Build.Traversal">

  <PropertyGroup>
    <TraversalGlobalProperties>BuildAllProjects=true</TraversalGlobalProperties>
  </PropertyGroup>

  <ItemGroup>
    <_allSrc Include="$(MSBuildThisFileDirectory)*\src\*.*proj"
             Exclude="@(ProjectExclusions);
                      $(MSBuildThisFileDirectory)*\src\**\*.shproj" />
    <!-- Build these packages which reference many other projects in the allconfigurations leg only. -->
    <_allSrc Remove="Microsoft.Internal.Runtime.AspNetCore.Transport\src\Microsoft.Internal.Runtime.AspNetCore.Transport.proj;
                     Microsoft.Internal.Runtime.WindowsDesktop.Transport\src\Microsoft.Internal.Runtime.WindowsDesktop.Transport.proj;
                     Microsoft.Windows.Compatibility\src\Microsoft.Windows.Compatibility.csproj"
             Condition="'$(BuildAllConfigurations)' != 'true'" />

    <NonNetCoreAppProject Include="@(_allSrc)"
                          Exclude="@(NetCoreAppLibrary->'%(Identity)\src\%(Identity).csproj');
                                   $(MSBuildThisFileDirectory)Microsoft.VisualBasic.Core\src\Microsoft.VisualBasic.Core.vbproj;
                                   $(MSBuildThisFileDirectory)System.Runtime.CompilerServices.Unsafe\src\System.Runtime.CompilerServices.Unsafe.ilproj" />
    <!-- During an official build, build the identity package only in the allconfigurations build, otherwise always. -->
    <NonNetCoreAppProject Include="$(MSBuildThisFileDirectory)*\pkg\runtime.native.*.proj" Condition="'$(BuildingAnOfficialBuildLeg)' != 'true' or '$(BuildAllConfigurations)' == 'true'" />
    <!-- During an official Build, build the rid specific package matching the OutputRid only outside of an allconfigurations build and only when targeting the CoreCLR runtime.
         The limitation on the CoreCLR runtime is entirely artificial but avoids duplicate assets being publish. -->
    <NonNetCoreAppProject Include="$(MSBuildThisFileDirectory)*\pkg\runtime.$(OutputRid).*.proj" Condition="'$(BuildingAnOfficialBuildLeg)' != 'true' or
                                                                                                            ('$(BuildAllConfigurations)' != 'true' and '$(RuntimeFlavor)' == '$(PrimaryRuntimeFlavor)')" />

    <NetCoreAppProject Include="$(CoreLibProject);
                                @(_allSrc)"
                       Exclude="@(NonNetCoreAppProject)" />
    <ManualShimProject Include="shims\manual\*.csproj" />
    <ApiCompatProject Include="shims\ApiCompat.proj"
                      Condition="'$(DotNetBuildFromSource)' != 'true' and
                                 ('$(BuildTargetFramework)' == '$(NetCoreAppCurrent)' or '$(BuildTargetFramework)' == '') and
                                 '$(RunApiCompat)' != 'false'" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="@(NetCoreAppProject)" />

    <!-- Restore only and build before/after. -->
    <ProjectReference Include="@(NonNetCoreAppProject);
                               @(ManualShimProject);
                               @(ApiCompatProject)"
                      Condition="'$(MSBuildRestoreSessionId)' != ''" />
  </ItemGroup>

  <Target Name="BuildNonNetCoreAppProjects"
          AfterTargets="Build">
    <MSBuild Targets="Build"
             BuildInParallel="true"
             Projects="@(NonNetCoreAppProject)"
             Properties="$(TraversalGlobalProperties)" />
  </Target>

  <Target Name="BuildManualShims"
          AfterTargets="BuildNonNetCoreAppProjects"
          Condition="'@(ManualShimProject)' != ''">
    <MSBuild Targets="Build"
             Projects="@(ManualShimProject)"
             Properties="$(TraversalGlobalProperties)" />
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)illink-trimassemblies.targets"
          Condition="'$(BuildTargetFramework)' == '$(NetCoreAppCurrent)' or '$(BuildTargetFramework)' == ''" />

  <Target Name="RunApiCompat"
          Condition="'@(ApiCompatProject)' != ''"
          AfterTargets="BuildManualShims">
    <MSBuild Targets="Build"
             Projects="@(ApiCompatProject)"
             Properties="$(TraversalGlobalProperties)" />
  </Target>

  <Target Name="SetAzureDevOpsVariableForBuiltPackages"
          Condition="'$(ContinuousIntegrationBuild)' == 'true'"
          AfterTargets="Build;Pack">
    <Message Condition="Exists('$(ArtifactsDir)packages')" Importance="High" Text="##vso[task.setvariable variable=_librariesBuildProducedPackages]true" />
  </Target>

</Project>
