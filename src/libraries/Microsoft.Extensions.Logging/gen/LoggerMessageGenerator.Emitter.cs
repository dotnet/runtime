// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

namespace Microsoft.Extensions.Logging.Generators
{
    public partial class LoggerMessageGenerator
    {
        internal class Emitter
        {
            // The maximum arity of LoggerMessage.Define.
            private const int MaxLoggerMessageDefineArguments = 6;
            private const int DefaultStringBuilderCapacity = 1024;

            private readonly string _generatedCodeAttribute =
                $"global::System.CodeDom.Compiler.GeneratedCodeAttribute(" +
                $"\"{typeof(Emitter).Assembly.GetName().Name}\", " +
                $"\"{typeof(Emitter).Assembly.GetName().Version}\")";
            private readonly Stack<StringBuilder> _builders = new();

            public string Emit(IReadOnlyList<LoggerClass> logClasses, CancellationToken cancellationToken)
            {
                StringBuilder sb = GetStringBuilder();
                sb.Append("// <auto-generated/>\n");
                sb.Append("#nullable enable\n");

                foreach (LoggerClass lc in logClasses)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    sb.Append(GenType(lc, GetStringBuilder()));
                }

                return sb.ToString();
            }

            private static string EscapeMessageString(string message)
            {
                return message
                    .Replace("\n", "\\n")
                    .Replace("\r", "\\r")
                    .Replace("\"", "\\\"");
            }

            private static bool UseLoggerMessageDefine(LoggerMethod lm)
            {
                bool result =
                    (lm.RegularParameters.Count <= MaxLoggerMessageDefineArguments) && // more args than LoggerMessage.Define can handle
                    (lm.Level != null) &&                                              // dynamic log level, which LoggerMessage.Define can't handle
                    (lm.TemplateList.Count == lm.RegularParameters.Count);             // mismatch in template to args, which LoggerMessage.Define can't handle

                if (result)
                {
                    // make sure the order of the templates matches the order of the logging method parameter
                    int count = 0;
                    foreach (string t in lm.TemplateList)
                    {
                        if (!t.Equals(lm.RegularParameters[count].Name, StringComparison.OrdinalIgnoreCase))
                        {
                            // order doesn't match, can't use LoggerMessage.Define
                            return false;
                        }
                    }
                }

                return result;
            }

            private string GenType(LoggerClass lc, StringBuilder sb)
            {
                foreach (LoggerMethod lm in lc.Methods)
                {
                    if (!UseLoggerMessageDefine(lm))
                    {
                        sb.Append(GenStruct(lm));
                    }

                    sb.Append(GenLogMethod(lm));
                }

                sb.Append(GenEnumerationHelper(lc));

                if (string.IsNullOrWhiteSpace(lc.Namespace))
                {
                    return $@"
                        partial class {lc.Name} {lc.Constraints}
                        {{
                            {sb}
                        }}
                        ";
                }

                return $@"
                    namespace {lc.Namespace}
                    {{
                        partial class {lc.Name} {lc.Constraints}
                        {{
                            {sb}
                        }}
                    }}
                    ";
            }

            private string GenStruct(LoggerMethod lm)
            {
                var constructor = string.Empty;
                if (lm.RegularParameters.Count > 0)
                {
                    constructor = $@"
                                public __{lm.Name}Struct({GenArguments(lm, GetStringBuilder())})
                                {{
{GenFieldAssignments(lm, GetStringBuilder())}
                                }}
";
                }

                var toString = $@"
                                public override string ToString()
                                {{
{GenVariableAssignments(lm, GetStringBuilder())}
                                    return $""{lm.Message}"";
                                }}
";

                return $@"
                            [{_generatedCodeAttribute}]
                            private readonly struct __{lm.Name}Struct : global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.KeyValuePair<string, object?>>
                            {{
{GenFields(lm, GetStringBuilder())}
{constructor}
{toString}
                                public static string Format(__{lm.Name}Struct state, global::System.Exception? ex) => state.ToString();

                                public int Count => {lm.RegularParameters.Count + 1};

                                public global::System.Collections.Generic.KeyValuePair<string, object?> this[int index]
                                {{
                                    get => index switch
                                    {{
{GenCases(lm, GetStringBuilder())}
                                        _ => throw new global::System.IndexOutOfRangeException(nameof(index)),  // return the same exception LoggerMessage.Define returns in this case
                                    }};
                                }}

                                public global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, object?>> GetEnumerator()
                                {{
                                    for (int i = 0; i < {lm.RegularParameters.Count + 1}; i++)
                                    {{
                                        yield return this[i];
                                    }}
                                }}

                                global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
                            }}
";
            }

            private string GenFields(LoggerMethod lm, StringBuilder sb)
            {
                foreach (LoggerParameter p in lm.RegularParameters)
                {
                    sb.Append($"                                private readonly {p.Type} _{p.Name};\n");
                }

                return sb.ToString();
            }

            private string GenFieldAssignments(LoggerMethod lm, StringBuilder sb)
            {
                foreach (LoggerParameter p in lm.RegularParameters)
                {
                    sb.Append($"                                    this._{p.Name} = {p.Name};\n");
                }

                return sb.ToString();
            }

            private string GenVariableAssignments(LoggerMethod lm, StringBuilder sb)
            {
                foreach (KeyValuePair<string, string> t in lm.TemplateMap)
                {
                    int index = 0;
                    foreach (LoggerParameter p in lm.RegularParameters)
                    {
                        if (t.Key.Equals(p.Name, System.StringComparison.OrdinalIgnoreCase))
                        {
                            break;
                        }

                        index++;
                    }

                    // check for an index that's too big, this can happen in some cases of malformed input
                    if (index < lm.RegularParameters.Count)
                    {
                        if (lm.RegularParameters[index].IsEnumerable)
                        {
                            sb.Append($"                                    var {t.Key} = "
                                + $"__Enumerate((global::System.Collections.IEnumerable ?)this._{lm.RegularParameters[index].Name});\n");
                        }
                        else
                        {
                            sb.Append($"                                    var {t.Key} = this._{lm.RegularParameters[index].Name};\n");
                        }
                    }
                }

                return sb.ToString();
            }

            private string GenCases(LoggerMethod lm, StringBuilder sb)
            {
                int index = 0;
                foreach (LoggerParameter p in lm.RegularParameters)
                {
                    string name = p.Name;
                    if (lm.TemplateMap.ContainsKey(name))
                    {
                        // take the letter casing from the template
                        name = lm.TemplateMap[name];
                    }

                    sb.Append($"                                        {index++} => new global::System.Collections.Generic.KeyValuePair<string, object?>(\"{name}\", this._{p.Name}),\n");
                }

                sb.Append($"                                        {index++} => new global::System.Collections.Generic.KeyValuePair<string, object?>(\"{{OriginalFormat}}\", \"{EscapeMessageString(lm.Message)}\"),\n");
                return sb.ToString();
            }

            private string GenCallbackArguments(LoggerMethod lm, StringBuilder sb)
            {
                foreach (LoggerParameter p in lm.RegularParameters)
                {
                    sb.Append($"{p.Name}, ");
                }

                return sb.ToString();
            }

            private string GenDefineTypes(LoggerMethod lm, bool brackets, StringBuilder sb)
            {
                foreach (LoggerParameter p in lm.RegularParameters)
                {
                    if (sb.Length > 0)
                    {
                        sb.Append(", ");
                    }

                    sb.Append($"{p.Type}");
                }

                string result = sb.ToString();
                if (!string.IsNullOrEmpty(result))
                {
                    if (brackets)
                    {
                        result = "<" + result + ">";
                    }
                    else
                    {
                        result += ", ";
                    }
                }

                return result;
            }

            private string GenParameters(LoggerMethod lm, StringBuilder sb)
            {
                foreach (LoggerParameter p in lm.AllParameters)
                {
                    if (sb.Length > 0)
                    {
                        sb.Append(", ");
                    }

                    sb.Append($"{p.Type} {p.Name}");
                }

                return sb.ToString();
            }

            private string GenArguments(LoggerMethod lm, StringBuilder sb)
            {
                foreach (LoggerParameter p in lm.RegularParameters)
                {
                    if (sb.Length > 0)
                    {
                        sb.Append(", ");
                    }

                    sb.Append($"{p.Type} {p.Name}");
                }

                return sb.ToString();
            }

            private string GenHolder(LoggerMethod lm, StringBuilder sb)
            {
                string typeName = $"__{lm.Name}Struct";

                sb.Append($"new {typeName}(");
                foreach (LoggerParameter p in lm.RegularParameters)
                {
                    if (p != lm.RegularParameters[0])
                    {
                        sb.Append(", ");
                    }

                    sb.Append(p.Name);
                }

                sb.Append(')');

                return sb.ToString();
            }

            private string GenLogMethod(LoggerMethod lm)
            {
                string level = string.Empty;

                if (lm.Level == null)
                {
                    foreach (LoggerParameter p in lm.AllParameters)
                    {
                        if (p.IsLogLevel)
                        {
                            level = p.Name;
                            break;
                        }
                    }
                }
                else
                {
                    level = lm.Level switch
                    {
                        0 => "global::Microsoft.Extensions.Logging.LogLevel.Trace",
                        1 => "global::Microsoft.Extensions.Logging.LogLevel.Debug",
                        2 => "global::Microsoft.Extensions.Logging.LogLevel.Information",
                        3 => "global::Microsoft.Extensions.Logging.LogLevel.Warning",
                        4 => "global::Microsoft.Extensions.Logging.LogLevel.Error",
                        5 => "global::Microsoft.Extensions.Logging.LogLevel.Critical",
                        6 => "global::Microsoft.Extensions.Logging.LogLevel.None",
                        _ => $"(global::Microsoft.Extensions.Logging.LogLevel){lm.Level}",
                    };
                }

                string eventName;
                if (string.IsNullOrWhiteSpace(lm.EventName))
                {
                    eventName = $"nameof({lm.Name})";
                }
                else
                {
                    eventName = $"\"{lm.EventName}\"";
                }

                string exceptionArg = "null";
                foreach (LoggerParameter p in lm.AllParameters)
                {
                    if (p.IsException)
                    {
                        exceptionArg = p.Name;
                        break;
                    }
                }

                string logger = lm.LoggerField;
                foreach (LoggerParameter p in lm.AllParameters)
                {
                    if (p.IsLogger)
                    {
                        logger = p.Name;
                        break;
                    }
                }

                string extension = (lm.IsExtensionMethod ? "this " : string.Empty);

                if (UseLoggerMessageDefine(lm))
                {
                    return $@"
                            [{_generatedCodeAttribute}]
                            private static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, {GenDefineTypes(lm, false, GetStringBuilder())}global::System.Exception?> __{lm.Name}Callback =
                                global::Microsoft.Extensions.Logging.LoggerMessage.Define{GenDefineTypes(lm, true, GetStringBuilder())}({level}, new global::Microsoft.Extensions.Logging.EventId({lm.EventId}, {eventName}), ""{EscapeMessageString(lm.Message)}""); 

                            [{_generatedCodeAttribute}]
                            {lm.Modifiers} void {lm.Name}({extension}{GenParameters(lm, GetStringBuilder())})
                            {{
                                if ({logger}.IsEnabled({level}))
                                {{
                                    __{lm.Name}Callback({logger}, {GenCallbackArguments(lm, GetStringBuilder())}{exceptionArg});
                                }}
                            }}
                        ";
                }
                else
                {
                    return $@"
                            [{_generatedCodeAttribute}]
                            {lm.Modifiers} void {lm.Name}({extension}{GenParameters(lm, GetStringBuilder())})
                            {{
                                if ({logger}.IsEnabled({level}))
                                {{
                                    {logger}.Log(
                                        {level},
                                        new global::Microsoft.Extensions.Logging.EventId({lm.EventId}, {eventName}),
                                        {GenHolder(lm, GetStringBuilder())},
                                        {exceptionArg},
                                        __{lm.Name}Struct.Format);
                                }}
                            }}
                        ";
                }
            }

            private string GenEnumerationHelper(LoggerClass lc)
            {
                foreach (LoggerMethod lm in lc.Methods)
                {
                    if (UseLoggerMessageDefine(lm))
                    {
                        foreach (LoggerParameter p in lm.RegularParameters)
                        {
                            if (p.IsEnumerable)
                            {
                                return $@"
                            [{_generatedCodeAttribute}]
                            private static string __Enumerate(global::System.Collections.IEnumerable? enumerable)
                            {{
                                if (enumerable == null)
                                {{
                                    return ""(null)"";
                                }}

                                var sb = new global::System.Text.StringBuilder();
                                _ = sb.Append('[');

                                bool first = true;
                                foreach (object e in enumerable)
                                {{
                                    if (!first)
                                    {{
                                        _ = sb.Append("", "");
                                    }}

                                    if (e == null)
                                    {{
                                        _ = sb.Append(""(null)"");
                                    }}
                                    else
                                    {{
                                        if (e is global::System.IFormattable fmt)
                                        {{
                                            _ = sb.Append(fmt.ToString(null, global::System.Globalization.CultureInfo.InvariantCulture));
                                        }}
                                        else
                                        {{
                                            _ = sb.Append(e);
                                        }}
                                    }}

                                    first = false;
                                }}

                                _ = sb.Append(']');

                                return sb.ToString();
                            }}
";
                            }
                        }
                    }
                }

                return string.Empty;
            }

            // our own cheezy object pool since we can't use the .NET core version (since this code runs in legacy .NET framework)
            private StringBuilder GetStringBuilder()
            {
                return new StringBuilder(DefaultStringBuilderCapacity);
            }
        }
    }
}
