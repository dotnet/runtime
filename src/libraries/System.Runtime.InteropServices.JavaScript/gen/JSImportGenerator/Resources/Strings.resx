<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfigurationNotSupportedTitle" xml:space="preserve">
    <value>Specified configuration is not supported by source-generated JavaScript interop.</value>
  </data>
  <data name="ConfigurationNotSupportedMessage" xml:space="preserve">
    <value>The '{0}' configuration is not supported by source-generated JavaScript interop.</value>
  </data>
  <data name="ConfigurationNotSupportedDescription" xml:space="preserve">
    <value>Source-generated JavaScript interop will ignore any configuration that is not supported.</value>
  </data>
  <data name="ConfigurationNotSupportedMessageValue" xml:space="preserve">
    <value>The specified value '{0}' for '{1}' is not supported by source-generated JavaScript interop.</value>
  </data>
  <data name="ConfigurationNotSupportedMessageMarshallingInfo" xml:space="preserve">
    <value>The specified marshalling configuration is not supported by source-generated JavaScript interop. {0}.</value>
  </data>
  <data name="TypeNotSupportedTitle" xml:space="preserve">
    <value>Specified type is not supported by source-generated JavaScript interop.</value>
  </data>
  <data name="TypeNotSupportedMessageReturnWithDetails" xml:space="preserve">
    <value>{0} The generated source will not handle marshalling of the return value of method '{1}'. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
    <comment>{0} is a message containing additional details about what is not supported
{1} is the name of the method</comment>
  </data>
  <data name="TypeNotSupportedDescription" xml:space="preserve">
    <value>Type is not supported by source-generated JavaScript interop.</value>
  </data>
  <data name="TypeNotSupportedMessageParameter" xml:space="preserve">
    <value>The type '{0}' is not supported by source-generated JavaScript interop. The generated source will not handle marshalling of parameter '{1}'. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
  </data>
  <data name="TypeNotSupportedMessageReturn" xml:space="preserve">
    <value>The type '{0}' is not supported by source-generated JavaScript interop. The generated source will not handle marshalling of the return value of method '{1}'. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
  </data>
  <data name="TypeNotSupportedMessageParameterWithDetails" xml:space="preserve">
    <value>{0} The generated source will not handle marshalling of parameter '{1}'. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
    <comment>{0} is a message containing additional details about what is not supported
{1} is the name of the parameter</comment>
  </data>
  <data name="ConfigurationNotSupportedMessageReturn" xml:space="preserve">
    <value>The specified '{0}' configuration for the return value of method '{1}' is not supported by source-generated JavaScript interop. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
  </data>
  <data name="ConfigurationNotSupportedMessageParameter" xml:space="preserve">
    <value>The specified '{0}' configuration for parameter '{1}' is not supported by source-generated JavaScript interop. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
  </data>
  <data name="InvalidJSImportAttributeUsageTitle" xml:space="preserve">
    <value>Invalid 'JSImportAttribute' usage</value>
  </data>
  <data name="InvalidJSExportAttributeUsageTitle" xml:space="preserve">
    <value>Invalid 'JSExportAttribute' usage</value>
  </data>
  <data name="InvalidJSImportAttributedMethodSignatureMessage" xml:space="preserve">
    <value>Method '{0}' should be 'static', 'partial', and non-generic when marked with 'JSImportAttribute'. JavaScript interop source generation will ignore method '{0}'. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
  </data>
  <data name="InvalidJSExportAttributedMethodSignatureMessage" xml:space="preserve">
    <value>Method '{0}' should be 'static', non-partial and non-generic when marked with 'JSExportAttribute'. JavaScript interop source generation will ignore method '{0}'. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
  </data>
  <data name="InvalidJSImportAttributedMethodDescription" xml:space="preserve">
    <value>Methods marked with 'JSImportAttribute' should be 'static', 'partial', and non-generic. JavaScript interop source generation will ignore methods that are non-'static', non-'partial', or generic.</value>
  </data>
  <data name="InvalidJSExportAttributedMethodDescription" xml:space="preserve">
    <value>Methods marked with 'JSImportAttribute' should be 'static', non-partial, and non-generic. JavaScript interop source generation will ignore methods that are non-'static', 'partial', or generic.</value>
  </data>
  <data name="InvalidAttributedMethodContainingTypeMissingModifiersMessage" xml:space="preserve">
    <value>Method '{0}' is contained in a type '{1}' that is not marked 'partial'. JavaScript interop source generation will ignore method '{0}'. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
  </data>
  <data name="DiscardOnlyVoid" xml:space="preserve">
    <value>'JSType.Discard' could be only used with void return argument.</value>
  </data>
  <data name="FuncArgumentNotSupported" xml:space="preserve">
    <value>Type {0} is not supported as argument of marshaled function.</value>
    <comment>{0} is a type of the argument</comment>
  </data>
  <data name="FuncTooManyArgs" xml:space="preserve">
    <value>Only functions with up to 3 arguments are currently supported by source-generated JavaScript interop.</value>
  </data>
  <data name="FuncWrongArgumentCount" xml:space="preserve">
    <value>'JSType.Function' should have same number of generic arguments as the marshaled managed type.</value>
  </data>
  <data name="InOutRefNotSupported" xml:space="preserve">
    <value>Parameters with 'in', 'out' and 'ref' modifiers are not supported by source-generated JavaScript interop.</value>
  </data>
  <data name="SpanAndTaskNotSupported" xml:space="preserve">
    <value>Marshaling 'Span' on method which returns 'Task' is not supported.</value>
  </data>
  <data name="TypeNotSupportedName" xml:space="preserve">
    <value>Type {0} is not supported by source-generated JavaScript interop.</value>
    <comment>{0} is a type of the argument</comment>
  </data>
  <data name="UseJSMarshalAsAttribute" xml:space="preserve">
    <value>Please annotate the argument with 'JSMarshalAsAttribute' to specify marshaling of {0}.</value>
    <comment>{0} is a type of the argument</comment>
  </data>
  <data name="JSImportRequiresAllowUnsafeBlocksDescription" xml:space="preserve">
    <value>JSImportAttribute requires unsafe code. Project must be updated with '&lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;'.</value>
  </data>
  <data name="JSImportRequiresAllowUnsafeBlocksMessage" xml:space="preserve">
    <value>JSImportAttribute requires unsafe code. Project must be updated with '&lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;'. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
  </data>
  <data name="JSImportRequiresAllowUnsafeBlocksTitle" xml:space="preserve">
    <value>JSImportAttribute requires unsafe code. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
  </data>
  <data name="JSExportRequiresAllowUnsafeBlocksDescription" xml:space="preserve">
    <value>JSExportAttribute requires unsafe code. Project must be updated with '&lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;'.</value>
  </data>
  <data name="JSExportRequiresAllowUnsafeBlocksMessage" xml:space="preserve">
    <value>JSExportAttribute requires unsafe code. Project must be updated with '&lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;'. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
  </data>
  <data name="JSExportRequiresAllowUnsafeBlocksTitle" xml:space="preserve">
    <value>JSExportAttribute requires unsafe code. For more information see https://aka.ms/dotnet-wasm-jsinterop</value>
  </data>
</root>