<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentCannotBeNull" xml:space="preserve">
    <value>Invalid argument: {0} can not be null.</value>
  </data>
  <data name="ArgumentCannotBeNullWithLength" xml:space="preserve">
    <value>Invalid argument: {0} can not be null and must have a length.</value>
  </data>
  <data name="SystemRuntimeInteropServicesJavaScript_PlatformNotSupported" xml:space="preserve">
    <value>System.Runtime.InteropServices.JavaScript is not supported on this platform.</value>
  </data>
  <data name="TypedArrayNotCorrectType" xml:space="preserve">
    <value>TypedArray is not of correct type.</value>
  </data>
  <data name="UnableCastNullToType" xml:space="preserve">
    <value>Unable to cast null to type {0}.</value>
  </data>
  <data name="UnableCastObjectToType" xml:space="preserve">
    <value>Unable to cast object of type {0} to type {1}.</value>
  </data>
  <data name="MissingManagedEntrypointHandle" xml:space="preserve">
    <value>Managed entrypoint handle is not set.</value>
  </data>
  <data name="CannotResolveManagedEntrypointHandle" xml:space="preserve">
    <value>Cannot resolve managed entrypoint handle.</value>
  </data>
  <data name="ReturnTypeNotSupportedForMain" xml:space="preserve">
    <value>Return type '{0}' from main method in not supported.</value>
  </data>
  <data name="NullToManagedCallback" xml:space="preserve">
    <value>ToManagedCallback is null.</value>
  </data>
  <data name="NullTaskCallback" xml:space="preserve">
    <value>TaskCallback is null.</value>
  </data>
  <data name="EmptyProfileData" xml:space="preserve">
    <value>Empty profile data.</value>
  </data>
  <data name="ErrorLegacySettingProperty" xml:space="preserve">
    <value>Error setting {0} on (js-obj js '{1}'): {2}.</value>
  </data>
  <data name="ErrorResolvingFromGlobalThis" xml:space="preserve">
    <value>Error resolving property {0} from globalThis.</value>
  </data>
  <data name="FailedToMarshalException" xml:space="preserve">
    <value>Failed to marshal exception.</value>
  </data>
  <data name="FailedToMarshalTaskCallback" xml:space="preserve">
    <value>Failed to marshal Task callback.</value>
  </data>
  <data name="InvalidInFlightCounter" xml:space="preserve">
    <value>Invalid InFlightCounter for JSObject {0}, expected: {1}, actual: {2}.</value>
  </data>
  <data name="ToJSNotImplemented" xml:space="preserve">
    <value>ToJS for {0} is not implemented.</value>
  </data>
  <data name="ToManagedNotImplemented" xml:space="preserve">
    <value>ToManaged for {0} is not implemented.</value>
  </data>
  <data name="UnableToResolveHandleAsException" xml:space="preserve">
    <value>Unable to resolve the handle as an Exception.</value>
  </data>
  <data name="UnsupportedArrayType" xml:space="preserve">
    <value>Unsupported array type {0}. Only single-dimensional arrays with a zero lower bound can be marshaled to JS.</value>
  </data>
  <data name="UnsupportedElementType" xml:space="preserve">
    <value>Unsupported element type {0}.</value>
  </data>
  <data name="UnsupportedEnumType" xml:space="preserve">
    <value>Unsupported enum type {0}.</value>
  </data>
  <data name="UnsupportedLegacyMarshlerType" xml:space="preserve">
    <value>Unsupported marshal type {0}.</value>
  </data>
  <data name="UnsupportedNullableType" xml:space="preserve">
    <value>Unsupported nullable type {0}.</value>
  </data>
  <data name="UnsupportedTaskResultType" xml:space="preserve">
    <value>Unsupported task result type {0}.</value>
  </data>
  <data name="UriConstructorMissing" xml:space="preserve">
    <value>Constructor on type 'System.Uri' not found. Please consider to protect it's constructor from trimming.</value>
  </data>
  <data name="UriTypeMissing" xml:space="preserve">
    <value>The type System.Uri could not be found. Please consider to protect the class and it's constructor from trimming.</value>
  </data>
  <data name="ValueOutOf52BitRange" xml:space="preserve">
    <value>Overflow: value {0} is out of {1} {2} range.</value>
  </data>
</root>