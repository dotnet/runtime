<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <RuntimeIdentifier>$(PackageRID)</RuntimeIdentifier>
    <!-- We're using ToolRuntimeRID as a placeholder for the real corelib/runtime components until we have an actual set of runtime bits to consume for webassembly. -->
    <RuntimeIdentifier Condition="'$(RuntimeOS)' == 'webassembly'">$(ToolRuntimeRID)</RuntimeIdentifier>
    <NoWarn>$(NoWarn);NU1603;NU1605</NoWarn>
    <SwapNativeForIL Condition="'$(SwapNativeForIL)' == '' and ('$(ConfigurationGroup)' == 'Debug' or '$(Coverage)' == 'true')">true</SwapNativeForIL>
    <CoreCLROSGroup Condition="'$(CoreCLROSGroup)' == ''">$(DefaultOSGroup)</CoreCLROSGroup>
    <CoreCLRConfiguration Condition="'$(CoreCLRConfiguration)' == ''">$(ConfigurationGroup)</CoreCLRConfiguration>
    <BinPlaceForTargetVertical>false</BinPlaceForTargetVertical>
  </PropertyGroup>

  <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
    <PackageReference Include="Microsoft.DiaSymReader.Native" Version="1.7.0" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NETCore.DotNetHost" Version="$(MicrosoftNETCoreDotNetHostVersion)" />
    <PackageReference Include="Microsoft.NETCore.DotNetHostPolicy" Version="$(MicrosoftNETCoreDotNetHostPolicyVersion)" />
    <!-- We do not need apphost.exe and the 3.0 SDK will actually remove it.
         Exclude here so that when building with the 2.x SDK we don't place it in the test shared framework.
         This can be removed once we have a new SDK -->
    <FileToExclude Include="apphost" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Condition="'$(TargetFramework)' == 'netcoreapp3.0'" Include="Microsoft.Private.Corefx.NETCoreApp" Version="4.6.0-rc2.19462.14" />
  </ItemGroup>

  <!-- Setup the testing shared framework host -->
  <Target Name="SetupTestingHost"
          Condition="'$(BinPlaceTestSharedFramework)' == 'true'"
          AfterTargets="AfterResolveReferences">
    <PropertyGroup>
      <GlobalJsonContent>$([System.IO.File]::ReadAllText('$(RepoRoot)global.json'))</GlobalJsonContent>
      <DotNetVersion>$([System.Text.RegularExpressions.Regex]::Match($(GlobalJsonContent), '(%3F&lt;="dotnet": ").*(%3F=")'))</DotNetVersion>

      <HostFxrFileName Condition="'$(TargetsWindows)' == 'true'">hostfxr</HostFxrFileName>
      <HostFxrFileName Condition="'$(TargetsWindows)' != 'true'">libhostfxr</HostFxrFileName>

      <UseHardlink>true</UseHardlink>
      <!-- workaround core-setup problem for hardlinking dotnet executable to testhost: core-setup #4742 -->
      <UseHardlink Condition="'$(_runtimeOSFamily)' == 'FreeBSD'">false</UseHardlink>
    </PropertyGroup>

    <ItemGroup>
      <HostFxFile Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == '$(HostFxrFileName)'" />
      <DotnetExe Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == 'dotnet'" />
    </ItemGroup>

    <Copy SourceFiles="@(HostFxFile)"
          DestinationFolder="$(TestHostRootPath)host\fxr\$(ProductVersion)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="$(UseHardlink)" />

    <Copy SourceFiles="@(DotnetExe)"
          DestinationFolder="$(TestHostRootPath)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="$(UseHardlink)" />

    <Exec Command="chmod +x $(TestHostRootPath)%(DotnetExe.Filename)%(DotnetExe.Extension)" Condition="'$(OS)' != 'Windows_NT'"/>
  </Target>

  <Target Name="OverrideRuntime"
          DependsOnTargets="ResolveCoreCLRFilesFromLocalBuild"
          AfterTargets="AfterResolveReferences;FilterNugetPackages">
    <ItemGroup>
      <ReferenceCopyLocalPaths Include="@(CoreCLRFiles)" />
    </ItemGroup>
  </Target>

  <Target Name="GetCoreCLRILFiles" DependsOnTargets="ResolveCoreCLRFilesFromLocalBuild">
    <ItemGroup>
      <CoreCLRILFiles Include="$(CoreCLRArtifactsPath)/IL/*.*" />
    </ItemGroup>
    <Error Condition="'@(CoreCLRILFiles)' == ''" Text="Could not locate CoreCLR IL files." />
  </Target>

  <Target Name="SwapNativeForIL"
          AfterTargets="AfterResolveReferences"
          DependsOnTargets="GetCoreCLRILFiles;OverrideRuntime"
          Condition="'$(SwapNativeForIL)' == 'true'">
      <ItemGroup>
        <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'@(CoreCLRILFiles->'%(FileName)%(Extension)')' == '%(FileName)%(Extension)'" />
        <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'@(CoreCLRILFiles->'%(FileName).ni%(Extension)')' == '%(FileName)%(Extension)'" />
        <ReferenceCopyLocalPaths Include="@(CoreCLRILFiles)" />
      </ItemGroup>
  </Target>

</Project>
