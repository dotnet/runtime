<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <RuntimeIdentifier>$(PackageRID)</RuntimeIdentifier>
    <NoWarn>$(NoWarn);NU1603;NU1605</NoWarn>
    <SwapNativeForIL Condition="'$(SwapNativeForIL)' == '' and ('$(Configuration)' == 'Debug' or '$(Coverage)' == 'true') and '$(RuntimeFlavor)' != 'Mono'">true</SwapNativeForIL>
    <BinPlaceForTargetVertical>false</BinPlaceForTargetVertical>
    <TargetFrameworks>netcoreapp3.0-Windows_NT;netcoreapp3.0-Unix;$(netcoreappCurrent)-Windows_NT;$(netcoreappCurrent)-Unix</TargetFrameworks>
  </PropertyGroup>

  <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
    <PackageReference Include="Microsoft.DiaSymReader.Native" Version="1.7.0" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetsMobile)' != 'true'">
    <PackageReference Include="Microsoft.NETCore.DotNetHost" Version="$(MicrosoftNETCoreDotNetHostVersion)" />
    <PackageReference Include="Microsoft.NETCore.DotNetHostPolicy" Version="$(MicrosoftNETCoreDotNetHostPolicyVersion)" />
    <!-- We do not need apphost.exe and the 3.0 SDK will actually remove it.
         Exclude here so that when building with the 2.x SDK we don't place it in the test shared framework.
         This can be removed once we have a new SDK -->
    <FileToExclude Include="apphost" />

    <!-- System.Data.SqlClient is not live-built anymore -->
    <PackageReference Include="System.Data.SqlClient" Version="$(SystemDataSqlClientVersion)" />
    <!-- Exclude live-built dependencies -->
    <FileToExclude Include="Microsoft.Win32.Registry" />
    <FileToExclude Include="System.Security.AccessControl" />
    <FileToExclude Include="System.Security.Principal.Windows" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Condition="'$(TargetFramework)' == 'netcoreapp3.0'" Include="Microsoft.Private.Corefx.NETCoreApp" Version="4.6.0-rc2.19462.14" />
  </ItemGroup>

  <!-- Setup the testing shared framework host -->
  <Target Name="SetupTestingHost"
          Condition="'$(BinPlaceTestSharedFramework)' == 'true'"
          DependsOnTargets="OverrideRuntimeMono"
          AfterTargets="AfterResolveReferences">
    <PropertyGroup>
      <HostFxrFileName Condition="'$(TargetsWindows)' == 'true'">hostfxr</HostFxrFileName>
      <HostFxrFileName Condition="'$(TargetsWindows)' != 'true'">libhostfxr</HostFxrFileName>
      <HostPolicyFileName Condition="'$(TargetsWindows)' == 'true'">hostpolicy</HostPolicyFileName>
      <HostPolicyFileName Condition="'$(TargetsWindows)' != 'true'">libhostpolicy</HostPolicyFileName>

      <UseHardlink>true</UseHardlink>
      <!-- workaround core-setup problem for hardlinking dotnet executable to testhost: core-setup #4742 -->
      <UseHardlink Condition="'$(_runtimeOSFamily)' == 'FreeBSD'">false</UseHardlink>
    </PropertyGroup>

    <ItemGroup Condition="'$(RuntimeFlavor)' == 'Mono'">
      <HostFxFile Include="@(StoreTestHostFiles)" Condition="'%(StoreTestHostFiles.Filename)' == '$(HostFxrFileName)'" />
      <HostPolicyFile Include="@(StoreTestHostFiles)" Condition="'%(StoreTestHostFiles.Filename)' == '$(HostPolicyFileName)'" />
      <DotnetExe Include="@(StoreTestHostFiles)" Condition="'%(StoreTestHostFiles.Filename)' == 'dotnet'" />
    </ItemGroup>

    <ItemGroup Condition="'$(RuntimeFlavor)' != 'Mono'">
      <HostFxFile Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == '$(HostFxrFileName)'" />
      <DotnetExe Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == 'dotnet'" />
    </ItemGroup>

    <Copy SourceFiles="@(HostFxFile)"
          DestinationFolder="$(TestHostRootPath)host\fxr\$(ProductVersion)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="$(UseHardlink)" />

    <Copy SourceFiles="@(DotnetExe)"
          DestinationFolder="$(TestHostRootPath)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="$(UseHardlink)" />

    <Copy Condition="'$(RuntimeFlavor)' == 'Mono'"
          SourceFiles="@(HostPolicyFile)"
          DestinationFolder="$(TestHostRootPath)shared\Microsoft.NETCore.App\$(ProductVersion)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="$(UseHardlink)" />

    <Exec Command="chmod +x $(TestHostRootPath)%(DotnetExe.Filename)%(DotnetExe.Extension)" Condition="'$(TargetOS)' != 'Windows_NT' and '$(OS)' != 'Windows_NT'"/>
  </Target>

  <Target Name="SetupRuntimePackNative"
          Condition="'$(RuntimeFlavor)' == 'Mono'"
          AfterTargets="AfterResolveReferences">
    <ItemGroup>
      <NativeBinPlaceItem Include="@(RuntimeFiles)" />
      <NativeBinPlaceItem Include="@(MonoCrossFiles)">
        <DestinationSubDirectory>cross/</DestinationSubDirectory>
      </NativeBinPlaceItem>
      <NativeBinPlaceItem Include="@(MonoIncludeFiles)">
        <DestinationSubDirectory>include/%(RecursiveDir)</DestinationSubDirectory>
      </NativeBinPlaceItem>
      <NativeBinPlaceItem Include="@(WasmDistFiles)">
        <DestinationSubDirectory>wasm/%(RecursiveDir)</DestinationSubDirectory>
      </NativeBinPlaceItem>
    </ItemGroup>
    <ItemGroup Condition="'$(TargetsMobile)' != 'true'">
      <TestHostBinPlaceItem Include="@(RuntimeFiles)" />
    </ItemGroup>
  </Target>

  <Target Name="OverrideRuntimeCoreCLR"
          DependsOnTargets="ResolveRuntimeFilesFromLocalBuild"
          AfterTargets="AfterResolveReferences;FilterNugetPackages"
          Condition="'$(RuntimeFlavor)' != 'Mono'">
    <ItemGroup>
      <!-- CoreRun is not used for testing anymore, but we still use it for benchmarking and profiling -->
      <RuntimeFiles Include="$(CoreCLRArtifactsPath)/corerun*" />
      <RuntimeFiles Include="$(CoreCLRArtifactsPath)/PDB/corerun*" />
      <ReferenceCopyLocalPaths Include="@(RuntimeFiles)" />
    </ItemGroup>
  </Target>

  <Target Name="OverrideRuntimeMono"
          DependsOnTargets="ResolveRuntimeFilesFromLocalBuild"
          AfterTargets="AfterResolveReferences;FilterNugetPackages"
          Condition="'$(RuntimeFlavor)' == 'Mono'">
    <ItemGroup>
      <StoreTestHostFiles Include="@(ReferenceCopyLocalPaths)" />
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" />
    </ItemGroup>
  </Target>

  <Target Name="GetCoreCLRILFiles" DependsOnTargets="ResolveRuntimeFilesFromLocalBuild">
    <ItemGroup>
      <CoreCLRILFiles Include="$(CoreCLRArtifactsPath)/IL/*.*" />
    </ItemGroup>
    <Error Condition="'@(CoreCLRILFiles)' == ''" Text="Could not locate CoreCLR IL files." />
  </Target>

  <Target Name="SwapNativeForIL"
          AfterTargets="AfterResolveReferences"
          DependsOnTargets="GetCoreCLRILFiles;OverrideRuntimeCoreCLR"
          Condition="'$(SwapNativeForIL)' == 'true'">
      <ItemGroup>
        <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'@(CoreCLRILFiles->'%(FileName)%(Extension)')' == '%(FileName)%(Extension)'" />
        <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'@(CoreCLRILFiles->'%(FileName).ni%(Extension)')' == '%(FileName)%(Extension)'" />
        <ReferenceCopyLocalPaths Include="@(CoreCLRILFiles)" />
      </ItemGroup>
  </Target>

  <!-- Strip away placeholder tfms and TargetFrameworkSuffix. -->
  <Target Name="StripTargetFrameworkSuffixFromTargetFrameworks"
          Condition="'$(TargetFrameworks)' != ''"
          BeforeTargets="_GetRestoreTargetFrameworksOutput;_GetRestoreTargetFrameworksAsItems">
    <PropertyGroup>
      <TargetFrameworks Condition="'$(TargetFrameworks)' != ''">$([System.Text.RegularExpressions.Regex]::Replace('$(TargetFrameworks)', '_[^;]+;?', ''))</TargetFrameworks>
      <TargetFrameworks Condition="'$(TargetFrameworks)' != ''">$([System.Text.RegularExpressions.Regex]::Replace('$(TargetFrameworks)', '-[^;]+', ''))</TargetFrameworks>
    </PropertyGroup>
  </Target>
</Project>
