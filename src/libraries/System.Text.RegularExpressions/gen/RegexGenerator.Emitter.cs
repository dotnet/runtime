// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Buffers.Binary;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

// NOTE: The logic in this file is largely a copy of logic in RegexCompiler, emitting C# instead of MSIL.
// Most changes made to this file should be kept in sync, so far as bug fixes and relevant optimizations
// are concerned.

namespace System.Text.RegularExpressions.Generator
{
    public partial class RegexGenerator
    {
        /// <summary>Code for a [GeneratedCode] attribute to put on the top-level generated members.</summary>
        private static readonly string s_generatedCodeAttribute = $"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"{typeof(RegexGenerator).Assembly.GetName().Name}\", \"{typeof(RegexGenerator).Assembly.GetName().Version}\")]";
        /// <summary>Header comments and usings to include at the top of every generated file.</summary>
        private static readonly string[] s_headers = new string[]
        {
            "// <auto-generated/>",
            "#nullable enable",
            "#pragma warning disable CS0162 // Unreachable code",
            "#pragma warning disable CS0164 // Unreferenced label",
            "#pragma warning disable CS0168 // Variable declared but never used",
            "#pragma warning disable CS0219 // Variable assigned but never used",
            "",
        };

        /// <summary>Generates the code for one regular expression class.</summary>
        private static (string, ImmutableArray<Diagnostic>) EmitRegexType(RegexType regexClass)
        {
            var sb = new StringBuilder(1024);
            var writer = new IndentedTextWriter(new StringWriter(sb));

            // Emit the namespace
            if (!string.IsNullOrWhiteSpace(regexClass.Namespace))
            {
                writer.WriteLine($"namespace {regexClass.Namespace}");
                writer.WriteLine("{");
                writer.Indent++;
            }

            // Emit containing types
            RegexType? parent = regexClass.ParentClass;
            var parentClasses = new Stack<string>();
            while (parent is not null)
            {
                parentClasses.Push($"partial {parent.Keyword} {parent.Name} {parent.Constraints}");
                parent = parent.ParentClass;
            }
            while (parentClasses.Count != 0)
            {
                writer.WriteLine($"{parentClasses.Pop()}");
                writer.WriteLine("{");
                writer.Indent++;
            }

            // Emit the direct parent type
            writer.WriteLine($"partial {regexClass.Keyword} {regexClass.Name} {regexClass.Constraints}");
            writer.WriteLine("{");
            writer.Indent++;

            // Generate a name to describe the regex instance.  This includes the method name
            // the user provided and a non-randomized (for determinism) hash of it to try to make
            // the name that much harder to predict.
            Debug.Assert(regexClass.Method is not null);
            string generatedName = $"GeneratedRegex_{regexClass.Method.MethodName}_";
            generatedName += ComputeStringHash(generatedName).ToString("X");

            // Generate the regex type
            ImmutableArray<Diagnostic> diagnostics = EmitRegexMethod(writer, regexClass.Method, generatedName);

            while (writer.Indent != 0)
            {
                writer.Indent--;
                writer.WriteLine("}");
            }

            writer.Flush();
            return (sb.ToString(), diagnostics);

            // FNV-1a hash function.  The actual algorithm used doesn't matter; just something simple
            // to create a deterministic, pseudo-random value that's based on input text.
            static uint ComputeStringHash(string s)
            {
                uint hashCode = 2166136261;
                foreach (char c in s)
                {
                    hashCode = (c ^ hashCode) * 16777619;
                }
                return hashCode;
            }
        }

        /// <summary>Gets whether a given regular expression method is supported by the code generator.</summary>
        private static bool SupportsCodeGeneration(RegexMethod rm)
        {
            RegexNode root = rm.Code.Tree.Root;

            if (!root.SupportsCompilation())
            {
                return false;
            }

            if (ExceedsMaxDepthForSimpleCodeGeneration(root, allowedDepth: 40))
            {
                // Deep RegexNode trees can result in emitting C# code that exceeds C# compiler
                // limitations, leading to "CS8078: An expression is too long or complex to compile".
                // Place an artificial limit on max tree depth in order to mitigate such issues.
                // The allowed depth can be tweaked as needed;its exceedingly rare to find
                // expressions with such deep trees.
                return false;
            }

            return true;

            static bool ExceedsMaxDepthForSimpleCodeGeneration(RegexNode node, int allowedDepth)
            {
                if (allowedDepth <= 0)
                {
                    return true;
                }

                int childCount = node.ChildCount();
                for (int i = 0; i < childCount; i++)
                {
                    if (ExceedsMaxDepthForSimpleCodeGeneration(node.Child(i), allowedDepth - 1))
                    {
                        return true;
                    }
                }

                return false;
            }
        }

        /// <summary>Generates the code for a regular expression method.</summary>
        private static ImmutableArray<Diagnostic> EmitRegexMethod(IndentedTextWriter writer, RegexMethod rm, string id)
        {
            string patternExpression = Literal(rm.Pattern);
            string optionsExpression = Literal(rm.Options);
            string timeoutExpression = rm.MatchTimeout == Timeout.Infinite ?
                "global::System.Threading.Timeout.InfiniteTimeSpan" :
                $"global::System.TimeSpan.FromMilliseconds({rm.MatchTimeout.ToString(CultureInfo.InvariantCulture)})";

            writer.WriteLine(s_generatedCodeAttribute);
            writer.WriteLine($"{rm.Modifiers} global::System.Text.RegularExpressions.Regex {rm.MethodName}() => {id}.Instance;");
            writer.WriteLine();
            writer.WriteLine(s_generatedCodeAttribute);
            writer.WriteLine("[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]");
            writer.WriteLine($"{(writer.Indent != 0 ? "private" : "internal")} sealed class {id} : global::System.Text.RegularExpressions.Regex");
            writer.WriteLine("{");
            writer.Write("    public static global::System.Text.RegularExpressions.Regex Instance { get; } = ");

            // If we can't support custom generation for this regex, spit out a Regex constructor call.
            if (!SupportsCodeGeneration(rm))
            {
                writer.WriteLine($"new global::System.Text.RegularExpressions.Regex({patternExpression}, {optionsExpression}, {timeoutExpression});");
                writer.WriteLine("}");
                return ImmutableArray.Create(Diagnostic.Create(DiagnosticDescriptors.LimitedSourceGeneration, rm.MethodSyntax.GetLocation()));
            }

            writer.WriteLine($"new {id}();");
            writer.WriteLine();
            writer.WriteLine($"    private {id}()");
            writer.WriteLine($"    {{");
            writer.WriteLine($"        base.pattern = {patternExpression};");
            writer.WriteLine($"        base.roptions = {optionsExpression};");
            writer.WriteLine($"        base.internalMatchTimeout = {timeoutExpression};");
            writer.WriteLine($"        base.factory = new RunnerFactory();");
            if (rm.Code.Caps is not null)
            {
                writer.Write("        base.Caps = new global::System.Collections.Hashtable {");
                AppendHashtableContents(writer, rm.Code.Caps);
                writer.WriteLine(" };");
            }
            if (rm.Code.Tree.CapNames is not null)
            {
                writer.Write("        base.CapNames = new global::System.Collections.Hashtable {");
                AppendHashtableContents(writer, rm.Code.Tree.CapNames);
                writer.WriteLine(" };");
            }
            if (rm.Code.Tree.CapsList is not null)
            {
                writer.Write("        base.capslist = new string[] {");
                string separator = "";
                foreach (string s in rm.Code.Tree.CapsList)
                {
                    writer.Write(separator);
                    writer.Write(Literal(s));
                    separator = ", ";
                }
                writer.WriteLine(" };");
            }
            writer.WriteLine($"        base.capsize = {rm.Code.CapSize};");
            writer.WriteLine($"        base.InitializeReferences();");
            writer.WriteLine($"    }}");
            writer.WriteLine("    ");
            writer.WriteLine($"    private sealed class RunnerFactory : global::System.Text.RegularExpressions.RegexRunnerFactory");
            writer.WriteLine($"    {{");
            writer.WriteLine($"        protected override global::System.Text.RegularExpressions.RegexRunner CreateInstance() => new Runner();");
            writer.WriteLine();
            writer.WriteLine($"        private sealed class Runner : global::System.Text.RegularExpressions.RegexRunner");
            writer.WriteLine($"        {{");

            // Main implementation methods
            writer.WriteLine($"            protected override void InitTrackCount() => base.runtrackcount = {rm.Code.TrackCount};");
            writer.WriteLine();

            writer.WriteLine("            // Description:");
            DescribeExpression(writer, rm.Code.Tree.Root, "            // ");
            writer.WriteLine();

            writer.WriteLine($"            protected override bool FindFirstChar()");
            writer.WriteLine($"            {{");
            writer.Indent += 4;
            EmitFindFirstChar(writer, rm, id);
            writer.Indent -= 4;
            writer.WriteLine($"            }}");
            writer.WriteLine();
            writer.WriteLine($"            protected override void Go()");
            writer.WriteLine($"            {{");
            writer.Indent += 4;
            EmitGo(writer, rm, id);
            writer.Indent -= 4;
            writer.WriteLine($"            }}");
            writer.WriteLine($"        }}");
            writer.WriteLine($"    }}");
            writer.WriteLine("}");
            return ImmutableArray<Diagnostic>.Empty;

            static void AppendHashtableContents(IndentedTextWriter writer, Hashtable ht)
            {
                IDictionaryEnumerator en = ht.GetEnumerator();
                string separator = "";
                while (en.MoveNext())
                {
                    writer.Write(separator);
                    separator = ", ";

                    writer.Write(" { ");
                    if (en.Key is int key)
                    {
                        writer.Write(key);
                    }
                    else
                    {
                        writer.Write($"\"{en.Key}\"");
                    }
                    writer.Write($", {en.Value} }} ");
                }
            }
        }

        /// <summary>Emits the body of the FindFirstChar override.</summary>
        private static void EmitFindFirstChar(IndentedTextWriter writer, RegexMethod rm, string id)
        {
            RegexOptions options = (RegexOptions)rm.Options;
            RegexCode code = rm.Code;
            bool hasTextInfo = false;

            // In some cases, we need to emit declarations at the beginning of the method, but we only discover we need them later.
            // To handle that, we emit a placeholder value that's not valid C#, and then at the end of the code generation we either
            // delete it if no additional declarations are required, or we replace it with the list of additional declarations
            // built up while generating code.
            var additionalDeclarations = new HashSet<string>();

            // Emit locals initialization
            writer.WriteLine("global::System.ReadOnlySpan<char> inputSpan = base.runtext;");
            writer.WriteLine("int pos = base.runtextpos;");
            writer.Write($"int end = base.runtextend;");
            writer.Flush();
            int additionalDeclarationsPosition = ((StringWriter)writer.InnerWriter).GetStringBuilder().Length;
            int additionalDeclarationsIndent = writer.Indent;
            writer.WriteLine();

            // Generate length check.  If the input isn't long enough to possibly match, fail quickly.
            // It's rare for min required length to be 0, so we don't bother special-casing the check,
            // especially since we want the "return false" code regardless.
            int minRequiredLength = rm.Code.Tree.MinRequiredLength;
            Debug.Assert(minRequiredLength >= 0);
            string clause = minRequiredLength switch
                            {
                                0 => "if (pos <= end)",
                                1 => "if (pos < end)",
                                _ => $"if (pos < end - {minRequiredLength - 1})"
                            };
            using (EmitBlock(writer, clause))
            {
                // Emit any anchors.
                if (!EmitAnchors())
                {
                    // Either anchors weren't specified, or they don't completely root all matches to a specific location.

                    // If whatever search operation we need to perform entails case-insensitive operations
                    // that weren't already handled via creation of sets, we need to get an store the
                    // TextInfo object to use (unless RegexOptions.CultureInvariant was specified).
                    EmitTextInfo(writer, ref hasTextInfo, rm);

                    // Emit the code for whatever find mode has been determined.
                    switch (code.FindOptimizations.FindMode)
                    {
                        case FindNextStartingPositionMode.LeadingPrefix_LeftToRight_CaseSensitive:
                            Debug.Assert(!string.IsNullOrEmpty(code.FindOptimizations.LeadingCaseSensitivePrefix));
                            EmitIndexOf_LeftToRight(code.FindOptimizations.LeadingCaseSensitivePrefix);
                            break;

                        case FindNextStartingPositionMode.FixedSets_LeftToRight_CaseSensitive:
                        case FindNextStartingPositionMode.FixedSets_LeftToRight_CaseInsensitive:
                        case FindNextStartingPositionMode.LeadingSet_LeftToRight_CaseSensitive:
                        case FindNextStartingPositionMode.LeadingSet_LeftToRight_CaseInsensitive:
                            Debug.Assert(code.FindOptimizations.FixedDistanceSets is { Count: > 0 });
                            EmitFixedSet_LeftToRight();
                            break;

                        default:
                            Debug.Fail($"Unexpected mode: {code.FindOptimizations.FindMode}");
                            goto case FindNextStartingPositionMode.NoSearch;

                        case FindNextStartingPositionMode.NoSearch:
                            writer.WriteLine("return true;");
                            break;
                    }
                }
            }
            writer.WriteLine();

            writer.WriteLine("// No match");
            writer.WriteLine("ReturnFalse:");
            writer.WriteLine("base.runtextpos = end;");
            writer.WriteLine("return false;");

            // We're done.  Patch up any additional declarations.
            ReplaceAdditionalDeclarations(writer, additionalDeclarations, additionalDeclarationsPosition, additionalDeclarationsIndent);
            return;

            // Emits any anchors.  Returns true if the anchor roots any match to a specific location and thus no further
            // searching is required; otherwise, false.
            bool EmitAnchors()
            {
                // Generate anchor checks.
                if ((code.FindOptimizations.LeadingAnchor & (RegexPrefixAnalyzer.Beginning | RegexPrefixAnalyzer.Start | RegexPrefixAnalyzer.EndZ | RegexPrefixAnalyzer.End | RegexPrefixAnalyzer.Bol)) != 0)
                {
                    switch (code.FindOptimizations.LeadingAnchor)
                    {
                        case RegexPrefixAnalyzer.Beginning:
                            writer.WriteLine("// Beginning \\A anchor");
                            additionalDeclarations.Add("int beginning = base.runtextbeg;");
                            using (EmitBlock(writer, "if (pos > beginning)"))
                            {
                                writer.WriteLine("goto ReturnFalse;");
                            }
                            writer.WriteLine("return true;");
                            return true;

                        case RegexPrefixAnalyzer.Start:
                            writer.WriteLine("// Start \\G anchor");
                            additionalDeclarations.Add("int start = base.runtextstart;");
                            using (EmitBlock(writer, "if (pos > start)"))
                            {
                                writer.WriteLine("goto ReturnFalse;");
                            }
                            writer.WriteLine("return true;");
                            return true;

                        case RegexPrefixAnalyzer.EndZ:
                            writer.WriteLine("// End \\Z anchor");
                            using (EmitBlock(writer, "if (pos < end - 1)"))
                            {
                                writer.WriteLine("base.runtextpos = end - 1;");
                            }
                            writer.WriteLine("return true;");
                            return true;

                        case RegexPrefixAnalyzer.End:
                            writer.WriteLine("// End \\z anchor");
                            using (EmitBlock(writer, "if (pos < end)"))
                            {
                                writer.WriteLine("base.runtextpos = end;");
                            }
                            writer.WriteLine("return true;");
                            return true;

                        case RegexPrefixAnalyzer.Bol:
                            // Optimize the handling of a Beginning-Of-Line (BOL) anchor.  BOL is special, in that unlike
                            // other anchors like Beginning, there are potentially multiple places a BOL can match.  So unlike
                            // the other anchors, which all skip all subsequent processing if found, with BOL we just use it
                            // to boost our position to the next line, and then continue normally with any searches.
                            writer.WriteLine("// Beginning-of-line anchor");
                            additionalDeclarations.Add("int beginning = base.runtextbeg;");
                            using (EmitBlock(writer, "if (pos > beginning && inputSpan[pos - 1] != '\\n')"))
                            {
                                writer.WriteLine("int newlinePos = global::System.MemoryExtensions.IndexOf(inputSpan.Slice(pos), '\\n');");
                                using (EmitBlock(writer, "if (newlinePos < 0 || newlinePos + pos + 1 > end)"))
                                {
                                    writer.WriteLine("goto ReturnFalse;");
                                }
                                writer.WriteLine("pos = newlinePos + pos + 1;");
                            }
                            writer.WriteLine();
                            break;
                    }
                }

                return false;
            }

            // Emits a case-sensitive left-to-right prefix search for a string at the beginning of the pattern.
            void EmitIndexOf_LeftToRight(string prefix)
            {
                writer.WriteLine($"int i = global::System.MemoryExtensions.IndexOf(inputSpan.Slice(pos, end - pos), {Literal(prefix)});");
                writer.WriteLine("if (i >= 0)");
                writer.WriteLine("{");
                writer.WriteLine("    base.runtextpos = pos + i;");
                writer.WriteLine("    return true;");
                writer.WriteLine("}");
            }

            // Emits a left-to-right search for a set at a fixed position from the start of the pattern,
            // and potentially other sets at other fixed positions in the pattern.
            void EmitFixedSet_LeftToRight()
            {
                List<(char[]? Chars, string Set, int Distance, bool CaseInsensitive)>? sets = code.FindOptimizations.FixedDistanceSets;
                (char[]? Chars, string Set, int Distance, bool CaseInsensitive) primarySet = sets![0];
                const int MaxSets = 4;
                int setsToUse = Math.Min(sets.Count, MaxSets);

                // If we can use IndexOf{Any}, try to accelerate the skip loop via vectorization to match the first prefix.
                // We can use it if this is a case-sensitive class with a small number of characters in the class.
                int setIndex = 0;
                bool canUseIndexOf = !primarySet.CaseInsensitive && primarySet.Chars is not null;
                bool needLoop = !canUseIndexOf || setsToUse > 1;

                FinishEmitScope loopBlock = default;
                if (needLoop)
                {
                    writer.WriteLine("global::System.ReadOnlySpan<char> span = inputSpan.Slice(pos, end - pos);");
                    string upperBound = "span.Length" + (setsToUse > 1 || primarySet.Distance != 0 ? $" - {minRequiredLength - 1}" : "");
                    loopBlock = EmitBlock(writer, $"for (int i = 0; i < {upperBound}; i++)");
                }

                if (canUseIndexOf)
                {
                    string span = needLoop ?
                        "span" :
                        "inputSpan.Slice(pos, end - pos)";

                    span = (needLoop, primarySet.Distance) switch
                    {
                        (false, 0) => span,
                        (true, 0) => $"{span}.Slice(i)",
                        (false, _) => $"{span}.Slice({primarySet.Distance})",
                        (true, _) => $"{span}.Slice(i + {primarySet.Distance})",
                    };

                    string indexOf = primarySet.Chars!.Length switch
                    {
                        1 => $"global::System.MemoryExtensions.IndexOf({span}, {Literal(primarySet.Chars[0])})",
                        2 => $"global::System.MemoryExtensions.IndexOfAny({span}, {Literal(primarySet.Chars[0])}, {Literal(primarySet.Chars[1])})",
                        3 => $"global::System.MemoryExtensions.IndexOfAny({span}, {Literal(primarySet.Chars[0])}, {Literal(primarySet.Chars[1])}, {Literal(primarySet.Chars[2])})",
                        _ => $"global::System.MemoryExtensions.IndexOfAny({span}, {Literal(new string(primarySet.Chars))})",
                    };

                    if (needLoop)
                    {
                        writer.WriteLine($"int indexOfPos = {indexOf};");
                        using (EmitBlock(writer, "if (indexOfPos < 0)"))
                        {
                            writer.WriteLine("goto ReturnFalse;");
                        }
                        writer.WriteLine("i += indexOfPos;");
                        writer.WriteLine();

                        if (setsToUse > 1)
                        {
                            using (EmitBlock(writer, $"if (i >= span.Length - {minRequiredLength - 1})"))
                            {
                                writer.WriteLine("goto ReturnFalse;");
                            }
                            writer.WriteLine();
                        }
                    }
                    else
                    {
                        writer.WriteLine($"int i = {indexOf};");
                        using (EmitBlock(writer, "if (i >= 0)"))
                        {
                            writer.WriteLine("base.runtextpos = pos + i;");
                            writer.WriteLine("return true;");
                        }
                    }

                    setIndex = 1;
                }

                if (needLoop)
                {
                    Debug.Assert(setIndex == 0 || setIndex == 1);
                    bool hasCharClassConditions = false;
                    if (setIndex < setsToUse)
                    {
                        // if (CharInClass(textSpan[i + charClassIndex], prefix[0], "...") &&
                        //     ...)
                        Debug.Assert(needLoop);
                        int start = setIndex;
                        for (; setIndex < setsToUse; setIndex++)
                        {
                            string spanIndex = $"span[i{(sets[setIndex].Distance > 0 ? $" + {sets[setIndex].Distance}" : "")}]";
                            string charInClassExpr = MatchCharacterClass(hasTextInfo, options, spanIndex, sets[setIndex].Set, sets[setIndex].CaseInsensitive, additionalDeclarations);

                            if (setIndex == start)
                            {
                                writer.Write($"if ({charInClassExpr}");
                            }
                            else
                            {
                                writer.WriteLine(" &&");
                                writer.Write($"    {charInClassExpr}");
                            }
                        }
                        writer.WriteLine(")");
                        hasCharClassConditions = true;
                    }

                    using (hasCharClassConditions ? EmitBlock(writer, null) : default)
                    {
                        writer.WriteLine("base.runtextpos = pos + i;");
                        writer.WriteLine("return true;");
                    }
                }

                loopBlock.Dispose();
            }

            // If a TextInfo is needed to perform ToLower operations, emits a local initialized to the TextInfo to use.
            static void EmitTextInfo(IndentedTextWriter writer, ref bool hasTextInfo, RegexMethod rm)
            {
                // Emit local to store current culture if needed
                if ((rm.Options & RegexOptions.CultureInvariant) == 0)
                {
                    bool needsCulture = rm.Code.FindOptimizations.FindMode switch
                    {
                        FindNextStartingPositionMode.FixedLiteral_LeftToRight_CaseInsensitive or
                        FindNextStartingPositionMode.FixedSets_LeftToRight_CaseInsensitive or
                        FindNextStartingPositionMode.LeadingSet_LeftToRight_CaseInsensitive => true,

                        _ when rm.Code.FindOptimizations.FixedDistanceSets is List<(char[]? Chars, string Set, int Distance, bool CaseInsensitive)> sets => sets.Exists(set => set.CaseInsensitive),

                        _ => false,
                    };

                    if (needsCulture)
                    {
                        hasTextInfo = true;
                        writer.WriteLine("global::System.Globalization.TextInfo textInfo = global::System.Globalization.CultureInfo.CurrentCulture.TextInfo;");
                    }
                }
            }
        }

        /// <summary>Emits the body of the Go override.</summary>
        private static void EmitGo(IndentedTextWriter writer, RegexMethod rm, string id)
        {
            // In .NET Framework and up through .NET Core 3.1, the code generated for RegexOptions.Compiled was effectively an unrolled
            // version of what RegexInterpreter would process.  The RegexNode tree would be turned into a series of opcodes via
            // RegexWriter; the interpreter would then sit in a loop processing those opcodes, and the RegexCompiler iterated through the
            // opcodes generating code for each equivalent to what the interpreter would do albeit with some decisions made at compile-time
            // rather than at run-time.  This approach, however, lead to complicated code that wasn't pay-for-play (e.g. a big backtracking
            // jump table that all compilations went through even if there was no backtracking), that didn't factor in the shape of the
            // tree (e.g. it's difficult to add optimizations based on interactions between nodes in the graph), and that didn't read well
            // when decompiled from IL to C# or when directly emitted as C# as part of a source generator.
            //
            // This implementation is instead based on directly walking the RegexNode tree and outputting code for each node in the graph.
            // A dedicated for each kind of RegexNode emits the code necessary to handle that node's processing, including recursively
            // calling the relevant function for any of its children nodes.  Backtracking is handled not via a giant jump table, but instead
            // by emitting direct jumps to each backtracking construct.  This is achieved by having all match failures jump to a "done"
            // label that can be changed by a previous emitter, e.g. before EmitLoop returns, it ensures that "doneLabel" is set to the
            // label that code should jump back to when backtracking.  That way, a subsequent EmitXx function doesn't need to know exactly
            // where to jump: it simply always jumps to "doneLabel" on match failure, and "doneLabel" is always configured to point to
            // the right location.  In an expression without backtracking, or before any backtracking constructs have been encountered,
            // "doneLabel" is simply the final return location from the Go method that will undo any captures and exit, signaling to
            // the calling scan loop that nothing was matched.

            // Arbitrary limit for unrolling vs creating a loop.  We want to balance size in the generated
            // code with other costs, like the (small) overhead of slicing to create the temp span to iterate.
            const int MaxUnrollSize = 16;

            RegexOptions options = (RegexOptions)rm.Options;
            RegexCode code = rm.Code;
            bool hasTimeout = false;

            // Helper to define names.  Names start unadorned, but as soon as there's repetition,
            // they begin to have a numbered suffix.
            var usedNames = new Dictionary<string, int>();
            string ReserveName(string prefix)
            {
                usedNames.TryGetValue(prefix, out int count);
                usedNames[prefix] = count + 1;
                return count == 0 ? prefix : $"{prefix}{count}";
            }

            void MarkLabel(string label, bool emitSemicolon = true) => writer.WriteLine($"{label}:{(emitSemicolon ? ";" : "")}");

            RegexNode node = rm.Code.Tree.Root;
            Debug.Assert(node.Type == RegexNode.Capture, "Every generated tree should begin with a capture node");
            Debug.Assert(node.ChildCount() == 1, "Capture nodes should have one child");

            // Skip the Capture node. We handle the implicit root capture specially.
            node = node.Child(0);

            // In some limited cases, FindFirstChar will only return true if it successfully matched the whole expression.
            // We can special case these to do essentially nothing in Go other than emit the capture.
            switch (node.Type)
            {
                case RegexNode.Multi or RegexNode.Notone or RegexNode.One or RegexNode.Set when !IsCaseInsensitive(node):
                    // This is the case for single and multiple characters, though the whole thing is only guaranteed
                    // to have been validated in FindFirstChar when doing case-sensitive comparison.
                    writer.WriteLine($"int start = base.runtextpos;");
                    writer.WriteLine($"int end = start + {(node.Type == RegexNode.Multi ? node.Str!.Length : 1)};");
                    writer.WriteLine("base.Capture(0, start, end);");
                    writer.WriteLine("base.runtextpos = end;");
                    return;

                case RegexNode.Empty:
                    // This case isn't common in production, but it's very common when first getting started with the
                    // source generator and seeing what happens as you add more to expressions.  When approaching
                    // it from a learning perspective, this is very common, as it's the empty string you start with.
                    writer.WriteLine("base.Capture(0, base.runtextpos, base.runtextpos);");
                    return;
            }

            // In some cases, we need to emit declarations at the beginning of the method, but we only discover we need them later.
            // To handle that, we emit a placeholder value that's not valid C#, and then at the end of the code generation we either
            // delete it if no additional declarations are required, or we replace it with the list of additional declarations
            // built up while generating code.
            var additionalDeclarations = new HashSet<string>();
            var additionalLocalFunctions = new Dictionary<string, string[]>();

            // Declare some locals.
            string sliceSpan = "slice";
            writer.WriteLine("global::System.ReadOnlySpan<char> inputSpan = base.runtext;");
            writer.WriteLine("int pos = base.runtextpos;");
            writer.WriteLine("int end = base.runtextend;");
            writer.WriteLine($"int original_pos = pos;");
            hasTimeout = EmitLoopTimeoutCounterIfNeeded(writer, rm);
            writer.Flush();
            int additionalDeclarationsPosition = ((StringWriter)writer.InnerWriter).GetStringBuilder().Length;
            int additionalDeclarationsIndent = writer.Indent;
            writer.WriteLine();

            // TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo; // only if the whole expression or any subportion is ignoring case, and we're not using invariant
            bool hasTextInfo = EmitInitializeCultureForGoIfNecessary(writer, rm);

            // The implementation tries to use const indexes into the span wherever possible, which we can do
            // in all places except for variable-length loops.  For everything else, we know at any point in
            // the regex exactly how far into it we are, and we can use that to index into the span created
            // at the beginning of the routine to begin at exactly where we're starting in the input.  For
            // variable-length loops, we index at this textSpanPos + i, and then after the loop we slice the input
            // by i so that this position is still accurate for everything after it.
            int textSpanPos = 0;
            LoadTextSpanLocal(writer, defineLocal: true);
            writer.WriteLine();

            string doneLabel = ReserveName("NoMatch");
            string originalDoneLabel = doneLabel;

            // Emit the code for all nodes in the tree.
            bool expressionHasCaptures = (node.Options & RegexNode.HasCapturesFlag) != 0;
            EmitNode(node);

            // Emit success
            writer.WriteLine("// Match");
            if (textSpanPos > 0)
            {
                EmitAdd(writer, "pos", textSpanPos);
            }
            writer.WriteLine("base.runtextpos = pos;");
            writer.WriteLine("base.Capture(0, original_pos, pos);");
            writer.WriteLine("return;");
            writer.WriteLine();

            // Emit failure
            writer.WriteLine("// No match");
            MarkLabel(originalDoneLabel, emitSemicolon: !expressionHasCaptures);
            if (expressionHasCaptures)
            {
                EmitUncaptureUntil("0");
            }

            // We're done with the match.

            // Patch up any additional declarations.
            ReplaceAdditionalDeclarations(writer, additionalDeclarations, additionalDeclarationsPosition, additionalDeclarationsIndent);

            // And emit any required helpers.
            foreach (KeyValuePair<string, string[]> localFunctions in additionalLocalFunctions.OrderBy(k => k.Key))
            {
                writer.WriteLine();
                foreach (string line in localFunctions.Value)
                {
                    writer.WriteLine(line);
                }
            }

            return;

            static bool IsCaseInsensitive(RegexNode node) => (node.Options & RegexOptions.IgnoreCase) != 0;

            // Creates a local span for inputSpan starting at pos until base.runtextend.
            void LoadTextSpanLocal(IndentedTextWriter writer, bool defineLocal = false)
            {
                if (defineLocal)
                {
                    writer.Write("global::System.ReadOnlySpan<char> ");
                }
                writer.WriteLine($"{sliceSpan} = inputSpan.Slice(pos, end - pos);");
            }

            // Emits the sum of a constant and a value from a local.
            string Sum(int constant, string? local = null) =>
                local is null ? constant.ToString() :
                constant == 0 ? local :
                $"{constant} + {local}";

            // Emits a check that the span is large enough at the currently known static position to handle the required additional length.
            void EmitSpanLengthCheck(int requiredLength, string? dynamicRequiredLength = null)
            {
                Debug.Assert(requiredLength > 0);
                using (EmitBlock(writer, $"if ({SpanLengthCheck(requiredLength, dynamicRequiredLength)})"))
                {
                    writer.WriteLine($"goto {doneLabel};");
                }
            }

            string SpanLengthCheck(int requiredLength, string? dynamicRequiredLength = null) =>
                $"(uint){sliceSpan}.Length < {Sum(textSpanPos + requiredLength, dynamicRequiredLength)}";

            // Adds the value of textSpanPos into the pos local, slices slice by the corresponding amount,
            // and zeros out textSpanPos.
            void TransferTextSpanPosToRunTextPos()
            {
                if (textSpanPos > 0)
                {
                    EmitAdd(writer, "pos", textSpanPos);
                    writer.WriteLine($"{sliceSpan} = {sliceSpan}.Slice({textSpanPos});");
                    textSpanPos = 0;
                }
            }

            string AddTextSpanPos() => textSpanPos > 0 ? $" + {textSpanPos}" : "";

            // Emits the code for an alternation.
            void EmitAlternation(RegexNode node)
            {
                int childCount = node.ChildCount();
                Debug.Assert(childCount >= 2);

                string originalDoneLabel = doneLabel;

                // Both atomic and non-atomic are supported.  While a parent RegexNode.Atomic node will itself
                // successfully prevent backtracking into this child node, we can emit better / cheaper code
                // for an Alternate when it is atomic, so we still take it into account here.
                Debug.Assert(node.Next is not null);
                bool isAtomic = node.IsAtomicByParent();

                // If no child branch overlaps with another child branch, we can emit more streamlined code
                // that avoids checking unnecessary branches, e.g. with abc|def|ghi if the next character in
                // the input is 'a', we needn't try the def or ghi branches.  A simple, relatively common case
                // of this is if every branch begins with a specific, unique character, in which case
                // the whole alternation can be treated as a simple switch, so we special-case that. However,
                // we can't goto _into_ switch cases, which means we can't use this approach if there's any
                // possibility of backtracking into the alternation.
                bool useSwitchedBranches = isAtomic;
                if (!useSwitchedBranches)
                {
                    useSwitchedBranches = true;
                    for (int i = 0; i < childCount; i++)
                    {
                        if (PossiblyBacktracks(node.Child(i)))
                        {
                            useSwitchedBranches = false;
                            break;
                        }
                    }
                }

                if (useSwitchedBranches)
                {
                    var seenChars = new HashSet<char>();
                    for (int i = 0; i < childCount; i++)
                    {
                        if (node.Child(i).FindBranchOneOrMultiStart() is not RegexNode oneOrMulti ||
                            !seenChars.Add(oneOrMulti.FirstCharOfOneOrMulti()))
                        {
                            useSwitchedBranches = false;
                            break;
                        }
                    }
                }

                if (useSwitchedBranches)
                {
                    // Note: This optimization does not exist with RegexOptions.Compiled.  Here we rely on the
                    // C# compiler to lower the C# switch statement with appropriate optimizations.
                    EmitSwitchedBranches();
                }
                else
                {
                    EmitAllBranches();
                }

                void EmitSwitchedBranches()
                {
                    EmitSpanLengthCheck(1);
                    writer.WriteLine();

                    using (EmitBlock(writer, $"switch ({ToLowerIfNeeded(hasTextInfo, options, $"{sliceSpan}[{textSpanPos++}]", IsCaseInsensitive(node))})"))
                    {
                        int startingTextSpanPos = textSpanPos;
                        for (int i = 0; i < childCount; i++)
                        {
                            textSpanPos = startingTextSpanPos;

                            RegexNode child = node.Child(i);
                            Debug.Assert(child.Type is RegexNode.One or RegexNode.Multi or RegexNode.Concatenate, DescribeNode(child));
                            Debug.Assert(child.Type is not RegexNode.Concatenate || (child.ChildCount() >= 2 && child.Child(0).Type is RegexNode.One or RegexNode.Multi));

                            RegexNode? childStart = child.FindBranchOneOrMultiStart();
                            Debug.Assert(childStart is not null, DescribeNode(child));

                            writer.WriteLine($"case {Literal(childStart.FirstCharOfOneOrMulti())}:");
                            writer.Indent++;

                            // Emit the code for the branch, without the first character that was already matched in the switch.
                            switch (child.Type)
                            {
                                case RegexNode.Multi:
                                    EmitNode(CloneMultiWithoutFirstChar(child));
                                    break;

                                case RegexNode.Concatenate:
                                    var newConcat = new RegexNode(RegexNode.Concatenate, child.Options);
                                    if (childStart.Type == RegexNode.Multi)
                                    {
                                        newConcat.AddChild(CloneMultiWithoutFirstChar(childStart));
                                    }
                                    int concatChildCount = child.ChildCount();
                                    for (int j = 1; j < concatChildCount; j++)
                                    {
                                        newConcat.AddChild(child.Child(j));
                                    }
                                    EmitNode(newConcat.Reduce());
                                    break;

                                static RegexNode CloneMultiWithoutFirstChar(RegexNode node)
                                {
                                    Debug.Assert(node.Type is RegexNode.Multi);
                                    Debug.Assert(node.Str!.Length >= 2);
                                    return node.Str!.Length == 2 ?
                                        new RegexNode(RegexNode.One, node.Options, node.Str![1]) :
                                        new RegexNode(RegexNode.Multi, node.Options, node.Str!.Substring(1));
                                }
                            }

                            // This is only ever used for atomic alternations, so we can simply reset the doneLabel
                            // after emitting the child, as nothing will backtrack here (and we need to reset it
                            // so that all branches see the original).
                            doneLabel = originalDoneLabel;

                            // If we get here in the generated code, the branch completed successfully.
                            // Before jumping to the end, we need to zero out textSpanPos, so that no
                            // matter what the value is after the branch, whatever follows the alternate
                            // will see the same textSpanPos.
                            TransferTextSpanPosToRunTextPos();
                            writer.WriteLine($"break;");
                            writer.WriteLine();

                            writer.Indent--;
                        }

                        // Default branch if the character didn't match the start of any branches.
                        writer.WriteLine("default:");
                        writer.Indent++;
                        writer.WriteLine($"goto {doneLabel};");
                        writer.Indent--;
                    }
                }

                void EmitAllBranches()
                {
                    // Label to jump to when any branch completes successfully.
                    string matchLabel = ReserveName("AlternationMatch");

                    // Save off pos.  We'll need to reset this each time a branch fails.
                    string startingRunTextPos = ReserveName("alternation_starting_pos");
                    additionalDeclarations.Add($"int {startingRunTextPos} = 0;");
                    writer.WriteLine($"{startingRunTextPos} = pos;");
                    int startingTextSpanPos = textSpanPos;

                    // We need to be able to undo captures in two situations:
                    // - If a branch of the alternation itself contains captures, then if that branch
                    //   fails to match, any captures from that branch until that failure point need to
                    //   be uncaptured prior to jumping to the next branch.
                    // - If the expression after the alternation contains captures, then failures
                    //   to match in those expressions could trigger backtracking back into the
                    //   alternation, and thus we need uncapture any of them.
                    // As such, if the alternation contains captures or if it's not atomic, we need
                    // to grab the current crawl position so we can unwind back to it when necessary.
                    // We can do all of the uncapturing as part of falling through to the next branch.
                    // If we fail in a branch, then such uncapturing will unwind back to the position
                    // at the start of the alternation.  If we fail after the alternation, and the
                    // matched branch didn't contain any backtracking, then the failure will end up
                    // jumping to the next branch, which will unwind the captures.  And if we fail after
                    // the alternation and the matched branch did contain backtracking, that backtracking
                    // construct is responsible for unwinding back to its starting crawl position. If
                    // it eventually ends up failing, that failure will result in jumping to the next branch
                    // of the alternation, which will again dutifully unwind the remaining captures until
                    // what they were at the start of the alternation.  Of course, if there are no captures
                    // anywhere in the regex, we don't have to do any of that.
                    string? startingCapturePos = null;
                    if (expressionHasCaptures && ((node.Options & RegexNode.HasCapturesFlag) != 0 || !isAtomic))
                    {
                        startingCapturePos = ReserveName("alternation_starting_capturepos");
                        additionalDeclarations.Add($"int {startingCapturePos} = 0;");
                        writer.WriteLine($"{startingCapturePos} = base.Crawlpos();");
                    }
                    writer.WriteLine();

                    // After executing the alternation, subsequent matching may fail, at which point execution
                    // will need to backtrack to the alternation.  We emit a branching table at the end of the
                    // alternation, with a label that will be left as the "doneLabel" upon exiting emitting the
                    // alternation.  The branch table is populated with an entry for each branch of the alternation,
                    // containing either the label for the last backtracking construct in the branch if such a construct
                    // existed (in which case the doneLabel upon emitting that node will be different from before it)
                    // or the label for the next branch.
                    var labelMap = new string[childCount];
                    string backtrackLabel = ReserveName("AlternationBacktrack");

                    for (int i = 0; i < childCount; i++)
                    {
                        using var __ = EmitScope(writer, $"Branch {i}", faux: !isAtomic);
                        bool isLastBranch = i == childCount - 1;

                        string? nextBranch = null;
                        if (!isLastBranch)
                        {
                            // Failure to match any branch other than the last one should result
                            // in jumping to process the next branch.
                            nextBranch = ReserveName("AlternationBranch");
                            doneLabel = nextBranch;
                        }
                        else
                        {
                            // Failure to match the last branch is equivalent to failing to match
                            // the whole alternation, which means those failures should jump to
                            // what "doneLabel" was defined as when starting the alternation.
                            doneLabel = originalDoneLabel;
                        }

                        // Emit the code for each branch.
                        EmitNode(node.Child(i));

                        // Add this branch to the backtracking table.  At this point, either the child
                        // had backtracking constructs, in which case doneLabel points to the last one
                        // and that's where we'll want to jump to, or it doesn't, in which case doneLabel
                        // still points to the nextBranch, which similarly is where we'll want to jump to.
                        if (!isAtomic)
                        {
                            EmitStackPush(startingCapturePos is not null ?
                                new[] { i.ToString(), startingRunTextPos, startingCapturePos } :
                                new[] { i.ToString(), startingRunTextPos });
                        }
                        labelMap[i] = doneLabel;

                        // If we get here in the generated code, the branch completed successfully.
                        // Before jumping to the end, we need to zero out textSpanPos, so that no
                        // matter what the value is after the branch, whatever follows the alternate
                        // will see the same textSpanPos.
                        TransferTextSpanPosToRunTextPos();
                        writer.WriteLine($"goto {matchLabel};");
                        writer.WriteLine();

                        // Reset state for next branch and loop around to generate it.  This includes
                        // setting pos back to what it was at the beginning of the alternation,
                        // updating slice to be the full length it was, and if there's a capture that
                        // needs to be reset, uncapturing it.
                        if (!isLastBranch)
                        {
                            MarkLabel(nextBranch!, emitSemicolon: false);
                            writer.WriteLine($"pos = {startingRunTextPos};");
                            LoadTextSpanLocal(writer);
                            textSpanPos = startingTextSpanPos;
                            if (startingCapturePos is not null)
                            {
                                EmitUncaptureUntil(startingCapturePos);
                            }
                        }
                    }

                    // We should never fall through to this location in the generated code.  Either
                    // a branch succeeded in matching and jumped to the end, or a branch failed in
                    // matching and jumped to the next branch location.  We only get to this code
                    // if backtracking occurs and the code explicitly jumps here based on our setting
                    // "doneLabel" to the label for this section.  Thus, we only need to emit it if
                    // something can backtrack to us, which can't happen if we're inside of an atomic
                    // node. Thus, emit the backtracking section only if we're non-atomic.
                    if (isAtomic)
                    {
                        doneLabel = originalDoneLabel;
                    }
                    else
                    {
                        doneLabel = backtrackLabel;
                        MarkLabel(backtrackLabel, emitSemicolon: false);

                        EmitStackPop(startingCapturePos is not null ?
                            new[] { startingCapturePos, startingRunTextPos } :
                            new[] { startingRunTextPos});
                        using (EmitBlock(writer, $"switch ({StackPop()})"))
                        {
                            for (int i = 0; i < labelMap.Length; i++)
                            {
                                writer.WriteLine($"case {i}: goto {labelMap[i]};");
                            }
                            writer.WriteLine("default: global::System.Diagnostics.Debug.Fail(\"Unknown backtracking location\"); break;");
                        }
                        writer.WriteLine();
                    }

                    // Successfully completed the alternate.
                    MarkLabel(matchLabel);
                    Debug.Assert(textSpanPos == 0);
                }
            }

            // Emits the code to handle a backreference.
            void EmitBackreference(RegexNode node)
            {
                int capnum = RegexParser.MapCaptureNumber(node.M, rm.Code.Caps);

                TransferTextSpanPosToRunTextPos();

                using (EmitBlock(writer, $"if (base.IsMatched({capnum}))"))
                {
                    string matchLength = ReserveName("backreference_matchLength");
                    writer.WriteLine($"int {matchLength} = base.MatchLength({capnum});");

                    if (!IsCaseInsensitive(node))
                    {
                        // If we're case-sensitive, we can simply validate that the remaining length of the slice is sufficient
                        // to possibly match, and then do a SequenceEqual against the matched text.
                        writer.WriteLine($"if ({sliceSpan}.Length < {matchLength} || ");
                        using (EmitBlock(writer, $"    !global::System.MemoryExtensions.SequenceEqual(inputSpan.Slice(base.MatchIndex({capnum}), {matchLength}), {sliceSpan}.Slice(0, {matchLength})))"))
                        {
                            writer.WriteLine($"goto {doneLabel};");
                        }
                    }
                    else
                    {
                        // For case-insensitive, we have to walk each character individually.
                        string matchIndex = ReserveName("backreference_matchIndex");
                        string i = ReserveName("backreference_iteration");

                        using (EmitBlock(writer, $"if ({sliceSpan}.Length < {matchLength})"))
                        {
                            writer.WriteLine($"goto {doneLabel};");
                        }
                        writer.WriteLine();
                        writer.WriteLine($"int {matchIndex} = base.MatchIndex({capnum});");
                        using (EmitBlock(writer, $"for (int {i} = 0; {i} < {matchLength}; {i}++)"))
                        {
                            using (EmitBlock(writer, $"if ({ToLower(hasTextInfo, options, $"inputSpan[{matchIndex} + {i}]")} != {ToLower(hasTextInfo, options, $"{sliceSpan}[{i}]")})"))
                            {
                                writer.WriteLine($"goto {doneLabel};");
                            }
                        }
                    }
                    writer.WriteLine();

                    writer.WriteLine($"pos += {matchLength};");
                    LoadTextSpanLocal(writer);
                }

                if ((node.Options & RegexOptions.ECMAScript) == 0)
                {
                    using (EmitBlock(writer, "else"))
                    {
                        writer.WriteLine($"goto {doneLabel};");
                    }
                }
            }

            // Emits the code for an if(backreference)-then-else conditional.
            void EmitBackreferenceConditional(RegexNode node)
            {
                // We're branching in a complicated fashion.  Make sure textSpanPos is 0.
                TransferTextSpanPosToRunTextPos();

                // Get the capture number to test.
                int capnum = RegexParser.MapCaptureNumber(node.M, rm.Code.Caps);

                // Get the "yes" branch and the optional "no" branch, if it exists.
                RegexNode yesBranch = node.Child(0);
                RegexNode? noBranch = node.ChildCount() > 1 && node.Child(1) is { Type: not RegexNode.Empty } childNo ? childNo : null;
                string originalDoneLabel = doneLabel;

                // If the child branches might backtrack, we can't emit the branches inside constructs that
                // require braces, e.g. if/else, even though that would yield more idiomatic output.
                // But if we know for certain they won't backtrack, we can output the nicer code.
                if (node.IsAtomicByParent() || (!PossiblyBacktracks(yesBranch) && (noBranch is null || !PossiblyBacktracks(noBranch))))
                {
                    using (EmitBlock(writer, $"if (base.IsMatched({capnum}))"))
                    {
                        EmitNode(yesBranch);
                        TransferTextSpanPosToRunTextPos(); // make sure textSpanPos is 0 after each branch
                    }

                    if (noBranch is not null)
                    {
                        using (EmitBlock(writer, $"else"))
                        {
                            EmitNode(noBranch);
                            TransferTextSpanPosToRunTextPos(); // make sure textSpanPos is 0 after each branch
                        }
                    }

                    doneLabel = originalDoneLabel;
                    return;
                }

                // As with alternations, we have potentially multiple branches, each of which may contain
                // backtracking constructs, but the expression after the conditional needs a single target
                // to backtrack to.  So, we expose a single Backtrack label and track which branch was
                // followed in this resumeAt local.
                string resumeAt = ReserveName("conditionalbackreference_branch");
                additionalDeclarations.Add($"int {resumeAt} = 0;");

                // While it would be nicely readable to use an if/else block, if the branches contain
                // anything that triggers backtracking, labels will end up being defined, and if they're
                // inside the scope block for the if or else, that will prevent jumping to them from
                // elsewhere.  So we implement the if/else with labels and gotos manually.
                // Check to see if the specified capture number was captured.
                string refNotMatched = ReserveName("ConditionalBackreferenceNotMatched");
                using (EmitBlock(writer, $"if (!base.IsMatched({capnum}))"))
                {
                    writer.WriteLine($"goto {refNotMatched};");
                }
                writer.WriteLine();

                // The specified capture was captured.  Run the "yes" branch.
                // If it successfully matches, jump to the end.
                EmitNode(yesBranch);
                TransferTextSpanPosToRunTextPos(); // make sure textSpanPos is 0 after each branch
                string postYesDoneLabel = doneLabel;
                if (postYesDoneLabel != originalDoneLabel)
                {
                    writer.WriteLine($"{resumeAt} = 0;");
                }
                string endRef = ReserveName("ConditionalBackreferenceEnd");
                if (postYesDoneLabel != originalDoneLabel || noBranch is not null)
                {
                    writer.WriteLine($"goto {endRef};");
                    writer.WriteLine();
                }

                MarkLabel(refNotMatched);
                string postNoDoneLabel = originalDoneLabel;
                if (noBranch is not null)
                {
                    // The earlier base.IsMatched returning false will jump to here.
                    // Output the no branch.
                    doneLabel = originalDoneLabel;
                    EmitNode(noBranch);
                    TransferTextSpanPosToRunTextPos(); // make sure textSpanPos is 0 after each branch
                    postNoDoneLabel = doneLabel;
                    if (postNoDoneLabel != originalDoneLabel)
                    {
                        writer.WriteLine($"{resumeAt} = 1;");
                    }
                }
                else
                {
                    // There's only a yes branch.  If it's going to cause us to output a backtracking
                    // label but code may not end up taking the yes branch path, we need to emit a resumeAt
                    // that will cause the backtracking to immediately pass through this node.
                    if (postYesDoneLabel != originalDoneLabel)
                    {
                        writer.WriteLine($"{resumeAt} = 2;");
                    }
                }

                // If either the yes branch or the no branch contained backtracking, subsequent expressions
                // might try to backtrack to here, so output a backtracking map based on resumeAt.
                if (postYesDoneLabel != originalDoneLabel || postNoDoneLabel != originalDoneLabel)
                {
                    // Skip the backtracking section.
                    writer.WriteLine($"goto {endRef};");
                    writer.WriteLine();

                    string backtrack = ReserveName("ConditionalBackreferenceBacktrack");
                    doneLabel = backtrack;
                    MarkLabel(backtrack);

                    EmitStackPop(resumeAt);
                    using (EmitBlock(writer, $"switch ({resumeAt})"))
                    {
                        if (postYesDoneLabel != originalDoneLabel)
                        {
                            writer.WriteLine($"case 0: goto {postYesDoneLabel};");
                        }

                        if (postNoDoneLabel != originalDoneLabel)
                        {
                            writer.WriteLine($"case 1: goto {postNoDoneLabel};");
                        }

                        writer.WriteLine($"default: goto {originalDoneLabel};");
                    }
                }

                if (postYesDoneLabel != originalDoneLabel || noBranch is not null)
                {
                    MarkLabel(endRef);
                    if (postYesDoneLabel != originalDoneLabel || postNoDoneLabel != originalDoneLabel)
                    {
                        EmitStackPush(resumeAt);
                    }
                }
            }

            // Emits the code for an if(expression)-then-else conditional.
            void EmitExpressionConditional(RegexNode node)
            {
                bool isAtomic = node.IsAtomicByParent();

                // We're branching in a complicated fashion.  Make sure textSpanPos is 0.
                TransferTextSpanPosToRunTextPos();

                // The first child node is the conditional expression.  If this matches, then we branch to the "yes" branch.
                // If it doesn't match, then we branch to the optional "no" branch if it exists, or simply skip the "yes"
                // branch, otherwise. The conditional is treated as a positive lookahead if it isn't already one.
                RegexNode conditional = node.Child(0);
                if (conditional is { Type: RegexNode.Require })
                {
                    conditional = conditional.Child(0);
                }

                // Get the "yes" branch and the optional "no" branch, if it exists.
                RegexNode yesBranch = node.Child(1);
                RegexNode? noBranch = node.ChildCount() > 2 && node.Child(2) is { Type: not RegexNode.Empty } childNo ? childNo : null;

                string end = ReserveName("end");
                string? no = noBranch is not null ? ReserveName("ConditionalExpressionNoBranch") : null;

                // If the conditional expression has captures, we'll need to uncapture them in the case of no match.
                string? startingCapturePos = null;
                if ((conditional.Options & RegexNode.HasCapturesFlag) != 0)
                {
                    startingCapturePos = ReserveName("conditionalexpression_starting_capturepos");
                    writer.WriteLine($"int {startingCapturePos} = base.Crawlpos();");
                    writer.WriteLine();
                }

                // Emit the conditional expression.  We need to reroute any match failures to either the "no" branch
                // if it exists, or to the end of the node (skipping the "yes" branch) if it doesn't.
                string originalDoneLabel = doneLabel;
                string tmpDoneLabel = no ?? end;
                doneLabel = tmpDoneLabel;
                EmitPositiveLookaheadAssertionChild(conditional);
                if (doneLabel == tmpDoneLabel)
                {
                    doneLabel = originalDoneLabel;
                }

                string postConditionalDoneLabel = doneLabel;
                string resumeAt = ReserveName("conditionalexpression_resumeAt");
                if (!isAtomic)
                {
                    additionalDeclarations.Add($"int {resumeAt} = 0;");
                }

                // If we get to this point of the code, the conditional successfully matched, so run the "yes" branch.
                // Since the "yes" branch may have a different execution path than the "no" branch or the lack of
                // any branch, we need to store the current textSpanPosition and reset it prior to emitting the code
                // for what comes after the "yes" branch, so that everyone is on equal footing.
                int startingTextSpanPos = textSpanPos;
                EmitNode(yesBranch);
                TransferTextSpanPosToRunTextPos(); // ensure all subsequent code sees the same textSpanPos value by setting it to 0
                string postYesDoneLabel = doneLabel;
                if (!isAtomic && postYesDoneLabel != originalDoneLabel)
                {
                    writer.WriteLine($"{resumeAt} = 0;");
                }
                if (postYesDoneLabel != originalDoneLabel || noBranch is not null)
                {
                    writer.WriteLine($"goto {end};");
                }

                // If there's a no branch, we need to emit it, but skipping it from a successful "yes" branch match.
                string postNoDoneLabel = originalDoneLabel;
                if (noBranch is not null)
                {
                    writer.WriteLine();

                    // Emit the no branch, first uncapturing any captures from the expression condition that failed
                    // to match and emit the branch.
                    MarkLabel(no, emitSemicolon: startingCapturePos is null);
                    if (startingCapturePos is not null)
                    {
                        EmitUncaptureUntil(startingCapturePos);
                    }

                    doneLabel = postConditionalDoneLabel;
                    textSpanPos = startingTextSpanPos;
                    EmitNode(noBranch);
                    TransferTextSpanPosToRunTextPos(); // ensure all subsequent code sees the same textSpanPos value by setting it to 0
                    postNoDoneLabel = doneLabel;
                    if (!isAtomic && postNoDoneLabel != originalDoneLabel)
                    {
                        writer.WriteLine($"{resumeAt} = 1;");
                    }
                }
                else
                {
                    // There's only a yes branch.  If it's going to cause us to output a backtracking
                    // label but code may not end up taking the yes branch path, we need to emit a resumeAt
                    // that will cause the backtracking to immediately pass through this node.
                    if (!isAtomic && postYesDoneLabel != originalDoneLabel)
                    {
                        writer.WriteLine($"{resumeAt} = 2;");
                    }
                }

                if (isAtomic)
                {
                    doneLabel = originalDoneLabel;
                }
                else
                {
                    if (postYesDoneLabel != postConditionalDoneLabel || postNoDoneLabel != postConditionalDoneLabel)
                    {
                        // Skip the backtracking section.
                        writer.WriteLine($"goto {end};");
                        writer.WriteLine();

                        string backtrack = ReserveName("ConditionalExpressionBacktrack");
                        doneLabel = backtrack;
                        MarkLabel(backtrack);

                        using (EmitBlock(writer, $"switch ({StackPop()})"))
                        {
                            if (postYesDoneLabel != postConditionalDoneLabel)
                            {
                                writer.WriteLine($"case 0: goto {postYesDoneLabel};");
                            }

                            if (postNoDoneLabel != postConditionalDoneLabel && postNoDoneLabel != originalDoneLabel)
                            {
                                writer.WriteLine($"case 1: goto {postNoDoneLabel};");
                            }

                            writer.WriteLine($"default: goto {postConditionalDoneLabel};");
                        }
                    }

                    if (postYesDoneLabel != originalDoneLabel || postNoDoneLabel != originalDoneLabel)
                    {
                        EmitStackPush(resumeAt);
                    }
                }

                MarkLabel(end);
            }

            // Emits the code for a Capture node.
            void EmitCapture(RegexNode node, RegexNode? subsequent = null)
            {
                Debug.Assert(node.Type == RegexNode.Capture);
                int capnum = RegexParser.MapCaptureNumber(node.M, rm.Code.Caps);
                int uncapnum = RegexParser.MapCaptureNumber(node.N, rm.Code.Caps);
                bool isAtomic = node.IsAtomicByParent();

                TransferTextSpanPosToRunTextPos();
                string startingRunTextPos = ReserveName("capture_starting_pos");
                additionalDeclarations.Add($"int {startingRunTextPos} = 0;");
                writer.WriteLine($"{startingRunTextPos} = pos;");
                writer.WriteLine();

                RegexNode child = node.Child(0);

                if (uncapnum != -1)
                {
                    using (EmitBlock(writer, $"if (!base.IsMatched({uncapnum}))"))
                    {
                        writer.WriteLine($"goto {doneLabel};");
                    }
                    writer.WriteLine();
                }

                // Emit child node.
                string originalDoneLabel = doneLabel;
                EmitNode(child, subsequent);
                bool childBacktracks = doneLabel != originalDoneLabel;

                TransferTextSpanPosToRunTextPos();
                if (uncapnum == -1)
                {
                    writer.WriteLine($"base.Capture({capnum}, {startingRunTextPos}, pos);");
                }
                else
                {
                    writer.WriteLine($"base.TransferCapture({capnum}, {uncapnum}, {startingRunTextPos}, pos);");
                }

                if (!isAtomic && (childBacktracks || node.IsInLoop()))
                {
                    writer.WriteLine();

                    EmitStackPush(startingRunTextPos);

                    // Skip past the backtracking section
                    string end = ReserveName("SkipBacktrack");
                    writer.WriteLine($"goto {end};");
                    writer.WriteLine();

                    // Emit a backtracking section that restores the capture's state and then jumps to the previous done label
                    string backtrack = ReserveName($"CaptureBacktrack");
                    MarkLabel(backtrack);
                    EmitStackPop(startingRunTextPos);
                    if (!childBacktracks)
                    {
                        writer.WriteLine($"pos = {startingRunTextPos};");
                        LoadTextSpanLocal(writer);
                    }
                    writer.WriteLine($"goto {doneLabel};");
                    writer.WriteLine();

                    doneLabel = backtrack;
                    MarkLabel(end);
                }
                else
                {
                    doneLabel = originalDoneLabel;
                }
            }

            // Emits code to unwind the capture stack until the crawl position specified in the provided local.
            void EmitUncaptureUntil(string crawlpos)
            {
                using (EmitBlock(writer, $"while (base.Crawlpos() > {crawlpos})"))
                {
                    writer.WriteLine("base.Uncapture();");
                }
            }

            // Emits the code to handle a positive lookahead assertion.
            void EmitPositiveLookaheadAssertion(RegexNode node)
            {
                EmitPositiveLookaheadAssertionChild(node.Child(0));
            }

            // Emits the code to handle a node as if it's wrapped in a positive lookahead assertion.
            void EmitPositiveLookaheadAssertionChild(RegexNode child)
            {
                // Lookarounds are implicitly atomic.  Store the original done label to reset at the end.
                string originalDoneLabel = doneLabel;

                // Save off pos.  We'll need to reset this upon successful completion of the lookahead.
                string startingRunTextPos = ReserveName("positivelookahead_starting_pos");
                writer.WriteLine($"int {startingRunTextPos} = pos;");
                writer.WriteLine();
                int startingTextSpanPos = textSpanPos;

                // Emit the child.
                EmitNode(child);

                // After the child completes successfully, reset the text positions.
                // Do not reset captures, which persist beyond the lookahead.
                writer.WriteLine($"pos = {startingRunTextPos};");
                LoadTextSpanLocal(writer);
                textSpanPos = startingTextSpanPos;

                doneLabel = originalDoneLabel;
            }

            // Emits the code to handle a negative lookahead assertion.
            void EmitNegativeLookaheadAssertion(RegexNode node)
            {
                // Lookarounds are implicitly atomic.  Store the original done label to reset at the end.
                string originalDoneLabel = doneLabel;

                // Save off pos.  We'll need to reset this upon successful completion of the lookahead.
                string startingRunTextPos = ReserveName("negativelookahead_starting_pos");
                writer.WriteLine($"int {startingRunTextPos} = pos;");
                int startingTextSpanPos = textSpanPos;

                string negativeLookaheadDoneLabel = ReserveName("NegativeLookaheadMatch");
                doneLabel = negativeLookaheadDoneLabel;

                // Emit the child.
                EmitNode(node.Child(0));

                // If the generated code ends up here, it matched the lookahead, which actually
                // means failure for a _negative_ lookahead, so we need to jump to the original done.
                writer.WriteLine($"goto {originalDoneLabel};");
                writer.WriteLine();

                // Failures (success for a negative lookahead) jump here.
                MarkLabel(negativeLookaheadDoneLabel, emitSemicolon: false);

                // After the child completes in failure (success for negative lookahead), reset the text positions.
                writer.WriteLine($"pos = {startingRunTextPos};");
                LoadTextSpanLocal(writer);
                textSpanPos = startingTextSpanPos;

                doneLabel = originalDoneLabel;
            }

            static bool PossiblyBacktracks(RegexNode node) => !(
                // Certain nodes will never backtrack out of them
                node.Type is RegexNode.Atomic or // atomic nodes by definition don't give up anything
                             RegexNode.Oneloopatomic or RegexNode.Notoneloopatomic or RegexNode.Setloopatomic or // same for atomic loops
                             RegexNode.One or RegexNode.Notone or RegexNode.Set or // individual characters don't backtrack
                             RegexNode.Multi or // multiple characters don't backtrack
                             RegexNode.Beginning or RegexNode.Start or RegexNode.End or RegexNode.EndZ or RegexNode.Boundary or RegexNode.NonBoundary or RegexNode.ECMABoundary or RegexNode.NonECMABoundary or // anchors don't backtrack
                             RegexNode.Nothing or RegexNode.Empty or RegexNode.UpdateBumpalong // empty/nothing don't do anything
                // Fixed-size repeaters of single characters or atomic don't backtrack
                || node.Type is RegexNode.Oneloop or RegexNode.Notoneloop or RegexNode.Setloop or RegexNode.Onelazy or RegexNode.Notonelazy or RegexNode.Setlazy && node.M == node.N
                );

            // Emits the code for the node.
            void EmitNode(RegexNode node, RegexNode? subsequent = null, bool emitLengthChecksIfRequired = true)
            {
                if (!StackHelper.TryEnsureSufficientExecutionStack())
                {
                    StackHelper.CallOnEmptyStack(EmitNode, node, subsequent, emitLengthChecksIfRequired);
                    return;
                }

                // Separate out several node types that, for conciseness, don't need a header and scope written into the source.
                switch (node.Type)
                {
                    // Nothing is written for an empty
                    case RegexNode.Empty:
                        return;

                    // Atomic is invisible in the generated source, other than its impact on the targets of jumps
                    case RegexNode.Atomic:
                        EmitAtomic(node, subsequent);
                        return;

                    // Concatenate is a simplification in the node tree so that a series of children can be represented as one.
                    // We don't need its presence visible in the source.
                    case RegexNode.Concatenate:
                        EmitConcatenation(node, subsequent, emitLengthChecksIfRequired);
                        return;
                }

                // Put the node's code into its own scope. If the node contains labels that may need to
                // be visible outside of its scope, the scope is still emitted for clarity but is commented out.
                using var _ = EmitScope(writer, DescribeNode(node), faux: PossiblyBacktracks(node) && !node.IsAtomicByParent());

                switch (node.Type)
                {
                    case RegexNode.Beginning:
                    case RegexNode.Start:
                    case RegexNode.Bol:
                    case RegexNode.Eol:
                    case RegexNode.End:
                    case RegexNode.EndZ:
                        EmitAnchors(node);
                        break;

                    case RegexNode.Boundary:
                    case RegexNode.NonBoundary:
                    case RegexNode.ECMABoundary:
                    case RegexNode.NonECMABoundary:
                        EmitBoundary(node);
                        break;

                    case RegexNode.Multi:
                        EmitMultiChar(node, emitLengthChecksIfRequired);
                        break;

                    case RegexNode.One:
                    case RegexNode.Notone:
                    case RegexNode.Set:
                        EmitSingleChar(node, emitLengthChecksIfRequired);
                        break;

                    case RegexNode.Oneloop:
                    case RegexNode.Notoneloop:
                    case RegexNode.Setloop:
                        EmitSingleCharLoop(node, subsequent, emitLengthChecksIfRequired);
                        break;

                    case RegexNode.Onelazy:
                    case RegexNode.Notonelazy:
                    case RegexNode.Setlazy:
                        EmitSingleCharLazy(node, emitLengthChecksIfRequired);
                        break;

                    case RegexNode.Oneloopatomic:
                    case RegexNode.Notoneloopatomic:
                    case RegexNode.Setloopatomic:
                        EmitSingleCharAtomicLoop(node, emitLengthChecksIfRequired);
                        break;

                    case RegexNode.Loop:
                        EmitLoop(node);
                        break;

                    case RegexNode.Lazyloop:
                        EmitLazy(node);
                        break;

                    case RegexNode.Alternate:
                        EmitAlternation(node);
                        break;

                    case RegexNode.Ref:
                        EmitBackreference(node);
                        break;

                    case RegexNode.Testref:
                        EmitBackreferenceConditional(node);
                        break;

                    case RegexNode.Testgroup:
                        EmitExpressionConditional(node);
                        break;

                    case RegexNode.Capture:
                        EmitCapture(node, subsequent);
                        break;

                    case RegexNode.Require:
                        EmitPositiveLookaheadAssertion(node);
                        break;

                    case RegexNode.Prevent:
                        EmitNegativeLookaheadAssertion(node);
                        break;

                    case RegexNode.Nothing:
                        writer.WriteLine($"goto {doneLabel};");
                        break;

                    case RegexNode.UpdateBumpalong:
                        EmitUpdateBumpalong();
                        break;

                    default:
                        Debug.Fail($"Unexpected node type: {node.Type}");
                        break;
                }
            }

            // Emits the node for an atomic.
            void EmitAtomic(RegexNode node, RegexNode? subsequent)
            {
                // Atomic simply outputs the code for the child, but it ensures that any done label left
                // set by the child is reset to what it was prior to the node's processing.  That way,
                // anything later that tries to jump back won't see labels set inside the atomic.
                string originalDoneLabel = doneLabel;
                EmitNode(node.Child(0), subsequent);
                doneLabel = originalDoneLabel;
            }

            // Emits the code to handle updating base.runtextpos to pos in response to
            // an UpdateBumpalong node.  This is used when we want to inform the scan loop that
            // it should bump from this location rather than from the original location.
            void EmitUpdateBumpalong()
            {
                TransferTextSpanPosToRunTextPos();
                writer.WriteLine("base.runtextpos = pos;");
            }

            // Emits code for a concatenation
            void EmitConcatenation(RegexNode node, RegexNode? subsequent, bool emitLengthChecksIfRequired)
            {
                // Emit the code for each child one after the other.
                int childCount = node.ChildCount();
                for (int i = 0; i < childCount; i++)
                {
                    // If we can find a subsequence of fixed-length children, we can emit a length check once for that sequence
                    // and then skip the individual length checks for each.  We also want to minimize the repetition of if blocks,
                    // and so we try to emit a series of clauses all part of the same if block rather than one if block per child.
                    if (emitLengthChecksIfRequired && node.TryGetJoinableLengthCheckChildRange(i, out int requiredLength, out int exclusiveEnd))
                    {
                        bool wroteClauses = true;
                        writer.Write($"if ({SpanLengthCheck(requiredLength)}");

                        while (i < exclusiveEnd)
                        {
                            for (; i < exclusiveEnd; i++)
                            {
                                void WriteSingleCharChild(RegexNode child)
                                {
                                    if (wroteClauses)
                                    {
                                        writer.WriteLine(" ||");
                                        writer.Write("    ");
                                    }
                                    else
                                    {
                                        writer.Write("if (");
                                    }
                                    EmitSingleChar(child, emitLengthCheck: false, clauseOnly: true);
                                    wroteClauses = true;
                                }

                                RegexNode child = node.Child(i);
                                if (child.Type is RegexNode.One or RegexNode.Notone or RegexNode.Set)
                                {
                                    WriteSingleCharChild(child);
                                }
                                else if (child.Type is RegexNode.Oneloop or RegexNode.Onelazy or RegexNode.Oneloopatomic or
                                                       RegexNode.Setloop or RegexNode.Setlazy or RegexNode.Setloopatomic or
                                                       RegexNode.Notoneloop or RegexNode.Notonelazy or RegexNode.Notoneloopatomic &&
                                         child.M == child.N &&
                                         child.M <= MaxUnrollSize)
                                {
                                    for (int c = 0; c < child.M; c++)
                                    {
                                        WriteSingleCharChild(child);
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }

                            if (wroteClauses)
                            {
                                writer.WriteLine(")");
                                using (EmitBlock(writer, null))
                                {
                                    writer.WriteLine($"goto {doneLabel};");
                                }
                                wroteClauses = false;
                            }

                            if (i < exclusiveEnd)
                            {
                                writer.WriteLine();
                                EmitNode(node.Child(i), i + 1 < childCount ? node.Child(i + 1) : subsequent, emitLengthChecksIfRequired: false);
                                i++;
                            }
                        }

                        i--;
                        continue;
                    }

                    EmitNode(node.Child(i), i + 1 < childCount ? node.Child(i + 1) : subsequent, emitLengthChecksIfRequired: emitLengthChecksIfRequired);
                }
            }

            // Emits the code to handle a single-character match.
            void EmitSingleChar(RegexNode node, bool emitLengthCheck = true, string? offset = null, bool clauseOnly = false)
            {
                // This only emits a single check, but it's called from the looping constructs in a loop
                // to generate the code for a single check, so we map those looping constructs to the
                // appropriate single check.

                string expr = $"{sliceSpan}[{Sum(textSpanPos, offset)}]";

                if (node.IsSetFamily)
                {
                    expr = $"!{MatchCharacterClass(hasTextInfo, options, expr, node.Str!, IsCaseInsensitive(node), additionalDeclarations)}";
                }
                else
                {
                    expr = ToLowerIfNeeded(hasTextInfo, options, expr, IsCaseInsensitive(node));
                    expr = $"{expr} {(node.IsOneFamily ? "!=" : "==")} {Literal(node.Ch)}";
                }

                if (clauseOnly)
                {
                    writer.Write(expr);
                }
                else
                {
                    using (EmitBlock(writer, emitLengthCheck ? $"if ({SpanLengthCheck(1, offset)} || {expr})" : $"if ({expr})"))
                    {
                        writer.WriteLine($"goto {doneLabel};");
                    }
                }

                textSpanPos++;
            }

            // Emits the code to handle a boundary check on a character.
            void EmitBoundary(RegexNode node)
            {
                string call;
                switch (node.Type)
                {
                    case RegexNode.Boundary:
                        call = "!base.IsBoundary";
                        break;

                    case RegexNode.NonBoundary:
                        call = "base.IsBoundary";
                        break;

                    case RegexNode.ECMABoundary:
                        call = "!base.IsECMABoundary";
                        break;

                    default:
                        Debug.Assert(node.Type == RegexNode.NonECMABoundary);
                        call = "base.IsECMABoundary";
                        break;
                }

                using (EmitBlock(writer, $"if ({call}(pos{AddTextSpanPos()}, base.runtextbeg, end))"))
                {
                    writer.WriteLine($"goto {doneLabel};");
                }
            }

            // Emits the code to handle various anchors.
            void EmitAnchors(RegexNode node)
            {
                Debug.Assert(textSpanPos >= 0);
                switch (node.Type)
                {
                    case RegexNode.Beginning:
                    case RegexNode.Start:
                        if (textSpanPos > 0)
                        {
                            // If we statically know we've already matched part of the regex, there's no way we're at the
                            // beginning or start, as we've already progressed past it.
                            writer.WriteLine($"goto {doneLabel};");
                        }
                        else
                        {
                            additionalDeclarations.Add(node.Type == RegexNode.Beginning ? "int beginning = base.runtextbeg;" : "int start = base.runtextstart;");
                            using (EmitBlock(writer, node.Type == RegexNode.Beginning ? "if (pos != beginning)" : "if (pos != start)"))
                            {
                                writer.WriteLine($"goto {doneLabel};");
                            }
                        }
                        break;

                    case RegexNode.Bol:
                        if (textSpanPos > 0)
                        {
                            using (EmitBlock(writer, $"if ({sliceSpan}[{textSpanPos - 1}] != '\\n')"))
                            {
                                writer.WriteLine($"goto {doneLabel};");
                            }
                        }
                        else
                        {
                            // We can't use our slice in this case, because we'd need to access slice[-1], so we access the inputSpan field directly:
                            additionalDeclarations.Add("int beginning = base.runtextbeg;");
                            using (EmitBlock(writer, $"if (pos > beginning && inputSpan[pos - 1] != '\\n')"))
                            {
                                writer.WriteLine($"goto {doneLabel};");
                            }
                        }
                        break;

                    case RegexNode.End:
                        using (EmitBlock(writer, $"if ({sliceSpan}.Length > {textSpanPos})"))
                        {
                            writer.WriteLine($"goto {doneLabel};");
                        }
                        break;

                    case RegexNode.EndZ:
                        writer.WriteLine($"if ({textSpanPos} < {sliceSpan}.Length - 1 || ({textSpanPos} < {sliceSpan}.Length && {sliceSpan}[{textSpanPos}] != '\\n'))");
                        using (EmitBlock(writer, null))
                        {
                            writer.WriteLine($"goto {doneLabel};");
                        }
                        break;

                    case RegexNode.Eol:
                        using (EmitBlock(writer, $"if ({textSpanPos} < {sliceSpan}.Length && {sliceSpan}[{textSpanPos}] != '\\n')"))
                        {
                            writer.WriteLine($"goto {doneLabel};");
                        }
                        break;
                }
            }

            // Emits the code to handle a multiple-character match.
            void EmitMultiChar(RegexNode node, bool emitLengthCheck = true)
            {
                bool caseInsensitive = IsCaseInsensitive(node);

                string str = node.Str!;
                Debug.Assert(str.Length != 0);

                const int MaxUnrollLength = 64;
                if (str.Length <= MaxUnrollLength)
                {
                    // Unroll shorter strings.

                    // For strings more than two characters and when performing case-sensitive searches, we try to do fewer comparisons
                    // by comparing 2 or 4 characters at a time.  Because we might be compiling on one endianness and running on another,
                    // both little and big endian values are emitted and which is used is selected at run-time.
                    ReadOnlySpan<byte> byteStr = MemoryMarshal.AsBytes(str.AsSpan());
                    bool useMultiCharReads = !caseInsensitive && byteStr.Length >= sizeof(uint);
                    if (useMultiCharReads)
                    {
                        additionalDeclarations.Add("global::System.ReadOnlySpan<byte> byteSpan;");
                        writer.WriteLine($"byteSpan = global::System.Runtime.InteropServices.MemoryMarshal.AsBytes({sliceSpan});");
                    }

                    writer.Write("if (");

                    bool emittedFirstCheck = false;
                    if (emitLengthCheck)
                    {
                        writer.Write($"(uint){sliceSpan}.Length < {textSpanPos + str.Length}");
                        emittedFirstCheck = true;
                    }

                    void EmitOr()
                    {
                        if (emittedFirstCheck)
                        {
                            writer.WriteLine(" ||");
                            writer.Write("    ");
                        }
                        emittedFirstCheck = true;
                    }

                    if (useMultiCharReads)
                    {
                        while (byteStr.Length >= sizeof(ulong))
                        {
                            EmitOr();
                            string byteSpan = textSpanPos > 0 ? $"byteSpan.Slice({textSpanPos * sizeof(char)})" : "byteSpan";
                            writer.Write($"global::System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian({byteSpan}) != 0x{BinaryPrimitives.ReadUInt64LittleEndian(byteStr):X}ul");
                            textSpanPos += sizeof(ulong) / sizeof(char);
                            byteStr = byteStr.Slice(sizeof(ulong));
                        }

                        while (byteStr.Length >= sizeof(uint))
                        {
                            EmitOr();
                            string byteSpan = textSpanPos > 0 ? $"byteSpan.Slice({textSpanPos * sizeof(char)})" : "byteSpan";
                            writer.Write($"global::System.Buffers.Binary.BinaryPrimitives.ReadUInt32LittleEndian({byteSpan}) != 0x{BinaryPrimitives.ReadUInt32LittleEndian(byteStr):X}u");
                            textSpanPos += sizeof(uint) / sizeof(char);
                            byteStr = byteStr.Slice(sizeof(uint));
                        }
                    }

                    // Emit remaining comparisons character by character.
                    for (int i = (str.Length * sizeof(char) - byteStr.Length) / sizeof(char); i < str.Length; i++)
                    {
                        EmitOr();
                        writer.Write($"{ToLowerIfNeeded(hasTextInfo, options, $"{sliceSpan}[{textSpanPos}]", caseInsensitive)} != {Literal(str[i])}");
                        textSpanPos++;
                    }

                    writer.WriteLine(")");
                    using (EmitBlock(writer, null))
                    {
                        writer.WriteLine($"goto {doneLabel};");
                    }
                }
                else
                {
                    // Longer strings are compared character by character.  If this is a case-sensitive comparison, we can simply
                    // delegate to StartsWith.  If this is case-insensitive, we open-code the comparison loop, as we need to lowercase
                    // each character involved, and none of the StringComparison options provide the right semantics of comparing
                    // character-by-character while respecting the culture.
                    if (!caseInsensitive)
                    {
                        string sourceSpan = textSpanPos > 0 ? $"{sliceSpan}.Slice({textSpanPos})" : sliceSpan;
                        using (EmitBlock(writer, $"if (!global::System.MemoryExtensions.StartsWith({sourceSpan}, {Literal(node.Str)}))"))
                        {
                            writer.WriteLine($"goto {doneLabel};");
                        }
                        textSpanPos += node.Str.Length;
                    }
                    else
                    {
                        EmitSpanLengthCheck(str.Length);
                        using (EmitBlock(writer, $"for (int i = 0; i < {Literal(node.Str)}.Length; i++)"))
                        {
                            string textSpanIndex = textSpanPos > 0 ? $"i + {textSpanPos}" : "i";
                            using (EmitBlock(writer, $"if ({ToLower(hasTextInfo, options, $"{sliceSpan}[{textSpanIndex}]")} != {Literal(str)}[i])"))
                            {
                                writer.WriteLine($"goto {doneLabel};");
                            }
                        }
                        textSpanPos += node.Str.Length;
                    }
                }
            }

            void EmitSingleCharLoop(RegexNode node, RegexNode? subsequent = null, bool emitLengthChecksIfRequired = true)
            {
                // If this is actually a repeater, emit that instead; no backtracking necessary.
                if (node.M == node.N)
                {
                    EmitSingleCharFixedRepeater(node, emitLengthChecksIfRequired);
                    return;
                }

                // Emit backtracking around an atomic single char loop.  We can then implement the backtracking
                // as an afterthought, since we know exactly how many characters are accepted by each iteration
                // of the wrapped loop (1) and that there's nothing captured by the loop.

                Debug.Assert(node.M < node.N);
                string backtrackingLabel = ReserveName("CharLoopBacktrack");
                string endLoop = ReserveName("CharLoopEnd");
                string startingPos = ReserveName("charloop_starting_pos");
                string endingPos = ReserveName("charloop_ending_pos");
                additionalDeclarations.Add($"int {startingPos} = 0, {endingPos} = 0;");

                // We're about to enter a loop, so ensure our text position is 0.
                TransferTextSpanPosToRunTextPos();

                // Grab the current position, then emit the loop as atomic, and then
                // grab the current position again.  Even though we emit the loop without
                // knowledge of backtracking, we can layer it on top by just walking back
                // through the individual characters (a benefit of the loop matching exactly
                // one character per iteration, no possible captures within the loop, etc.)
                writer.WriteLine($"{startingPos} = pos;");
                writer.WriteLine();

                EmitSingleCharAtomicLoop(node);
                writer.WriteLine();

                TransferTextSpanPosToRunTextPos();
                writer.WriteLine($"{endingPos} = pos;");

                string? capturePos = null;
                if (expressionHasCaptures)
                {
                    capturePos = ReserveName("charloop_capturepos");
                    additionalDeclarations.Add($"int {capturePos} = 0;");
                    writer.WriteLine($"{capturePos} = base.Crawlpos();");
                }

                if (node.M > 0)
                {
                    writer.WriteLine($"{startingPos} += {node.M};");
                }

                writer.WriteLine($"goto {endLoop};");
                writer.WriteLine();

                // Backtracking section. Subsequent failures will jump to here, at which
                // point we decrement the matched count as long as it's above the minimum
                // required, and try again by flowing to everything that comes after this.
                MarkLabel(backtrackingLabel, emitSemicolon: false);
                if (capturePos is not null)
                {
                    EmitStackPop(capturePos, endingPos, startingPos);
                    EmitUncaptureUntil(capturePos);
                }
                else
                {
                    EmitStackPop(endingPos, startingPos);
                }

                string originalDoneLabel = doneLabel;
                using (EmitBlock(writer, $"if ({startingPos} >= {endingPos})"))
                {
                    writer.WriteLine($"goto {originalDoneLabel};");
                }
                doneLabel = backtrackingLabel; // leave set to the backtracking label for all subsequent nodes

                if (subsequent?.FindStartingCharacter() is char subsequentCharacter)
                {
                    writer.WriteLine();
                    writer.WriteLine($"{endingPos} = global::System.MemoryExtensions.LastIndexOf(inputSpan.Slice({startingPos}, {endingPos} - {startingPos}), {Literal(subsequentCharacter)});");
                    using (EmitBlock(writer, $"if ({endingPos} < 0)"))
                    {
                        writer.WriteLine($"goto {originalDoneLabel};");
                    }
                    writer.WriteLine($"{endingPos} += {startingPos};");
                    writer.WriteLine($"pos = {endingPos};");
                }
                else
                {
                    writer.WriteLine($"pos = --{endingPos};");
                }

                LoadTextSpanLocal(writer);
                writer.WriteLine();

                MarkLabel(endLoop);
                EmitStackPush(capturePos is not null ?
                    new[] { startingPos, endingPos, capturePos } :
                    new[] { startingPos, endingPos });
            }

            void EmitSingleCharLazy(RegexNode node, bool emitLengthChecksIfRequired = true)
            {
                // Emit the min iterations as a repeater.  Any failures here don't necessitate backtracking,
                // as the lazy itself failed to match, and there's no backtracking possible by the individual
                // characters/iterations themselves.
                if (node.M > 0)
                {
                    EmitSingleCharFixedRepeater(node, emitLengthChecksIfRequired);
                }

                // If the whole thing was actually that repeater, we're done. Similarly, if this is actually an atomic
                // lazy loop, nothing will ever backtrack into this node, so we never need to iterate more than the minimum.
                if (node.M == node.N || node.IsAtomicByParent())
                {
                    return;
                }

                Debug.Assert(node.M < node.N);

                // We now need to match one character at a time, each time allowing the remainder of the expression
                // to try to match, and only matching another character if the subsequent expression fails to match.

                // We're about to enter a loop, so ensure our text position is 0.
                TransferTextSpanPosToRunTextPos();

                // If the loop isn't unbounded, track the number of iterations and the max number to allow.
                string? iterationCount = null;
                string? maxIterations = null;
                if (node.N != int.MaxValue)
                {
                    maxIterations = $"{node.N - node.M}";

                    iterationCount = ReserveName("lazyloop_iteration");
                    additionalDeclarations.Add($"int {iterationCount} = 0;");
                    writer.WriteLine($"{iterationCount} = 0;");
                }

                // Track the current crawl position.  Upon backtracking, we'll unwind any captures beyond this point.
                string? capturePos = null;
                if (expressionHasCaptures)
                {
                    capturePos = ReserveName("lazyloop_capturepos");
                    additionalDeclarations.Add($"int {capturePos} = 0;");
                }

                // Track the current pos.  Each time we backtrack, we'll reset to the stored position, which
                // is also incremented each time we match another character in the loop.
                string startingRunTextPos = ReserveName("lazyloop_pos");
                additionalDeclarations.Add($"int {startingRunTextPos} = 0;");
                writer.WriteLine($"{startingRunTextPos} = pos;");

                // Skip the backtracking section for the initial subsequent matching.  We've already matched the
                // minimum number of iterations, which means we can successfully match with zero additional iterations.
                string endLoopLabel = ReserveName("LazyLoopEnd");
                writer.WriteLine($"goto {endLoopLabel};");
                writer.WriteLine();

                // Backtracking section. Subsequent failures will jump to here.
                string backtrackingLabel = ReserveName("LazyLoopBacktrack");
                MarkLabel(backtrackingLabel, emitSemicolon: false);

                // Uncapture any captures if the expression has any.  It's possible the captures it has
                // are before this node, in which case this is wasted effort, but still functionally correct.
                if (capturePos is not null)
                {
                    EmitUncaptureUntil(capturePos);
                }

                // If there's a max number of iterations, see if we've exceeded the maximum number of characters
                // to match.  If we haven't, increment the iteration count.
                if (maxIterations is not null)
                {
                    using (EmitBlock(writer, $"if ({iterationCount} >= {maxIterations})"))
                    {
                        writer.WriteLine($"goto {doneLabel};");
                    }
                    writer.WriteLine($"{iterationCount}++;");
                }

                // Now match the next item in the lazy loop.  We need to reset the pos to the position
                // just after the last character in this loop was matched, and we need to store the resulting position
                // for the next time we backtrack.
                writer.WriteLine($"pos = {startingRunTextPos};");
                LoadTextSpanLocal(writer);
                EmitSingleChar(node);
                TransferTextSpanPosToRunTextPos();
                writer.WriteLine($"{startingRunTextPos} = pos;");

                // Update the done label for everything that comes after this node.  This is done after we emit the single char
                // matching, as that failing indicates the loop itself has failed to match.
                string originalDoneLabel = doneLabel;
                doneLabel = backtrackingLabel; // leave set to the backtracking label for all subsequent nodes

                writer.WriteLine();
                MarkLabel(endLoopLabel);
                if (capturePos is not null)
                {
                    writer.WriteLine($"{capturePos} = base.Crawlpos();");
                }

                if (node.IsInLoop())
                {
                    writer.WriteLine();

                    // Store the capture's state
                    var toPushPop = new List<string>(3) { startingRunTextPos };
                    if (capturePos is not null)
                    {
                        toPushPop.Add(capturePos);
                    }
                    if (iterationCount is not null)
                    {
                        toPushPop.Add(iterationCount);
                    }
                    string[] toPushPopArray = toPushPop.ToArray();
                    EmitStackPush(toPushPopArray);

                    // Skip past the backtracking section
                    string end = ReserveName("SkipBacktrack");
                    writer.WriteLine($"goto {end};");
                    writer.WriteLine();

                    // Emit a backtracking section that restores the capture's state and then jumps to the previous done label
                    string backtrack = ReserveName("CharLazyBacktrack");
                    MarkLabel(backtrack);

                    Array.Reverse(toPushPopArray);
                    EmitStackPop(toPushPopArray);

                    writer.WriteLine($"goto {doneLabel};");
                    writer.WriteLine();

                    doneLabel = backtrack;
                    MarkLabel(end);
                }
            }

            void EmitLazy(RegexNode node)
            {
                Debug.Assert(node.Type is RegexNode.Lazyloop, $"Unexpected type: {node.Type}");
                Debug.Assert(node.M < int.MaxValue, $"Unexpected M={node.M}");
                Debug.Assert(node.N >= node.M, $"Unexpected M={node.M}, N={node.N}");
                int minIterations = node.M;
                int maxIterations = node.N;
                string originalDoneLabel = doneLabel;
                bool isAtomic = node.IsAtomicByParent();

                // If this is actually an atomic lazy loop, we need to output just the minimum number of iterations,
                // as nothing will backtrack into the lazy loop to get it progress further.
                if (isAtomic)
                {
                    switch (minIterations)
                    {
                        case 0:
                            // Atomic lazy with a min count of 0: nop.
                            return;

                        case 1:
                            // Atomic lazy with a min count of 1: just output the child, no looping required.
                            EmitNode(node.Child(0));
                            return;
                    }
                }

                // We might loop any number of times.  In order to ensure this loop and subsequent code sees textSpanPos
                // the same regardless, we always need it to contain the same value, and the easiest such value is 0.
                // So, we transfer textSpanPos to pos, and ensure that any path out of here has textSpanPos as 0.
                TransferTextSpanPosToRunTextPos();

                string startingRunTextPos = ReserveName("lazyloop_starting_pos");
                string iterationCount = ReserveName("lazyloop_iteration");
                string sawEmpty = ReserveName("lazyLoopEmptySeen");
                string body = ReserveName("LazyLoopBody");
                string endLoop = ReserveName("LazyLoopEnd");

                additionalDeclarations.Add($"int {iterationCount} = 0, {startingRunTextPos} = 0, {sawEmpty} = 0;");
                writer.WriteLine($"{iterationCount} = 0;");
                writer.WriteLine($"{startingRunTextPos} = pos;");
                writer.WriteLine($"{sawEmpty} = 0;");
                writer.WriteLine();

                // If the min count is 0, start out by jumping right to what's after the loop.  Backtracking
                // will then bring us back in to do further iterations.
                if (minIterations == 0)
                {
                    writer.WriteLine($"goto {endLoop};");
                }

                // Iteration body
                MarkLabel(body, emitSemicolon: false);
                EmitTimeoutCheck(writer, hasTimeout);

                // We need to store the starting pos and crawl position so that it may
                // be backtracked through later.  This needs to be the starting position from
                // the iteration we're leaving, so it's pushed before updating it to pos.
                EmitStackPush(expressionHasCaptures ?
                    new[] { "base.Crawlpos()", startingRunTextPos, "pos", sawEmpty } :
                    new[] { startingRunTextPos, "pos", sawEmpty });

                writer.WriteLine();

                // Save off some state.  We need to store the current pos so we can compare it against
                // pos after the iteration, in order to determine whether the iteration was empty. Empty
                // iterations are allowed as part of min matches, but once we've met the min quote, empty matches
                // are considered match failures.
                writer.WriteLine($"{startingRunTextPos} = pos;");

                // Proactively increase the number of iterations.  We do this prior to the match rather than once
                // we know it's successful, because we need to decrement it as part of a failed match when
                // backtracking; it's thus simpler to just always decrement it as part of a failed match, even
                // when initially greedily matching the loop, which then requires we increment it before trying.
                writer.WriteLine($"{iterationCount}++;");

                // Last but not least, we need to set the doneLabel that a failed match of the body will jump to.
                // Such an iteration match failure may or may not fail the whole operation, depending on whether
                // we've already matched the minimum required iterations, so we need to jump to a location that
                // will make that determination.
                string iterationFailedLabel = ReserveName("LazyLoopIterationNoMatch");
                doneLabel = iterationFailedLabel;

                // Finally, emit the child.
                Debug.Assert(textSpanPos == 0);
                EmitNode(node.Child(0));
                TransferTextSpanPosToRunTextPos(); // ensure textSpanPos remains 0
                if (doneLabel == iterationFailedLabel)
                {
                    doneLabel = originalDoneLabel;
                }

                // Loop condition.  Continue iterating if we've not yet reached the minimum.
                if (minIterations > 0)
                {
                    using (EmitBlock(writer, $"if ({iterationCount} < {minIterations})"))
                    {
                        writer.WriteLine($"goto {body};");
                    }
                }

                // If the last iteration was empty, we need to prevent further iteration from this point
                // unless we backtrack out of this iteration.  We can do that easily just by pretending
                // we reached the max iteration count.
                using (EmitBlock(writer, $"if (pos == {startingRunTextPos})"))
                {
                    writer.WriteLine($"{sawEmpty} = 1;");
                }

                // We matched the next iteration.  Jump to the subsequent code.
                writer.WriteLine($"goto {endLoop};");
                writer.WriteLine();

                // Now handle what happens when an iteration fails.  We need to reset state to what it was before just that iteration
                // started.  That includes resetting pos and clearing out any captures from that iteration.
                MarkLabel(iterationFailedLabel, emitSemicolon: false);
                writer.WriteLine($"{iterationCount}--;");
                using (EmitBlock(writer, $"if ({iterationCount} < 0)"))
                {
                    writer.WriteLine($"goto {originalDoneLabel};");
                }
                EmitStackPop(sawEmpty, "pos", startingRunTextPos);
                if (expressionHasCaptures)
                {
                    string poppedCapturePos = ReserveName("lazyloop_capturepos");
                    writer.WriteLine($"int {poppedCapturePos} = {StackPop()};");
                    EmitUncaptureUntil(poppedCapturePos);
                }
                LoadTextSpanLocal(writer);
                if (doneLabel == originalDoneLabel)
                {
                    writer.WriteLine($"goto {originalDoneLabel};");
                }
                else
                {
                    using (EmitBlock(writer, $"if ({iterationCount} == 0)"))
                    {
                        writer.WriteLine($"goto {originalDoneLabel};");
                    }
                    writer.WriteLine($"goto {doneLabel};");
                }
                writer.WriteLine();

                MarkLabel(endLoop);

                if (!isAtomic)
                {
                    // Store the capture's state and skip the backtracking section
                    EmitStackPush(startingRunTextPos, iterationCount, sawEmpty);

                    string skipBacktrack = ReserveName("SkipBacktrack");
                    writer.WriteLine($"goto {skipBacktrack};");
                    writer.WriteLine();

                    // Emit a backtracking section that restores the capture's state and then jumps to the previous done label
                    string backtrack = ReserveName($"LazyLoopBacktrack");
                    MarkLabel(backtrack);

                    EmitStackPop(sawEmpty, iterationCount, startingRunTextPos);

                    if (maxIterations == int.MaxValue)
                    {
                        using (EmitBlock(writer, $"if ({sawEmpty} == 0)"))
                        {
                            writer.WriteLine($"goto {body};");
                        }
                    }
                    else
                    {
                        using (EmitBlock(writer, $"if ({iterationCount} < {maxIterations} && {sawEmpty} == 0)"))
                        {
                            writer.WriteLine($"goto {body};");
                        }
                    }

                    writer.WriteLine($"goto {doneLabel};");
                    writer.WriteLine();

                    doneLabel = backtrack;
                    MarkLabel(skipBacktrack);
                }
            }

            // Emits the code to handle a loop (repeater) with a fixed number of iterations.
            // RegexNode.M is used for the number of iterations; RegexNode.N is ignored.
            void EmitSingleCharFixedRepeater(RegexNode node, bool emitLengthCheck = true)
            {
                int iterations = node.M;
                if (iterations == 0)
                {
                    // No iterations, nothing to do.
                    return;
                }

                if (iterations <= MaxUnrollSize)
                {
                    // if ((uint)(textSpanPos + iterations - 1) >= (uint)slice.Length ||
                    //     slice[textSpanPos] != c1 ||
                    //     slice[textSpanPos + 1] != c2 ||
                    //     ...)
                    // {
                    //     goto doneLabel;
                    // }
                    writer.Write($"if (");
                    if (emitLengthCheck)
                    {
                        writer.WriteLine($"{SpanLengthCheck(iterations)} ||");
                        writer.Write("    ");
                    }
                    EmitSingleChar(node, emitLengthCheck: false, clauseOnly: true);
                    for (int i = 1; i < iterations; i++)
                    {
                        writer.WriteLine(" ||");
                        writer.Write("    ");
                        EmitSingleChar(node, emitLengthCheck: false, clauseOnly: true);
                    }
                    writer.WriteLine(")");
                    using (EmitBlock(writer, null))
                    {
                        writer.WriteLine($"goto {doneLabel};");
                    }
                }
                else
                {
                    // if ((uint)(textSpanPos + iterations - 1) >= (uint)slice.Length) goto doneLabel;
                    if (emitLengthCheck)
                    {
                        EmitSpanLengthCheck(iterations);
                    }

                    string repeaterSpan = "repeaterSlice"; // As this repeater doesn't wrap arbitrary node emits, this shouldn't conflict with anything
                    writer.WriteLine($"global::System.ReadOnlySpan<char> {repeaterSpan} = {sliceSpan}.Slice({textSpanPos}, {iterations});");
                    string i = ReserveName("charrepeater_iteration");
                    using (EmitBlock(writer, $"for (int {i} = 0; {i} < {repeaterSpan}.Length; {i}++)"))
                    {
                        EmitTimeoutCheck(writer, hasTimeout);

                        string tmpTextSpanLocal = sliceSpan; // we want EmitSingleChar to refer to this temporary
                        int tmpTextSpanPos = textSpanPos;
                        sliceSpan = repeaterSpan;
                        textSpanPos = 0;
                        EmitSingleChar(node, emitLengthCheck: false, offset: i);
                        sliceSpan = tmpTextSpanLocal;
                        textSpanPos = tmpTextSpanPos;
                    }
                    textSpanPos += iterations;
                }
            }

            // Emits the code to handle a non-backtracking, variable-length loop around a single character comparison.
            void EmitSingleCharAtomicLoop(RegexNode node, bool emitLengthChecksIfRequired = true)
            {
                // If this is actually a repeater, emit that instead.
                if (node.M == node.N)
                {
                    EmitSingleCharFixedRepeater(node, emitLengthChecksIfRequired);
                    return;
                }

                // If this is actually an optional single char, emit that instead.
                if (node.M == 0 && node.N == 1)
                {
                    EmitAtomicSingleCharZeroOrOne(node);
                    return;
                }

                Debug.Assert(node.N > node.M);
                int minIterations = node.M;
                int maxIterations = node.N;

                Span<char> setChars = stackalloc char[5]; // 5 is max optimized by IndexOfAny today
                int numSetChars = 0;

                string iterationLocal = ReserveName("iteration");
                if (node.IsNotoneFamily &&
                    maxIterations == int.MaxValue &&
                    (!IsCaseInsensitive(node)))
                {
                    // For Notone, we're looking for a specific character, as everything until we find
                    // it is consumed by the loop.  If we're unbounded, such as with ".*" and if we're case-sensitive,
                    // we can use the vectorized IndexOf to do the search, rather than open-coding it.  The unbounded
                    // restriction is purely for simplicity; it could be removed in the future with additional code to
                    // handle the unbounded case.

                    writer.Write($"int {iterationLocal} = global::System.MemoryExtensions.IndexOf({sliceSpan}");
                    if (textSpanPos > 0)
                    {
                        writer.Write($".Slice({textSpanPos})");
                    }
                    writer.WriteLine($", {Literal(node.Ch)});");
                    
                    using (EmitBlock(writer, $"if ({iterationLocal} < 0)"))
                    {
                        writer.WriteLine(textSpanPos > 0 ?
                            $"{iterationLocal} = {sliceSpan}.Length - {textSpanPos};" :
                            $"{iterationLocal} = {sliceSpan}.Length;");
                    }
                }
                else if (node.IsSetFamily &&
                    maxIterations == int.MaxValue &&
                    !IsCaseInsensitive(node) &&
                    (numSetChars = RegexCharClass.GetSetChars(node.Str!, setChars)) != 0 &&
                    RegexCharClass.IsNegated(node.Str!))
                {
                    // If the set is negated and contains only a few characters (if it contained 1 and was negated, it should
                    // have been reduced to a Notone), we can use an IndexOfAny to find any of the target characters.
                    // As with the notoneloopatomic above, the unbounded constraint is purely for simplicity.
                    Debug.Assert(numSetChars > 1);

                    writer.Write($"int {iterationLocal} = global::System.MemoryExtensions.IndexOfAny({sliceSpan}");
                    if (textSpanPos != 0)
                    {
                        writer.Write($".Slice({textSpanPos})");
                    }
                    writer.WriteLine(numSetChars switch
                    {
                        2 => $", {Literal(setChars[0])}, {Literal(setChars[1])});",
                        3 => $", {Literal(setChars[0])}, {Literal(setChars[1])}, {Literal(setChars[2])});",
                        _ => $", {Literal(setChars.Slice(0, numSetChars).ToString())});",
                    });
                    using (EmitBlock(writer, $"if ({iterationLocal} < 0)"))
                    {
                        writer.WriteLine(textSpanPos > 0 ?
                            $"{iterationLocal} = {sliceSpan}.Length - {textSpanPos};" :
                            $"{iterationLocal} = {sliceSpan}.Length;");
                    }
                }
                else if (node.IsSetFamily && maxIterations == int.MaxValue && node.Str == RegexCharClass.AnyClass)
                {
                    // .* was used with RegexOptions.Singleline, which means it'll consume everything.  Just jump to the end.
                    // The unbounded constraint is the same as in the Notone case above, done purely for simplicity.

                    // int i = end - pos;
                    TransferTextSpanPosToRunTextPos();
                    writer.WriteLine($"int {iterationLocal} = end - pos;");
                }
                else
                {
                    // For everything else, do a normal loop.

                    string expr = $"{sliceSpan}[{iterationLocal}]";
                    if (node.IsSetFamily)
                    {
                        expr = MatchCharacterClass(hasTextInfo, options, expr, node.Str!, IsCaseInsensitive(node), additionalDeclarations);
                    }
                    else
                    {
                        expr = ToLowerIfNeeded(hasTextInfo, options, expr, IsCaseInsensitive(node));
                        expr = $"{expr} {(node.IsOneFamily ? "==" : "!=")} {Literal(node.Ch)}";
                    }

                    if (minIterations != 0 || maxIterations != int.MaxValue)
                    {
                        // For any loops other than * loops, transfer text pos to pos in
                        // order to zero it out to be able to use the single iteration variable
                        // for both iteration count and indexer.
                        TransferTextSpanPosToRunTextPos();
                    }

                    writer.WriteLine($"int {iterationLocal} = {textSpanPos};");
                    textSpanPos = 0;

                    string maxClause = maxIterations != int.MaxValue ? $"{iterationLocal} < {maxIterations} && " : "";
                    using (EmitBlock(writer, $"while ({maxClause}(uint){iterationLocal} < (uint){sliceSpan}.Length && {expr})"))
                    {
                        EmitTimeoutCheck(writer, hasTimeout);
                        writer.WriteLine($"{iterationLocal}++;");
                    }
                }

                // Check to ensure we've found at least min iterations.
                if (minIterations > 0)
                {
                    using (EmitBlock(writer, $"if ({iterationLocal} < {minIterations})"))
                    {
                        writer.WriteLine($"goto {doneLabel};");
                    }
                }

                // Now that we've completed our optional iterations, advance the text span
                // and pos by the number of iterations completed.

                writer.WriteLine($"{sliceSpan} = {sliceSpan}.Slice({iterationLocal});");
                writer.WriteLine($"pos += {iterationLocal};");
            }

            // Emits the code to handle a non-backtracking optional zero-or-one loop.
            void EmitAtomicSingleCharZeroOrOne(RegexNode node)
            {
                Debug.Assert(node.M == 0 && node.N == 1);

                string expr = $"{sliceSpan}[{textSpanPos}]";
                if (node.IsSetFamily)
                {
                    expr = MatchCharacterClass(hasTextInfo, options, expr, node.Str!, IsCaseInsensitive(node), additionalDeclarations);
                }
                else
                {
                    expr = ToLowerIfNeeded(hasTextInfo, options, expr, IsCaseInsensitive(node));
                    expr = $"{expr} {(node.IsOneFamily ? "==" : "!=")} {Literal(node.Ch)}";
                }

                using (EmitBlock(writer, $"if ((uint){textSpanPos} < (uint){sliceSpan}.Length && {expr})"))
                {
                    writer.WriteLine($"{sliceSpan} = {sliceSpan}.Slice(1);");
                    writer.WriteLine($"pos++;");
                }
            }

            void EmitLoop(RegexNode node)
            {
                Debug.Assert(node.Type is RegexNode.Loop or RegexNode.Lazyloop, $"Unexpected type: {node.Type}");
                Debug.Assert(node.M < int.MaxValue, $"Unexpected M={node.M}");
                Debug.Assert(node.N >= node.M, $"Unexpected M={node.M}, N={node.N}");
                int minIterations = node.M;
                int maxIterations = node.N;
                bool isAtomic = node.IsAtomicByParent();

                // We might loop any number of times.  In order to ensure this loop and subsequent code sees textSpanPos
                // the same regardless, we always need it to contain the same value, and the easiest such value is 0.
                // So, we transfer textSpanPos to pos, and ensure that any path out of here has textSpanPos as 0.
                TransferTextSpanPosToRunTextPos();

                string originalDoneLabel = doneLabel;

                string startingRunTextPos = ReserveName("loop_starting_pos");
                string iterationCount = ReserveName("loop_iteration");
                string body = ReserveName("LoopBody");
                string endLoop = ReserveName("LoopEnd");

                additionalDeclarations.Add($"int {iterationCount} = 0, {startingRunTextPos} = 0;");
                writer.WriteLine($"{iterationCount} = 0;");
                writer.WriteLine($"{startingRunTextPos} = pos;");
                writer.WriteLine();

                // Iteration body
                MarkLabel(body, emitSemicolon: false);
                EmitTimeoutCheck(writer, hasTimeout);

                // We need to store the starting pos and crawl position so that it may
                // be backtracked through later.  This needs to be the starting position from
                // the iteration we're leaving, so it's pushed before updating it to pos.
                EmitStackPush(expressionHasCaptures ?
                    new[] { "base.Crawlpos()", startingRunTextPos, "pos" } :
                    new[] { startingRunTextPos, "pos" });
                writer.WriteLine();

                // Save off some state.  We need to store the current pos so we can compare it against
                // pos after the iteration, in order to determine whether the iteration was empty. Empty
                // iterations are allowed as part of min matches, but once we've met the min quote, empty matches
                // are considered match failures.
                writer.WriteLine($"{startingRunTextPos} = pos;");

                // Proactively increase the number of iterations.  We do this prior to the match rather than once
                // we know it's successful, because we need to decrement it as part of a failed match when
                // backtracking; it's thus simpler to just always decrement it as part of a failed match, even
                // when initially greedily matching the loop, which then requires we increment it before trying.
                writer.WriteLine($"{iterationCount}++;");
                writer.WriteLine();

                // Last but not least, we need to set the doneLabel that a failed match of the body will jump to.
                // Such an iteration match failure may or may not fail the whole operation, depending on whether
                // we've already matched the minimum required iterations, so we need to jump to a location that
                // will make that determination.
                string iterationFailedLabel = ReserveName("LoopIterationNoMatch");
                doneLabel = iterationFailedLabel;

                // Finally, emit the child.
                Debug.Assert(textSpanPos == 0);
                EmitNode(node.Child(0));
                TransferTextSpanPosToRunTextPos(); // ensure textSpanPos remains 0
                bool childBacktracks = doneLabel != iterationFailedLabel;

                // Loop condition.  Continue iterating greedily if we've not yet reached the maximum.  We also need to stop
                // iterating if the iteration matched empty and we already hit the minimum number of iterations.
                using (EmitBlock(writer, (minIterations > 0, maxIterations == int.MaxValue) switch
                {
                    (true, true) => $"if (pos != {startingRunTextPos} || {iterationCount} < {minIterations})",
                    (true, false) => $"if ((pos != {startingRunTextPos} || {iterationCount} < {minIterations}) && {iterationCount} < {maxIterations})",
                    (false, true) => $"if (pos != {startingRunTextPos})",
                    (false, false) => $"if (pos != {startingRunTextPos} && {iterationCount} < {maxIterations})",
                }))
                {
                    writer.WriteLine($"goto {body};");
                }

                // We've matched as many iterations as we can with this configuration.  Jump to what comes after the loop.
                writer.WriteLine($"goto {endLoop};");
                writer.WriteLine();

                // Now handle what happens when an iteration fails, which could be an initial failure or it
                // could be while backtracking.  We need to reset state to what it was before just that iteration
                // started.  That includes resetting pos and clearing out any captures from that iteration.
                MarkLabel(iterationFailedLabel, emitSemicolon: false);
                writer.WriteLine($"{iterationCount}--;");
                using (EmitBlock(writer, $"if ({iterationCount} < 0)"))
                {
                    writer.WriteLine($"goto {originalDoneLabel};");
                }
                EmitStackPop("pos", startingRunTextPos);
                if (expressionHasCaptures)
                {
                    string poppedCapturePos = ReserveName("loop_capturepos");
                    writer.WriteLine($"int {poppedCapturePos} = {StackPop()};");
                    EmitUncaptureUntil(poppedCapturePos);
                }
                LoadTextSpanLocal(writer);

                if (minIterations > 0)
                {
                    using (EmitBlock(writer, $"if ({iterationCount} == 0)"))
                    {
                        writer.WriteLine($"goto {originalDoneLabel};");
                    }

                    using (EmitBlock(writer, $"if ({iterationCount} < {minIterations})"))
                    {
                        writer.WriteLine($"goto {(childBacktracks ? doneLabel : originalDoneLabel)};");
                    }
                }

                if (isAtomic)
                {
                    doneLabel = originalDoneLabel;
                    MarkLabel(endLoop);
                }
                else
                {
                    if (childBacktracks)
                    {
                        writer.WriteLine($"goto {endLoop};");
                        writer.WriteLine();

                        string backtrack = ReserveName("LoopBacktrack");
                        MarkLabel(backtrack);
                        using (EmitBlock(writer, $"if ({iterationCount} == 0)"))
                        {
                            writer.WriteLine($"goto {originalDoneLabel};");
                        }
                        writer.WriteLine($"goto {doneLabel};");
                        doneLabel = backtrack;
                    }

                    MarkLabel(endLoop);

                    if (node.IsInLoop())
                    {
                        writer.WriteLine();

                        // Store the capture's state
                        EmitStackPush(startingRunTextPos, iterationCount);

                        // Skip past the backtracking section
                        string end = ReserveName("SkipBacktrack");
                        writer.WriteLine($"goto {end};");
                        writer.WriteLine();

                        // Emit a backtracking section that restores the capture's state and then jumps to the previous done label
                        string backtrack = ReserveName("LoopBacktrack");
                        MarkLabel(backtrack);
                        EmitStackPop(iterationCount, startingRunTextPos);

                        writer.WriteLine($"goto {doneLabel};");
                        writer.WriteLine();

                        doneLabel = backtrack;
                        MarkLabel(end);
                    }
                }
            }

            /// <summary>Pushes values on to the backtracking stack.</summary>
            void EmitStackPush(params string[] args)
            {
                Debug.Assert(args.Length is >= 1);
                string function = $"StackPush{args.Length}";

                additionalDeclarations.Add("int stackpos = 0;");

                if (!additionalLocalFunctions.ContainsKey(function))
                {
                    var lines = new string[24 + args.Length];
                    lines[0] = $"// <summary>Push {args.Length} value{(args.Length == 1 ? "" : "s")} onto the backtracking stack.</summary>";
                    lines[1] = $"[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]";
                    lines[2] = $"static void {function}(ref int[] stack, ref int pos{FormatN(", int arg{0}", args.Length)})";
                    lines[3] = $"{{";
                    lines[4] = $"    // If there's space available for {(args.Length > 1 ? $"all {args.Length} values, store them" : "the value, store it")}.";
                    lines[5] = $"    int[] s = stack;";
                    lines[6] = $"    int p = pos;";
                    lines[7] = $"    if ((uint){(args.Length > 1 ? $"(p + {args.Length - 1})" : "p")} < (uint)s.Length)";
                    lines[8] = $"    {{";
                    for (int i = 0; i < args.Length; i++)
                    {
                        lines[9 + i] = $"        s[p{(i == 0 ? "" : $" + {i}")}] = arg{i};";
                    }
                    lines[9 + args.Length] = args.Length > 1 ? $"        pos += {args.Length};" : "        pos++;";
                    lines[10 + args.Length] = $"        return;";
                    lines[11 + args.Length] = $"    }}";
                    lines[12 + args.Length] = $"";
                    lines[13 + args.Length] = $"    // Otherwise, resize the stack to make room and try again.";
                    lines[14 + args.Length] = $"    WithResize(ref stack, ref pos{FormatN(", arg{0}", args.Length)});";
                    lines[15 + args.Length] = $"";
                    lines[16 + args.Length] = $"    // <summary>Resize the backtracking stack array and push {args.Length} value{(args.Length == 1 ? "" : "s")} onto the stack.</summary>";
                    lines[17 + args.Length] = $"    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]";
                    lines[18 + args.Length] = $"    static void WithResize(ref int[] stack, ref int pos{FormatN(", int arg{0}", args.Length)})";
                    lines[19 + args.Length] = $"    {{";
                    lines[20 + args.Length] = $"        global::System.Array.Resize(ref stack, (pos + {args.Length - 1}) * 2);";
                    lines[21 + args.Length] = $"        {function}(ref stack, ref pos{FormatN(", arg{0}", args.Length)});";
                    lines[22 + args.Length] = $"    }}";
                    lines[23 + args.Length] = $"}}";

                    additionalLocalFunctions.Add(function, lines);
                }

                writer.WriteLine($"{function}(ref base.runstack!, ref stackpos, {string.Join(", ", args)});");
            }

            /// <summary>Pops values from the backtracking stack into the specified locations.</summary>
            void EmitStackPop(params string[] args)
            {
                Debug.Assert(args.Length is >= 1);

                if (args.Length == 1)
                {
                    writer.WriteLine($"{args[0]} = {StackPop()};");
                    return;
                }

                string function = $"StackPop{args.Length}";

                if (!additionalLocalFunctions.ContainsKey(function))
                {
                    var lines = new string[5 + args.Length];
                    lines[0] = $"// <summary>Pop {args.Length} value{(args.Length == 1 ? "" : "s")} from the backtracking stack.</summary>";
                    lines[1] = $"[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]";
                    lines[2] = $"static void {function}(int[] stack, ref int pos{FormatN(", out int arg{0}", args.Length)})";
                    lines[3] = $"{{";
                    for (int i = 0; i < args.Length; i++)
                    {
                        lines[4 + i] = $"    arg{i} = stack[--pos];";
                    }
                    lines[4 + args.Length] = $"}}";

                    additionalLocalFunctions.Add(function, lines);
                }

                writer.WriteLine($"{function}(base.runstack, ref stackpos, out {string.Join(", out ", args)});");
            }

            /// <summary>Expression for popping the next item from the backtracking stack.</summary>
            string StackPop() => "base.runstack![--stackpos]";

            /// <summary>Concatenates the strings resulting from formatting the format string with the values [0, count).</summary>
            static string FormatN(string format, int count) =>
                string.Concat(from i in Enumerable.Range(0, count)
                              select string.Format(format, i));
        }

        private static bool EmitLoopTimeoutCounterIfNeeded(IndentedTextWriter writer, RegexMethod rm)
        {
            if (rm.MatchTimeout != Timeout.Infinite)
            {
                writer.WriteLine("int loopTimeoutCounter = 0;");
                return true;
            }

            return false;
        }

        /// <summary>Emits a timeout check.</summary>
        private static void EmitTimeoutCheck(IndentedTextWriter writer, bool hasTimeout)
        {
            const int LoopTimeoutCheckCount = 2048; // A conservative value to guarantee the correct timeout handling.
            if (hasTimeout)
            {
                // Increment counter for each loop iteration.
                // Emit code to check the timeout every 2048th iteration.
                using (EmitBlock(writer, $"if (++loopTimeoutCounter == {LoopTimeoutCheckCount})"))
                {
                    writer.WriteLine("loopTimeoutCounter = 0;");
                    writer.WriteLine("base.CheckTimeout();");
                }
                writer.WriteLine();
            }
        }

        private static bool EmitInitializeCultureForGoIfNecessary(IndentedTextWriter writer, RegexMethod rm)
        {
            if (((RegexOptions)rm.Options & RegexOptions.CultureInvariant) == 0)
            {
                bool needsCulture = ((RegexOptions)rm.Options & RegexOptions.IgnoreCase) != 0;
                if (!needsCulture)
                {
                    int[] codes = rm.Code.Codes;
                    for (int codepos = 0; codepos < codes.Length; codepos += RegexCode.OpcodeSize(codes[codepos]))
                    {
                        if ((codes[codepos] & RegexCode.Ci) == RegexCode.Ci)
                        {
                            needsCulture = true;
                            break;
                        }
                    }
                }

                if (needsCulture)
                {
                    writer.WriteLine("global::System.Globalization.TextInfo textInfo = global::System.Globalization.CultureInfo.CurrentCulture.TextInfo;");
                    return true;
                }
            }

            return false;
        }

        private static bool UseToLowerInvariant(bool hasTextInfo, RegexOptions options) => !hasTextInfo || (options & RegexOptions.CultureInvariant) != 0;

        private static string ToLower(bool hasTextInfo, RegexOptions options, string expression) => UseToLowerInvariant(hasTextInfo, options) ? $"char.ToLowerInvariant({expression})" : $"textInfo.ToLower({expression})";

        private static string ToLowerIfNeeded(bool hasTextInfo, RegexOptions options, string expression, bool toLower) => toLower ? ToLower(hasTextInfo, options, expression) : expression;

        private static string MatchCharacterClass(bool hasTextInfo, RegexOptions options, string chExpr, string charClass, bool caseInsensitive, HashSet<string>? additionalDeclarations)
        {
            // We need to perform the equivalent of calling RegexRunner.CharInClass(ch, charClass),
            // but that call is relatively expensive.  Before we fall back to it, we try to optimize
            // some common cases for which we can do much better, such as known character classes
            // for which we can call a dedicated method, or a fast-path for ASCII using a lookup table.

            // First, see if the char class is a built-in one for which there's a better function
            // we can just call directly.  Everything in this section must work correctly for both
            // case-sensitive and case-insensitive modes, regardless of culture.
            switch (charClass)
            {
                case RegexCharClass.AnyClass:
                    // ideally this could just be "return true;", but we need to evaluate the expression for its side effects
                    return $"({chExpr} >= 0)"; // a char is unsigned and thus won't ever be negative, so this is equivalent to true

                case RegexCharClass.DigitClass:
                    return $"char.IsDigit({chExpr})";

                case RegexCharClass.NotDigitClass:
                    return $"!char.IsDigit({chExpr})";

                case RegexCharClass.SpaceClass:
                    return $"char.IsWhiteSpace({chExpr})";

                case RegexCharClass.NotSpaceClass:
                    return $"!char.IsWhiteSpace({chExpr})";
            }

            // If we're meant to be doing a case-insensitive lookup, and if we're not using the invariant culture,
            // lowercase the input.  If we're using the invariant culture, we may still end up calling ToLower later
            // on, but we may also be able to avoid it, in particular in the case of our lookup table, where we can
            // generate the lookup table already factoring in the invariant case sensitivity.  There are multiple
            // special-code paths between here and the lookup table, but we only take those if invariant is false;
            // if it were true, they'd need to use CallToLower().
            bool invariant = false;
            if (caseInsensitive)
            {
                invariant = UseToLowerInvariant(hasTextInfo, options);
                if (!invariant)
                {
                    chExpr = ToLower(hasTextInfo, options, chExpr);
                }
            }

            // Next, handle simple sets of one range, e.g. [A-Z], [0-9], etc.  This includes some built-in classes, like ECMADigitClass.
            if (!invariant && RegexCharClass.TryGetSingleRange(charClass, out char lowInclusive, out char highInclusive))
            {
                bool invert = RegexCharClass.IsNegated(charClass);
                return lowInclusive == highInclusive ?
                    $"({chExpr} {(invert ? "!=" : "==")} {Literal(lowInclusive)})" :
                    $"(((uint){chExpr}) - {Literal(lowInclusive)} {(invert ? ">" : "<=")} (uint)({Literal(highInclusive)} - {Literal(lowInclusive)}))";
            }

            // Next if the character class contains nothing but a single Unicode category, we can calle char.GetUnicodeCategory and
            // compare against it.  It has a fast-lookup path for ASCII, so is as good or better than any lookup we'd generate (plus
            // we get smaller code), and it's what we'd do for the fallback (which we get to avoid generating) as part of CharInClass.
            if (!invariant && RegexCharClass.TryGetSingleUnicodeCategory(charClass, out UnicodeCategory category, out bool negated))
            {
                return $"(char.GetUnicodeCategory({chExpr}) {(negated ? "!=" : "==")} global::System.Globalization.UnicodeCategory.{category})";
            }

            // Next, if there's only 2, 3, or 4 chars in the set (fairly common due to the sets we create for prefixes),
            // it may be cheaper and smaller to compare against each than it is to use a lookup table.  We can also special-case
            // the very common case with case insensitivity of two characters next to each other being the upper and lowercase
            // ASCII variants of each other, in which case we can use bit manipulation to avoid a comparison.
            if (!invariant && !RegexCharClass.IsNegated(charClass))
            {
                Span<char> setChars = stackalloc char[4];
                switch (RegexCharClass.GetSetChars(charClass, setChars))
                {
                    case 2:
                        if ((setChars[0] | 0x20) == setChars[1])
                        {
                            return $"(({chExpr} | 0x20) == {Literal(setChars[1])})";
                        }
                        additionalDeclarations?.Add("char ch;");
                        return $"(((ch = {chExpr}) == {Literal(setChars[0])}) | (ch == {Literal(setChars[1])}))";

                    case 3:
                        additionalDeclarations?.Add("char ch;");
                        return (setChars[0] | 0x20) == setChars[1] ?
                            $"((((ch = {chExpr}) | 0x20) == {Literal(setChars[1])}) | (ch == {Literal(setChars[2])}))" :
                            $"(((ch = {chExpr}) == {Literal(setChars[0])}) | (ch == {Literal(setChars[1])}) | (ch == {Literal(setChars[2])}))";

                    case 4:
                        if (((setChars[0] | 0x20) == setChars[1]) &&
                            ((setChars[2] | 0x20) == setChars[3]))
                        {
                            additionalDeclarations?.Add("char ch;");
                            return $"(((ch = ({chExpr} | 0x20)) == {Literal(setChars[1])}) | (ch == {Literal(setChars[3])}))";
                        }
                        break;
                }
            }

            // All options after this point require a ch local.
            additionalDeclarations?.Add("char ch;");

            // Analyze the character set more to determine what code to generate.
            RegexCharClass.CharClassAnalysisResults analysis = RegexCharClass.Analyze(charClass);

            if (!invariant) // if we're being asked to do a case insensitive, invariant comparison, use the lookup table
            {
                if (analysis.ContainsNoAscii)
                {
                    // We determined that the character class contains only non-ASCII,
                    // for example if the class were [\p{IsGreek}\p{IsGreekExtended}], which is
                    // the same as [\u0370-\u03FF\u1F00-1FFF]. (In the future, we could possibly
                    // extend the analysis to produce a known lower-bound and compare against
                    // that rather than always using 128 as the pivot point.)
                    return invariant ?
                        $"((ch = {chExpr}) >= 128 && global::System.Text.RegularExpressions.RegexRunner.CharInClass(char.ToLowerInvariant((char)ch), {Literal(charClass)}))" :
                        $"((ch = {chExpr}) >= 128 && global::System.Text.RegularExpressions.RegexRunner.CharInClass((char)ch, {Literal(charClass)}))";
                }

                if (analysis.AllAsciiContained)
                {
                    // We determined that every ASCII character is in the class, for example
                    // if the class were the negated example from case 1 above:
                    // [^\p{IsGreek}\p{IsGreekExtended}].
                    return invariant ?
                        $"((ch = {chExpr}) < 128 || global::System.Text.RegularExpressions.RegexRunner.CharInClass(char.ToLowerInvariant((char)ch), {Literal(charClass)}))" :
                        $"((ch = {chExpr}) < 128 || global::System.Text.RegularExpressions.RegexRunner.CharInClass((char)ch, {Literal(charClass)}))";
                }
            }

            // Now, our big hammer is to generate a lookup table that lets us quickly index by character into a yes/no
            // answer as to whether the character is in the target character class.  However, we don't want to store
            // a lookup table for every possible character for every character class in the regular expression; at one
            // bit for each of 65K characters, that would be an 8K bitmap per character class.  Instead, we handle the
            // common case of ASCII input via such a lookup table, which at one bit for each of 128 characters is only
            // 16 bytes per character class.  We of course still need to be able to handle inputs that aren't ASCII, so
            // we check the input against 128, and have a fallback if the input is >= to it.  Determining the right
            // fallback could itself be expensive.  For example, if it's possible that a value >= 128 could match the
            // character class, we output a call to RegexRunner.CharInClass, but we don't want to have to enumerate the
            // entire character class evaluating every character against it, just to determine whether it's a match.
            // Instead, we employ some quick heuristics that will always ensure we provide a correct answer even if
            // we could have sometimes generated better code to give that answer.

            // Generate the lookup table to store 128 answers as bits. We use a const string instead of a byte[] / static
            // data property because it lets IL emit handle all the details for us.
            string bitVectorString = StringExtensions.Create(8, (charClass, invariant), static (dest, state) => // String length is 8 chars == 16 bytes == 128 bits.
            {
                for (int i = 0; i < 128; i++)
                {
                    char c = (char)i;
                    bool isSet = state.invariant ?
                        RegexCharClass.CharInClass(char.ToLowerInvariant(c), state.charClass) :
                        RegexCharClass.CharInClass(c, state.charClass);
                    if (isSet)
                    {
                        dest[i >> 4] |= (char)(1 << (i & 0xF));
                    }
                }
            });

            // We determined that the character class may contain ASCII, so we
            // output the lookup against the lookup table.

            if (analysis.ContainsOnlyAscii)
            {
                // We know that all inputs that could match are ASCII, for example if the
                // character class were [A-Za-z0-9], so since the ch is now known to be >= 128, we
                // can just fail the comparison.
                return $"((ch = {chExpr}) < 128 && ({Literal(bitVectorString)}[ch >> 4] & (1 << (ch & 0xF))) != 0)";
            }

            if (analysis.AllNonAsciiContained)
            {
                // We know that all non-ASCII inputs match, for example if the character
                // class were [^\r\n], so since we just determined the ch to be >= 128, we can just
                // give back success.
                return $"((ch = {chExpr}) >= 128 || ({Literal(bitVectorString)}[ch >> 4] & (1 << (ch & 0xF))) != 0)";
            }

            // We know that the whole class wasn't ASCII, and we don't know anything about the non-ASCII
            // characters other than that some might be included, for example if the character class
            // were [\w\d], so since ch >= 128, we need to fall back to calling CharInClass.
            return invariant ?
                $"((ch = {chExpr}) < 128 ? ({Literal(bitVectorString)}[ch >> 4] & (1 << (ch & 0xF))) != 0 : global::System.Text.RegularExpressions.RegexRunner.CharInClass(char.ToLowerInvariant((char)ch), {Literal(charClass)}))" :
                $"((ch = {chExpr}) < 128 ? ({Literal(bitVectorString)}[ch >> 4] & (1 << (ch & 0xF))) != 0 : global::System.Text.RegularExpressions.RegexRunner.CharInClass((char)ch, {Literal(charClass)}))";
        }

        /// <summary>
        /// Replaces <see cref="AdditionalDeclarationsPlaceholder"/> in <paramref name="writer"/> with
        /// all of the variable declarations in <paramref name="declarations"/>.
        /// </summary>
        /// <param name="writer">The writer around a StringWriter to have additional declarations inserted into.</param>
        /// <param name="declarations">The additional declarations to insert.</param>
        /// <param name="position">The position into the writer at which to insert the additional declarations.</param>
        /// <param name="indent">The indentation to use for the additional declarations.</param>
        private static void ReplaceAdditionalDeclarations(IndentedTextWriter writer, HashSet<string> declarations, int position, int indent)
        {
            if (declarations.Count != 0)
            {
                StringBuilder tmp = new StringBuilder().AppendLine();
                foreach (string decl in declarations.OrderBy(s => s))
                {
                    for (int i = 0; i < indent; i++)
                    {
                        tmp.Append(IndentedTextWriter.DefaultTabString);
                    }

                    tmp.AppendLine(decl);
                }

                ((StringWriter)writer.InnerWriter).GetStringBuilder().Insert(position, tmp.ToString());
            }
        }

        /// <summary>Formats the character as valid C#.</summary>
        private static string Literal(char c) => SymbolDisplay.FormatLiteral(c, quote: true);

        /// <summary>Formats the string as valid C#.</summary>
        private static string Literal(string s) => SymbolDisplay.FormatLiteral(s, quote: true);

        private static string Literal(RegexOptions options)
        {
            string s = options.ToString();
            if (int.TryParse(s, out _))
            {
                // The options were formatted as an int, which means the runtime couldn't
                // produce a textual representation.  So just output casting the value as an int.
                return $"(global::System.Text.RegularExpressions.RegexOptions)({(int)options})";
            }

            // Parse the runtime-generated "Option1, Option2" into each piece and then concat
            // them back together.
            string[] parts = s.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < parts.Length; i++)
            {
                parts[i] = "global::System.Text.RegularExpressions.RegexOptions." + parts[i].Trim();
            }
            return string.Join(" | ", parts);
        }

        /// <summary>Gets a textual description of the node fit for rendering in a comment in source.</summary>
        private static string DescribeNode(RegexNode node) =>
            node.Type switch
            {
                RegexNode.Alternate => $"Match one of {node.ChildCount()} alternative expressions.",
                RegexNode.Atomic => $"Atomic group.",
                RegexNode.Beginning => "Beginning of string anchor.",
                RegexNode.Bol => "Beginning of line anchor.",
                RegexNode.Boundary => $"Matches a word boundary.",
                RegexNode.Capture when node.N != -1 => $"{DescribeNonNegative(node.M)} capturing group. Uncaptures the {DescribeNonNegative(node.N)} capturing group.",
                RegexNode.Capture when node.N == -1 => $"{DescribeNonNegative(node.M)} capturing group.",
                RegexNode.Concatenate => $"Match a sequence of expressions.",
                RegexNode.ECMABoundary => $"Matches a word boundary (according to ECMAScript rules).",
                RegexNode.Empty => $"Match empty.",
                RegexNode.End => "End of string anchor.",
                RegexNode.EndZ => "End of string or before ending newline anchor.",
                RegexNode.Eol => "End of line anchor.",
                RegexNode.Loop or RegexNode.Lazyloop => $"Loop {DescribeLoopConsumption(node)} {DescribeLoopBounds(node)}.",
                RegexNode.Multi => $"Match the string {Literal(node.Str!)}.",
                RegexNode.NonBoundary => $"Matches anything other than a word boundary.",
                RegexNode.NonECMABoundary => $"Matches anything other than a word boundary (according to ECMAScript rules).",
                RegexNode.Nothing => $"Fail to match.",
                RegexNode.Notone => $"Match any character other than {Literal(node.Ch)}.",
                RegexNode.Notoneloop or RegexNode.Notoneloopatomic or RegexNode.Notonelazy => $"Match a character other than {Literal(node.Ch)} {DescribeLoopConsumption(node)} {DescribeLoopBounds(node)}.",
                RegexNode.One => $"Match {Literal(node.Ch)}.",
                RegexNode.Oneloop or RegexNode.Oneloopatomic or RegexNode.Onelazy => $"Match {Literal(node.Ch)} {DescribeLoopConsumption(node)} {DescribeLoopBounds(node)}.",
                RegexNode.Prevent => $"Zero-width negative lookahead assertion.",
                RegexNode.Ref => $"Match the same text as matched by the {DescribeNonNegative(node.M)} capture group.",
                RegexNode.Require => $"Zero-width positive lookahead assertion.",
                RegexNode.Set => $"Match a character in the set {RegexCharClass.SetDescription(node.Str!)}.",
                RegexNode.Setloop or RegexNode.Setloopatomic or RegexNode.Setlazy => $"Match a character in the set {RegexCharClass.SetDescription(node.Str!)} {DescribeLoopConsumption(node)} {DescribeLoopBounds(node)}.",
                RegexNode.Start => "Start position anchor",
                RegexNode.Testgroup => $"Conditionally match {(node.ChildCount() == 2 ? "an expression" : "one of two expressions")} depending on whether an initial expression matches.",
                RegexNode.Testref => $"Conditionally match {(node.ChildCount() == 1 ? "an expression" : "one of two expressions")} depending on whether the {DescribeNonNegative(node.M)} capture group matched.",
                RegexNode.UpdateBumpalong => $"Advance the next matching position.",
                _ => $"Unknown node type {node.Type}",
            };

        /// <summary>Writes a textual description of the node tree fit for rending in source.</summary>
        /// <param name="writer">The writer to which the description should be written.</param>
        /// <param name="node">The node being written.</param>
        /// <param name="prefix">The prefix to write at the beginning of every line, including a "//" for a comment.</param>
        /// <param name="depth">The depth of the current node.</param>
        private static void DescribeExpression(TextWriter writer, RegexNode node, string prefix, int depth = 0)
        {
            // Write out the line for the node.
            const char BulletPoint = '\u25CB';
            writer.WriteLine($"{prefix}{new string(' ', depth * 4)}{BulletPoint} {DescribeNode(node)}");

            // Recur into each of its children.
            int childCount = node.ChildCount();
            if (childCount > 0)
            {
                for (int i = 0; i < childCount; i++)
                {
                    DescribeExpression(writer, node.Child(i), prefix, depth + 1);
                }
            }
        }

        /// <summary>Gets a textual description of a number, e.g. 3 => "3rd".</summary>
        private static string DescribeNonNegative(int n)
        {
            if (n < 0)
            {
                return n.ToString(CultureInfo.InvariantCulture);
            }

            int tens = n % 10;
            return tens is >= 1 and <= 3 && n % 100 is < 10 or > 20 ? // Ends in 1, 2, 3 but not 11, 12, or 13
                tens switch
                {
                    1 => $"{n}st",
                    2 => $"{n}nd",
                    _ => $"{n}rd",
                } :
                $"{n}th";
        }

        /// <summary>Gets a textual description of loop node's consumption, e.g. "greedily".</summary>
        private static string DescribeLoopConsumption(RegexNode node) =>
            node.Type switch
            {
                RegexNode.Oneloopatomic or RegexNode.Notoneloopatomic or RegexNode.Setloopatomic => "atomically",
                RegexNode.Oneloop or RegexNode.Notoneloop or RegexNode.Setloop => "greedily",
                RegexNode.Onelazy or RegexNode.Notonelazy or RegexNode.Setlazy => "lazily",
                RegexNode.Loop => node.IsAtomicByParent() ? "greedily and atomically" : "greedily",
                _ /* RegexNode.Lazy */ => node.IsAtomicByParent() ? "lazily and atomically" : "lazily",
            };

        /// <summary>Gets a textual description of a loop node's bounds, e.g. "at least once".</summary>
        private static string DescribeLoopBounds(RegexNode node) =>
            node.M == node.N ? $"{node.M} times" :
            (node.M, node.N) switch
            {
                (0, int.MaxValue) => "any number of times",
                (1, int.MaxValue) => "at least once",
                (0, 1) => "optionally",
                (_, int.MaxValue) => $"at least {node.M} times",
                _ => $"at least {node.M} and at most {node.N} times"
            };

        private static FinishEmitScope EmitScope(IndentedTextWriter writer, string title, bool faux = false) => EmitBlock(writer, $"// {title}", appendBlankLine: true, faux);

        private static FinishEmitScope EmitBlock(IndentedTextWriter writer, string? clause, bool appendBlankLine = false, bool faux = false)
        {
            if (clause is not null)
            {
                writer.WriteLine(clause);
            }
            writer.WriteLine(faux ? "//{" : "{");
            writer.Indent++;
            return new FinishEmitScope(writer, appendBlankLine, faux);
        }

        private static void EmitAdd(IndentedTextWriter writer, string variable, int value)
        {
            if (value == 0)
            {
                return;
            }

            writer.WriteLine(
                value == 1 ? $"{variable}++;" :
                value == -1 ? $"{variable}--;" :
                value > 0 ? $"{variable} += {value};" :
                value < 0 && value > int.MinValue ? $"{variable} -= {-value};" :
                $"{variable} += {value.ToString(CultureInfo.InvariantCulture)};");
        }

        private readonly struct FinishEmitScope : IDisposable
        {
            private readonly IndentedTextWriter _writer;
            private readonly bool _appendBlankLine;
            private readonly bool _faux;

            public FinishEmitScope(IndentedTextWriter writer, bool appendBlankLine, bool faux)
            {
                _writer = writer;
                _appendBlankLine = appendBlankLine;
                _faux = faux;
            }

            public void Dispose()
            {
                if (_writer is not null)
                {
                    _writer.Indent--;
                    _writer.WriteLine(_faux ? "//}" : "}");
                    if (_appendBlankLine)
                    {
                        _writer.WriteLine();
                    }
                }
            }
        }
    }
}
