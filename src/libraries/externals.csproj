<Project Sdk="Microsoft.Build.NoTargets">
  <PropertyGroup>
    <!-- Set the RuntimeIdentifier so that the DotNetHost and DotNetHostPolicy packages resolve for the corresponding runtime. -->
    <RuntimeIdentifier>$(PackageRID)</RuntimeIdentifier>
    <SwapNativeForIL Condition="'$(SwapNativeForIL)' == '' and ('$(Configuration)' == 'Debug' or '$(Coverage)' == 'true') and '$(RuntimeFlavor)' != 'Mono'">true</SwapNativeForIL>
    <TargetFrameworks>$(NetCoreAppCurrent)</TargetFrameworks>
    <!-- Binplace properties -->
    <BinPlaceForTargetVertical>false</BinPlaceForTargetVertical>
    <BinPlaceNative>true</BinPlaceNative>
    <BinPlaceRuntime>false</BinPlaceRuntime>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
  </PropertyGroup>

  <ItemGroup>
    <!-- Only binplace the hosts into the shared framework, not the runtime pack-->
    <BinPlaceTargetFrameworks Include="$(NetCoreAppCurrent)-$(TargetOS)"
                              Condition="'$(BuildTargetFramework)' == '$(NetCoreAppCurrent)' or '$(BuildTargetFramework)' == ''">
      <NativePath >$(NetCoreAppCurrentTestHostSharedFrameworkPath)</NativePath>
      <RuntimePath Condition="'$(IsNETCoreAppSrc)' == 'true'">$(NetCoreAppCurrentTestHostSharedFrameworkPath)</RuntimePath>
    </BinPlaceTargetFrameworks>
  </ItemGroup>

  <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
    <PackageReference Include="Microsoft.DiaSymReader.Native"
                      Version="$(MicrosoftDiaSymReaderNativeVersion)" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetsMobile)' != 'true'">
    <PackageReference Include="Microsoft.NETCore.DotNetHost"
                      Version="$(MicrosoftNETCoreDotNetHostVersion)" />
    <PackageReference Include="Microsoft.NETCore.DotNetHostPolicy"
                      Version="$(MicrosoftNETCoreDotNetHostPolicyVersion)" />
  </ItemGroup>

  <!-- Setup the testing shared framework host -->
  <Target Name="SetupTestingHost"
          AfterTargets="AfterResolveReferences">
    <PropertyGroup>
      <UseHardlink>true</UseHardlink>
      <!-- workaround core-setup problem for hardlinking dotnet executable to testhost: core-setup #4742 -->
      <UseHardlink Condition="$(PackageRID.StartsWith('freebsd'))">false</UseHardlink>
    </PropertyGroup>

    <!-- We do not need apphost.exe.
         Exclude here so that when building with the 2.x SDK we don't place it in the test shared framework. -->
    <ItemGroup>
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'%(Filename)' == 'apphost'" />
    </ItemGroup>

    <ItemGroup>
      <HostFxFile Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == 'hostfxr' or
                                                                  '%(ReferenceCopyLocalPaths.Filename)' == 'libhostfxr'" />
      <DotnetExe Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == 'dotnet'" />
    </ItemGroup>

    <Copy SourceFiles="@(HostFxFile)"
          DestinationFolder="$(NetCoreAppCurrentTestHostPath)host\fxr\$(ProductVersion)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="$(UseHardlink)" />

    <Copy SourceFiles="@(DotnetExe)"
          DestinationFolder="$(NetCoreAppCurrentTestHostPath)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="$(UseHardlink)" />

    <Exec Command="chmod +x $(NetCoreAppCurrentTestHostPath)%(DotnetExe.Filename)%(DotnetExe.Extension)" Condition="'$(TargetOS)' != 'windows' and '$(OS)' != 'Windows_NT'"/>
  </Target>

</Project>
