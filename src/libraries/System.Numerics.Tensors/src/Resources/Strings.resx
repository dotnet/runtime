<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Argument_DestinationTooShort" xml:space="preserve">
    <value>Destination is too short.</value>
  </data>
  <data name="Argument_SpansMustBeNonEmpty" xml:space="preserve">
    <value>Input span arguments must not be empty.</value>
  </data>
  <data name="Argument_SpansMustHaveSameLength" xml:space="preserve">
    <value>Input span arguments must all have the same length.</value>
  </data>
  <data name="Argument_InputAndDestinationSpanMustNotOverlap" xml:space="preserve">
    <value>The destination span may only overlap with an input span if the two spans start at the same memory location.</value>
  </data>
  <data name="Overflow_NegateTwosCompNum" xml:space="preserve">
    <value>Negating the minimum value of a twos complement number is invalid.</value>
  </data>
  <data name="Argument_InvalidEnumValue" xml:space="preserve">
    <value>The value '{0}' is not valid for this usage of the type {1}.</value>
  </data>
  <data name="Argument_InvalidTypeWithPointersNotSupported" xml:space="preserve">
    <value>Cannot use type '{0}'. Only value types without pointers or references are supported.</value>
  </data>
  <data name="DestinationTooShort" xml:space="preserve">
    <value>Destination is too short.</value>
  </data>
  <data name="NotSupported_CannotCallEqualsOnSpan" xml:space="preserve">
    <value>Equals() on TensorSpan and ReadOnlyTensorSpan is not supported. Use operator== instead.</value>
  </data>
  <data name="NotSupported_CannotCallGetHashCodeOnSpan" xml:space="preserve">
    <value>GetHashCode() on TensorSpan and ReadOnlyTensorSpan is not supported.</value>
  </data>
  <data name="ThrowArgument_IndicesLengthMustEqualRank" xml:space="preserve">
    <value>Number of Indices must equal the rank of the TensorSpan.</value>
  </data>
  <data name="ThrowArgument_LengthsMustEqualArrayLength" xml:space="preserve">
    <value>The total length specified by the lengths must equal the length of the array.</value>
  </data>
  <data name="ThrowArgument_1DTensorRequired" xml:space="preserve">
    <value>Must be a 1d tensor</value>
  </data>
  <data name="ThrowArgument_AxisLargerThanRank" xml:space="preserve">
    <value>Cannot select an axis greater than the current Rank</value>
  </data>
  <data name="ThrowArgument_ConcatenateTooFewTensors" xml:space="preserve">
    <value>Must provide at least 2 tensors to Concatenate</value>
  </data>
  <data name="ThrowArgument_DimensionsNotSame" xml:space="preserve">
    <value>Number of dimensions to slice does not equal the number of dimensions in the span</value>
  </data>
  <data name="ThrowArgument_FilterTensorMustEqualTensorLength" xml:space="preserve">
    <value>The total length of the filter tensor must equal the length of the tensor to be filtered.</value>
  </data>
  <data name="ThrowArgument_IncorrectNumberOfFilterItems" xml:space="preserve">
    <value>Number of elements provided does not match the number of filters.</value>
  </data>
  <data name="ThrowArgument_InPlaceInvalidShape" xml:space="preserve">
    <value>In place operations require the same shape for both tensors</value>
  </data>
  <data name="ThrowArgument_InvalidAxis" xml:space="preserve">
    <value>Invalid axis provided. Must be greater then or equal to 0 and less than the tensor rank.</value>
  </data>
  <data name="ThrowArgument_InvalidConcatenateShape" xml:space="preserve">
    <value>The tensors must have the same shape, except in the dimension corresponding to axis.</value>
  </data>
  <data name="ThrowArgument_InvalidReshapeDimensions" xml:space="preserve">
    <value>Provided dimensions are not valid for reshaping</value>
  </data>
  <data name="ThrowArgument_InvalidSqueezeAxis" xml:space="preserve">
    <value>Cannot select an axis to squeeze which has size not equal to one</value>
  </data>
  <data name="ThrowArgument_OnlyOneWildcard" xml:space="preserve">
    <value>Provided dimensions can only include 1 wildcard.</value>
  </data>
  <data name="ThrowArgument_PermuteAxisOrder" xml:space="preserve">
    <value>Must provide an axis order for each axis</value>
  </data>
  <data name="ThrowArgument_SetSliceInvalidShapes" xml:space="preserve">
    <value>Provided values must have the same shape as the input tensor.</value>
  </data>
  <data name="ThrowArgument_SetSliceNoRange" xml:space="preserve">
    <value>When no ranges are specified the values tensor must be equal in size as the input tensor.</value>
  </data>
  <data name="ThrowArgument_ShapesNotBroadcastCompatible" xml:space="preserve">
    <value>Shapes are not broadcast compatible.</value>
  </data>
  <data name="ThrowArgument_SplitNotSplitEvenly" xml:space="preserve">
    <value>The number of splits must perfectly divide the dimension.</value>
  </data>
  <data name="ThrowArgument_StackTooFewTensors" xml:space="preserve">
    <value>Must provide at least 2 tensors to Stack.</value>
  </data>
  <data name="ThrowArgument_TransposeTooFewDimensions" xml:space="preserve">
    <value>Must provide a tensor with at least 2 dimensions to transpose it.</value>
  </data>
  <data name="ThrowArgument_ValueNonNegative" xml:space="preserve">
    <value>The provided value must be non-negative.</value>
  </data>
  <data name="ThrowArgument_InvalidStridesAndLengths" xml:space="preserve">
    <value>The provided lengths and strides would allow you to access elements outside the provided memory.</value>
  </data>
  <data name="ThrowArgument_StrideLessThan0" xml:space="preserve">
    <value>Strides cannot be less than 0.</value>
  </data>
  <data name="Argument_2DTensorRequired" xml:space="preserve">
    <value>Must be a 2d Tensor.</value>
  </data>
  <data name="Argument_IncompatibleDimensions" xml:space="preserve">
    <value>Incompatible dimensions for provided tensors. left.Lengths[1] == {0} while right.Lengths[1] == {1}.</value>
  </data>
  <data name="ThrowArgument_StackShapesNotSame" xml:space="preserve">
    <value>All tensors must have the same shape.</value>
  </data>
</root>
