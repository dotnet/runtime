<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>$(NetCoreAppCurrent)-windows;$(NetCoreAppCurrent);$(NetCoreAppMinimum)-windows;$(NetCoreAppMinimum);netstandard2.0</TargetFrameworks>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <!-- CS0649: uninitialized interop type fields -->
    <!-- SA1129: https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/3277 -->
    <!-- CA1846: Prefer 'AsSpan' over 'Substring' when span-based overloads are available -->
    <NoWarn>$(NoWarn);CS0649;SA1129;CA1846;CA1847;IDE0059;CA1822</NoWarn>
    <Nullable>annotations</Nullable>
    <IsTrimmable>false</IsTrimmable>
    <IsPackable>true</IsPackable>
    <AddNETFrameworkPlaceholderFileToPackage>true</AddNETFrameworkPlaceholderFileToPackage>
    <AddNETFrameworkAssemblyReferenceToPackage>true</AddNETFrameworkAssemblyReferenceToPackage>
    <PackageDescription>Provides types to perform speech synthesis and speech recognition.

Commonly Used Types
System.Speech.Synthesis.SpeechSynthesizer
System.Speech.Recognition.SpeechRecognizer</PackageDescription>
  </PropertyGroup>

  <!-- DesignTimeBuild requires all the TargetFramework Derived Properties to not be present in the first property group. -->
  <PropertyGroup>
    <TargetPlatformIdentifier>$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)'))</TargetPlatformIdentifier>
    <GeneratePlatformNotSupportedAssemblyMessage Condition="'$(TargetPlatformIdentifier)' != 'windows'">SR.PlatformNotSupported_SystemSpeech</GeneratePlatformNotSupportedAssemblyMessage>
    <EnableDefaultCompileItems Condition="'$(TargetPlatformIdentifier)' != 'windows'">false</EnableDefaultCompileItems>
    <!-- System.Speech has its own SR scheme in which resource ID's are mapped to SAPI error codes. So we disable our default SR.cs generation and include resources explicitly -->
    <EnableDefaultEmbeddedResourceItems Condition="'$(TargetPlatformIdentifier)' == 'windows'">false</EnableDefaultEmbeddedResourceItems>
  </PropertyGroup>

  <ItemGroup Condition="'$(TargetPlatformIdentifier)' == 'windows'">
    <Compile Include="$(CommonPath)Interop\Windows\Interop.Libraries.cs"
            Link="Common\Interop\Windows\Interop.Libraries.cs" />
    <Compile Include="$(CommonPath)Interop\Windows\WinMm\Interop.MMSYSERR.cs"
            Link="Common\Interop\Windows\WinMm\Interop.MMSYSERR.cs" />
    <Compile Include="$(CommonPath)Interop\Windows\WinMm\Interop.waveOutClose.cs"
            Link="Common\Interop\Windows\WinMm\Interop.waveOutClose.cs" />
    <Compile Include="$(CommonPath)Interop\Windows\WinMm\Interop.waveOutGetDevCaps.cs"
            Link="Common\Interop\Windows\WinMm\Interop.waveOutGetDevCaps.cs" />
    <Compile Include="$(CommonPath)Interop\Windows\WinMm\Interop.waveOutGetNumDevs.cs"
            Link="Common\Interop\Windows\WinMm\Interop.waveOutGetNumDevs.cs" />
    <Compile Include="$(CommonPath)Interop\Windows\WinMm\Interop.waveOutOpen.cs"
            Link="Common\Interop\Windows\WinMm\Interop.waveOutOpen.cs" />
    <Compile Include="$(CommonPath)Interop\Windows\WinMm\Interop.waveOutPause.cs"
            Link="Common\Interop\Windows\WinMm\Interop.waveOutOpen.cs" />
    <Compile Include="$(CommonPath)Interop\Windows\WinMm\Interop.waveOutPrepareHeader.cs"
            Link="Common\Interop\Windows\WinMm\Interop.waveOutPrepareHeader.cs" />
    <Compile Include="$(CommonPath)Interop\Windows\WinMm\Interop.waveOutReset.cs"
            Link="Common\Interop\Windows\WinMm\Interop.waveOutReset.cs" />
    <Compile Include="$(CommonPath)Interop\Windows\WinMm\Interop.waveOutRestart.cs"
            Link="Common\Interop\Windows\WinMm\Interop.waveOutRestart.cs" />
    <Compile Include="$(CommonPath)Interop\Windows\WinMm\Interop.waveOutWrite.cs"
            Link="Common\Interop\Windows\WinMm\Interop.waveOutWrite.cs" />
  </ItemGroup>

  <ItemGroup Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net7.0-windows'))">
    <Compile Include="$(CommonPath)DisableRuntimeMarshalling.cs"
             Link="Common\DisableRuntimeMarshalling.cs" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetPlatformIdentifier)' == 'windows'">
    <EmbeddedResource Include="Resources\Strings.resx"
                      Visible="true"
                      ManifestResourceName="ExceptionStringTable" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="upstable_chs.upsmap"
                      LogicalName="upstable_chs.upsmap" />
    <EmbeddedResource Include="upstable_cht.upsmap"
                      LogicalName="upstable_cht.upsmap" />
    <EmbeddedResource Include="upstable_deu.upsmap"
                      LogicalName="upstable_deu.upsmap" />
    <EmbeddedResource Include="upstable_enu.upsmap"
                      LogicalName="upstable_enu.upsmap" />
    <EmbeddedResource Include="upstable_esp.upsmap"
                      LogicalName="upstable_esp.upsmap" />
    <EmbeddedResource Include="upstable_fra.upsmap"
                      LogicalName="upstable_fra.upsmap" />
    <EmbeddedResource Include="upstable_jpn.upsmap"
                      LogicalName="upstable_jpn.upsmap" />
  </ItemGroup>
</Project>
