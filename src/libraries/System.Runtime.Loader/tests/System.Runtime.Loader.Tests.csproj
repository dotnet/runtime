<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <RootNamespace>System.Runtime.Loader.Tests</RootNamespace>
    <TargetFrameworks>$(NetCoreAppCurrent)</TargetFrameworks>
    <TestRuntime>true</TestRuntime>
    <IncludeRemoteExecutor>true</IncludeRemoteExecutor>
    <!-- Some tests rely on no deps.json file being present. -->
    <GenerateDependencyFile>false</GenerateDependencyFile>
    <!-- EnC tests on targets without a remote executor need the environment variable set before launching the test -->
    <WasmXHarnessMonoArgs>--setenv=DOTNET_MODIFIABLE_ASSEMBLIES=debug</WasmXHarnessMonoArgs>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="ApplyUpdateTest.cs" />
    <Compile Include="ApplyUpdateUtil.cs" />
    <Compile Include="AssemblyLoadContextTest.cs" />
    <Compile Include="CollectibleAssemblyLoadContextTest.cs" />
    <Compile Include="ContextualReflection.cs" />
    <Compile Include="CustomTPALoadContext.cs" />
    <Compile Include="MetadataUpdateHandlerAttributeTest.cs" />
    <Compile Include="ResourceAssemblyLoadContext.cs" />
    <Compile Include="SatelliteAssemblies.cs" />
    <Compile Include="LoaderLinkTest.cs" />
    <EmbeddedResource Include="MainStrings*.resx" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="System.Runtime.Loader.Test.Assembly\System.Runtime.Loader.Test.Assembly.csproj"
                      ReferenceOutputAssembly="false"
                      OutputItemType="EmbeddedResource" />
    <ProjectReference Include="System.Runtime.Loader.Test.Assembly2\System.Runtime.Loader.Test.Assembly2.csproj"
                      ReferenceOutputAssembly="false"
                      OutputItemType="EmbeddedResource" />
    <ProjectReference Include="System.Runtime.Loader.Test.AssemblyNotSupported\System.Runtime.Loader.Test.AssemblyNotSupported.csproj"
                      ReferenceOutputAssembly="false"
                      OutputItemType="EmbeddedResource" />
    <ProjectReference Include="ContextualReflectionDependency\System.Runtime.Loader.Test.ContextualReflectionDependency.csproj" />
    <ProjectReference Include="ReferencedClassLib\ReferencedClassLib.csproj" />
    <ProjectReference Include="ReferencedClassLibNeutralIsSatellite\ReferencedClassLibNeutralIsSatellite.csproj" />
    <ProjectReference Include="LoaderLinkTest.Shared\LoaderLinkTest.Shared.csproj" />
    <ProjectReference Include="LoaderLinkTest.Dynamic\LoaderLinkTest.Dynamic.csproj" />
    <ProjectReference Include="ApplyUpdate\System.Reflection.Metadata.ApplyUpdate.Test.MethodBody1\System.Reflection.Metadata.ApplyUpdate.Test.MethodBody1.csproj" />
    <ProjectReference Include="ApplyUpdate\System.Reflection.Metadata.ApplyUpdate.Test.ClassWithCustomAttributes\System.Reflection.Metadata.ApplyUpdate.Test.ClassWithCustomAttributes.csproj" />
    <ProjectReference Include="ApplyUpdate\System.Reflection.Metadata.ApplyUpdate.Test.CustomAttributeUpdate\System.Reflection.Metadata.ApplyUpdate.Test.CustomAttributeUpdate.csproj" />

  </ItemGroup>
  <ItemGroup Condition="'$(TargetOS)' == 'Browser'">
    <WasmFilesToIncludeFromPublishDir Include="$(AssemblyName).dll" />

    <TrimmerRootDescriptor Include="$(MSBuildThisFileDirectory)ILLink.Descriptors.xml" />
  </ItemGroup>

  <Target Name="PreserveEnCAssembliesFromLinking"
	  Condition="'$(TargetOS)' == 'Browser' and '$(EnableAggressiveTrimming)' == 'true'"
	  BeforeTargets="ConfigureTrimming">
    <ItemGroup>
      <!-- Don't modify EnC test assemblies -->
      <TrimmerRootAssembly
          Condition="$([System.String]::Copy('%(ResolvedFileToPublish.FileName)%(ResolvedFileToPublish.Extension)').EndsWith('System.Reflection.Metadata.ApplyUpdate.Test.MethodBody1.dll'))"
          Include="%(ResolvedFileToPublish.FullPath)" />
      <TrimmerRootAssembly
          Condition="$([System.String]::Copy('%(ResolvedFileToPublish.FileName)%(ResolvedFileToPublish.Extension)').EndsWith('System.Reflection.Metadata.ApplyUpdate.Test.ClassWithCustomAttributes.dll'))"
          Include="%(ResolvedFileToPublish.FullPath)" />
      <TrimmerRootAssembly
          Condition="$([System.String]::Copy('%(ResolvedFileToPublish.FileName)%(ResolvedFileToPublish.Extension)').EndsWith('System.Reflection.Metadata.ApplyUpdate.Test.CustomAttributeUpdate.dll'))"
          Include="%(ResolvedFileToPublish.FullPath)" />
    </ItemGroup>
  </Target>

  <Target Name="IncludeDeltasInWasmBundle"
	  BeforeTargets="PrepareForWasmBuildApp"
	  Condition="'$(TargetOS)' == 'Browser'">
    <ItemGroup>
      <!-- FIXME: this belongs in eng/testing/tests.wasm.targets -->
      <!-- FIXME: Can we do something on the Content items in the referenced projects themselves to get this for free? -->
      <WasmFilesToIncludeInFileSystem Include="@(PublishItemsOutputGroupOutputs)"
				      Condition="$([System.String]::new('%(PublishItemsOutputGroupOutputs.Identity)').EndsWith('.dmeta'))" />
      <WasmFilesToIncludeInFileSystem Include="@(PublishItemsOutputGroupOutputs)"
				      Condition="$([System.String]::new('%(PublishItemsOutputGroupOutputs.Identity)').EndsWith('.dil'))" />
      <WasmFilesToIncludeInFileSystem Include="@(PublishItemsOutputGroupOutputs)"
				      Condition="$([System.String]::new('%(PublishItemsOutputGroupOutputs.Identity)').EndsWith('.dpdb'))" />
    </ItemGroup>
  </Target>
</Project>
