// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using Microsoft.Extensions.Options;
using Microsoft.Extensions.Options.Generators;
using SourceGenerators.Tests;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Reflection;
using System.Threading.Tasks;
using Xunit;

namespace Microsoft.Gen.OptionsValidation.Unit.Test;

public class EmitterTests
{
    [ConditionalFact(typeof(PlatformDetection), nameof(PlatformDetection.IsNotBrowser))]
    public async Task TestEmitterWithCustomValidator()
    {
        string source = """
            using System;
            using System.ComponentModel.DataAnnotations;
            using Microsoft.Extensions.Options;

            #nullable enable

            namespace HelloWorld
            {
                public class MyOptions
                {
                    [Required]
                    public string Val1 { get; set; } = string.Empty;

                    [Range(1, 3)]
                    public int Val2 { get; set; }
                }

                [OptionsValidator]
                public partial struct MyOptionsValidator : IValidateOptions<MyOptions>
                {
                }
            }
            """;

        string generatedSource = """

    // <auto-generated/>
    #nullable enable
    #pragma warning disable CS1591 // Compensate for https://github.com/dotnet/roslyn/issues/54103
    namespace HelloWorld
{
    partial struct MyOptionsValidator
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "42.42.42.42")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::HelloWorld.MyOptions options)
        {
            var baseName = (string.IsNullOrEmpty(name) ? "MyOptions" : name) + ".";
            var builder = new global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder();
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "Val1";
            context.DisplayName = baseName + "Val1";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Val1!, context, validationResults, validationAttributes))
            {
                builder.AddResults(validationResults);
            }

            context.MemberName = "Val2";
            context.DisplayName = baseName + "Val2";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A2);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Val2!, context, validationResults, validationAttributes))
            {
                builder.AddResults(validationResults);
            }

            return builder.Build();
        }
    }
}
namespace __OptionValidationStaticInstances
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "42.42.42.42")]
    file static class __Attributes
    {
        internal static readonly global::System.ComponentModel.DataAnnotations.RequiredAttribute A1 = new global::System.ComponentModel.DataAnnotations.RequiredAttribute();

        internal static readonly global::System.ComponentModel.DataAnnotations.RangeAttribute A2 = new global::System.ComponentModel.DataAnnotations.RangeAttribute(
            (int)1,
            (int)3);
    }
}
namespace __OptionValidationStaticInstances
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "42.42.42.42")]
    file static class __Validators
    {
    }
}

""";

        var (d, r) = await RoslynTestUtils.RunGenerator(
            new Generator(),
            new[]
            {
                Assembly.GetAssembly(typeof(RequiredAttribute))!,
                Assembly.GetAssembly(typeof(OptionsValidatorAttribute))!,
                Assembly.GetAssembly(typeof(IValidateOptions<object>))!,
            },
            new List<string> { source })
            .ConfigureAwait(false);

        Assert.Empty(d);
        _ = Assert.Single(r);

        Assert.Equal(generatedSource.Replace("\r\n", "\n"), r[0].SourceText.ToString().Replace("\r\n", "\n"));
    }
}
