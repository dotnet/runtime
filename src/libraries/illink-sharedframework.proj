<Project Sdk="Microsoft.Build.Traversal">

  <Target Name="ILLinkTrimSharedFramework"
          AfterTargets="Build"
          Condition="'$(BuildTargetFramework)' == '$(NetCoreAppCurrent)'">

    <PropertyGroup>
      <!-- default action for core assemblies -->
      <ILLinkArgs>$(ILLinkArgs) -c link</ILLinkArgs>
      <!-- keep type-forward assemblies (facades) -->
      <ILLinkArgs>$(ILLinkArgs) -t</ILLinkArgs>
      <!-- update debug symbols -->
      <ILLinkArgs>$(ILLinkArgs) -b true</ILLinkArgs>
      <!-- don't remove the embedded root xml resource since ILLink may run again on the assembly -->
      <ILLinkArgs Condition="'$(ILLinkTrimXml)' != ''">$(ILLinkArgs) --strip-descriptors false</ILLinkArgs>
      <!-- pass the non-embedded root xml file on the command line -->
      <ILLinkArgs Condition="'$(ILLinkTrimXmlLibraryBuild)' != ''">$(ILLinkArgs) -x "$(ILLinkTrimXmlLibraryBuild)"</ILLinkArgs>
      <!-- don't remove the embedded substitutions xml resource since ILLink may run again on the assembly -->
      <ILLinkArgs Condition="'$(ILLinkSubstitutionsXml)' != ''">$(ILLinkArgs) --strip-substitutions false</ILLinkArgs>
      <!-- don't remove the embedded link attributes xml resource since ILLink may run again on the assembly -->
      <!-- and ignore the link attributes xml file during the library build, since we need the attributes preserved until the final app is linked -->
      <ILLinkArgs>$(ILLinkArgs) --strip-link-attributes false --ignore-link-attributes true</ILLinkArgs>
      <!-- ignore unresolved references -->
      <ILLinkArgs>$(ILLinkArgs) --skip-unresolved true</ILLinkArgs>
      <!-- keep interface implementations -->
      <ILLinkArgs>$(ILLinkArgs) --disable-opt unusedinterfaces</ILLinkArgs>
      <!-- keep DynamicDependencyAttribute -->
      <ILLinkArgs>$(ILLinkArgs) --keep-dep-attributes true</ILLinkArgs>
      <!-- suppress warnings with the following codes:
           IL2006: The generic parameter 'T' from A with dynamically accessed member kinds B is passed into the generic parameter
                   'T' from 'System.Lazy<T>' which requires dynamically accessed member kinds 'PublicParameterlessConstructor'
           IL2009: Could not find method A in type B specified in resource C
           IL2025: Duplicate preserve of A in B
           IL2026: Calling A which has B can break functionality when trimming application code. The target method might be removed.
           IL2035: Unresolved assembly A in DynamicDependencyAttribute on B
           IL2050: P/invoke method A declares a parameter with COM marshalling. Correctness of COM interop
                   cannot be guaranteed after trimming. Interfaces and interface members might be removed.
      -->
      <ILLinkArgs>$(ILLinkArgs) --nowarn IL2006;IL2009;IL2025;IL2026;IL2035;IL2050</ILLinkArgs>
    </PropertyGroup>

    <ItemGroup>
      <!-- add two directories to load references: the libraries directory and CoreLib's directory -->
      <_DependencyDirectories Include="$(LibrariesPretrimmedArtifactsPath.TrimEnd('\'))" />
      <_DependencyDirectories Include="$(CoreCLRArtifactsPath)IL" />
    </ItemGroup>

    <PropertyGroup>
      <ILLinkArgs>$(ILLinkArgs) -d @(_DependencyDirectories->'"%(Identity)"', ' -d ')</ILLinkArgs>
    </PropertyGroup>

    <ItemGroup>
      <_AssembliesToLink Include="System.Private.CoreLib" />

      <_LibrariesToLink Include="$(LibrariesPretrimmedArtifactsPath)*.dll" />
      <_AssembliesToLink Include="@(_LibrariesToLink->'%(FileName)')" />
    </ItemGroup>

    <PropertyGroup>
      <ILLinkArgs>$(ILLinkArgs) -a @(_AssembliesToLink->'%(Identity)', ' -a ')</ILLinkArgs>

      <!-- Not currently using the trimmed CoreLib because it has already been trimmed and crossgen'd. -->
      <ILLinkArgs>$(ILLinkArgs) -p copy System.Private.CoreLib</ILLinkArgs>
    </PropertyGroup>

    <!-- When running from Desktop MSBuild, DOTNET_HOST_PATH is not set.
      In this case, explicitly specify the path to the dotnet host. -->
    <PropertyGroup Condition=" '$(DOTNET_HOST_PATH)' == '' ">
      <_DotNetHostDirectory>$(RepoRoot).dotnet</_DotNetHostDirectory>
      <_DotNetHostFileName>dotnet</_DotNetHostFileName>
      <_DotNetHostFileName Condition=" '$(OS)' == 'Windows_NT' ">dotnet.exe</_DotNetHostFileName>
    </PropertyGroup>

    <ILLink AssemblyPaths="$(LibrariesPretrimmedArtifactsPath)"
        RootAssemblyNames=""
        OutputDirectory="$(LibrariesTrimmedArtifactsPath)"
        ExtraArgs="$(ILLinkArgs)"
        ToolExe="$(_DotNetHostFileName)"
        ToolPath="$(_DotNetHostDirectory)" />
  </Target>

  <Import Project="$(RepositoryEngineeringDir)illink.targets" />
</Project>
