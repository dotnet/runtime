<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="net_WebSockets_InvalidState" xml:space="preserve">
    <value>The WebSocket is in an invalid state ('{0}') for this operation. Valid states are: '{1}'</value>
  </data>
  <data name="net_WebSockets_Generic" xml:space="preserve">
    <value>An internal WebSocket error occurred. Please see the innerException, if present, for more details. </value>
  </data>
  <data name="net_WebSockets_InvalidMessageType_Generic" xml:space="preserve">
    <value>The received  message type is invalid after calling {0}. {0} should only be used if no more data is expected from the remote endpoint. Use '{1}' instead to keep being able to receive data but close the output channel.</value>
  </data>
  <data name="net_Websockets_WebSocketBaseFaulted" xml:space="preserve">
    <value>An exception caused the WebSocket to enter the Aborted state. Please see the InnerException, if present, for more details.</value>
  </data>
  <data name="net_WebSockets_NotAWebSocket_Generic" xml:space="preserve">
    <value>A WebSocket operation was called on a request or response that is not a WebSocket.</value>
  </data>
  <data name="net_WebSockets_UnsupportedWebSocketVersion_Generic" xml:space="preserve">
    <value>Unsupported WebSocket version.</value>
  </data>
  <data name="net_WebSockets_UnsupportedProtocol_Generic" xml:space="preserve">
    <value>The WebSocket request or response operation was called with unsupported protocol(s). </value>
  </data>
  <data name="net_WebSockets_HeaderError_Generic" xml:space="preserve">
    <value>The WebSocket request or response contained unsupported header(s). </value>
  </data>
  <data name="net_WebSockets_ConnectionClosedPrematurely_Generic" xml:space="preserve">
    <value>The remote party closed the WebSocket connection without completing the close handshake.</value>
  </data>
  <data name="net_WebSockets_InvalidState_Generic" xml:space="preserve">
    <value>The WebSocket instance cannot be used for communication because it has been transitioned into an invalid state.</value>
  </data>
  <data name="net_WebSockets_ArgumentOutOfRange_TooSmall" xml:space="preserve">
    <value>The argument must be a value greater than {0}.</value>
  </data>
  <data name="net_WebSockets_InvalidEmptySubProtocol" xml:space="preserve">
    <value>Empty string is not a valid subprotocol value. Please use \"null\" to specify no value.</value>
  </data>
  <data name="net_WebSockets_InvalidCharInProtocolString" xml:space="preserve">
    <value>The WebSocket protocol '{0}' is invalid because it contains the invalid character '{1}'.</value>
  </data>
  <data name="net_WebSockets_ReasonNotNull" xml:space="preserve">
    <value>The close status description '{0}' is invalid. When using close status code '{1}' the description must be null.</value>
  </data>
  <data name="net_WebSockets_InvalidCloseStatusCode" xml:space="preserve">
    <value>The close status code '{0}' is reserved for system use only and cannot be specified when calling this method.</value>
  </data>
  <data name="net_WebSockets_InvalidCloseStatusDescription" xml:space="preserve">
    <value>The close status description '{0}' is too long. The UTF8-representation of the status description must not be longer than {1} bytes.</value>
  </data>
  <data name="net_WebSockets_UnsupportedPlatform" xml:space="preserve">
    <value>The WebSocket protocol is not supported on this platform.</value>
  </data>
  <data name="net_WebSockets_Argument_InvalidMessageType" xml:space="preserve">
    <value>The message type '{0}' is not allowed for the '{1}' operation. Valid message types are: '{2}, {3}'. To close the WebSocket, use the '{4}' operation instead. </value>
  </data>
  <data name="net_Websockets_AlreadyOneOutstandingOperation" xml:space="preserve">
    <value>There is already one outstanding '{0}' call for this WebSocket instance. ReceiveAsync and SendAsync can be called simultaneously, but at most one outstanding operation for each of them is allowed at the same time.</value>
  </data>
  <data name="net_Websockets_ReservedBitsSet" xml:space="preserve">
    <value>The WebSocket received a frame with one or more reserved bits set.</value>
  </data>
  <data name="net_Websockets_ClientReceivedMaskedFrame" xml:space="preserve">
    <value>The WebSocket server sent a masked frame.</value>
  </data>
  <data name="net_Websockets_ContinuationFromFinalFrame" xml:space="preserve">
    <value>The WebSocket received a continuation frame from a previous final message.</value>
  </data>
  <data name="net_Websockets_NonContinuationAfterNonFinalFrame" xml:space="preserve">
    <value>The WebSocket expected a continuation frame after having received a previous non-final frame.</value>
  </data>
  <data name="net_Websockets_InvalidControlMessage" xml:space="preserve">
    <value>The WebSocket received an invalid control message.</value>
  </data>
  <data name="net_Websockets_UnknownOpcode" xml:space="preserve">
    <value>The WebSocket received a frame with an unknown opcode: '0x{0}'.</value>
  </data>
  <data name="NotReadableStream" xml:space="preserve">
    <value>The base stream is not readable.</value>
  </data>
  <data name="NotWriteableStream" xml:space="preserve">
    <value>The base stream is not writeable.</value>
  </data>
  <data name="net_WebSockets_ArgumentOutOfRange" xml:space="preserve">
    <value>The argument must be a value between {0} and {1}.</value>
  </data>
  <data name="ZLibErrorDLLLoadError" xml:space="preserve">
    <value>The underlying compression routine could not be loaded correctly.</value>
  </data>
  <data name="ZLibErrorIncorrectInitParameters" xml:space="preserve">
    <value>The underlying compression routine received incorrect initialization parameters.</value>
  </data>
  <data name="ZLibErrorNotEnoughMemory" xml:space="preserve">
    <value>The underlying compression routine could not reserve sufficient memory.</value>
  </data>
  <data name="ZLibErrorUnexpected" xml:space="preserve">
    <value>The underlying compression routine returned an unexpected error code {0}.</value>
  </data>
  <data name="ZLibErrorVersionMismatch" xml:space="preserve">
    <value>The version of the underlying compression routine does not match expected version.</value>
  </data>
  <data name="UnsupportedCompression" xml:space="preserve">
    <value>The message was compressed using an unsupported compression method.</value>
  </data>
  <data name="net_Websockets_PerMessageCompressedFlagInContinuation" xml:space="preserve">
    <value>The WebSocket received a continuation frame with Per-Message Compressed flag set.</value>
  </data>
  <data name="ZLibErrorInconsistentStream" xml:space="preserve">
    <value>The stream state of the underlying compression routine is inconsistent.</value>
  </data>
  <data name="net_Websockets_PerMessageCompressedFlagWhenNotEnabled" xml:space="preserve">
    <value>The WebSocket received compressed frame when compression is not enabled.</value>
  </data>
</root>