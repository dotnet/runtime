// Do not edit this file manually it is auto-generated during the build based on the .resx file for this project.
namespace System
{
    internal static partial class SR
    {
#pragma warning disable 0414
        private const string s_resourcesName = "System.Xml.ReaderWriter.resources"; // assembly Name + .resources
#pragma warning restore 0414

#if !DEBUGRESOURCES
        internal static string Xml_UserException {
              get { return SR.GetResourceString("Xml_UserException", null); }
        }
        internal static string Xml_DefaultException {
              get { return SR.GetResourceString("Xml_DefaultException", null); }
        }
        internal static string Xml_InvalidOperation {
              get { return SR.GetResourceString("Xml_InvalidOperation", null); }
        }
        internal static string Xml_AsyncIsRunningException {
              get { return SR.GetResourceString("Xml_AsyncIsRunningException", null); }
        }
        internal static string Xml_ReaderAsyncNotSetException {
              get { return SR.GetResourceString("Xml_ReaderAsyncNotSetException", null); }
        }
        internal static string Xml_UnclosedQuote {
              get { return SR.GetResourceString("Xml_UnclosedQuote", null); }
        }
        internal static string Xml_UnexpectedEOF {
              get { return SR.GetResourceString("Xml_UnexpectedEOF", null); }
        }
        internal static string Xml_UnexpectedEOF1 {
              get { return SR.GetResourceString("Xml_UnexpectedEOF1", null); }
        }
        internal static string Xml_UnexpectedEOFInElementContent {
              get { return SR.GetResourceString("Xml_UnexpectedEOFInElementContent", null); }
        }
        internal static string Xml_BadStartNameChar {
              get { return SR.GetResourceString("Xml_BadStartNameChar", null); }
        }
        internal static string Xml_BadNameChar {
              get { return SR.GetResourceString("Xml_BadNameChar", null); }
        }
        internal static string Xml_BadDecimalEntity {
              get { return SR.GetResourceString("Xml_BadDecimalEntity", null); }
        }
        internal static string Xml_BadHexEntity {
              get { return SR.GetResourceString("Xml_BadHexEntity", null); }
        }
        internal static string Xml_MissingByteOrderMark {
              get { return SR.GetResourceString("Xml_MissingByteOrderMark", null); }
        }
        internal static string Xml_UnknownEncoding {
              get { return SR.GetResourceString("Xml_UnknownEncoding", null); }
        }
        internal static string Xml_InternalError {
              get { return SR.GetResourceString("Xml_InternalError", null); }
        }
        internal static string Xml_InvalidCharInThisEncoding {
              get { return SR.GetResourceString("Xml_InvalidCharInThisEncoding", null); }
        }
        internal static string Xml_ErrorPosition {
              get { return SR.GetResourceString("Xml_ErrorPosition", null); }
        }
        internal static string Xml_MessageWithErrorPosition {
              get { return SR.GetResourceString("Xml_MessageWithErrorPosition", null); }
        }
        internal static string Xml_UnexpectedTokenEx {
              get { return SR.GetResourceString("Xml_UnexpectedTokenEx", null); }
        }
        internal static string Xml_UnexpectedTokens2 {
              get { return SR.GetResourceString("Xml_UnexpectedTokens2", null); }
        }
        internal static string Xml_ExpectingWhiteSpace {
              get { return SR.GetResourceString("Xml_ExpectingWhiteSpace", null); }
        }
        internal static string Xml_TagMismatchEx {
              get { return SR.GetResourceString("Xml_TagMismatchEx", null); }
        }
        internal static string Xml_UnexpectedEndTag {
              get { return SR.GetResourceString("Xml_UnexpectedEndTag", null); }
        }
        internal static string Xml_UnknownNs {
              get { return SR.GetResourceString("Xml_UnknownNs", null); }
        }
        internal static string Xml_BadAttributeChar {
              get { return SR.GetResourceString("Xml_BadAttributeChar", null); }
        }
        internal static string Xml_ExpectExternalOrClose {
              get { return SR.GetResourceString("Xml_ExpectExternalOrClose", null); }
        }
        internal static string Xml_MissingRoot {
              get { return SR.GetResourceString("Xml_MissingRoot", null); }
        }
        internal static string Xml_MultipleRoots {
              get { return SR.GetResourceString("Xml_MultipleRoots", null); }
        }
        internal static string Xml_InvalidRootData {
              get { return SR.GetResourceString("Xml_InvalidRootData", null); }
        }
        internal static string Xml_XmlDeclNotFirst {
              get { return SR.GetResourceString("Xml_XmlDeclNotFirst", null); }
        }
        internal static string Xml_InvalidXmlDecl {
              get { return SR.GetResourceString("Xml_InvalidXmlDecl", null); }
        }
        internal static string Xml_InvalidNodeType {
              get { return SR.GetResourceString("Xml_InvalidNodeType", null); }
        }
        internal static string Xml_InvalidPIName {
              get { return SR.GetResourceString("Xml_InvalidPIName", null); }
        }
        internal static string Xml_InvalidXmlSpace {
              get { return SR.GetResourceString("Xml_InvalidXmlSpace", null); }
        }
        internal static string Xml_InvalidVersionNumber {
              get { return SR.GetResourceString("Xml_InvalidVersionNumber", null); }
        }
        internal static string Xml_DupAttributeName {
              get { return SR.GetResourceString("Xml_DupAttributeName", null); }
        }
        internal static string Xml_BadDTDLocation {
              get { return SR.GetResourceString("Xml_BadDTDLocation", null); }
        }
        internal static string Xml_ElementNotFound {
              get { return SR.GetResourceString("Xml_ElementNotFound", null); }
        }
        internal static string Xml_ElementNotFoundNs {
              get { return SR.GetResourceString("Xml_ElementNotFoundNs", null); }
        }
        internal static string Xml_CanNotBindToReservedNamespace {
              get { return SR.GetResourceString("Xml_CanNotBindToReservedNamespace", null); }
        }
        internal static string Xml_InvalidCharacter {
              get { return SR.GetResourceString("Xml_InvalidCharacter", null); }
        }
        internal static string Xml_InvalidBinHexValue {
              get { return SR.GetResourceString("Xml_InvalidBinHexValue", null); }
        }
        internal static string Xml_InvalidBinHexValueOddCount {
              get { return SR.GetResourceString("Xml_InvalidBinHexValueOddCount", null); }
        }
        internal static string Xml_InvalidTextDecl {
              get { return SR.GetResourceString("Xml_InvalidTextDecl", null); }
        }
        internal static string Xml_InvalidBase64Value {
              get { return SR.GetResourceString("Xml_InvalidBase64Value", null); }
        }
        internal static string Xml_UndeclaredEntity {
              get { return SR.GetResourceString("Xml_UndeclaredEntity", null); }
        }
        internal static string Xml_RecursiveParEntity {
              get { return SR.GetResourceString("Xml_RecursiveParEntity", null); }
        }
        internal static string Xml_RecursiveGenEntity {
              get { return SR.GetResourceString("Xml_RecursiveGenEntity", null); }
        }
        internal static string Xml_NotSameNametable {
              get { return SR.GetResourceString("Xml_NotSameNametable", null); }
        }
        internal static string Xml_NametableMismatch {
              get { return SR.GetResourceString("Xml_NametableMismatch", null); }
        }
        internal static string Xml_BadNamespaceDecl {
              get { return SR.GetResourceString("Xml_BadNamespaceDecl", null); }
        }
        internal static string Xml_ErrorParsingEntityName {
              get { return SR.GetResourceString("Xml_ErrorParsingEntityName", null); }
        }
        internal static string Xml_InvalidNmToken {
              get { return SR.GetResourceString("Xml_InvalidNmToken", null); }
        }
        internal static string Xml_EntityRefNesting {
              get { return SR.GetResourceString("Xml_EntityRefNesting", null); }
        }
        internal static string Xml_CannotResolveEntity {
              get { return SR.GetResourceString("Xml_CannotResolveEntity", null); }
        }
        internal static string Xml_CannotResolveEntityDtdIgnored {
              get { return SR.GetResourceString("Xml_CannotResolveEntityDtdIgnored", null); }
        }
        internal static string Xml_CannotResolveExternalSubset {
              get { return SR.GetResourceString("Xml_CannotResolveExternalSubset", null); }
        }
        internal static string Xml_CDATAEndInText {
              get { return SR.GetResourceString("Xml_CDATAEndInText", null); }
        }
        internal static string Xml_DtdAfterRootElement {
              get { return SR.GetResourceString("Xml_DtdAfterRootElement", null); }
        }
        internal static string Xml_ReadOnlyProperty {
              get { return SR.GetResourceString("Xml_ReadOnlyProperty", null); }
        }
        internal static string Xml_DtdIsProhibited {
              get { return SR.GetResourceString("Xml_DtdIsProhibited", null); }
        }
        internal static string Xml_DtdIsProhibitedEx {
              get { return SR.GetResourceString("Xml_DtdIsProhibitedEx", null); }
        }
        internal static string Xml_ReadSubtreeNotOnElement {
              get { return SR.GetResourceString("Xml_ReadSubtreeNotOnElement", null); }
        }
        internal static string Xml_DtdNotAllowedInFragment {
              get { return SR.GetResourceString("Xml_DtdNotAllowedInFragment", null); }
        }
        internal static string Xml_CannotStartDocumentOnFragment {
              get { return SR.GetResourceString("Xml_CannotStartDocumentOnFragment", null); }
        }
        internal static string Xml_ErrorOpeningExternalDtd {
              get { return SR.GetResourceString("Xml_ErrorOpeningExternalDtd", null); }
        }
        internal static string Xml_ErrorOpeningExternalEntity {
              get { return SR.GetResourceString("Xml_ErrorOpeningExternalEntity", null); }
        }
        internal static string Xml_ReadBinaryContentNotSupported {
              get { return SR.GetResourceString("Xml_ReadBinaryContentNotSupported", null); }
        }
        internal static string Xml_ReadValueChunkNotSupported {
              get { return SR.GetResourceString("Xml_ReadValueChunkNotSupported", null); }
        }
        internal static string Xml_InvalidReadContentAs {
              get { return SR.GetResourceString("Xml_InvalidReadContentAs", null); }
        }
        internal static string Xml_InvalidReadElementContentAs {
              get { return SR.GetResourceString("Xml_InvalidReadElementContentAs", null); }
        }
        internal static string Xml_MixedReadElementContentAs {
              get { return SR.GetResourceString("Xml_MixedReadElementContentAs", null); }
        }
        internal static string Xml_MixingReadValueChunkWithBinary {
              get { return SR.GetResourceString("Xml_MixingReadValueChunkWithBinary", null); }
        }
        internal static string Xml_MixingBinaryContentMethods {
              get { return SR.GetResourceString("Xml_MixingBinaryContentMethods", null); }
        }
        internal static string Xml_MixingV1StreamingWithV2Binary {
              get { return SR.GetResourceString("Xml_MixingV1StreamingWithV2Binary", null); }
        }
        internal static string Xml_InvalidReadValueChunk {
              get { return SR.GetResourceString("Xml_InvalidReadValueChunk", null); }
        }
        internal static string Xml_ReadContentAsFormatException {
              get { return SR.GetResourceString("Xml_ReadContentAsFormatException", null); }
        }
        internal static string Xml_DoubleBaseUri {
              get { return SR.GetResourceString("Xml_DoubleBaseUri", null); }
        }
        internal static string Xml_NotEnoughSpaceForSurrogatePair {
              get { return SR.GetResourceString("Xml_NotEnoughSpaceForSurrogatePair", null); }
        }
        internal static string Xml_InvalidWhitespaceCharacter {
              get { return SR.GetResourceString("Xml_InvalidWhitespaceCharacter", null); }
        }
        internal static string Xml_IncompatibleConformanceLevel {
              get { return SR.GetResourceString("Xml_IncompatibleConformanceLevel", null); }
        }
        internal static string Xml_LimitExceeded {
              get { return SR.GetResourceString("Xml_LimitExceeded", null); }
        }
        internal static string Xml_ClosedOrErrorReader {
              get { return SR.GetResourceString("Xml_ClosedOrErrorReader", null); }
        }
        internal static string Xml_CharEntityOverflow {
              get { return SR.GetResourceString("Xml_CharEntityOverflow", null); }
        }
        internal static string Xml_CannotResolveUrl {
              get { return SR.GetResourceString("Xml_CannotResolveUrl", null); }
        }
        internal static string Xml_MultipleDTDsProvided {
              get { return SR.GetResourceString("Xml_MultipleDTDsProvided", null); }
        }
        internal static string Xml_UnparsedEntityRef {
              get { return SR.GetResourceString("Xml_UnparsedEntityRef", null); }
        }
        internal static string Xml_ExternalEntityInStandAloneDocument {
              get { return SR.GetResourceString("Xml_ExternalEntityInStandAloneDocument", null); }
        }
        internal static string Xml_ExternalEntityInAttValue {
              get { return SR.GetResourceString("Xml_ExternalEntityInAttValue", null); }
        }
        internal static string Xml_ExpectSubOrClose {
              get { return SR.GetResourceString("Xml_ExpectSubOrClose", null); }
        }
        internal static string Xml_InvalidConditionalSection {
              get { return SR.GetResourceString("Xml_InvalidConditionalSection", null); }
        }
        internal static string Xml_UnexpectedCDataEnd {
              get { return SR.GetResourceString("Xml_UnexpectedCDataEnd", null); }
        }
        internal static string Xml_ExpectDtdMarkup {
              get { return SR.GetResourceString("Xml_ExpectDtdMarkup", null); }
        }
        internal static string Xml_UnclosedConditionalSection {
              get { return SR.GetResourceString("Xml_UnclosedConditionalSection", null); }
        }
        internal static string Xml_IncompleteDtdContent {
              get { return SR.GetResourceString("Xml_IncompleteDtdContent", null); }
        }
        internal static string Xml_EnumerationRequired {
              get { return SR.GetResourceString("Xml_EnumerationRequired", null); }
        }
        internal static string Xml_InvalidContentModel {
              get { return SR.GetResourceString("Xml_InvalidContentModel", null); }
        }
        internal static string Xml_FragmentId {
              get { return SR.GetResourceString("Xml_FragmentId", null); }
        }
        internal static string Xml_ExpectPcData {
              get { return SR.GetResourceString("Xml_ExpectPcData", null); }
        }
        internal static string Xml_ExpectNoWhitespace {
              get { return SR.GetResourceString("Xml_ExpectNoWhitespace", null); }
        }
        internal static string Xml_InvalidAttributeType {
              get { return SR.GetResourceString("Xml_InvalidAttributeType", null); }
        }
        internal static string Xml_ExpectOp {
              get { return SR.GetResourceString("Xml_ExpectOp", null); }
        }
        internal static string Xml_ExpectAttType {
              get { return SR.GetResourceString("Xml_ExpectAttType", null); }
        }
        internal static string Xml_ExpectExternalOrPublicId {
              get { return SR.GetResourceString("Xml_ExpectExternalOrPublicId", null); }
        }
        internal static string Xml_ExpectExternalIdOrEntityValue {
              get { return SR.GetResourceString("Xml_ExpectExternalIdOrEntityValue", null); }
        }
        internal static string Xml_ExpectIgnoreOrInclude {
              get { return SR.GetResourceString("Xml_ExpectIgnoreOrInclude", null); }
        }
        internal static string Xml_ColonInLocalName {
              get { return SR.GetResourceString("Xml_ColonInLocalName", null); }
        }
        internal static string Xml_InvalidParEntityRef {
              get { return SR.GetResourceString("Xml_InvalidParEntityRef", null); }
        }
        internal static string Xml_WriterAsyncNotSetException {
              get { return SR.GetResourceString("Xml_WriterAsyncNotSetException", null); }
        }
        internal static string Xml_PrefixForEmptyNs {
              get { return SR.GetResourceString("Xml_PrefixForEmptyNs", null); }
        }
        internal static string Xml_InvalidCommentChars {
              get { return SR.GetResourceString("Xml_InvalidCommentChars", null); }
        }
        internal static string Xml_UndefNamespace {
              get { return SR.GetResourceString("Xml_UndefNamespace", null); }
        }
        internal static string Xml_EmptyName {
              get { return SR.GetResourceString("Xml_EmptyName", null); }
        }
        internal static string Xml_EmptyLocalName {
              get { return SR.GetResourceString("Xml_EmptyLocalName", null); }
        }
        internal static string Xml_InvalidNameCharsDetail {
              get { return SR.GetResourceString("Xml_InvalidNameCharsDetail", null); }
        }
        internal static string Xml_NoStartTag {
              get { return SR.GetResourceString("Xml_NoStartTag", null); }
        }
        internal static string Xml_ClosedOrError {
              get { return SR.GetResourceString("Xml_ClosedOrError", null); }
        }
        internal static string Xml_WrongToken {
              get { return SR.GetResourceString("Xml_WrongToken", null); }
        }
        internal static string Xml_XmlPrefix {
              get { return SR.GetResourceString("Xml_XmlPrefix", null); }
        }
        internal static string Xml_XmlnsPrefix {
              get { return SR.GetResourceString("Xml_XmlnsPrefix", null); }
        }
        internal static string Xml_NamespaceDeclXmlXmlns {
              get { return SR.GetResourceString("Xml_NamespaceDeclXmlXmlns", null); }
        }
        internal static string Xml_NonWhitespace {
              get { return SR.GetResourceString("Xml_NonWhitespace", null); }
        }
        internal static string Xml_DupXmlDecl {
              get { return SR.GetResourceString("Xml_DupXmlDecl", null); }
        }
        internal static string Xml_CannotWriteXmlDecl {
              get { return SR.GetResourceString("Xml_CannotWriteXmlDecl", null); }
        }
        internal static string Xml_NoRoot {
              get { return SR.GetResourceString("Xml_NoRoot", null); }
        }
        internal static string Xml_InvalidPosition {
              get { return SR.GetResourceString("Xml_InvalidPosition", null); }
        }
        internal static string Xml_IncompleteEntity {
              get { return SR.GetResourceString("Xml_IncompleteEntity", null); }
        }
        internal static string Xml_InvalidSurrogateHighChar {
              get { return SR.GetResourceString("Xml_InvalidSurrogateHighChar", null); }
        }
        internal static string Xml_InvalidSurrogateMissingLowChar {
              get { return SR.GetResourceString("Xml_InvalidSurrogateMissingLowChar", null); }
        }
        internal static string Xml_InvalidSurrogatePairWithArgs {
              get { return SR.GetResourceString("Xml_InvalidSurrogatePairWithArgs", null); }
        }
        internal static string Xml_RedefinePrefix {
              get { return SR.GetResourceString("Xml_RedefinePrefix", null); }
        }
        internal static string Xml_DtdAlreadyWritten {
              get { return SR.GetResourceString("Xml_DtdAlreadyWritten", null); }
        }
        internal static string Xml_InvalidCharsInIndent {
              get { return SR.GetResourceString("Xml_InvalidCharsInIndent", null); }
        }
        internal static string Xml_IndentCharsNotWhitespace {
              get { return SR.GetResourceString("Xml_IndentCharsNotWhitespace", null); }
        }
        internal static string Xml_ConformanceLevelFragment {
              get { return SR.GetResourceString("Xml_ConformanceLevelFragment", null); }
        }
        internal static string Xml_SurrogatePairSplit {
              get { return SR.GetResourceString("Xml_SurrogatePairSplit", null); }
        }
        internal static string XmlConvert_BadFormat {
              get { return SR.GetResourceString("XmlConvert_BadFormat", null); }
        }
        internal static string XmlConvert_Overflow {
              get { return SR.GetResourceString("XmlConvert_Overflow", null); }
        }
        internal static string XmlConvert_TypeListBadMapping2 {
              get { return SR.GetResourceString("XmlConvert_TypeListBadMapping2", null); }
        }
        internal static string XmlConvert_TypeNoPrefix {
              get { return SR.GetResourceString("XmlConvert_TypeNoPrefix", null); }
        }
        internal static string XmlConvert_TypeNoNamespace {
              get { return SR.GetResourceString("XmlConvert_TypeNoNamespace", null); }
        }
        internal static string XmlConvert_NotOneCharString {
              get { return SR.GetResourceString("XmlConvert_NotOneCharString", null); }
        }
        internal static string XmlConvert_BadUri {
              get { return SR.GetResourceString("XmlConvert_BadUri", null); }
        }
        internal static string Sch_InvalidDateTimeOption {
              get { return SR.GetResourceString("Sch_InvalidDateTimeOption", null); }
        }
        internal static string Argument_InvalidCodePageConversionIndex {
              get { return SR.GetResourceString("Argument_InvalidCodePageConversionIndex", null); }
        }
        internal static string ArgumentOutOfRange_Range {
              get { return SR.GetResourceString("ArgumentOutOfRange_Range", null); }
        }
        internal static string Sch_ParEntityRefNesting {
              get { return SR.GetResourceString("Sch_ParEntityRefNesting", null); }
        }
        internal static string Xml_SystemPathResolverCannotOpenUri {
              get { return SR.GetResourceString("Xml_SystemPathResolverCannotOpenUri", null); }
        }
        internal static string Enc_InvalidByteInEncoding {
              get { return SR.GetResourceString("Enc_InvalidByteInEncoding", null); }
        }
        internal static string Xml_UnsupportedClass {
              get { return SR.GetResourceString("Xml_UnsupportedClass", null); }
        }
        internal static string ArgumentNull_Array {
              get { return SR.GetResourceString("ArgumentNull_Array", null); }
        }
        internal static string Argument_ConversionOverflow {
              get { return SR.GetResourceString("Argument_ConversionOverflow", null); }
        }
        internal static string ArgumentOutOfRange_Index {
              get { return SR.GetResourceString("ArgumentOutOfRange_Index", null); }
        }
        internal static string ArgumentOutOfRange_NeedNonNegNum {
              get { return SR.GetResourceString("ArgumentOutOfRange_NeedNonNegNum", null); }
        }
        internal static string ArgumentOutOfRange_IndexCount {
              get { return SR.GetResourceString("ArgumentOutOfRange_IndexCount", null); }
        }
        internal static string Argument_EncodingConversionOverflowBytes {
              get { return SR.GetResourceString("Argument_EncodingConversionOverflowBytes", null); }
        }
        internal static string ArgumentOutOfRange_IndexCountBuffer {
              get { return SR.GetResourceString("ArgumentOutOfRange_IndexCountBuffer", null); }
        }
        internal static string Argument_InvalidCharSequenceNoIndex {
              get { return SR.GetResourceString("Argument_InvalidCharSequenceNoIndex", null); }
        }
#else
        internal static string Xml_UserException {
              get { return SR.GetResourceString("Xml_UserException", @"{0}"); }
        }
        internal static string Xml_DefaultException {
              get { return SR.GetResourceString("Xml_DefaultException", @"An XML error has occurred."); }
        }
        internal static string Xml_InvalidOperation {
              get { return SR.GetResourceString("Xml_InvalidOperation", @"Operation is not valid due to the current state of the object."); }
        }
        internal static string Xml_AsyncIsRunningException {
              get { return SR.GetResourceString("Xml_AsyncIsRunningException", @"An asynchronous operation is already in progress."); }
        }
        internal static string Xml_ReaderAsyncNotSetException {
              get { return SR.GetResourceString("Xml_ReaderAsyncNotSetException", @"Set XmlReaderSettings.Async to true if you want to use Async Methods."); }
        }
        internal static string Xml_UnclosedQuote {
              get { return SR.GetResourceString("Xml_UnclosedQuote", @"There is an unclosed literal string."); }
        }
        internal static string Xml_UnexpectedEOF {
              get { return SR.GetResourceString("Xml_UnexpectedEOF", @"Unexpected end of file while parsing {0} has occurred."); }
        }
        internal static string Xml_UnexpectedEOF1 {
              get { return SR.GetResourceString("Xml_UnexpectedEOF1", @"Unexpected end of file has occurred."); }
        }
        internal static string Xml_UnexpectedEOFInElementContent {
              get { return SR.GetResourceString("Xml_UnexpectedEOFInElementContent", @"Unexpected end of file has occurred. The following elements are not closed: {0}"); }
        }
        internal static string Xml_BadStartNameChar {
              get { return SR.GetResourceString("Xml_BadStartNameChar", @"Name cannot begin with the '{0}' character, hexadecimal value {1}."); }
        }
        internal static string Xml_BadNameChar {
              get { return SR.GetResourceString("Xml_BadNameChar", @"The '{0}' character, hexadecimal value {1}, cannot be included in a name."); }
        }
        internal static string Xml_BadDecimalEntity {
              get { return SR.GetResourceString("Xml_BadDecimalEntity", @"Invalid syntax for a decimal numeric entity reference."); }
        }
        internal static string Xml_BadHexEntity {
              get { return SR.GetResourceString("Xml_BadHexEntity", @"Invalid syntax for a hexadecimal numeric entity reference."); }
        }
        internal static string Xml_MissingByteOrderMark {
              get { return SR.GetResourceString("Xml_MissingByteOrderMark", @"There is no Unicode byte order mark. Cannot switch to Unicode."); }
        }
        internal static string Xml_UnknownEncoding {
              get { return SR.GetResourceString("Xml_UnknownEncoding", @"System does not support '{0}' encoding."); }
        }
        internal static string Xml_InternalError {
              get { return SR.GetResourceString("Xml_InternalError", @"An internal error has occurred."); }
        }
        internal static string Xml_InvalidCharInThisEncoding {
              get { return SR.GetResourceString("Xml_InvalidCharInThisEncoding", @"Invalid character in the given encoding."); }
        }
        internal static string Xml_ErrorPosition {
              get { return SR.GetResourceString("Xml_ErrorPosition", @"Line {0}, position {1}."); }
        }
        internal static string Xml_MessageWithErrorPosition {
              get { return SR.GetResourceString("Xml_MessageWithErrorPosition", @"{0} Line {1}, position {2}."); }
        }
        internal static string Xml_UnexpectedTokenEx {
              get { return SR.GetResourceString("Xml_UnexpectedTokenEx", @"'{0}' is an unexpected token. The expected token is '{1}'."); }
        }
        internal static string Xml_UnexpectedTokens2 {
              get { return SR.GetResourceString("Xml_UnexpectedTokens2", @"'{0}' is an unexpected token. The expected token is '{1}' or '{2}'."); }
        }
        internal static string Xml_ExpectingWhiteSpace {
              get { return SR.GetResourceString("Xml_ExpectingWhiteSpace", @"'{0}' is an unexpected token. Expecting white space."); }
        }
        internal static string Xml_TagMismatchEx {
              get { return SR.GetResourceString("Xml_TagMismatchEx", @"The '{0}' start tag on line {1} position {2} does not match the end tag of '{3}'."); }
        }
        internal static string Xml_UnexpectedEndTag {
              get { return SR.GetResourceString("Xml_UnexpectedEndTag", @"Unexpected end tag."); }
        }
        internal static string Xml_UnknownNs {
              get { return SR.GetResourceString("Xml_UnknownNs", @"'{0}' is an undeclared namespace."); }
        }
        internal static string Xml_BadAttributeChar {
              get { return SR.GetResourceString("Xml_BadAttributeChar", @"'{0}', hexadecimal value {1}, is an invalid attribute character."); }
        }
        internal static string Xml_ExpectExternalOrClose {
              get { return SR.GetResourceString("Xml_ExpectExternalOrClose", @"Expecting external ID, '[' or '>'."); }
        }
        internal static string Xml_MissingRoot {
              get { return SR.GetResourceString("Xml_MissingRoot", @"Root element is missing."); }
        }
        internal static string Xml_MultipleRoots {
              get { return SR.GetResourceString("Xml_MultipleRoots", @"There are multiple root elements."); }
        }
        internal static string Xml_InvalidRootData {
              get { return SR.GetResourceString("Xml_InvalidRootData", @"Data at the root level is invalid."); }
        }
        internal static string Xml_XmlDeclNotFirst {
              get { return SR.GetResourceString("Xml_XmlDeclNotFirst", @"Unexpected XML declaration. The XML declaration must be the first node in the document, and no white space characters are allowed to appear before it."); }
        }
        internal static string Xml_InvalidXmlDecl {
              get { return SR.GetResourceString("Xml_InvalidXmlDecl", @"Syntax for an XML declaration is invalid."); }
        }
        internal static string Xml_InvalidNodeType {
              get { return SR.GetResourceString("Xml_InvalidNodeType", @"'{0}' is an invalid XmlNodeType."); }
        }
        internal static string Xml_InvalidPIName {
              get { return SR.GetResourceString("Xml_InvalidPIName", @"'{0}' is an invalid name for processing instructions."); }
        }
        internal static string Xml_InvalidXmlSpace {
              get { return SR.GetResourceString("Xml_InvalidXmlSpace", @"'{0}' is an invalid xml:space value."); }
        }
        internal static string Xml_InvalidVersionNumber {
              get { return SR.GetResourceString("Xml_InvalidVersionNumber", @"Version number '{0}' is invalid."); }
        }
        internal static string Xml_DupAttributeName {
              get { return SR.GetResourceString("Xml_DupAttributeName", @"'{0}' is a duplicate attribute name."); }
        }
        internal static string Xml_BadDTDLocation {
              get { return SR.GetResourceString("Xml_BadDTDLocation", @"Unexpected DTD declaration."); }
        }
        internal static string Xml_ElementNotFound {
              get { return SR.GetResourceString("Xml_ElementNotFound", @"Element '{0}' was not found."); }
        }
        internal static string Xml_ElementNotFoundNs {
              get { return SR.GetResourceString("Xml_ElementNotFoundNs", @"Element '{0}' with namespace name '{1}' was not found."); }
        }
        internal static string Xml_CanNotBindToReservedNamespace {
              get { return SR.GetResourceString("Xml_CanNotBindToReservedNamespace", @"Cannot bind to the reserved namespace."); }
        }
        internal static string Xml_InvalidCharacter {
              get { return SR.GetResourceString("Xml_InvalidCharacter", @"'{0}', hexadecimal value {1}, is an invalid character."); }
        }
        internal static string Xml_InvalidBinHexValue {
              get { return SR.GetResourceString("Xml_InvalidBinHexValue", @"'{0}' is not a valid BinHex text sequence."); }
        }
        internal static string Xml_InvalidBinHexValueOddCount {
              get { return SR.GetResourceString("Xml_InvalidBinHexValueOddCount", @"'{0}' is not a valid BinHex text sequence. The sequence must contain an even number of characters."); }
        }
        internal static string Xml_InvalidTextDecl {
              get { return SR.GetResourceString("Xml_InvalidTextDecl", @"Invalid text declaration."); }
        }
        internal static string Xml_InvalidBase64Value {
              get { return SR.GetResourceString("Xml_InvalidBase64Value", @"'{0}' is not a valid Base64 text sequence."); }
        }
        internal static string Xml_UndeclaredEntity {
              get { return SR.GetResourceString("Xml_UndeclaredEntity", @"Reference to undeclared entity '{0}'."); }
        }
        internal static string Xml_RecursiveParEntity {
              get { return SR.GetResourceString("Xml_RecursiveParEntity", @"Parameter entity '{0}' references itself."); }
        }
        internal static string Xml_RecursiveGenEntity {
              get { return SR.GetResourceString("Xml_RecursiveGenEntity", @"General entity '{0}' references itself."); }
        }
        internal static string Xml_NotSameNametable {
              get { return SR.GetResourceString("Xml_NotSameNametable", @"Not the same name table."); }
        }
        internal static string Xml_NametableMismatch {
              get { return SR.GetResourceString("Xml_NametableMismatch", @"XmlReaderSettings.XmlNameTable must be the same name table as in XmlParserContext.NameTable or XmlParserContext.NamespaceManager.NameTable, or it must be null."); }
        }
        internal static string Xml_BadNamespaceDecl {
              get { return SR.GetResourceString("Xml_BadNamespaceDecl", @"Invalid namespace declaration."); }
        }
        internal static string Xml_ErrorParsingEntityName {
              get { return SR.GetResourceString("Xml_ErrorParsingEntityName", @"An error occurred while parsing EntityName."); }
        }
        internal static string Xml_InvalidNmToken {
              get { return SR.GetResourceString("Xml_InvalidNmToken", @"Invalid NmToken value '{0}'."); }
        }
        internal static string Xml_EntityRefNesting {
              get { return SR.GetResourceString("Xml_EntityRefNesting", @"Entity replacement text must nest properly within markup declarations."); }
        }
        internal static string Xml_CannotResolveEntity {
              get { return SR.GetResourceString("Xml_CannotResolveEntity", @"Cannot resolve entity reference '{0}'."); }
        }
        internal static string Xml_CannotResolveEntityDtdIgnored {
              get { return SR.GetResourceString("Xml_CannotResolveEntityDtdIgnored", @"Cannot resolve entity reference '{0}' because the DTD has been ignored. To enable DTD processing set the DtdProcessing property on XmlReaderSettings to Parse and pass the settings into XmlReader.Create method."); }
        }
        internal static string Xml_CannotResolveExternalSubset {
              get { return SR.GetResourceString("Xml_CannotResolveExternalSubset", @"Cannot resolve external DTD subset - public ID = '{0}', system ID = '{1}'."); }
        }
        internal static string Xml_CDATAEndInText {
              get { return SR.GetResourceString("Xml_CDATAEndInText", @"']]>' is not allowed in character data."); }
        }
        internal static string Xml_DtdAfterRootElement {
              get { return SR.GetResourceString("Xml_DtdAfterRootElement", @"DTD must be defined before the document root element."); }
        }
        internal static string Xml_ReadOnlyProperty {
              get { return SR.GetResourceString("Xml_ReadOnlyProperty", @"The '{0}' property is read only and cannot be set."); }
        }
        internal static string Xml_DtdIsProhibited {
              get { return SR.GetResourceString("Xml_DtdIsProhibited", @"DTD is prohibited in this XML document."); }
        }
        internal static string Xml_DtdIsProhibitedEx {
              get { return SR.GetResourceString("Xml_DtdIsProhibitedEx", @"For security reasons DTD is prohibited in this XML document. To enable DTD processing set the DtdProcessing property on XmlReaderSettings to Parse and pass the settings into XmlReader.Create method."); }
        }
        internal static string Xml_ReadSubtreeNotOnElement {
              get { return SR.GetResourceString("Xml_ReadSubtreeNotOnElement", @"ReadSubtree() can be called only if the reader is on an element node."); }
        }
        internal static string Xml_DtdNotAllowedInFragment {
              get { return SR.GetResourceString("Xml_DtdNotAllowedInFragment", @"DTD is not allowed in XML fragments."); }
        }
        internal static string Xml_CannotStartDocumentOnFragment {
              get { return SR.GetResourceString("Xml_CannotStartDocumentOnFragment", @"WriteStartDocument cannot be called on writers created with ConformanceLevel.Fragment."); }
        }
        internal static string Xml_ErrorOpeningExternalDtd {
              get { return SR.GetResourceString("Xml_ErrorOpeningExternalDtd", @"An error has occurred while opening external DTD '{0}': {1}"); }
        }
        internal static string Xml_ErrorOpeningExternalEntity {
              get { return SR.GetResourceString("Xml_ErrorOpeningExternalEntity", @"An error has occurred while opening external entity '{0}': {1}"); }
        }
        internal static string Xml_ReadBinaryContentNotSupported {
              get { return SR.GetResourceString("Xml_ReadBinaryContentNotSupported", @"{0} method is not supported on this XmlReader. Use CanReadBinaryContent property to find out if a reader implements it."); }
        }
        internal static string Xml_ReadValueChunkNotSupported {
              get { return SR.GetResourceString("Xml_ReadValueChunkNotSupported", @"ReadValueChunk method is not supported on this XmlReader. Use CanReadValueChunk property to find out if an XmlReader implements it."); }
        }
        internal static string Xml_InvalidReadContentAs {
              get { return SR.GetResourceString("Xml_InvalidReadContentAs", @"The {0} method is not supported on node type {1}. If you want to read typed content of an element, use the ReadElementContentAs method."); }
        }
        internal static string Xml_InvalidReadElementContentAs {
              get { return SR.GetResourceString("Xml_InvalidReadElementContentAs", @"The {0} method is not supported on node type {1}."); }
        }
        internal static string Xml_MixedReadElementContentAs {
              get { return SR.GetResourceString("Xml_MixedReadElementContentAs", @"ReadElementContentAs() methods cannot be called on an element that has child elements."); }
        }
        internal static string Xml_MixingReadValueChunkWithBinary {
              get { return SR.GetResourceString("Xml_MixingReadValueChunkWithBinary", @"ReadValueChunk calls cannot be mixed with ReadContentAsBase64 or ReadContentAsBinHex."); }
        }
        internal static string Xml_MixingBinaryContentMethods {
              get { return SR.GetResourceString("Xml_MixingBinaryContentMethods", @"ReadContentAsBase64 and ReadContentAsBinHex method calls cannot be mixed with calls to ReadElementContentAsBase64 and ReadElementContentAsBinHex."); }
        }
        internal static string Xml_MixingV1StreamingWithV2Binary {
              get { return SR.GetResourceString("Xml_MixingV1StreamingWithV2Binary", @"ReadContentAsBase64 and ReadContentAsBinHex method calls cannot be mixed with calls to ReadChars, ReadBase64, and ReadBinHex."); }
        }
        internal static string Xml_InvalidReadValueChunk {
              get { return SR.GetResourceString("Xml_InvalidReadValueChunk", @"The ReadValueAsChunk method is not supported on node type {0}."); }
        }
        internal static string Xml_ReadContentAsFormatException {
              get { return SR.GetResourceString("Xml_ReadContentAsFormatException", @"Content cannot be converted to the type {0}."); }
        }
        internal static string Xml_DoubleBaseUri {
              get { return SR.GetResourceString("Xml_DoubleBaseUri", @"BaseUri must be specified either as an argument of XmlReader.Create or on the XmlParserContext. If it is specified on both, it must be the same base URI."); }
        }
        internal static string Xml_NotEnoughSpaceForSurrogatePair {
              get { return SR.GetResourceString("Xml_NotEnoughSpaceForSurrogatePair", @"The buffer is not large enough to fit a surrogate pair. Please provide a buffer of size at least 2 characters."); }
        }
        internal static string Xml_InvalidWhitespaceCharacter {
              get { return SR.GetResourceString("Xml_InvalidWhitespaceCharacter", @"The Whitespace or SignificantWhitespace node can contain only XML white space characters. '{0}' is not an XML white space character."); }
        }
        internal static string Xml_IncompatibleConformanceLevel {
              get { return SR.GetResourceString("Xml_IncompatibleConformanceLevel", @"Cannot change conformance checking to {0}. Make sure the ConformanceLevel in XmlReaderSettings is set to Auto for wrapping scenarios."); }
        }
        internal static string Xml_LimitExceeded {
              get { return SR.GetResourceString("Xml_LimitExceeded", @"The input document has exceeded a limit set by {0}."); }
        }
        internal static string Xml_ClosedOrErrorReader {
              get { return SR.GetResourceString("Xml_ClosedOrErrorReader", @"The XmlReader is closed or in error state."); }
        }
        internal static string Xml_CharEntityOverflow {
              get { return SR.GetResourceString("Xml_CharEntityOverflow", @"Invalid value of a character entity reference."); }
        }
        internal static string Xml_CannotResolveUrl {
              get { return SR.GetResourceString("Xml_CannotResolveUrl", @"Cannot resolve '{0}'."); }
        }
        internal static string Xml_MultipleDTDsProvided {
              get { return SR.GetResourceString("Xml_MultipleDTDsProvided", @"Cannot have multiple DTDs."); }
        }
        internal static string Xml_UnparsedEntityRef {
              get { return SR.GetResourceString("Xml_UnparsedEntityRef", @"Reference to unparsed entity '{0}'."); }
        }
        internal static string Xml_ExternalEntityInStandAloneDocument {
              get { return SR.GetResourceString("Xml_ExternalEntityInStandAloneDocument", @"Standalone document declaration must have a value of 'no' because an external entity '{0}' is referenced."); }
        }
        internal static string Xml_ExternalEntityInAttValue {
              get { return SR.GetResourceString("Xml_ExternalEntityInAttValue", @"External entity '{0}' reference cannot appear in the attribute value."); }
        }
        internal static string Xml_ExpectSubOrClose {
              get { return SR.GetResourceString("Xml_ExpectSubOrClose", @"Expecting an internal subset or the end of the DOCTYPE declaration."); }
        }
        internal static string Xml_InvalidConditionalSection {
              get { return SR.GetResourceString("Xml_InvalidConditionalSection", @"A conditional section is not allowed in an internal subset."); }
        }
        internal static string Xml_UnexpectedCDataEnd {
              get { return SR.GetResourceString("Xml_UnexpectedCDataEnd", @"']]>' is not expected."); }
        }
        internal static string Xml_ExpectDtdMarkup {
              get { return SR.GetResourceString("Xml_ExpectDtdMarkup", @"Expected DTD markup was not found."); }
        }
        internal static string Xml_UnclosedConditionalSection {
              get { return SR.GetResourceString("Xml_UnclosedConditionalSection", @"There is an unclosed conditional section."); }
        }
        internal static string Xml_IncompleteDtdContent {
              get { return SR.GetResourceString("Xml_IncompleteDtdContent", @"Incomplete DTD content."); }
        }
        internal static string Xml_EnumerationRequired {
              get { return SR.GetResourceString("Xml_EnumerationRequired", @"Enumeration data type required."); }
        }
        internal static string Xml_InvalidContentModel {
              get { return SR.GetResourceString("Xml_InvalidContentModel", @"Invalid content model."); }
        }
        internal static string Xml_FragmentId {
              get { return SR.GetResourceString("Xml_FragmentId", @"Fragment identifier '{0}' cannot be part of the system identifier '{1}'."); }
        }
        internal static string Xml_ExpectPcData {
              get { return SR.GetResourceString("Xml_ExpectPcData", @"Expecting 'PCDATA'."); }
        }
        internal static string Xml_ExpectNoWhitespace {
              get { return SR.GetResourceString("Xml_ExpectNoWhitespace", @"White space not allowed before '?', '*', or '+'."); }
        }
        internal static string Xml_InvalidAttributeType {
              get { return SR.GetResourceString("Xml_InvalidAttributeType", @"'{0}' is an invalid attribute type."); }
        }
        internal static string Xml_ExpectOp {
              get { return SR.GetResourceString("Xml_ExpectOp", @"Expecting '?', '*', or '+'."); }
        }
        internal static string Xml_ExpectAttType {
              get { return SR.GetResourceString("Xml_ExpectAttType", @"Expecting an attribute type."); }
        }
        internal static string Xml_ExpectExternalOrPublicId {
              get { return SR.GetResourceString("Xml_ExpectExternalOrPublicId", @"Expecting a system identifier or a public identifier."); }
        }
        internal static string Xml_ExpectExternalIdOrEntityValue {
              get { return SR.GetResourceString("Xml_ExpectExternalIdOrEntityValue", @"Expecting an external identifier or an entity value."); }
        }
        internal static string Xml_ExpectIgnoreOrInclude {
              get { return SR.GetResourceString("Xml_ExpectIgnoreOrInclude", @"Conditional sections must specify the keyword 'IGNORE' or 'INCLUDE'."); }
        }
        internal static string Xml_ColonInLocalName {
              get { return SR.GetResourceString("Xml_ColonInLocalName", @"'{0}' is an unqualified name and cannot contain the character ':'."); }
        }
        internal static string Xml_InvalidParEntityRef {
              get { return SR.GetResourceString("Xml_InvalidParEntityRef", @"A parameter entity reference is not allowed in internal markup."); }
        }
        internal static string Xml_WriterAsyncNotSetException {
              get { return SR.GetResourceString("Xml_WriterAsyncNotSetException", @"Set XmlWriterSettings.Async to true if you want to use Async Methods."); }
        }
        internal static string Xml_PrefixForEmptyNs {
              get { return SR.GetResourceString("Xml_PrefixForEmptyNs", @"Cannot use a prefix with an empty namespace."); }
        }
        internal static string Xml_InvalidCommentChars {
              get { return SR.GetResourceString("Xml_InvalidCommentChars", @"An XML comment cannot contain '--', and '-' cannot be the last character."); }
        }
        internal static string Xml_UndefNamespace {
              get { return SR.GetResourceString("Xml_UndefNamespace", @"The '{0}' namespace is not defined."); }
        }
        internal static string Xml_EmptyName {
              get { return SR.GetResourceString("Xml_EmptyName", @"The empty string '' is not a valid name."); }
        }
        internal static string Xml_EmptyLocalName {
              get { return SR.GetResourceString("Xml_EmptyLocalName", @"The empty string '' is not a valid local name."); }
        }
        internal static string Xml_InvalidNameCharsDetail {
              get { return SR.GetResourceString("Xml_InvalidNameCharsDetail", @"Invalid name character in '{0}'. The '{1}' character, hexadecimal value 0x{2}, cannot be included in a name."); }
        }
        internal static string Xml_NoStartTag {
              get { return SR.GetResourceString("Xml_NoStartTag", @"There was no XML start tag open."); }
        }
        internal static string Xml_ClosedOrError {
              get { return SR.GetResourceString("Xml_ClosedOrError", @"The Writer is closed or in error state."); }
        }
        internal static string Xml_WrongToken {
              get { return SR.GetResourceString("Xml_WrongToken", @"Token {0} in state {1} would result in an invalid XML document."); }
        }
        internal static string Xml_XmlPrefix {
              get { return SR.GetResourceString("Xml_XmlPrefix", @"Prefix 'xml' is reserved for use by XML and can be mapped only to namespace name 'http://www.w3.org/XML/1998/namespace'."); }
        }
        internal static string Xml_XmlnsPrefix {
              get { return SR.GetResourceString("Xml_XmlnsPrefix", @"Prefix 'xmlns' is reserved for use by XML."); }
        }
        internal static string Xml_NamespaceDeclXmlXmlns {
              get { return SR.GetResourceString("Xml_NamespaceDeclXmlXmlns", @"Prefix '{0}' cannot be mapped to namespace name reserved for 'xml' or 'xmlns'."); }
        }
        internal static string Xml_NonWhitespace {
              get { return SR.GetResourceString("Xml_NonWhitespace", @"Only white space characters should be used."); }
        }
        internal static string Xml_DupXmlDecl {
              get { return SR.GetResourceString("Xml_DupXmlDecl", @"Cannot write XML declaration. WriteStartDocument method has already written it."); }
        }
        internal static string Xml_CannotWriteXmlDecl {
              get { return SR.GetResourceString("Xml_CannotWriteXmlDecl", @"Cannot write XML declaration. XML declaration can be only at the beginning of the document."); }
        }
        internal static string Xml_NoRoot {
              get { return SR.GetResourceString("Xml_NoRoot", @"Document does not have a root element."); }
        }
        internal static string Xml_InvalidPosition {
              get { return SR.GetResourceString("Xml_InvalidPosition", @"The current position on the Reader is neither an element nor an attribute."); }
        }
        internal static string Xml_IncompleteEntity {
              get { return SR.GetResourceString("Xml_IncompleteEntity", @"Incomplete entity contents."); }
        }
        internal static string Xml_InvalidSurrogateHighChar {
              get { return SR.GetResourceString("Xml_InvalidSurrogateHighChar", @"Invalid high surrogate character (0x{0}). A high surrogate character must have a value from range (0xD800 - 0xDBFF)."); }
        }
        internal static string Xml_InvalidSurrogateMissingLowChar {
              get { return SR.GetResourceString("Xml_InvalidSurrogateMissingLowChar", @"The surrogate pair is invalid. Missing a low surrogate character."); }
        }
        internal static string Xml_InvalidSurrogatePairWithArgs {
              get { return SR.GetResourceString("Xml_InvalidSurrogatePairWithArgs", @"The surrogate pair (0x{0}, 0x{1}) is invalid. A high surrogate character (0xD800 - 0xDBFF) must always be paired with a low surrogate character (0xDC00 - 0xDFFF)."); }
        }
        internal static string Xml_RedefinePrefix {
              get { return SR.GetResourceString("Xml_RedefinePrefix", @"The prefix '{0}' cannot be redefined from '{1}' to '{2}' within the same start element tag."); }
        }
        internal static string Xml_DtdAlreadyWritten {
              get { return SR.GetResourceString("Xml_DtdAlreadyWritten", @"The DTD has already been written out."); }
        }
        internal static string Xml_InvalidCharsInIndent {
              get { return SR.GetResourceString("Xml_InvalidCharsInIndent", @"XmlWriterSettings.{0} can contain only valid XML text content characters when XmlWriterSettings.CheckCharacters is true. {1}"); }
        }
        internal static string Xml_IndentCharsNotWhitespace {
              get { return SR.GetResourceString("Xml_IndentCharsNotWhitespace", @"XmlWriterSettings.{0} can contain only valid XML white space characters when XmlWriterSettings.CheckCharacters and XmlWriterSettings.NewLineOnAttributes are true."); }
        }
        internal static string Xml_ConformanceLevelFragment {
              get { return SR.GetResourceString("Xml_ConformanceLevelFragment", @"Make sure that the ConformanceLevel setting is set to ConformanceLevel.Fragment or ConformanceLevel.Auto if you want to write an XML fragment."); }
        }
        internal static string Xml_SurrogatePairSplit {
              get { return SR.GetResourceString("Xml_SurrogatePairSplit", @"The second character surrogate pair is not in the input buffer to be written."); }
        }
        internal static string XmlConvert_BadFormat {
              get { return SR.GetResourceString("XmlConvert_BadFormat", @"The string '{0}' is not a valid {1} value."); }
        }
        internal static string XmlConvert_Overflow {
              get { return SR.GetResourceString("XmlConvert_Overflow", @"Value '{0}' was either too large or too small for {1}."); }
        }
        internal static string XmlConvert_TypeListBadMapping2 {
              get { return SR.GetResourceString("XmlConvert_TypeListBadMapping2", @"Xml type 'List of {0}' does not support a conversion from Clr type '{1}' to Clr type '{2}'."); }
        }
        internal static string XmlConvert_TypeNoPrefix {
              get { return SR.GetResourceString("XmlConvert_TypeNoPrefix", @"The QName '{0}' cannot be represented as a String.  A prefix for namespace '{1}' cannot be found."); }
        }
        internal static string XmlConvert_TypeNoNamespace {
              get { return SR.GetResourceString("XmlConvert_TypeNoNamespace", @"The String '{0}' cannot be represented as an XmlQualifiedName.  A namespace for prefix '{1}' cannot be found."); }
        }
        internal static string XmlConvert_NotOneCharString {
              get { return SR.GetResourceString("XmlConvert_NotOneCharString", @"String must be exactly one character long."); }
        }
        internal static string XmlConvert_BadUri {
              get { return SR.GetResourceString("XmlConvert_BadUri", @"The string was not recognized as a valid Uri."); }
        }
        internal static string Sch_InvalidDateTimeOption {
              get { return SR.GetResourceString("Sch_InvalidDateTimeOption", @"The '{0}' value for the 'dateTimeOption' parameter is not an allowed value for the 'XmlDateTimeSerializationMode' enumeration."); }
        }
        internal static string Argument_InvalidCodePageConversionIndex {
              get { return SR.GetResourceString("Argument_InvalidCodePageConversionIndex", @"Unable to translate Unicode character \\u{0:X4} at index {1} to specified code page."); }
        }
        internal static string ArgumentOutOfRange_Range {
              get { return SR.GetResourceString("ArgumentOutOfRange_Range", @"Valid values are between {0} and {1}, inclusive."); }
        }
        internal static string Sch_ParEntityRefNesting {
              get { return SR.GetResourceString("Sch_ParEntityRefNesting", @"The parameter entity replacement text must nest properly within markup declarations."); }
        }
        internal static string Xml_SystemPathResolverCannotOpenUri {
              get { return SR.GetResourceString("Xml_SystemPathResolverCannotOpenUri", @"Cannot open '{0}'. The Uri parameter must be a file system relative or absolute path."); }
        }
        internal static string Enc_InvalidByteInEncoding {
              get { return SR.GetResourceString("Enc_InvalidByteInEncoding", @"Invalid byte was found at index {0}."); }
        }
        internal static string Xml_UnsupportedClass {
              get { return SR.GetResourceString("Xml_UnsupportedClass", @"Object type is not supported."); }
        }
        internal static string ArgumentNull_Array {
              get { return SR.GetResourceString("ArgumentNull_Array", @"Array cannot be null."); }
        }
        internal static string Argument_ConversionOverflow {
              get { return SR.GetResourceString("Argument_ConversionOverflow", @"Conversion buffer overflow."); }
        }
        internal static string ArgumentOutOfRange_Index {
              get { return SR.GetResourceString("ArgumentOutOfRange_Index", @"Index was out of range. Must be non-negative and less than the size of the collection."); }
        }
        internal static string ArgumentOutOfRange_NeedNonNegNum {
              get { return SR.GetResourceString("ArgumentOutOfRange_NeedNonNegNum", @"Non-negative number required."); }
        }
        internal static string ArgumentOutOfRange_IndexCount {
              get { return SR.GetResourceString("ArgumentOutOfRange_IndexCount", @"Index and count must refer to a location within the string."); }
        }
        internal static string Argument_EncodingConversionOverflowBytes {
              get { return SR.GetResourceString("Argument_EncodingConversionOverflowBytes", @"The output byte buffer is too small to contain the encoded data, encoding '{0}' fallback '{1}'."); }
        }
        internal static string ArgumentOutOfRange_IndexCountBuffer {
              get { return SR.GetResourceString("ArgumentOutOfRange_IndexCountBuffer", @"Index and count must refer to a location within the buffer."); }
        }
        internal static string Argument_InvalidCharSequenceNoIndex {
              get { return SR.GetResourceString("Argument_InvalidCharSequenceNoIndex", @"String contains invalid Unicode code points."); }
        }

#endif
    }
}
