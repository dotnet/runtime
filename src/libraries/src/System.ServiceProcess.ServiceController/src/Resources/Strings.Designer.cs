//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Resources {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.ServiceProcess.ServiceController.Resources.Strings", typeof(Strings).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arguments within the &apos;args&apos; array passed to Start cannot be null..
        /// </summary>
        internal static string ArgsCantBeNull {
            get {
                return ResourceManager.GetString("ArgsCantBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MachineName value {0} is invalid..
        /// </summary>
        internal static string BadMachineName {
            get {
                return ResourceManager.GetString("BadMachineName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot start service {0} on computer &apos;{1}&apos;..
        /// </summary>
        internal static string CannotStart {
            get {
                return ResourceManager.GetString("CannotStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display name cannot be null or empty.
        /// </summary>
        internal static string DisplayName {
            get {
                return ResourceManager.GetString("DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
        /// </summary>
        internal static string InvalidEnumArgument {
            get {
                return ResourceManager.GetString("InvalidEnumArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value {1} for parameter {0}..
        /// </summary>
        internal static string InvalidParameter {
            get {
                return ResourceManager.GetString("InvalidParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display name could not be retrieved for service {0} on computer &apos;{1}&apos;..
        /// </summary>
        internal static string NoDisplayName {
            get {
                return ResourceManager.GetString("NoDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MachineName was not set..
        /// </summary>
        internal static string NoMachineName {
            get {
                return ResourceManager.GetString("NoMachineName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service {0} was not found on computer &apos;{1}&apos;..
        /// </summary>
        internal static string NoService {
            get {
                return ResourceManager.GetString("NoService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot open Service Control Manager on computer &apos;{0}&apos;. This operation might require other privileges..
        /// </summary>
        internal static string OpenSC {
            get {
                return ResourceManager.GetString("OpenSC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot open {0} service on computer &apos;{1}&apos;..
        /// </summary>
        internal static string OpenService {
            get {
                return ResourceManager.GetString("OpenService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot pause {0} service on computer &apos;{1}&apos;..
        /// </summary>
        internal static string PauseService {
            get {
                return ResourceManager.GetString("PauseService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resume {0} service on computer &apos;{1}&apos;..
        /// </summary>
        internal static string ResumeService {
            get {
                return ResourceManager.GetString("ResumeService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service name {0} contains invalid characters, is empty, or is too long (max length = {1})..
        /// </summary>
        internal static string ServiceName {
            get {
                return ResourceManager.GetString("ServiceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot stop {0} service on computer &apos;{1}&apos;..
        /// </summary>
        internal static string StopService {
            get {
                return ResourceManager.GetString("StopService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Time out has expired and the operation has not been completed..
        /// </summary>
        internal static string Timeout {
            get {
                return ResourceManager.GetString("Timeout", resourceCulture);
            }
        }
    }
}
