<?xml version="1.0" encoding="utf-8"?>
<Project InitialTargets="AddSkipGetTargetFrameworkToProjectReferences">
  <PropertyGroup>
    <ErrorIfBuildToolsRestoredFromIndividualProject Condition="!Exists('$(ToolsDir)')">true</ErrorIfBuildToolsRestoredFromIndividualProject>
  </PropertyGroup>

  <Import Project="..\Directory.Build.targets" />
  
  <Target Name="_CheckForInvalidConfigurationAndPlatform" />
  <Target Name="_CheckForUnsupportedTargetFramework" />
  <Target Name="RunResolvePackageDependencies" />
  <Target Name="AddSkipGetTargetFrameworkToProjectReferences" Condition="'@(ProjectReference)' != ''">
    <ItemGroup>
      <ProjectReference>
        <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <!--
  Hack workaround for not restoring each project. Instead, we turn off all the targets
  that require a `project.assets.json`, since ours will be empty anyway.
  -->
  <Target Name="_ClearResolvePackageAssets"
          BeforeTargets="AssignProjectConfiguration">

    <PropertyGroup>
      <ResolvePackageDependenciesForBuildDependsOn></ResolvePackageDependenciesForBuildDependsOn>
    </PropertyGroup>

  </Target>

  <!-- Returns the assembly version of the project for consumption
       by the NuGet package generation -->
  <Target Name="GetAssemblyVersion"
          Returns="$(AssemblyVersion)"/>

  <!-- Returns the generated documentation file for consumption
       by the NuGet package generation -->
  <Target Name="GetDocumentationFile"
          Returns="$(DocumentationFile)"/>

  <Target Name="DumpTargets" BeforeTargets="ResolveProjectReferences">
    <Message Text="DumpTargets> $(OutputPath), C=[$(Configuration)], CG=[$(ConfigurationGroup)], OG=[$(OSGroup)], TG=[$(TargetGroup)]" Importance="Low" />
  </Target>

</Project> 
