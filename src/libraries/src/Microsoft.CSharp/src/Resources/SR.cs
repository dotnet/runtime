// Do not edit this file manually it is auto-generated during the build based on the .resx file for this project.
namespace System
{
    internal static partial class SR
    {
#pragma warning disable 0414
        private const string s_resourcesName = "Microsoft.CSharp.resources"; // assembly Name + .resources
#pragma warning restore 0414

#if !DEBUGRESOURCES
        internal static string InternalCompilerError {
              get { return SR.GetResourceString("InternalCompilerError", null); }
        }
        internal static string BindRequireArguments {
              get { return SR.GetResourceString("BindRequireArguments", null); }
        }
        internal static string BindCallFailedOverloadResolution {
              get { return SR.GetResourceString("BindCallFailedOverloadResolution", null); }
        }
        internal static string BindBinaryOperatorRequireTwoArguments {
              get { return SR.GetResourceString("BindBinaryOperatorRequireTwoArguments", null); }
        }
        internal static string BindUnaryOperatorRequireOneArgument {
              get { return SR.GetResourceString("BindUnaryOperatorRequireOneArgument", null); }
        }
        internal static string BindPropertyFailedMethodGroup {
              get { return SR.GetResourceString("BindPropertyFailedMethodGroup", null); }
        }
        internal static string BindPropertyFailedEvent {
              get { return SR.GetResourceString("BindPropertyFailedEvent", null); }
        }
        internal static string BindInvokeFailedNonDelegate {
              get { return SR.GetResourceString("BindInvokeFailedNonDelegate", null); }
        }
        internal static string BindImplicitConversionRequireOneArgument {
              get { return SR.GetResourceString("BindImplicitConversionRequireOneArgument", null); }
        }
        internal static string BindExplicitConversionRequireOneArgument {
              get { return SR.GetResourceString("BindExplicitConversionRequireOneArgument", null); }
        }
        internal static string BindBinaryAssignmentRequireTwoArguments {
              get { return SR.GetResourceString("BindBinaryAssignmentRequireTwoArguments", null); }
        }
        internal static string BindBinaryAssignmentFailedNullReference {
              get { return SR.GetResourceString("BindBinaryAssignmentFailedNullReference", null); }
        }
        internal static string NullReferenceOnMemberException {
              get { return SR.GetResourceString("NullReferenceOnMemberException", null); }
        }
        internal static string BindCallToConditionalMethod {
              get { return SR.GetResourceString("BindCallToConditionalMethod", null); }
        }
        internal static string BindToVoidMethodButExpectResult {
              get { return SR.GetResourceString("BindToVoidMethodButExpectResult", null); }
        }
        internal static string BadBinaryOps {
              get { return SR.GetResourceString("BadBinaryOps", null); }
        }
        internal static string IntDivByZero {
              get { return SR.GetResourceString("IntDivByZero", null); }
        }
        internal static string BadIndexLHS {
              get { return SR.GetResourceString("BadIndexLHS", null); }
        }
        internal static string BadIndexCount {
              get { return SR.GetResourceString("BadIndexCount", null); }
        }
        internal static string BadUnaryOp {
              get { return SR.GetResourceString("BadUnaryOp", null); }
        }
        internal static string NoImplicitConv {
              get { return SR.GetResourceString("NoImplicitConv", null); }
        }
        internal static string NoExplicitConv {
              get { return SR.GetResourceString("NoExplicitConv", null); }
        }
        internal static string ConstOutOfRange {
              get { return SR.GetResourceString("ConstOutOfRange", null); }
        }
        internal static string AmbigBinaryOps {
              get { return SR.GetResourceString("AmbigBinaryOps", null); }
        }
        internal static string AmbigUnaryOp {
              get { return SR.GetResourceString("AmbigUnaryOp", null); }
        }
        internal static string ValueCantBeNull {
              get { return SR.GetResourceString("ValueCantBeNull", null); }
        }
        internal static string WrongNestedThis {
              get { return SR.GetResourceString("WrongNestedThis", null); }
        }
        internal static string NoSuchMember {
              get { return SR.GetResourceString("NoSuchMember", null); }
        }
        internal static string ObjectRequired {
              get { return SR.GetResourceString("ObjectRequired", null); }
        }
        internal static string AmbigCall {
              get { return SR.GetResourceString("AmbigCall", null); }
        }
        internal static string BadAccess {
              get { return SR.GetResourceString("BadAccess", null); }
        }
        internal static string MethDelegateMismatch {
              get { return SR.GetResourceString("MethDelegateMismatch", null); }
        }
        internal static string AssgLvalueExpected {
              get { return SR.GetResourceString("AssgLvalueExpected", null); }
        }
        internal static string NoConstructors {
              get { return SR.GetResourceString("NoConstructors", null); }
        }
        internal static string BadDelegateConstructor {
              get { return SR.GetResourceString("BadDelegateConstructor", null); }
        }
        internal static string PropertyLacksGet {
              get { return SR.GetResourceString("PropertyLacksGet", null); }
        }
        internal static string ObjectProhibited {
              get { return SR.GetResourceString("ObjectProhibited", null); }
        }
        internal static string AssgReadonly {
              get { return SR.GetResourceString("AssgReadonly", null); }
        }
        internal static string RefReadonly {
              get { return SR.GetResourceString("RefReadonly", null); }
        }
        internal static string AssgReadonlyStatic {
              get { return SR.GetResourceString("AssgReadonlyStatic", null); }
        }
        internal static string RefReadonlyStatic {
              get { return SR.GetResourceString("RefReadonlyStatic", null); }
        }
        internal static string AssgReadonlyProp {
              get { return SR.GetResourceString("AssgReadonlyProp", null); }
        }
        internal static string AbstractBaseCall {
              get { return SR.GetResourceString("AbstractBaseCall", null); }
        }
        internal static string RefProperty {
              get { return SR.GetResourceString("RefProperty", null); }
        }
        internal static string ManagedAddr {
              get { return SR.GetResourceString("ManagedAddr", null); }
        }
        internal static string FixedNotNeeded {
              get { return SR.GetResourceString("FixedNotNeeded", null); }
        }
        internal static string UnsafeNeeded {
              get { return SR.GetResourceString("UnsafeNeeded", null); }
        }
        internal static string BadBoolOp {
              get { return SR.GetResourceString("BadBoolOp", null); }
        }
        internal static string MustHaveOpTF {
              get { return SR.GetResourceString("MustHaveOpTF", null); }
        }
        internal static string CheckedOverflow {
              get { return SR.GetResourceString("CheckedOverflow", null); }
        }
        internal static string ConstOutOfRangeChecked {
              get { return SR.GetResourceString("ConstOutOfRangeChecked", null); }
        }
        internal static string AmbigMember {
              get { return SR.GetResourceString("AmbigMember", null); }
        }
        internal static string SizeofUnsafe {
              get { return SR.GetResourceString("SizeofUnsafe", null); }
        }
        internal static string FieldInitRefNonstatic {
              get { return SR.GetResourceString("FieldInitRefNonstatic", null); }
        }
        internal static string CallingFinalizeDepracated {
              get { return SR.GetResourceString("CallingFinalizeDepracated", null); }
        }
        internal static string CallingBaseFinalizeDeprecated {
              get { return SR.GetResourceString("CallingBaseFinalizeDeprecated", null); }
        }
        internal static string BadCastInFixed {
              get { return SR.GetResourceString("BadCastInFixed", null); }
        }
        internal static string NoImplicitConvCast {
              get { return SR.GetResourceString("NoImplicitConvCast", null); }
        }
        internal static string InaccessibleGetter {
              get { return SR.GetResourceString("InaccessibleGetter", null); }
        }
        internal static string InaccessibleSetter {
              get { return SR.GetResourceString("InaccessibleSetter", null); }
        }
        internal static string BadArity {
              get { return SR.GetResourceString("BadArity", null); }
        }
        internal static string BadTypeArgument {
              get { return SR.GetResourceString("BadTypeArgument", null); }
        }
        internal static string TypeArgsNotAllowed {
              get { return SR.GetResourceString("TypeArgsNotAllowed", null); }
        }
        internal static string HasNoTypeVars {
              get { return SR.GetResourceString("HasNoTypeVars", null); }
        }
        internal static string NewConstraintNotSatisfied {
              get { return SR.GetResourceString("NewConstraintNotSatisfied", null); }
        }
        internal static string GenericConstraintNotSatisfiedRefType {
              get { return SR.GetResourceString("GenericConstraintNotSatisfiedRefType", null); }
        }
        internal static string GenericConstraintNotSatisfiedNullableEnum {
              get { return SR.GetResourceString("GenericConstraintNotSatisfiedNullableEnum", null); }
        }
        internal static string GenericConstraintNotSatisfiedNullableInterface {
              get { return SR.GetResourceString("GenericConstraintNotSatisfiedNullableInterface", null); }
        }
        internal static string GenericConstraintNotSatisfiedTyVar {
              get { return SR.GetResourceString("GenericConstraintNotSatisfiedTyVar", null); }
        }
        internal static string GenericConstraintNotSatisfiedValType {
              get { return SR.GetResourceString("GenericConstraintNotSatisfiedValType", null); }
        }
        internal static string TypeVarCantBeNull {
              get { return SR.GetResourceString("TypeVarCantBeNull", null); }
        }
        internal static string BadRetType {
              get { return SR.GetResourceString("BadRetType", null); }
        }
        internal static string CantInferMethTypeArgs {
              get { return SR.GetResourceString("CantInferMethTypeArgs", null); }
        }
        internal static string MethGrpToNonDel {
              get { return SR.GetResourceString("MethGrpToNonDel", null); }
        }
        internal static string RefConstraintNotSatisfied {
              get { return SR.GetResourceString("RefConstraintNotSatisfied", null); }
        }
        internal static string ValConstraintNotSatisfied {
              get { return SR.GetResourceString("ValConstraintNotSatisfied", null); }
        }
        internal static string CircularConstraint {
              get { return SR.GetResourceString("CircularConstraint", null); }
        }
        internal static string BaseConstraintConflict {
              get { return SR.GetResourceString("BaseConstraintConflict", null); }
        }
        internal static string ConWithValCon {
              get { return SR.GetResourceString("ConWithValCon", null); }
        }
        internal static string AmbigUDConv {
              get { return SR.GetResourceString("AmbigUDConv", null); }
        }
        internal static string PredefinedTypeNotFound {
              get { return SR.GetResourceString("PredefinedTypeNotFound", null); }
        }
        internal static string PredefinedTypeBadType {
              get { return SR.GetResourceString("PredefinedTypeBadType", null); }
        }
        internal static string BindToBogus {
              get { return SR.GetResourceString("BindToBogus", null); }
        }
        internal static string CantCallSpecialMethod {
              get { return SR.GetResourceString("CantCallSpecialMethod", null); }
        }
        internal static string BogusType {
              get { return SR.GetResourceString("BogusType", null); }
        }
        internal static string MissingPredefinedMember {
              get { return SR.GetResourceString("MissingPredefinedMember", null); }
        }
        internal static string LiteralDoubleCast {
              get { return SR.GetResourceString("LiteralDoubleCast", null); }
        }
        internal static string UnifyingInterfaceInstantiations {
              get { return SR.GetResourceString("UnifyingInterfaceInstantiations", null); }
        }
        internal static string ConvertToStaticClass {
              get { return SR.GetResourceString("ConvertToStaticClass", null); }
        }
        internal static string GenericArgIsStaticClass {
              get { return SR.GetResourceString("GenericArgIsStaticClass", null); }
        }
        internal static string PartialMethodToDelegate {
              get { return SR.GetResourceString("PartialMethodToDelegate", null); }
        }
        internal static string IncrementLvalueExpected {
              get { return SR.GetResourceString("IncrementLvalueExpected", null); }
        }
        internal static string NoSuchMemberOrExtension {
              get { return SR.GetResourceString("NoSuchMemberOrExtension", null); }
        }
        internal static string ValueTypeExtDelegate {
              get { return SR.GetResourceString("ValueTypeExtDelegate", null); }
        }
        internal static string BadArgCount {
              get { return SR.GetResourceString("BadArgCount", null); }
        }
        internal static string BadArgTypes {
              get { return SR.GetResourceString("BadArgTypes", null); }
        }
        internal static string BadArgType {
              get { return SR.GetResourceString("BadArgType", null); }
        }
        internal static string RefLvalueExpected {
              get { return SR.GetResourceString("RefLvalueExpected", null); }
        }
        internal static string BadProtectedAccess {
              get { return SR.GetResourceString("BadProtectedAccess", null); }
        }
        internal static string BindToBogusProp2 {
              get { return SR.GetResourceString("BindToBogusProp2", null); }
        }
        internal static string BindToBogusProp1 {
              get { return SR.GetResourceString("BindToBogusProp1", null); }
        }
        internal static string BadDelArgCount {
              get { return SR.GetResourceString("BadDelArgCount", null); }
        }
        internal static string BadDelArgTypes {
              get { return SR.GetResourceString("BadDelArgTypes", null); }
        }
        internal static string AssgReadonlyLocal {
              get { return SR.GetResourceString("AssgReadonlyLocal", null); }
        }
        internal static string RefReadonlyLocal {
              get { return SR.GetResourceString("RefReadonlyLocal", null); }
        }
        internal static string ReturnNotLValue {
              get { return SR.GetResourceString("ReturnNotLValue", null); }
        }
        internal static string BadArgExtraRef {
              get { return SR.GetResourceString("BadArgExtraRef", null); }
        }
        internal static string BadArgRef {
              get { return SR.GetResourceString("BadArgRef", null); }
        }
        internal static string AssgReadonly2 {
              get { return SR.GetResourceString("AssgReadonly2", null); }
        }
        internal static string RefReadonly2 {
              get { return SR.GetResourceString("RefReadonly2", null); }
        }
        internal static string AssgReadonlyStatic2 {
              get { return SR.GetResourceString("AssgReadonlyStatic2", null); }
        }
        internal static string RefReadonlyStatic2 {
              get { return SR.GetResourceString("RefReadonlyStatic2", null); }
        }
        internal static string AssgReadonlyLocalCause {
              get { return SR.GetResourceString("AssgReadonlyLocalCause", null); }
        }
        internal static string RefReadonlyLocalCause {
              get { return SR.GetResourceString("RefReadonlyLocalCause", null); }
        }
        internal static string ThisStructNotInAnonMeth {
              get { return SR.GetResourceString("ThisStructNotInAnonMeth", null); }
        }
        internal static string DelegateOnNullable {
              get { return SR.GetResourceString("DelegateOnNullable", null); }
        }
        internal static string BadCtorArgCount {
              get { return SR.GetResourceString("BadCtorArgCount", null); }
        }
        internal static string BadExtensionArgTypes {
              get { return SR.GetResourceString("BadExtensionArgTypes", null); }
        }
        internal static string BadInstanceArgType {
              get { return SR.GetResourceString("BadInstanceArgType", null); }
        }
        internal static string BadArgTypesForCollectionAdd {
              get { return SR.GetResourceString("BadArgTypesForCollectionAdd", null); }
        }
        internal static string InitializerAddHasParamModifiers {
              get { return SR.GetResourceString("InitializerAddHasParamModifiers", null); }
        }
        internal static string NonInvocableMemberCalled {
              get { return SR.GetResourceString("NonInvocableMemberCalled", null); }
        }
        internal static string NamedArgumentSpecificationBeforeFixedArgument {
              get { return SR.GetResourceString("NamedArgumentSpecificationBeforeFixedArgument", null); }
        }
        internal static string BadNamedArgument {
              get { return SR.GetResourceString("BadNamedArgument", null); }
        }
        internal static string BadNamedArgumentForDelegateInvoke {
              get { return SR.GetResourceString("BadNamedArgumentForDelegateInvoke", null); }
        }
        internal static string DuplicateNamedArgument {
              get { return SR.GetResourceString("DuplicateNamedArgument", null); }
        }
        internal static string NamedArgumentUsedInPositional {
              get { return SR.GetResourceString("NamedArgumentUsedInPositional", null); }
        }
#else
        internal static string InternalCompilerError {
              get { return SR.GetResourceString("InternalCompilerError", @"An unexpected exception occurred while binding a dynamic operation"); }
        }
        internal static string BindRequireArguments {
              get { return SR.GetResourceString("BindRequireArguments", @"Cannot bind call with no calling object"); }
        }
        internal static string BindCallFailedOverloadResolution {
              get { return SR.GetResourceString("BindCallFailedOverloadResolution", @"Overload resolution failed"); }
        }
        internal static string BindBinaryOperatorRequireTwoArguments {
              get { return SR.GetResourceString("BindBinaryOperatorRequireTwoArguments", @"Binary operators must be invoked with two arguments"); }
        }
        internal static string BindUnaryOperatorRequireOneArgument {
              get { return SR.GetResourceString("BindUnaryOperatorRequireOneArgument", @"Unary operators must be invoked with one argument"); }
        }
        internal static string BindPropertyFailedMethodGroup {
              get { return SR.GetResourceString("BindPropertyFailedMethodGroup", @"The name '{0}' is bound to a method and cannot be used like a property"); }
        }
        internal static string BindPropertyFailedEvent {
              get { return SR.GetResourceString("BindPropertyFailedEvent", @"The event '{0}' can only appear on the left hand side of +"); }
        }
        internal static string BindInvokeFailedNonDelegate {
              get { return SR.GetResourceString("BindInvokeFailedNonDelegate", @"Cannot invoke a non-delegate type"); }
        }
        internal static string BindImplicitConversionRequireOneArgument {
              get { return SR.GetResourceString("BindImplicitConversionRequireOneArgument", @"Implicit conversion takes exactly one argument"); }
        }
        internal static string BindExplicitConversionRequireOneArgument {
              get { return SR.GetResourceString("BindExplicitConversionRequireOneArgument", @"Explicit conversion takes exactly one argument"); }
        }
        internal static string BindBinaryAssignmentRequireTwoArguments {
              get { return SR.GetResourceString("BindBinaryAssignmentRequireTwoArguments", @"Binary operators cannot be invoked with one argument"); }
        }
        internal static string BindBinaryAssignmentFailedNullReference {
              get { return SR.GetResourceString("BindBinaryAssignmentFailedNullReference", @"Cannot perform member assignment on a null reference"); }
        }
        internal static string NullReferenceOnMemberException {
              get { return SR.GetResourceString("NullReferenceOnMemberException", @"Cannot perform runtime binding on a null reference"); }
        }
        internal static string BindCallToConditionalMethod {
              get { return SR.GetResourceString("BindCallToConditionalMethod", @"Cannot dynamically invoke method '{0}' because it has a Conditional attribute"); }
        }
        internal static string BindToVoidMethodButExpectResult {
              get { return SR.GetResourceString("BindToVoidMethodButExpectResult", @"Cannot implicitly convert type 'void' to 'object'"); }
        }
        internal static string BadBinaryOps {
              get { return SR.GetResourceString("BadBinaryOps", @"Operator '{0}' cannot be applied to operands of type '{1}' and '{2}'"); }
        }
        internal static string IntDivByZero {
              get { return SR.GetResourceString("IntDivByZero", @"Division by constant zero"); }
        }
        internal static string BadIndexLHS {
              get { return SR.GetResourceString("BadIndexLHS", @"Cannot apply indexing with [] to an expression of type '{0}'"); }
        }
        internal static string BadIndexCount {
              get { return SR.GetResourceString("BadIndexCount", @"Wrong number of indices inside []; expected '{0}'"); }
        }
        internal static string BadUnaryOp {
              get { return SR.GetResourceString("BadUnaryOp", @"Operator '{0}' cannot be applied to operand of type '{1}'"); }
        }
        internal static string NoImplicitConv {
              get { return SR.GetResourceString("NoImplicitConv", @"Cannot implicitly convert type '{0}' to '{1}'"); }
        }
        internal static string NoExplicitConv {
              get { return SR.GetResourceString("NoExplicitConv", @"Cannot convert type '{0}' to '{1}'"); }
        }
        internal static string ConstOutOfRange {
              get { return SR.GetResourceString("ConstOutOfRange", @"Constant value '{0}' cannot be converted to a '{1}'"); }
        }
        internal static string AmbigBinaryOps {
              get { return SR.GetResourceString("AmbigBinaryOps", @"Operator '{0}' is ambiguous on operands of type '{1}' and '{2}'"); }
        }
        internal static string AmbigUnaryOp {
              get { return SR.GetResourceString("AmbigUnaryOp", @"Operator '{0}' is ambiguous on an operand of type '{1}'"); }
        }
        internal static string ValueCantBeNull {
              get { return SR.GetResourceString("ValueCantBeNull", @"Cannot convert null to '{0}' because it is a non-nullable value type"); }
        }
        internal static string WrongNestedThis {
              get { return SR.GetResourceString("WrongNestedThis", @"Cannot access a non-static member of outer type '{0}' via nested type '{1}'"); }
        }
        internal static string NoSuchMember {
              get { return SR.GetResourceString("NoSuchMember", @"'{0}' does not contain a definition for '{1}'"); }
        }
        internal static string ObjectRequired {
              get { return SR.GetResourceString("ObjectRequired", @"An object reference is required for the non-static field, method, or property '{0}'"); }
        }
        internal static string AmbigCall {
              get { return SR.GetResourceString("AmbigCall", @"The call is ambiguous between the following methods or properties: '{0}' and '{1}'"); }
        }
        internal static string BadAccess {
              get { return SR.GetResourceString("BadAccess", @"'{0}' is inaccessible due to its protection level"); }
        }
        internal static string MethDelegateMismatch {
              get { return SR.GetResourceString("MethDelegateMismatch", @"No overload for '{0}' matches delegate '{1}'"); }
        }
        internal static string AssgLvalueExpected {
              get { return SR.GetResourceString("AssgLvalueExpected", @"The left-hand side of an assignment must be a variable, property or indexer"); }
        }
        internal static string NoConstructors {
              get { return SR.GetResourceString("NoConstructors", @"The type '{0}' has no constructors defined"); }
        }
        internal static string BadDelegateConstructor {
              get { return SR.GetResourceString("BadDelegateConstructor", @"The delegate '{0}' does not have a valid constructor"); }
        }
        internal static string PropertyLacksGet {
              get { return SR.GetResourceString("PropertyLacksGet", @"The property or indexer '{0}' cannot be used in this context because it lacks the get accessor"); }
        }
        internal static string ObjectProhibited {
              get { return SR.GetResourceString("ObjectProhibited", @"Member '{0}' cannot be accessed with an instance reference; qualify it with a type name instead"); }
        }
        internal static string AssgReadonly {
              get { return SR.GetResourceString("AssgReadonly", @"A readonly field cannot be assigned to (except in a constructor or a variable initializer)"); }
        }
        internal static string RefReadonly {
              get { return SR.GetResourceString("RefReadonly", @"A readonly field cannot be passed ref or out (except in a constructor)"); }
        }
        internal static string AssgReadonlyStatic {
              get { return SR.GetResourceString("AssgReadonlyStatic", @"A static readonly field cannot be assigned to (except in a static constructor or a variable initializer)"); }
        }
        internal static string RefReadonlyStatic {
              get { return SR.GetResourceString("RefReadonlyStatic", @"A static readonly field cannot be passed ref or out (except in a static constructor)"); }
        }
        internal static string AssgReadonlyProp {
              get { return SR.GetResourceString("AssgReadonlyProp", @"Property or indexer '{0}' cannot be assigned to -- it is read only"); }
        }
        internal static string AbstractBaseCall {
              get { return SR.GetResourceString("AbstractBaseCall", @"Cannot call an abstract base member: '{0}'"); }
        }
        internal static string RefProperty {
              get { return SR.GetResourceString("RefProperty", @"A property or indexer may not be passed as an out or ref parameter"); }
        }
        internal static string ManagedAddr {
              get { return SR.GetResourceString("ManagedAddr", @"Cannot take the address of, get the size of, or declare a pointer to a managed type ('{0}')"); }
        }
        internal static string FixedNotNeeded {
              get { return SR.GetResourceString("FixedNotNeeded", @"You cannot use the fixed statement to take the address of an already fixed expression"); }
        }
        internal static string UnsafeNeeded {
              get { return SR.GetResourceString("UnsafeNeeded", @"Dynamic calls cannot be used in conjunction with pointers"); }
        }
        internal static string BadBoolOp {
              get { return SR.GetResourceString("BadBoolOp", @"In order to be applicable as a short circuit operator a user-defined logical operator ('{0}') must have the same return type as the type of its 2 parameters"); }
        }
        internal static string MustHaveOpTF {
              get { return SR.GetResourceString("MustHaveOpTF", @"The type ('{0}') must contain declarations of operator true and operator false"); }
        }
        internal static string CheckedOverflow {
              get { return SR.GetResourceString("CheckedOverflow", @"The operation overflows at compile time in checked mode"); }
        }
        internal static string ConstOutOfRangeChecked {
              get { return SR.GetResourceString("ConstOutOfRangeChecked", @"Constant value '{0}' cannot be converted to a '{1}' (use 'unchecked' syntax to override)"); }
        }
        internal static string AmbigMember {
              get { return SR.GetResourceString("AmbigMember", @"Ambiguity between '{0}' and '{1}'"); }
        }
        internal static string SizeofUnsafe {
              get { return SR.GetResourceString("SizeofUnsafe", @"'{0}' does not have a predefined size, therefore sizeof can only be used in an unsafe context (consider using System.Runtime.InteropServices.Marshal.SizeOf)"); }
        }
        internal static string FieldInitRefNonstatic {
              get { return SR.GetResourceString("FieldInitRefNonstatic", @"A field initializer cannot reference the non-static field, method, or property '{0}'"); }
        }
        internal static string CallingFinalizeDepracated {
              get { return SR.GetResourceString("CallingFinalizeDepracated", @"Destructors and object.Finalize cannot be called directly. Consider calling IDisposable.Dispose if available."); }
        }
        internal static string CallingBaseFinalizeDeprecated {
              get { return SR.GetResourceString("CallingBaseFinalizeDeprecated", @"Do not directly call your base class Finalize method. It is called automatically from your destructor."); }
        }
        internal static string BadCastInFixed {
              get { return SR.GetResourceString("BadCastInFixed", @"The right hand side of a fixed statement assignment may not be a cast expression"); }
        }
        internal static string NoImplicitConvCast {
              get { return SR.GetResourceString("NoImplicitConvCast", @"Cannot implicitly convert type '{0}' to '{1}'. An explicit conversion exists (are you missing a cast?)"); }
        }
        internal static string InaccessibleGetter {
              get { return SR.GetResourceString("InaccessibleGetter", @"The property or indexer '{0}' cannot be used in this context because the get accessor is inaccessible"); }
        }
        internal static string InaccessibleSetter {
              get { return SR.GetResourceString("InaccessibleSetter", @"The property or indexer '{0}' cannot be used in this context because the set accessor is inaccessible"); }
        }
        internal static string BadArity {
              get { return SR.GetResourceString("BadArity", @"Using the generic {1} '{0}' requires '{2}' type arguments"); }
        }
        internal static string BadTypeArgument {
              get { return SR.GetResourceString("BadTypeArgument", @"The type '{0}' may not be used as a type argument"); }
        }
        internal static string TypeArgsNotAllowed {
              get { return SR.GetResourceString("TypeArgsNotAllowed", @"The {1} '{0}' cannot be used with type arguments"); }
        }
        internal static string HasNoTypeVars {
              get { return SR.GetResourceString("HasNoTypeVars", @"The non-generic {1} '{0}' cannot be used with type arguments"); }
        }
        internal static string NewConstraintNotSatisfied {
              get { return SR.GetResourceString("NewConstraintNotSatisfied", @"'{2}' must be a non-abstract type with a public parameterless constructor in order to use it as parameter '{1}' in the generic type or method '{0}'"); }
        }
        internal static string GenericConstraintNotSatisfiedRefType {
              get { return SR.GetResourceString("GenericConstraintNotSatisfiedRefType", @"The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. There is no implicit reference conversion from '{3}' to '{1}'."); }
        }
        internal static string GenericConstraintNotSatisfiedNullableEnum {
              get { return SR.GetResourceString("GenericConstraintNotSatisfiedNullableEnum", @"The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. The nullable type '{3}' does not satisfy the constraint of '{1}'."); }
        }
        internal static string GenericConstraintNotSatisfiedNullableInterface {
              get { return SR.GetResourceString("GenericConstraintNotSatisfiedNullableInterface", @"The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. The nullable type '{3}' does not satisfy the constraint of '{1}'. Nullable types can not satisfy any interface constraints."); }
        }
        internal static string GenericConstraintNotSatisfiedTyVar {
              get { return SR.GetResourceString("GenericConstraintNotSatisfiedTyVar", @"The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. There is no boxing conversion or type parameter conversion from '{3}' to '{1}'."); }
        }
        internal static string GenericConstraintNotSatisfiedValType {
              get { return SR.GetResourceString("GenericConstraintNotSatisfiedValType", @"The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. There is no boxing conversion from '{3}' to '{1}'."); }
        }
        internal static string TypeVarCantBeNull {
              get { return SR.GetResourceString("TypeVarCantBeNull", @"Cannot convert null to type parameter '{0}' because it could be a non-nullable value type. Consider using 'default({0})' instead."); }
        }
        internal static string BadRetType {
              get { return SR.GetResourceString("BadRetType", @"'{1} {0}' has the wrong return type"); }
        }
        internal static string CantInferMethTypeArgs {
              get { return SR.GetResourceString("CantInferMethTypeArgs", @"The type arguments for method '{0}' cannot be inferred from the usage. Try specifying the type arguments explicitly."); }
        }
        internal static string MethGrpToNonDel {
              get { return SR.GetResourceString("MethGrpToNonDel", @"Cannot convert method group '{0}' to non-delegate type '{1}'. Did you intend to invoke the method?"); }
        }
        internal static string RefConstraintNotSatisfied {
              get { return SR.GetResourceString("RefConstraintNotSatisfied", @"The type '{2}' must be a reference type in order to use it as parameter '{1}' in the generic type or method '{0}'"); }
        }
        internal static string ValConstraintNotSatisfied {
              get { return SR.GetResourceString("ValConstraintNotSatisfied", @"The type '{2}' must be a non-nullable value type in order to use it as parameter '{1}' in the generic type or method '{0}'"); }
        }
        internal static string CircularConstraint {
              get { return SR.GetResourceString("CircularConstraint", @"Circular constraint dependency involving '{0}' and '{1}'"); }
        }
        internal static string BaseConstraintConflict {
              get { return SR.GetResourceString("BaseConstraintConflict", @"Type parameter '{0}' inherits conflicting constraints '{1}' and '{2}'"); }
        }
        internal static string ConWithValCon {
              get { return SR.GetResourceString("ConWithValCon", @"Type parameter '{1}' has the 'struct' constraint so '{1}' cannot be used as a constraint for '{0}'"); }
        }
        internal static string AmbigUDConv {
              get { return SR.GetResourceString("AmbigUDConv", @"Ambiguous user defined conversions '{0}' and '{1}' when converting from '{2}' to '{3}'"); }
        }
        internal static string PredefinedTypeNotFound {
              get { return SR.GetResourceString("PredefinedTypeNotFound", @"Predefined type '{0}' is not defined or imported"); }
        }
        internal static string PredefinedTypeBadType {
              get { return SR.GetResourceString("PredefinedTypeBadType", @"Predefined type '{0}' is declared incorrectly"); }
        }
        internal static string BindToBogus {
              get { return SR.GetResourceString("BindToBogus", @"'{0}' is not supported by the language"); }
        }
        internal static string CantCallSpecialMethod {
              get { return SR.GetResourceString("CantCallSpecialMethod", @"'{0}': cannot explicitly call operator or accessor"); }
        }
        internal static string BogusType {
              get { return SR.GetResourceString("BogusType", @"'{0}' is a type not supported by the language"); }
        }
        internal static string MissingPredefinedMember {
              get { return SR.GetResourceString("MissingPredefinedMember", @"Missing compiler required member '{0}.{1}'"); }
        }
        internal static string LiteralDoubleCast {
              get { return SR.GetResourceString("LiteralDoubleCast", @"Literal of type double cannot be implicitly converted to type '{1}'; use an '{0}' suffix to create a literal of this type"); }
        }
        internal static string UnifyingInterfaceInstantiations {
              get { return SR.GetResourceString("UnifyingInterfaceInstantiations", @"'{0}' cannot implement both '{1}' and '{2}' because they may unify for some type parameter substitutions"); }
        }
        internal static string ConvertToStaticClass {
              get { return SR.GetResourceString("ConvertToStaticClass", @"Cannot convert to static type '{0}'"); }
        }
        internal static string GenericArgIsStaticClass {
              get { return SR.GetResourceString("GenericArgIsStaticClass", @"'{0}': static types cannot be used as type arguments"); }
        }
        internal static string PartialMethodToDelegate {
              get { return SR.GetResourceString("PartialMethodToDelegate", @"Cannot create delegate from method '{0}' because it is a partial method without an implementing declaration"); }
        }
        internal static string IncrementLvalueExpected {
              get { return SR.GetResourceString("IncrementLvalueExpected", @"The operand of an increment or decrement operator must be a variable, property or indexer"); }
        }
        internal static string NoSuchMemberOrExtension {
              get { return SR.GetResourceString("NoSuchMemberOrExtension", @"'{0}' does not contain a definition for '{1}' and no extension method '{1}' accepting a first argument of type '{0}' could be found (are you missing a using directive or an assembly reference?)"); }
        }
        internal static string ValueTypeExtDelegate {
              get { return SR.GetResourceString("ValueTypeExtDelegate", @"Extension methods '{0}' defined on value type '{1}' cannot be used to create delegates"); }
        }
        internal static string BadArgCount {
              get { return SR.GetResourceString("BadArgCount", @"No overload for method '{0}' takes '{1}' arguments"); }
        }
        internal static string BadArgTypes {
              get { return SR.GetResourceString("BadArgTypes", @"The best overloaded method match for '{0}' has some invalid arguments"); }
        }
        internal static string BadArgType {
              get { return SR.GetResourceString("BadArgType", @"Argument '{0}': cannot convert from '{1}' to '{2}'"); }
        }
        internal static string RefLvalueExpected {
              get { return SR.GetResourceString("RefLvalueExpected", @"A ref or out argument must be an assignable variable"); }
        }
        internal static string BadProtectedAccess {
              get { return SR.GetResourceString("BadProtectedAccess", @"Cannot access protected member '{0}' via a qualifier of type '{1}'; the qualifier must be of type '{2}' (or derived from it)"); }
        }
        internal static string BindToBogusProp2 {
              get { return SR.GetResourceString("BindToBogusProp2", @"Property, indexer, or event '{0}' is not supported by the language; try directly calling accessor methods '{1}' or '{2}'"); }
        }
        internal static string BindToBogusProp1 {
              get { return SR.GetResourceString("BindToBogusProp1", @"Property, indexer, or event '{0}' is not supported by the language; try directly calling accessor method '{1}'"); }
        }
        internal static string BadDelArgCount {
              get { return SR.GetResourceString("BadDelArgCount", @"Delegate '{0}' does not take '{1}' arguments"); }
        }
        internal static string BadDelArgTypes {
              get { return SR.GetResourceString("BadDelArgTypes", @"Delegate '{0}' has some invalid arguments"); }
        }
        internal static string AssgReadonlyLocal {
              get { return SR.GetResourceString("AssgReadonlyLocal", @"Cannot assign to '{0}' because it is read-only"); }
        }
        internal static string RefReadonlyLocal {
              get { return SR.GetResourceString("RefReadonlyLocal", @"Cannot pass '{0}' as a ref or out argument because it is read-only"); }
        }
        internal static string ReturnNotLValue {
              get { return SR.GetResourceString("ReturnNotLValue", @"Cannot modify the return value of '{0}' because it is not a variable"); }
        }
        internal static string BadArgExtraRef {
              get { return SR.GetResourceString("BadArgExtraRef", @"Argument '{0}' should not be passed with the '{1}' keyword"); }
        }
        internal static string BadArgRef {
              get { return SR.GetResourceString("BadArgRef", @"Argument '{0}' must be passed with the '{1}' keyword"); }
        }
        internal static string AssgReadonly2 {
              get { return SR.GetResourceString("AssgReadonly2", @"Members of readonly field '{0}' cannot be modified (except in a constructor or a variable initializer)"); }
        }
        internal static string RefReadonly2 {
              get { return SR.GetResourceString("RefReadonly2", @"Members of readonly field '{0}' cannot be passed ref or out (except in a constructor)"); }
        }
        internal static string AssgReadonlyStatic2 {
              get { return SR.GetResourceString("AssgReadonlyStatic2", @"Fields of static readonly field '{0}' cannot be assigned to (except in a static constructor or a variable initializer)"); }
        }
        internal static string RefReadonlyStatic2 {
              get { return SR.GetResourceString("RefReadonlyStatic2", @"Fields of static readonly field '{0}' cannot be passed ref or out (except in a static constructor)"); }
        }
        internal static string AssgReadonlyLocalCause {
              get { return SR.GetResourceString("AssgReadonlyLocalCause", @"Cannot assign to '{0}' because it is a '{1}'"); }
        }
        internal static string RefReadonlyLocalCause {
              get { return SR.GetResourceString("RefReadonlyLocalCause", @"Cannot pass '{0}' as a ref or out argument because it is a '{1}'"); }
        }
        internal static string ThisStructNotInAnonMeth {
              get { return SR.GetResourceString("ThisStructNotInAnonMeth", @"Anonymous methods, lambda expressions, and query expressions inside structs cannot access instance members of 'this'. Consider copying 'this' to a local variable outside the anonymous method, lambda expression or query expression and using the local instead."); }
        }
        internal static string DelegateOnNullable {
              get { return SR.GetResourceString("DelegateOnNullable", @"Cannot bind delegate to '{0}' because it is a member of 'System.Nullable<T>'"); }
        }
        internal static string BadCtorArgCount {
              get { return SR.GetResourceString("BadCtorArgCount", @"'{0}' does not contain a constructor that takes '{1}' arguments"); }
        }
        internal static string BadExtensionArgTypes {
              get { return SR.GetResourceString("BadExtensionArgTypes", @"'{0}' does not contain a definition for '{1}' and the best extension method overload '{2}' has some invalid arguments"); }
        }
        internal static string BadInstanceArgType {
              get { return SR.GetResourceString("BadInstanceArgType", @"Instance argument: cannot convert from '{0}' to '{1}'"); }
        }
        internal static string BadArgTypesForCollectionAdd {
              get { return SR.GetResourceString("BadArgTypesForCollectionAdd", @"The best overloaded Add method '{0}' for the collection initializer has some invalid arguments"); }
        }
        internal static string InitializerAddHasParamModifiers {
              get { return SR.GetResourceString("InitializerAddHasParamModifiers", @"The best overloaded method match '{0}' for the collection initializer element cannot be used. Collection initializer 'Add' methods cannot have ref or out parameters."); }
        }
        internal static string NonInvocableMemberCalled {
              get { return SR.GetResourceString("NonInvocableMemberCalled", @"Non-invocable member '{0}' cannot be used like a method."); }
        }
        internal static string NamedArgumentSpecificationBeforeFixedArgument {
              get { return SR.GetResourceString("NamedArgumentSpecificationBeforeFixedArgument", @"Named argument specifications must appear after all fixed arguments have been specified"); }
        }
        internal static string BadNamedArgument {
              get { return SR.GetResourceString("BadNamedArgument", @"The best overload for '{0}' does not have a parameter named '{1}'"); }
        }
        internal static string BadNamedArgumentForDelegateInvoke {
              get { return SR.GetResourceString("BadNamedArgumentForDelegateInvoke", @"The delegate '{0}' does not have a parameter named '{1}'"); }
        }
        internal static string DuplicateNamedArgument {
              get { return SR.GetResourceString("DuplicateNamedArgument", @"Named argument '{0}' cannot be specified multiple times"); }
        }
        internal static string NamedArgumentUsedInPositional {
              get { return SR.GetResourceString("NamedArgumentUsedInPositional", @"Named argument '{0}' specifies a parameter for which a positional argument has already been given"); }
        }

#endif
    }
}
