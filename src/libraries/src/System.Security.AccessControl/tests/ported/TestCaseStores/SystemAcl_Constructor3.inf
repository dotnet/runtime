;**************************************************************************************************
;*Case Data Format:                                                                               *
;*     isContainer -- true/false                                                                  *
;*     isDS -- true/false                                                                         *
;*     initialRawAclStr -- string                                                                 *
;*     verifierRawAclStr -- string                                                                *
;*     wasCanonicalInitially -- true/false                                                        *
;*                                                                                                *
;*     RawAcl String Format:                                                                      *
;*              RawAcl := ACE[#ACE]                                                               *
;*              ACE := aceFlags:aceQualifier:accessMask:sid:isCallback:opaqSize                   *
;**************************************************************************************************

[TestCase]
;
;case1:
;NonContainer SACL, 1st is normal explicit commonAce
;2nd is commonAce with mask 0, 3rd is normal inherited commonAce, 2nd should be removed.
;
;AceFlags.SuccessfulAccess = 64
;AceQualifier.SystemAudit = 2
;AceFlags.SuccessfulAccess | AceFlags.Inherited = 80
;AceFlags.FailedAccess = 128
;
false
false
64:2:1:BA:false:0#128:2:0:BG:false:0#80:2:2:BO:false:0
64:2:1:BA:false:0#80:2:2:BO:false:0
true

[TestCase]
;
;case2:
;NonContainer SACL, 1st is commonAce with InheritOnly and ObjectInherit
;2nd is normal explicit commonAce, 3rd is normal inherited commonAce, 1st should be removed.
;
;AceFlags.SuccessfulAccess | AceFlags.InheritedOnly | AceFlags.ObjectInherit = 73
;
false
false
73:2:1:BA:false:0#64:2:1:BG:false:0#80:2:2:BO:false:0
64:2:1:BG:false:0#80:2:2:BO:false:0
true

[TestCase]
;
;case3:
;Container SACL, 1st is commonAce with InheritOnly and ObjectInherit
;2nd is normal explicit commonAce, 3rd is normal inherited commonAce, 1st should NOT be removed.
;
true
false
73:2:1:BA:false:0#64:2:1:BG:false:0#80:2:2:BO:false:0
73:2:1:BA:false:0#64:2:1:BG:false:0#80:2:2:BO:false:0
true

[TestCase]
;
;case4:
;NonContainer SACL, 1st is commonAce with NoPropagateInherit, ContainerInherit and ObjectInherit flags
;all these flags will be cleared
;
;AceFlags.SuccessfulAccess | AceFlags.FailedAccess | AceFlags.ContainerInherit | AceFlags.ObjectInherit | AceFlags.NoPropagateInherit = 199
;AceFlags.SuccessfulAccess | AceFlags.FailedAccess = 192
;
false
false
199:2:1:BA:false:0
192:2:1:BA:false:0
true

[TestCase]
;
;case5:
;Container SACL, 1st is commonAce with NoPropagateInherit, ContainerInherit and ObjectInherit flags
;all these flags will be kept
;
true
false
199:2:1:BA:false:0
199:2:1:BA:false:0
true

[TestCase]
;
;case6:
;NonContainer SACL, 1st is commonAce with accessMask 0
;2nd iscommonAce with InheritOnly, 3rd is noraml explict commonAce,1st and 2nd will be removed 
;
;
false
false
128:2:0:BG:false:0#72:2:1:BA:false:0#64:2:1:BO:false:0
64:2:1:BO:false:0
true

[TestCase]
;
;case7:
;Container SACL, 1st is normal explicit commonAce
;2nd is normal Inherited Ace, 3rd is commonAce with InheritOnly but w/o ContainerInherit, Object Inherit. 3rd will be removed
;
;AceFlags.FailedAccess | InheritOnly = 136
;
true
false
64:2:1:BA:false:0#80:2:2:BO:false:0#136:2:1:BG:false:0
64:2:1:BA:false:0#80:2:2:BO:false:0
true

[TestCase]
;
;case8:
;Container SACL, 1st is commonAce with NoPropagateInherit but w/o ContainerInherit or ObjectInherit 
;(note there is no InheritOnly), these flags will be cleared
;
true
false
196:2:1:BA:false:0
192:2:1:BA:false:0
true

[TestCase]
;
;case9:
;Container SACL, 1st is commonAce w/o Success or Failure, 2nd is normal explicit Ace, 1st removed
;
;AceFlags.ObjectInherit | AceFlags.ContainerInherit | AceFlags.NoPropagateInherit | AceFlags.InheritOnly = 15
;
true
false
15:2:1:BA:false:0#64:2:1:BG:false:0
64:2:1:BG:false:0
true

[TestCase]
;
;case10:
;1st Ace AceQualifier.AccessAllowed but with AceFlags.SuccessfulAccess or AceFlags.FailedAccess on SACL?
;2nd is normal explicit Ace. After OM change, this ACE will be removed
;
;
false
false
192:0:1:BA:false:0#64:2:1:BG:false:0
64:2:1:BG:false:0
true

[TestCase]
;
;case11:
;1st Ace AceQualifier.AccessDenied but with AceFlags.SuccessfulAccess or AceFlags.FailedAccess on SACL?
;2nd is normal explicit Ace. After OM change, this ACE will be removed
;
;
false
false
192:1:1:BA:false:0#64:2:1:BG:false:0
64:2:1:BG:false:0
true

[TestCase]
;
;case12:
;1st Ace AceQualifier.Alarm but with AceFlags.SuccessfulAccess or AceFlags.FailedAccess on SACL?
;2nd is normal explicit Ace. After OM change, this ACE will be removed
;
;
false
false
192:3:1:BA:false:0#64:2:1:BG:false:0
64:2:1:BG:false:0
true

[TestCase]
;
;case11:
;Container/non-Container SACL, if 1st is explicit meaningful Ace
;2nd is inherited meaningful Ace, check pass
;
false
false
192:2:1:BA:false:0#80:2:2:BG:false:0
192:2:1:BA:false:0#80:2:2:BG:false:0
true

[TestCase]
;
;case12:
;Container/non-Container SACL, if 1st is inherited meaningful Ace
;2nd is explicit meaningful Ace, the order will be swapped
;due to DCR, constructor will not do canonicalization anymore
;
false
false
80:2:2:BG:false:0#192:2:1:BA:false:0
80:2:2:BG:false:0#192:2:1:BA:false:0
false

[TestCase]
;
;case13:
;Container/non-Container SACL, if 1st is inherited meaningful Ace
;2nd is inherited meaningful Ace, the order will be kept w/o considering sid order
;
;AceFlags.SuccessfulAccess | AceFlags.FailedAccess | Inherited = 208
;
false
false
80:2:2:BG:false:0#208:2:1:BA:false:0
80:2:2:BG:false:0#208:2:1:BA:false:0
true

[TestCase]
;
;case14:
;1st Ace without AceQualifier.SystemAudit but with AceFlags.SuccessfulAccess or AceFlags.FailedAccess
;2nd is also this kind and compatible, 3rd is normal explicit Ace. 4th is to avoid the bug to 227087.
;Should not merge 1st and 2nd, this is a waste. These ACEs are not allowed now. 
;
false
false
192:0:1:BA:false:0#192:0:2:BA:false:0#64:2:1:BG:false:0#64:0:3:BG:false:0
64:2:1:BG:false:0
true

[TestCase]
;
;case15:
;qualified ACE but inherited will not merge with previous ACE
;
;192 = AceFlags.SuccessfulAccess | AceFlags.FailedAccess
;208 = AceFlags.SuccessfulAccess | AceFlags.FailedAccess | AceFlags.Inherited
;
false
false
64:2:1:BG:false:0#192:2:1:BA:false:0#208:2:2:BA:false:0
192:2:1:BA:false:0#64:2:1:BG:false:0#208:2:2:BA:false:0
true

[TestCase]
;
;case16:
;qualified, explicit ACE but qualifer does not match will not merge.
;This one is invalid now since non-SystemAudit Ace are not allowed in SystemAcl
;
false
false
64:1:1:BG:false:0#64:2:2:BA:false:0#192:2:1:BG:false:0
64:2:2:BA:false:0#192:2:1:BG:false:0
true

[TestCase]
;
;case17:
;qualified, explicit ACE but sid does not match will not merge
;
;AceFlags.SuccessfulAccess -- 64
;AceFlags.FailedAccess -- 128
;
false
false
128:2:1:BG:false:0#64:2:1:BA:false:0#64:2:2:BO:false:0
64:2:1:BA:false:0#128:2:1:BG:false:0#64:2:2:BO:false:0
true

[TestCase]
;
;case18:
;Container/non-Container SACL, 2nd is meaningful explicit SystemAudit Ace
;3rd is meaningful explicit SystemAudit Ace with same sid and aceFlags, merge accessMask.
;
false
false
128:2:1:BG:false:0#64:2:1:BA:false:0#64:2:2:BA:false:0
64:2:3:BA:false:0#128:2:1:BG:false:0
true

[TestCase]
;
;case19:
;Container/non-Container SACL, 2nd is meaningful explicit SystemAudit Ace
;3rd is meaningful explicit SystemAudit Ace with same sid and aceFlags,
;and accessMask(1st and 2nd are equal), merge accessMask (actually, the duplicate is removed)
;
false
false
128:2:1:BG:false:0#64:2:1:BA:false:0#64:2:1:BA:false:0
64:2:1:BA:false:0#128:2:1:BG:false:0
true

[TestCase]
;
;case20:
;Container SACL, 2nd is meaningful explicit SystemAudit Ace
;3rd is meaningful explicit SystemAudit Ace with same sid and Inheritance,aceFlags and accessMask, merge AuditFlags
;
true
false
128:2:1:BG:false:0#65:2:1:BA:false:0#129:2:1:BA:false:0
193:2:1:BA:false:0#128:2:1:BG:false:0
true

[TestCase]
;
;case21:
;Container(can not be non-Container) SACL, 2nd is meaningful explicit SystemAudit Ace
;3rd is meaningful explicit SystemAudit Ace with same sid and AuditFlags and Mask
;if inheritance flags are compatible, they will merge 
;
;AceFlags.SuccessfulAccess | AceFlags.FailedAccess = 192
;AceFlags.ContainerInherit | AceFlags.SuccessfulAccess = 66
;AceFlags.ContainerInherit | AceFlags.SuccessfulAccess | AceFlags.NoPropagateInherit = 70
;
true
false
192:2:1:BO:false:0#66:2:1:BA:false:0#70:2:1:BA:false:0
66:2:1:BA:false:0#192:2:1:BO:false:0
true

[TestCase]
;
;case22:
;Container(can not be non-Container) SACL, 2nd is meaningful explicit SystemAudit Ace
;3rd is meaningful explicit SystemAudit Ace with same sid and AuditFlagas and Mask
;if inheritance flags are not compatible, they will not merge
;
;AceFlags.ObjectInherit = 1
;AceFlags.ContainerInherit | AceFlags.FailedAccess = 130
;AceFlags.ContainerInherit | AceFlags.ObjectInherit | AceFlags.NoPropagateInherit | AceFlags.FailedAccess = 135
;
true
false
64:2:1:BO:false:0#130:2:1:BA:false:0#135:2:1:BA:false:0
135:2:1:BA:false:0#130:2:1:BA:false:0#64:2:1:BO:false:0
true

