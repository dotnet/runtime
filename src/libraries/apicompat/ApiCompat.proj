<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>
    <TargetFramework>$(NetCoreAppCurrent)-$(TargetOS)</TargetFramework>
    <!-- Reference the dependencies to have the assemblies available for API comparison. -->
    <NoTargetsDoNotReferenceOutputAssemblies>false</NoTargetsDoNotReferenceOutputAssemblies>
    <!-- Target reference assemblies instead of implementation assemblies. -->
    <CompileUsingReferenceAssemblies>true</CompileUsingReferenceAssemblies>
    <TrimOutPrivateAssembliesFromReferencePath>true</TrimOutPrivateAssembliesFromReferencePath>

    <ApiCompatNetCoreAppLatestStableBaselineFile>$(MSBuildThisFileDirectory)ApiCompatBaseline.NetCoreAppLatestStable.xml</ApiCompatNetCoreAppLatestStableBaselineFile>
    <ApiCompatNetStandard21BaselineFile>$(MSBuildThisFileDirectory)ApiCompatBaseline.netstandard2.1.xml</ApiCompatNetStandard21BaselineFile>
    <ApiCompatNetStandard20BaselineFile>$(MSBuildThisFileDirectory)ApiCompatBaseline.netstandard2.0.xml</ApiCompatNetStandard20BaselineFile>
  </PropertyGroup>

  <ItemGroup>
    <!-- The globally defined DefaultGenApiDocIds.txt and the ApiCompatExcludeAttributes.txt exclude attribute files apply as well. -->
    <ApiCompatExcludeAttributesFile Include="ApiCompatBaselineExcludedAttributes.txt" />
  </ItemGroup>

  <ItemGroup>
    <ApiCompatNetCoreAppLatestStableLeftAssembliesTransformationPattern Include=".+%5C$([System.IO.Path]::DirectorySeparatorChar)(.+)" ReplacementString="$(NetCoreAppLatestStable)/$1" />
    <ApiCompatNetStandard21LeftAssembliesTransformationPattern Include=".+%5C$([System.IO.Path]::DirectorySeparatorChar)(.+)" ReplacementString="netstandard2.1/$1" />
    <ApiCompatNetStandard20LeftAssembliesTransformationPattern Include=".+%5C$([System.IO.Path]::DirectorySeparatorChar)(.+)" ReplacementString="netstandard2.0/$1" />
    <ApiCompatNetCoreAppCurrentRightAssembliesTransformationPattern Include=".+%5C$([System.IO.Path]::DirectorySeparatorChar)(.+)" ReplacementString="$(NetCoreAppCurrent)/$1" />
  </ItemGroup>

  <!-- For API comparison, ApiCompat needs both the inbox and the out-of-band assemblies plus the shims to be built. -->
  <ItemGroup>
    <ProjectReference Include="..\sfx-src.proj;
                               ..\oob-src.proj;
                               ..\shims.proj" />
  </ItemGroup>

  <ItemGroup>
    <PackageDownload Include="Microsoft.NETCore.App.Ref" Version="[$(NetCoreAppLatestStablePackageBaselineVersion)]" />
    <PackageDownload Include="NETStandard.Library.Ref" Version="[$(NETStandardLibraryRefVersion)]" />
    <PackageDownload Include="NETStandard.Library" Version="[$(NetStandardLibraryVersion)]" />
    <PackageReference Include="Microsoft.DotNet.ApiCompat.Task" Version="$(MicrosoftDotNetApiCompatTaskVersion)" IsImplicitlyDefined="true" />
  </ItemGroup>

  <Target Name="RunApiCompat"
          DependsOnTargets="FindReferenceAssembliesForReferences;CollectApiCompatInputs"
          AfterTargets="Build"
          Inputs="@(ReferencePathWithRefAssemblies);$(ApiCompatNetStandard20BaselineFile);$(ApiCompatNetStandard21BaselineFile);$(ApiCompatNetCoreAppLatestStableBaselineFile);@(ApiCompatExcludeAttributesFile)"
          Outputs="$(IntermediateOutputPath)$(TargetArchitecture)-marker.txt">
    <Message Text="ApiCompat -> Comparing $(NetCoreAppCurrent) reference assemblies against .NETStandard2.x and .NETCoreApp$(NetCoreAppLatestStableVersion)..." Importance="high"  />

    <!-- ApiCompat: NetCoreAppCurrent <-> NetCoreAppLatestStable -->
    <Microsoft.DotNet.ApiCompat.Task.ValidateAssembliesTask
      LeftAssemblies="$([MSBuild]::NormalizeDirectory('$(NuGetPackageRoot)', 'microsoft.netcore.app.ref', '$(NetCoreAppLatestStablePackageBaselineVersion)', 'ref', '$(NetCoreAppLatestStable)'))"
      RightAssemblies="@(ReferencePathWithRefAssemblies)"
      RoslynAssembliesPath="$(RoslynAssembliesPath)"
      GenerateCompatibilitySuppressionFile="$(GenerateCompatibilitySuppressionFile)"
      CompatibilitySuppressionFilePath="$(ApiCompatNetCoreAppLatestStableBaselineFile)"
      EnableRuleAttributesMustMatch="$(ApiCompatEnableRuleAttributesMustMatch)"
      ExcludeAttributesFiles="@(ApiCompatExcludeAttributesFile)"
      LeftAssembliesTransformationPattern="@(ApiCompatNetCoreAppLatestStableLeftAssembliesTransformationPattern)"
      RightAssembliesTransformationPattern="@(ApiCompatNetCoreAppCurrentRightAssembliesTransformationPattern)" />

    <!-- ApiCompat: NetCoreAppCurrent <-> netstandard2.1 -->
    <Microsoft.DotNet.ApiCompat.Task.ValidateAssembliesTask
      LeftAssemblies="$(NETStandard21RefPath)netstandard.dll"
      RightAssemblies="@(ReferencePathWithRefAssemblies)"
      RoslynAssembliesPath="$(RoslynAssembliesPath)"
      GenerateCompatibilitySuppressionFile="$(GenerateCompatibilitySuppressionFile)"
      CompatibilitySuppressionFilePath="$(ApiCompatNetStandard21BaselineFile)"
      EnableRuleAttributesMustMatch="$(ApiCompatEnableRuleAttributesMustMatch)"
      ExcludeAttributesFiles="@(ApiCompatExcludeAttributesFile)"
      LeftAssembliesTransformationPattern="@(ApiCompatNetStandard21LeftAssembliesTransformationPattern)"
      RightAssembliesTransformationPattern="@(ApiCompatNetCoreAppCurrentRightAssembliesTransformationPattern)" />

    <!-- ApiCompat: NetCoreAppCurrent <-> netstandard2.0 -->
    <Microsoft.DotNet.ApiCompat.Task.ValidateAssembliesTask
      LeftAssemblies="$([MSBuild]::NormalizeDirectory('$(NuGetPackageRoot)', 'netstandard.library', '$(NetStandardLibraryVersion)', 'build', 'netstandard2.0', 'ref'))"
      RightAssemblies="@(ReferencePathWithRefAssemblies)"
      RoslynAssembliesPath="$(RoslynAssembliesPath)"
      GenerateCompatibilitySuppressionFile="$(GenerateCompatibilitySuppressionFile)"
      CompatibilitySuppressionFilePath="$(ApiCompatNetStandard20BaselineFile)"
      EnableRuleAttributesMustMatch="$(ApiCompatEnableRuleAttributesMustMatch)"
      ExcludeAttributesFiles="@(ApiCompatExcludeAttributesFile)"
      LeftAssembliesTransformationPattern="@(ApiCompatNetStandard20LeftAssembliesTransformationPattern)"
      RightAssembliesTransformationPattern="@(ApiCompatNetCoreAppCurrentRightAssembliesTransformationPattern)" />

    <!-- Create a marker file which serves as the target's output to enable incremental builds. -->
    <Touch Files="$(IntermediateOutputPath)$(TargetArchitecture)-marker.txt"
           AlwaysCreate="true" />
  </Target>

  <Target Name="CleanAdditionalFiles" AfterTargets="Clean">
    <RemoveDir Directories="$(IntermediateOutputPath)" />
  </Target>

</Project>
