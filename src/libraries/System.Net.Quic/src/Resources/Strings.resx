<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="net_quic_connectionaborted" xml:space="preserve">
    <value>Connection aborted by peer ({0}).</value>
  </data>
  <data name="net_quic_operationaborted" xml:space="preserve">
    <value>Operation aborted.</value>
  </data>
  <data name="net_quic_reading_notallowed" xml:space="preserve">
    <value>Reading is not allowed on stream.</value>
  </data>
  <data name="net_quic_writing_aborted" xml:space="preserve">
    <value>Writing has been aborted on the stream.</value>
  </data>
  <data name="net_quic_reading_aborted" xml:space="preserve">
    <value>Reading has been aborted on the stream.</value>
  </data>
  <data name="net_quic_streamaborted" xml:space="preserve">
    <value>Stream aborted by peer ({0}).</value>
  </data>
  <data name="SystemNetQuic_PlatformNotSupported" xml:space="preserve">
    <value>System.Net.Quic is not supported on this platform: {0}</value>
  </data>
  <data name="net_quic_writing_notallowed" xml:space="preserve">
    <value>Writing is not allowed on stream.</value>
  </data>
  <data name="net_quic_in_range" xml:space="preserve">
    <value>'{0}'' should be within [0, {1}) range.</value>
  </data>
  <data name="net_quic_not_null_listener" xml:space="preserve">
    <value>'{0}' must be specified to start the listener.</value>
  </data>
  <data name="net_quic_not_null_not_empty_listener" xml:space="preserve">
    <value>'{0}' must be specified and contain at least one item to start the listener.</value>
  </data>
  <data name="net_quic_not_null_open_connection" xml:space="preserve">
    <value>'{0}' must be specified to open the connection.</value>
  </data>
  <data name="net_quic_not_null_accept_connection" xml:space="preserve">
    <value>'{0}' must be specified to accept the connection.</value>
  </data>
  <data name="net_quic_timeout_use_gt_zero" xml:space="preserve">
    <value>Timeout can only be set to 'System.Threading.Timeout.Infinite' or a value &gt; 0.</value>
  </data>
  <data name="net_quic_unsupported_endpoint_type" xml:space="preserve">
    <value>'{0}' in not supported remote endpoint type, expected IP or DNS endpoint."</value>
  </data>
  <data name="net_quic_not_null_not_empty_connection" xml:space="preserve">
    <value>'{0}' must be specified and contain at least one item to establish the connection.</value>
  </data>
  <data name="net_quic_not_null_ceritifcate" xml:space="preserve">
    <value>Server must provide a certificate in '{0}' or '{1}' or via '{2}' for the connection.</value>
  </data>
  <data name="net_quic_timeout" xml:space="preserve">
    <value>Connection timed out waiting for a response from the peer.</value>
  </data>
  <data name="net_quic_handshake_timeout" xml:space="preserve">
    <value>Connection handshake was canceled due to the configured timeout of {0} seconds elapsing.</value>
  </data>
  <data name="net_quic_ssl_option" xml:space="preserve">
    <value>'{0}' is not supported by System.Net.Quic.</value>
  </data>
  <data name="net_quic_cert_custom_validation" xml:space="preserve">
    <value>The remote certificate was rejected by the provided RemoteCertificateValidationCallback.</value>
  </data>
  <data name="net_quic_cert_chain_validation" xml:space="preserve">
    <value>The remote certificate is invalid because of errors in the certificate chain: {0}</value>
  </data>
  <data name="net_quic_internal_error" xml:space="preserve">
    <value>An internal error has occurred. {0}</value>
  </data>
  <data name="net_quic_tls_version_notsupported" xml:space="preserve">
    <value>Could not use a TLS version required by Quic. TLS 1.3 may have been disabled in the registry.</value>
  </data>
  <data name="net_quic_empty_cipher_suite" xml:space="preserve">
    <value>CipherSuitePolicy must specify at least one cipher supported by QUIC.</value>
  </data>
  <data name="net_quic_accept_not_allowed" xml:space="preserve">
    <value>QuicConnection is configured to not accept any streams.</value>
  </data>
  <data name="net_quic_connection_refused" xml:space="preserve">
    <value>The server refused the connection.</value>
  </data>
  <data name="net_quic_protocol_error" xml:space="preserve">
    <value>A QUIC protocol error was encountered</value>
  </data>
  <data name="net_quic_ver_neg_error" xml:space="preserve">
    <value>A version negotiation error was encountered.</value>
  </data>
  <data name="net_quic_alpn_neg_error" xml:space="preserve">
    <value>Application layer protocol negotiation error was encountered.</value>
  </data>
  <data name="net_quic_connection_idle" xml:space="preserve">
    <value>The connection timed out from inactivity.</value>
  </data>
  <data name="net_quic_auth" xml:space="preserve">
    <value>Authentication failed: {0}.</value>
  </data>
  <!-- Same as in System.Net.Security -->
  <data name="net_io_invalidnestedcall" xml:space="preserve">
    <value>This method may not be called when another {0} operation is pending.</value>
  </data>
  <data name="net_auth_tls_alert" xml:space="preserve">
    <value>Authentication failed because the remote party sent a TLS alert: '{0}'.</value>
  </data>
  <!-- Referenced in shared IPEndPointExtensions.cs -->
  <data name="net_InvalidAddressFamily" xml:space="preserve">
    <value>The AddressFamily {0} is not valid for the {1} end point, use {2} instead.</value>
  </data>
  <data name="net_InvalidSocketAddressSize" xml:space="preserve">
    <value>The supplied {0} is an invalid size for the {1} end point.</value>
  </data>
  <data name="net_quic_callback_error" xml:space="preserve">
    <value>User configured callback failed.</value>
  </data>
</root>

