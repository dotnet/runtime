<!--
  Targets that can be executed individually even though they are sequenced into build already:
    - UpdateSolutionFile: Adds/updates solution files with slngen which includes dependencies.
    - AddNuGetConfigToSolution: Checks if the solution needs a NuGet.config file to disable restore.
-->
<Project Sdk="Microsoft.Build.NoTargets">
  <PropertyGroup>
    <TargetFramework>$(NetCoreAppToolCurrent)</TargetFramework>
    <ProjTemplatePath>$(RepositoryEngineeringDir)slngen.template.proj</ProjTemplatePath>
    <NuGetConfigTemplatePath>$(RepositoryEngineeringDir)slngen.nuget.config</NuGetConfigTemplatePath>
  </PropertyGroup>

  <ItemGroup>
    <SolutionFile Include="$(MSBuildThisFileDirectory)*\*.sln" />
    <SourceProject Include="$(MSBuildThisFileDirectory)*\src\*.*proj" />
  </ItemGroup>

  <Target Name="UpdateSolutionFile"
          AfterTargets="Build"
          DependsOnTargets="GetSolutionFiles"
          Inputs="@(SolutionFile)"
          Outputs="%(ProjFilePath)">
    <!-- Copy template files, required by slngen -->
    <Copy SourceFiles="$(ProjTemplatePath)"
          DestinationFiles="%(SolutionFile.ProjFilePath)" />
    
    <!-- Invoke slngen -->
    <Exec Command="dotnet slngen &quot;%(SolutionFile.ProjFilePath) -p SlnGenMainProject=%(SolutionFile.Filename) --launch false --nologo&quot;" />

    <!-- Delete temporary template file -->
    <Delete Files="%(SolutionFile.ProjFilePath)" />
  </Target>

  <Target Name="AddNuGetConfigToSolution"
          AfterTargets="UpdateSolutionFile"
          DependsOnTargets="GetSolutionFiles;GetSourceProjectWithDuplicateTfm"
          Inputs="@(SolutionFile)"
          Outputs="%(NuGetConfigFilePath)">
    <!-- Delete existing NuGet.config files -->
    <Delete Files="%(SolutionFile.NuGetConfigFilePath)" />
    
    <!-- Check if solution file contains a source project with a duplicate tfm -->
    <PropertyGroup>
      <SolutionFileContent>$([System.IO.File]::ReadAllText('%(SolutionFile.Identity)'))</SolutionFileContent>
      <SolutionFileContainsSourceProjectWithDuplicateTfm />
      <SolutionFileContainsSourceProjectWithDuplicateTfm Condition="$(SolutionFileContent.Contains('src\%(SourceProjectWithDuplicateTfm.Identity)'))">true</SolutionFileContainsSourceProjectWithDuplicateTfm>
    </PropertyGroup>
    
    <!-- Copy NuGet config template file -->
    <Copy SourceFiles="$(NuGetConfigTemplatePath)"
          DestinationFiles="%(SolutionFile.NuGetConfigFilePath)"
          Condition="'$(SolutionFileContainsSourceProjectWithDuplicateTfm)' == 'true'" />
    
    <Message Text="Copying NuGet.config template file for %(SolutionFile.Filename)"
             Importance="high"
             Condition="'$(SolutionFileContainsSourceProjectWithDuplicateTfm)' == 'true'" />
  </Target>

  <Target Name="ClearNuGetConfigFile"
          DependsOnTargets="GetSolutionFiles">
    <!-- Delete existing NuGet.config files -->
    <Delete Files="%(SolutionFile.NuGetConfigFilePath)" />
  </Target>

  <Target Name="GetSolutionFiles">
    <ItemGroup>
      <!-- Add attributes that require a separate item mutation. -->
      <SolutionFile ProjFilePath="%(RelativeDir)%(Filename).proj"
                    NuGetConfigFilePath="%(RelativeDir)NuGet.config" />
    </ItemGroup>
  </Target>

  <Target Name="GetSourceProjectWithDuplicateTfm"
          Inputs="@(SourceProject)"
          Outputs="%(Identity)">
    <!-- Check if project file contains duplicate tfms -->
    <PropertyGroup>
      <ProjectFileContent>$([System.IO.File]::ReadAllText('%(SourceProject.Identity)'))</ProjectFileContent>
      <!-- Get the target framework string out of the project file -->
      <ProjectFileTargetFrameworks>$([System.Text.RegularExpressions.Regex]::Match($(ProjectFileContent), '&lt;TargetFrameworks&gt;(.+%3F)&lt;\/TargetFrameworks&gt;'))</ProjectFileTargetFrameworks>
      <ProjectFileTargetFrameworks>$(ProjectFileTargetFrameworks.Replace('&lt;TargetFrameworks&gt;', ''))</ProjectFileTargetFrameworks>
      <ProjectFileTargetFrameworks>$(ProjectFileTargetFrameworks.Replace('&lt;/TargetFrameworks&gt;', ''))</ProjectFileTargetFrameworks>
      <!-- Strip away TargetFrameworkSuffixes -->
      <ProjectFileTargetFrameworks>$([System.Text.RegularExpressions.Regex]::Replace('$(ProjectFileTargetFrameworks)', '(-[^;]+)', ''))</ProjectFileTargetFrameworks>
      <!-- Check for duplicates of pre-net5.0 frameworks -->
      <ProjectFileTargetFrameworksHasDuplicates>$([System.Text.RegularExpressions.Regex]::IsMatch('$(ProjectFileTargetFrameworks);', '(netstandard.+|netcoreapp.+|net4.+)(?=.*;\1;)'))</ProjectFileTargetFrameworksHasDuplicates>
    </PropertyGroup>

    <ItemGroup>
      <SourceProjectWithDuplicateTfm Include="%(SourceProject.Filename)%(SourceProject.Extension)"
                                     Condition="'%(Identity)' == '%(SourceProject.Identity)' and
                                                '$(ProjectFileTargetFrameworksHasDuplicates)' == 'true'" />
    </ItemGroup>
  </Target>
</Project>
