<Project>
  <PropertyGroup Condition="'$(TargetFramework)' != ''">
    <_targetFrameworkVersionIndex>$(TargetFramework.IndexOfAny(".-0123456789"))</_targetFrameworkVersionIndex>
    <_targetFrameworkIdentifier Condition="'$(_runtimeOSVersionIndex)' != '-1'">$(TargetFramework.SubString(0, $(_targetFrameworkVersionIndex)))</_targetFrameworkIdentifier>
    <!-- For net5.0 and later use netcoreapp folder. -->
    <_targetFrameworkIdentifier Condition="'$(_targetFrameworkIdentifier)' == 'net' and !$(TargetFramework.StartsWith('net4'))">netcoreapp</_targetFrameworkIdentifier>
  </PropertyGroup>

  <PropertyGroup>
    <ToolsDir>$(MSBuildThisFileDirectory)tools\</ToolsDir>

    <RestoreSources>
      https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json;
      https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json;
      https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json;
      https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6-transport/nuget/v3/index.json;
      $(LocalPackagesPath)
    </RestoreSources>
  </PropertyGroup>

  <Import Project="tools\build\Packaging.common.targets" />
  <Import Project="tools\eng\Versions.props" />
  <Import Project="frameworkSettings\$(_targetFrameworkIdentifier)\*.targets" />
  <Import Project="frameworkSettings\$(TargetFramework)\*.targets" />
  <Import Project="packageSettings\$(TestPackageId)\*.targets" />
  <Import Project="packageSettings\$(TestPackageId)\$(_targetFrameworkIdentifier)\*.targets" />
  <Import Project="packageSettings\$(TestPackageId)\$(TargetFramework)\*.targets" />
  
  <ItemGroup>
    <!-- Type duplicated: https://github.com/dotnet/runtime/issues/33998 -->
    <IgnoredTypes Include="Microsoft.Extensions.Logging.LoggingBuilderExtensions" />
    <!-- Type duplicated: https://github.com/dotnet/runtime/issues/34420 -->
    <IgnoredTypes Include="System.Collections.Generic.CollectionExtensions" />
  </ItemGroup>

  
  <Target Name="LogBeginTest">
    <Message Importance="High" Text="Testing $(TestPackageID) TFM=$(TargetFramework)" />
  </Target>

  <Target Name="VerifyReferenceClosure"
          DependsOnTargets="ResolveReferences"
          Condition="'$(ShouldVerifyClosure)' == 'true'">
    <ItemGroup>
      <_refClosureFileNames Include="@(ReferencePath->'%(FileName)')">
        <Original>%(Identity)</Original>
      </_refClosureFileNames>
      <_refClosureFileNamesFiltered Include="@(_refClosureFileNames)" Exclude="@(ExcludeFromClosure);@(ExcludeFromClosure->'%(Identity).ni')"/>
      <_refClosureFileFiltered Include="@(_refClosureFileNamesFiltered->'%(Original)')"/>
    </ItemGroup>

    <VerifyClosure Condition="'@(_refClosureFileFiltered)' != ''"
                   Sources="@(_refClosureFileFiltered)"
                   IgnoredReferences="@(IgnoredReference)" />
  </Target>

  <Target Name="VerifyReferenceTypes" 
          DependsOnTargets="ResolveReferences"
          Condition="'$(ShouldVerifyTypes)' == 'true'">
    <ItemGroup>
      <_refTypesFileNames Include="@(ReferencePath->'%(FileName)')">
        <Original>%(Identity)</Original>
      </_refTypesFileNames>
      <_refTypesFileNamesFiltered Include="@(_refTypesFileNames)" Exclude="@(ExcludeFromTypes);@(ExcludeFromTypes->'%(Identity).ni')"/>
      <_refTypesFileFiltered Include="@(_refTypesFileNamesFiltered->'%(Original)')"/>
    </ItemGroup>

    <VerifyTypes Condition="'@(_refTypesFileFiltered)' != ''"
                 Sources="@(_refTypesFileFiltered)"
                 IgnoredTypes="@(IgnoredTypes)" />
  </Target>

  <Target Name="PrepareForRuntimeTesting" DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <RuntimeLibToTest Include="@(RuntimeCopyLocalItems)" Condition="'%(RuntimeCopyLocalItems.NuGetPackageId)' == '$(TestPackageId)'" RuntimeIdentifier="none" />
      <RuntimeLibToTest Include="@(RuntimeTargetsCopyLocalItems)" Condition="'%(RuntimeTargetsCopyLocalItems.NuGetPackageId)' == '$(TestPackageId)' AND '%(RuntimeTargetsCopyLocalItems.CopyLocal)' == 'true'" />
    </ItemGroup>

    <ItemGroup>
      <RuntimeLibToTestDependency Include="@(ReferencePath)" Condition="'%(ReferencePath.NuGetPackageId)' != '$(TestPackageId)'" />

      <!-- Some dependent packages may be excluded from compile, consider these as candiates as well.  
           We assume they must expose a RID agnostic asset, thus we only check RuntimeCopyLocalItems. -->
      <RuntimeCopyLocalItems Original="%(Identity)" />
      <_runtimeCopyLocalItemsPackages Include="@(RuntimeCopyLocalItems->'%(NuGetPackageId)')" 
                                      Exclude="@(ReferencePath->'%(NuGetPackageId)');$(TestPackageId)" />
      <RuntimeLibToTestDependency Include="@(_runtimeCopyLocalItemsPackages->'%(Original)')" />
    </ItemGroup>

    <Error Condition="'@(RuntimeLibToTest)' == ''" Text="Could not locate any runtime items from Package $(TestPackageID)" />
    
    <Message Importance="High" Text="Testing $(TestPackageID) TFM=$(TargetFramework) RIDs=@(RuntimeLibToTest->'%(RuntimeIdentifier)'->Distinct())" />
  </Target>

  <Target Name="VerifyRuntimeClosure" 
          Inputs="%(RuntimeLibToTest.RuntimeIdentifier)" 
          Outputs="unused"
          DependsOnTargets="PrepareForRuntimeTesting"
          Condition="'$(ShouldVerifyClosure)' == 'true' and '$(SkipVerifyClosureForRuntime)' != 'true'">
    <Message Importance="High" Text="Testing closure for $(TestPackageID) TFM=$(TargetFramework) RID=%(RuntimeLibToTest.RuntimeIdentifier)" />
    <ItemGroup>
      <_runClosureFileNames Include="@(RuntimeLibToTestDependency->'%(FileName)');@(RuntimeLibToTest->'%(FileName)')">
        <Original>%(Identity)</Original>
      </_runClosureFileNames>
      <_runClosureFileNamesFiltered Include="@(_runClosureFileNames)" Exclude="@(ExcludeFromClosure);@(ExcludeFromClosure->'%(Identity).ni')"/>
      <_runClosureFileFiltered Include="@(_runClosureFileNamesFiltered->'%(Original)')"/>
    </ItemGroup>

    <VerifyClosure Condition="'@(_runClosureFileFiltered)' != ''"
                   Sources="@(_runClosureFileFiltered)"
                   IgnoredReferences="@(IgnoredReference)" />
  </Target>

  <Target Name="VerifyRuntimeTypes" 
          Inputs="%(RuntimeLibToTest.RuntimeIdentifier)" 
          Outputs="unused"
          DependsOnTargets="PrepareForRuntimeTesting"
          Condition="'$(ShouldVerifyTypes)' == 'true'">
    <Message Importance="High" Text="Testing for duplicate types for  for $(TestPackageID) TFM=$(TargetFramework) RID=%(RuntimeLibToTest.RuntimeIdentifier)" />
    <ItemGroup>
      <_runTypesFileNames Include="@(RuntimeLibToTestDependency->'%(FileName)');@(RuntimeLibToTest->'%(FileName)')">
        <Original>%(Identity)</Original>
      </_runTypesFileNames>
      <_runTypesFileNamesFiltered Include="@(_runTypesFileNames)" Exclude="@(ExcludeFromTypes);@(ExcludeFromTypes->'%(Identity).ni')"/>
      <_runTypesFileFiltered Include="@(_runTypesFileNamesFiltered->'%(Original)')"/>
    </ItemGroup>

    <VerifyTypes Condition="'@(_runTypesFileFiltered)' != ''"
                 Sources="@(_runTypesFileFiltered)"
                 IgnoredTypes="@(IgnoredTypes)" />
  </Target>

  <Target Name="VerifyNotDependsOnNetStandard"
          DependsOnTargets="ResolveReferences"
          Condition="'$(_ShortFrameworkIdentifier)' == 'net' AND '$(_TargetFrameworkVersionWithoutV)' &gt;= '4.6.1' AND '$(DisableVerifyNotDependsOnNetStandardTest)' != 'true'">
    <Error Condition="'$(DependsOnNetStandard)' == 'true'" Text="Package $(TestPackageId) requires netstandard shims when targeting $(TargetFramework)" />
  </Target>

  <PropertyGroup>
    <TestDependsOn>
      LogBeginTest;
      VerifyNotDependsOnNetStandard;
      VerifyReferenceClosure;
      VerifyReferenceTypes;
      VerifyRuntimeClosure;
      VerifyRuntimeTypes;
    </TestDependsOn>
    <InnerTargets>Test</InnerTargets>
  </PropertyGroup>
  
  <!-- Runs all tests scenarios for this project -->
  <Target Name="Test" DependsOnTargets="$(TestDependsOn)"/>
</Project>
