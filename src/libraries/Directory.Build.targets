<Project InitialTargets="UpdateProjectReferencesWithAttributes">
  <PropertyGroup>
    <RefPath>$([MSBuild]::NormalizeDirectory('$(RefRootPath)', '$(TargetFramework)'))</RefPath>  
  </PropertyGroup>

  <Import Project="..\..\Directory.Build.targets" />

  <PropertyGroup>
    <NoWarn Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' or '$(TargetFrameworkIdentifier)' == '.NETStandard' or '$(TargetFramework)' == 'netcoreapp2.1'">$(NoWarn);nullable</NoWarn>
    <NoWarn Condition="'$(GeneratePlatformNotSupportedAssembly)' == 'true' or '$(GeneratePlatformNotSupportedAssemblyMessage)' != ''">$(NoWarn);nullable</NoWarn>
    <!-- Reset these properties back to blank, since they are defaulted by Microsoft.NET.Sdk -->
    <FileAlignment Condition="'$(FileAlignment)' == '512'" />
    <ErrorReport Condition="'$(ErrorReport)' == 'prompt'" />
    <WarningsAsErrors Condition="'$(WarningsAsErrors)' == 'NU1605'" />
    <!-- Set the documentation output file globally. -->
    <DocumentationFile Condition="'$(IsSourceProject)' == 'true' and '$(DocumentationFile)' == '' and '$(MSBuildProjectExtension)' != '.vbproj'">$(OutputPath)$(MSBuildProjectName).xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Override strong name key to default to Open for test projects,
         Tests which wish to control this should set TestStrongNameKeyId. -->
    <TestStrongNameKeyId Condition="'$(TestStrongNameKeyId)' == '' and $(MSBuildProjectName.StartsWith('Microsoft.Extensions.'))">MicrosoftAspNetCore</TestStrongNameKeyId>
    <TestStrongNameKeyId Condition="'$(TestStrongNameKeyId)' == ''">Open</TestStrongNameKeyId>
    <StrongNameKeyId Condition="'$(IsTestProject)' == 'true' or '$(IsTestSupportProject)' == 'true'">$(TestStrongNameKeyId)</StrongNameKeyId>
  </PropertyGroup>

  <Import Project="$(RepositoryEngineeringDir)resources.targets" />
  <Import Project="Sdk.targets" Sdk="Microsoft.DotNet.Arcade.Sdk" />

  <PropertyGroup>
    <ArtifactsPackagesDir>$([MSBuild]::NormalizePath('$(ArtifactsDir)', 'packages', '$(Configuration)'))</ArtifactsPackagesDir>
    <ArtifactsShippingPackagesDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsPackagesDir)', 'Shipping'))</ArtifactsShippingPackagesDir>
    <ArtifactsNonShippingPackagesDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsPackagesDir)', 'NonShipping'))</ArtifactsNonShippingPackagesDir>

    <PackageOutputPath Condition="'$(IsShippingPackage)' == 'true'">$(ArtifactsShippingPackagesDir)</PackageOutputPath>
    <PackageOutputPath Condition="'$(IsShippingPackage)' != 'true'">$(ArtifactsNonShippingPackagesDir)</PackageOutputPath>
  </PropertyGroup>

  <Import Project="$(RepositoryEngineeringDir)versioning.targets" />

  <!-- Corefx-specific binplacing properties -->
  <PropertyGroup>
    <IsRuntimeAssembly Condition="'$(IsRuntimeAssembly)'=='' and '$(IsReferenceAssembly)' != 'true' and '$(BinPlaceRef)' != 'true' and '$(IsTestProject)' != 'true' and '$(IsTestSupportProject)' != 'true'">true</IsRuntimeAssembly>
    <!-- Try to determine if this is a simple library without a ref project.
         https://github.com/dotnet/corefx/issues/14291 is tracking cleaning this up -->
    <IsRuntimeAndReferenceAssembly Condition="'$(IsRuntimeAndReferenceAssembly)' == '' and '$(IsRuntimeAssembly)' == 'true' and Exists('$(LibrariesProjectRoot)$(MSBuildProjectName)') and !Exists('$(LibrariesProjectRoot)$(MSBuildProjectName)/ref') and !$(MSBuildProjectName.StartsWith('System.Private'))">true</IsRuntimeAndReferenceAssembly>
    <IsNETCoreAppRef Condition="'$(IsNETCoreAppRef)' == ''">$(IsNETCoreApp)</IsNETCoreAppRef>
    <IsNetFxNETStandardRef Condition="'$(IsNetFxNETStandardRef)' == ''">$(IsNetFxNETStandard)</IsNetFxNETStandardRef>

    <BinPlaceRef Condition="'$(BinPlaceRef)' == '' and ('$(IsReferenceAssembly)' == 'true' or '$(IsRuntimeAndReferenceAssembly)' == 'true')">true</BinPlaceRef>
    <BinPlaceRuntime Condition="'$(BinPlaceRuntime)' == '' and ('$(IsRuntimeAssembly)' == 'true' or '$(IsRuntimeAndReferenceAssembly)' == 'true')">true</BinPlaceRuntime>
    <BinPlaceForTargetVertical Condition="'$(BinPlaceForTargetVertical)' == ''">true</BinPlaceForTargetVertical>
    <AllTargetFrameworks>net45;net451;net46;net461;net462;net47;net471;net472;netstandard1.0;netstandard1.1;netstandard1.2;netstandard1.3;netstandard1.4;netstandard1.5;netstandard1.6;netstandard2.0;netstandard2.0;netcoreapp2.0;netcoreapp2.1;netcoreapp3.0;$(netcoreappCurrent);</AllTargetFrameworks>
  </PropertyGroup>
    
  <ItemGroup Condition="$(MSBuildProjectName.StartsWith('Microsoft.Extensions.'))">
    <!-- Microsoft.Extensions are not yet using the doc-file package -->
    <BinPlaceItem Include="$(DocumentationFile)" />
  </ItemGroup>

  <ItemGroup Condition="'@(BinPlaceTargetFrameworks)' == ''">
    <!-- binplace to directories for the target vertical -->
    <BinPlaceTargetFrameworks Include="$(BuildTargetFramework)-$(TargetOS)" Condition="'$(BinPlaceForTargetVertical)' == 'true'">
      <NativePath>$(RuntimePath)</NativePath>
      <RefPath>$(BuildTargetFrameworkRefPath)</RefPath>
      <RuntimePath>$(RuntimePath)</RuntimePath>
    </BinPlaceTargetFrameworks>
    <!-- binplace to directories for packages -->
    <BinPlaceTargetFrameworks Condition="'$(IsNETCoreApp)' == 'true' and '$(BuildingNETCoreAppVertical)' == 'true'" Include="$(NetCoreAppCurrent)-$(TargetOS)">
      <PackageFileNativePath>$(NETCoreAppPackageRuntimePath)</PackageFileNativePath>
      <PackageFileRefPath Condition="'$(IsNETCoreAppRef)' == 'true'">$(NETCoreAppPackageRefPath)</PackageFileRefPath>
      <PackageFileRuntimePath>$(NETCoreAppPackageRuntimePath)</PackageFileRuntimePath>
      <NativePath Condition="'$(BinPlaceNETCoreAppPackage)' == 'true'">$(NETCoreAppPackageRuntimePath)\..\runtime\$(TargetOS)-$(Configuration)-$(TargetArchitecture)</NativePath>
      <RefPath Condition="'$(BinPlaceNETCoreAppPackage)' == 'true' and '$(IsNETCoreAppRef)' == 'true'">$(RefRootPath)microsoft.netcore.app\$(Configuration)</RefPath>
      <RuntimePath Condition="'$(BinPlaceNETCoreAppPackage)' == 'true'">$(NETCoreAppPackageRuntimePath)\..\runtime\$(TargetOS)-$(Configuration)-$(TargetArchitecture)</RuntimePath>
      <!-- enable trimming for any runtime project that's part of the shared framework and hasn't already set ILLinkTrimAssembly -->
      <SetProperties Condition="'$(BinPlaceRuntime)' == 'true' and '$(ILLinkTrimAssembly)' == ''">ILLinkTrimAssembly=true</SetProperties>
    </BinPlaceTargetFrameworks>
    <BinPlaceTargetFrameworks Condition="'$(IsAspNetCoreApp)' == 'true'" Include="$(NetCoreAppCurrent)">
      <RuntimePath>$(ASPNETCoreAppPackageRuntimePath)</RuntimePath>
      <RefPath>$(ASPNETCoreAppPackageRefPath)</RefPath>
    </BinPlaceTargetFrameworks>

    <!-- Setup the shared framework directory for testing -->
    <BinPlaceTargetFrameworks Condition="'$(BinPlaceTestSharedFramework)' == 'true'" Include="$(NetCoreAppCurrent)-$(TargetOS)">
      <NativePath>$(NETCoreAppTestSharedFrameworkPath)</NativePath>
      <RuntimePath>$(NETCoreAppTestSharedFrameworkPath)</RuntimePath>
    </BinPlaceTargetFrameworks>
    <BinPlaceTargetFrameworks Condition="'$(BinPlaceNETFXRuntime)' == 'true'" Include="$(NetFrameworkCurrent)-Windows_NT">
      <NativePath>$(TestHostRootPath)</NativePath>
      <RuntimePath>$(TestHostRootPath)</RuntimePath>
    </BinPlaceTargetFrameworks>

    <!-- Microsoft.NetCore.App.Ref targeting pack -->
    <BinPlaceTargetFrameworks Include="$(NetCoreAppCurrent)">
      <RefPath Condition="'$(IsNETCoreAppRef)' == 'true'">$(MicrosoftNetCoreAppRefPackRefDir)</RefPath>
    </BinPlaceTargetFrameworks>

    <!-- Microsoft.NetCore.App.Runtime targeting pack -->
    <BinPlaceTargetFrameworks Include="$(NetCoreAppCurrent)-$(TargetOS)">
      <NativePath>$(MicrosoftNetCoreAppRuntimePackNativeDir)</NativePath>
      <RuntimePath>$(MicrosoftNetCoreAppRuntimePackRidLibTfmDir)</RuntimePath>
    </BinPlaceTargetFrameworks>

    <!-- binplace targeting packs which may be different from Build TargetFramework -->
    <BinPlaceTargetFrameworks Include="netstandard2.0">
      <RefPath>$(NetStandard20RefPath)</RefPath>
    </BinPlaceTargetFrameworks>
    <BinPlaceTargetFrameworks Include="netstandard2.1">
      <RefPath>$(NetStandard21RefPath)</RefPath>
    </BinPlaceTargetFrameworks>
    <!-- some libraries that produce packages will remain targeting netcoreapp2.0 -->
    <BinPlaceTargetFrameworks Condition="'$(BuildingNETCoreAppVertical)' == 'true'" Include="netcoreapp2.0">
      <RefPath>$(RefRootPath)netcoreapp2.0/</RefPath>
    </BinPlaceTargetFrameworks>
    <AllTargetFrameworkList Include="$(AllTargetFrameworks)"/>
    <!-- for BuildAllConfigurations make sure all refpaths are created.  -->
    <BinPlaceTargetFrameworks Condition="'$(BuildAllConfigurations)' == 'true'" Include="@(AllTargetFrameworkList)">
      <RefPath>$(RefRootPath)%(Identity)/</RefPath>
    </BinPlaceTargetFrameworks>
    <!-- for BuildAllConfigurations make sure runtimepaths are created for all vertical target frameworks. -->
    <BinPlaceTargetFrameworks Condition="'$(BuildAllConfigurations)' == 'true' and ('$(BinPlaceForTargetVertical)' == 'true' or ('$(TargetFramework)' != '$(NetCoreAppCurrent)' and '$(TargetFrameworkSuffix)' == ''))" Include="$(NetCoreAppCurrent)-$(TargetOS)">
      <NativePath>$(ArtifactsBinDir)runtime/%(Identity)-$(Configuration)-$(TargetArchitecture)</NativePath>
      <RuntimePath>$(ArtifactsBinDir)runtime/%(Identity)-$(Configuration)-$(TargetArchitecture)</RuntimePath>
    </BinPlaceTargetFrameworks>

    <BinPlaceTargetFrameworks Include="@(AdditionalBinPlaceTargetFrameworks)" />
  </ItemGroup>

  <Import Project="$(RepositoryEngineeringDir)codeOptimization.targets" />
  <Import Project="$(RepositoryEngineeringDir)references.targets" />
  <Import Project="$(RepositoryEngineeringDir)resolveContract.targets" />
  <Import Project="$(RepositoryEngineeringDir)testing\tests.targets" Condition="'$(EnableTestSupport)' == 'true'" />
  <Import Project="$(RepositoryEngineeringDir)testing\linker\trimmingTests.targets" Condition="'$(IsTrimmingTestProject)' == 'true'" />
  <Import Project="$(RepositoryEngineeringDir)testing\runtimeConfiguration.targets" />
  <Import Project="$(RepositoryEngineeringDir)testing\runsettings.targets" Condition="'$(EnableRunSettingsSupport)' == 'true'" />
  <Import Project="$(RepositoryEngineeringDir)testing\coverage.targets" Condition="'$(EnableRunSettingsSupport)' == 'true' or '$(EnableCoverageSupport)' == 'true'" />

  <Import Sdk="Microsoft.DotNet.Build.Tasks.TargetFramework.Sdk" Project="Sdk.targets" />
  <Import Project="$(RepositoryEngineeringDir)restore\repoRestore.targets" Condition="'$(DisableProjectRestore)' == 'true'" />
  <Import Project="$(RepositoryEngineeringDir)referenceFromRuntime.targets" />
  <Import Project="$(RepositoryEngineeringDir)illink.targets" Condition="'$(IsSourceProject)' == 'true'" />
  <Import Project="$(RepositoryEngineeringDir)notSupported.SourceBuild.targets" Condition="'$(DotNetBuildFromSource)' == 'true'" />

  <ItemGroup Condition="'$(IsSourceProject)' == 'true' or '$(IsReferenceAssembly)' == 'true' or '$(IsPartialFacadeAssembly)' == 'true'">
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Packaging" Version="$(MicrosoftDotNetBuildTasksPackagingVersion)" PrivateAssets="all" IsImplicitlyDefined="true" />
    <PackageReference Include="Microsoft.DotNet.ApiCompat" Condition="'$(DotNetBuildFromSource)' != 'true'" Version="$(MicrosoftDotNetApiCompatVersion)" PrivateAssets="all" IsImplicitlyDefined="true" />
    <PackageReference Include="Microsoft.DotNet.GenAPI" Condition="'$(DotNetBuildOffline)' != 'true'" Version="$(MicrosoftDotNetGenApiVersion)" PrivateAssets="all" IsImplicitlyDefined="true" />
    <PackageReference Include="Microsoft.DotNet.GenFacades" Version="$(MicrosoftDotNetGenFacadesVersion)" PrivateAssets="all" IsImplicitlyDefined="true" />
  </ItemGroup>

  <Target Name="SetGenApiProperties"
          BeforeTargets="GenerateReferenceAssemblySource">
    <PropertyGroup>
      <_ExcludeAPIList>$([MSBuild]::NormalizePath('$(MSBuildProjectDirectory)', '..', 'ref', 'ReferenceSourceExcludeApi.txt'))</_ExcludeAPIList>
      <_ExcludeAttributesList>$(RepositoryEngineeringDir)DefaultGenApiDocIds.txt</_ExcludeAttributesList>
      <_LicenseHeaderTxtPath>$(RepositoryEngineeringDir)LicenseHeader.txt</_LicenseHeaderTxtPath> 
      <GenAPITargetPath>$([MSBuild]::NormalizePath('$(MSBuildProjectDirectory)', '..', 'ref', '$(AssemblyName).cs'))</GenAPITargetPath>
      <GenAPIAdditionalParameters>$(GenAPIAdditionalParameters) --exclude-attributes-list "$(_ExcludeAttributesList)"</GenAPIAdditionalParameters>
      <GenAPIAdditionalParameters Condition="Exists('$(_ExcludeAPIList)')">$(GenAPIAdditionalParameters) --exclude-api-list "$(_ExcludeAPIList)"</GenAPIAdditionalParameters>
      <GenAPIAdditionalParameters>$(GenAPIAdditionalParameters) --header-file "$(_LicenseHeaderTxtPath)"</GenAPIAdditionalParameters>
      <GenAPIAdditionalParameters Condition="'$(LangVersion)' != ''">$(GenAPIAdditionalParameters) --lang-version "$(LangVersion)"</GenAPIAdditionalParameters>  
      <GenAPIAdditionalParameters Condition="'%(ProjectReference.Identity)' == '$(CoreLibProject)'">$(GenAPIAdditionalParameters) --follow-type-forwards</GenAPIAdditionalParameters>
    </PropertyGroup>
  </Target>

  <Target Name="GenerateReferenceSource" DependsOnTargets="GenerateReferenceAssemblySource">
    <Message Text="This is a deprecated target. It will be replaced by GenerateReferenceAssemblySource in next infra rollout changes." Importance="high" />
  </Target>

  <Import Project="$(RepositoryEngineeringDir)outerBuild.targets" Condition="'$(IsCrossTargetingBuild)' == 'true'" />

  <!-- Import Packaging targets -->
  <Import Project="$(RepositoryEngineeringDir)packaging.targets" />

  <!-- Define this now until we can clean-up targets that depend on it in the packaging targets -->
  <Target Name="CreateVersionFileDuringBuild" />

  <!-- Define this target to override the workaround in arcade as we don't need it for our pkgprojs -->
  <Target Name="InitializeStandardNuspecProperties" />

  <Target Name="UpdateProjectReferencesWithAttributes" Condition="'@(ProjectReference)' != ''">
    <ItemGroup>
      <ProjectReference>
        <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      </ProjectReference>
      <ProjectReference Condition="'%(Filename)' == 'System.Private.CoreLib'">
        <UndefineProperties>$(UndefineProperties);TargetFramework</UndefineProperties>
        <SetConfiguration Condition="'$(RuntimeFlavor)' == 'CoreCLR' and
                                     '$(Configuration)' != '$(CoreCLRConfiguration)'">Configuration=$(CoreCLRConfiguration)</SetConfiguration>
        <SetConfiguration Condition="'$(RuntimeFlavor)' == 'Mono' and
                                     '$(Configuration)' != '$(MonoConfiguration)'">Configuration=$(MonoConfiguration)</SetConfiguration>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <!-- Used for packaging -->
  <Target Name="IsNotNetCoreAppProject" Returns="@(IsNotNetCoreAppProjectResult)">
    <ItemGroup>
      <IsNotNetCoreAppProjectResult Condition="'$(IsNetCoreApp)' != 'true'" Include="$(MSBuildProjectName)" Version="$(PackageVersion)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <!--
    Hack workaround to skip the GenerateCompiledExpressionsTempFile target in
    Microsoft.WorkflowBuildExtensions.targets target that always runs in VS
    -->
    <GenerateCompiledExpressionsTempFilePathForEditing />
  </PropertyGroup>

  <!-- Returns the assembly version of the project for consumption
       by the NuGet package generation -->
  <Target Name="GetAssemblyVersion"
          Returns="$(AssemblyVersion)"/>

  <!-- Returns the generated documentation file for consumption
       by the NuGet package generation -->
  <Target Name="GetDocumentationFile"
          Returns="$(DocumentationFile)"/>

  <PropertyGroup>
    <DefineConstants Condition="'$(IsPrerelease)' != 'false' and '$(TargetFramework)' != '$(NetCoreAppCurrent)'">$(DefineConstants),USE_INTERNAL_ACCESSIBILITY</DefineConstants>
  </PropertyGroup>
  
  <!-- Adds Nullable annotation attributes to netstandard <= 2.0 builds -->
  <Choose>
    <When Condition="'$(Nullable)' != '' and ($(TargetFramework.StartsWith('netstandard1')) or '$(TargetFramework)' == 'netstandard2.0' or $(TargetFramework.StartsWith('netcoreapp2')) or '$(TargetFrameworkIdentifier)' == '.NETFramework')">
      <PropertyGroup>
        <DefineConstants>$(DefineConstants),INTERNAL_NULLABLE_ATTRIBUTES</DefineConstants>
      </PropertyGroup>
      <ItemGroup>
        <Compile Include="$(CoreLibSharedDir)System\Diagnostics\CodeAnalysis\NullableAttributes.cs" Link="System\Diagnostics\CodeAnalysis\NullableAttributes.cs" />
      </ItemGroup>
    </When>
  </Choose>
  
  <PropertyGroup>
    <ExcludeFromPackage Condition="'$(TargetFramework)' == '$(NetCoreAppCurrent)' and '$(ExcludeCurrentNetCoreAppFromPackage)' == 'true'">true</ExcludeFromPackage>
    <ExcludeFromPackage Condition="'$(TargetFramework)' == '$(NetFrameworkCurrent)' and '$(ExcludeCurrentFullFrameworkFromPackage)' == 'true'">true</ExcludeFromPackage>
  </PropertyGroup>

  <!-- The Default behavior in VS is to show files for the first target framework in TargetFrameworks property.
        This is required to show all the files corresponding to all target frameworks in VS. -->
  <ItemGroup>
    <None Include="$(MSBuildProjectDirectory)\**\*.cs"
          Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder);@(Compile)" />
  </ItemGroup>

  <PropertyGroup>
    <SkipLocalsInit Condition="'$(SkipLocalsInit)' == '' and '$(IsSourceProject)' == 'true' and '$(MSBuildProjectExtension)' == '.csproj' and '$(IsNETCoreApp)' == 'true' and '$(TargetFramework)' == '$(NetCoreAppCurrent)'">true</SkipLocalsInit>
  </PropertyGroup>

  <!--Instructs compiler not to emit .locals init, using SkipLocalsInitAttribute.-->
  <Choose>
    <When Condition="'$(SkipLocalsInit)' == 'true'">
      <PropertyGroup >
        <!-- This is needed to use the SkipLocalsInitAttribute. -->
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
      </PropertyGroup>

      <ItemGroup>
        <Compile Include="$(CommonPath)SkipLocalsInit.cs" Link="Common\SkipLocalsInit.cs" />
      </ItemGroup>
    </When>
  </Choose>

</Project>
