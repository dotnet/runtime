// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using SourceGenerators;

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    public sealed partial class ConfigurationBindingGenerator : IIncrementalGenerator
    {
        private sealed partial class Emitter
        {
            private readonly SourceProductionContext _context;
            private readonly SourceGenerationSpec _sourceGenSpec;
            private readonly SourceWriter _writer = new();

            public Emitter(SourceProductionContext context, SourceGenerationSpec sourceGenSpec)
            {
                _context = context;
                _sourceGenSpec = sourceGenSpec;
            }

            public void Emit()
            {
                if (!ShouldEmitBindingExtensions())
                {
                    return;
                }

                _writer.WriteLine("""
                    // <auto-generated/>
                    #nullable enable
                    #pragma warning disable CS0612, CS0618 // Suppress warnings about [Obsolete] member usage in generated code.
                    """);

                EmitInterceptsLocationAttrDecl();

                EmitStartBlock($"namespace {ProjectName}");
                EmitUsingStatements();

                _writer.WriteLine();
                EmitStartBlock($$"""
                    {{Expression.GeneratedCodeAnnotation}}
                    file static class {{Identifier.BindingExtensions}}
                    """);
                EmitBindingExtensions_IConfiguration();
                EmitBindingExtensions_OptionsBuilder();
                EmitBindingExtensions_IServiceCollection();
                EmitCoreBindingHelpers();
                EmitEndBlock(); // BindingExtensions class

                EmitEndBlock(); // Binding namespace.

                _context.AddSource($"{Identifier.BindingExtensions}.g.cs", _writer.ToSourceText());
            }

            private void EmitInterceptsLocationAttrDecl()
            {
                _writer.WriteLine();
                _writer.WriteLine($$"""
                    namespace System.Runtime.CompilerServices
                    {
                        using System;
                        using System.CodeDom.Compiler;

                        {{Expression.GeneratedCodeAnnotation}}
                        [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                        file sealed class InterceptsLocationAttribute : Attribute
                        {
                            public InterceptsLocationAttribute(string filePath, int line, int column)
                            {
                            }
                        }
                    }
                    """);
                _writer.WriteLine();
            }

            private void EmitUsingStatements()
            {
                foreach (string @namespace in _sourceGenSpec.Namespaces.ToImmutableSortedSet())
                {
                    _writer.WriteLine($"using {@namespace};");
                }
            }
        }
    }
}
