// <auto-generated/>
#nullable enable

internal static class GeneratedConfigurationBinder
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection Configure<T>(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::Microsoft.Extensions.Configuration.IConfiguration configuration)
    {
        if (configuration is null)
        {
            throw new global::System.ArgumentNullException(nameof(configuration));
        }

        if (typeof(T) == typeof(global::Program.MyClass))
        {
            return services.Configure<global::Program.MyClass>(obj =>
            {
                if (!global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.Helpers.HasValueOrChildren(configuration))
                {
                    return default;
                }

                global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.Helpers.BindCore(configuration, ref obj);
            });
        }

        throw new global::System.NotSupportedException($"Unable to bind to type '{typeof(T)}': 'Generator parser did not detect the type as input'");
    }
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using System;
    using System.Linq;
    using Microsoft.Extensions.Configuration;
    using System.Collections.Generic;

    internal static class Helpers
    {
        public static void BindCore(IConfiguration configuration, ref List<int> obj)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            int element;
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue1)
                {
                    element = int.Parse(stringValue1);
                    obj.Add(element);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Dictionary<string, string> obj)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            string key;
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Key is string stringValue2)
                {
                    key = stringValue2;
                    string element;
                    if (section.Value is string stringValue3)
                    {
                        element = stringValue3;
                        obj[key] = element;
                    }
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Program.MyClass obj)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            if (configuration["MyString"] is string stringValue4)
            {
                obj.MyString = stringValue4;
            }

            if (configuration["MyInt"] is string stringValue5)
            {
                obj.MyInt = int.Parse(stringValue5);
            }

            IConfigurationSection section6 = configuration.GetSection("MyList");
            if (HasChildren(section6))
            {
                List<int> temp7 = obj.MyList;
                temp7 ??= new List<int>();
                BindCore(section6, ref temp7);
                obj.MyList = temp7;
            }

            IConfigurationSection section8 = configuration.GetSection("MyDictionary");
            if (HasChildren(section8))
            {
                Dictionary<string, string> temp9 = obj.MyDictionary;
                temp9 ??= new Dictionary<string, string>();
                BindCore(section8, ref temp9);
                obj.MyDictionary = temp9;
            }
        }

        public static bool HasValueOrChildren(IConfiguration configuration)
        {
            if ((configuration as IConfigurationSection)?.Value is not null)
            {
                return true;
            }
            return HasChildren(configuration);
        }

        public static bool HasChildren(IConfiguration configuration)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                return true;
            }
            return false;
        }
    }
}
