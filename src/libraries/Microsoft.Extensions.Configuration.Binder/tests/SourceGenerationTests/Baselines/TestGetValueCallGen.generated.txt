// <auto-generated/>
#nullable enable

internal static class GeneratedConfigurationBinder
{
    public static T? GetValue<T>(this global::Microsoft.Extensions.Configuration.IConfiguration configuration, string key) => (T?)(global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.Helpers.GetValueCore(configuration, typeof(T), key) ?? default(T));

    public static T? GetValue<T>(this global::Microsoft.Extensions.Configuration.IConfiguration configuration, string key, T defaultValue) => (T?)(global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.Helpers.GetValueCore(configuration, typeof(T), key) ?? defaultValue);

    public static object? GetValue(this global::Microsoft.Extensions.Configuration.IConfiguration configuration, global::System.Type type, string key) => global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.Helpers.GetValueCore(configuration, type, key);

    public static object? GetValue(this global::Microsoft.Extensions.Configuration.IConfiguration configuration, global::System.Type type, string key, object? defaultValue) =>global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.Helpers.GetValueCore(configuration, type, key) ?? defaultValue;
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using System;
    using System.Globalization;
    using Microsoft.Extensions.Configuration;

    internal static class Helpers
    {
        public static object? GetValueCore(this IConfiguration configuration, Type type, string key)
        {
            if (configuration is null)
            {
                throw new ArgumentNullException(nameof(configuration));
            }

            IConfigurationSection section = configuration.GetSection(key);
            object? obj;

            if (type == typeof(int))
            {
                if (section.Value is string stringValue0)
                {
                    obj = ParseInt(stringValue0, () => section.Path);
                    return obj;
                }
            }

            if (type == typeof(bool?))
            {
                if (section.Value is string stringValue1)
                {
                    obj = ParseBool(stringValue1, () => section.Path);
                    return obj;
                }
            }

            if (type == typeof(byte[]))
            {
                if (section.Value is string stringValue2)
                {
                    obj = ParseByteArray(stringValue2, () => section.Path);
                    return obj;
                }
            }

            if (type == typeof(CultureInfo))
            {
                if (section.Value is string stringValue3)
                {
                    obj = ParseCultureInfo(stringValue3, () => section.Path);
                    return obj;
                }
            }

            return null;
        }

        public static int ParseInt(string stringValue, Func<string?> getPath)
        {
            try
            {
                return int.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(int)}'.", exception);
            }
        }

        public static bool ParseBool(string stringValue, Func<string?> getPath)
        {
            try
            {
                return bool.Parse(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(bool)}'.", exception);
            }
        }

        public static byte[] ParseByteArray(string stringValue, Func<string?> getPath)
        {
            try
            {
                return Convert.FromBase64String(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(byte[])}'.", exception);
            }
        }

        public static CultureInfo ParseCultureInfo(string stringValue, Func<string?> getPath)
        {
            try
            {
                return CultureInfo.GetCultureInfo(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(CultureInfo)}'.", exception);
            }
        }
    }
}
