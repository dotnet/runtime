// <auto-generated/>
#nullable enable

/// <summary>Generated helper providing an AOT and linking compatible implementation for configuration binding.</summary>
internal static class GeneratedConfigurationBinder
{
    /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
    public static void Bind(this global::Microsoft.Extensions.Configuration.IConfiguration configuration, global::Program.MyClass obj, global::System.Action<global::Microsoft.Extensions.Configuration.BinderOptions>? configureOptions) => global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.CoreBindingHelper.BindCore(configuration, ref obj, global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.CoreBindingHelper.GetBinderOptions(configureOptions));
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using Microsoft.Extensions.Configuration;
    using System;
    using System.Collections.Generic;
    using System.Globalization;

    /// <summary>Provide core binding logic.</summary>
    internal static class CoreBindingHelper
    {
        public static void BindCore(IConfiguration configuration, ref List<int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue0)
                {
                    obj.Add(ParseInt(stringValue0, () => section.Path)!);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Dictionary<string, string> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue2)
                {
                    obj[section.Key!] = stringValue2!;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Program.MyClass2 obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

        }

        public static void BindCore(IConfiguration configuration, ref Dictionary<string, Program.MyClass2> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!(obj.TryGetValue(section.Key!, out Program.MyClass2? element) && element is not null))
                {
                    element = new Program.MyClass2();
                }
                BindCore(section, ref element!, binderOptions);
                obj[section.Key!] = element;
            }
        }

        public static void BindCore(IConfiguration configuration, ref Program.MyClass obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            List<string>? temp = null;
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                switch (section.Key)
                {
                    case "MyString":
                        {
                            obj.MyString = configuration["MyString"]!;
                        }
                        break;
                    case "MyInt":
                        {
                            if (configuration["MyInt"] is string stringValue6)
                            {
                                obj.MyInt = ParseInt(stringValue6, () => section.Path)!;
                            }
                        }
                        break;
                    case "MyList":
                        {
                            if (HasChildren(section))
                            {
                                List<int> temp7 = obj.MyList;
                                temp7 ??= new List<int>();
                                BindCore(section, ref temp7, binderOptions);
                                obj.MyList = temp7;
                            }
                        }
                        break;
                    case "MyDictionary":
                        {
                            if (HasChildren(section))
                            {
                                Dictionary<string, string> temp8 = obj.MyDictionary;
                                temp8 ??= new Dictionary<string, string>();
                                BindCore(section, ref temp8, binderOptions);
                                obj.MyDictionary = temp8;
                            }
                        }
                        break;
                    case "MyComplexDictionary":
                        {
                            if (HasChildren(section))
                            {
                                Dictionary<string, Program.MyClass2> temp9 = obj.MyComplexDictionary;
                                temp9 ??= new Dictionary<string, Program.MyClass2>();
                                BindCore(section, ref temp9, binderOptions);
                                obj.MyComplexDictionary = temp9;
                            }
                        }
                        break;
                    default:
                        {
                            if (binderOptions?.ErrorOnUnknownConfiguration == true)
                            {
                                (temp ??= new List<string>()).Add($"'{section.Key}'");
                            }
                        }
                        break;
                }
            }

            if (temp is not null)
            {
                throw new InvalidOperationException($"'ErrorOnUnknownConfiguration' was set on the provided BinderOptions, but the following properties were not found on the instance of {typeof(Program.MyClass)}: {string.Join(", ", temp)}");
            }
        }

        public static bool HasChildren(IConfiguration configuration)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                return true;
            }
            return false;
        }

        public static BinderOptions? GetBinderOptions(Action<BinderOptions>? configureOptions)
        {
            if (configureOptions is null)
            {
                return null;
            }
            BinderOptions binderOptions = new();
            configureOptions(binderOptions);
            if (binderOptions.BindNonPublicProperties)
            {
                throw new global::System.NotSupportedException($"The configuration binding source generator does not support 'BinderOptions.BindNonPublicProperties'.");
            }
            return binderOptions;
        }

        public static int ParseInt(string stringValue, Func<string?> getPath)
        {
            try
            {
                return int.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(int)}'.", exception);
            }
        }
    }
}
