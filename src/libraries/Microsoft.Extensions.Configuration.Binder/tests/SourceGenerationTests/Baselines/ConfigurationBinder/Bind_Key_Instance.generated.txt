// <auto-generated/>
#nullable enable
#pragma warning disable CS0612, CS0618 // Suppress warnings about [Obsolete] member usage in generated code.

/// <summary>Generated helper providing an AOT and linking compatible implementation for configuration binding.</summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "42.42.42.42")]
internal static class GeneratedConfigurationBinder
{
    /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
    public static void Bind(this global::Microsoft.Extensions.Configuration.IConfiguration configuration, string key, global::Program.MyClass obj) => global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.CoreBindingHelper.BindCore(configuration.GetSection(key), ref obj, binderOptions: null);
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using Microsoft.Extensions.Configuration;
    using System;
    using System.Collections.Generic;
    using System.Globalization;

    /// <summary>Provide core binding logic.</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "42.42.42.42")]
    file static class CoreBindingHelper
    {
        private readonly static Lazy<HashSet<string>> s_configKeys_ProgramMyClass = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "MyString", "MyInt", "MyList", "MyDictionary", "MyComplexDictionary" });

        public static void BindCore(IConfiguration configuration, ref List<int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue0)
                {
                    obj.Add(ParseInt(stringValue0, () => section.Path)!);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Dictionary<string, string> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue1)
                {
                    obj[section.Key!] = stringValue1!;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Dictionary<string, Program.MyClass2> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!(obj.TryGetValue(section.Key!, out Program.MyClass2? element) && element is not null))
                {
                    element = new Program.MyClass2();
                }
                obj[section.Key!] = element;
            }
        }

        public static void BindCore(IConfiguration configuration, ref Program.MyClass obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            ValidateConfigurationKeys(typeof(Program.MyClass), s_configKeys_ProgramMyClass.Value, configuration, binderOptions);

            obj.MyString = configuration["MyString"]!;

            if (configuration["MyInt"] is string stringValue2)
            {
                obj.MyInt = ParseInt(stringValue2, () => configuration.GetSection("MyInt").Path)!;
            }

            if (AsConfigWithChildren(configuration.GetSection("MyList")) is IConfigurationSection section3)
            {
                List<int> temp5 = obj.MyList;
                temp5 ??= new List<int>();
                BindCore(section3, ref temp5, binderOptions);
                obj.MyList = temp5;
            }

            if (AsConfigWithChildren(configuration.GetSection("MyDictionary")) is IConfigurationSection section6)
            {
                Dictionary<string, string> temp8 = obj.MyDictionary;
                temp8 ??= new Dictionary<string, string>();
                BindCore(section6, ref temp8, binderOptions);
                obj.MyDictionary = temp8;
            }

            if (AsConfigWithChildren(configuration.GetSection("MyComplexDictionary")) is IConfigurationSection section9)
            {
                Dictionary<string, Program.MyClass2> temp11 = obj.MyComplexDictionary;
                temp11 ??= new Dictionary<string, Program.MyClass2>();
                BindCore(section9, ref temp11, binderOptions);
                obj.MyComplexDictionary = temp11;
            }
        }

        public static void ValidateConfigurationKeys(Type type, HashSet<string> keys, IConfiguration configuration, BinderOptions? binderOptions)
        {
            if (binderOptions?.ErrorOnUnknownConfiguration is true)
            {
                List<string>? temp = null;
                foreach (IConfigurationSection section in configuration.GetChildren())
                {
                    if (!keys.Contains(section.Key))
                    {
                        (temp ??= new List<string>()).Add($"'{section.Key}'");
                    }
                }
                if (temp is not null)
                {
                    throw new InvalidOperationException($"'ErrorOnUnknownConfiguration' was set on the provided BinderOptions, but the following properties were not found on the instance of {type}: {string.Join(", ", temp)}");
                }
            }
        }

        public static IConfiguration? AsConfigWithChildren(IConfiguration configuration)
        {
            foreach (IConfigurationSection _ in configuration.GetChildren())
            {
                return configuration;
            }
            return null;
        }

        public static int ParseInt(string stringValue, Func<string?> getPath)
        {
            try
            {
                return int.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(int)}'.", exception);
            }
        }
    }
}
