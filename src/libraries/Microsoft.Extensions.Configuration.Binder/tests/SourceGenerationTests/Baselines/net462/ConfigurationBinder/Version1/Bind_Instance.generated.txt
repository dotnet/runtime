// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace System.Runtime.CompilerServices
{
    using System;
    using System.CodeDom.Compiler;

    [GeneratedCode("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "42.42.42.42")]
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    file sealed class InterceptsLocationAttribute : Attribute
    {
        public InterceptsLocationAttribute(int version, string data)
        {
        }
    }
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using Microsoft.Extensions.Configuration;
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Runtime.CompilerServices;

    [GeneratedCode("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "42.42.42.42")]
    file static class BindingExtensions
    {
        #region IConfiguration extensions.
        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        [InterceptsLocation(1, "4Xh0YE/VYvgbhgXo3wbvQmABAABzcmMtMC5jcw==")] // src-0.cs(12,20)
        public static void Bind_ProgramMyClass(this IConfiguration configuration, object? instance)
        {
            if (configuration is null)
            {
                throw new ArgumentNullException(nameof(configuration));
            }

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Program.MyClass)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }
        #endregion IConfiguration extensions.

        #region Core binding extensions.
        private readonly static Lazy<HashSet<string>> s_configKeys_ProgramMyClass = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "MyString", "MyInt", "MyList", "MyDictionary", "MyComplexDictionary" });

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.List<int> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (TryGetConfigurationValue(section, key: null, out string? value))
                {
                    if (!string.IsNullOrEmpty(value))
                    {
                        instance.Add(ParseInt(value, section.Path));
                    }
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.Dictionary<string, string> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (TryGetConfigurationValue(section, key: null, out string? value))
                {
                    instance[section.Key] = value;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.Dictionary<string, global::Program.MyClass2> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!(instance.TryGetValue(section.Key, out global::Program.MyClass2? element) && element is not null))
                {
                    element = new global::Program.MyClass2();
                }
                instance[section.Key] = element;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Program.MyClass instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Program.MyClass), s_configKeys_ProgramMyClass, configuration, binderOptions);

            if (TryGetConfigurationValue(configuration, key: "MyString", out string? value0))
            {
                instance.MyString = value0;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.MyString;
                if (currentValue is not null)
                {
                    instance.MyString = currentValue;
                }
            }

            if (TryGetConfigurationValue(configuration, key: "MyInt", out string? value1))
            {
                if (!string.IsNullOrEmpty(value1))
                {
                    instance.MyInt = ParseInt(value1, configuration.GetSection("MyInt").Path);
                }
            }
            else if (defaultValueIfNotFound)
            {
                instance.MyInt = instance.MyInt;
            }

            var value2 = configuration.GetSection("MyList");
            if (AsConfigWithChildren(value2) is IConfigurationSection section3)
            {
                global::System.Collections.Generic.List<int>? temp5 = instance.MyList;
                temp5 ??= new global::System.Collections.Generic.List<int>();
                BindCore(section3, ref temp5, defaultValueIfNotFound: false, binderOptions);
                instance.MyList = temp5;
            }
            else
            {
                instance.MyList = instance.MyList;
            }

            var value6 = configuration.GetSection("MyDictionary");
            if (AsConfigWithChildren(value6) is IConfigurationSection section7)
            {
                global::System.Collections.Generic.Dictionary<string, string>? temp9 = instance.MyDictionary;
                temp9 ??= new global::System.Collections.Generic.Dictionary<string, string>();
                BindCore(section7, ref temp9, defaultValueIfNotFound: false, binderOptions);
                instance.MyDictionary = temp9;
            }
            else
            {
                instance.MyDictionary = instance.MyDictionary;
            }

            var value10 = configuration.GetSection("MyComplexDictionary");
            if (AsConfigWithChildren(value10) is IConfigurationSection section11)
            {
                global::System.Collections.Generic.Dictionary<string, global::Program.MyClass2>? temp13 = instance.MyComplexDictionary;
                temp13 ??= new global::System.Collections.Generic.Dictionary<string, global::Program.MyClass2>();
                BindCore(section11, ref temp13, defaultValueIfNotFound: false, binderOptions);
                instance.MyComplexDictionary = temp13;
            }
            else
            {
                instance.MyComplexDictionary = instance.MyComplexDictionary;
            }
        }

        /// <summary>Tries to get the configuration value for the specified key.</summary>
        public static bool TryGetConfigurationValue(IConfiguration configuration, string key, out string? value)
        {
            if (configuration is ConfigurationSection section)
            {
                return section.TryGetValue(key, out value);
            }
        
            value = key != null ? configuration[key] : configuration is IConfigurationSection sec ? sec.Value : null;
            return value != null;
        }


        /// <summary>If required by the binder options, validates that there are no unknown keys in the input configuration object.</summary>
        public static void ValidateConfigurationKeys(Type type, Lazy<HashSet<string>> keys, IConfiguration configuration, BinderOptions? binderOptions)
        {
            if (binderOptions?.ErrorOnUnknownConfiguration is true)
            {
                List<string>? temp = null;
        
                foreach (IConfigurationSection section in configuration.GetChildren())
                {
                    if (!keys.Value.Contains(section.Key))
                    {
                        (temp ??= new List<string>()).Add($"'{section.Key}'");
                    }
                }
        
                if (temp is not null)
                {
                    throw new InvalidOperationException($"'ErrorOnUnknownConfiguration' was set on the provided BinderOptions, but the following properties were not found on the instance of {type}: {string.Join(", ", temp)}");
                }
            }
        }

        public static IConfiguration? AsConfigWithChildren(IConfiguration configuration)
        {
            foreach (IConfigurationSection _ in configuration.GetChildren())
            {
                return configuration;
            }
            return null;
        }

        public static int ParseInt(string value, string? path)
        {
            try
            {
                return int.Parse(value, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value '{value ?? "null"}' at '{path}' to type '{typeof(int)}'.", exception);
            }
        }
        #endregion Core binding extensions.
    }
}
