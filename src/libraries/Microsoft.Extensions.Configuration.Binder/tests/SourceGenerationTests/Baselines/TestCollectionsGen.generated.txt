// <auto-generated/>
#nullable enable

internal static class GeneratedConfigurationBinder
{
    public static T? Get<T>(this global::Microsoft.Extensions.Configuration.IConfiguration configuration) => (T?)(global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.Helpers.GetCore(configuration, typeof(T), configureActions: null) ?? default(T));
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using System;
    using System.Globalization;
    using Microsoft.Extensions.Configuration;
    using System.Collections.Generic;

    internal static class Helpers
    {
        public static object? GetCore(this IConfiguration configuration, Type type, Action<BinderOptions>? configureActions)
        {
            if (configuration is null)
            {
                throw new ArgumentNullException(nameof(configuration));
            }

            BinderOptions? binderOptions = GetBinderOptions(configureActions);

            if (!HasValueOrChildren(configuration))
            {
                return null;
            }

            if (type == typeof(Program.MyClassWithCustomCollections))
            {
                var obj = new Program.MyClassWithCustomCollections();
                BindCore(configuration, ref obj, binderOptions);
                return obj;
            }

            throw new global::System.NotSupportedException($"Unable to bind to type '{type}': generator did not detect the type as input.");
        }

        public static void BindCore(IConfiguration configuration, ref Program.CustomDictionary<string, int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                string key = section.Key;
                int element;
                if (section.Value is string stringValue1)
                {
                    element = ParseInt(stringValue1, () => section.Path);
                    obj[key] = element;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Program.CustomList obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue2)
                {
                    obj.Add(stringValue2);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref List<int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                int element;
                if (section.Value is string stringValue3)
                {
                    element = ParseInt(stringValue3, () => section.Path);
                    obj.Add(element);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref ICollection<int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                int element;
                if (section.Value is string stringValue4)
                {
                    element = ParseInt(stringValue4, () => section.Path);
                    obj.Add(element);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref IReadOnlyList<int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            if (obj is not ICollection<int> temp)
            {
                return;
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                int element;
                if (section.Value is string stringValue5)
                {
                    element = ParseInt(stringValue5, () => section.Path);
                    temp.Add(element);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Program.MyClassWithCustomCollections obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            List<string>? temp = null;
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                switch (section.Key)
                {
                    case "CustomDictionary":
                    {
                        if (HasChildren(section))
                        {
                            Program.CustomDictionary<string, int> temp6 = obj.CustomDictionary;
                            temp6 ??= new Program.CustomDictionary<string, int>();
                            BindCore(section, ref temp6, binderOptions);
                            obj.CustomDictionary = temp6;
                        }
                    }
                    break;
                    case "CustomList":
                    {
                        if (HasChildren(section))
                        {
                            Program.CustomList temp7 = obj.CustomList;
                            temp7 ??= new Program.CustomList();
                            BindCore(section, ref temp7, binderOptions);
                            obj.CustomList = temp7;
                        }
                    }
                    break;
                    case "ICustomDictionary":
                    {
                    }
                    break;
                    case "CustomCollection":
                    {
                    }
                    break;
                    case "ReadOnlyList":
                    {
                        if (HasChildren(section))
                        {
                            IReadOnlyList<int> temp8 = obj.ReadOnlyList;
                            if (temp8 is null)
                            {
                                temp8 = new List<int>();
                            }
                            else
                            {
                                temp8 = new List<int>(temp8);
                            }
                            BindCore(section, ref temp8, binderOptions);
                            obj.ReadOnlyList = temp8;
                        }
                    }
                    break;
                    case "ReadOnlyDictionary":
                    {
                    }
                    break;
                    default:
                    {
                        if (binderOptions?.ErrorOnUnknownConfiguration == true)
                        {
                            (temp ??= new List<string>()).Add($"'{section.Key}'");
                        }
                    }
                    break;
                }
            }

            if (temp is not null)
            {
                throw new InvalidOperationException($"'ErrorOnUnknownConfiguration' was set on the provided BinderOptions, but the following properties were not found on the instance of {typeof(Program.MyClassWithCustomCollections)}: {string.Join(", ", temp)}");
            }
        }

        public static bool HasValueOrChildren(IConfiguration configuration)
        {
            if ((configuration as IConfigurationSection)?.Value is not null)
            {
                return true;
            }
            return HasChildren(configuration);
        }

        public static bool HasChildren(IConfiguration configuration)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                return true;
            }
            return false;
        }

        public static int ParseInt(string stringValue, Func<string?> getPath)
        {
            try
            {
                return int.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(int)}'.", exception);
            }
        }
    }
}
