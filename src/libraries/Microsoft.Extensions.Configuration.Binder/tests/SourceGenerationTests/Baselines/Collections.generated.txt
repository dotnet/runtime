// <auto-generated/>
#nullable enable

/// <summary>Generated helper providing an AOT and linking compatible implementation for configuration binding.</summary>
internal static class GeneratedConfigurationBinder
{
    /// <summary>Attempts to bind the configuration instance to a new instance of type T.</summary>
    public static T? Get<T>(this global::Microsoft.Extensions.Configuration.IConfiguration configuration) => (T?)(global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.CoreBindingHelper.GetCore(configuration, typeof(T), configureOptions: null) ?? default(T));
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using Microsoft.Extensions.Configuration;
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;

    /// <summary>Provide core binding logic.</summary>
    internal static class CoreBindingHelper
    {
        public static object? GetCore(this IConfiguration configuration, Type type, Action<BinderOptions>? configureOptions)
        {
            if (configuration is null)
            {
                throw new ArgumentNullException(nameof(configuration));
            }

            BinderOptions? binderOptions = GetBinderOptions(configureOptions);

            if (!HasValueOrChildren(configuration))
            {
                return null;
            }

            if (type == typeof(Program.MyClassWithCustomCollections))
            {
                var obj = new Program.MyClassWithCustomCollections();
                BindCore(configuration, ref obj, binderOptions);
                return obj;
            }

            throw new global::System.NotSupportedException($"Unable to bind to type '{type}': generator did not detect the type as input.");
        }

        public static void BindCore(IConfiguration configuration, ref Program.CustomDictionary<string, int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue2)
                {
                    obj[section.Key!] = ParseInt(stringValue2, () => section.Path)!;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Program.CustomList obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue3)
                {
                    obj.Add(stringValue3!);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref IReadOnlyList<int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            if (obj is not ICollection<int> temp)
            {
                return;
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue4)
                {
                    temp.Add(ParseInt(stringValue4, () => section.Path)!);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref IReadOnlyDictionary<string, int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            if (obj is not IDictionary<string, int> temp)
            {
                return;
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue6)
                {
                    temp[section.Key!] = ParseInt(stringValue6, () => section.Path)!;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Program.MyClassWithCustomCollections obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            List<string>? temp = null;
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                switch (section.Key)
                {
                    case "CustomDictionary":
                        {
                            if (HasChildren(section))
                            {
                                Program.CustomDictionary<string, int> temp7 = obj.CustomDictionary;
                                temp7 ??= new Program.CustomDictionary<string, int>();
                                BindCore(section, ref temp7, binderOptions);
                                obj.CustomDictionary = temp7;
                            }
                        }
                        break;
                    case "CustomList":
                        {
                            if (HasChildren(section))
                            {
                                Program.CustomList temp8 = obj.CustomList;
                                temp8 ??= new Program.CustomList();
                                BindCore(section, ref temp8, binderOptions);
                                obj.CustomList = temp8;
                            }
                        }
                        break;
                    case "IReadOnlyList":
                        {
                            if (HasChildren(section))
                            {
                                IReadOnlyList<int> temp9 = obj.IReadOnlyList;
                                temp9 = temp9 is null ? new List<int>() : new List<int>(temp9);
                                BindCore(section, ref temp9, binderOptions);
                                obj.IReadOnlyList = temp9;
                            }
                        }
                        break;
                    case "IReadOnlyDictionary":
                        {
                            if (HasChildren(section))
                            {
                                IReadOnlyDictionary<string, int> temp10 = obj.IReadOnlyDictionary;
                                temp10 = temp10 is null ? new Dictionary<string, int>() : temp10.ToDictionary(pair => pair.Key, pair => pair.Value);
                                BindCore(section, ref temp10, binderOptions);
                                obj.IReadOnlyDictionary = temp10;
                            }
                        }
                        break;
                    default:
                        {
                            if (binderOptions?.ErrorOnUnknownConfiguration == true)
                            {
                                (temp ??= new List<string>()).Add($"'{section.Key}'");
                            }
                        }
                        break;
                }
            }

            if (temp is not null)
            {
                throw new InvalidOperationException($"'ErrorOnUnknownConfiguration' was set on the provided BinderOptions, but the following properties were not found on the instance of {typeof(Program.MyClassWithCustomCollections)}: {string.Join(", ", temp)}");
            }
        }

        public static bool HasValueOrChildren(IConfiguration configuration)
        {
            if ((configuration as IConfigurationSection)?.Value is not null)
            {
                return true;
            }
            return HasChildren(configuration);
        }

        public static bool HasChildren(IConfiguration configuration)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                return true;
            }
            return false;
        }

        public static BinderOptions? GetBinderOptions(Action<BinderOptions>? configureOptions)
        {
            if (configureOptions is null)
            {
                return null;
            }
            BinderOptions binderOptions = new();
            configureOptions(binderOptions);
            if (binderOptions.BindNonPublicProperties)
            {
                throw new global::System.NotSupportedException($"The configuration binding source generator does not support 'BinderOptions.BindNonPublicProperties'.");
            }
            return binderOptions;
        }

        public static int ParseInt(string stringValue, Func<string?> getPath)
        {
            try
            {
                return int.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(int)}'.", exception);
            }
        }
    }
}
