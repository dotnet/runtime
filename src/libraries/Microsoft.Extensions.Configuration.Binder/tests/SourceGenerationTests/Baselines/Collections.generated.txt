// <auto-generated/>
#nullable enable
#pragma warning disable CS0612, CS0618 // Suppress warnings about [Obsolete] member usage in generated code.

/// <summary>Generated helper providing an AOT and linking compatible implementation for configuration binding.</summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "42.42.42.42")]
internal static class GeneratedConfigurationBinder
{
    /// <summary>Attempts to bind the configuration instance to a new instance of type T.</summary>
    public static T? Get<T>(this global::Microsoft.Extensions.Configuration.IConfiguration configuration) => (T?)(global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.CoreBindingHelper.GetCore(configuration, typeof(T), configureOptions: null) ?? default(T));
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using Microsoft.Extensions.Configuration;
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;

    /// <summary>Provide core binding logic.</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "42.42.42.42")]
    file static class CoreBindingHelper
    {
        private readonly static Lazy<HashSet<string>> s_configKeys_ProgramMyClassWithCustomCollections = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "CustomDictionary", "CustomList", "IReadOnlyList", "IReadOnlyDictionary" });

        public static object? GetCore(this IConfiguration configuration, Type type, Action<BinderOptions>? configureOptions)
        {
            if (configuration is null)
            {
                throw new ArgumentNullException(nameof(configuration));
            }

            BinderOptions? binderOptions = GetBinderOptions(configureOptions);

            if (!HasValueOrChildren(configuration))
            {
                return null;
            }

            if (type == typeof(Program.MyClassWithCustomCollections))
            {
                var obj = new Program.MyClassWithCustomCollections();
                BindCore(configuration, ref obj, binderOptions);
                return obj;
            }

            throw new global::System.NotSupportedException($"Unable to bind to type '{type}': generator did not detect the type as input.");
        }

        public static void BindCore(IConfiguration configuration, ref Program.CustomDictionary<string, int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue1)
                {
                    obj[section.Key!] = ParseInt(stringValue1, () => section.Path)!;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Program.CustomList obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue2)
                {
                    obj.Add(stringValue2!);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref List<int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue3)
                {
                    obj.Add(ParseInt(stringValue3, () => section.Path)!);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref ICollection<int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue4)
                {
                    obj.Add(ParseInt(stringValue4, () => section.Path)!);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref IReadOnlyList<int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            if (obj is not ICollection<int> temp)
            {
                return;
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue5)
                {
                    temp.Add(ParseInt(stringValue5, () => section.Path)!);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Dictionary<string, int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue6)
                {
                    obj[section.Key!] = ParseInt(stringValue6, () => section.Path)!;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref IDictionary<string, int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue7)
                {
                    obj[section.Key!] = ParseInt(stringValue7, () => section.Path)!;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref IReadOnlyDictionary<string, int> obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            if (obj is not IDictionary<string, int> temp)
            {
                return;
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string stringValue8)
                {
                    temp[section.Key!] = ParseInt(stringValue8, () => section.Path)!;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Program.MyClassWithCustomCollections obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            ValidateConfigurationKeys(typeof(Program.MyClassWithCustomCollections), s_configKeys_ProgramMyClassWithCustomCollections.Value, configuration, binderOptions);

            if (AsConfigWithChildren(configuration.GetSection("CustomDictionary")) is IConfigurationSection section9)
            {
                Program.CustomDictionary<string, int> temp11 = obj.CustomDictionary;
                temp11 ??= new Program.CustomDictionary<string, int>();
                BindCore(section9, ref temp11, binderOptions);
                obj.CustomDictionary = temp11;
            }

            if (AsConfigWithChildren(configuration.GetSection("CustomList")) is IConfigurationSection section12)
            {
                Program.CustomList temp14 = obj.CustomList;
                temp14 ??= new Program.CustomList();
                BindCore(section12, ref temp14, binderOptions);
                obj.CustomList = temp14;
            }

            if (AsConfigWithChildren(configuration.GetSection("IReadOnlyList")) is IConfigurationSection section15)
            {
                IReadOnlyList<int> temp17 = obj.IReadOnlyList;
                temp17 = temp17 is null ? new List<int>() : new List<int>(temp17);
                BindCore(section15, ref temp17, binderOptions);
                obj.IReadOnlyList = temp17;
            }

            if (AsConfigWithChildren(configuration.GetSection("IReadOnlyDictionary")) is IConfigurationSection section18)
            {
                IReadOnlyDictionary<string, int> temp20 = obj.IReadOnlyDictionary;
                temp20 = temp20 is null ? new Dictionary<string, int>() : temp20.ToDictionary(pair => pair.Key, pair => pair.Value);
                BindCore(section18, ref temp20, binderOptions);
                obj.IReadOnlyDictionary = temp20;
            }
        }

        public static void ValidateConfigurationKeys(Type type, HashSet<string> keys, IConfiguration configuration, BinderOptions? binderOptions)
        {
            if (binderOptions?.ErrorOnUnknownConfiguration is true)
            {
                List<string>? temp = null;
                foreach (IConfigurationSection section in configuration.GetChildren())
                {
                    if (!keys.Contains(section.Key))
                    {
                        (temp ??= new List<string>()).Add($"'{section.Key}'");
                    }
                }
                if (temp is not null)
                {
                    throw new InvalidOperationException($"'ErrorOnUnknownConfiguration' was set on the provided BinderOptions, but the following properties were not found on the instance of {type}: {string.Join(", ", temp)}");
                }
            }
        }

        public static bool HasValueOrChildren(IConfiguration configuration)
        {
            if ((configuration as IConfigurationSection)?.Value is not null)
            {
                return true;
            }
            return AsConfigWithChildren(configuration) is not null;
        }

        public static IConfiguration? AsConfigWithChildren(IConfiguration configuration)
        {
            foreach (IConfigurationSection _ in configuration.GetChildren())
            {
                return configuration;
            }
            return null;
        }

        public static BinderOptions? GetBinderOptions(Action<BinderOptions>? configureOptions)
        {
            if (configureOptions is null)
            {
                return null;
            }
            BinderOptions binderOptions = new();
            configureOptions(binderOptions);
            if (binderOptions.BindNonPublicProperties)
            {
                throw new global::System.NotSupportedException($"The configuration binding source generator does not support 'BinderOptions.BindNonPublicProperties'.");
            }
            return binderOptions;
        }

        public static int ParseInt(string stringValue, Func<string?> getPath)
        {
            try
            {
                return int.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(int)}'.", exception);
            }
        }
    }
}
