// <auto-generated/>
#nullable enable

internal static class GeneratedConfigurationBinder
{
    public static void Bind(this global::Microsoft.Extensions.Configuration.IConfiguration configuration, global::Program.MyClass obj) => global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.Helpers.BindCore(configuration, ref obj);
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using System;
    using System.Globalization;
    using Microsoft.Extensions.Configuration;
    using System.Collections.Generic;

    internal static class Helpers
    {
        public static void BindCore(IConfiguration configuration, ref List<int> obj)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (HasValueOrChildren(section))
                {
                    int element;
                    if (section.Value is string stringValue0)
                    {
                        element = ParseInt(stringValue0, () => section.Path);
                        obj.Add(element);
                    }
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Dictionary<string, string> obj)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (HasValueOrChildren(section))
                {
                    string key = section.Key;
                    if (section.Value is string stringValue1)
                    {
                        obj[key] = stringValue1;
                    }
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Program.MyClass2 obj)
        {
        }

        public static void BindCore(IConfiguration configuration, ref Dictionary<string, Program.MyClass2> obj)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (HasValueOrChildren(section))
                {
                    string key = section.Key;
                    if (!(obj.TryGetValue(key, out Program.MyClass2? element) && element is not null))
                    {
                        element = new Program.MyClass2();
                    }
                    BindCore(section, ref element!);
                    obj[key] = element;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref Program.MyClass obj)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            if (configuration["MyString"] is string stringValue3)
            {
                obj.MyString = stringValue3;
            }

            if (configuration["MyInt"] is string stringValue4)
            {
                obj.MyInt = ParseInt(stringValue4, () => configuration.GetSection("MyInt").Path);
            }

            IConfigurationSection section5 = configuration.GetSection("MyList");
            if (HasChildren(section5))
            {
                List<int> temp6 = obj.MyList;
                temp6 ??= new List<int>();
                BindCore(section5, ref temp6);
                obj.MyList = temp6;
            }

            IConfigurationSection section7 = configuration.GetSection("MyDictionary");
            if (HasChildren(section7))
            {
                Dictionary<string, string> temp8 = obj.MyDictionary;
                temp8 ??= new Dictionary<string, string>();
                BindCore(section7, ref temp8);
                obj.MyDictionary = temp8;
            }

            IConfigurationSection section9 = configuration.GetSection("MyComplexDictionary");
            if (HasChildren(section9))
            {
                Dictionary<string, Program.MyClass2> temp10 = obj.MyComplexDictionary;
                temp10 ??= new Dictionary<string, Program.MyClass2>();
                BindCore(section9, ref temp10);
                obj.MyComplexDictionary = temp10;
            }
        }

        public static bool HasChildren(IConfiguration configuration)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                return true;
            }
            return false;
        }

        public static int ParseInt(string stringValue, Func<string?> getPath)
        {
            try
            {
                return int.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(int)}'.", exception);
            }
        }
    }
}
