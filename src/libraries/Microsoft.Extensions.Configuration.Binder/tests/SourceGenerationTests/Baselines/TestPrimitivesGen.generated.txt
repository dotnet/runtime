// <auto-generated/>
#nullable enable

internal static class GeneratedConfigurationBinder
{
    public static void Bind(this global::Microsoft.Extensions.Configuration.IConfiguration configuration, global::Program.MyClass obj) => global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.Helpers.BindCore(configuration, ref obj, binderOptions: null);
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using System;
    using System.Globalization;
    using Microsoft.Extensions.Configuration;

    internal static class Helpers
    {
        public static void BindCore(IConfiguration configuration, ref Program.MyClass obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            List<string>? temp = null;
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                switch (section.Key)
                {
                    case "Prop0":
                    {
                        if (configuration["Prop0"] is string stringValue0)
                        {
                            obj.Prop0 = ParseBool(stringValue0, () => section.Path);
                        }
                    }
                    break;
                    case "Prop1":
                    {
                        if (configuration["Prop1"] is string stringValue1)
                        {
                            obj.Prop1 = ParseByte(stringValue1, () => section.Path);
                        }
                    }
                    break;
                    case "Prop2":
                    {
                        if (configuration["Prop2"] is string stringValue2)
                        {
                            obj.Prop2 = ParseSbyte(stringValue2, () => section.Path);
                        }
                    }
                    break;
                    case "Prop3":
                    {
                        if (configuration["Prop3"] is string stringValue3)
                        {
                            obj.Prop3 = ParseChar(stringValue3, () => section.Path);
                        }
                    }
                    break;
                    case "Prop4":
                    {
                        if (configuration["Prop4"] is string stringValue4)
                        {
                            obj.Prop4 = ParseDouble(stringValue4, () => section.Path);
                        }
                    }
                    break;
                    case "Prop5":
                    {
                        if (configuration["Prop5"] is string stringValue5)
                        {
                            obj.Prop5 = stringValue5;
                        }
                    }
                    break;
                    case "Prop6":
                    {
                        if (configuration["Prop6"] is string stringValue6)
                        {
                            obj.Prop6 = ParseInt(stringValue6, () => section.Path);
                        }
                    }
                    break;
                    case "Prop8":
                    {
                        if (configuration["Prop8"] is string stringValue7)
                        {
                            obj.Prop8 = ParseShort(stringValue7, () => section.Path);
                        }
                    }
                    break;
                    case "Prop9":
                    {
                        if (configuration["Prop9"] is string stringValue8)
                        {
                            obj.Prop9 = ParseLong(stringValue8, () => section.Path);
                        }
                    }
                    break;
                    case "Prop10":
                    {
                        if (configuration["Prop10"] is string stringValue9)
                        {
                            obj.Prop10 = ParseFloat(stringValue9, () => section.Path);
                        }
                    }
                    break;
                    case "Prop13":
                    {
                        if (configuration["Prop13"] is string stringValue10)
                        {
                            obj.Prop13 = ParseUshort(stringValue10, () => section.Path);
                        }
                    }
                    break;
                    case "Prop14":
                    {
                        if (configuration["Prop14"] is string stringValue11)
                        {
                            obj.Prop14 = ParseUint(stringValue11, () => section.Path);
                        }
                    }
                    break;
                    case "Prop15":
                    {
                        if (configuration["Prop15"] is string stringValue12)
                        {
                            obj.Prop15 = ParseUlong(stringValue12, () => section.Path);
                        }
                    }
                    break;
                    case "Prop16":
                    {
                        if (configuration["Prop16"] is string stringValue13)
                        {
                            obj.Prop16 = stringValue13;
                        }
                    }
                    break;
                    case "Prop17":
                    {
                        if (configuration["Prop17"] is string stringValue14)
                        {
                            obj.Prop17 = ParseCultureInfo(stringValue14, () => section.Path);
                        }
                    }
                    break;
                    case "Prop19":
                    {
                        if (configuration["Prop19"] is string stringValue15)
                        {
                            obj.Prop19 = ParseDateTime(stringValue15, () => section.Path);
                        }
                    }
                    break;
                    case "Prop20":
                    {
                        if (configuration["Prop20"] is string stringValue16)
                        {
                            obj.Prop20 = ParseDateTimeOffset(stringValue16, () => section.Path);
                        }
                    }
                    break;
                    case "Prop21":
                    {
                        if (configuration["Prop21"] is string stringValue17)
                        {
                            obj.Prop21 = ParseDecimal(stringValue17, () => section.Path);
                        }
                    }
                    break;
                    case "Prop23":
                    {
                        if (configuration["Prop23"] is string stringValue18)
                        {
                            obj.Prop23 = ParseInt(stringValue18, () => section.Path);
                        }
                    }
                    break;
                    case "Prop24":
                    {
                        if (configuration["Prop24"] is string stringValue19)
                        {
                            obj.Prop24 = ParseDateTime(stringValue19, () => section.Path);
                        }
                    }
                    break;
                    case "Prop25":
                    {
                        if (configuration["Prop25"] is string stringValue20)
                        {
                            obj.Prop25 = ParseUri(stringValue20, () => section.Path);
                        }
                    }
                    break;
                    case "Prop26":
                    {
                        if (configuration["Prop26"] is string stringValue21)
                        {
                            obj.Prop26 = ParseVersion(stringValue21, () => section.Path);
                        }
                    }
                    break;
                    case "Prop27":
                    {
                        if (configuration["Prop27"] is string stringValue22)
                        {
                            obj.Prop27 = ParseDayOfWeek(stringValue22, () => section.Path);
                        }
                    }
                    break;
                    case "Prop7":
                    {
                        if (configuration["Prop7"] is string stringValue23)
                        {
                            obj.Prop7 = ParseInt128(stringValue23, () => section.Path);
                        }
                    }
                    break;
                    case "Prop11":
                    {
                        if (configuration["Prop11"] is string stringValue24)
                        {
                            obj.Prop11 = ParseHalf(stringValue24, () => section.Path);
                        }
                    }
                    break;
                    case "Prop12":
                    {
                        if (configuration["Prop12"] is string stringValue25)
                        {
                            obj.Prop12 = ParseUInt128(stringValue25, () => section.Path);
                        }
                    }
                    break;
                    case "Prop18":
                    {
                        if (configuration["Prop18"] is string stringValue26)
                        {
                            obj.Prop18 = ParseDateOnly(stringValue26, () => section.Path);
                        }
                    }
                    break;
                    case "Prop22":
                    {
                        if (configuration["Prop22"] is string stringValue27)
                        {
                            obj.Prop22 = ParseByteArray(stringValue27, () => section.Path);
                        }
                    }
                    break;
                    default:
                    {
                        if (binderOptions?.ErrorOnUnknownConfiguration == true)
                        {
                            (temp ??= new List<string>()).Add($"'{section.Key}'");
                        }
                    }
                    break;
                }
            }

            if (temp is not null)
            {
                throw new InvalidOperationException($"'ErrorOnUnknownConfiguration' was set on the provided BinderOptions, but the following properties were not found on the instance of {typeof(Program.MyClass)}: {string.Join(", ", temp)}");
            }
        }

        public static bool ParseBool(string stringValue, Func<string?> getPath)
        {
            try
            {
                return bool.Parse(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(bool)}'.", exception);
            }
        }

        public static byte ParseByte(string stringValue, Func<string?> getPath)
        {
            try
            {
                return byte.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(byte)}'.", exception);
            }
        }

        public static sbyte ParseSbyte(string stringValue, Func<string?> getPath)
        {
            try
            {
                return sbyte.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(sbyte)}'.", exception);
            }
        }

        public static char ParseChar(string stringValue, Func<string?> getPath)
        {
            try
            {
                return char.Parse(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(char)}'.", exception);
            }
        }

        public static double ParseDouble(string stringValue, Func<string?> getPath)
        {
            try
            {
                return double.Parse(stringValue, NumberStyles.Float, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(double)}'.", exception);
            }
        }

        public static int ParseInt(string stringValue, Func<string?> getPath)
        {
            try
            {
                return int.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(int)}'.", exception);
            }
        }

        public static short ParseShort(string stringValue, Func<string?> getPath)
        {
            try
            {
                return short.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(short)}'.", exception);
            }
        }

        public static long ParseLong(string stringValue, Func<string?> getPath)
        {
            try
            {
                return long.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(long)}'.", exception);
            }
        }

        public static float ParseFloat(string stringValue, Func<string?> getPath)
        {
            try
            {
                return float.Parse(stringValue, NumberStyles.Float, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(float)}'.", exception);
            }
        }

        public static ushort ParseUshort(string stringValue, Func<string?> getPath)
        {
            try
            {
                return ushort.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(ushort)}'.", exception);
            }
        }

        public static uint ParseUint(string stringValue, Func<string?> getPath)
        {
            try
            {
                return uint.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(uint)}'.", exception);
            }
        }

        public static ulong ParseUlong(string stringValue, Func<string?> getPath)
        {
            try
            {
                return ulong.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(ulong)}'.", exception);
            }
        }

        public static CultureInfo ParseCultureInfo(string stringValue, Func<string?> getPath)
        {
            try
            {
                return CultureInfo.GetCultureInfo(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(CultureInfo)}'.", exception);
            }
        }

        public static DateTime ParseDateTime(string stringValue, Func<string?> getPath)
        {
            try
            {
                return DateTime.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(DateTime)}'.", exception);
            }
        }

        public static DateTimeOffset ParseDateTimeOffset(string stringValue, Func<string?> getPath)
        {
            try
            {
                return DateTimeOffset.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(DateTimeOffset)}'.", exception);
            }
        }

        public static decimal ParseDecimal(string stringValue, Func<string?> getPath)
        {
            try
            {
                return decimal.Parse(stringValue, NumberStyles.Float, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(decimal)}'.", exception);
            }
        }

        public static TimeSpan ParseTimeSpan(string stringValue, Func<string?> getPath)
        {
            try
            {
                return TimeSpan.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(TimeSpan)}'.", exception);
            }
        }

        public static Guid ParseGuid(string stringValue, Func<string?> getPath)
        {
            try
            {
                return Guid.Parse(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(Guid)}'.", exception);
            }
        }

        public static Uri ParseUri(string stringValue, Func<string?> getPath)
        {
            try
            {
                return new Uri(stringValue, UriKind.RelativeOrAbsolute);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(Uri)}'.", exception);
            }
        }

        public static Version ParseVersion(string stringValue, Func<string?> getPath)
        {
            try
            {
                return Version.Parse(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(Version)}'.", exception);
            }
        }

        public static DayOfWeek ParseDayOfWeek(string stringValue, Func<string?> getPath)
        {
            try
            {
                return (DayOfWeek)Enum.Parse(typeof(DayOfWeek), stringValue, ignoreCase: true);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(DayOfWeek)}'.", exception);
            }
        }

        public static Int128 ParseInt128(string stringValue, Func<string?> getPath)
        {
            try
            {
                return Int128.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(Int128)}'.", exception);
            }
        }

        public static Half ParseHalf(string stringValue, Func<string?> getPath)
        {
            try
            {
                return Half.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(Half)}'.", exception);
            }
        }

        public static UInt128 ParseUInt128(string stringValue, Func<string?> getPath)
        {
            try
            {
                return UInt128.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(UInt128)}'.", exception);
            }
        }

        public static DateOnly ParseDateOnly(string stringValue, Func<string?> getPath)
        {
            try
            {
                return DateOnly.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(DateOnly)}'.", exception);
            }
        }

        public static TimeOnly ParseTimeOnly(string stringValue, Func<string?> getPath)
        {
            try
            {
                return TimeOnly.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(TimeOnly)}'.", exception);
            }
        }

        public static byte[] ParseByteArray(string stringValue, Func<string?> getPath)
        {
            try
            {
                return Convert.FromBase64String(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(byte[])}'.", exception);
            }
        }
    }
}
