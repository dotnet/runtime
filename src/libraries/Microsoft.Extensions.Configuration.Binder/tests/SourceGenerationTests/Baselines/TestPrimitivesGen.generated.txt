// <auto-generated/>
#nullable enable

internal static class GeneratedConfigurationBinder
{
    public static T? Get<T>(this global::Microsoft.Extensions.Configuration.IConfiguration configuration)
    {
        if (configuration is null)
        {
            throw new global::System.ArgumentNullException(nameof(configuration));
        }

        if (!global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.Helpers.HasValueOrChildren(configuration))
        {
            return default;
        }

        if (typeof(T) == typeof(global::Program.MyClass))
        {
            var obj = new global::Program.MyClass();
            global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.Helpers.BindCore(configuration, ref obj);
            return (T)(object)obj;
        }

        throw new global::System.NotSupportedException($"Unable to bind to type '{typeof(T)}': 'Generator parser did not detect the type as input'");
    }
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using System;
    using System.Globalization;
    using Microsoft.Extensions.Configuration;

    internal static class Helpers
    {
        public static void BindCore(IConfiguration configuration, ref Program.MyClass obj)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            if (configuration["MyString"] is string stringValue1)
            {
                obj.MyString = stringValue1;
            }

            if (configuration["MyInt128"] is string stringValue2)
            {
                try
                {
                    obj.MyInt128 = Int128.Parse(stringValue2, CultureInfo.InvariantCulture);
                }
                catch (Exception exception)
                {
                    throw new InvalidOperationException($"Failed to convert configuration value at '{configuration.GetSection("MyInt128").Path}' to type '{typeof(Int128)}'.", exception);
                }
            }

            if (configuration["MyInt"] is string stringValue3)
            {
                try
                {
                    obj.MyInt = int.Parse(stringValue3, NumberStyles.Integer, CultureInfo.InvariantCulture);
                }
                catch (Exception exception)
                {
                    throw new InvalidOperationException($"Failed to convert configuration value at '{configuration.GetSection("MyInt").Path}' to type '{typeof(int)}'.", exception);
                }
            }

            if (configuration["MyUInt128"] is string stringValue4)
            {
                try
                {
                    obj.MyUInt128 = UInt128.Parse(stringValue4, CultureInfo.InvariantCulture);
                }
                catch (Exception exception)
                {
                    throw new InvalidOperationException($"Failed to convert configuration value at '{configuration.GetSection("MyUInt128").Path}' to type '{typeof(UInt128)}'.", exception);
                }
            }

            if (configuration["MyLong"] is string stringValue5)
            {
                try
                {
                    obj.MyLong = long.Parse(stringValue5, NumberStyles.Integer, CultureInfo.InvariantCulture);
                }
                catch (Exception exception)
                {
                    throw new InvalidOperationException($"Failed to convert configuration value at '{configuration.GetSection("MyLong").Path}' to type '{typeof(long)}'.", exception);
                }
            }

            if (configuration["MyUri"] is string stringValue6)
            {
                Uri.TryCreate(stringValue6, UriKind.RelativeOrAbsolute, out Uri? temp7);
                if (temp7 is not null)
                {
                    obj.MyUri = temp7;
                }
            }

            if (configuration["MyCultureInfo"] is string stringValue8)
            {
                try
                {
                    obj.MyCultureInfo = CultureInfo.GetCultureInfoByIetfLanguageTag(stringValue8);
                }
                catch (Exception exception)
                {
                    throw new InvalidOperationException($"Failed to convert configuration value at '{configuration.GetSection("MyCultureInfo").Path}' to type '{typeof(CultureInfo)}'.", exception);
                }
            }

            if (configuration["MyHalf"] is string stringValue9)
            {
                try
                {
                    obj.MyHalf = Half.Parse(stringValue9, CultureInfo.InvariantCulture);
                }
                catch (Exception exception)
                {
                    throw new InvalidOperationException($"Failed to convert configuration value at '{configuration.GetSection("MyHalf").Path}' to type '{typeof(Half)}'.", exception);
                }
            }

            if (configuration["MyBool"] is string stringValue10)
            {
                try
                {
                    obj.MyBool = bool.Parse(stringValue10);
                }
                catch (Exception exception)
                {
                    throw new InvalidOperationException($"Failed to convert configuration value at '{configuration.GetSection("MyBool").Path}' to type '{typeof(bool)}'.", exception);
                }
            }

            if (configuration["MyObject"] is string stringValue11)
            {
                obj.MyObject = stringValue11;
            }

            if (configuration["MyByteArray"] is string stringValue12)
            {
                try
                {
                    obj.MyByteArray = Convert.FromBase64String(stringValue12);
                }
                catch (Exception exception)
                {
                    throw new InvalidOperationException($"Failed to convert configuration value at '{configuration.GetSection("MyByteArray").Path}' to type '{typeof(byte[])}'.", exception);
                }
            }
        }

        public static bool HasValueOrChildren(IConfiguration configuration)
        {
            if ((configuration as IConfigurationSection)?.Value is not null)
            {
                return true;
            }
            return HasChildren(configuration);
        }

        public static bool HasChildren(IConfiguration configuration)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                return true;
            }
            return false;
        }
    }
}
