// <auto-generated/>
#nullable enable
#pragma warning disable CS0612, CS0618 // Suppress warnings about [Obsolete] member usage in generated code.

/// <summary>Generated helper providing an AOT and linking compatible implementation for configuration binding.</summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "42.42.42.42")]
internal static class GeneratedConfigurationBinder
{
    /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
    public static void Bind(this global::Microsoft.Extensions.Configuration.IConfiguration configuration, global::Program.MyClass obj) => global::Microsoft.Extensions.Configuration.Binder.SourceGeneration.CoreBindingHelper.BindCore(configuration, ref obj, binderOptions: null);
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using Microsoft.Extensions.Configuration;
    using System;
    using System.Collections.Generic;
    using System.Globalization;

    /// <summary>Provide core binding logic.</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "42.42.42.42")]
    file static class CoreBindingHelper
    {
        private readonly static Lazy<HashSet<string>> s_configKeys_ProgramMyClass = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Prop0", "Prop1", "Prop2", "Prop3", "Prop4", "Prop5", "Prop6", "Prop8", "Prop9", "Prop10", "Prop13", "Prop14", "Prop15", "Prop16", "Prop17", "Prop19", "Prop20", "Prop21", "Prop23", "Prop24", "Prop25", "Prop26", "Prop27", "Prop7", "Prop11", "Prop12", "Prop18", "Prop22" });

        public static void BindCore(IConfiguration configuration, ref Program.MyClass obj, BinderOptions? binderOptions)
        {
            if (obj is null)
            {
                throw new ArgumentNullException(nameof(obj));
            }

            ValidateConfigurationKeys(typeof(Program.MyClass), s_configKeys_ProgramMyClass.Value, configuration, binderOptions);

            if (configuration["Prop0"] is string stringValue0)
            {
                obj.Prop0 = ParseBool(stringValue0, () => configuration.GetSection("Prop0").Path)!;
            }

            if (configuration["Prop1"] is string stringValue1)
            {
                obj.Prop1 = ParseByte(stringValue1, () => configuration.GetSection("Prop1").Path)!;
            }

            if (configuration["Prop2"] is string stringValue2)
            {
                obj.Prop2 = ParseSbyte(stringValue2, () => configuration.GetSection("Prop2").Path)!;
            }

            if (configuration["Prop3"] is string stringValue3)
            {
                obj.Prop3 = ParseChar(stringValue3, () => configuration.GetSection("Prop3").Path)!;
            }

            if (configuration["Prop4"] is string stringValue4)
            {
                obj.Prop4 = ParseDouble(stringValue4, () => configuration.GetSection("Prop4").Path)!;
            }

            obj.Prop5 = configuration["Prop5"]!;

            if (configuration["Prop6"] is string stringValue5)
            {
                obj.Prop6 = ParseInt(stringValue5, () => configuration.GetSection("Prop6").Path)!;
            }

            if (configuration["Prop8"] is string stringValue6)
            {
                obj.Prop8 = ParseShort(stringValue6, () => configuration.GetSection("Prop8").Path)!;
            }

            if (configuration["Prop9"] is string stringValue7)
            {
                obj.Prop9 = ParseLong(stringValue7, () => configuration.GetSection("Prop9").Path)!;
            }

            if (configuration["Prop10"] is string stringValue8)
            {
                obj.Prop10 = ParseFloat(stringValue8, () => configuration.GetSection("Prop10").Path)!;
            }

            if (configuration["Prop13"] is string stringValue9)
            {
                obj.Prop13 = ParseUshort(stringValue9, () => configuration.GetSection("Prop13").Path)!;
            }

            if (configuration["Prop14"] is string stringValue10)
            {
                obj.Prop14 = ParseUint(stringValue10, () => configuration.GetSection("Prop14").Path)!;
            }

            if (configuration["Prop15"] is string stringValue11)
            {
                obj.Prop15 = ParseUlong(stringValue11, () => configuration.GetSection("Prop15").Path)!;
            }

            obj.Prop16 = configuration["Prop16"]!;

            if (configuration["Prop17"] is string stringValue12)
            {
                obj.Prop17 = ParseCultureInfo(stringValue12, () => configuration.GetSection("Prop17").Path)!;
            }

            if (configuration["Prop19"] is string stringValue13)
            {
                obj.Prop19 = ParseDateTime(stringValue13, () => configuration.GetSection("Prop19").Path)!;
            }

            if (configuration["Prop20"] is string stringValue14)
            {
                obj.Prop20 = ParseDateTimeOffset(stringValue14, () => configuration.GetSection("Prop20").Path)!;
            }

            if (configuration["Prop21"] is string stringValue15)
            {
                obj.Prop21 = ParseDecimal(stringValue15, () => configuration.GetSection("Prop21").Path)!;
            }

            if (configuration["Prop23"] is string stringValue16)
            {
                obj.Prop23 = ParseInt(stringValue16, () => configuration.GetSection("Prop23").Path)!;
            }

            if (configuration["Prop24"] is string stringValue17)
            {
                obj.Prop24 = ParseDateTime(stringValue17, () => configuration.GetSection("Prop24").Path)!;
            }

            if (configuration["Prop25"] is string stringValue18)
            {
                obj.Prop25 = ParseUri(stringValue18, () => configuration.GetSection("Prop25").Path)!;
            }

            if (configuration["Prop26"] is string stringValue19)
            {
                obj.Prop26 = ParseVersion(stringValue19, () => configuration.GetSection("Prop26").Path)!;
            }

            if (configuration["Prop27"] is string stringValue20)
            {
                obj.Prop27 = ParseDayOfWeek(stringValue20, () => configuration.GetSection("Prop27").Path)!;
            }

            if (configuration["Prop7"] is string stringValue21)
            {
                obj.Prop7 = ParseInt128(stringValue21, () => configuration.GetSection("Prop7").Path)!;
            }

            if (configuration["Prop11"] is string stringValue22)
            {
                obj.Prop11 = ParseHalf(stringValue22, () => configuration.GetSection("Prop11").Path)!;
            }

            if (configuration["Prop12"] is string stringValue23)
            {
                obj.Prop12 = ParseUInt128(stringValue23, () => configuration.GetSection("Prop12").Path)!;
            }

            if (configuration["Prop18"] is string stringValue24)
            {
                obj.Prop18 = ParseDateOnly(stringValue24, () => configuration.GetSection("Prop18").Path)!;
            }

            if (configuration["Prop22"] is string stringValue25)
            {
                obj.Prop22 = ParseByteArray(stringValue25, () => configuration.GetSection("Prop22").Path)!;
            }
        }

        public static void ValidateConfigurationKeys(Type type, HashSet<string> keys, IConfiguration configuration, BinderOptions? binderOptions)
        {
            if (binderOptions?.ErrorOnUnknownConfiguration is true)
            {
                List<string>? temp = null;
                foreach (IConfigurationSection section in configuration.GetChildren())
                {
                    if (!keys.Contains(section.Key))
                    {
                        (temp ??= new List<string>()).Add($"'{section.Key}'");
                    }
                }
                if (temp is not null)
                {
                    throw new InvalidOperationException($"'ErrorOnUnknownConfiguration' was set on the provided BinderOptions, but the following properties were not found on the instance of {type}: {string.Join(", ", temp)}");
                }
            }
        }

        public static bool ParseBool(string stringValue, Func<string?> getPath)
        {
            try
            {
                return bool.Parse(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(bool)}'.", exception);
            }
        }

        public static byte ParseByte(string stringValue, Func<string?> getPath)
        {
            try
            {
                return byte.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(byte)}'.", exception);
            }
        }

        public static sbyte ParseSbyte(string stringValue, Func<string?> getPath)
        {
            try
            {
                return sbyte.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(sbyte)}'.", exception);
            }
        }

        public static char ParseChar(string stringValue, Func<string?> getPath)
        {
            try
            {
                return char.Parse(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(char)}'.", exception);
            }
        }

        public static double ParseDouble(string stringValue, Func<string?> getPath)
        {
            try
            {
                return double.Parse(stringValue, NumberStyles.Float, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(double)}'.", exception);
            }
        }

        public static int ParseInt(string stringValue, Func<string?> getPath)
        {
            try
            {
                return int.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(int)}'.", exception);
            }
        }

        public static short ParseShort(string stringValue, Func<string?> getPath)
        {
            try
            {
                return short.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(short)}'.", exception);
            }
        }

        public static long ParseLong(string stringValue, Func<string?> getPath)
        {
            try
            {
                return long.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(long)}'.", exception);
            }
        }

        public static float ParseFloat(string stringValue, Func<string?> getPath)
        {
            try
            {
                return float.Parse(stringValue, NumberStyles.Float, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(float)}'.", exception);
            }
        }

        public static ushort ParseUshort(string stringValue, Func<string?> getPath)
        {
            try
            {
                return ushort.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(ushort)}'.", exception);
            }
        }

        public static uint ParseUint(string stringValue, Func<string?> getPath)
        {
            try
            {
                return uint.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(uint)}'.", exception);
            }
        }

        public static ulong ParseUlong(string stringValue, Func<string?> getPath)
        {
            try
            {
                return ulong.Parse(stringValue, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(ulong)}'.", exception);
            }
        }

        public static CultureInfo ParseCultureInfo(string stringValue, Func<string?> getPath)
        {
            try
            {
                return CultureInfo.GetCultureInfo(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(CultureInfo)}'.", exception);
            }
        }

        public static DateTime ParseDateTime(string stringValue, Func<string?> getPath)
        {
            try
            {
                return DateTime.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(DateTime)}'.", exception);
            }
        }

        public static DateTimeOffset ParseDateTimeOffset(string stringValue, Func<string?> getPath)
        {
            try
            {
                return DateTimeOffset.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(DateTimeOffset)}'.", exception);
            }
        }

        public static decimal ParseDecimal(string stringValue, Func<string?> getPath)
        {
            try
            {
                return decimal.Parse(stringValue, NumberStyles.Float, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(decimal)}'.", exception);
            }
        }

        public static TimeSpan ParseTimeSpan(string stringValue, Func<string?> getPath)
        {
            try
            {
                return TimeSpan.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(TimeSpan)}'.", exception);
            }
        }

        public static Guid ParseGuid(string stringValue, Func<string?> getPath)
        {
            try
            {
                return Guid.Parse(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(Guid)}'.", exception);
            }
        }

        public static Uri ParseUri(string stringValue, Func<string?> getPath)
        {
            try
            {
                return new Uri(stringValue, UriKind.RelativeOrAbsolute);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(Uri)}'.", exception);
            }
        }

        public static Version ParseVersion(string stringValue, Func<string?> getPath)
        {
            try
            {
                return Version.Parse(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(Version)}'.", exception);
            }
        }

        public static DayOfWeek ParseDayOfWeek(string stringValue, Func<string?> getPath)
        {
            try
            {
                return (DayOfWeek)Enum.Parse(typeof(DayOfWeek), stringValue, ignoreCase: true);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(DayOfWeek)}'.", exception);
            }
        }

        public static Int128 ParseInt128(string stringValue, Func<string?> getPath)
        {
            try
            {
                return Int128.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(Int128)}'.", exception);
            }
        }

        public static Half ParseHalf(string stringValue, Func<string?> getPath)
        {
            try
            {
                return Half.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(Half)}'.", exception);
            }
        }

        public static UInt128 ParseUInt128(string stringValue, Func<string?> getPath)
        {
            try
            {
                return UInt128.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(UInt128)}'.", exception);
            }
        }

        public static DateOnly ParseDateOnly(string stringValue, Func<string?> getPath)
        {
            try
            {
                return DateOnly.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(DateOnly)}'.", exception);
            }
        }

        public static TimeOnly ParseTimeOnly(string stringValue, Func<string?> getPath)
        {
            try
            {
                return TimeOnly.Parse(stringValue, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(TimeOnly)}'.", exception);
            }
        }

        public static byte[] ParseByteArray(string stringValue, Func<string?> getPath)
        {
            try
            {
                return Convert.FromBase64String(stringValue);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{getPath()}' to type '{typeof(byte[])}'.", exception);
            }
        }
    }
}
