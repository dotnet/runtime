<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow:test.exe" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::RequirePublicParameterlessConstructor(Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::RequirePublicParameterlessConstructor(Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C2:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C2:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Field:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflectDerived Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::s_requirePublicNestedTypes" />
	<edge mark="1" b="Field:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflectDerived Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::s_requirePublicNestedTypes" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow:test.exe" />
	<edge mark="1" b="Field:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflectDerived Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::s_requirePublicNestedTypes" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflectDerived:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflectDerived:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C3:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C3:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::RequirePrivateMethods(System.Reflection.IReflect)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::RequirePrivateMethods(System.Reflection.IReflect)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C2/Nested:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C2/Nested:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Object System.Object::MemberwiseClone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Void System.Object::Finalize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C2/Nested::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C1::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C3::Foo()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Object System.Object::MemberwiseClone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::Main()" e="Method:System.Void System.Object::Finalize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C3::Foo()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C1::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C1::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C1::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C2/Nested::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C2/Nested:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C2/Nested::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/C2/Nested::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/TestType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/TestType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType::Test()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::.ctor(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::.ctor(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType::Test()" e="Method:System.Reflection.FieldInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::GetFields(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Reflection.FieldInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::GetFields(System.Reflection.BindingFlags)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType::Test()" e="Field:System.Int32 Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/TestType::Field" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/TestType::Field" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/TestType:test.exe" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/TestType::Field" e="TypeDef:System.Int32" />
	<edge b="Method:System.Reflection.FieldInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::GetFields(System.Reflection.BindingFlags)" e="TypeSpec:System.Reflection.FieldInfo[]" />
	<edge mark="1" b="Method:System.Reflection.FieldInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::GetFields(System.Reflection.BindingFlags)" e="TypeDef:System.NotSupportedException" />
	<edge mark="1" b="Method:System.Reflection.FieldInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::GetFields(System.Reflection.BindingFlags)" e="Method:System.Void System.NotSupportedException::.ctor(System.String)" />
	<edge mark="1" b="Method:System.Reflection.FieldInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::GetFields(System.Reflection.BindingFlags)" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Reflection.FieldInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::GetFields(System.Reflection.BindingFlags)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::.ctor(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::.ctor(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::.ctor(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::.ctor(System.Type)" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::_underlyingType" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::_underlyingType" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType:test.exe" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::_underlyingType" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::.ctor(System.Type)" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::_underlyingType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::.ctor(System.Type)" e="Field:System.Reflection.IReflect Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::_underlyingReflect" />
	<edge mark="1" b="Field:System.Reflection.IReflect Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::_underlyingReflect" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType:test.exe" />
	<edge mark="1" b="Field:System.Reflection.IReflect Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::_underlyingReflect" e="TypeDef:System.Reflection.IReflect" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::RequirePrivateMethods(System.Reflection.IReflect)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow::RequirePublicParameterlessConstructor(Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Object System.Reflection.IReflect::InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" e="Method:System.Object Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
	<edge mark="1" b="Method:System.Type System.Reflection.IReflect::get_UnderlyingSystemType()" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::get_UnderlyingSystemType()" />
	<edge mark="1" b="Method:System.Reflection.FieldInfo System.Reflection.IReflect::GetField(System.String,System.Reflection.BindingFlags)" e="Method:System.Reflection.FieldInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetField(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Reflection.MemberInfo[] System.Reflection.IReflect::GetMembers(System.Reflection.BindingFlags)" e="Method:System.Reflection.MemberInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMembers(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Reflection.FieldInfo[] System.Reflection.IReflect::GetFields(System.Reflection.BindingFlags)" e="Method:System.Reflection.FieldInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetFields(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Reflection.PropertyInfo[] System.Reflection.IReflect::GetProperties(System.Reflection.BindingFlags)" e="Method:System.Reflection.PropertyInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetProperties(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo[] System.Reflection.IReflect::GetMethods(System.Reflection.BindingFlags)" e="Method:System.Reflection.MethodInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMethods(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Reflection.FieldInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::GetFields(System.Reflection.BindingFlags)" e="Field:System.Reflection.IReflect Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::_underlyingReflect" />
	<edge mark="1" b="Method:System.Reflection.FieldInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/ReflectOverType/MyReflectOverType::GetFields(System.Reflection.BindingFlags)" e="Method:System.Reflection.FieldInfo[] System.Reflection.IReflect::GetFields(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Reflection.MemberInfo[] System.Reflection.IReflect::GetMember(System.String,System.Reflection.BindingFlags)" e="Method:System.Reflection.MemberInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMember(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo System.Reflection.IReflect::GetMethod(System.String,System.Reflection.BindingFlags)" e="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo System.Reflection.IReflect::GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" e="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
	<edge mark="1" b="Method:System.Reflection.PropertyInfo System.Reflection.IReflect::GetProperty(System.String,System.Reflection.BindingFlags)" e="Method:System.Reflection.PropertyInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetProperty(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Reflection.PropertyInfo System.Reflection.IReflect::GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" e="Method:System.Reflection.PropertyInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
	<edge b="Method:System.Reflection.PropertyInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" e="TypeSpec:System.Type[]" />
	<edge b="Method:System.Reflection.PropertyInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" e="TypeSpec:System.Reflection.ParameterModifier[]" />
	<edge mark="1" b="Method:System.Reflection.PropertyInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Reflection.PropertyInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" e="Method:System.Void System.NotImplementedException::.ctor()" />
	<edge mark="1" b="Method:System.Reflection.PropertyInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetProperty(System.String,System.Reflection.BindingFlags)" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Reflection.PropertyInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetProperty(System.String,System.Reflection.BindingFlags)" e="Method:System.Void System.NotImplementedException::.ctor()" />
	<edge b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" e="TypeSpec:System.Type[]" />
	<edge b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" e="TypeSpec:System.Reflection.ParameterModifier[]" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" e="Method:System.Void System.NotImplementedException::.ctor()" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMethod(System.String,System.Reflection.BindingFlags)" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMethod(System.String,System.Reflection.BindingFlags)" e="Method:System.Void System.NotImplementedException::.ctor()" />
	<edge b="Method:System.Reflection.MemberInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMember(System.String,System.Reflection.BindingFlags)" e="TypeSpec:System.Reflection.MemberInfo[]" />
	<edge mark="1" b="Method:System.Reflection.MemberInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMember(System.String,System.Reflection.BindingFlags)" e="Method:System.Void System.NotImplementedException::.ctor()" />
	<edge b="Method:System.Reflection.MethodInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMethods(System.Reflection.BindingFlags)" e="TypeSpec:System.Reflection.MethodInfo[]" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMethods(System.Reflection.BindingFlags)" e="Method:System.Void System.NotImplementedException::.ctor()" />
	<edge b="Method:System.Reflection.PropertyInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetProperties(System.Reflection.BindingFlags)" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge mark="1" b="Method:System.Reflection.PropertyInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetProperties(System.Reflection.BindingFlags)" e="Method:System.Void System.NotImplementedException::.ctor()" />
	<edge b="Method:System.Reflection.FieldInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetFields(System.Reflection.BindingFlags)" e="TypeSpec:System.Reflection.FieldInfo[]" />
	<edge mark="1" b="Method:System.Reflection.FieldInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetFields(System.Reflection.BindingFlags)" e="Method:System.Void System.NotImplementedException::.ctor()" />
	<edge b="Method:System.Reflection.MemberInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMembers(System.Reflection.BindingFlags)" e="TypeSpec:System.Reflection.MemberInfo[]" />
	<edge mark="1" b="Method:System.Reflection.MemberInfo[] Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetMembers(System.Reflection.BindingFlags)" e="Method:System.Void System.NotImplementedException::.ctor()" />
	<edge mark="1" b="Method:System.Reflection.FieldInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetField(System.String,System.Reflection.BindingFlags)" e="TypeDef:System.Reflection.FieldInfo" />
	<edge mark="1" b="Method:System.Reflection.FieldInfo Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::GetField(System.String,System.Reflection.BindingFlags)" e="Method:System.Void System.NotImplementedException::.ctor()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::get_UnderlyingSystemType()" e="Property:System.Type Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::UnderlyingSystemType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::get_UnderlyingSystemType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::get_UnderlyingSystemType()" e="Method:System.Void System.NotImplementedException::.ctor()" />
	<edge b="Method:System.Object Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" e="TypeSpec:System.Object[]" />
	<edge b="Method:System.Object Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" e="TypeSpec:System.Reflection.ParameterModifier[]" />
	<edge b="Method:System.Object Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" e="TypeSpec:System.String[]" />
	<edge mark="1" b="Method:System.Object Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Object Mono.Linker.Tests.Cases.DataFlow.IReflectDataflow/MyReflect::InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" e="Method:System.Void System.NotImplementedException::.ctor()" />
</dependencies>