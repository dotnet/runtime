<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestGenericArray()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestGenericArray()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestGenericArrayOnGeneric()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestGenericArrayOnGeneric()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParam()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParam()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayCreateInstanceByName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayCreateInstanceByName()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameter()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameter()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameter()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameter()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameter()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameter()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameter()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameter()" e="Method:System.Object System.Reflection.MethodBase::Invoke(System.Object,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameter()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayInAttributeParamElement[]:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayInAttributeParamElement:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayInAttributeParamElement:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Clear(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::get_Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int64 System.Array::get_LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::get_Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::GetLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::GetUpperBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::GetLowerBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Initialize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt; System.Array::AsReadOnly(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Resize(T[]&amp;,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Object System.Array::GetValue(System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Object System.Array::GetValue(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Object System.Array::GetValue(System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Object System.Array::GetValue(System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int64 System.Array::GetLongLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Object System.Array::get_SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Boolean System.Array::get_IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Boolean System.Array::get_IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Boolean System.Array::get_IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Object System.Array::Clone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::BinarySearch(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::BinarySearch(T[],T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:T[] System.Array::Empty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Boolean System.Array::Exists(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Fill(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Fill(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:T System.Array::Find(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:T System.Array::FindLast(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::ForEach(T[],System.Action`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::IndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Reverse(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Reverse(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Reverse(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Reverse(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(System.Array,System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(TKey[],TValue[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(T[],System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Void System.Array::Sort(T[],System.Comparison`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Boolean System.Array::TrueForAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Array::get_MaxLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Collections.IEnumerator System.Array::GetEnumerator()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayInAttributeParameterImpl()" e="TypeDef:System.Void" />
	<edge b="Method:System.Boolean System.Array::TrueForAll(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(T[],System.Comparison`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" e="TypeSpec:TKey[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" e="TypeSpec:TValue[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" e="TypeSpec:TKey[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" e="TypeSpec:TValue[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(T[],System.Collections.Generic.IComparer`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" e="TypeSpec:TKey[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" e="TypeSpec:TValue[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[])" e="TypeSpec:TKey[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[])" e="TypeSpec:TValue[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Reverse(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Reverse(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::LastIndexOf(T[],T)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::IndexOf(T[],T)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::ForEach(T[],System.Action`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::FindLastIndex(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T System.Array::FindLast(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::FindIndex(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T System.Array::Find(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Fill(T[],T,System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Fill(T[],T)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Array::Exists(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Array::Empty()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" e="TypeSpec:TInput[]:System.Private.CoreLib.dll" />
	<edge b="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" e="TypeSpec:TOutput[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::BinarySearch(T[],T,System.Collections.Generic.IComparer`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::BinarySearch(T[],T)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Resize(T[]&amp;,System.Int32)" e="TypeSpec:T[]&amp;:System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T[]&amp;:System.Private.CoreLib.dll" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt; System.Array::AsReadOnly(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Collections.Generic.ICollectionDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequiresPublicMethodAttribute:test.exe" e="Module:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequiresPublicMethodAttribute::.ctor(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequiresPublicMethodAttribute:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequiresPublicMethodAttribute::.ctor(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequiresPublicMethodAttribute::.ctor(System.Type)" e="Method:System.Void System.Attribute::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayCreateInstanceByName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayCreateInstanceByName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayCreateInstanceByName()" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayCreateInstanceByNameElement[]:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayCreateInstanceByNameElement[]:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayCreateInstanceByNameElement:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayCreateInstanceByNameElement:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Type System.Type::GetType(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethods(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethods(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayTypeGetTypeElement[]:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayTypeGetTypeElement[]:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayTypeGetTypeElement:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayTypeGetTypeElement:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Clear(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::get_Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int64 System.Array::get_LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::get_Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::GetLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::GetUpperBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::GetLowerBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Initialize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt; System.Array::AsReadOnly(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Resize(T[]&amp;,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Object System.Array::GetValue(System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Object System.Array::GetValue(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Object System.Array::GetValue(System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Object System.Array::GetValue(System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int64 System.Array::GetLongLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Object System.Array::get_SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Boolean System.Array::get_IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Boolean System.Array::get_IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Boolean System.Array::get_IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Object System.Array::Clone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::BinarySearch(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::BinarySearch(T[],T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:T[] System.Array::Empty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Boolean System.Array::Exists(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Fill(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Fill(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:T System.Array::Find(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:T System.Array::FindLast(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::ForEach(T[],System.Action`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::IndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Reverse(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Reverse(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Reverse(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Reverse(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(System.Array,System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(TKey[],TValue[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(T[],System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Void System.Array::Sort(T[],System.Comparison`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Boolean System.Array::TrueForAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Array::get_MaxLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Collections.IEnumerator System.Array::GetEnumerator()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayTypeGetType()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethods(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Field:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromFieldElement[] Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::_arrayGetTypeFromField" />
	<edge mark="1" b="Field:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromFieldElement[] Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::_arrayGetTypeFromField" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge b="Field:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromFieldElement[] Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::_arrayGetTypeFromField" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromFieldElement[]:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromFieldElement[]:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromFieldElement:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromFieldElement:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethods(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethods(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Clear(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::get_Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int64 System.Array::get_LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::get_Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::GetLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::GetUpperBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::GetLowerBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Initialize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt; System.Array::AsReadOnly(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Resize(T[]&amp;,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Object System.Array::GetValue(System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Object System.Array::GetValue(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Object System.Array::GetValue(System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Object System.Array::GetValue(System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int64 System.Array::GetLongLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Object System.Array::get_SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Boolean System.Array::get_IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Boolean System.Array::get_IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Boolean System.Array::get_IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Object System.Array::Clone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::BinarySearch(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::BinarySearch(T[],T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:T[] System.Array::Empty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Boolean System.Array::Exists(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Fill(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Fill(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:T System.Array::Find(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:T System.Array::FindLast(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::ForEach(T[],System.Action`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::IndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Reverse(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Reverse(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Reverse(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Reverse(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(System.Array,System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(TKey[],TValue[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(T[],System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Void System.Array::Sort(T[],System.Comparison`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Boolean System.Array::TrueForAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Array::get_MaxLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Collections.IEnumerator System.Array::GetEnumerator()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromField()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParam()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParam()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[]:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethods(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethods(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Clear(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::get_Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int64 System.Array::get_LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::get_Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::GetLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::GetUpperBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::GetLowerBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Initialize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt; System.Array::AsReadOnly(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Resize(T[]&amp;,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Object System.Array::GetValue(System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Object System.Array::GetValue(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Object System.Array::GetValue(System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Object System.Array::GetValue(System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int64 System.Array::GetLongLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Object System.Array::get_SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Boolean System.Array::get_IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Boolean System.Array::get_IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Boolean System.Array::get_IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Object System.Array::Clone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::BinarySearch(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::BinarySearch(T[],T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:T[] System.Array::Empty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Boolean System.Array::Exists(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Fill(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Fill(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:T System.Array::Find(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::FindIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:T System.Array::FindLast(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::ForEach(T[],System.Action`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::IndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::LastIndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Reverse(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Reverse(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Reverse(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Reverse(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(System.Array,System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(TKey[],TValue[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(T[],System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Void System.Array::Sort(T[],System.Comparison`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Boolean System.Array::TrueForAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Array::get_MaxLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Collections.IEnumerator System.Array::GetEnumerator()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayGetTypeFromMethodParamHelper(Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayGetTypeFromMethodParamElement[])" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestGenericArrayOnGeneric()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestGenericArrayOnGeneric()" e="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter&lt;Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType&gt;()" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter&lt;Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType&gt;()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter&lt;Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType&gt;()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="MemberRef:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1&lt;T[]&gt;::.ctor()" />
	<edge b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1&lt;T[]&gt;:test.exe" e="TypeSpec:T[]:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Clear(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::get_Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int64 System.Array::get_LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::get_Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::GetLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::GetUpperBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::GetLowerBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Initialize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt; System.Array::AsReadOnly(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Resize(T[]&amp;,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Object System.Array::GetValue(System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Object System.Array::GetValue(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Object System.Array::GetValue(System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Object System.Array::GetValue(System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int64 System.Array::GetLongLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Object System.Array::get_SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Boolean System.Array::get_IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Boolean System.Array::get_IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Boolean System.Array::get_IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Object System.Array::Clone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::BinarySearch(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::BinarySearch(T[],T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:T[] System.Array::Empty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Boolean System.Array::Exists(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Fill(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Fill(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:T System.Array::Find(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:T System.Array::FindLast(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::ForEach(T[],System.Action`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::IndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Reverse(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Reverse(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Reverse(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Reverse(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(System.Array,System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(TKey[],TValue[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(T[],System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Void System.Array::Sort(T[],System.Comparison`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Boolean System.Array::TrueForAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Array::get_MaxLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Collections.IEnumerator System.Array::GetEnumerator()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGenericParameter()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge b="MemberRef:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1&lt;T[]&gt;::.ctor()" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1&lt;T[]&gt;:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1&lt;T[]&gt;:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="MemberRef:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1&lt;T[]&gt;::.ctor()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestGenericArray()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestGenericArray()" e="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric&lt;Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementType&gt;()" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric&lt;Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementType&gt;()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric&lt;Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementType&gt;()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethods(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethods(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Clear(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::get_Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int64 System.Array::get_LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::get_Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::GetLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::GetUpperBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::GetLowerBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Initialize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt; System.Array::AsReadOnly(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Resize(T[]&amp;,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Object System.Array::GetValue(System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Object System.Array::GetValue(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Object System.Array::GetValue(System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Object System.Array::GetValue(System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int64 System.Array::GetLongLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Object System.Array::get_SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Boolean System.Array::get_IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Boolean System.Array::get_IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Boolean System.Array::get_IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Object System.Array::Clone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::BinarySearch(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::BinarySearch(T[],T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:T[] System.Array::Empty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Boolean System.Array::Exists(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Fill(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Fill(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:T System.Array::Find(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:T System.Array::FindLast(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::ForEach(T[],System.Action`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::IndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Reverse(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Reverse(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Reverse(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Reverse(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(TKey[],TValue[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(T[],System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Void System.Array::Sort(T[],System.Comparison`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Boolean System.Array::TrueForAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Array::get_MaxLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Collections.IEnumerator System.Array::GetEnumerator()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethodsOnArrayOfGeneric()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="MemberRef:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1&lt;Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType[]&gt;::.ctor()" />
	<edge b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1&lt;Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType[]&gt;:test.exe" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType[]:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType[]:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Clear(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::get_Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int64 System.Array::get_LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::get_Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::GetLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::GetUpperBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::GetLowerBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Initialize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt; System.Array::AsReadOnly(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Resize(T[]&amp;,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Object System.Array::GetValue(System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Object System.Array::GetValue(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Object System.Array::GetValue(System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Object System.Array::GetValue(System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int64 System.Array::GetLongLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Object System.Array::get_SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Boolean System.Array::get_IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Boolean System.Array::get_IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Boolean System.Array::get_IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Object System.Array::Clone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::BinarySearch(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::BinarySearch(T[],T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:T[] System.Array::Empty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Boolean System.Array::Exists(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Fill(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Fill(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:T System.Array::Find(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:T System.Array::FindLast(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::ForEach(T[],System.Action`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::IndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Reverse(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Reverse(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Reverse(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Reverse(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(TKey[],TValue[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(T[],System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Void System.Array::Sort(T[],System.Comparison`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Boolean System.Array::TrueForAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Array::get_MaxLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Collections.IEnumerator System.Array::GetEnumerator()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArrayOnGeneric()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge b="MemberRef:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1&lt;Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType[]&gt;::.ctor()" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1&lt;Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType[]&gt;:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1&lt;Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType[]&gt;:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1:test.exe" />
	<edge mark="1" b="MemberRef:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1&lt;Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementInGenericType[]&gt;::.ctor()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/RequirePublicMethodsGeneric`1::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementType[]:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementType[]:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling/ArrayElementType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethods(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::RequirePublicMethods(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Clear(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::get_Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int64 System.Array::get_LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::get_Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::GetLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::GetUpperBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::GetLowerBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Initialize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt; System.Array::AsReadOnly(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Resize(T[]&amp;,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Object System.Array::GetValue(System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Object System.Array::GetValue(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Object System.Array::GetValue(System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Object System.Array::GetValue(System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int64 System.Array::GetLongLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Object System.Array::get_SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Boolean System.Array::get_IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Boolean System.Array::get_IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Boolean System.Array::get_IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Object System.Array::Clone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::BinarySearch(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::BinarySearch(T[],T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:T[] System.Array::Empty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Boolean System.Array::Exists(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Fill(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Fill(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:T System.Array::Find(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:T System.Array::FindLast(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::ForEach(T[],System.Action`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::IndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Reverse(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Reverse(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Reverse(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Reverse(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(System.Array,System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(TKey[],TValue[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(T[],System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Void System.Array::Sort(T[],System.Comparison`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Boolean System.Array::TrueForAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Array::get_MaxLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Collections.IEnumerator System.Array::GetEnumerator()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ComplexTypeHandling::TestArray()" e="Method:System.Int32 System.Object::GetHashCode()" />
</dependencies>