<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName_GetRuntimeMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName_GetRuntimeMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType_GetRuntimeMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType_GetRuntimeMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod_GetRuntimeMethod(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod_GetRuntimeMethod(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod_GetRuntimeMethod(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod_GetRuntimeMethod(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestUnknownMethod(System.Reflection.MethodInfo)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestUnknownMethod(System.Reflection.MethodInfo)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestUnknownMethodButNoTypeArguments(System.Reflection.MethodInfo)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestUnknownMethodButNoTypeArguments(System.Reflection.MethodInfo)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullTypeArgument()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullTypeArgument()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithUnknownTypeArray(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithUnknownTypeArray(System.Type[])" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSet(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSet(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownLengthSet(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownLengthSet(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoArguments()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoArguments()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArgumentsButNonGenericMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArgumentsButNonGenericMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromParam(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromParam(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromGenericParam&lt;Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType&gt;()" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromGenericParam&lt;Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType&gt;()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" e="Module:test.exe" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromGenericParam&lt;Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType&gt;()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromGenericParam()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsViaRuntimeMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsViaRuntimeMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsButNoTypeArguments()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsButNoTypeArguments()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsFromParam(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsFromParam(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownType(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownType(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownArrayElement()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownArrayElement()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" e="Method:System.RuntimeMethodHandle System.Reflection.MethodBase::get_MethodHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" e="Method:System.Reflection.MethodBase System.Reflection.MethodBase::GetMethodFromHandle(System.RuntimeMethodHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandleWithWarning(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" e="Method:System.RuntimeMethodHandle System.Reflection.MethodBase::get_MethodHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" e="Method:System.Reflection.MethodBase System.Reflection.MethodBase::GetMethodFromHandle(System.RuntimeMethodHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestGetMethodFromHandle(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::SpecificType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMismatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::GenericWithUnmanagedConstraint()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::GenericWithUnmanagedConstraint()" e="TypeSpec:System.ValueType modreq(System.Runtime.InteropServices.UnmanagedType)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::GenericWithUnmanagedConstraint()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::GenericWithUnmanagedConstraint()" e="MethodSpec:!!0 System.Activator::CreateInstance&lt;T&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::AnnotationMatch(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::GenericWithUnmanagedConstraint()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::SpecificType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::SpecificType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::SpecificType()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::SpecificType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::SpecificType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::SpecificType()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::SpecificType()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::GenericWithUnmanagedConstraint()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/UnmanagedConstraint::SpecificType()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::SpecificType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMismatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMismatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMismatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMismatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMismatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMismatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMismatch(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::GenericWithStructConstraint()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::GenericWithStructConstraint()" e="TypeDef:System.ValueType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::GenericWithStructConstraint()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::GenericWithStructConstraint()" e="MethodSpec:!!0 System.Activator::CreateInstance&lt;T&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::AnnotationMatch(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::GenericWithStructConstraint()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::SpecificType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::SpecificType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::SpecificType()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::SpecificType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::SpecificType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::SpecificType()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::SpecificType()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::GenericWithStructConstraint()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StructConstraint::SpecificType()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::SpecificType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::UnknownType(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::UnknownType(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMismatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::GenericWithNewConstraintAndAnnotations()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::GenericWithNewConstraintAndAnnotations()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::GenericWithNewConstraintAndAnnotations()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMismatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMismatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMismatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMismatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMismatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMismatch(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::GenericWithNewConstraint()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::GenericWithNewConstraint()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::GenericWithNewConstraint()" e="MethodSpec:!!0 System.Activator::CreateInstance&lt;T&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMatch(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::AnnotationMatch(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::GenericWithNewConstraint()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::UnknownType(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::UnknownType(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::UnknownType(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::UnknownType(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::UnknownType(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::UnknownType(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::UnknownType(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::GenericWithNewConstraint()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::SpecificType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::SpecificType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::SpecificType()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::SpecificType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::SpecificType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::SpecificType()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::SpecificType()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::GenericWithNewConstraint()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/NewConstraint::SpecificType()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="MethodSpec:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::UnannotatedGenericParam&lt;System.Int32&gt;()" />
	<edge mark="1" b="MethodSpec:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::UnannotatedGenericParam&lt;System.Int32&gt;()" e="TypeDef:System.Int32" />
	<edge mark="1" b="MethodSpec:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::UnannotatedGenericParam&lt;System.Int32&gt;()" e="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::UnannotatedGenericParam()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="MethodSpec:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::AnnotatedGenericParam&lt;System.Int32&gt;()" />
	<edge mark="1" b="MethodSpec:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::AnnotatedGenericParam&lt;System.Int32&gt;()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::CompareTo(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::CompareTo(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::Equals(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.String System.Int32::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.String System.Int32::ToString(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.String System.Int32::ToString(System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.String System.Int32::ToString(System.String,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::TryFormat(System.Span`1&lt;System.Char&gt;,System.Int32&amp;,System.ReadOnlySpan`1&lt;System.Char&gt;,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::TryFormat(System.Span`1&lt;System.Byte&gt;,System.Int32&amp;,System.ReadOnlySpan`1&lt;System.Char&gt;,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Parse(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Parse(System.String,System.Globalization.NumberStyles)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Parse(System.String,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Parse(System.ReadOnlySpan`1&lt;System.Char&gt;,System.Globalization.NumberStyles,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::TryParse(System.String,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::TryParse(System.ReadOnlySpan`1&lt;System.Char&gt;,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::TryParse(System.ReadOnlySpan`1&lt;System.Char&gt;,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.TypeCode System.Int32::GetTypeCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.ValueTuple`2&lt;System.Int32,System.Int32&gt; System.Int32::DivRem(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::LeadingZeroCount(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::PopCount(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::RotateLeft(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::RotateRight(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::TrailingZeroCount(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::IsPow2(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Log2(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Clamp(System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::CopySign(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Max(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Min(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Sign(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Abs(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::CreateChecked(TOther)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::CreateSaturating(TOther)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::CreateTruncating(TOther)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::IsEvenInteger(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::IsNegative(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::IsOddInteger(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::IsPositive(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::MaxMagnitude(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::MinMagnitude(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::TryParse(System.String,System.IFormatProvider,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Parse(System.ReadOnlySpan`1&lt;System.Char&gt;,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::TryParse(System.ReadOnlySpan`1&lt;System.Char&gt;,System.IFormatProvider,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Parse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Globalization.NumberStyles,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Int32::Parse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Int32::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.ValueType::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.ValueType::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.String System.ValueType::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::Test()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="MethodSpec:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::AnnotatedGenericParam&lt;System.Int32&gt;()" e="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::AnnotatedGenericParam()" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::AnnotatedGenericParam()" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::AnnotatedGenericParam()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods/IFoo:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods/IFoo:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::AnnotatedGenericParam()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::AnnotatedGenericParam()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::AnnotatedGenericParam()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::AnnotatedGenericParam()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::AnnotatedGenericParam()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::AnnotatedGenericParam()" e="Method:T Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods/IFoo::Method()" />
	<edge b="Field:T[] System.SpanDebugView`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.ReadOnlySpan`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.ValueType/ValueTypeHashCodeStrategy System.ValueType::&lt;GetHashCodeStrategy&gt;g____PInvoke|5_0(System.Runtime.CompilerServices.MethodTable*,System.Runtime.CompilerServices.ObjectHandleOnStack,System.UInt32*,System.UInt32*,System.Runtime.CompilerServices.MethodTable**)" e="ModuleRef:QCall" />
	<edge mark="1" b="Method:System.Int32 System.ValueType::&lt;CanCompareBitsOrUseFastGetHashCodeHelper&gt;g____PInvoke|2_0(System.Runtime.CompilerServices.MethodTable*)" e="ModuleRef:QCall" />
	<edge b="Method:T[] System.ReadOnlySpan`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.Span`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Span`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::GetPinnableReference()" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Field:T[] System.ArraySegment`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Collections.Generic.ICollectionDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Span`1&lt;T&gt; System.Span`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::get_Item(System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.SpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::GetPinnableReference()" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.ReadOnlySpan`1&lt;T&gt; System.ReadOnlySpan`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::get_Item(System.Int32)" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.SpanDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::UnannotatedGenericParam()" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::UnannotatedGenericParam()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods/IFoo:test.exe" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::UnannotatedGenericParam()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::UnannotatedGenericParam()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::UnannotatedGenericParam()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::UnannotatedGenericParam()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::UnannotatedGenericParam()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::UnannotatedGenericParam()" e="Method:T Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods/IFoo::Method()" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods/IFoo:test.exe" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:T Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods/IFoo::Method()" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::CompareTo(System.Object)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::CompareTo(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::Equals(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::GetHashCode()" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.String System.Int32::ToString()" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.String System.Int32::ToString(System.String)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.String System.Int32::ToString(System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.String System.Int32::ToString(System.String,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::TryFormat(System.Span`1&lt;System.Char&gt;,System.Int32&amp;,System.ReadOnlySpan`1&lt;System.Char&gt;,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::TryFormat(System.Span`1&lt;System.Byte&gt;,System.Int32&amp;,System.ReadOnlySpan`1&lt;System.Char&gt;,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Parse(System.String)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Parse(System.String,System.Globalization.NumberStyles)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Parse(System.String,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Parse(System.ReadOnlySpan`1&lt;System.Char&gt;,System.Globalization.NumberStyles,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::TryParse(System.String,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::TryParse(System.ReadOnlySpan`1&lt;System.Char&gt;,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::TryParse(System.ReadOnlySpan`1&lt;System.Char&gt;,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.TypeCode System.Int32::GetTypeCode()" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.ValueTuple`2&lt;System.Int32,System.Int32&gt; System.Int32::DivRem(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::LeadingZeroCount(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::PopCount(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::RotateLeft(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::RotateRight(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::TrailingZeroCount(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::IsPow2(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Log2(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Clamp(System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::CopySign(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Max(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Min(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Sign(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Abs(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::CreateChecked(TOther)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::CreateSaturating(TOther)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::CreateTruncating(TOther)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::IsEvenInteger(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::IsNegative(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::IsOddInteger(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::IsPositive(System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::MaxMagnitude(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::MinMagnitude(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::TryParse(System.String,System.IFormatProvider,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Parse(System.ReadOnlySpan`1&lt;System.Char&gt;,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::TryParse(System.ReadOnlySpan`1&lt;System.Char&gt;,System.IFormatProvider,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Parse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Globalization.NumberStyles,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Int32::Parse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Int32::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,System.Int32&amp;)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.ValueType::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.ValueType::GetHashCode()" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.String System.ValueType::ToString()" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Reflection.MethodInfo Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod/StaticInterfaceMethods::KnownType()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithMultipleArgumentsWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithMultipleArgumentsWithRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownArrayElement()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownArrayElement()" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownArrayElement()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownArrayElement()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownArrayElement()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownArrayElement()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownArrayElement()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownArrayElement()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsWrongNumberOfTypeParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownType(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownType(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownType(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownType(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownType(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownType(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsUnknownType(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" e="Method:System.Void System.Type::.cctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" e="Method:System.Reflection.MethodInfo System.Reflection.RuntimeReflectionExtensions::GetRuntimeMethod(System.Type,System.String,System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsViaRuntimeMethod()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsFromParam(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsFromParam(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsFromParam(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsFromParam(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsFromParam(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsFromParam(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirementsFromParam(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirements()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirements()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirements()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoRequirements()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestStruct" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestStruct" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestStruct" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithConditionalGenericTypeSet(System.Boolean)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericMultipleParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericMultipleParameters()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestStruct" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithPartiallyInitializedGenericTypeArray()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericMultipleParameters()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestStruct" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithOneUnknownGenericParameter(System.Type[])" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericMultipleParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleKnownGenericParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericMultipleParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsButNoTypeArguments()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsButNoTypeArguments()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsButNoTypeArguments()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsButNoTypeArguments()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsButNoTypeArguments()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsButNoTypeArguments()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsButNoTypeArguments()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsViaRuntimeMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsViaRuntimeMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsViaRuntimeMethod()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsViaRuntimeMethod()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsViaRuntimeMethod()" e="Method:System.Reflection.MethodInfo System.Reflection.RuntimeReflectionExtensions::GetRuntimeMethod(System.Type,System.String,System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsViaRuntimeMethod()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsViaRuntimeMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsViaRuntimeMethod()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsViaRuntimeMethod()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsViaRuntimeMethod()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromGenericParam()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromGenericParam()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromGenericParam()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromGenericParam()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromGenericParam()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromGenericParam()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromGenericParam()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromGenericParam()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromParam(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromParam(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromParam(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromParam(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromParam(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromParam(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirementsFromParam(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirements()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirements()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirements()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithRequirements()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArgumentsButNonGenericMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArgumentsButNonGenericMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArgumentsButNonGenericMethod()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArgumentsButNonGenericMethod()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArgumentsButNonGenericMethod()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArgumentsButNonGenericMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArgumentsButNonGenericMethod()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArgumentsButNonGenericMethod()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArgumentsButNonGenericMethod()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::NonGenericMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::NonGenericMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoArguments()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoArguments()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoArguments()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoArguments()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoArguments()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Type&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoArguments()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithNoArguments()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::NonGenericMethod()" />
	<edge b="Method:T[] System.Array::Empty()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::MethodThatTakesArrayParameter(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::MethodThatTakesArrayParameter(System.Type[])" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayPassedToAnotherMethod()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::MethodThatTakesArrayParameter(System.Type[])" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::MethodThatTakesArrayParameter(System.Type[])" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownLengthSet(System.Int32)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownLengthSet(System.Int32)" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownLengthSet(System.Int32)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownLengthSet(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownLengthSet(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownLengthSet(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownLengthSet(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownLengthSet(System.Int32)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownLengthSet(System.Int32)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownLengthSet(System.Int32)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="TypeSpec:System.Type[]" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="TypeSpec:System.Type&amp;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSetByRef(System.Int32)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSet(System.Int32)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSet(System.Int32)" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSet(System.Int32)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSet(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSet(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSet(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSet(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSet(System.Int32)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSet(System.Int32)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithArrayUnknownIndexSet(System.Int32)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithUnknownTypeArray(System.Type[])" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithUnknownTypeArray(System.Type[])" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithUnknownTypeArray(System.Type[])" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithUnknownTypeArray(System.Type[])" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithUnknownTypeArray(System.Type[])" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithUnknownTypeArray(System.Type[])" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithUnknownTypeArray(System.Type[])" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" e="Method:System.RuntimeTypeHandle System.Type::get_TypeHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNoValueTypeArgument()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullTypeArgument()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullTypeArgument()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullTypeArgument()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullTypeArgument()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullTypeArgument()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullTypeArgument()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullTypeArgument()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullTypeArgument()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Reflection.MethodInfo System.Reflection.RuntimeReflectionExtensions::GetRuntimeMethod(System.Type,System.String,System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericMultipleParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames_GetRuntimeMethod(System.Int32,System.String)" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleNames(System.Int32,System.String)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.RuntimeReflectionExtensions::GetRuntimeMethod(System.Type,System.String,System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes_GetRuntimeMethod(System.Int32,System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithMultipleTypes(System.Int32,System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::GenericWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestUnknownMethodButNoTypeArguments(System.Reflection.MethodInfo)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestUnknownMethodButNoTypeArguments(System.Reflection.MethodInfo)" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestUnknownMethodButNoTypeArguments(System.Reflection.MethodInfo)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestUnknownMethod(System.Reflection.MethodInfo)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestUnknownMethod(System.Reflection.MethodInfo)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestUnknownMethod(System.Reflection.MethodInfo)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestUnknownMethod(System.Reflection.MethodInfo)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestUnknownMethod(System.Reflection.MethodInfo)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod_GetRuntimeMethod(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod_GetRuntimeMethod(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod_GetRuntimeMethod(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod_GetRuntimeMethod(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod_GetRuntimeMethod(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.RuntimeReflectionExtensions::GetRuntimeMethod(System.Type,System.String,System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod_GetRuntimeMethod(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod_GetRuntimeMethod(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputNoSuchMethod(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod_GetRuntimeMethod(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod_GetRuntimeMethod(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod_GetRuntimeMethod(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod_GetRuntimeMethod(System.Type)" e="Method:System.RuntimeTypeHandle System.Type::get_TypeHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod_GetRuntimeMethod(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod_GetRuntimeMethod(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod_GetRuntimeMethod(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.RuntimeReflectionExtensions::GetRuntimeMethod(System.Type,System.String,System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod_GetRuntimeMethod(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod_GetRuntimeMethod(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod(System.Type)" e="Method:System.RuntimeTypeHandle System.Type::get_TypeHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod(System.Type)" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestWithEmptyInputToGetMethod(System.Type)" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType_GetRuntimeMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType_GetRuntimeMethod()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType_GetRuntimeMethod()" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType_GetRuntimeMethod()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType_GetRuntimeMethod()" e="Method:System.Reflection.MethodInfo System.Reflection.RuntimeReflectionExtensions::GetRuntimeMethod(System.Type,System.String,System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType_GetRuntimeMethod()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType_GetRuntimeMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType_GetRuntimeMethod()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType_GetRuntimeMethod()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType()" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestMethodOnNullType()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName_GetRuntimeMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName_GetRuntimeMethod()" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName_GetRuntimeMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName_GetRuntimeMethod()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName_GetRuntimeMethod()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName_GetRuntimeMethod()" e="Method:System.Reflection.MethodInfo System.Reflection.RuntimeReflectionExtensions::GetRuntimeMethod(System.Type,System.String,System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName_GetRuntimeMethod()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName_GetRuntimeMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName_GetRuntimeMethod()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName_GetRuntimeMethod()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName()" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethodName()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethod()" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethod()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethod()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethod()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericMethod::TestNullMethod()" e="Method:System.Reflection.MethodInfo System.Reflection.MethodInfo::MakeGenericMethod(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueInput()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueInput()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestUnknownInput(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestUnknownInput(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullTypeArgument()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullTypeArgument()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueTypeArgument()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueTypeArgument()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithUnknownTypeArray(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithUnknownTypeArray(System.Type[])" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownIndexSet(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownIndexSet(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownLengthSet(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownLengthSet(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoArguments()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoArguments()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParam(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParam(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParamWithMismatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParamWithMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParam&lt;Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType&gt;()" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParam&lt;Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType&gt;()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParam&lt;Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType&gt;()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParam()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParamWithMismatch&lt;Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType&gt;()" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParamWithMismatch&lt;Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType&gt;()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParamWithMismatch&lt;Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType&gt;()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParamWithMismatch()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirementsFromParam(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirementsFromParam(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNullable()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNullable()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNullable()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNullable()" e="TypeDef:System.Nullable`1" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNullable()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNullable()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNullable()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNullable()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNullable()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::SpecificType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMismatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint/GenericWithUnmanagedConstraint`1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint/GenericWithUnmanagedConstraint`1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMismatch(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint/GenericWithUnmanagedConstraint`1:test.exe" e="TypeSpec:System.ValueType modreq(System.Runtime.InteropServices.UnmanagedType)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint/GenericWithUnmanagedConstraint`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::AnnotationMatch(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::SpecificType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint/GenericWithUnmanagedConstraint`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::SpecificType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::SpecificType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::SpecificType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::SpecificType()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/UnmanagedConstraint::SpecificType()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::SpecificType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMismatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMismatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint/GenericWithStructConstraint`1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint/GenericWithStructConstraint`1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMismatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMismatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMismatch(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint/GenericWithStructConstraint`1:test.exe" e="TypeDef:System.ValueType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint/GenericWithStructConstraint`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::AnnotationMatch(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::SpecificType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint/GenericWithStructConstraint`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::SpecificType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::SpecificType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::SpecificType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::SpecificType()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/StructConstraint::SpecificType()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::SpecificType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::UnknownType(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::UnknownType(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMismatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint/GenericWithNewConstraintAndAnnotations`1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint/GenericWithNewConstraintAndAnnotations`1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMismatch(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint/GenericWithNewConstraintAndAnnotations`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationAndConstraintMatch(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMismatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint/GenericWithNewConstraint`1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint/GenericWithNewConstraint`1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMismatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMismatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMismatch(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint/GenericWithNewConstraint`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::AnnotationMatch(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::UnknownType(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::UnknownType(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint/GenericWithNewConstraint`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::UnknownType(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::UnknownType(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::UnknownType(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::SpecificType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint/GenericWithNewConstraint`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::SpecificType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::SpecificType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::SpecificType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::SpecificType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::SpecificType()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/NewConstraint::SpecificType()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithMultipleArgumentsWithRequirements`2:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithMultipleArgumentsWithRequirements`2:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithMultipleArgumentsWithRequirements()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirementsFromParam(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirementsFromParam(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithNoRequirements`1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithNoRequirements`1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirementsFromParam(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirementsFromParam(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirementsFromParam(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithNoRequirements`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirements()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithNoRequirements()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParamWithMismatch()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParamWithMismatch()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithPublicFieldsArgument`1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithPublicFieldsArgument`1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParamWithMismatch()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParamWithMismatch()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParamWithMismatch()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParamWithMismatch()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParam()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParam()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithPublicFieldsArgument`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParam()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParam()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParam()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromGenericParam()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParamWithMismatch(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParamWithMismatch(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithPublicFieldsArgument`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParamWithMismatch(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParamWithMismatch(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParamWithMismatch(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParam(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParam(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithPublicFieldsArgument`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParam(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParam(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirementsFromParam(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithPublicFieldsArgument`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirements()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithRequirements()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoArguments()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoArguments()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/TypeMakeGenericNoArguments:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/TypeMakeGenericNoArguments:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoArguments()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoArguments()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Type&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoArguments()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownLengthSet(System.Int32)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownLengthSet(System.Int32)" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownLengthSet(System.Int32)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownLengthSet(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownLengthSet(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownLengthSet(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithPublicFieldsArgument`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownLengthSet(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownLengthSet(System.Int32)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownIndexSet(System.Int32)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownIndexSet(System.Int32)" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownIndexSet(System.Int32)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownIndexSet(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownIndexSet(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownIndexSet(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithPublicFieldsArgument`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownIndexSet(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithArrayUnknownIndexSet(System.Int32)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithUnknownTypeArray(System.Type[])" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithUnknownTypeArray(System.Type[])" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithUnknownTypeArray(System.Type[])" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithPublicFieldsArgument`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithUnknownTypeArray(System.Type[])" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestWithUnknownTypeArray(System.Type[])" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueTypeArgument()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueTypeArgument()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueTypeArgument()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueTypeArgument()" e="Method:System.RuntimeTypeHandle System.Type::get_TypeHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueTypeArgument()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueTypeArgument()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithPublicFieldsArgument`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueTypeArgument()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueTypeArgument()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueTypeArgument()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullTypeArgument()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullTypeArgument()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullTypeArgument()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType/GenericWithPublicFieldsArgument`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullTypeArgument()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullTypeArgument()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullTypeArgument()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestUnknownInput(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestUnknownInput(System.Type)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestUnknownInput(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestUnknownInput(System.Type)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestUnknownInput(System.Type)" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueInput()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueInput()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueInput()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueInput()" e="Method:System.RuntimeTypeHandle System.Type::get_TypeHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueInput()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueInput()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueInput()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueInput()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNoValueInput()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/TestType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MakeGenericDataFlow/MakeGenericType::TestNullType()" e="Method:System.Type System.Type::MakeGenericType(System.Type[])" />
	<edge b="Method:System.Void System.ArraySegment`1::CopyTo(T[],System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToTruncating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToTruncating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToTruncating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToTruncating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToTruncating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToTruncating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToSaturating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToSaturating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToSaturating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToSaturating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToSaturating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToSaturating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToChecked(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToChecked(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToChecked(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToChecked(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToChecked(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToChecked(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Globalization.NumberStyles,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::System.IUtf8SpanParsable&lt;TSelf&gt;.TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IUtf8SpanParsable`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
</dependencies>