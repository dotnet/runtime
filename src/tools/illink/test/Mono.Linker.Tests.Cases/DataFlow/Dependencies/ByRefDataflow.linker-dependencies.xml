<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="TypeDef:System.Type" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="TypeSpec:System.Type&amp;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/ClassPassedToMethodTakingTypeByRef:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/ClassPassedToMethodTakingTypeByRef:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/ClassMaybePassedToMethodTakingTypeByRef:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/ClassMaybePassedToMethodTakingTypeByRef:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/OtherClassMaybePassedToMethodTakingTypeByRef:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/OtherClassMaybePassedToMethodTakingTypeByRef:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Field:System.String System.String::Empty" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Int32 System.String::get_Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::PassRefToField()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::PassRefToField()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::PassRefToParameter(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::PassRefToParameter(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::Test()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/ClassPassedToMethodTakingTypeByRef::KeptMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/ClassMaybePassedToMethodTakingTypeByRef::KeptMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/OtherClassMaybePassedToMethodTakingTypeByRef::KeptMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::Main()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/OtherClassMaybePassedToMethodTakingTypeByRef::KeptMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/ClassMaybePassedToMethodTakingTypeByRef::KeptMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/ClassPassedToMethodTakingTypeByRef::KeptMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestFieldAssignment(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestFieldAssignment(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestParameterAssignment(System.Boolean,System.Type,System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestParameterAssignment(System.Boolean,System.Type,System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestLocalAssignment(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestLocalAssignment(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignment(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignment(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignmentComplex(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignmentComplex(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestDataFlowOnRightHandOfAssignment(System.Boolean,System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestDataFlowOnRightHandOfAssignment(System.Boolean,System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestReturnValue(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestReturnValue(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestReturnValue(System.Boolean)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestReturnValue(System.Boolean)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestReturnValue(System.Boolean)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestReturnValue(System.Boolean)" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicPropertiesField" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicPropertiesField" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures:test.exe" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicPropertiesField" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestReturnValue(System.Boolean)" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicMethodsField" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicMethodsField" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures:test.exe" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicMethodsField" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestReturnValue(System.Boolean)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestReturnValue(System.Boolean)" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresAll(System.Type)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestDataFlowOnRightHandOfAssignment(System.Boolean,System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestDataFlowOnRightHandOfAssignment(System.Boolean,System.Type)" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicPropertiesField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestDataFlowOnRightHandOfAssignment(System.Boolean,System.Type)" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicMethodsField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestDataFlowOnRightHandOfAssignment(System.Boolean,System.Type)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignmentComplex(System.Boolean)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignmentComplex(System.Boolean)" e="TypeSpec:System.Type&amp;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignmentComplex(System.Boolean)" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicPropertiesField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignmentComplex(System.Boolean)" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicMethodsField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignmentComplex(System.Boolean)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignmentComplex(System.Boolean)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetTypeWithPublicConstructors()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetTypeWithPublicConstructors()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetTypeWithPublicConstructors()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignment(System.Boolean)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignment(System.Boolean)" e="TypeSpec:System.Type&amp;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignment(System.Boolean)" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicPropertiesField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignment(System.Boolean)" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicMethodsField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestNullCoalescingAssignment(System.Boolean)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="TypeSpec:System.Type[]" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetTypeWithPublicConstructors()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetTypeWithPublicConstructors()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetTypeWithPublicFields()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetTypeWithPublicFields()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresAll(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestArrayElementReferenceAssignment(System.Boolean)" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresAll(System.Type)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetTypeWithPublicFields()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestLocalAssignment(System.Boolean)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestLocalAssignment(System.Boolean)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestLocalAssignment(System.Boolean)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestLocalAssignment(System.Boolean)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestLocalAssignment(System.Boolean)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetTypeWithPublicFields()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetTypeWithPublicFields()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestLocalAssignment(System.Boolean)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetTypeWithPublicConstructors()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetTypeWithPublicConstructors()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestLocalAssignment(System.Boolean)" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresAll(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestLocalAssignment(System.Boolean)" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresAll(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestParameterAssignment(System.Boolean,System.Type,System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestParameterAssignment(System.Boolean,System.Type,System.Type)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestFieldAssignment(System.Boolean)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestFieldAssignment(System.Boolean)" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicPropertiesField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestFieldAssignment(System.Boolean)" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::_publicMethodsField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleRefCaptures::TestFieldAssignment(System.Boolean)" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::Test()" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::_publicMethodsField" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::_publicMethodsField" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField:test.exe" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::_publicMethodsField" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::Test()" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::_publicPropertiesField" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::_publicPropertiesField" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField:test.exe" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::_publicPropertiesField" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::TwoOutRefs(System.Type&amp;,System.Type&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::TwoOutRefs(System.Type&amp;,System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::TwoOutRefs(System.Type&amp;,System.Type&amp;)" e="TypeSpec:System.Type&amp;" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::TwoOutRefs(System.Type&amp;,System.Type&amp;)" e="TypeSpec:System.Type&amp;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/MultipleOutRefsToField::TwoOutRefs(System.Type&amp;,System.Type&amp;)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::IntPtrDeref()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::IntPtrDeref()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::LocalStackAllocDeref(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::LocalStackAllocDeref(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::LocalStackAllocDeref(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::LocalStackAllocDeref(System.Type)" e="TypeDef:System.Int32" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::LocalStackAllocDeref(System.Type)" e="TypeSpec:System.Byte*" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::LocalStackAllocDeref(System.Type)" e="TypeSpec:System.Byte*" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::LocalStackAllocDeref(System.Type)" e="TypeSpec:System.Byte*" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::LocalStackAllocDeref(System.Type)" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::IntPtrDeref()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::IntPtrDeref()" e="Field:System.IntPtr* Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::_ptr" />
	<edge mark="1" b="Field:System.IntPtr* Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::_ptr" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference:test.exe" />
	<edge b="Field:System.IntPtr* Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::_ptr" e="TypeSpec:System.IntPtr*" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::IntPtrDeref()" e="Method:System.IntPtr Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::GetDangerous()" />
	<edge mark="1" b="Method:System.IntPtr Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::GetDangerous()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference:test.exe" />
	<edge mark="1" b="Method:System.IntPtr Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::GetDangerous()" e="TypeDef:System.IntPtr" />
	<edge mark="1" b="Method:System.IntPtr Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::GetDangerous()" e="TypeDef:System.IntPtr" />
	<edge mark="1" b="Method:System.IntPtr Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/PointerDereference::GetDangerous()" e="Field:System.IntPtr System.IntPtr::Zero" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::PassRefToParameter(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::PassRefToParameter(System.Type)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::PassRefToField()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::PassRefToField()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::PassRefToField()" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::s_typeWithPublicParameterlessConstructor" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::s_typeWithPublicParameterlessConstructor" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::s_typeWithPublicParameterlessConstructor" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::PassRefToField()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::PassRefToField()" e="Field:System.Type Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::s_typeWithPublicParameterlessConstructor" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::PassRefToField()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="TypeSpec:System.Type&amp;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/ClassReturnedAsRefFromMethodTakingTypeByRef:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/ClassReturnedAsRefFromMethodTakingTypeByRef:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/ClassReturnedAsRefFromMethodTakingTypeByRef::KeptMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow::MethodWithRefParameter(System.Type&amp;)" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ByRefDataflow/ClassReturnedAsRefFromMethodTakingTypeByRef::KeptMethod()" e="TypeDef:System.Void" />
</dependencies>