<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualifiedInvalidAssembly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualifiedInvalidAssembly()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualifiedNonExistingAssembly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualifiedNonExistingAssembly()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualifiedNonExistingAssembly()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualifiedNonExistingAssembly()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualifiedInvalidAssembly()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualifiedInvalidAssembly()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1&lt;Mono.Linker.Tests.Cases.Expectations.Assertions.KeptAttribute&gt;:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.Expectations.Assertions.KeptAttribute" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1&lt;Mono.Linker.Tests.Cases.Expectations.Assertions.KeptAttribute&gt;:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1&lt;Mono.Linker.Tests.Cases.Expectations.Assertions.KeptAttribute&gt;:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" e="Method:T Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1::GetValue()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGenericAndAssemblyQualified()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:T Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1::GetValue()" e="TypeDef:System.NotSupportedException" />
	<edge mark="1" b="Method:T Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1::GetValue()" e="Method:System.Void System.NotSupportedException::.ctor(System.String)" />
	<edge mark="1" b="Method:T Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1::GetValue()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:T Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1::GetValue()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericAndAssemblyQualified`1::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInner&gt;:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInner:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInner:test.exe" e="Module:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInner&gt;:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInner&gt;:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:T Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1::GetValue()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerOne`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerInner&gt;:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerInner:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerInner:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerInner::Method()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericTwoParameters`2&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerOne`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerInner&gt;,Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerTwo&gt;:test.exe" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerOne`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerInner&gt;:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerOne`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerInner&gt;:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerOne`1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerOne`1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericTwoParameters`2&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerOne`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerInner&gt;,Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerTwo&gt;:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerTwo:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerTwo:test.exe" e="Module:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericTwoParameters`2&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerOne`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerInner&gt;,Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerTwo&gt;:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericTwoParameters`2&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerOne`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerInner&gt;,Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerTwo&gt;:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericTwoParameters`2:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericTwoParameters`2:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericTwoParameters`2::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWitGenericInnerMultiDimArray[,]&gt;:test.exe" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWitGenericInnerMultiDimArray[,]:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWitGenericInnerMultiDimArray[,]:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWitGenericInnerMultiDimArray:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWitGenericInnerMultiDimArray:test.exe" e="Module:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWitGenericInnerMultiDimArray[,]&gt;:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1&lt;Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWitGenericInnerMultiDimArray[,]&gt;:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:T Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1::GetValue()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithMultiDimArray[,]:test.exe" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithMultiDimArray[,]:test.exe" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithMultiDimArray:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithMultiDimArray:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Clear(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::get_Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int64 System.Array::get_LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::get_Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::GetLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::GetUpperBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::GetLowerBound(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Initialize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt; System.Array::AsReadOnly(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Resize(T[]&amp;,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Array System.Array::CreateInstance(System.Type,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Array System.Array::CreateInstanceFromArrayType(System.Type,System.Int32[],System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Copy(System.Array,System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Object System.Array::GetValue(System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Object System.Array::GetValue(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Object System.Array::GetValue(System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int32[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Object System.Array::GetValue(System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Object System.Array::GetValue(System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Object System.Array::GetValue(System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64,System.Int64,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::SetValue(System.Object,System.Int64[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int64 System.Array::GetLongLength(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Object System.Array::get_SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Array::get_IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Array::get_IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Array::get_IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Object System.Array::Clone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::BinarySearch(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::BinarySearch(T[],T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::CopyTo(System.Array,System.Int64)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:T[] System.Array::Empty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Array::Exists(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Fill(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Fill(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:T System.Array::Find(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:T System.Array::FindLast(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::ForEach(T[],System.Action`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::IndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::IndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Reverse(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Reverse(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Reverse(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Reverse(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Array)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(T[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(TKey[],TValue[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(T[],System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Void System.Array::Sort(T[],System.Comparison`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Array::TrueForAll(T[],System.Predicate`1&lt;T&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::get_MaxLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Collections.IEnumerator System.Array::GetEnumerator()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Property:System.Int32 System.Array::Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::get_Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Property:System.Int64 System.Array::LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int64 System.Array::get_LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Property:System.Int32 System.Array::Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::get_Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Property:System.Object System.Array::SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Object System.Array::get_SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Property:System.Boolean System.Array::IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Array::get_IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Property:System.Boolean System.Array::IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Array::get_IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Property:System.Boolean System.Array::IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Boolean System.Array::get_IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Property:System.Int32 System.Array::MaxLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringConstantWithGeneric()" e="Method:System.Int32 System.Array::get_MaxLength()" />
	<edge b="Method:System.Boolean System.Array::TrueForAll(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(T[],System.Comparison`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" e="TypeSpec:TKey[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;TKey&gt;)" e="TypeSpec:TValue[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" e="TypeSpec:TKey[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Collections.Generic.IComparer`1&lt;TKey&gt;)" e="TypeSpec:TValue[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(T[],System.Collections.Generic.IComparer`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" e="TypeSpec:TKey[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[],System.Int32,System.Int32)" e="TypeSpec:TValue[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[])" e="TypeSpec:TKey[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(TKey[],TValue[])" e="TypeSpec:TValue[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Sort(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Reverse(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Reverse(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::LastIndexOf(T[],T,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::LastIndexOf(T[],T)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::IndexOf(T[],T,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::IndexOf(T[],T)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::ForEach(T[],System.Action`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::FindLastIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::FindLastIndex(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T System.Array::FindLast(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Int32,System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::FindIndex(T[],System.Int32,System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::FindIndex(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Array::FindAll(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T System.Array::Find(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Fill(T[],T,System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Fill(T[],T)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Array::Exists(T[],System.Predicate`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Array::Empty()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" e="TypeSpec:TInput[]:System.Private.CoreLib.dll" />
	<edge b="Method:TOutput[] System.Array::ConvertAll(TInput[],System.Converter`2&lt;TInput,TOutput&gt;)" e="TypeSpec:TOutput[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::BinarySearch(T[],System.Int32,System.Int32,T)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::BinarySearch(T[],T,System.Collections.Generic.IComparer`1&lt;T&gt;)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Int32 System.Array::BinarySearch(T[],T)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Array::Resize(T[]&amp;,System.Int32)" e="TypeSpec:T[]&amp;:System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T[]&amp;:System.Private.CoreLib.dll" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt; System.Array::AsReadOnly(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Collections.Generic.ICollectionDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericTwoParameters`2::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericTwoParameters`2:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericTwoParameters`2::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericTwoParameters`2::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGenericInnerInner::Method()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithGeneric`1::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombinationOnString(System.String)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::PublicMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::get_PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::set_PublicProperty(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::_publicField" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::_publicField" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType:test.exe" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::_publicField" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Property:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::get_PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromStringContantWithAnnotation()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::set_PublicProperty(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::set_PublicProperty(System.Boolean)" e="Property:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::set_PublicProperty(System.Boolean)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::get_PublicProperty()" e="Property:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::PublicProperty()" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::get_PublicProperty()" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::PublicMethod()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Type System.Type::GetType(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombination(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombination(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::PublicMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::get_PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::set_PublicProperty(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::_publicField" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::_publicField" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType:test.exe" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::_publicField" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Property:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::get_PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeGetTypeOverConstant()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::set_PublicProperty(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::set_PublicProperty(System.Boolean)" e="Property:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::set_PublicProperty(System.Boolean)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::get_PublicProperty()" e="Property:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::PublicProperty()" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::get_PublicProperty()" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::PublicMethod()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombination(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombination(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::RequireCombination(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::PublicMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::get_PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::set_PublicProperty(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::_publicField" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::_publicField" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType:test.exe" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::_publicField" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Property:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::get_PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations::TestFromTypeOf()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::set_PublicProperty(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::set_PublicProperty(System.Boolean)" e="Property:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::set_PublicProperty(System.Boolean)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::get_PublicProperty()" e="Property:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::PublicProperty()" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::get_PublicProperty()" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::PublicMethod()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::set_PublicProperty(System.Boolean)" e="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::&lt;PublicProperty&gt;k__BackingField" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::&lt;PublicProperty&gt;k__BackingField" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType:test.exe" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::&lt;PublicProperty&gt;k__BackingField" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::get_PublicProperty()" e="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromStringConstantWithAnnotationTestType::&lt;PublicProperty&gt;k__BackingField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::set_PublicProperty(System.Boolean)" e="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::&lt;PublicProperty&gt;k__BackingField" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::&lt;PublicProperty&gt;k__BackingField" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType:test.exe" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::&lt;PublicProperty&gt;k__BackingField" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::get_PublicProperty()" e="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeGetTypeOverConstantTestType::&lt;PublicProperty&gt;k__BackingField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::set_PublicProperty(System.Boolean)" e="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::&lt;PublicProperty&gt;k__BackingField" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::&lt;PublicProperty&gt;k__BackingField" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType:test.exe" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::&lt;PublicProperty&gt;k__BackingField" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::get_PublicProperty()" e="Field:System.Boolean Mono.Linker.Tests.Cases.DataFlow.ApplyTypeAnnotations/FromTypeOfTestType::&lt;PublicProperty&gt;k__BackingField" />
</dependencies>