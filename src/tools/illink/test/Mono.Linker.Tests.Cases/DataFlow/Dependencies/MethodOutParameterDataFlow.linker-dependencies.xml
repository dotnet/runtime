<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_PassedTwice()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_PassedTwice()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestUninitializedReadFromOutParameter()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestUninitializedReadFromOutParameter()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnOutput()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnOutput()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReturnOutParameter_MismatchOnOutput()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReturnOutParameter_MismatchOnOutput()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnOutput_PassedTwice()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnOutput_PassedTwice()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput_PassedTwice()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput_PassedTwice()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestPassingOutParameter_Mismatch(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestPassingOutParameter_Mismatch(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresPublicFields(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestPassingOutParameter(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestPassingOutParameter(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestAssigningToOutParameter(System.Type,System.Type&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestAssigningToOutParameter(System.Type,System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestAssigningToOutParameter_Mismatch(System.Type,System.Type&amp;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestAssigningToOutParameter_Mismatch(System.Type,System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Field:System.Int32 System.Int32::MaxValue" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::Main()" e="Field:System.Int32 System.Int32::MinValue" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestAssigningToOutParameter_Mismatch(System.Type,System.Type&amp;)" e="TypeSpec:System.Type&amp;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestAssigningToOutParameter_Mismatch(System.Type,System.Type&amp;)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestAssigningToOutParameter(System.Type,System.Type&amp;)" e="TypeSpec:System.Type&amp;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestAssigningToOutParameter(System.Type,System.Type&amp;)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestPassingOutParameter(System.Type&amp;)" e="TypeSpec:System.Type&amp;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestPassingOutParameter(System.Type&amp;)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestPassingOutParameter(System.Type&amp;)" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" e="TypeSpec:System.Type&amp;" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" e="TypeDef:System.Boolean" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestPassingOutParameter_Mismatch(System.Type&amp;)" e="TypeSpec:System.Type&amp;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestPassingOutParameter_Mismatch(System.Type&amp;)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestPassingOutParameter_Mismatch(System.Type&amp;)" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput_PassedTwice()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput_PassedTwice()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput_PassedTwice()" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::GetTypeWithFields()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::GetTypeWithFields()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput_PassedTwice()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValueFromValue(System.Type,System.Type&amp;)" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValueFromValue(System.Type,System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput_PassedTwice()" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresPublicMethods(System.Type)" />
	<edge b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValueFromValue(System.Type,System.Type&amp;)" e="TypeSpec:System.Type&amp;" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValueFromValue(System.Type,System.Type&amp;)" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValueFromValue(System.Type,System.Type&amp;)" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::GetTypeWithFields()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput()" e="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::GetTypeWithFields()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::GetTypeWithFields()" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnInput()" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresPublicMethods(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnOutput_PassedTwice()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnOutput_PassedTwice()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnOutput_PassedTwice()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValueFromValue(System.Type,System.Type&amp;)" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValueFromValue(System.Type,System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnOutput_PassedTwice()" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresPublicFields(System.Type)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReturnOutParameter_MismatchOnOutput()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReturnOutParameter_MismatchOnOutput()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReturnOutParameter_MismatchOnOutput()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReturnOutParameter_MismatchOnOutput()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnOutput()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnOutput()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnOutput()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_MismatchOnOutput()" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresPublicFields(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestUninitializedReadFromOutParameter()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestUninitializedReadFromOutParameter()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestUninitializedReadFromOutParameter()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestUninitializedReadFromOutParameter()" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresPublicMethods(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_PassedTwice()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_PassedTwice()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_PassedTwice()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValueFromValue(System.Type,System.Type&amp;)" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValueFromValue(System.Type,System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter_PassedTwice()" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresPublicMethods(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter()" e="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TryGetAnnotatedValue(System.Type&amp;)" e="TypeDef:Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.DataFlow.MethodOutParameterDataFlow::TestInitializedReadFromOutParameter()" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresPublicMethods(System.Type)" />
	<edge b="Field:T[] System.SpanDebugView`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.ReadOnlySpan`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.ValueType/ValueTypeHashCodeStrategy System.ValueType::&lt;GetHashCodeStrategy&gt;g____PInvoke|5_0(System.Runtime.CompilerServices.MethodTable*,System.Runtime.CompilerServices.ObjectHandleOnStack,System.UInt32*,System.UInt32*,System.Runtime.CompilerServices.MethodTable**)" e="ModuleRef:QCall" />
	<edge mark="1" b="Method:System.Int32 System.ValueType::&lt;CanCompareBitsOrUseFastGetHashCodeHelper&gt;g____PInvoke|2_0(System.Runtime.CompilerServices.MethodTable*)" e="ModuleRef:QCall" />
	<edge b="Method:T[] System.ReadOnlySpan`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.Span`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Span`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::GetPinnableReference()" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Field:T[] System.ArraySegment`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Collections.Generic.ICollectionDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Span`1&lt;T&gt; System.Span`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::get_Item(System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.SpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::GetPinnableReference()" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.ReadOnlySpan`1&lt;T&gt; System.ReadOnlySpan`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::get_Item(System.Int32)" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.SpanDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToTruncating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToTruncating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToSaturating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToSaturating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToChecked(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToChecked(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::System.IUtf8SpanParsable&lt;TSelf&gt;.TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IUtf8SpanParsable`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Globalization.NumberStyles,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToTruncating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToSaturating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToChecked(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ArraySegment`1::CopyTo(T[],System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToTruncating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToTruncating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToTruncating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToSaturating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToSaturating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToSaturating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToChecked(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToChecked(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToChecked(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
</dependencies>