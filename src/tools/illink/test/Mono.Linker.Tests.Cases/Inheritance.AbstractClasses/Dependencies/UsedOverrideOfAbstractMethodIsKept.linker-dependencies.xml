<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept" e="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base::Call()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base::Call()" e="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base::Call()" e="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B::Call()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base::Call()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B::Call()" e="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base::Call()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B::Call()" e="TypeDef:System.Void" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B:test.exe" e="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B::Call()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B::.ctor()" e="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/Base::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B:test.exe" e="Method:System.Void Mono.Linker.Tests.Cases.Inheritance.AbstractClasses.UsedOverrideOfAbstractMethodIsKept/B::Call()" />
</dependencies>