<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetter()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetter()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetterInternal()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetterInternal()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestSetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestSetterOnly()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterOnly()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestBindingFlags()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlagsAndName(System.Reflection.BindingFlags,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlagsAndName(System.Reflection.BindingFlags,System.String)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestEmptyName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestEmptyName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValueName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValueName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNonExistingName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNonExistingName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyOfArray()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyOfArray()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValue()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValue()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestDataFlowType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestDataFlowType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyInBaseType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyInBaseType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnoreCaseBindingFlags()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnoreCaseBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestFailIgnoreCaseBindingFlags()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestFailIgnoreCaseBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnorableBindingFlags()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnorableBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnsupportedBindingFlags()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnsupportedBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnsupportedBindingFlags()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnsupportedBindingFlags()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnsupportedBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnsupportedBindingFlags()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnsupportedBindingFlags()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnsupportedBindingFlags()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnsupportedBindingFlags()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnsupportedBindingFlags()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::Marked()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnsupportedBindingFlags()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::get_Marked()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::get_Marked()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::Marked()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::get_Marked()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::get_Marked()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::get_Marked()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ChangeTypeBindingFlagsClass::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnorableBindingFlags()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnorableBindingFlags()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnorableBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ExactBindingBindingFlagsClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ExactBindingBindingFlagsClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnorableBindingFlags()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnorableBindingFlags()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnorableBindingFlags()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ExactBindingBindingFlagsClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnorableBindingFlags()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ExactBindingBindingFlagsClass::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ExactBindingBindingFlagsClass::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ExactBindingBindingFlagsClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ExactBindingBindingFlagsClass::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ExactBindingBindingFlagsClass::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestFailIgnoreCaseBindingFlags()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestFailIgnoreCaseBindingFlags()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestFailIgnoreCaseBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/FailIgnoreCaseBindingFlagsClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/FailIgnoreCaseBindingFlagsClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestFailIgnoreCaseBindingFlags()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestFailIgnoreCaseBindingFlags()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnoreCaseBindingFlags()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnoreCaseBindingFlags()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnoreCaseBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnoreCaseBindingFlags()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnoreCaseBindingFlags()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnoreCaseBindingFlags()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnoreCaseBindingFlags()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnoreCaseBindingFlags()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::MakedDueToIgnoreCase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIgnoreCaseBindingFlags()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::get_MakedDueToIgnoreCase()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::get_MakedDueToIgnoreCase()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::MakedDueToIgnoreCase()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::get_MakedDueToIgnoreCase()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::get_MakedDueToIgnoreCase()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::get_MakedDueToIgnoreCase()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IgnoreCaseBindingFlagsClass::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyInBaseType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyInBaseType()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyInBaseType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/DerivedClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/DerivedClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyInBaseType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyInBaseType()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyInBaseType()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::GetterSetterOnBaseClass()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyInBaseType()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::get_GetterSetterOnBaseClass()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyInBaseType()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::set_GetterSetterOnBaseClass(System.Int32)" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::set_GetterSetterOnBaseClass(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::GetterSetterOnBaseClass()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::set_GetterSetterOnBaseClass(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::set_GetterSetterOnBaseClass(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::_basefield" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::_basefield" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass:test.exe" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::_basefield" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::get_GetterSetterOnBaseClass()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::GetterSetterOnBaseClass()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::get_GetterSetterOnBaseClass()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::get_GetterSetterOnBaseClass()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::get_GetterSetterOnBaseClass()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BaseClass::_basefield" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::GetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::get_GetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::GetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::get_GetterOnly()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::get_GetterOnly()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::GetterOnly()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::get_GetterOnly()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/ElseClass::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::get_GetterOnly()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::GetterOnly()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::get_GetterOnly()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/IfClass::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestDataFlowType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestDataFlowType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestDataFlowType()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestDataFlowType()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::FindType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::FindType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestDataFlowType()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::FindType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::FindType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::FindType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::FindType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValue()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValue()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValue()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValue()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValue()" e="Method:System.RuntimeTypeHandle System.Type::get_TypeHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValue()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValue()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullType()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullType()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyOfArray()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyOfArray()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyOfArray()" e="TypeSpec:System.Int32[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyOfArray()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyOfArray()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyOfArray()" e="Method:System.Object System.Reflection.PropertyInfo::GetValue(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyOfArray()" e="Property:System.Int64 System.Array::LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestPropertyOfArray()" e="Method:System.Int64 System.Array::get_LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNonExistingName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNonExistingName()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNonExistingName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNonExistingName()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNonExistingName()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValueName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValueName()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValueName()" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValueName()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValueName()" e="Method:System.String System.Type::get_AssemblyQualifiedName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValueName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValueName()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNoValueName()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestEmptyName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestEmptyName()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestEmptyName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestEmptyName()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestEmptyName()" e="Field:System.String System.String::Empty" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestEmptyName()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::OnlyUsedViaReflection()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::get_OnlyUsedViaReflection()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::set_OnlyUsedViaReflection(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::GetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestNullName()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::get_GetterOnly()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::get_GetterOnly()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::GetterOnly()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::get_GetterOnly()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::set_OnlyUsedViaReflection(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::OnlyUsedViaReflection()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::set_OnlyUsedViaReflection(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::set_OnlyUsedViaReflection(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::get_OnlyUsedViaReflection()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::OnlyUsedViaReflection()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::get_OnlyUsedViaReflection()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::get_OnlyUsedViaReflection()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::get_OnlyUsedViaReflection()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlagsAndName(System.Reflection.BindingFlags,System.String)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlagsAndName(System.Reflection.BindingFlags,System.String)" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlagsAndName(System.Reflection.BindingFlags,System.String)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlagsAndName(System.Reflection.BindingFlags,System.String)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlagsAndName(System.Reflection.BindingFlags,System.String)" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlagsAndName(System.Reflection.BindingFlags,System.String)" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlagsAndName(System.Reflection.BindingFlags,System.String)" e="Method:System.Object System.Reflection.PropertyInfo::GetValue(System.Object,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlagsAndName(System.Reflection.BindingFlags,System.String)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName::SomeProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlagsAndName(System.Reflection.BindingFlags,System.String)" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName::get_SomeProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlagsAndName(System.Reflection.BindingFlags,System.String)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName::set_SomeProperty(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName::set_SomeProperty(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName::SomeProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName::set_SomeProperty(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName::set_SomeProperty(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName::get_SomeProperty()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName::SomeProperty()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName::get_SomeProperty()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName::get_SomeProperty()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlagsAndName::get_SomeProperty()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Object System.Reflection.PropertyInfo::GetValue(System.Object,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags::SomeProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags::get_SomeProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags::set_SomeProperty(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags::set_SomeProperty(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags::SomeProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags::set_SomeProperty(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags::set_SomeProperty(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags::get_SomeProperty()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags::SomeProperty()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags::get_SomeProperty()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags::get_SomeProperty()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/UnknownBindingFlags::get_SomeProperty()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestBindingFlags()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestBindingFlags()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestBindingFlags()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestBindingFlags()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestBindingFlags()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestBindingFlags()" e="Method:System.Object System.Reflection.PropertyInfo::GetValue(System.Object,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestBindingFlags()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest::PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestBindingFlags()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest::get_PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestBindingFlags()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest::set_PublicProperty(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest::set_PublicProperty(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest::PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest::set_PublicProperty(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest::set_PublicProperty(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest::get_PublicProperty()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest::PublicProperty()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest::get_PublicProperty()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest::get_PublicProperty()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection/BindingFlagsTest::get_PublicProperty()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterOnly()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterOnly()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterOnly()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterOnly()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterOnly()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterOnly()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterOnly()" e="Method:System.Object System.Reflection.PropertyInfo::GetValue(System.Object,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterOnly()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::GetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterOnly()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::get_GetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestSetterOnly()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestSetterOnly()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestSetterOnly()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestSetterOnly()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestSetterOnly()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestSetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestSetterOnly()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestSetterOnly()" e="Method:System.Void System.Reflection.PropertyInfo::SetValue(System.Object,System.Object,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestSetterOnly()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestSetterOnly()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetterInternal()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetterInternal()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetterInternal()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetterInternal()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetterInternal()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetterInternal()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetterInternal()" e="Method:System.Object System.Reflection.PropertyInfo::GetValue(System.Object,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetter()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetter()" e="TypeDef:System.Reflection.PropertyInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetter()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetter()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetter()" e="Method:System.Reflection.PropertyInfo System.Type::GetProperty(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetter()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetter()" e="Method:System.Object System.Reflection.PropertyInfo::GetValue(System.Object,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetter()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::OnlyUsedViaReflection()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetter()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::get_OnlyUsedViaReflection()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::TestGetterAndSetter()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertyUsedViaReflection::set_OnlyUsedViaReflection(System.Int32)" />
	<edge b="Field:T[] System.SpanDebugView`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.ReadOnlySpan`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.ValueType/ValueTypeHashCodeStrategy System.ValueType::&lt;GetHashCodeStrategy&gt;g____PInvoke|5_0(System.Runtime.CompilerServices.MethodTable*,System.Runtime.CompilerServices.ObjectHandleOnStack,System.UInt32*,System.UInt32*,System.Runtime.CompilerServices.MethodTable**)" e="ModuleRef:QCall" />
	<edge mark="1" b="Method:System.Int32 System.ValueType::&lt;CanCompareBitsOrUseFastGetHashCodeHelper&gt;g____PInvoke|2_0(System.Runtime.CompilerServices.MethodTable*)" e="ModuleRef:QCall" />
	<edge b="Method:T[] System.ReadOnlySpan`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.Span`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Span`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::GetPinnableReference()" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Field:T[] System.ArraySegment`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Collections.Generic.ICollectionDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Span`1&lt;T&gt; System.Span`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::get_Item(System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.SpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::GetPinnableReference()" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.ReadOnlySpan`1&lt;T&gt; System.ReadOnlySpan`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::get_Item(System.Int32)" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.SpanDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int64::System.Numerics.INumberBase&lt;System.Int64&gt;.TryConvertToTruncating(System.Int64,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToTruncating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToTruncating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int64::System.Numerics.INumberBase&lt;System.Int64&gt;.TryConvertToSaturating(System.Int64,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToSaturating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToSaturating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int64::System.Numerics.INumberBase&lt;System.Int64&gt;.TryConvertToChecked(System.Int64,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToChecked(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToChecked(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::System.IUtf8SpanParsable&lt;TSelf&gt;.TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IUtf8SpanParsable`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Globalization.NumberStyles,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToTruncating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToSaturating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToChecked(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ArraySegment`1::CopyTo(T[],System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToTruncating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToTruncating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToTruncating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToSaturating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToSaturating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToSaturating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToChecked(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToChecked(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToChecked(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
</dependencies>