<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestClassParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestClassParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestClassParameters()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestClassParameters()" e="TypeDef:System.Type" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1&lt;System.Int32&gt;" e="TypeDef:System.Int32" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestClassParameters()" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1&lt;System.Int32&gt;" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1&lt;System.Int32&gt;" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestClassParameters()" e="Method:System.Type System.Type::GetType(System.String)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestClassParameters()" e="MemberRef:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1&lt;System.Int32&gt;::.ctor()" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1&lt;System.Int32&gt;" e="TypeDef:System.Int32" />
	<edge b="MemberRef:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1&lt;System.Int32&gt;::.ctor()" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1&lt;System.Int32&gt;" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1&lt;System.Int32&gt;" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1" />
	<edge mark="1" b="MemberRef:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1&lt;System.Int32&gt;::.ctor()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestClassParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass1`1" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass1`1" e="Module:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GenericClass2`1::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="TypeDef:System.String" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="TypeSpec:System.Action`1&lt;System.Int32&gt;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name:test.exe" e="Module:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="TypeSpec:System.Linq.Expressions.Expression`1&lt;System.Action&gt;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Reflection.ParameterInfo[] System.Reflection.MethodBase::GetParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.String System.Reflection.ParameterInfo::get_Name()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::CalledDirectly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::CalledDirectly(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::CalledDirectly2&lt;System.String&gt;(System.Int32)" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::CalledDirectly2&lt;System.String&gt;(System.Int32)" e="TypeDef:System.String" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::CalledDirectly2&lt;System.String&gt;(System.Int32)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::CalledDirectly2(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Field:System.Action`1&lt;System.Int32&gt; Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;O::&lt;0&gt;__OnlyUsedViaDelegate" />
	<edge mark="1" b="Field:System.Action`1&lt;System.Int32&gt; Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;O::&lt;0&gt;__OnlyUsedViaDelegate" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;O:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;O:test.exe" e="Module:test.exe" />
	<edge b="Field:System.Action`1&lt;System.Int32&gt; Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;O::&lt;0&gt;__OnlyUsedViaDelegate" e="TypeSpec:System.Action`1&lt;System.Int32&gt;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::OnlyUsedViaDelegate(System.Int32)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="MemberRef:System.Void System.Action`1&lt;System.Int32&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Field:System.Action`1&lt;System.Int32&gt; Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;O::&lt;0&gt;__OnlyUsedViaDelegate" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Reflection.MethodInfo System.Delegate::get_Method()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Reflection.ParameterInfo[] System.Reflection.MethodBase::GetParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.String System.Reflection.ParameterInfo::get_Name()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::OnlyUseViaDelegateVirt(System.Int32)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="MemberRef:System.Void System.Action`1&lt;System.Int32&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::OnlyUsedViaLdToken(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Reflection.MethodBase System.Reflection.MethodBase::GetMethodFromHandle(System.RuntimeMethodHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="TypeDef:System.Linq.Expressions.Expression" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Linq.Expressions.ConstantExpression System.Linq.Expressions.Expression::Constant(System.Object,System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.ParameterExpression&gt;()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="MethodSpec:System.Linq.Expressions.Expression`1&lt;!!0&gt; System.Linq.Expressions.Expression::Lambda&lt;System.Action&gt;(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Field:System.Action`1&lt;System.Int32&gt; Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;&gt;9__1_1" />
	<edge mark="1" b="Field:System.Action`1&lt;System.Int32&gt; Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;&gt;9__1_1" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c:test.exe" e="Module:test.exe" />
	<edge b="Field:System.Action`1&lt;System.Int32&gt; Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;&gt;9__1_1" e="TypeSpec:System.Action`1&lt;System.Int32&gt;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::.cctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Field:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;&gt;9" />
	<edge mark="1" b="Field:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;&gt;9" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c:test.exe" />
	<edge mark="1" b="Field:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;&gt;9" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;TestMethodParameters&gt;b__1_1(System.Int32)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="MemberRef:System.Void System.Action`1&lt;System.Int32&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Field:System.Action`1&lt;System.Int32&gt; Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;&gt;9__1_1" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestLambdaUsage(System.Delegate)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestLambdaUsage(System.Delegate)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;TestMethodParameters&gt;b__1_1(System.Int32)" e="Method:System.String System.Int32::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::OnlyCalledViaReflection(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestMethodParameters()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::OnlyCalledViaReflection(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::OnlyCalledViaReflection(System.Int32,System.Int32)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::OnlyCalledViaReflection(System.Int32,System.Int32)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::OnlyCalledViaReflection(System.Int32)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::OnlyCalledViaReflection(System.Int32)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestLambdaUsage(System.Delegate)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestLambdaUsage(System.Delegate)" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestLambdaUsage(System.Delegate)" e="Method:System.Reflection.MethodInfo System.Delegate::get_Method()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestLambdaUsage(System.Delegate)" e="Method:System.Reflection.ParameterInfo[] System.Reflection.MethodBase::GetParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection::TestLambdaUsage(System.Delegate)" e="Method:System.String System.Reflection.ParameterInfo::get_Name()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;TestMethodParameters&gt;b__1_1(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;TestMethodParameters&gt;b__1_1(System.Int32)" e="TypeDef:System.NotSupportedException" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;TestMethodParameters&gt;b__1_1(System.Int32)" e="Method:System.Void System.NotSupportedException::.ctor(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;TestMethodParameters&gt;b__1_1(System.Int32)" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;TestMethodParameters&gt;b__1_1(System.Int32)" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::.cctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::.cctor()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::.cctor()" e="Field:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::&lt;&gt;9" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/&lt;&gt;c::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:T[] System.Array::Empty()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Collections.Generic.ICollectionDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::OnlyUsedViaLdToken(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::OnlyUseViaDelegateVirt(System.Int32)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::OnlyUsedViaDelegate(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::CalledDirectly2(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ParametersUsedViaReflection/GetMethod_Name::CalledDirectly(System.Int32)" e="TypeDef:System.Void" />
	<edge b="Field:T[] System.SpanDebugView`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.ReadOnlySpan`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.ValueType/ValueTypeHashCodeStrategy System.ValueType::&lt;GetHashCodeStrategy&gt;g____PInvoke|5_0(System.Runtime.CompilerServices.MethodTable*,System.Runtime.CompilerServices.ObjectHandleOnStack,System.UInt32*,System.UInt32*,System.Runtime.CompilerServices.MethodTable**)" e="ModuleRef:QCall" />
	<edge mark="1" b="Method:System.Int32 System.ValueType::&lt;CanCompareBitsOrUseFastGetHashCodeHelper&gt;g____PInvoke|2_0(System.Runtime.CompilerServices.MethodTable*)" e="ModuleRef:QCall" />
	<edge b="Method:T[] System.ReadOnlySpan`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.Span`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Span`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::GetPinnableReference()" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Field:T[] System.ArraySegment`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Span`1&lt;T&gt; System.Span`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::get_Item(System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.SpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::GetPinnableReference()" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.ReadOnlySpan`1&lt;T&gt; System.ReadOnlySpan`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::get_Item(System.Int32)" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.SpanDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IntPtr::System.Numerics.INumberBase&lt;nint&gt;.TryConvertToTruncating(System.IntPtr,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToTruncating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToTruncating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IntPtr::System.Numerics.INumberBase&lt;nint&gt;.TryConvertToSaturating(System.IntPtr,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToSaturating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToSaturating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IntPtr::System.Numerics.INumberBase&lt;nint&gt;.TryConvertToChecked(System.IntPtr,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToChecked(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToChecked(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::System.IUtf8SpanParsable&lt;TSelf&gt;.TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IUtf8SpanParsable`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Globalization.NumberStyles,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToTruncating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToSaturating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToChecked(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ArraySegment`1::CopyTo(T[],System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToTruncating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToTruncating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToTruncating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToSaturating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToSaturating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToSaturating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToChecked(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToChecked(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToChecked(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.ArraySegment`1&lt;T&gt; System.ArraySegment`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
</dependencies>