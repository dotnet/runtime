<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="TypeDef:System.Reflection.MethodInfo" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/B::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/B::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/B" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/B" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/B" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="Method:System.Void System.Console::WriteLine(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="Method:System.Reflection.MethodInfo System.Type::GetMethod(System.String,System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="Method:System.Object System.Reflection.MethodBase::Invoke(System.Object,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal::Main()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A::Foo()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A::Foo()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A::Foo()" e="TypeDef:System.NotSupportedException" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A::Foo()" e="Method:System.Void System.NotSupportedException::.ctor(System.String)" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A::Foo()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A::Foo()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/B::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/B" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/B::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/B::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.MethodUsedViaReflectionAndLocal/A::Foo()" e="TypeDef:System.Int32" />
</dependencies>