<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Linq.Expressions.ParameterExpression System.Linq.Expressions.Expression::Parameter(System.Type,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Derived:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Derived:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Derived:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNull()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNull()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValue()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValue()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNullString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNullString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestEmptyString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestEmptyString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValueString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValueString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::GetType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::GetType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::BasicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::get_BasicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::set_BasicProperty(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::StaticProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::get_StaticProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Property:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::ProtectedPropertyOnBase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::get_ProtectedPropertyOnBase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::set_ProtectedPropertyOnBase(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Property:System.Boolean Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::PublicPropertyOnBase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Boolean Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::get_PublicPropertyOnBase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::set_PublicPropertyOnBase(System.Boolean)" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::set_PublicPropertyOnBase(System.Boolean)" e="Property:System.Boolean Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::PublicPropertyOnBase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::set_PublicPropertyOnBase(System.Boolean)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::set_PublicPropertyOnBase(System.Boolean)" e="Field:System.Boolean Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::&lt;PublicPropertyOnBase&gt;k__BackingField" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::&lt;PublicPropertyOnBase&gt;k__BackingField" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base:test.exe" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::&lt;PublicPropertyOnBase&gt;k__BackingField" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::get_PublicPropertyOnBase()" e="Property:System.Boolean Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::PublicPropertyOnBase()" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::get_PublicPropertyOnBase()" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::get_PublicPropertyOnBase()" e="Field:System.Boolean Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::&lt;PublicPropertyOnBase&gt;k__BackingField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::set_ProtectedPropertyOnBase(System.Type)" e="Property:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::ProtectedPropertyOnBase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::set_ProtectedPropertyOnBase(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::set_ProtectedPropertyOnBase(System.Type)" e="Field:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::&lt;ProtectedPropertyOnBase&gt;k__BackingField" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::&lt;ProtectedPropertyOnBase&gt;k__BackingField" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base:test.exe" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::&lt;ProtectedPropertyOnBase&gt;k__BackingField" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::get_ProtectedPropertyOnBase()" e="Property:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::ProtectedPropertyOnBase()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::get_ProtectedPropertyOnBase()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::get_ProtectedPropertyOnBase()" e="Field:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base::&lt;ProtectedPropertyOnBase&gt;k__BackingField" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::get_StaticProperty()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::StaticProperty()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::get_StaticProperty()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::get_StaticProperty()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::&lt;StaticProperty&gt;k__BackingField" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::&lt;StaticProperty&gt;k__BackingField" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::&lt;StaticProperty&gt;k__BackingField" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::set_BasicProperty(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::BasicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::set_BasicProperty(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::set_BasicProperty(System.Int32)" e="TypeDef:System.NotSupportedException" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::set_BasicProperty(System.Int32)" e="Method:System.Void System.NotSupportedException::.ctor(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::set_BasicProperty(System.Int32)" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::set_BasicProperty(System.Int32)" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::get_BasicProperty()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::BasicProperty()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::get_BasicProperty()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::GetType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::GetType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::GetType()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::GetType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Test()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Test()" e="Method:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::GetString()" />
	<edge mark="1" b="Method:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::GetString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Test()" e="Method:System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Test()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Property1()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Test()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::get_Property1()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Test()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Property2()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Test()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::get_Property2()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::get_Property2()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Property2()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::get_Property2()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::get_Property1()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::Property1()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::get_Property1()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::get_Property1()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::&lt;Property1&gt;k__BackingField" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::&lt;Property1&gt;k__BackingField" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString:test.exe" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::&lt;Property1&gt;k__BackingField" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::GetString()" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownString::GetString()" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValueString()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValueString()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValueString()" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValueString()" e="Method:System.String System.Type::get_AssemblyQualifiedName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValueString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValueString()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValueString()" e="Method:System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestEmptyString()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestEmptyString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestEmptyString()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestEmptyString()" e="Field:System.String System.String::Empty" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestEmptyString()" e="Method:System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNullString()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNullString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/Base:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNullString()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNullString()" e="Method:System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValue()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValue()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValue()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValue()" e="Method:System.RuntimeTypeHandle System.Type::get_TypeHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValue()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNoValue()" e="Method:System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNull()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNull()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString::TestNull()" e="Method:System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::Test()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::GetType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::GetType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::Test()" e="Method:System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::GetType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::GetType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::GetType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType:test.exe" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::GetType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::GetType()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::Property2()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::GetType()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::get_Property2()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::GetType()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::Property1()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::GetType()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::get_Property1()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::get_Property1()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::Property1()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::get_Property1()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::get_Property1()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::&lt;Property1&gt;k__BackingField" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::&lt;Property1&gt;k__BackingField" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType:test.exe" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::&lt;Property1&gt;k__BackingField" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::get_Property2()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::Property2()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.ExpressionPropertyString/UnknownType::get_Property2()" e="TypeDef:System.Int32" />
	<edge b="Field:T[] System.SpanDebugView`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.ReadOnlySpan`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.ValueType/ValueTypeHashCodeStrategy System.ValueType::&lt;GetHashCodeStrategy&gt;g____PInvoke|5_0(System.Runtime.CompilerServices.MethodTable*,System.Runtime.CompilerServices.ObjectHandleOnStack,System.UInt32*,System.UInt32*,System.Runtime.CompilerServices.MethodTable**)" e="ModuleRef:QCall" />
	<edge mark="1" b="Method:System.Int32 System.ValueType::&lt;CanCompareBitsOrUseFastGetHashCodeHelper&gt;g____PInvoke|2_0(System.Runtime.CompilerServices.MethodTable*)" e="ModuleRef:QCall" />
	<edge b="Method:T[] System.ReadOnlySpan`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.Span`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Span`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::GetPinnableReference()" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Field:T[] System.ArraySegment`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Collections.Generic.ICollectionDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Span`1&lt;T&gt; System.Span`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::get_Item(System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.SpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::GetPinnableReference()" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.ReadOnlySpan`1&lt;T&gt; System.ReadOnlySpan`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::get_Item(System.Int32)" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.SpanDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToTruncating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToTruncating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToSaturating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToSaturating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToChecked(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToChecked(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::System.IUtf8SpanParsable&lt;TSelf&gt;.TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IUtf8SpanParsable`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Globalization.NumberStyles,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToTruncating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToSaturating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToChecked(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ArraySegment`1::CopyTo(T[],System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToTruncating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToTruncating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToTruncating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToSaturating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToSaturating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToSaturating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToChecked(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToChecked(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToChecked(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.ArraySegment`1&lt;T&gt; System.ArraySegment`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
</dependencies>