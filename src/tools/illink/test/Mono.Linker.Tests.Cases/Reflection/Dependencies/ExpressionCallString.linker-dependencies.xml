<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/Derived:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/Derived:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void System.Type::.cctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/Derived:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/Derived:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::GetUnknownString()" />
	<edge mark="1" b="Method:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::GetUnknownString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValue()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValue()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestEmptyString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestEmptyString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValueString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValueString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/Base::PublicOnBase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/Base::ProtectedOnBase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass::ProtectedStaticMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass::ProtectedNonStaticMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass::PrivateStaticMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass::PrivateNonStaticMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Object System.Object::MemberwiseClone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void System.Object::Finalize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass::PublicStaticMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass::PublicNonStaticMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::Main()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass::PublicNonStaticMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass::PublicStaticMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass::PrivateNonStaticMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass::PrivateStaticMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass::ProtectedNonStaticMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/UnknownNameMethodClass::ProtectedStaticMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/Base:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/Base::ProtectedOnBase()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/Base::PublicOnBase()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestWithNoTypeParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestWithNoTypeParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithoutRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithoutRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsUnknownTypeArray(System.Type[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsUnknownTypeArray(System.Type[])" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsButNoTypeArguments()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsButNoTypeArguments()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithTypeParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithTypeParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithoutTypeParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithoutTypeParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="TypeSpec:System.Type[]" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Void &lt;PrivateImplementationDetails&gt;::ThrowSwitchExpressionException(System.Object)" />
	<edge mark="1" b="Method:System.Void &lt;PrivateImplementationDetails&gt;::ThrowSwitchExpressionException(System.Object)" e="TypeDef:&lt;PrivateImplementationDetails&gt;:test.exe" />
	<edge mark="1" b="TypeDef:&lt;PrivateImplementationDetails&gt;:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Field:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::_unknownMethodName" />
	<edge mark="1" b="Field:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::_unknownMethodName" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays:test.exe" />
	<edge mark="1" b="Field:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::_unknownMethodName" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::.cctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Object System.Object::MemberwiseClone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Void System.Object::Finalize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::GenericMethodWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::Test(System.Int32)" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::GenericMethodWithRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::.cctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::.cctor()" e="Field:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/TwoKnownTypeArrays::_unknownMethodName" />
	<edge mark="1" b="Method:System.Void &lt;PrivateImplementationDetails&gt;::ThrowSwitchExpressionException(System.Object)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void &lt;PrivateImplementationDetails&gt;::ThrowSwitchExpressionException(System.Object)" e="Method:System.Void System.Runtime.CompilerServices.SwitchExpressionException::.ctor(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithoutTypeParameters()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithoutTypeParameters()" e="Field:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::_unknownType" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::_unknownType" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements:test.exe" />
	<edge mark="1" b="Field:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::_unknownType" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithoutTypeParameters()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithoutTypeParameters()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithoutTypeParameters()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithTypeParameters()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithTypeParameters()" e="Field:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::_unknownType" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithTypeParameters()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithTypeParameters()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GetUnknownType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithTypeParameters()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownTypeWithRequirements::TestWithTypeParameters()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GetUnknownType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GetUnknownType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Field:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::_unknownMethodName" />
	<edge mark="1" b="Field:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::_unknownMethodName" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements:test.exe" />
	<edge mark="1" b="Field:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::_unknownMethodName" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::.cctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.Object System.Object::MemberwiseClone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.Void System.Object::Finalize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::GenericMethodWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::GenericMethodWithRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::.cctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::.cctor()" e="Field:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::_unknownMethodName" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Field:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::_unknownMethodName" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GetUnknownType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.Object System.Object::MemberwiseClone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.Void System.Object::Finalize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::GenericMethodWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithoutTypeParameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods/UnknownMethodWithRequirements::TestWithTypeParameters()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsButNoTypeArguments()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsButNoTypeArguments()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsButNoTypeArguments()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsButNoTypeArguments()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsButNoTypeArguments()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsButNoTypeArguments()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsButNoTypeArguments()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GenericMethodWithRequirementsNoArguments()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GenericMethodWithRequirementsNoArguments()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsUnknownTypeArray(System.Type[])" e="TypeSpec:System.Type[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsUnknownTypeArray(System.Type[])" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsUnknownTypeArray(System.Type[])" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsUnknownTypeArray(System.Type[])" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsUnknownTypeArray(System.Type[])" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsUnknownTypeArray(System.Type[])" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirementsUnknownTypeArray(System.Type[])" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GenericMethodWithRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GenericMethodWithRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirements()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirements()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GetUnknownTypeWithRequrements()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GetUnknownTypeWithRequrements()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirements()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirements()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithRequirements()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GenericMethodWithRequirements()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GetUnknownTypeWithRequrements()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GetUnknownTypeWithRequrements()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithoutRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithoutRequirements()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithoutRequirements()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithoutRequirements()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithoutRequirements()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GetUnknownType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithoutRequirements()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithoutRequirements()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestMethodWithoutRequirements()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GenericMethodWithNoRequirements()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GenericMethodWithNoRequirements()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestWithNoTypeParameters()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestWithNoTypeParameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestWithNoTypeParameters()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestWithNoTypeParameters()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestWithNoTypeParameters()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestWithNoTypeParameters()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::TestWithNoTypeParameters()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GenericMethodCalledAsNonGeneric()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestGenericMethods::GenericMethodCalledAsNonGeneric()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValueString()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValueString()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValueString()" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValueString()" e="Method:System.String System.Type::get_AssemblyQualifiedName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValueString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValueString()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValueString()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValueString()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValueString()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestEmptyString()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestEmptyString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestEmptyString()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestEmptyString()" e="Field:System.String System.String::Empty" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestEmptyString()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestEmptyString()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestEmptyString()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="Method:System.Object System.Object::MemberwiseClone()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="Method:System.Void System.Object::Finalize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullString()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValue()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValue()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValue()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValue()" e="Method:System.RuntimeTypeHandle System.Type::get_TypeHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValue()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValue()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValue()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNoValue()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullType()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullType()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::TestNullType()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::Test()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::Test()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::Test()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::Test()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::Test()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::TriggerUnrecognizedPattern()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::TriggerUnrecognizedPattern()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::Test()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::Test()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::Test()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::TriggerUnrecognizedPattern()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::TriggerUnrecognizedPattern()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::TriggerUnrecognizedPattern()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestType:test.exe" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::TriggerUnrecognizedPattern()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestType:test.exe" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="Method:System.Object System.Object::MemberwiseClone()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="Method:System.Void System.Object::Finalize()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="Method:System.String System.Object::ToString()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="Method:System.Boolean System.Object::Equals(System.Object)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="Method:System.Boolean System.Object::Equals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="Method:System.Boolean System.Object::ReferenceEquals(System.Object,System.Object)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/TestUnknownType::GetUnknownType()" e="Method:System.Int32 System.Object::GetHashCode()" />
	<edge mark="1" b="Method:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::GetUnknownString()" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.String Mono.Linker.Tests.Cases.Reflection.ExpressionCallString::GetUnknownString()" e="TypeDef:System.String" />
	<edge b="Method:T[] System.Collections.Generic.ICollectionDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Array::Empty()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::PrivateStaticMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PrivateMethods::PrivateStaticMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::ProtectedStaticMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/ProtectedMethods::ProtectedStaticMethod()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="Field:System.Type[] System.Type::EmptyTypes" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="MethodSpec:!!0[] System.Array::Empty&lt;System.Linq.Expressions.Expression&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="Method:System.Linq.Expressions.MethodCallExpression System.Linq.Expressions.Expression::Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::PublicStaticMethod()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ExpressionCallString/PublicMethods::PublicStaticMethod()" e="TypeDef:System.Void" />
</dependencies>