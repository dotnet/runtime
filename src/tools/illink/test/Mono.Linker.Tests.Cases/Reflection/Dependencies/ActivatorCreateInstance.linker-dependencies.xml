<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Object System.Activator::CreateInstance(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test2:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test2:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test3:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test3:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Reflection.BindingFlags Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::GetBindingFlags()" />
	<edge mark="1" b="Method:System.Reflection.BindingFlags Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::GetBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Object[] Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::GetArgs()" />
	<edge mark="1" b="Method:System.Object[] Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::GetArgs()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test5:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test5:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnStaticMethod(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnStaticMethod(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeB:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeB:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeA:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeA:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnStaticMethod(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnStaticMethod(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnInstanceMethodType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnInstanceMethodType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnInstanceMethod(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnInstanceMethod(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithNonPublicConstructorsType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithNonPublicConstructorsType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithNonPublicConstructors(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithNonPublicConstructors(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithPublicConstructors(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithPublicConstructors(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPath()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPath()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithConcreteType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithConcreteType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNewConstraint&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNewConstraintType&gt;()" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNewConstraint&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNewConstraintType&gt;()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNewConstraintType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNewConstraintType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNewConstraint&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNewConstraintType&gt;()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNewConstraintType::.ctor()" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNewConstraint&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNewConstraintType&gt;()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNewConstraint()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNoConstraint&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNoConstraintType&gt;()" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNoConstraint&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNoConstraintType&gt;()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNoConstraintType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNoConstraintType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNoConstraint&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNoConstraintType&gt;()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNoConstraint()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsOnKnownType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsOnKnownType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsOnAnnotatedType(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsOnAnnotatedType(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsNonPublicOnly(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsNonPublicOnly(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsNonPublicWithNonPublicAnnotation(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsNonPublicWithNonPublicAnnotation(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNoValue()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNoValue()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test1::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test2::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test3::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.ctor(System.Int32,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.ctor(System.Char)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.ctor(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test5::.ctor(System.Int32,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeA::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeB::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnInstanceMethodType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithNonPublicConstructorsType::.ctor(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType::.ctor(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestType::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType::.ctor(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType::.ctor(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType::.ctor(System.Int32)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithPublicConstructorsType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithNonPublicConstructorsType::.ctor(System.Int32,System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithNonPublicConstructorsType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithNonPublicConstructorsType::.ctor(System.Int32,System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterWithNonPublicConstructorsType::.ctor(System.Int32,System.Int32)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnInstanceMethodType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnInstanceMethodType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnInstanceMethodType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnInstanceMethodType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeB::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeB:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeB::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeB::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeA::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeA:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeA::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodTypeA::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/FromParameterOnStaticMethodType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test5::.ctor(System.Int32,System.Object)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test5:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test5::.ctor(System.Int32,System.Object)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test5::.ctor(System.Int32,System.Object)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.ctor(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.ctor(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.ctor(System.Int32)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.ctor(System.Char)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.ctor(System.Char)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.ctor(System.Char)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.ctor(System.Int32,System.Object)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.ctor(System.Int32,System.Object)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.ctor(System.Int32,System.Object)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test3::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test3:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test3::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test3::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test2::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test2:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test2::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test2::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test1::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test1::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test1::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/Derived::KeepIt()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/Derived::KeepIt()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/Derived:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/Derived:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::TestCreateInstance()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::TestCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::TestCreateInstance()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::TestCreateInstance()" e="TypeDef:System.NotSupportedException" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::TestCreateInstance()" e="Method:System.Void System.NotSupportedException::.ctor(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::TestCreateInstance()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::TestCreateInstance()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/Derived::KeepIt()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNoValue()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNoValue()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNoValue()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNoValue()" e="Method:System.RuntimeTypeHandle System.Type::get_TypeHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNoValue()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNoValue()" e="Method:System.Object System.Activator::CreateInstance(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullType()" e="Method:System.Object System.Activator::CreateInstance(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsNonPublicWithNonPublicAnnotation(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsNonPublicWithNonPublicAnnotation(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsNonPublicOnly(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsNonPublicOnly(System.Type)" e="Method:System.Globalization.CultureInfo System.Globalization.CultureInfo::get_InvariantCulture()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsNonPublicOnly(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsOnAnnotatedType(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsOnAnnotatedType(System.Type)" e="Method:System.Globalization.CultureInfo System.Globalization.CultureInfo::get_InvariantCulture()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsOnAnnotatedType(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsOnKnownType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsOnKnownType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestNullArgsType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestNullArgsType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsOnKnownType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsOnKnownType()" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestNullArgsOnKnownType()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestNullArgsType::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestNullArgsType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestNullArgsType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestNullArgsType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestNullArgsType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::Test()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::Test()" e="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::TestWithMatchingDataFlow&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType&gt;()" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::TestWithMatchingDataFlow&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType&gt;()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::.ctor()" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::TestWithMatchingDataFlow&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType&gt;()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::TestWithMatchingDataFlow()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::Test()" e="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::TestWithMismatchDataFlow&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType&gt;()" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::TestWithMismatchDataFlow&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType&gt;()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType:test.exe" />
	<edge mark="1" b="MethodSpec:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::TestWithMismatchDataFlow&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType&gt;()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::TestWithMismatchDataFlow()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::TestWithMismatchDataFlow()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::TestWithMismatchDataFlow()" e="MethodSpec:!!0 System.Activator::CreateInstance&lt;T&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::TestWithMatchingDataFlow()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::TestWithMatchingDataFlow()" e="MethodSpec:!!0 System.Activator::CreateInstance&lt;T&gt;()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithDataflowType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNoConstraint()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNoConstraint()" e="MethodSpec:!!0 System.Activator::CreateInstance&lt;T&gt;()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNewConstraint()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithNewConstraint()" e="MethodSpec:!!0 System.Activator::CreateInstance&lt;T&gt;()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNewConstraintType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNewConstraintType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNewConstraintType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithNewConstraintType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithConcreteType()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithConcreteType()" e="MethodSpec:!!0 System.Activator::CreateInstance&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithConcreteTypeType&gt;()" />
	<edge mark="1" b="MethodSpec:!!0 System.Activator::CreateInstance&lt;Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithConcreteTypeType&gt;()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithConcreteTypeType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithConcreteTypeType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::TestCreateInstanceOfTWithConcreteType()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithConcreteTypeType::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithConcreteTypeType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithConcreteTypeType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithConcreteTypeType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/TestCreateInstanceOfTWithConcreteTypeType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="Method:System.Reflection.Assembly System.Type::get_Assembly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="Method:System.Object System.Reflection.Assembly::CreateInstance(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="Method:System.Reflection.Assembly System.Type::get_Assembly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="Method:System.Object System.Reflection.Assembly::CreateInstance(System.String,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="Method:System.Reflection.Assembly System.Type::get_Assembly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::UnsupportedCreateInstance()" e="Method:System.Object System.Reflection.Assembly::CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.AppDomain System.AppDomain::get_CurrentDomain()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Runtime.Remoting.ObjectHandle System.AppDomain::CreateInstance(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.AppDomain System.AppDomain::get_CurrentDomain()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Runtime.Remoting.ObjectHandle System.AppDomain::CreateInstance(System.String,System.String,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.AppDomain System.AppDomain::get_CurrentDomain()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Runtime.Remoting.ObjectHandle System.AppDomain::CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.AppDomain System.AppDomain::get_CurrentDomain()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Object System.AppDomain::CreateInstanceAndUnwrap(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.AppDomain System.AppDomain::get_CurrentDomain()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Object System.AppDomain::CreateInstanceAndUnwrap(System.String,System.String,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.AppDomain System.AppDomain::get_CurrentDomain()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Object System.AppDomain::CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.AppDomain System.AppDomain::get_CurrentDomain()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Runtime.Remoting.ObjectHandle System.AppDomain::CreateInstanceFrom(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.AppDomain System.AppDomain::get_CurrentDomain()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Runtime.Remoting.ObjectHandle System.AppDomain::CreateInstanceFrom(System.String,System.String,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.AppDomain System.AppDomain::get_CurrentDomain()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Runtime.Remoting.ObjectHandle System.AppDomain::CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.AppDomain System.AppDomain::get_CurrentDomain()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Object System.AppDomain::CreateInstanceFromAndUnwrap(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.AppDomain System.AppDomain::get_CurrentDomain()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Object System.AppDomain::CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.AppDomain System.AppDomain::get_CurrentDomain()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Object System.AppDomain::CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::AppDomainCreateInstance()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/AppDomainCreateInstanceType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPath()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPath()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstanceFrom(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPath()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNullAssemblyPath()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNullAssemblyPath()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPath()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithEmptyAssemblyPath()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithEmptyAssemblyPath()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPath()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyPath()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyPath()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPath()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndNullTypeName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndNullTypeName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPath()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndEmptyTypeName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndEmptyTypeName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPath()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndNoValueTypeName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndNoValueTypeName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPath()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyPathParameterless:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyPathParameterless:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPath()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyPathParameterless::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyPathParameterless::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyPathParameterless:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyPathParameterless::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyPathParameterless::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndNoValueTypeName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndNoValueTypeName()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndNoValueTypeName()" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndNoValueTypeName()" e="Method:System.String System.Type::get_AssemblyQualifiedName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndNoValueTypeName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstanceFrom(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndEmptyTypeName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndEmptyTypeName()" e="Field:System.String System.String::Empty" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndEmptyTypeName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstanceFrom(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndNullTypeName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyPathAndNullTypeName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstanceFrom(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyPath()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyPath()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyPath()" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyPath()" e="Method:System.String System.Type::get_AssemblyQualifiedName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyPath()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstanceFrom(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithEmptyAssemblyPath()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithEmptyAssemblyPath()" e="Field:System.String System.String::Empty" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithEmptyAssemblyPath()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstanceFrom(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNullAssemblyPath()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNullAssemblyPath()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstanceFrom(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNullAssemblyName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNullAssemblyName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithEmptyAssemblyName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithEmptyAssemblyName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNullTypeName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNullTypeName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndEmptyTypeName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndEmptyTypeName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNoValueTypeName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNoValueTypeName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNonExistingAssemblyName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNonExistingAssemblyName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndUnknownTypeName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndUnknownTypeName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNonExistingTypeName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNonExistingTypeName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless1:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless1::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless2:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless2:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless2::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePublicOnly:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePublicOnly:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePublicOnly::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePublicOnly::.ctor(System.Int32,System.Object)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePrivateOnly:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePrivateOnly:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePrivateOnly::.ctor(System.Int32,System.Object,System.Int32)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePrivateOnly::.ctor(System.Int32,System.Object,System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePrivateOnly:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePrivateOnly::.ctor(System.Int32,System.Object,System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePrivateOnly::.ctor(System.Int32,System.Object,System.Int32)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePublicOnly::.ctor(System.Int32,System.Object)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePublicOnly:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePublicOnly::.ctor(System.Int32,System.Object)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePublicOnly::.ctor(System.Int32,System.Object)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePublicOnly::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePublicOnly:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePublicOnly::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNamePublicOnly::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless2::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless2:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless2::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless2::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless1::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless1:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless1::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/WithAssemblyNameParameterless1::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNonExistingTypeName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNonExistingTypeName()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNonExistingTypeName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndUnknownTypeName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndUnknownTypeName()" e="Field:System.String Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::_typeNameField" />
	<edge mark="1" b="Field:System.String Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::_typeNameField" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Field:System.String Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::_typeNameField" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndUnknownTypeName()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::.cctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndUnknownTypeName()" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndUnknownTypeName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::.cctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::.cctor()" e="Field:System.String Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::_typeNameField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNonExistingAssemblyName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNonExistingAssemblyName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNoValueTypeName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNoValueTypeName()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNoValueTypeName()" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNoValueTypeName()" e="Method:System.String System.Type::get_AssemblyQualifiedName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNoValueTypeName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndEmptyTypeName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndEmptyTypeName()" e="Field:System.String System.String::Empty" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndEmptyTypeName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNullTypeName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithAssemblyAndNullTypeName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyName()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyName()" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyName()" e="Method:System.String System.Type::get_AssemblyQualifiedName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNoValueAssemblyName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithEmptyAssemblyName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithEmptyAssemblyName()" e="Field:System.String System.String::Empty" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithEmptyAssemblyName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNullAssemblyName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::WithNullAssemblyName()" e="Method:System.Runtime.Remoting.ObjectHandle System.Activator::CreateInstance(System.String,System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithPublicConstructors(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithPublicConstructors(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithPublicConstructors(System.Type)" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithPublicConstructors(System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithPublicConstructors(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithPublicConstructors(System.Type)" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithPublicConstructors(System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithPublicConstructors(System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithPublicConstructors(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithNonPublicConstructors(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithNonPublicConstructors(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithNonPublicConstructors(System.Type)" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithNonPublicConstructors(System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithNonPublicConstructors(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithNonPublicConstructors(System.Type)" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithNonPublicConstructors(System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithNonPublicConstructors(System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterWithNonPublicConstructors(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnInstanceMethod(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnStaticMethod(System.Type)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnStaticMethod(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Object[] Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::GetArgs()" e="TypeSpec:System.Object[]" />
	<edge b="Method:System.Object[] Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::GetArgs()" e="TypeSpec:System.Object[]" />
	<edge mark="1" b="Method:System.Reflection.BindingFlags Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::GetBindingFlags()" e="TypeDef:System.Reflection.BindingFlags" />
	<edge mark="1" b="Method:System.Reflection.BindingFlags Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::GetBindingFlags()" e="TypeDef:System.Reflection.BindingFlags" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4:test.exe" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.cctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/Test4::.cctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::TestCreateInstance()" e="Method:System.Type System.Object::GetType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::TestCreateInstance()" e="Method:System.Globalization.CultureInfo System.Globalization.CultureInfo::get_InvariantCulture()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::TestCreateInstance()" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase:test.exe" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase:test.exe" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::.ctor()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/Derived:test.exe" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/Derived::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::TestCreateInstance()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnInstanceMethod(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnInstanceMethod(System.Type)" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnInstanceMethod(System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnInstanceMethod(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Object[])" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnInstanceMethod(System.Type)" e="TypeDef:System.Object" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnInstanceMethod(System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnInstanceMethod(System.Type)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance::FromParameterOnInstanceMethod(System.Type)" e="Method:System.Object System.Activator::CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
	<edge b="Field:T[] System.SpanDebugView`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.ReadOnlySpan`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.ValueType/ValueTypeHashCodeStrategy System.ValueType::&lt;GetHashCodeStrategy&gt;g____PInvoke|5_0(System.Runtime.CompilerServices.MethodTable*,System.Runtime.CompilerServices.ObjectHandleOnStack,System.UInt32*,System.UInt32*,System.Runtime.CompilerServices.MethodTable**)" e="ModuleRef:QCall" />
	<edge mark="1" b="Method:System.Int32 System.ValueType::&lt;CanCompareBitsOrUseFastGetHashCodeHelper&gt;g____PInvoke|2_0(System.Runtime.CompilerServices.MethodTable*)" e="ModuleRef:QCall" />
	<edge b="Method:T[] System.ReadOnlySpan`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::GetPinnableReference()" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Field:T[] System.ArraySegment`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Collections.Generic.ICollectionDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.ReadOnlySpan`1&lt;T&gt; System.ReadOnlySpan`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::get_Item(System.Int32)" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.SpanDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.Span`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Span`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::GetPinnableReference()" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Span`1&lt;T&gt; System.Span`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::get_Item(System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.SpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/Derived::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/Derived:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/Derived::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/Derived::.ctor()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ActivatorCreateInstance/CreateInstanceWithGetTypeFromHierarchy/AnnotatedBase:test.exe" />
	<edge b="Method:System.Void System.ArraySegment`1::CopyTo(T[],System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToTruncating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToTruncating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToTruncating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToTruncating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToSaturating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToSaturating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToSaturating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToSaturating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToChecked(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToChecked(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToChecked(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToChecked(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::System.IUtf8SpanParsable&lt;TSelf&gt;.TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IUtf8SpanParsable`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Globalization.NumberStyles,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToTruncating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToTruncating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToSaturating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToSaturating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToChecked(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToChecked(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
</dependencies>