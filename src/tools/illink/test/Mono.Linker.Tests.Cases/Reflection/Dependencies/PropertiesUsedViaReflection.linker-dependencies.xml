<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestBindingFlags()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNullType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNullType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNoValue()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNoValue()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestDataFlowType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestDataFlowType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestDataFlowWithAnnotation(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestDataFlowWithAnnotation(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnoreCaseBindingFlags()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnoreCaseBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnorableBindingFlags()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnorableBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnsupportedBindingFlags()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnsupportedBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::GetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::Main()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::get_GetterOnly()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::get_GetterOnly()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::GetterOnly()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::get_GetterOnly()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::_field" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::_field" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType:test.exe" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::_field" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/MyType::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnsupportedBindingFlags()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnsupportedBindingFlags()" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnsupportedBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnsupportedBindingFlags()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnsupportedBindingFlags()" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnsupportedBindingFlags()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::KeptDueToChangeType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnsupportedBindingFlags()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::get_KeptDueToChangeType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnsupportedBindingFlags()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnsupportedBindingFlags()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::get_KeptDueToChangeType()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::KeptDueToChangeType()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::get_KeptDueToChangeType()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::get_KeptDueToChangeType()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ChangeTypeBindingFlagsClass::get_KeptDueToChangeType()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnorableBindingFlags()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnorableBindingFlags()" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnorableBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ExactBindingBindingFlagsClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ExactBindingBindingFlagsClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnorableBindingFlags()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnorableBindingFlags()" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnorableBindingFlags()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ExactBindingBindingFlagsClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnorableBindingFlags()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ExactBindingBindingFlagsClass::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ExactBindingBindingFlagsClass::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ExactBindingBindingFlagsClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ExactBindingBindingFlagsClass::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ExactBindingBindingFlagsClass::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnoreCaseBindingFlags()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnoreCaseBindingFlags()" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnoreCaseBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnoreCaseBindingFlags()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnoreCaseBindingFlags()" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnoreCaseBindingFlags()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::MakedDueToIgnoreCase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnoreCaseBindingFlags()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::get_MakedDueToIgnoreCase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnoreCaseBindingFlags()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIgnoreCaseBindingFlags()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::get_MakedDueToIgnoreCase()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::MakedDueToIgnoreCase()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::get_MakedDueToIgnoreCase()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::get_MakedDueToIgnoreCase()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IgnoreCaseBindingFlagsClass::get_MakedDueToIgnoreCase()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:System.Type" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::GetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::get_GetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::GetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestIfElse(System.Int32)" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::get_GetterOnly()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::get_GetterOnly()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::GetterOnly()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::get_GetterOnly()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/ElseClass::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::get_GetterOnly()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::GetterOnly()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::get_GetterOnly()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/IfClass::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestDataFlowWithAnnotation(System.Type)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestDataFlowWithAnnotation(System.Type)" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestDataFlowWithAnnotation(System.Type)" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestDataFlowType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestDataFlowType()" e="TypeDef:System.Type" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestDataFlowType()" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestDataFlowType()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::FindType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::FindType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestDataFlowType()" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::FindType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::FindType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::FindType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::FindType()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNoValue()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNoValue()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNoValue()" e="TypeDef:System.Type" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNoValue()" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNoValue()" e="Method:System.RuntimeTypeHandle System.Type::get_TypeHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNoValue()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNoValue()" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNullType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNullType()" e="TypeDef:System.Type" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNullType()" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestNullType()" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="TypeSpec:System.Int32[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Property:System.Int32 System.Array::Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Method:System.Int32 System.Array::get_Length()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Property:System.Int64 System.Array::LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Method:System.Int64 System.Array::get_LongLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Property:System.Int32 System.Array::Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Method:System.Int32 System.Array::get_Rank()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Property:System.Object System.Array::SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Method:System.Object System.Array::get_SyncRoot()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Property:System.Boolean System.Array::IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Method:System.Boolean System.Array::get_IsReadOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Property:System.Boolean System.Array::IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Method:System.Boolean System.Array::get_IsFixedSize()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Property:System.Boolean System.Array::IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Method:System.Boolean System.Array::get_IsSynchronized()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Property:System.Int32 System.Array::MaxLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestPropertiesOfArray()" e="Method:System.Int32 System.Array::get_MaxLength()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags::SomeProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags::get_SomeProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags::set_SomeProperty(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags::set_SomeProperty(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags::SomeProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags::set_SomeProperty(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags::set_SomeProperty(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags::get_SomeProperty()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags::SomeProperty()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags::get_SomeProperty()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags::get_SomeProperty()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/UnknownBindingFlags::get_SomeProperty()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestBindingFlags()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestBindingFlags()" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestBindingFlags()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestBindingFlags()" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestBindingFlags()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest::PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestBindingFlags()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest::get_PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestBindingFlags()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest::set_PublicProperty(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest::set_PublicProperty(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest::PublicProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest::set_PublicProperty(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest::set_PublicProperty(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest::get_PublicProperty()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest::PublicProperty()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest::get_PublicProperty()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest::get_PublicProperty()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection/BindingFlagsTest::get_PublicProperty()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="TypeSpec:System.Reflection.PropertyInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="Method:System.Reflection.PropertyInfo[] System.Type::GetProperties()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::OnlyUsedViaReflection()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::get_OnlyUsedViaReflection()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::set_OnlyUsedViaReflection(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::set_SetterOnly(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::GetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::TestGetProperties()" e="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::get_GetterOnly()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::get_GetterOnly()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::GetterOnly()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::get_GetterOnly()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::get_GetterOnly()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::set_SetterOnly(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::SetterOnly()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::set_SetterOnly(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::set_SetterOnly(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::set_OnlyUsedViaReflection(System.Int32)" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::OnlyUsedViaReflection()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::set_OnlyUsedViaReflection(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::set_OnlyUsedViaReflection(System.Int32)" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::get_OnlyUsedViaReflection()" e="Property:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::OnlyUsedViaReflection()" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::get_OnlyUsedViaReflection()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::get_OnlyUsedViaReflection()" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::get_OnlyUsedViaReflection()" e="Field:System.Int32 Mono.Linker.Tests.Cases.Reflection.PropertiesUsedViaReflection::_field" />
	<edge b="Field:T[] System.SpanDebugView`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.ReadOnlySpan`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.ValueType/ValueTypeHashCodeStrategy System.ValueType::&lt;GetHashCodeStrategy&gt;g____PInvoke|5_0(System.Runtime.CompilerServices.MethodTable*,System.Runtime.CompilerServices.ObjectHandleOnStack,System.UInt32*,System.UInt32*,System.Runtime.CompilerServices.MethodTable**)" e="ModuleRef:QCall" />
	<edge mark="1" b="Method:System.Int32 System.ValueType::&lt;CanCompareBitsOrUseFastGetHashCodeHelper&gt;g____PInvoke|2_0(System.Runtime.CompilerServices.MethodTable*)" e="ModuleRef:QCall" />
	<edge b="Method:T[] System.ReadOnlySpan`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.Span`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Span`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::GetPinnableReference()" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Field:T[] System.ArraySegment`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Collections.Generic.ICollectionDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Span`1&lt;T&gt; System.Span`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::get_Item(System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.SpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::GetPinnableReference()" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.ReadOnlySpan`1&lt;T&gt; System.ReadOnlySpan`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::get_Item(System.Int32)" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.SpanDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int64::System.Numerics.INumberBase&lt;System.Int64&gt;.TryConvertToTruncating(System.Int64,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToTruncating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToTruncating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int64::System.Numerics.INumberBase&lt;System.Int64&gt;.TryConvertToSaturating(System.Int64,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToSaturating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToSaturating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int64::System.Numerics.INumberBase&lt;System.Int64&gt;.TryConvertToChecked(System.Int64,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToChecked(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToChecked(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::System.IUtf8SpanParsable&lt;TSelf&gt;.TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IUtf8SpanParsable`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Globalization.NumberStyles,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToTruncating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToSaturating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToChecked(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ArraySegment`1::CopyTo(T[],System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToTruncating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToTruncating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToTruncating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToSaturating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToSaturating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToSaturating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToChecked(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToChecked(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToChecked(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
</dependencies>