<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestNull()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestNull()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestEmptyString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestEmptyString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestFullString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestFullString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestFullStringConst()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestFullStringConst()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeAsmName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeAsmName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestPointer()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestPointer()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestReference()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestReference()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestArray()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestArray()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestArrayOfArray()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestArrayOfArray()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericArray()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericArray()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericArrayFullString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericArrayFullString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArray()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArray()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArrayFullString()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArrayFullString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArrayAsmName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArrayAsmName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestDeeplyNested()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestDeeplyNested()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOf()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOf()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeFromBranch(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeFromBranch(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseInsensitiveFlag()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseInsensitiveFlag()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker2()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker2()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeName()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase3Params(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase3Params(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericTypeWithAnnotations()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericTypeWithAnnotations()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces::Test()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeCombination()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeCombination()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeCombination()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeCombination()" e="TypeDef:System.Exception" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeCombination()" e="TypeDef:System.Exception" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeCombination()" e="Method:System.Type System.Type::GetType(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeCombination()" e="Method:System.Void System.Console::WriteLine(System.Object)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeCombination()" e="TypeSpec:System.Span`1&lt;System.Byte&gt;[]" />
	<edge mark="1" b="TypeDef:System.Array" e="ExportedType:System.Span`1" />
	<edge mark="1" b="TypeDef:System.Array" e="ExportedType:System.Byte" />
	<edge b="Field:T[] System.SpanDebugView`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.Span`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.ValueType/ValueTypeHashCodeStrategy System.ValueType::&lt;GetHashCodeStrategy&gt;g____PInvoke|5_0(System.Runtime.CompilerServices.MethodTable*,System.Runtime.CompilerServices.ObjectHandleOnStack,System.UInt32*,System.UInt32*,System.Runtime.CompilerServices.MethodTable**)" e="ModuleRef:QCall" />
	<edge mark="1" b="Method:System.Int32 System.ValueType::&lt;CanCompareBitsOrUseFastGetHashCodeHelper&gt;g____PInvoke|2_0(System.Runtime.CompilerServices.MethodTable*)" e="ModuleRef:QCall" />
	<edge b="Method:T[] System.Span`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:T&amp; System.ReadOnlySpan`1::_reference" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.ReadOnlySpan`1::ToArray()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::GetPinnableReference()" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Field:T[] System.ArraySegment`1::_array" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.Collections.Generic.ICollectionDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.ReadOnlySpan`1&lt;T&gt; System.ReadOnlySpan`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeDef:System.Runtime.InteropServices.InAttribute" />
	<edge b="Method:T&amp; modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1::get_Item(System.Int32)" e="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" />
	<edge b="TypeSpec:T&amp; modreq(System.Runtime.InteropServices.InAttribute):System.Private.CoreLib.dll" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ReadOnlySpan`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::GetPinnableReference()" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Span`1&lt;T&gt; System.Span`1::op_Implicit(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:T&amp; System.Span`1::get_Item(System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;,System.Int32)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T&amp;)" e="TypeSpec:T&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[],System.Int32,System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.Span`1::.ctor(T[])" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Field:TUnmanagedElement* System.Runtime.InteropServices.Marshalling.SpanMarshaller`2/ManagedToUnmanagedIn::_allocatedMemory" e="TypeSpec:TUnmanagedElement*:System.Private.CoreLib.dll" />
	<edge b="Method:T[] System.SpanDebugView`1::get_Items()" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces::Test()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/ITest:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/ITest:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces::Test()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/ITest::Method()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/ITest::Method()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/ITest:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/DerivedType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/DerivedType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces::Test()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces::Test()" e="Method:System.Type[] System.Type::GetInterfaces()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/ITest:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces::Test()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/ITest:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/BaseType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/ITest::Method()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericTypeWithAnnotations()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericTypeWithAnnotations()" e="Method:System.Type System.Type::GetType(System.String)" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_OuterType`1&lt;Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType&gt;" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericTypeWithAnnotations()" e="Property:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::PrivateProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericTypeWithAnnotations()" e="Method:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::get_PrivateProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericTypeWithAnnotations()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::set_PrivateProperty(System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericTypeWithAnnotations()" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_OuterType`1&lt;Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType&gt;" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_OuterType`1&lt;Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType&gt;" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_OuterType`1" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_OuterType`1" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::set_PrivateProperty(System.Boolean)" e="Property:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::PrivateProperty()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::set_PrivateProperty(System.Boolean)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::set_PrivateProperty(System.Boolean)" e="Field:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::&lt;PrivateProperty&gt;k__BackingField" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::&lt;PrivateProperty&gt;k__BackingField" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::&lt;PrivateProperty&gt;k__BackingField" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::get_PrivateProperty()" e="Property:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::PrivateProperty()" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::get_PrivateProperty()" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::get_PrivateProperty()" e="Field:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericTypeWithAnnotations_InnerType::&lt;PrivateProperty&gt;k__BackingField" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="Field:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;0&gt;__AssemblyResolver" />
	<edge mark="1" b="Field:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;0&gt;__AssemblyResolver" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O:test.exe" e="Module:test.exe" />
	<edge b="Field:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;0&gt;__AssemblyResolver" e="TypeSpec:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="Method:System.Reflection.Assembly Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::AssemblyResolver(System.Reflection.AssemblyName)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="MemberRef:System.Void System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="Field:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;0&gt;__AssemblyResolver" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="Field:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;1&gt;__GetTypeFromAssembly" />
	<edge mark="1" b="Field:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;1&gt;__GetTypeFromAssembly" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O:test.exe" />
	<edge b="Field:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;1&gt;__GetTypeFromAssembly" e="TypeSpec:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetTypeFromAssembly(System.Reflection.Assembly,System.String,System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="MemberRef:System.Void System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="Field:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;1&gt;__GetTypeFromAssembly" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase5Params(System.Int32)" e="Method:System.Type System.Type::GetType(System.String,System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;,System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;,System.Boolean,System.Boolean)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetTypeFromAssembly(System.Reflection.Assembly,System.String,System.Boolean)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetTypeFromAssembly(System.Reflection.Assembly,System.String,System.Boolean)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetTypeFromAssembly(System.Reflection.Assembly,System.String,System.Boolean)" e="Method:System.Boolean System.Reflection.Assembly::op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetTypeFromAssembly(System.Reflection.Assembly,System.String,System.Boolean)" e="Method:System.Type System.Reflection.Assembly::GetType(System.String,System.Boolean)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetTypeFromAssembly(System.Reflection.Assembly,System.String,System.Boolean)" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge mark="1" b="Method:System.Reflection.Assembly Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::AssemblyResolver(System.Reflection.AssemblyName)" e="TypeDef:System.Reflection.Assembly" />
	<edge mark="1" b="Method:System.Reflection.Assembly Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::AssemblyResolver(System.Reflection.AssemblyName)" e="TypeDef:System.Reflection.Assembly" />
	<edge mark="1" b="Method:System.Reflection.Assembly Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::AssemblyResolver(System.Reflection.AssemblyName)" e="Method:System.Reflection.Assembly System.Reflection.Assembly::Load(System.Reflection.AssemblyName)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase3Params(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase3Params(System.Int32)" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase3Params(System.Int32)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestUnknownIgnoreCase3Params(System.Int32)" e="Method:System.Type System.Type::GetType(System.String,System.Boolean,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeName()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestInvalidTypeName()" e="Method:System.Type System.Type::GetType(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="Field:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;0&gt;__AssemblyResolver" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="Method:System.Reflection.Assembly Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::AssemblyResolver(System.Reflection.AssemblyName)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="MemberRef:System.Void System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="Field:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;0&gt;__AssemblyResolver" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="Field:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;1&gt;__GetTypeFromAssembly" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetTypeFromAssembly(System.Reflection.Assembly,System.String,System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="MemberRef:System.Void System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="Field:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;1&gt;__GetTypeFromAssembly" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="Method:System.Type System.Type::GetType(System.String,System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;,System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;,System.Boolean,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithoutIgnoreCase()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/OverloadWith5ParametersWithoutIgnoreCase" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/OverloadWith5ParametersWithoutIgnoreCase" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" e="Field:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;0&gt;__AssemblyResolver" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" e="Method:System.Reflection.Assembly Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::AssemblyResolver(System.Reflection.AssemblyName)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" e="MemberRef:System.Void System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" e="Field:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;0&gt;__AssemblyResolver" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" e="Field:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;1&gt;__GetTypeFromAssembly" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetTypeFromAssembly(System.Reflection.Assembly,System.String,System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" e="MemberRef:System.Void System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" e="Field:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;1&gt;__GetTypeFromAssembly" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith5ParametersWithIgnoreCase()" e="Method:System.Type System.Type::GetType(System.String,System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;,System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;,System.Boolean,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="Field:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;0&gt;__AssemblyResolver" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="Method:System.Reflection.Assembly Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::AssemblyResolver(System.Reflection.AssemblyName)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="MemberRef:System.Void System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="Field:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;0&gt;__AssemblyResolver" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="Field:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;1&gt;__GetTypeFromAssembly" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetTypeFromAssembly(System.Reflection.Assembly,System.String,System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="MemberRef:System.Void System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="Field:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;1&gt;__GetTypeFromAssembly" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="Method:System.Type System.Type::GetType(System.String,System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;,System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith4Parameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/OverloadWith4Parameters" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/OverloadWith4Parameters" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="Field:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;0&gt;__AssemblyResolver" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="Method:System.Reflection.Assembly Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::AssemblyResolver(System.Reflection.AssemblyName)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="MemberRef:System.Void System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="Field:System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;0&gt;__AssemblyResolver" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="Field:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;1&gt;__GetTypeFromAssembly" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetTypeFromAssembly(System.Reflection.Assembly,System.String,System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="MemberRef:System.Void System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;::.ctor(System.Object,System.IntPtr)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="Field:System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt; Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/&lt;&gt;O::&lt;1&gt;__GetTypeFromAssembly" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="Method:System.Type System.Type::GetType(System.String,System.Func`2&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;,System.Func`4&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOverloadWith3Parameters()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/OverloadWith3Parameters" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/OverloadWith3Parameters" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker2()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker2()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker2()" e="Field:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::fieldHideCase" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::fieldHideCase" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Field:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::fieldHideCase" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker2()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::.cctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker2()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::.cctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::.cctor()" e="Field:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::fieldHideCase" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker()" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker()" e="Method:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetCase()" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetCase()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseUnknownByTheLinker()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean,System.Boolean)" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetCase()" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Boolean Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::GetCase()" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseInsensitiveFlag()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseInsensitiveFlag()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseInsensitiveFlag()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeUsingCaseInsensitiveFlag()" e="Method:System.Void Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions::RequiresPublicMethods(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeFromBranch(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeFromBranch(System.Int32)" e="TypeDef:System.String" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeFromBranch(System.Int32)" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeFromBranch(System.Int32)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeFromBranch(System.Int32)" e="TypeDef:System.Int32" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeFromBranch(System.Int32)" e="Method:System.Type System.Type::GetType(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeFromBranch(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/TypeFromBranchA:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/TypeFromBranchA:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeFromBranch(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/TypeFromBranchB:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/TypeFromBranchB:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOf()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOf()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOf()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/TypeOfToKeep:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/TypeOfToKeep:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeOf()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestDeeplyNested()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestDeeplyNested()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestDeeplyNested()" e="Method:System.Type System.Type::GetType(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestDeeplyNested()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Nested1/N2/N3:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Nested1/N2/N3:test.exe" e="Module:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Nested1/N2:test.exe" e="Module:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Nested1:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArrayAsmName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArrayAsmName()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArrayAsmName()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArrayAsmName()" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/MultiDimensionalArrayAsmName[,]" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/MultiDimensionalArrayAsmName[,]" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/MultiDimensionalArrayAsmName" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/MultiDimensionalArrayAsmName" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArrayFullString()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArrayFullString()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArrayFullString()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArrayFullString()" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/MultiDimensionalArrayFullString[,]" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/MultiDimensionalArrayFullString[,]" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/MultiDimensionalArrayFullString" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/MultiDimensionalArrayFullString" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArray()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArray()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArray()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestMultiDimensionalArray()" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/MultiDimensionalArray[,]" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/MultiDimensionalArray[,]" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/MultiDimensionalArray" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/MultiDimensionalArray" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericArrayFullString()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericArrayFullString()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericArrayFullString()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArrayFullString`1&lt;Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArgumentFullString&gt;" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArgumentFullString" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArgumentFullString" e="Module:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericArrayFullString()" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArrayFullString`1&lt;Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArgumentFullString&gt;" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArrayFullString`1&lt;Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArgumentFullString&gt;" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArrayFullString`1" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArrayFullString`1" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericArray()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericArray()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericArray()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArray`1&lt;Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArgument&gt;" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArgument" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArgument" e="Module:test.exe" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericArray()" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArray`1&lt;Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArgument&gt;" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArray`1&lt;Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArgument&gt;" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArray`1" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/GenericArray`1" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestArrayOfArray()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestArrayOfArray()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestArrayOfArray()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestArrayOfArray()" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/ArrayOfArray[][]" />
	<edge b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/ArrayOfArray[][]" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/ArrayOfArray[]" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/ArrayOfArray[]" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/ArrayOfArray" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/ArrayOfArray" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestArray()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestArray()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestArray()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestArray()" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Array[]" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Array[]" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Array" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Array" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestReference()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestReference()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestReference()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestReference()" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Reference&amp;" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Reference&amp;" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Reference" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Reference" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestPointer()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestPointer()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestPointer()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestPointer()" e="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Pointer*" />
	<edge mark="1" b="TypeSpec:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Pointer*" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Pointer" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Pointer" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestType()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/AType" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/AType" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeAsmName()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeAsmName()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeAsmName()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestTypeAsmName()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/TypeAsmName" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/TypeAsmName" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestFullStringConst()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestFullStringConst()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestFullStringConst()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestFullStringConst()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/FullConst" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/FullConst" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericString()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericString()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericString()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestGenericString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Generic`1" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Generic`1" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestFullString()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestFullString()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestFullString()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestFullString()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Full" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/Full" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestEmptyString()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestEmptyString()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestEmptyString()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestNull()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestNull()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection::TestNull()" e="Method:System.Type System.Type::GetType(System.String,System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/ITest::Method()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/BaseType::Method()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/ITest::Method()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/DerivedType::Method()" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToTruncating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToTruncating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IntPtr::System.Numerics.INumberBase&lt;nint&gt;.TryConvertToTruncating(System.IntPtr,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToTruncating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToTruncating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToSaturating(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToSaturating(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IntPtr::System.Numerics.INumberBase&lt;nint&gt;.TryConvertToSaturating(System.IntPtr,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToSaturating(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToSaturating(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt32::System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToChecked(System.UInt32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.UInt16::System.Numerics.INumberBase&lt;System.UInt16&gt;.TryConvertToChecked(System.UInt16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IntPtr::System.Numerics.INumberBase&lt;nint&gt;.TryConvertToChecked(System.IntPtr,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int32::System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToChecked(System.Int32,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Int16::System.Numerics.INumberBase&lt;System.Int16&gt;.TryConvertToChecked(System.Int16,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Void System.ArraySegment`1::CopyTo(T[],System.Int32)" e="TypeSpec:T[]:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::System.IUtf8SpanParsable&lt;TSelf&gt;.TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.IUtf8SpanParsable`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Numerics.INumberBase`1::TryParse(System.ReadOnlySpan`1&lt;System.Byte&gt;,System.Globalization.NumberStyles,System.IFormatProvider,TSelf&amp;)" e="TypeSpec:TSelf&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToTruncating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToSaturating(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Byte::System.Numerics.INumberBase&lt;System.Byte&gt;.TryConvertToChecked(System.Byte,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/DerivedType::Method()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/BaseType::Method()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/DerivedType::Method()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.TypeUsedViaReflection/BaseTypeInterfaces/BaseType::Method()" e="TypeDef:System.Void" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToTruncating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToSaturating(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
	<edge b="Method:System.Boolean System.Char::System.Numerics.INumberBase&lt;System.Char&gt;.TryConvertToChecked(System.Char,TOther&amp;)" e="TypeSpec:TOther&amp;:System.Private.CoreLib.dll" />
</dependencies>