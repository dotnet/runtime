<?xml version="1.0" encoding="utf-8"?>
<dependencies version="1.2">
	<edge mark="1" b="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection" e="Module:test.exe" />
	<edge mark="1" b="Module:test.exe" e="Assembly:test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestGetConstructors()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestGetConstructors()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithBindingFlags()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNullType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNullType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNoValue()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNoValue()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestDataFlowType()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestDataFlowType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestDataFlowWithAnnotation(System.Type)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestDataFlowWithAnnotation(System.Type)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType::.ctor(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::Main()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType::.ctor(System.String)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType::.ctor(System.String)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType::.ctor(System.String)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/MyType::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="TypeDef:System.Type" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="TypeSpec:System.Reflection.ConstructorInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="TypeDef:System.Boolean" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="Method:System.Reflection.ConstructorInfo[] System.Type::GetConstructors(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor::.ctor(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor::.ctor(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestIfElse(System.Boolean)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor::.ctor(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor::.ctor(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor::.ctor(System.Int32)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ElseConstructor::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor::.ctor(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor::.ctor(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor::.ctor(System.Int32)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/IfConstructor::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestDataFlowWithAnnotation(System.Type)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestDataFlowWithAnnotation(System.Type)" e="TypeSpec:System.Reflection.ConstructorInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestDataFlowWithAnnotation(System.Type)" e="Method:System.Reflection.ConstructorInfo[] System.Type::GetConstructors(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestDataFlowType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestDataFlowType()" e="TypeDef:System.Type" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestDataFlowType()" e="TypeSpec:System.Reflection.ConstructorInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestDataFlowType()" e="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::FindType()" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::FindType()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestDataFlowType()" e="Method:System.Reflection.ConstructorInfo[] System.Type::GetConstructors(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::FindType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Type Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::FindType()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNoValue()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNoValue()" e="TypeDef:System.Type" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNoValue()" e="TypeDef:System.Type" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNoValue()" e="TypeSpec:System.Reflection.ConstructorInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNoValue()" e="Method:System.RuntimeTypeHandle System.Type::get_TypeHandle()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNoValue()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNoValue()" e="Method:System.Reflection.ConstructorInfo[] System.Type::GetConstructors()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNullType()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNullType()" e="TypeDef:System.Type" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNullType()" e="TypeSpec:System.Reflection.ConstructorInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestNullType()" e="Method:System.Reflection.ConstructorInfo[] System.Type::GetConstructors()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeSpec:System.Reflection.ConstructorInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Reflection.ConstructorInfo[] System.Type::GetConstructors(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.Int32,System.Int32,System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithUnknownBindingFlags(System.Reflection.BindingFlags)" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.String)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.String)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.String)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.Int32,System.Int32,System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.Int32,System.Int32,System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.Int32,System.Int32,System.Int32)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.Int32,System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.Int32,System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.Int32,System.Int32)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/UnknownBindingFlags::.ctor(System.Int32)" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithBindingFlags()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithBindingFlags()" e="TypeSpec:System.Reflection.ConstructorInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithBindingFlags()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithBindingFlags()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithBindingFlags()" e="Method:System.Reflection.ConstructorInfo[] System.Type::GetConstructors(System.Reflection.BindingFlags)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithBindingFlags()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithBindingFlags()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags::.ctor(System.String)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestWithBindingFlags()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags::.ctor(System.String)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags::.ctor(System.String)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags::.ctor(System.String)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/ConstructorsBindingFlags::.ctor()" e="Method:System.Void System.Object::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestGetConstructors()" e="TypeDef:System.Void" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestGetConstructors()" e="TypeSpec:System.Reflection.ConstructorInfo[]" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestGetConstructors()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors:test.exe" />
	<edge mark="1" b="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors:test.exe" e="Module:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestGetConstructors()" e="Method:System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestGetConstructors()" e="Method:System.Reflection.ConstructorInfo[] System.Type::GetConstructors()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestGetConstructors()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors::.ctor()" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestGetConstructors()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors::.ctor(System.Int32)" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection::TestGetConstructors()" e="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors::.ctor(System.Int32)" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors::.ctor(System.Int32)" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors::.ctor(System.Int32)" e="Method:System.Void System.Object::.ctor()" />
	<edge b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors::.ctor()" e="TypeDef:Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors:test.exe" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors::.ctor()" e="TypeDef:System.Void" />
	<edge mark="1" b="Method:System.Void Mono.Linker.Tests.Cases.Reflection.ConstructorsUsedViaReflection/SimpleGetConstructors::.ctor()" e="Method:System.Void System.Object::.ctor()" />
</dependencies>