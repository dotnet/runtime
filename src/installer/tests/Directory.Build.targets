<Project>

  <Target Name="SetupTestContextVariables"
          Condition="'$(IsTestProject)' == 'true'"
          DependsOnTargets="
            GetProductVersions;
            DetermineTestOutputDirectory"
          BeforeTargets="Build">
    <PropertyGroup>
      <!--
        The tests use the TEST_ARTIFACTS variable to determine the artifacts folder and then later
        compare that path to its expected path. So, the TEST_ARTIFACTS variable has to have system
        specific path separators or the string compoarison will fail.
      -->
      <DirectorySeparatorChar>$([System.IO.Path]::DirectorySeparatorChar)</DirectorySeparatorChar>
      <SystemPathTestsOutputDir>$(TestsOutputDir.Replace('/', '$(DirectorySeparatorChar)'))</SystemPathTestsOutputDir>
      <SystemPathTestsOutputDir>$(SystemPathTestsOutputDir.Replace('\', '$(DirectorySeparatorChar)'))</SystemPathTestsOutputDir>

      <!-- This is defined when building in Visual Studio, not DotNetRoot. -->
      <DotNetRoot Condition="'$(DotNetRoot)' == ''">$(NetCoreRoot)</DotNetRoot>
    </PropertyGroup>

    <!--
      Fetch the package version of Microsoft.NETCore.App. Use the runtime nupkg project because it
      always ships.

      Some test projects end in ".Tests", which Arcade detects and applies IsShipping=false. This
      makes ProductVersion non-stable, so we can't rely on the test project's ProductVersion to be
      the same as the package's version. Fetch this directly from the project to avoid guesswork.
    -->
    <MSBuild
      Projects="$(InstallerProjectRoot)pkg\sfx\Microsoft.NETCore.App\Microsoft.NETCore.App.Ref.sfxproj"
      Targets="ReturnProductVersion">
      <Output TaskParameter="TargetOutputs" PropertyName="NETCoreAppRuntimePackageVersion" />
    </MSBuild>

    <!--
      Set up properties used inside tests. Write them to a text file so that they can be found
      inside the VS Test Explorer context the same way as the XUnit runner will find them.
      See https://github.com/dotnet/arcade/issues/3077.
    -->
    <ItemGroup>
      <TestContextVariable Include="TEST_ARTIFACTS=$(SystemPathTestsOutputDir)" />
      <TestContextVariable Include="BUILD_RID=$(OutputRID)" />
      <TestContextVariable Include="BUILD_ARCHITECTURE=$(TargetArchitecture)" />
      <TestContextVariable Include="BUILD_CONFIGURATION=$(Configuration)" />
      <TestContextVariable Include="MNA_VERSION=$(NETCoreAppRuntimePackageVersion)" />
      <TestContextVariable Include="MNA_TFM=$(NetCoreAppCurrent)" />
      <TestContextVariable Include="TEST_ASSETS_OUTPUT=$(TestArtifactsOutputRoot)" />
    </ItemGroup>

    <WriteLinesToFile
      File="$(OutDir)TestContextVariables.txt"
      Overwrite="true"
      Lines="@(TestContextVariable)" />
  </Target>

  <Target Name="DetermineTestOutputDirectory">
    <PropertyGroup>
      <TestsOutputName Condition="'$(TestsOutputName)' == ''">$(MSBuildProjectName)</TestsOutputName>
      <TestsOutputDir Condition="'$(TestsOutputDir)' == ''">$(TestArtifactsOutputRoot)$(TestsOutputName)/</TestsOutputDir>
    </PropertyGroup>
  </Target>

  <Target Name="RemoveOOBPackageReference" AfterTargets="ResolvePackageAssets">

    <!-- Tests have some dependencies that use the System.Text.Json package (HostModel, DependencyModel),
         but the tests should just use the framework on which they are run if possible Explicitly remove
         the item if the target framework version for the test matches the referenced package version. -->
    <ItemGroup>
      <RuntimeCopyLocalItems Remove="@(RuntimeCopyLocalItems)"
                             Condition="'%(NuGetPackageId)' == 'System.Text.Json' and $(SystemTextJsonVersion.StartsWith('$(_TargetFrameworkVersionWithoutV)'))" />
    </ItemGroup>
  </Target>

  <!-- Properties used by runsettings.targets -->
  <PropertyGroup>
    <RunSettingsDotNetHostPath>$(DotNetTool)</RunSettingsDotNetHostPath>
    <RunSettingsTestCaseFilter>$(TestCaseFilter)</RunSettingsTestCaseFilter>
  </PropertyGroup>

  <Import Project="$(RepositoryEngineeringDir)testing\runsettings.targets"
          Condition="'$(IsTestProject)' == 'true'" />

  <Import Project="$([MSBuild]::GetPathOfFileAbove(Directory.Build.targets, $(MSBuildThisFileDirectory)..))" />
</Project>
