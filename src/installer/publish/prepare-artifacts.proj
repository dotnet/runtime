<Project DefaultTargets="Build">
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  
  <!-- When doing post build sign, pull in the arcade sign.props file, which will
       create some initial sign groups and then pulls in the repo's custom Signing.props overrides.
       Before importing the signing props. Set PrepareArtifactst=true. Depending on context (SDK project vs. not),
       the initial imports of livebuilds.targets and Configuration.props are already imported and thus cannot
       be imported again. Without those imports, the globbing of files to sign will not work properly. -->
  <PropertyGroup>
    <PrepareArtifacts>true</PrepareArtifacts>
  </PropertyGroup>
  <Import Project="../tools/Sign.props" Sdk="Microsoft.DotNet.Arcade.Sdk" />

  <UsingTask TaskName="GenerateChecksums" AssemblyFile="$(InstallerTasksAssemblyPath)" />

  <PropertyGroup>
    <SuppressFinalPackageVersion>true</SuppressFinalPackageVersion>
  </PropertyGroup>

  <!-- Pulled from arcade's publish.proj see https://github.com/dotnet/arcade/issues/5790 for
       issue on making this common in arcade so it doesn't have to be duplicated here -->
  <PropertyGroup>
    <CollectionUri>$(SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)</CollectionUri>

    <!-- When we have dev.azure.com/<account>/ -->
    <AzureDevOpsAccount Condition="$(CollectionUri.IndexOf('dev.azure.com')) >= 0">$(CollectionUri.Split('/')[3])</AzureDevOpsAccount>

    <!-- When we have <account>.visualstudio.com -->
    <AzureDevOpsAccount Condition="$(CollectionUri.IndexOf('visualstudio.com')) >= 0">$(CollectionUri.Split('.')[0].Split('/')[2])</AzureDevOpsAccount>
  </PropertyGroup>

  <!--
    The new Maestro/BAR build model keeps separate Azure DevOps and GitHub build information.
    The GitHub information will be extracted based on the Azure DevOps repository.
  -->
  <ItemGroup>
    <ManifestBuildData Include="InitialAssetsLocation=$(SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$(SYSTEM_TEAMPROJECT)/_apis/build/builds/$(BUILD_BUILDID)/artifacts" />
    <ManifestBuildData Include="AzureDevOpsBuildId=$(BUILD_BUILDID)" />
    <ManifestBuildData Include="AzureDevOpsBuildDefinitionId=$(SYSTEM_DEFINITIONID)" />
    <ManifestBuildData Include="AzureDevOpsAccount=$(AzureDevOpsAccount)" />
    <ManifestBuildData Include="AzureDevOpsProject=$(SYSTEM_TEAMPROJECT)" />
    <ManifestBuildData Include="AzureDevOpsBuildNumber=$(BUILD_BUILDNUMBER)" />
    <ManifestBuildData Include="AzureDevOpsRepository=$(BUILD_REPOSITORY_URI)" />
    <ManifestBuildData Include="AzureDevOpsBranch=$(BUILD_SOURCEBRANCH)" />
  </ItemGroup>

  <Target Name="CreateChecksums">
    <ItemGroup>
      <ArtifactsForGeneratingChecksums
        Include="@(UploadToBlobStorageFile)"
        DestinationPath="%(FullPath)$(ChecksumExtension)" />

      <GeneratedChecksumFile Include="@(ArtifactsForGeneratingChecksums -> '%(DestinationPath)')" />
    </ItemGroup>

    <GenerateChecksums Items="@(ArtifactsForGeneratingChecksums)" />
  </Target>

  <Target Name="PreparePublishToAzureBlobFeed"
          DependsOnTargets="GetProductVersions;FindDownloadedArtifacts">
    <Error Condition="'$(PackagesUrl)'==''" Text="Missing property PackagesUrl" />

    <PropertyGroup>
      <AssetManifestFilename>Manifest.xml</AssetManifestFilename>
      <AssetManifestFile>$(ArtifactsLogDir)AssetManifest/$(AssetManifestFilename)</AssetManifestFile>

      <!-- Create temp dir to store generated asset manifest, per Arcade guidance. -->
      <TempWorkingDir>$(ArtifactsObjDir)TempWorkingDir\$([System.Guid]::NewGuid())\</TempWorkingDir>
      
      <ProductVersionTxtContents Condition="'$(StabilizePackageVersion)'=='true'">$(ProductionVersion)</ProductVersionTxtContents>
      <ProductVersionTxtContents Condition="'$(StabilizePackageVersion)'!='true'">$(ProductVersion)</ProductVersionTxtContents>
    </PropertyGroup>

    <!-- Generate productVersion.txt containing the value of $(PackageVersion) -->
    <WriteLinesToFile
      File="$(ArtifactsShippingPackagesDir)productVersion.txt"
      Lines="$(ProductVersionTxtContents)"
      Overwrite="true"
      Encoding="ASCII" />

    <!-- Generate runtime-productVersion.txt containing the value of $(PackageVersion) -->
    <WriteLinesToFile
      File="$(ArtifactsShippingPackagesDir)runtime-productVersion.txt"
      Lines="$(ProductVersionTxtContents)"
      Overwrite="true"
      Encoding="ASCII" />
      
    <ItemGroup>
      <ItemsToPush Remove="@(ItemsToPush)" />

      <ItemsToPush Include="@(ShippingNupkgToPublishFile)" />
      <ItemsToPush Include="@(NonShippingNupkgToPublishFile)" ManifestArtifactData="NonShipping=true" />
      <ItemsToPush Include="@(SymbolNupkgToPublishFile)" />
      
      <ItemsToPush
        Include="@(UploadToBlobStorageFile)"
        Exclude="@(NupkgToPublishFile);@(SymbolNupkgToPublishFile)">
        <RelativeBlobPath>$(InstallersRelativePath)%(Filename)%(Extension)</RelativeBlobPath>
        <PublishFlatContainer>true</PublishFlatContainer>
      </ItemsToPush>

      <ItemsToPush Include="@(GeneratedChecksumFile)">
        <RelativeBlobPath>$(InstallersRelativePath)%(Filename)%(Extension)</RelativeBlobPath>
        <Category>Checksum</Category>
        <PublishFlatContainer>true</PublishFlatContainer>
      </ItemsToPush>

      <ItemsToPush Include="$(ArtifactsShippingPackagesDir)productVersion.txt">
        <RelativeBlobPath>$(InstallersRelativePath)productVersion.txt</RelativeBlobPath>
        <PublishFlatContainer>true</PublishFlatContainer>
      </ItemsToPush>

      <ItemsToPush Include="$(ArtifactsShippingPackagesDir)runtime-productVersion.txt">
        <RelativeBlobPath>$(InstallersRelativePath)runtime-productVersion.txt</RelativeBlobPath>
        <PublishFlatContainer>true</PublishFlatContainer>
      </ItemsToPush>

    </ItemGroup>

    <!-- Push items to AzDO as build artifacts, generating the asset manifest as a side effect. -->
    <PushToAzureDevOpsArtifacts
      AzureDevOpsCollectionUri="$(SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)"
      AzureDevOpsProject="$(SYSTEM_TEAMPROJECT)"
      AzureDevOpsBuildId="$(BUILD_BUILDID)"
      ItemsToSign="@(ItemsToSignPostBuild)"
      StrongNameSignInfo="@(StrongNameSignInfo)"
      FileSignInfo="@(FileSignInfo)"
      FileExtensionSignInfo="@(FileExtensionSignInfo)"
      ItemsToPush="@(ItemsToPush)"
      ManifestBuildData="@(ManifestBuildData)"
      ManifestRepoUri="$(BUILD_REPOSITORY_NAME)"
      ManifestBranch="$(BUILD_SOURCEBRANCH)"
      ManifestBuildId="$(BUILD_BUILDNUMBER)"
      ManifestCommit="$(BUILD_SOURCEVERSION)"
      IsStableBuild="$(IsStableBuild)"
      AssetManifestPath="$(AssetManifestFile)"
      AssetsTemporaryDirectory="$(TempWorkingDir)"
      PublishingVersion ="3" />

    <!-- Copy the generated manifest to the build's artifacts -->
    <Copy SourceFiles="$(AssetManifestFile)" DestinationFolder="$(TempWorkingDir)" />

    <Message Importance="High" Text="Uploading $(AssetManifestFilename) to pipeline" />
    <Message
      Text="##vso[artifact.upload containerfolder=AssetManifests;artifactname=AssetManifests]$(TempWorkingDir)$(AssetManifestFilename)"
      Importance="High" />
  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <!--
    Take assets from the build jobs, prepare them for publishing (signing, arrangement) then upload
    them to the pipeline for Arcade and custom steps to publish.
  -->
  <Target Name="Build"
          DependsOnTargets="
            FindDownloadedArtifacts;
            CreateChecksums;
            PreparePublishToAzureBlobFeed">
    <Message Importance="High" Text="Complete!" />
  </Target>

</Project>
