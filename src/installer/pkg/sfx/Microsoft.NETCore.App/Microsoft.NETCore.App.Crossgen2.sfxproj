<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  <Import Project="Sdk.props" Sdk="Microsoft.DotNet.SharedFramework.Sdk" />

  <PropertyGroup>
    <!-- Crossgen is not used for Mono, and does not currently create freebsd packages -->
    <SkipBuild Condition="'$(RuntimeFlavor)' == 'Mono' or '$(RuntimeIdentifier)' == 'freebsd-x64'">true</SkipBuild>
    <PlatformPackageType>ToolPack</PlatformPackageType>
    <SharedFrameworkName>$(SharedFrameworkName).Crossgen2</SharedFrameworkName>
    <PgoSuffix Condition="'$(PgoInstrument)' != ''">.PGO</PgoSuffix>
    <OverridePackageId>$(SharedFrameworkName)$(PgoSuffix).$(RuntimeIdentifier)</OverridePackageId>
    <ArchiveName>dotnet-crossgen2</ArchiveName>
    <SharedFrameworkHostFileNameOverride>crossgen2</SharedFrameworkHostFileNameOverride>
    <!-- Build this pack for any RID if building from source. Otherwise, only build select RIDs. -->
    <RuntimeIdentifiers Condition="'$(DotNetBuildFromSource)' != 'true'">linux-x64;linux-musl-x64;linux-arm;linux-musl-arm;linux-arm64;linux-musl-arm64;freebsd-x64;osx-x64;osx-arm64;win-x64;win-x86;win-arm64;win-arm</RuntimeIdentifiers>
    <GenerateInstallers>false</GenerateInstallers>
    <HostJsonTargetPath>tools/</HostJsonTargetPath>
    <PermitDllAndExeFilesLackingFileVersion>true</PermitDllAndExeFilesLackingFileVersion>
    <!-- Publishing as single-file or NativeAOT means we can't examine the interior DLLs -->
    <ShouldVerifyClosure>false</ShouldVerifyClosure>
  </PropertyGroup>

  <Target Name="PublishCrossgen"
          BeforeTargets="GetFilesToPackage">

    <!-- Copy System.Private.CoreLib from the coreclr bin directory to the runtime pack directory,
         as we always need the copy of System.Private.CoreLib that matches exactly with the runtime. -->
    <Copy SourceFiles="$(CoreCLRArtifactsPath)System.Private.CoreLib.dll"
          DestinationFolder="$(MicrosoftNetCoreAppRuntimePackNativeDir)"
          SkipUnchangedFiles="true" />

    <MSBuild Projects="$(RepoRoot)src/coreclr/tools/aot/crossgen2/crossgen2.csproj"
             Properties="RunningPublish=true
              ;RuntimeIdentifier=$(RuntimeIdentifier)
              ;CoreCLRArtifactsPath=$(CoreCLRArtifactsPath)
              ;R2ROverridePath=$(MSBuildThisFileDirectory)ReadyToRun.targets"
             Targets="Restore;Publish;PublishItemsOutputGroup">
      <Output TaskParameter="TargetOutputs"
              ItemName="_RawCrossgenPublishFiles" />
    </MSBuild>

    <ItemGroup>
      <_CrossgenPublishFiles Include="@(_RawCrossgenPublishFiles->'%(OutputPath)')"
                             KeepMetadata="REMOVE_ALL" />
    </ItemGroup>
    <ItemGroup Condition="'$(NativeAotSupported)' != 'true'">
      <FilesToPackage Include="@(_CrossgenPublishFiles)"
                      Exclude="*.pdb;*.h;*.lib"
                      TargetPath="tools/" />
    </ItemGroup>
    <ItemGroup Condition="'$(NativeAotSupported)' == 'true'">
      <!-- Treat all native aot assets as native runtime assets -->
      <FilesToPackage Include="@(_CrossgenPublishFiles->Distinct())"
                          Condition="'%(Extension)' != '.pdb'"
                          TargetPath="tools/" />
    </ItemGroup>
  </Target>

  <Target Name="RunPublishedCrossgen" AfterTargets="PublishCrossgen"
          Condition="'$(TargetOs)' == '$(HostOs)' and '$(TargetArchitecture)' == '$(BuildArchitecture)'">
    <!-- Run the published crossgen if we're not cross-compiling -->
    <Exec Command="@(FilesToPackage) $(CoreCLRArtifactsPath)IL/System.Private.CoreLib.dll --out $(IntermediateOutputPath)S.P.C.tmp" Condition="'%(FileName)%(Extension)' == 'crossgen2$(ExeSuffix)'"
          ConsoleToMsBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="CrossgenOutput" />
      <Output TaskParameter="ExitCode" PropertyName="CrossgenExitCode" />
    </Exec>
    <Error Text="Crossgen failed with code $(CrossgenExitCode), output: $(CrossgenOutput)" Condition="$(CrossgenExitCode) != 0" />
  </Target>

  <PropertyGroup>
    <TargetOSComponent>unix</TargetOSComponent>
    <TargetOSComponent Condition="'$(TargetOS)' == 'windows'">win</TargetOSComponent>
    <TargetSpec>$(TargetOSComponent)-$(TargetArchitecture)</TargetSpec>
  </PropertyGroup>

  <Target Name="AddCrossgen2SymbolFilesToPackage" BeforeTargets="GetFilesToPackage">
    <ItemGroup>
      <_Crossgen2SymbolFilesToPackage Include="@(Reference->'$(CoreCLRArtifactsPath)PDB\%(FileName).pdb')" />
      <!-- Symbol files for JIT libraries are placed in a different location for Windows builds -->
      <_Crossgen2SymbolFilesToPackage Include="@(NativeRuntimeAsset->'$(CoreCLRArtifactsPdbDir)%(FileName).pdb')" Condition="'$(TargetOS)' == 'windows' and '%(FileName)' != 'crossgen2'" />
      <_Crossgen2SymbolFilesToPackage Include="@(NativeRuntimeAsset->'$(CoreCLRArtifactsPath)%(FileName)%(Extension)$(SymbolsSuffix)')" Condition="'$(TargetOS)' != 'windows' and '%(FileName)' != 'crossgen2'" />
      <_Crossgen2SymbolFilesToPackage Remove="@(_Crossgen2SymbolFilesToPackage)" Condition="!Exists('%(Identity)')" />

      <_SymbolFilesToPackage Include="@(_Crossgen2SymbolFilesToPackage)" TargetPath="tools/" />
    </ItemGroup>
  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <Import Project="Sdk.targets" Sdk="Microsoft.DotNet.SharedFramework.Sdk" />

  <Target Name="GetFilesToPublish">
    <MSBuild Projects="$(MSBuildProjectFullPath)"
          Targets="_GetAllSharedFrameworkFiles"
          RemoveProperties="OutputPath;SymbolsOutputPath">
      <Output TaskParameter="TargetOutputs" ItemName="_FilesToPackage" />
    </MSBuild>
    <ItemGroup>
      <_PackagedFilesToPublish Include="@(_FilesToPackage)" Condition="'%(_FilesToPackage.PackOnly)' != 'true'" />
    </ItemGroup>
    <ItemGroup>
      <FilesToPublish Include="@(_PackagedFilesToPublish)"
                       TargetPath="" />
    </ItemGroup>
  </Target>

</Project>
