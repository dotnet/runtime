<Project>
  <PropertyGroup>
    <IncludeFallbacksInDepsFile>true</IncludeFallbacksInDepsFile>
    <GetSharedFrameworkFilesForReadyToRunDependsOn>
        AddRuntimeFilesToPackage;
        AddFrameworkFilesToPackage
    </GetSharedFrameworkFilesForReadyToRunDependsOn>
    <!-- These components are installed by the root shared framework, but not others. -->
    <IncludeWerRelatedKeys>true</IncludeWerRelatedKeys>
    <IncludeBreadcrumbStoreFolder>true</IncludeBreadcrumbStoreFolder>
    <MacOSPackageDescription>The .NET Shared Framework</MacOSPackageDescription>
  </PropertyGroup>

  <!-- Include the .NET host components here. -->
  <ItemGroup Condition="'$(UsesMuxerHostModel)' == 'true'">
    <!--
      hostpolicy and hostfxr aren't in the platform manifest in the ref pack and cannot be without breaking things upstack.
      We add the entries here to ensure that we don't fail the validation that every file included in the runtime pack is in the platform manifest
      without adding the entries to the manifest in the ref pack.
    -->
    <PlatformManifestFileEntry Include="hostpolicy.dll" IsNative="true" />
    <PlatformManifestFileEntry Include="libhostpolicy.so" IsNative="true" />
    <PlatformManifestFileEntry Include="libhostpolicy.dylib" IsNative="true" />
    <PlatformManifestFileEntry Include="hostfxr.dll" IsNative="true" />
    <PlatformManifestFileEntry Include="libhostfxr.so" IsNative="true" />
    <PlatformManifestFileEntry Include="libhostfxr.dylib" IsNative="true" />

    <_HostFiles Include="$(DotNetHostBinDir)/$(LibPrefix)hostpolicy$(LibSuffix)" />
    <_HostFiles Include="$(DotNetHostBinDir)/$(LibPrefix)hostfxr$(LibSuffix)" PackOnly="true" />
    <NativeRuntimeAsset Include="@(_HostFiles)" />

    <_HostSymbolFiles Include="@(_HostFiles->'%(RootDir)%(Directory)PDB/%(Filename)$(SymbolsSuffix)')" Condition="'$(TargetOS)' == 'windows'" />
    <_HostSymbolFiles Include="@(_HostFiles->'%(RootDir)%(Directory)%(Filename)%(Extension)$(SymbolsSuffix)')" Condition="'$(TargetOS)' != 'windows'" />
    <_SymbolFilesToPackage Include="@(_HostSymbolFiles->Exists())" IsNative="true" />
  </ItemGroup>

  <Target Name="AddRuntimeFilesToPackage" DependsOnTargets="ResolveRuntimeFilesFromLocalBuild">
    <ItemGroup>
      <RuntimeFiles Condition="'%(RuntimeFiles.IsNative)' == 'true'">
        <TargetPath>runtimes/$(RuntimeIdentifier)/native</TargetPath>
      </RuntimeFiles>

      <ReferenceCopyLocalPaths Include="@(RuntimeFiles)" />
    </ItemGroup>
  </Target>

  <Target Name="AddFrameworkFilesToPackage" DependsOnTargets="ResolveLibrariesFromLocalBuild">
    <ItemGroup>
      <ReferenceCopyLocalPaths Include="@(LibrariesRuntimeFiles)"
        Condition="'%(LibrariesRuntimeFiles.Extension)' != '$(StaticLibSuffix)' or '$(IncludeStaticLibrariesInPack)' == 'true'">
        <TargetPath Condition="'%(LibrariesRuntimeFiles.NativeSubDirectory)' != ''">runtimes/$(RuntimeIdentifier)/native/%(LibrariesRuntimeFiles.NativeSubDirectory)%(RecursiveDir)</TargetPath>
      </ReferenceCopyLocalPaths>
    </ItemGroup>
  </Target>

  <PropertyGroup Condition="'$(IncludeDiaSymReaderNative)' == 'true'">
    <!-- DiaSymReader for the target architecture, which is placed into the package -->
    <_diaSymTargetArch>$(TargetArchitecture)</_diaSymTargetArch>
    <_diaSymTargetArch Condition="'$(TargetArchitecture)' == 'x64'">amd64</_diaSymTargetArch>
    <_diaSymReaderTargetArchPath>$(PkgMicrosoft_DiaSymReader_Native)/runtimes/win/native/Microsoft.DiaSymReader.Native.$(_diaSymTargetArch).dll</_diaSymReaderTargetArchPath>
  </PropertyGroup>

  <ItemGroup Condition="'$(IncludeDiaSymReaderNative)' == 'true'">
    <NativeRuntimeAsset Include="$(_diaSymReaderTargetArchPath)" />
  </ItemGroup>

  <!-- VS uses this file to show the target framework in the drop down. -->
  <Target Name="CreateDotVersionFile"
          DependsOnTargets="InitializeSourceControlInformationFromSourceControlManager"
          BeforeTargets="GetFilesToPublish"
          Condition="'$(EnableSourceControlManagerQueries)' == 'true'">
    <ItemGroup>
      <_VersionFile Include="$(IntermediateOutputPath).version" TargetPath="shared/$(SharedFrameworkName)/$(Version)/" />
    </ItemGroup>
    <WriteLinesToFile
      Lines="$(SourceRevisionId);$(Version)"
      File="@(_VersionFile)"
      Overwrite="true"
      WriteOnlyWhenDifferent="true" />
    <ItemGroup>
      <FilesToPublish Include="@(_VersionFile)" />
      <FileWrites Include="@(_VersionFile)" />
    </ItemGroup>
  </Target>

  <Import Project="$(Crossgen2SdkOverridePropsPath)" Condition="'$(PublishReadyToRun)' == 'true' and '$(Crossgen2SdkOverridePropsPath)' != ''" />
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <Import Project="Sdk.targets" Sdk="Microsoft.DotNet.SharedFramework.Sdk" />
  <Import Project="$(RepositoryEngineeringDir)targetingpacks.targets" />
  <Import Project="$(RepositoryEngineeringDir)codeOptimization.targets" />
  <Import Project="$(Crossgen2SdkOverrideTargetsPath)" Condition="'$(PublishReadyToRun)' == 'true' and '$(Crossgen2SdkOverrideTargetsPath)' != ''" />
</Project>
