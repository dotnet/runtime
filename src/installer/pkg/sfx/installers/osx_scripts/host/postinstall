#!/bin/bash
#
# Licensed to the .NET Foundation under one or more agreements.
# The .NET Foundation licenses this file to you under the MIT license.
#

PACKAGE=$1
INSTALL_DESTINATION=$2
[ "${InstallerTargetArchitecture}" == "x64" ] && X64_INSTALL_DESTINATION=$2 || X64_INSTALL_DESTINATION=$2/x64

# A temporary fix for the permissions issue(s)
chmod 755 $INSTALL_DESTINATION/dotnet

mkdir -p /etc/dotnet
# set install_location (legacy location) to x64 location (regardless of whether or not we're installing x64)
echo $X64_INSTALL_DESTINATION | tee /etc/dotnet/install_location
# set install_location_arch to point to this installed location
echo $INSTALL_DESTINATION | tee /etc/dotnet/install_location_${InstallerTargetArchitecture}

# if we're running on the native architecture
if [[ "$(uname -m)" =~ ${UnameMachineRegex} && "$(sysctl -i -n sysctl.proc_translated)" != "1" ]]; then
    # Add the installation directory to the system-wide paths
    # But first create the directory if it doesn't exist
    mkdir -p /etc/paths.d

    # Check if /dotnet/Settings.plist exists and read ConfigureHostPath to see if we should append to PATH instead of overwriting it
    SETTINGS_PLIST="/Library/Preferences/dotnet/Settings.plist"
    CONFIGURE_HOST_PATH=""

    if [ -f "$SETTINGS_PLIST" ]; then
        # Use defaults to read the ConfigureHostPath setting, it has been around in MacOS since 2001: https://developer.apple.com/documentation/foundation/userdefaults
        # The 2>/dev/null suppresses error output if the key doesn't exist
        CONFIGURE_HOST_PATH=$(defaults read "$SETTINGS_PLIST" ConfigureHostPath 2>/dev/null || echo "")
    fi

    if [ "$CONFIGURE_HOST_PATH" = "0" ]; then
        # Per paths_helper(8) spec (https://www.unix.com/man-page/osx/8/path_helper/), each path must be on its own line
        echo $INSTALL_DESTINATION >> /etc/paths.d/dotnet
    else
        # Default behavior: overwrite the file
        echo $INSTALL_DESTINATION | tee /etc/paths.d/dotnet
    fi
fi

exit 0
