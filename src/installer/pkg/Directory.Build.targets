<Project>
  <Import Project="$([MSBuild]::GetPathOfFileAbove(Directory.Build.targets, $(MSBuildThisFileDirectory)..))" />

  <!--
    Add hook for depproj build to respect OrderProjectReferences like pkgproj does. "BeforeTargets"
    runs after "DependsOnTargets", so hook each crossgen target individually to ensure this happens
    before any of them.

    TODO: (Consolidation) Add this target properly to the sharedfx tooling. https://github.com/dotnet/runtime/issues/749
  -->
  <Target Name="EnsureOrderProjectReferencesBuilt"
          BeforeTargets="
            CrossGen;
            CreateCrossGenImages;
            CreateCrossGenSymbols">
    <MSBuild Projects="@(OrderProjectReference)" Targets="Build" />
  </Target>

  <!--
    Get branding names for the installers.
  -->
  <Target Name="GetInstallerBrandingNames"
          DependsOnTargets="GetProductVersions">
    <PropertyGroup
      Condition="
        '$(ReleaseBrandSuffix)' == '' and
        '$(PreReleaseVersionLabel)' != '' and
        '$(PreReleaseVersionIteration)' != ''">
      <!-- Convert 'preview.7' to 'Preview 7'.
          'preview' will come from the pre-release version iteration and the numeric value
          will be the PreReleaseVersionIteration. -->

      <ReleaseBrandSuffix>$(PreReleaseVersionLabel.Substring(0,1).ToUpperInvariant())</ReleaseBrandSuffix>
      <ReleaseBrandSuffix>$(ReleaseBrandSuffix)$(PreReleaseVersionLabel.Substring(1))</ReleaseBrandSuffix>
      <ReleaseBrandSuffix>$(ReleaseBrandSuffix) $(PreReleaseVersionIteration)</ReleaseBrandSuffix>
    </PropertyGroup>

    <PropertyGroup>
      <ProductBrandPrefix Condition="'$(ProductBrandPrefix)' == ''">Microsoft .NET</ProductBrandPrefix>
      <ProductBrandSuffix>$(ProductionVersion)</ProductBrandSuffix>
      <ProductBrandSuffix Condition="'$(ReleaseBrandSuffix)'!=''">$(ProductionVersion) $(ReleaseBrandSuffix)</ProductBrandSuffix>

      <SharedHostBrandName>$(ProductBrandPrefix) Host - $(ProductBrandSuffix)</SharedHostBrandName>
      <HostFxrBrandName>$(ProductBrandPrefix) Host FX Resolver - $(ProductBrandSuffix)</HostFxrBrandName>
      <TargetingPackBrandName>$(ProductBrandPrefix) Targeting Pack - $(ProductBrandSuffix)</TargetingPackBrandName>
      <AppHostPackBrandName>$(ProductBrandPrefix) AppHost Pack - $(ProductBrandSuffix)</AppHostPackBrandName>
      <Crossgen2PackBrandName>$(ProductBrandPrefix) Crossgen2 Pack - $(ProductBrandSuffix)</Crossgen2PackBrandName>
      <SharedFrameworkBrandName>$(ProductBrandPrefix) Runtime - $(ProductBrandSuffix)</SharedFrameworkBrandName>

      <SharedHostComponentId>com.microsoft.dotnet.sharedhost.component.osx.$(TargetArchitecture)</SharedHostComponentId>
      <HostFxrComponentId>com.microsoft.dotnet.hostfxr.$(HostResolverVersion).component.osx.$(TargetArchitecture)</HostFxrComponentId>
      <SharedFxComponentId>com.microsoft.dotnet.sharedframework.$(SharedFrameworkName).$(SharedFrameworkNugetVersion).component.osx.$(TargetArchitecture)</SharedFxComponentId>
      <SharedPackageId>com.microsoft.dotnet.$(SharedFrameworkName).$(SharedFrameworkNugetVersion).osx.$(TargetArchitecture)</SharedPackageId>
    </PropertyGroup>
  </Target>

  <!--
    Check if the deb package build tool prereq is available.
    This issue tracks adding a way to raise this as a build error: https://github.com/dotnet/core-setup/issues/5396
  -->
  <Target Name="TestDebuild">
    <!-- run Debuild -->
    <Exec
      Command="/usr/bin/env debuild -h > /dev/null 2>&amp;1"
      ContinueOnError="true"
      IgnoreExitCode="true"
      IgnoreStandardErrorWarningFormat="true">
      <Output TaskParameter="ExitCode" PropertyName="DebuildExitCode" />
    </Exec>

    <!-- Check if it successfully showed us a help message. -->
    <PropertyGroup>
      <DebuildPresent>false</DebuildPresent>
      <DebuildPresent Condition=" '$(DebuildExitCode)' == '0' ">true</DebuildPresent>
    </PropertyGroup>

    <Message Condition=" '$(DebuildPresent)'  != 'true' "
             Text="Debuild Not found, Debian packages will not be built."
             Importance="High" />
  </Target>

  <!--
    Check if the RPM package build tool prereq is available.
    This issue tracks adding a way to raise this as a build error: https://github.com/dotnet/core-setup/issues/5396
  -->
  <Target Name="TestFPMTool">
    <!-- run FPM  -->
    <Exec
      Command="/usr/bin/env fpm -h > /dev/null 2>&amp;1"
      ContinueOnError="true"
      IgnoreExitCode="true"
      IgnoreStandardErrorWarningFormat="true">
      <Output TaskParameter="ExitCode" PropertyName="FPMExitCode" />
    </Exec>

    <!-- Check if it successfully showed us a help message. -->
    <PropertyGroup>
      <FPMPresent>false</FPMPresent>
      <FPMPresent Condition=" '$(FPMExitCode)' == '0' ">true</FPMPresent>
    </PropertyGroup>

    <Message Condition=" '$(FPMPresent)'  != 'true' "
             Text="FPM tool Not found, RPM packages will not be built."
             Importance="High" />
  </Target>

  <Target Name="GenerateMsiVersionString">
    <PropertyGroup>
      <VersionPadding Condition="'$(VersionPadding)'==''">5</VersionPadding>
      <!-- Using the following default comparison date will produce versions that align with our internal build system. -->
      <VersionComparisonDate Condition="'$(VersionComparisonDate)'==''">1996-04-01</VersionComparisonDate>
    </PropertyGroup>

    <GenerateCurrentVersion
      SeedDate="$([System.DateTime]::Now.ToString(yyyy-MM-dd))"
      OfficialBuildId="$(OfficialBuildId)"
      ComparisonDate="$(VersionComparisonDate)"
      Padding="$(VersionPadding)">
      <Output PropertyName="BuildNumberMajor" TaskParameter="GeneratedVersion" />
      <Output PropertyName="BuildNumberMinor" TaskParameter="GeneratedRevision" />
    </GenerateCurrentVersion>

    <GenerateMsiVersion
      Major="$(MajorVersion)"
      Minor="$(MinorVersion)"
      Patch="$(PatchVersion)"
      BuildNumberMajor="$(BuildNumberMajor)"
      BuildNumberMinor="$(BuildNumberMajor)">
      <Output TaskParameter="MsiVersion" PropertyName="MsiVersionString" />
    </GenerateMsiVersion>
  </Target>

</Project>
