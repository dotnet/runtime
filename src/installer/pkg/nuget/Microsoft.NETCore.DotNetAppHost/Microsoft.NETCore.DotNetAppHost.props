<Project Sdk="Microsoft.Build.NoTargets">
  <PropertyGroup>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <!-- IncludeBuildOutput needs to be set to true to make NuGet include the passed in debug symbol files. -->
    <IncludeBuildOutput>true</IncludeBuildOutput>
    <TargetsForTfmSpecificDebugSymbolsInPackage>$(TargetsForTfmSpecificDebugSymbolsInPackage);AddRuntimeSpecificNativeSymbolToPackage</TargetsForTfmSpecificDebugSymbolsInPackage>
  </PropertyGroup>

  <ItemGroup>
    <NativeBinary Include="$(DotNetHostBinDir)/apphost$(ExeSuffix)" />
    <NativeBinary Include="$(DotNetHostBinDir)/$(LibPrefix)nethost$(LibSuffix)" />
    <NativeBinary Include="$(DotNetHostBinDir)/$(LibPrefix)nethost$(StaticLibSuffix)" />
    <NativeHeader Include="$(DotNetHostBinDir)/coreclr_delegates.h" />
    <NativeHeader Include="$(DotNetHostBinDir)/hostfxr.h" />
    <NativeHeader Include="$(DotNetHostBinDir)/nethost.h" />
  </ItemGroup>
  <ItemGroup Condition="'$(RuntimeFlavor)' != 'Mono'">
    <NativeBinary Include="$(DotNetHostBinDir)/singlefilehost$(ExeSuffix)" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetOS)' == 'windows'">
    <NativeBinary Include="$(DotNetHostBinDir)/comhost.dll" />
    <NativeBinary Include="$(DotNetHostBinDir)/ijwhost.dll" />
    <NativeBinary Include="$(DotNetHostBinDir)/ijwhost.lib" />
    <!-- The libnethost.lib is a static library for the nethost scenario.
        The symbols file is also shipped to enable users to fully debug
        binaries that link against the static version. -->
    <NativeBinary Include="$(DotNetHostBinDir)/libnethost.lib" />
    <_SymbolsToIncludeAlways Include="$(DotNetHostBinDir)PDB/libnethost.pdb" />
    <NativeBinary Include="$(DotNetHostBinDir)/libhostfxr.lib" />
    <_SymbolsToIncludeAlways Include="$(DotNetHostBinDir)PDB/libhostfxr.pdb" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetOS)' != 'windows'">
    <NativeBinary Include="$(DotNetHostBinDir)/$(LibPrefix)hostfxr$(StaticLibSuffix)" />
  </ItemGroup>

  <ItemGroup>
    <None Include="@(NativeBinary);@(NativeHeader);@(_SymbolsToIncludeAlways)"
          PackagePath="runtimes/$(OutputRID)/native"
          Pack="true" />
  </ItemGroup>

  <Target Name="AddRuntimeSpecificNativeSymbolToPackage">
    <ItemGroup>
      <_SymbolFiles Include="@(NativeBinary->'%(RootDir)%(Directory)PDB/%(Filename)$(SymbolsSuffix)')"
                    Condition="'$(TargetOS)' == 'windows'" />
      <_SymbolFiles Include="@(NativeBinary->'%(RootDir)%(Directory)%(Filename)%(Extension)$(SymbolsSuffix)')"
                    Condition="'$(TargetOS)' != 'windows'" />

        <!-- Remove symbols that are already shipped with implementation package -->
      <_SymbolFiles Remove="@(_SymbolsToIncludeAlways)" />
      <TfmSpecificDebugSymbolsFile Include="@(_SymbolFiles->Distinct()->Exists())"
                                   TargetPath="/runtimes/$(OutputRID)/native/%(Filename)%(Extension)"
                                   TargetFramework="$(TargetFramework)" />
    </ItemGroup>
  </Target>
</Project>
