<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Targets to enable building the NETCoreApp shared framework from a local CoreCLR and CoreFX build. -->
  
  <Target Name="OverrideRuntimeFilesFromPackageResolve" Condition="'$(CoreCLROverridePath)' != ''" BeforeTargets="GetFilesFromPackageResolve">
    <Error Condition="!Exists('$(CoreCLROverridePath)')" Text="The path provided to CoreCLROverridePath ($(CoreCLROverridePath)) does not exist." />
    <PropertyGroup>
      <CoreCLROverridePath>$([MSBuild]::NormalizeDirectory('$(CoreCLROverridePath)'))</CoreCLROverridePath>
    </PropertyGroup>
    <PropertyGroup>
      <CoreCLRCrossTargetComponentDirName Condition="'$(TargetArchitecture)' == 'arm64' and '$(BuildArchitecture)' != 'arm64'">x64</CoreCLRCrossTargetComponentDirName>
      <CoreCLRCrossTargetComponentDirName Condition="'$(TargetArchitecture)' == 'arm' and '$(BuildArchitecture)' != 'arm' and '$(TargetsWindows)' == 'true'">x86</CoreCLRCrossTargetComponentDirName>
      <CoreCLRCrossTargetComponentDirName Condition="'$(TargetArchitecture)' == 'arm' and '$(BuildArchitecture)' != 'arm' and '$(TargetsLinux)' == 'true'">x64</CoreCLRCrossTargetComponentDirName>
      <CoreCLRSharedFrameworkDir>$([MSBuild]::NormalizeDirectory('$(CoreCLROverridePath)','sharedFramework'))</CoreCLRSharedFrameworkDir>
      <CoreCLRCrossTargetComponentDir
        Condition="'$(CoreCLRCrossTargetComponentDirName)' != ''">$([MSBuild]::NormalizeDirectory('$(CoreCLROverridePath)','$(CoreCLRCrossTargetComponentDirName)','sharedFramework'))</CoreCLRCrossTargetComponentDir>
    </PropertyGroup>
    <ItemGroup>
      <CoreCLRFiles Include="$(CoreCLRSharedFrameworkDir)*.*" />
      <CoreCLRCrossTargetFiles
        Include="$(CoreCLRCrossTargetComponentDir)*.*"
        Condition="'$(CoreCLRCrossTargetComponentDir)' != ''"
        IsNative="true" />
      <CoreCLRFiles Include="$(CoreCLROverridePath)Redist/**/*.dll" />
      <CoreCLRFiles>
        <IsNative>true</IsNative>
      </CoreCLRFiles>
      <CoreCLRFiles Include="$(CoreCLROverridePath)System.Private.CoreLib.dll" />
      <CoreCLRFiles
        Include="
          $(CoreCLRSharedFrameworkDir)PDB/*.pdb;
          $(CoreCLRSharedFrameworkDir)PDB/*.dbg;
          $(CoreCLRSharedFrameworkDir)PDB/*.dwarf" />
      <CoreCLRFiles Include="$(CoreCLROverridePath)PDB/System.Private.CoreLib.pdb" />

      <CoreCLRSystemPrivateCoreLibNiSymbolFiles
        Include="$(CoreCLROverridePath)PDB/System.Private.CoreLib.ni.pdb" />
      <CoreCLRFiles
        Include="@(CoreCLRSystemPrivateCoreLibNiSymbolFiles)"
        Condition="Exists('%(Identity)')" />

      <CoreCLRCrossTargetFiles Condition="'$(CoreCLRCrossTargetComponentDir)' != ''"
        Include="
          $(CoreCLRCrossTargetComponentDir)PDB/*.pdb;
          $(CoreCLRCrossTargetComponentDir)PDB/*.dbg;
          $(CoreCLRCrossTargetComponentDir)PDB/*.dwarf" />

      <CoreCLRCrossTargetFiles>
        <TargetPath>runtimes/$(CoreCLRCrossTargetComponentDirName)_$(TargetArchitecture)/native</TargetPath>
      </CoreCLRCrossTargetFiles>

      <CoreCLRFiles Include="@(CoreCLRCrossTargetFiles)" />

      <!--
        Remove files we want to override from ReferenceCopyLocalPaths.

        Use distinct filenames: we may have a target arch file as well as cross-arch (build machine
        arch). In that case, the typical match-up condition fails:

          '@(CoreCLRFiles->'%(FileName)%(Extension)')' == '%(FileName)%(Extension)'

        We get 'clrjit.dll;clrjit.dll' == 'clrjit.dll', preventing clrjit.dll from being removed.
        Filtering CoreCLRFiles down to unique FileName+Extension items makes it work.
      -->
      <CoreCLRFileFileNameExtensions Include="@(CoreCLRFiles -> '%(FileName)%(Extension)')" />
      <ReferenceCopyLocalPaths
        Remove="@(ReferenceCopyLocalPaths)"
        Condition="'@(CoreCLRFileFileNameExtensions->Distinct())' == '%(FileName)%(Extension)'"/>

      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="$([System.String]::Copy('%(FileName)').StartsWith('mscordaccore_'))" />

      <ReferenceCopyLocalPaths Include="@(CoreCLRFiles)" NuGetPackageId="$(MicrosoftNETCoreRuntimeCoreCLRPackage)" />
    </ItemGroup>

    <Error Condition="'@(CoreCLRFiles)' == ''" Text="The path provided to CoreCLROverridePath ($(CoreCLROverridePath)) does not contain any files." />
  </Target>

  <Target Name="OverrideFrameworkFilesFromPackageResolve" Condition="'$(CoreFXOverridePath)' != ''" BeforeTargets="GetFilesFromPackageResolve">
    <Error Condition="!Exists('$(CoreFXOverridePath)')" Text="The path provided to CoreFXOverridePath ($(CoreFXOverridePath)) does not exist." />

    <!-- Determine Libraries OSGroup for this build. Copied from "local live-live" PR. -->
    <PropertyGroup>
      <CoreCLROSGroup Condition="'$(TargetsWindows)' == 'true'">Windows_NT</CoreCLROSGroup>
      <CoreCLROSGroup Condition="'$(TargetsLinux)' == 'true'">Linux</CoreCLROSGroup>
      <CoreCLROSGroup Condition="'$(TargetsOSX)' == 'true'">OSX</CoreCLROSGroup>
      <CoreCLROSGroup Condition="'$(TargetsFreeBSD)' == 'true'">FreeBSD</CoreCLROSGroup>
      <LibrariesOSGroup>$(CoreCLROSGroup)</LibrariesOSGroup>
    </PropertyGroup>

    <ItemGroup>
      <CoreFXReferenceItems
        Include="$([MSBuild]::NormalizeDirectory('$(CoreFXOverridePath)', 'bin', 'ref', 'microsoft.netcore.app', '$(Configuration)'))*"
        NuGetPackageId="$(MicrosoftPrivateCoreFxNETCoreAppPackage)" />

      <CoreFXReferenceCopyLocalItems
        Include="
          $([MSBuild]::NormalizeDirectory('$(CoreFXOverridePath)', 'bin', 'pkg', 'netcoreapp', 'runtime', '$(LibrariesOSGroup)-$(Configuration)-$(TargetArchitecture)'))*;
          $([MSBuild]::NormalizeDirectory('$(CoreFXOverridePath)', 'bin', 'native', 'netcoreapp-$(LibrariesOSGroup)-$(Configuration)-$(TargetArchitecture)'))*"
        NuGetPackageId="runtime.$(PackageRID).$(MicrosoftPrivateCoreFxNETCoreAppPackage)" />
    </ItemGroup>

    <Error Condition="'@(CoreFXReferenceItems)' == ''" Text="The path provided to CoreFXOverridePath ($(CoreFXOverridePath)) has no CoreFXReferenceItems." />
    <Error Condition="'@(CoreFXReferenceCopyLocalItems)' == ''" Text="The path provided to CoreFXOverridePath ($(CoreFXOverridePath)) has no CoreFXReferenceCopyLocalItems." />

    <ItemGroup>
      <OverriddenFrameworkReferenceFiles
        Include="@(Reference)"
        Condition="
          '@(CoreFXReferenceItems->'%(FileName)%(Extension)')' == '%(FileName)%(Extension)' And
          '@(CoreFXReferenceItems->'%(NuGetPackageId)')' == '%(NuGetPackageId)'">
        <CoreFXFile>@(CoreFXReferenceItems)</CoreFXFile>
      </OverriddenFrameworkReferenceFiles>

      <Reference Remove="@(OverriddenFrameworkReferenceFiles)" />
      <Reference Include="@(OverriddenFrameworkReferenceFiles->Metadata('CoreFXFile'))" />

      <OverriddenFrameworkImplementationFiles
        Include="@(ReferenceCopyLocalPaths)"
        Condition="
          '@(CoreFXReferenceCopyLocalItems->'%(FileName)%(Extension)')' == '%(FileName)%(Extension)' And
          '@(CoreFXReferenceCopyLocalItems->'%(NuGetPackageId)')' == '%(NuGetPackageId)'">
        <CoreFXFile>@(CoreFXReferenceCopyLocalItems)</CoreFXFile>
      </OverriddenFrameworkImplementationFiles>

      <OverriddenFrameworkImplementationFiles>
        <IsNative Condition="$([System.String]::new('%(Identity)').ToLowerInvariant().Replace('\', '/').Contains('/native/'))">true</IsNative>
      </OverriddenFrameworkImplementationFiles>

      <ReferenceCopyLocalPaths Remove="@(OverriddenFrameworkImplementationFiles)" />
      <ReferenceCopyLocalPaths Include="@(OverriddenFrameworkImplementationFiles->Metadata('CoreFXFile'))" />
    </ItemGroup>

    <ItemGroup Condition="'$(PackageTargetRuntime)' == ''">
      <_coreFXOverrideDocFiles
        Condition="'$(CoreFXOverridePath)' != '' And '%(NuGetPackageId)' == '$(MicrosoftPrivateCoreFxNETCoreAppPackage)'"
        Include="@(OverriddenFrameworkReferenceFiles->'$(CoreFXOverridePath)/../../bin/docs/%(FileName).xml')" />
      <_docFilesToPackage Include="@(_coreFXOverrideDocFiles)" Condition="Exists('%(Identity)')" />
    </ItemGroup>
  </Target>

  <Target Name="OverrideCrossgenToolPaths" DependsOnTargets="GetCorePackagePaths" AfterTargets="GetCrossgenToolPaths" BeforeTargets="CreateCrossGenImages">  
    <PropertyGroup Condition="'$(CoreCLROverridePath)' != ''">
      <_runtimeDirectory>$(CoreCLROverridePath)</_runtimeDirectory>
      <_crossgenPath>$([MSBuild]::NormalizePath('$(CoreCLROverridePath)', '$(_crossHostArch)', 'crossgen$(ApplicationFileExtension)'))</_crossgenPath>
      <_CoreLibSharedDirectory>$(CoreCLROverridePath)</_CoreLibSharedDirectory>
      <_jitPath>$([MSBuild]::NormalizePath('$(CoreCLROverridePath)', '$(_crossHostArch)', '$(LibraryFilePrefix)clrjit$(LibraryFileExtension)'))</_jitPath>
    </PropertyGroup>
  </Target>

  <!-- !!!BEGIN PATCHING Sharedfx SDK target -->
  <Target Name="GetFilesFromPackageResolve">
    <ItemGroup>
      <!-- RID-specific: include all runtime files. -->
      <RidSpecificFilesToPackage Include="@(ReferenceCopyLocalPaths)">
        <!-- ResolveNugetPackageAssets doesn't preserve the asset type (native),
             calculate it by looking for native in the path -->
        <IsNative Condition="$([System.String]::new('%(Identity)').ToLowerInvariant().Replace('\', '/').Contains('/native/'))">true</IsNative>
      </RidSpecificFilesToPackage>
      <!-- !!!BEGIN CHANGE Persist existing TargetPath. -->
      <RidSpecificFilesToPackage Condition="'%(RidSpecificFilesToPackage.TargetPath)' == ''">
      <!-- !!!END CHANGE -->
        <TargetPath Condition="'%(RidSpecificFilesToPackage.IsNative)' != 'true'">runtimes/$(PackageRID)/lib/$(PackageTargetFramework)</TargetPath>
        <TargetPath Condition="'%(RidSpecificFilesToPackage.IsNative)' == 'true'">runtimes/$(PackageRID)/native</TargetPath>
      </RidSpecificFilesToPackage>
      <!-- Ensure localization resource files make it to their subdirs. -->
      <RidSpecificFilesToPackage Condition="'%(RidSpecificFilesToPackage.DestinationSubDirectory)' != ''">
        <TargetPath>%(RidSpecificFilesToPackage.TargetPath)/%(RidSpecificFilesToPackage.DestinationSubDirectory)</TargetPath>
      </RidSpecificFilesToPackage>
    </ItemGroup>

    <ItemGroup Condition="'$(PackageTargetRuntime)' != ''">
      <FilesToPackage Include="@(RidSpecificFilesToPackage)" />
    </ItemGroup>

    <ItemGroup Condition="'$(PackageTargetRuntime)' == ''">
      <!-- Not RID-specific: include all reference files. -->
      <FilesToPackage Include="@(Reference)">
        <TargetPath>ref/$(PackageTargetFramework)</TargetPath>
      </FilesToPackage>

      <!-- include all doc files -->
      <_docFilesToPackage Include="%(FilesToPackage.RootDir)%(FilesToPackage.Directory)**\%(FilesToPackage.FileName).xml" />

      <FilesToPackage Include="@(_docFilesToPackage)">
        <TargetPath>ref/$(PackageTargetFramework)/%(RecursiveDir)</TargetPath>
      </FilesToPackage>
    </ItemGroup>

    <!-- Add versions file with the hashes of the repos we consume -->
    <ItemGroup Condition="'$(FrameworkPackageName)' != ''">
      <FilesToPackage Include="$(IntermediateOutputPath)\$(FrameworkPackageName).versions.txt">
        <TargetPath></TargetPath>
      </FilesToPackage>
    </ItemGroup>
  </Target>
  <!-- !!!END PATCHING -->

</Project>
