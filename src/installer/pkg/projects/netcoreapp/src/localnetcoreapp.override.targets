<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    Get paths from packages that are needed for crossgen. Only relevant for runtime-specific builds.
  -->
  <Target Name="GetCorePackagePaths"
          DependsOnTargets="ResolveReferences">
    <PropertyGroup>
      <_winmdPackageDir>$(NuGetPackageRoot)$(MicrosoftTargetingPackPrivateWinRTPackage.ToLowerInvariant())/$(MicrosoftTargetingPackPrivateWinRTVersion)/</_winmdPackageDir>
      <_diaSymReaderPackageDir>$(NuGetPackageRoot)microsoft.diasymreader.native/$(MicrosoftDiaSymReaderNativeVersion)/</_diaSymReaderPackageDir>
    </PropertyGroup>

    <PropertyGroup Condition="'$(TargetArchitecture)' == 'arm' AND '$(OS)' == 'Windows_NT'">
      <_crossHostArch>x86</_crossHostArch>
    </PropertyGroup>
    <PropertyGroup Condition="'$(TargetArchitecture)' == 'arm' AND '$(OS)' != 'Windows_NT'">
      <_crossHostArch>x64</_crossHostArch>
    </PropertyGroup>
    <PropertyGroup Condition="'$(TargetArchitecture)' == 'armel' AND '$(OS)' != 'Windows_NT'">
      <_crossHostArch>x64</_crossHostArch>
    </PropertyGroup>
    <PropertyGroup Condition="'$(TargetArchitecture)' == 'arm64' AND '$(BuildArchitecture)' != 'arm64'">
      <_crossHostArch>x64</_crossHostArch>
    </PropertyGroup>
    <PropertyGroup>
      <_crossDir Condition="'$(_crossHostArch)' != ''">/$(_crossHostArch)_$(TargetArchitecture)</_crossDir>
    </PropertyGroup>

    <ItemGroup>
      <_requiredProperty Include="_winmdPackageDir" />
    </ItemGroup>

    <Message Text="%(_requiredProperty.Identity): $(%(_requiredProperty.Identity))" />
    <Error Condition="'$(%(_requiredProperty.Identity))' == ''" Text="Required property %(_requiredProperty.Identity) was not set." />
    <Error Condition="!Exists('$(%(_requiredProperty.Identity))')" Text="Required property %(_requiredProperty.Identity) with value '$(%(_requiredProperty.Identity))' does not exist." />
  </Target>

  <Target Name="GetCrossgenToolPaths"
          DependsOnTargets="GetCorePackagePaths">
    <ItemGroup>
      <!-- Find crossgen tool assets in package cache to allow ExcludeAssets=All. -->
      <_windowsWinMD Include="$(_winmdPackageDir)**/Windows.winmd" />
      <_diaSymReaderAssembly Include="$(_diaSymReaderPackageDir)**\Microsoft.DiaSymReader.Native.*.dll" />
    </ItemGroup>

    <PropertyGroup>
      <_runtimeDirectory>$([MSBuild]::NormalizeDirectory('$(CoreCLRArtifactsPath)', 'sharedFramework'))</_runtimeDirectory>
      <_crossGenPath>$([MSBuild]::NormalizePath('$(CoreCLRArtifactsPath)', '$(CoreCLRCrossTargetComponentDirName)', 'sharedFramework', 'crossgen$(ApplicationFileExtension)'))</_crossGenPath>
    </PropertyGroup>

    <PropertyGroup>
      <_coreLibDirectory>$(CoreCLRArtifactsPath)</_coreLibDirectory>
      <_fxLibDirectory>$(LibrariesSharedFrameworkBinArtifactsPath)</_fxLibDirectory>
    </PropertyGroup>

    <PropertyGroup>
      <_jitPath>$([MSBuild]::NormalizePath('$(CoreCLRArtifactsPath)', '$(CoreCLRCrossTargetComponentDirName)', 'sharedFramework', '$(LibraryFilePrefix)clrjit$(LibraryFileExtension)'))</_jitPath>
    </PropertyGroup>

    <PropertyGroup Condition="'@(_windowsWinMD)' != ''">
      <_windowsWinMDDirectory>%(_windowsWinMD.RootDir)%(_windowsWinMD.Directory)</_windowsWinMDDirectory>
    </PropertyGroup>

    <PropertyGroup Condition="'@(_diaSymReaderAssembly)' != ''">
      <_diaSymReaderToolDir>%(_diaSymReaderAssembly.RootDir)%(_diaSymReaderAssembly.Directory)</_diaSymReaderToolDir>
    </PropertyGroup>

    <!--
      DiaSymReader can't be built from source, so use an unrelated default directory in that case.
      This is used as the working directory for crossgen calls.
    -->
    <PropertyGroup Condition="'$(DotNetBuildFromSource)' == 'true'">
      <_diaSymReaderToolDir>$(IntermediateOutputPath)</_diaSymReaderToolDir>
    </PropertyGroup>

    <Message Text="%(_requiredProperty.Identity): $(%(_requiredProperty.Identity))" />
    <Error Condition="'$(%(_requiredProperty.Identity))' == ''" Text="Required property %(_requiredProperty.Identity) was not set." />
    <Error Condition="!Exists('$(%(_requiredProperty.Identity))')" Text="Required property %(_requiredProperty.Identity) with value '$(%(_requiredProperty.Identity))' does not exist." />

    <ItemGroup>
      <!--
        The following path must be passed to crossgen to locate all dependencies. Include it first
        so in case of conflicts, DLLs are found in the framework being crossgenned.
      -->
      <_crossgenPlatformDirectories Include="%(_filesToCrossGen.RootDir)%(_filesToCrossGen.Directory)" />
      <!-- the following path *must* be passed to crossgen as it has the CoreLib.ni.dll, it will not use the IL copy. -->
      <_crossgenPlatformDirectories Include="$(_runtimeDirectory)" />
      <_crossgenPlatformDirectories Include="$(_coreLibDirectory)" />
      <_crossgenPlatformDirectories Include="$(_fxLibDirectory)" />
    </ItemGroup>

    <PropertyGroup>
      <!-- Use PathSeparator so that we get a ':' on unix and ';' on windows
           Escape the value so that the ';' doesn't result multiple lines when writing to the RSP file -->
      <_pathSeparatorEscaped>$([MSBuild]::Escape($([System.IO.Path]::PathSeparator.ToString())))</_pathSeparatorEscaped>
      <_crossgenPlatformAssemblies>@(_crossgenPlatformDirectories->'%(Identity)', '$(_pathSeparatorEscaped)')</_crossgenPlatformAssemblies>
    </PropertyGroup>
  </Target>

  <Target Name="GetFilesFromPackageResolve">
    <ItemGroup>
      <!-- RID-specific: include all runtime files. -->
      <RidSpecificFilesToPackage Include="@(ReferenceCopyLocalPaths)">
        <!-- ResolveNugetPackageAssets doesn't preserve the asset type (native),
             calculate it by looking for native in the path -->
        <IsNative Condition="$([System.String]::new('%(Identity)').ToLowerInvariant().Replace('\', '/').Contains('/native/'))">true</IsNative>
      </RidSpecificFilesToPackage>
      <!-- !!!BEGIN CHANGE Persist existing TargetPath. !!!-->
      <RidSpecificFilesToPackage Condition="'%(RidSpecificFilesToPackage.TargetPath)' == ''">
      <!-- !!!END CHANGE !!! -->
        <TargetPath Condition="'%(RidSpecificFilesToPackage.IsNative)' != 'true'">runtimes/$(PackageRID)/lib/$(PackageTargetFramework)</TargetPath>
        <TargetPath Condition="'%(RidSpecificFilesToPackage.IsNative)' == 'true'">runtimes/$(PackageRID)/native</TargetPath>
      </RidSpecificFilesToPackage>
      <!-- Ensure localization resource files make it to their subdirs. -->
      <RidSpecificFilesToPackage Condition="'%(RidSpecificFilesToPackage.DestinationSubDirectory)' != ''">
        <TargetPath>%(RidSpecificFilesToPackage.TargetPath)/%(RidSpecificFilesToPackage.DestinationSubDirectory)</TargetPath>
      </RidSpecificFilesToPackage>
    </ItemGroup>

    <ItemGroup Condition="'$(PackageTargetRuntime)' != ''">
      <FilesToPackage Include="@(RidSpecificFilesToPackage)" />
    </ItemGroup>

    <ItemGroup Condition="'$(PackageTargetRuntime)' == ''">
      <!-- Not RID-specific: include all reference files. -->
      <FilesToPackage Include="@(Reference)">
        <TargetPath>ref/$(PackageTargetFramework)</TargetPath>
      </FilesToPackage>

      <!-- include all doc files -->
      <_docFilesToPackage Include="%(FilesToPackage.RootDir)%(FilesToPackage.Directory)**\%(FilesToPackage.FileName).xml" />

      <FilesToPackage Include="@(_docFilesToPackage)">
        <TargetPath>ref/$(PackageTargetFramework)/%(RecursiveDir)</TargetPath>
      </FilesToPackage>
    </ItemGroup>

    <!-- Add versions file with the hashes of the repos we consume -->
    <ItemGroup Condition="'$(FrameworkPackageName)' != ''">
      <FilesToPackage Include="$(IntermediateOutputPath)\$(FrameworkPackageName).versions.txt">
        <TargetPath></TargetPath>
      </FilesToPackage>
    </ItemGroup>
  </Target>
</Project>
