<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  <PropertyGroup>
    <FrameworkPackageName>Microsoft.NETCore.App</FrameworkPackageName>
    <BuildFullPlatformManifest>false</BuildFullPlatformManifest>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="$(NETStandardLibraryPackage)" Version="$(NETStandardLibraryVersion)" />
  </ItemGroup>

  <!-- This tool is a prebuilt not buildable from source. -->
  <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
    <PackageReference Include="Microsoft.DiaSymReader.Native" Version="$(MicrosoftDiaSymReaderNativeVersion)" />
  </ItemGroup>

  <ItemGroup Condition="'$(PackageTargetRuntime)' == ''">
    <!-- Bring in NETStandard.Library for build-tools. -->
    <DependenciesToPackage Include="NETStandard.Library" />
  </ItemGroup>

  <!--
    Platform manifest needs to include all System*Native items from 3.1 release. This itemgroup adds
    them explicitly, to fill the gap that appeared when the names of these libraries were changed
    in 5.0 to conform to a specific Android naming convention. The library name change was a fix
    for https://github.com/dotnet/runtime/issues/33118. For more details of the issue and fix see
    https://github.com/dotnet/runtime/issues/33450.
  -->
  <ItemGroup>
    <_pastShimFiles Include="System.Globalization.Native.dylib" />
    <_pastShimFiles Include="System.Globalization.Native.so" />
    <_pastShimFiles Include="System.IO.Compression.Native.a" />
    <_pastShimFiles Include="System.IO.Compression.Native.dylib" />
    <_pastShimFiles Include="System.IO.Compression.Native.so" />
    <_pastShimFiles Include="System.Native.a" />
    <_pastShimFiles Include="System.Native.dylib" />
    <_pastShimFiles Include="System.Native.so" />
    <_pastShimFiles Include="System.Net.Http.Native.a" />
    <_pastShimFiles Include="System.Net.Http.Native.dylib" />
    <_pastShimFiles Include="System.Net.Http.Native.so" />
    <_pastShimFiles Include="System.Net.Security.Native.a" />
    <_pastShimFiles Include="System.Net.Security.Native.dylib" />
    <_pastShimFiles Include="System.Net.Security.Native.so" />
    <_pastShimFiles Include="System.Security.Cryptography.Native.Apple.a" />
    <_pastShimFiles Include="System.Security.Cryptography.Native.Apple.dylib" />
    <_pastShimFiles Include="System.Security.Cryptography.Native.OpenSsl.a" />
    <_pastShimFiles Include="System.Security.Cryptography.Native.OpenSsl.dylib" />
    <_pastShimFiles Include="System.Security.Cryptography.Native.OpenSsl.so" />
    <SharedFrameworkRuntimeFiles Include="@(_pastShimFiles)" TargetPath="runtimes/" />
  </ItemGroup>

  <!-- get paths from packages that are needed for cross-gen and other includes,
       only relevant for runtime-specific builds -->
  <Target Name="GetPackagePaths"
          Condition="'$(PackageTargetRuntime)' != ''"
          DependsOnTargets="GetCorePackagePaths" />

  <Target Name="GetDependencyVersionFiles" />

  <Target Name="AddRuntimeFilesToPackage" DependsOnTargets="ResolveRuntimeFilesFromLocalBuild" BeforeTargets="GetFilesFromPackageResolve">
    <ItemGroup>
      <RuntimeFiles>
        <TargetPath>runtimes/$(PackageRID)/native</TargetPath>
      </RuntimeFiles>

      <RuntimeFiles Condition="'%(FileName)' == 'crossgen'">
        <TargetPath>tools</TargetPath>
      </RuntimeFiles>

      <RuntimeFiles Condition="'$(TargetsMobile)' == 'true'"
        Include="@(MonoCrossFiles)">
        <TargetPath>runtimes/$(PackageRID)/native/cross</TargetPath>
      </RuntimeFiles>
      <RuntimeFiles Condition="'$(TargetsMobile)' == 'true'"
        Include="@(MonoIncludeFiles)">
        <TargetPath>runtimes/$(PackageRID)/native/include/%(RecursiveDir)</TargetPath>
      </RuntimeFiles>

      <CoreCLRCrossTargetFiles Condition="'%(FileName)' == 'clrjit' or '%(FileName)' == 'libclrjit'">
        <TargetPath>runtimes/$(CoreCLRCrossTargetComponentDirName)_$(TargetArchitecture)/native</TargetPath>
      </CoreCLRCrossTargetFiles>
      <CoreCLRCrossTargetFiles Condition="'%(FileName)' == 'crossgen'">
        <TargetPath>tools/$(CoreCLRCrossTargetComponentDirName)_$(TargetArchitecture)</TargetPath>
      </CoreCLRCrossTargetFiles>
      <CoreCLRCrossTargetFiles Condition="$([System.String]::new('%(FileName)').StartsWith('mscordaccore')) and '$(TargetsWindows)' == 'true'">
        <TargetPath>tools/$(CoreCLRCrossTargetComponentDirName)_$(TargetArchitecture)</TargetPath>
      </CoreCLRCrossTargetFiles>
      <CoreCLRCrossTargetFiles Condition="'%(FileName)%(Extension)' == 'mscordbi.dll' and '$(TargetsWindows)' == 'true'">
        <TargetPath>tools/$(CoreCLRCrossTargetComponentDirName)_$(TargetArchitecture)</TargetPath>
      </CoreCLRCrossTargetFiles>
      <ReferenceCopyLocalPaths Include="@(RuntimeFiles);@(CoreCLRCrossTargetFiles);" />
    </ItemGroup>
  </Target>

  <Target Name="AddFrameworkFilesToPackage" DependsOnTargets="ResolveLibrariesFromLocalBuild" BeforeTargets="GetFilesFromPackageResolve">
    <ItemGroup>
      <LibrariesRefAssemblies TargetPath="ref/$(NetCoreAppCurrent)" />
      <Reference Include="@(LibrariesRefAssemblies)" />
    </ItemGroup>

    <ItemGroup Condition="'$(PackageRID)' != ''">
      <LibrariesRuntimeFiles Condition="'%(IsNative)' != 'true'" TargetPath="runtimes/$(PackageRID)/lib/$(NetCoreAppCurrent)" />
      <LibrariesRuntimeFiles Condition="'%(IsNative)' == 'true'" TargetPath="$([System.String]::new('runtimes/$(PackageRID)/native/%(LibrariesRuntimeFiles.NativeSubDirectory)%(RecursiveDir)').TrimEnd('/'))" />
      <ReferenceCopyLocalPaths Include="@(LibrariesRuntimeFiles)" 
          Condition="'%(LibrariesRuntimeFiles.Extension)' != '.a'"/>
    </ItemGroup>

    <ItemGroup>
      <_docFilesToPackage Include="$(ArtifactsBinDir)/docs/%(LibrariesRefAssemblies.FileName).xml" Condition="Exists('$(ArtifactsBinDir)/docs/%(LibrariesRefAssemblies.FileName).xml')"/>
    </ItemGroup>
  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <Import Project="localnetcoreapp.override.targets" />
</Project>
