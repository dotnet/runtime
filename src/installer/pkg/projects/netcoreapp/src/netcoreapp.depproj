<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  <PropertyGroup>
    <FrameworkPackageName>Microsoft.NETCore.App</FrameworkPackageName>
    <BuildFullPlatformManifest>false</BuildFullPlatformManifest>
    <CoreCLROSGroup Condition="'$(TargetsWindows)' == 'true'">Windows_NT</CoreCLROSGroup>
    <CoreCLROSGroup Condition="'$(TargetsLinux)' == 'true'">Linux</CoreCLROSGroup>
    <CoreCLROSGroup Condition="'$(TargetsOSX)' == 'true'">OSX</CoreCLROSGroup>
    <CoreCLROSGroup Condition="'$(TargetsFreeBSD)' == 'true'">FreeBSD</CoreCLROSGroup>
    <LibrariesOSGroup>$(CoreCLROSGroup)</LibrariesOSGroup>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="$(NETStandardLibraryPackage)" Version="$(NETStandardLibraryVersion)" />
  </ItemGroup>

  <!-- This tool is a prebuilt not buildable from source. -->
  <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
    <PackageReference Include="Microsoft.DiaSymReader.Native" Version="$(MicrosoftDiaSymReaderNativeVersion)" />
  </ItemGroup>

  <ItemGroup Condition="'$(PackageTargetRuntime)' == ''">
    <!-- Bring in NETStandard.Library for build-tools. -->
    <DependenciesToPackage Include="NETStandard.Library" />
  </ItemGroup>

  <!-- get paths from packages that are needed for cross-gen and other includes,
       only relevant for runtime-specific builds -->
  <Target Name="GetPackagePaths"
          Condition="'$(PackageTargetRuntime)' != ''"
          DependsOnTargets="GetCorePackagePaths" />

  <Target Name="GetDependencyVersionFiles" />

  <Target Name="AddRuntimeFilesToPackage" DependsOnTargets="ResolveCoreCLRFilesFromLocalBuild" BeforeTargets="GetFilesFromPackageResolve">
    <ItemGroup>
      <CoreCLRFiles>
        <TargetPath>runtimes/$(PackageRID)/native</TargetPath>
      </CoreCLRFiles>

      <CoreCLRFiles Condition="'%(FileName)' == 'crossgen'">
        <TargetPath>tools</TargetPath>
      </CoreCLRFiles>

      <CoreCLRCrossTargetFiles Condition="'%(FileName)' == 'clrjit' or '%(FileName)' == 'libclrjit'">
        <TargetPath>runtimes/$(CoreCLRCrossTargetComponentDirName)_$(TargetArchitecture)/native</TargetPath>
      </CoreCLRCrossTargetFiles>
      <CoreCLRCrossTargetFiles Condition="'%(FileName)' == 'crossgen'">
        <TargetPath>tools/$(CoreCLRCrossTargetComponentDirName)_$(TargetArchitecture)</TargetPath>
      </CoreCLRCrossTargetFiles>
      <CoreCLRCrossTargetFiles Condition="$([System.String]::new('%(FileName)').StartsWith('mscordaccore')) and '$(TargetsWindows)' == 'true'">
        <TargetPath>tools/$(CoreCLRCrossTargetComponentDirName)_$(TargetArchitecture)</TargetPath>
      </CoreCLRCrossTargetFiles>
      <CoreCLRCrossTargetFiles Condition="'%(FileName)%(Extension)' == 'mscordbi.dll' and '$(TargetsWindows)' == 'true'">
        <TargetPath>tools/$(CoreCLRCrossTargetComponentDirName)_$(TargetArchitecture)</TargetPath>
      </CoreCLRCrossTargetFiles>
      <ReferenceCopyLocalPaths Include="@(CoreCLRFiles);@(CoreCLRCrossTargetFiles)" />
    </ItemGroup>
  </Target>

  <Target Name="AddFrameworkFilesToPackage" DependsOnTargets="ResolveLibrariesFromLocalBuild" BeforeTargets="GetFilesFromPackageResolve">
    <ItemGroup>
      <LibrariesRefAssemblies TargetPath="ref/$(NETCoreAppFramework)" />
      <Reference Include="@(LibrariesRefAssemblies)" />
    </ItemGroup>

    <ItemGroup Condition="'$(PackageRID)' != ''">
      <LibrariesRuntimeFiles Condition="'%(IsNative)' != 'true'" TargetPath="runtimes/$(PackageRID)/lib/$(NETCoreAppFramework)" />
      <LibrariesRuntimeFiles Condition="'%(IsNative)' == 'true'" TargetPath="runtimes/$(PackageRID)/native" />
      <ReferenceCopyLocalPaths Include="@(LibrariesRuntimeFiles)" />
    </ItemGroup>

    <ItemGroup>
      <_docFilesToPackage Include="$(ArtifactsBinDir)/docs/%(LibrariesRefAssemblies.FileName).xml" Condition="Exists('$(ArtifactsBinDir)/docs/%(LibrariesRefAssemblies.FileName).xml')"/>
    </ItemGroup>
  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <Import Project="localnetcoreapp.override.targets" />
</Project>
