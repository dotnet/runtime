<Project>

  <!--
    Use framework pack tooling to support building RID-specific crossgen2 packs.
    Consider porting to central infrastructure: https://github.com/dotnet/runtime/issues/1867
  -->
  <PropertyGroup>
    <FrameworkPackType>crossgen2</FrameworkPackType>
    <BuildRidSpecificPacks>true</BuildRidSpecificPacks>
  </PropertyGroup>

  <!--
    Get installer properties, in particular for MSIs.
    Consider porting to central infrastructure: https://github.com/dotnet/runtime/issues/1867
  -->
  <Target Name="GetCrossgen2PackInstallerProperties"
          Condition="'$(FrameworkPackType)' == 'crossgen2'"
          BeforeTargets="GetInstallerProperties">
    <PropertyGroup>
      <InstallerName>$(ShortFrameworkName)-crossgen2-pack</InstallerName>
      <WixProductMoniker>$(Crossgen2PackBrandName)</WixProductMoniker>
      <VSInsertionShortComponentName>Crossgen2Pack</VSInsertionShortComponentName>
    </PropertyGroup>
  </Target>

  <PropertyGroup>
    <RIDPropsFile>$(MSBuildThisFileDirectory)crossgenRIDs.props</RIDPropsFile>
  </PropertyGroup>

  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <Crossgen2RuntimeConfigFile>$(IntermediateOutputPath)crossgen2.runtimeconfig.json</Crossgen2RuntimeConfigFile>
  </PropertyGroup>

  <ItemGroup>
    <ArchitectureSpecificToolFile Include="$(CoreCLRCrossgen2Dir)crossgen2$(ExeSuffix)" />
    <ArchitectureSpecificToolFile Include="$(CoreCLRCrossgen2Dir)crossgen2.dll" />
    <ArchitectureSpecificToolFile Include="$(CoreCLRCrossgen2Dir)ILCompiler*.dll" />
    <ArchitectureSpecificToolFile Include="$(CoreCLRCrossgen2Dir)Microsoft.DiaSymReader.dll" />
    <ArchitectureSpecificToolFile Include="$(CoreCLRCrossgen2Dir)System.CommandLine.dll" />
    <ArchitectureSpecificToolFile Include="$(CoreCLRCrossgen2Dir)$(LibraryFilePrefix)clrjitilc$(LibraryFileExtension)" />
    <ArchitectureSpecificToolFile Include="$(CoreCLRCrossgen2Dir)$(LibraryFilePrefix)jitinterface$(LibraryFileExtension)" />

    <ArchitectureSpecificToolFile Include="$(Crossgen2RuntimeConfigFile)" />

    <File Include="@(ArchitectureSpecificToolFile)">
      <TargetPath>tools</TargetPath>
    </File>
  </ItemGroup>

  <Target Name="WriteCrossgen2RuntimeConfig"
          BeforeTargets="GetPackageFiles">
    <PropertyGroup>
      <!--
        We're publishing crossgen2 in its own package as framework dependent application for now
        since we only have two simple scenarios we want to support in the short term: win_x64 to
        win_x64 and linux_x64 to linux_x64 compilations. Once we have more complex targets,
        especially cross-platform and cross-architecture, crossgen2 will become a self-contained
        package.
      -->
      <Crossgen2RuntimeConfigContents>
{
  "runtimeOptions": {
    "tfm": "netcoreapp5.0",
    "framework": {
      "name": "Microsoft.NETCore.App",
      "version": "5.0.100-alpha1-015772"
    }
  }
}
      </Crossgen2RuntimeConfigContents>
    </PropertyGroup>

    <!-- Emit the runtime config json file that will be packaged with crossgen2 -->
    <WriteLinesToFile
      File="$(Crossgen2RuntimeConfigFile)"
      Lines="$(Crossgen2RuntimeConfigContents)"
      Overwrite="true"
      WriteOnlyWhenDifferent="true" />
  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

</Project>
