<Project>

  <!--
    Use framework pack tooling to support building RID-specific crossgen2 packs.
    Consider porting to central infrastructure: https://github.com/dotnet/runtime/issues/1867
  -->
  <PropertyGroup>
    <FrameworkPackType>crossgen2</FrameworkPackType>
    <BuildRidSpecificPacks>true</BuildRidSpecificPacks>
    <SkipBuildOnRuntimePackOnlyOS>true</SkipBuildOnRuntimePackOnlyOS>
  </PropertyGroup>

  <!--
    Get installer properties, in particular for MSIs.
    Consider porting to central infrastructure: https://github.com/dotnet/runtime/issues/1867
  -->
  <Target Name="GetCrossgen2PackInstallerProperties"
          Condition="'$(FrameworkPackType)' == 'crossgen2'"
          BeforeTargets="GetInstallerProperties">
    <PropertyGroup>
      <InstallerName>$(ShortFrameworkName)-crossgen2-pack</InstallerName>
      <WixProductMoniker>$(Crossgen2PackBrandName)</WixProductMoniker>
      <VSInsertionShortComponentName>Crossgen2Pack</VSInsertionShortComponentName>
    </PropertyGroup>
  </Target>

  <PropertyGroup>
    <RIDPropsFile>$(MSBuildThisFileDirectory)crossgenRIDs.props</RIDPropsFile>
  </PropertyGroup>

  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <!--
    We're publishing crossgen2 as a self-contained application against the live runtime bits,
    so we need to assemble the self-contained framework here.
  -->
  <Target Name="GetCrossgen2Files"
          DependsOnTargets="ConvertItems"
          BeforeTargets="GetPackageFiles">
    <ItemGroup>
      <RuntimeFile Include="@(File->HasMetadata('TargetPath'))" Exclude="$(PackageIconFullPath)" />
      <File Remove="@(RuntimeFile)" />
    </ItemGroup>

    <PropertyGroup>
      <TargetOSComponent>unix</TargetOSComponent>
      <TargetOSComponent Condition="'$(TargetOS)' == 'Windows_NT'">win</TargetOSComponent>
    </PropertyGroup>

    <ItemGroup>
      <Crossgen2File Include="$(CoreCLRCrossgen2Dir)crossgen2$(ExeSuffix)" />
      <Crossgen2File Include="$(CoreCLRCrossgen2Dir)crossgen2.dll" />
      <Crossgen2File Include="$(CoreCLRCrossgen2Dir)ILCompiler*.dll" />
      <Crossgen2File Include="$(CoreCLRCrossgen2Dir)Microsoft.DiaSymReader.dll" />
      <Crossgen2File Include="$(CoreCLRCrossgen2Dir)System.CommandLine.dll" />
      <Crossgen2File Include="$(CoreCLRCrossgen2Dir)$(LibraryFilePrefix)jitinterface_$(TargetArchitecture)$(LibraryFileExtension)" />
      <Crossgen2File Include="$(CoreCLRCrossgen2Dir)$(LibraryFilePrefix)clrjit_win_x86_$(TargetArchitecture)$(LibraryFileExtension)" />
      <Crossgen2File Include="$(CoreCLRCrossgen2Dir)$(LibraryFilePrefix)clrjit_win_arm_$(TargetArchitecture)$(LibraryFileExtension)" />
      <Crossgen2File Include="$(CoreCLRCrossgen2Dir)$(LibraryFilePrefix)clrjit_unix_arm_$(TargetArchitecture)$(LibraryFileExtension)" />
      <Crossgen2File Condition="'$(TargetArchitecture)' == 'arm64' or  '$(TargetArchitecture)' == 'x64'" Include="$(CoreCLRCrossgen2Dir)$(LibraryFilePrefix)clrjit_win_x64_$(TargetArchitecture)$(LibraryFileExtension)" />
      <Crossgen2File Condition="'$(TargetArchitecture)' == 'arm64' or  '$(TargetArchitecture)' == 'x64'" Include="$(CoreCLRCrossgen2Dir)$(LibraryFilePrefix)clrjit_win_arm64_$(TargetArchitecture)$(LibraryFileExtension)" />
      <Crossgen2File Condition="'$(TargetArchitecture)' == 'arm64' or  '$(TargetArchitecture)' == 'x64'" Include="$(CoreCLRCrossgen2Dir)$(LibraryFilePrefix)clrjit_unix_x64_$(TargetArchitecture)$(LibraryFileExtension)" />
      <Crossgen2File Condition="'$(TargetArchitecture)' == 'arm64' or  '$(TargetArchitecture)' == 'x64'" Include="$(CoreCLRCrossgen2Dir)$(LibraryFilePrefix)clrjit_unix_arm64_$(TargetArchitecture)$(LibraryFileExtension)" />
      <!-- Include the native and managed files from the Microsoft.NETCore.App shared framework -->
      <Crossgen2File Include="@(RuntimeFile)" Condition="'%(RuntimeFile.TargetPath)' == 'runtimes/$(PackageRID)/native' and '%(RuntimeFile.Extension)' != '$(StaticLibraryFileExtension)'" />
      <Crossgen2File Include="@(RuntimeFile)" Condition="'%(RuntimeFile.TargetPath)' == 'runtimes/$(PackageRID)/lib/$(NetCoreAppCurrent)'" />
      <!-- Include the native hosting layer -->
      <Crossgen2File Include="$(DotNetHostBinDir)/$(LibraryFilePrefix)hostfxr$(LibraryFileExtension)" />
      <Crossgen2File Include="$(DotNetHostBinDir)/$(LibraryFilePrefix)hostpolicy$(LibraryFileExtension)" />
    </ItemGroup>

    <MSBuild Projects="$(CoreClrProjectRoot)src/tools/aot/crossgen2/crossgen2.csproj"
            Targets="Restore"
            Properties="
            Configuration=$(RuntimeConfiguration);
            SelfContained=true;
            RuntimeIdentifier=$(PackageRID)">
    <Output TaskParameter="TargetOutputs" ItemName="Crossgen2File" />
    </MSBuild>

    <MSBuild Projects="$(CoreClrProjectRoot)src/tools/aot/crossgen2/crossgen2.csproj"
            Targets="GenerateDepsJsonFile"
            Properties="
            Configuration=$(RuntimeConfiguration);
            GenerateDependencyFile=true;
            IncludeFileVersionsInDependencyFile=false;
            SelfContained=true;
            RemoveLongNameDac=true;
            RuntimeGraphPath=$(LiveRuntimeIdentifierGraphPath);
            RuntimeIdentifier=$(PackageRID)">
    <Output TaskParameter="TargetOutputs" ItemName="Crossgen2File" />
    </MSBuild>

    <ItemGroup>
      <!-- Avoid having two copies of System.Private.CoreLib.ni.pdb in the same directory -->
      <Crossgen2File Update="@(Crossgen2File)" SavedIdentity="%(Identity)" />
      <Crossgen2FileDistinct Include="@(Crossgen2File->'%(Filename)%(Extension)'->Distinct())" />

      <File Include="@(Crossgen2FileDistinct->'%(SavedIdentity)')" RemoveMetadata="SavedIdentity">
        <TargetPath>tools</TargetPath>
      </File>
      <!-- 
        System.Private.CoreLib's R2R pdb ends up in two locations (CoreCLR and the depproj output).
        Remove them here and let the symbol file location infra find exactly one.
      -->
      <CoreLibSymbolFile Include="@(Crossgen2File)" Condition="'%(FileName)%(Extension)' == 'System.Private.CoreLib.ni.pdb'" />
      <File Remove="@(CoreLibSymbolFile)" />
    </ItemGroup>

  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

</Project>
