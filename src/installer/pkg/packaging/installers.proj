<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="Directory.Build.props" />
  <Import Project="$([MSBuild]::GetPathOfFileAbove(Directory.Build.targets))" />

  <PropertyGroup>
    <PackageTargets>
      GetInstallerLocations;
      GenerateVersionBadge;
      GenerateCompressedFiles;
      GenerateInstallers;
      GenerateProjectInstallers;
    </PackageTargets>
  </PropertyGroup>

  <Target Name="Build"
          DependsOnTargets="
            BuildDependencies;
            BuildInstallers;
            SignCombinedInstallers"
          Condition="'$(DOTNET_BUILD_SKIP_PACKAGING)' != 'true'" />

  <Target Name="BuildInstallers"
          DependsOnTargets="
            EnsureSignedR2RBinaries;
            $(PackageTargets)"
          Condition="'$(DOTNET_BUILD_SKIP_PACKAGING)' != 'true'" />

  <Target Name="SignCombinedInstallers"
          Condition="
            '$(OSGroup)' == 'Windows_NT' and
            '$(SkipSigning)' != 'true'"
          DependsOnTargets="
            EnsureSignedBurnEngineFiles;
            EnsureSignedBurnBundleFiles" />

  <!--
    To build installers, we need shared fx layouts to be built first. Call MSBuild on the
    requirements so that parallel MSBuild does the ordering work.

    Also ensures NuGet packages are built and signed.
  -->
  <Target Name="BuildDependencies"
          Condition="'$(UsePrebuiltPortableBinariesForInstallers)' != 'true'"
          DependsOnTargets="GetSharedFrameworkProjects">
    <MSBuild
      Projects="
        @(SharedFrameworkProject);
        pack-managed.proj"
      Targets="Build" />
  </Target>

  <Target Name="EnsureSignedR2RBinaries" Condition="'$(OSGroup)' == 'Windows_NT'" >
    <MSBuild Projects="$(SigningToolsDir)\SignR2RBinaries.proj" Targets="Build" />
  </Target>

  <Target Name="EnsureSignedMsiFiles" Condition="'$(OSGroup)' == 'Windows_NT'" >
    <MSBuild Projects="$(SigningToolsDir)\SignMsiFiles.proj" Targets="Build" />
  </Target>

  <Target Name="EnsureSignedBurnEngineFiles" Condition="'$(OSGroup)' == 'Windows_NT'" >
    <MSBuild Projects="$(SigningToolsDir)\SignBurnEngineFiles.proj" Targets="Build" />
  </Target>

  <Target Name="EnsureSignedBurnBundleFiles" Condition="'$(OSGroup)' == 'Windows_NT'" >
    <MSBuild Projects="$(SigningToolsDir)\SignBurnBundleFiles.proj" Targets="Build" />
  </Target>

  <Target Name="GenerateProjectInstallers" Condition="'$(GenerateProjectInstallers)' == 'true'">
    <ItemGroup>
      <InstallerProject Include="$(InstallerProjectRoot)pkg\projects\**\*.pkgproj" />
      <InstallerProject Include="$(InstallerProjectRoot)pkg\projects\**\*.sfxproj" />
    </ItemGroup>

    <MSBuild Projects="@(InstallerProject)" Targets="GenerateInstallers" />
  </Target>

  <Target Name="InitPackage">
    <ItemGroup>
      <OutDirs Include="$(SharedHostPublishRoot)" />
      <OutDirs Include="$(HostFxrPublishRoot)" />
      <OutDirs Include="$(SharedFrameworkPublishRoot)" />
      <OutDirs Include="$(NetHostPublishRoot)" />
    </ItemGroup>

    <RemoveDir Directories="@(OutDirs)" />

    <!-- copy shared host layout -->
    <Copy SourceFiles="$(SharedFrameworkPublishDir)dotnet$(ExeSuffix)"
          DestinationFolder="$(SharedHostPublishRoot)" />

    <Copy SourceFiles="$(RepoRoot)THIRD-PARTY-NOTICES.TXT"
          DestinationFiles="$(SharedHostPublishRoot)ThirdPartyNotices.txt" />

    <Copy SourceFiles="$(RepoRoot)LICENSE.TXT"
          DestinationFiles="$(SharedHostPublishRoot)LICENSE.txt"
          Condition="'$(TargetsUnix)' == 'true'"/>

    <Copy SourceFiles="$(InstallerProjectRoot)pkg\LICENSE-MSFT.TXT"
          DestinationFiles="$(SharedHostPublishRoot)LICENSE.txt"
          Condition="'$(TargetsUnix)' != 'true'"/>

    <!-- copy host fxr -->
    <ItemGroup>
      <HostFxrFiles Include="$(SharedFrameworkPublishDir)host\**\*" />
    </ItemGroup>
    <Copy SourceFiles="@(HostFxrFiles)"
           DestinationFolder="$(HostFxrPublishRoot)host/%(HostFxrFiles.RecursiveDir)" />

    <!-- copy shared framwork layout -->
    <ItemGroup>
      <SharedFxFiles Include="$(SharedFrameworkPublishDir)shared\**\*" />
    </ItemGroup>
    <Copy Sourcefiles="@(SharedFxFiles)"
          DestinationFolder="$(SharedFrameworkPublishRoot)shared/%(SharedFxFiles.RecursiveDir)" />

    <!-- Copy nethost -->
    <PropertyGroup>
      <_NetHostOutputDir>$(ArtifactsBinDir)$(InstallerSourceOSPlatformConfig)\corehost\</_NetHostOutputDir>
    </PropertyGroup>
    <ItemGroup>
      <NetHostFiles Include="$(_NetHostOutputDir)nethost.h" />
      <NetHostFiles Include="$(_NetHostOutputDir)$(LibPrefix)nethost$(LibSuffix)" />
      <NetHostFiles Include="$(_NetHostOutputDir)$(StaticLibPrefix)nethost$(StaticLibSuffix)" />
      <NetHostFiles Condition="'$(OSGroup)' == 'Windows_NT'" Include="$(_NetHostOutputDir)nethost.lib" />
    </ItemGroup>
    <Copy SourceFiles="@(NetHostFiles)"
          DestinationFolder="$(NetHostPublishRoot)" />

    <!-- Fix file permits -->
    <!-- Reset everything to user readable/writeable and group and world readable. -->
    <Exec Condition="'$(OSGroup)' != 'Windows_NT'"
          Command='find %(OutDirs.Identity) -type f -name "*" -exec chmod 644 {} \;' />
    <!-- Generally, dylibs and sos have 'x' -->
    <Exec Condition="'$(OSGroup)' != 'Windows_NT'"
          Command='find %(OutDirs.Identity) -type f -name "*.dylib" -exec chmod 755 {} \;' />
    <Exec Condition="'$(OSGroup)' != 'Windows_NT'"
          Command='find %(OutDirs.Identity) -type f -name "*.so" -exec chmod 755 {} \;' />
    <!-- Executables (those without dots) are executable -->
    <Exec Condition="'$(OSGroup)' != 'Windows_NT'"
          Command='find %(OutDirs.Identity) -type f ! -name "*.*" -exec chmod 755 {} \;' />


    <!-- Copy all to combined directory -->
    <ItemGroup>
      <CombinedFiles Include="$(SharedHostPublishRoot)\**\*" />
      <CombinedFiles Include="$(HostFxrPublishRoot)/**\*" />
      <CombinedFiles Include="$(SharedFrameworkPublishRoot)/**\*" />
    </ItemGroup>
    <RemoveDir Directories="@(CombinedPublishRoot)" />
    <Copy SourceFiles="@(CombinedFiles)"
          DestinationFolder="$(CombinedPublishRoot)/%(CombinedFiles.RecursiveDir)" />

    <!-- create output dir -->
    <MakeDir Condition="!Exists('$(AssetOutputPath)')"
             Directories="$(AssetOutputPath)" />
  </Target>

  <Target Name="GenerateVersionBadge">
    <PropertyGroup>
      <templateSvg>$(MSBuildThisFileDirectory)version_badge.svg</templateSvg>
    </PropertyGroup>

    <MakeDir  Condition="!Exists('$(BaseOutputRootPath)')" Directories="$(BaseOutputRootPath)" />

    <WriteLinesToFile
      File="$(OutputVersionBadge)"
      Lines="$([System.IO.File]::ReadAllText('$(templateSvg)').Replace('ver_number', '$(ProductVersion)'))"
      Overwrite="true"
                      />
  </Target>

  <Target Name="GenerateCompressedFiles"
          DependsOnTargets="
            InitPackage;
            GetInstallerLocations;
            GenerateZip;
            GenerateTarBall"
          Condition="'$(UsePrebuiltPortableBinariesForInstallers)' != 'true'"/>

  <UsingTask TaskName="ZipFileCreateFromDirectory" AssemblyFile="$(InstallerTasksAssemblyPath)"/>
  <Target Name="GenerateZip"
          Condition="'$(OSGroup)'=='Windows_NT'">

    <ZipFileCreateFromDirectory
        SourceDirectory="$(CombinedPublishRoot)"
        DestinationArchive="$(AssetOutputPath)$(CombinedCompressedFile)"
        OverwriteDestination="true" />

    <ZipFileCreateFromDirectory
        SourceDirectory="$(HostFxrPublishRoot)"
        DestinationArchive="$(AssetOutputPath)$(HostFxrCompressedFile)"
        OverwriteDestination="true" />

    <ZipFileCreateFromDirectory
        SourceDirectory="$(NetHostPublishRoot)"
        DestinationArchive="$(AssetOutputPath)$(NetHostCompressedFile)"
        OverwriteDestination="true" />

    <ZipFileCreateFromDirectory
        SourceDirectory="$(SharedFrameworkPublishRoot)"
        DestinationArchive="$(AssetOutputPath)$(SharedFrameworkCompressedFile)"
        OverwriteDestination="true" />

    <ZipFileCreateFromDirectory
        SourceDirectory="$(SharedFrameworkPublishSymbolsDir)"
        DestinationArchive="$(AssetOutputPath)$(SharedFrameworkSymbolsCompressedFile)"
        OverwriteDestination="true" />
  </Target>

  <Target Name="GenerateTarBall"
          Condition="'$(OSGroup)'!='Windows_NT'">

    <!-- tar command will throw 'file changed as we read it' on some distros.  ignore that error.
         we use -C so that we get a relative folder structure which is compressed rather than the full path -->
    <Exec Command="tar -C $(CombinedPublishRoot) -czf $(AssetOutputPath)$(CombinedCompressedFile) ."
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true" />
    <Exec Command="tar -C $(HostFxrPublishRoot) -czf $(AssetOutputPath)$(HostFxrCompressedFile) ."
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true" />
    <Exec Command="tar -C $(NetHostPublishRoot) -czf $(AssetOutputPath)$(NetHostCompressedFile) ."
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true" />
    <Exec Command="tar -C $(SharedFrameworkPublishRoot) -czf $(AssetOutputPath)$(SharedFrameworkCompressedFile) ."
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true" />
    <Exec Command="tar -C $(SharedFrameworkPublishSymbolsDir) -czf $(AssetOutputPath)$(SharedFrameworkSymbolsCompressedFile) ."
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true" />
    <Error Condition="!Exists('$(AssetOutputPath)$(CombinedCompressedFile)')" Message="Unable to create $(AssetOutputPath)$(CombinedCompressedFile)" />
    <Error Condition="!Exists('$(AssetOutputPath)$(HostFxrCompressedFile)')" Message="Unable to create $(AssetOutputPath)$(HostFxrCompressedFile)" />
    <Error Condition="!Exists('$(AssetOutputPath)$(NetHostCompressedFile)')" Message="Unable to create $(AssetOutputPath)$(NetHostCompressedFile)" />
    <Error Condition="!Exists('$(AssetOutputPath)$(SharedFrameworkCompressedFile)')" Message="Unable to create $(AssetOutputPath)$(SharedFrameworkCompressedFile)" />
    <Error Condition="!Exists('$(AssetOutputPath)$(SharedFrameworkSymbolsCompressedFile)')" Message="Unable to create $(AssetOutputPath)$(SharedFrameworkSymbolsCompressedFile)" />
  </Target>

  <Import Project="osx\package.targets" />
  <Import Project="deb\package.targets" />
  <Import Project="rpm\package.targets" />

  <PropertyGroup>
   <InstallerDependsOn>
     GeneratePkgs;
     GenerateDebs;
     GenerateRpms;
   </InstallerDependsOn>
  </PropertyGroup>
  <Target Name="GenerateInstallers" DependsOnTargets="InitPackage;$(InstallerDependsOn)" />

  </Project>
