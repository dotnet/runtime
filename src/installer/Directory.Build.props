<Project>

  <!-- TODO: (Consolidation) Remove when consolidated. -->
  <PropertyGroup>
    <IsRuntimeRepository Condition="Exists('$(MSBuildThisFileDirectory)..\..\.dotnet-runtime-placeholder')">true</IsRuntimeRepository>
  </PropertyGroup>
  <Import Project="..\..\Directory.Build.props" Condition="'$(IsRuntimeRepository)' == 'true'" />

  <!--
    Import the arcade sdk with these requirements.
    After:
      Configuration setup
    Before:
      DebugType needs to be not be set to embedded at least for facades
      OutputPath setup
  -->
  <Import Project="Sdk.props" Sdk="Microsoft.DotNet.Arcade.Sdk" Condition="'$(IsRuntimeRepository)' != 'true'" />

  <!--
    Get ProjectToBuild and '<subset>ProjectToBuild' items. Using the items lets projects handle
    $(Subset) automatically when creating project-to-project dependencies.
  -->
  <Import Project="$(RepositoryEngineeringDir)Build.props" />

  <!--
    Before Microsoft.Common.targets, set the extensions path to match the restore dir as Arcade
    sets it, so MSBuild packages with targets files will be found and imported.
  -->
  <PropertyGroup>
    <MSBuildProjectExtensionsPath>$(BaseIntermediateOutputPath)</MSBuildProjectExtensionsPath>
  </PropertyGroup>

  <PropertyGroup>
    <ArcadeSdkMSBuildProjectDir>$([System.IO.Path]::GetDirectoryName('$(ArcadeSdkBuildTasksAssembly)'))\..\</ArcadeSdkMSBuildProjectDir>
    <ArcadeSdkSignProject>$(ArcadeSdkMSBuildProjectDir)Sign.proj</ArcadeSdkSignProject>
  </PropertyGroup>

  <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.csproj'">
    <!-- SDK-based projects' Platform should default to AnyCPU, not $(TargetArchitecture) like Directory.Build.props sets. -->
    <Platform>AnyCPU</Platform>
    <UsingNETSdkCompiler>true</UsingNETSdkCompiler>
    <DisableBuildToolsRoslynVersion>true</DisableBuildToolsRoslynVersion>
  </PropertyGroup>

  <PropertyGroup>
    <InstallerProjectRoot>$(MSBuildThisFileDirectory)</InstallerProjectRoot>
    <SigningToolsDir>$(InstallerProjectRoot)signing\</SigningToolsDir>
    <LicenseFile>$(RepoRoot)LICENSE.TXT</LicenseFile>
  </PropertyGroup>

  <!-- TODO: (Consolidation) Remove when consolidated. -->
  <PropertyGroup Condition="'$(IsRuntimeRepository)' != 'true'">
    <InstallerTasksOutputPath>$(ArtifactsBinDir)installer.tasks\$(Configuration)\</InstallerTasksOutputPath>
    <InstallerTasksAssemblyPath Condition="'$(MSBuildRuntimeType)' == 'Core'">$(InstallerTasksOutputPath)netstandard2.0\installer.tasks.dll</InstallerTasksAssemblyPath>
    <InstallerTasksAssemblyPath Condition="'$(MSBuildRuntimeType)' != 'Core'">$(InstallerTasksOutputPath)net46\installer.tasks.dll</InstallerTasksAssemblyPath>
  </PropertyGroup>

  <!-- TODO: Remove after https://github.com/dotnet/arcade/pull/4254 is in. -->
  <PropertyGroup>
    <BinDir Condition="'$(BinDir)'==''">$(ArtifactsBinDir)</BinDir>
    <ObjDir Condition="'$(ObjDir)'==''">$(ArtifactsObjDir)</ObjDir>
    <PackagesDir Condition="'$(PackagesDir)' == ''">$(NuGetPackageRoot)</PackagesDir>
  </PropertyGroup>

  <PropertyGroup>
    <HostMachineInfoProps>$(ArtifactsObjDir)HostMachineInfo.props</HostMachineInfoProps>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      This name is used to create a GIT repository URL https://github.com/dotnet/$(GitHubRepositoryName) used to find source code for debugging
      It is also used to name the build output manifest for orchestrated builds.
    -->
    <GitHubRepositoryName Condition="'$(GitHubRepositoryName)' == ''">core-setup</GitHubRepositoryName>
  </PropertyGroup>

  <!-- Build as portable by default -->
  <PropertyGroup>
    <PortableBuild Condition="'$(PortableBuild)' == ''">true</PortableBuild>
  </PropertyGroup>

  <PropertyGroup>
    <SharedFrameworkName>Microsoft.NETCore.App</SharedFrameworkName>
    <NETCoreAppFrameworkIdentifier>.NETCoreApp</NETCoreAppFrameworkIdentifier>
    <NETCoreAppFrameworkMoniker>$(NETCoreAppFrameworkIdentifier),Version=v$(NETCoreAppFrameworkVersion)</NETCoreAppFrameworkMoniker>
    <NETCoreAppFrameworkBrandName>.NET Core $(NETCoreAppFrameworkVersion)</NETCoreAppFrameworkBrandName>
  </PropertyGroup>

  <!-- Platform detection -->
  <PropertyGroup>
    <RunningOnUnix Condition="'$(OS)'!='Windows_NT'">true</RunningOnUnix>

    <RunningOnCore Condition="'$(MSBuildRuntimeType)' == 'core'">true</RunningOnCore>
  </PropertyGroup>

  <PropertyGroup>
    <BuildArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString().ToLowerInvariant())</BuildArchitecture>
    <TargetArchitecture  Condition="'$(TargetArchitecture)' == '' AND '$(BuildArchitecture)' == 'arm64'">$(BuildArchitecture)</TargetArchitecture>
    <TargetArchitecture  Condition="'$(TargetArchitecture)' == ''">x64</TargetArchitecture>
    <Platform Condition="'$(Platform)'==''">$(TargetArchitecture)</Platform>
  </PropertyGroup>
  <!--
  Projects that have no OS-specific implementations just use Debug and Release for $(Configuration).
  Projects that do have OS-specific implementations use OS_Debug and OS_Release, for all OS's we support even
  if the code is the same between some OS's (so if you have some project that just calls POSIX APIs, we still have
  OSX_[Debug|Release] and Linux_[Debug|Release] configurations.  We do this so that we place all the output under
  a single binary folder and can have a similar experience between the command line and Visual Studio.
  -->

  <!--
  If Configuration is empty that means we are not being built in VS and so folks need to explicitly pass the different
  values for $(ConfigurationGroup) or $(OSGroup) or accept the defaults for them.
  -->
  <PropertyGroup>
    <OSGroup Condition="'$(OS)'=='Unix' AND Exists('/Applications')">OSX</OSGroup>
    <OSGroup Condition="'$(OSGroup)' == ''">$(OS)</OSGroup>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'==''">
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'==''">Debug</ConfigurationGroup>
    <Configuration>$(ConfigurationGroup)</Configuration>
    <Configuration>$(OSGroup)_$(Configuration)</Configuration>
  </PropertyGroup>

  <!--
  If Configuration is set then someone explicitly passed it in or we building from VS. In either case
  default $(ConfigurationGroup) or $(OSGroup) from the Configuration if they aren't
  already explicitly set.
  -->
  <PropertyGroup Condition="'$(Configuration)'!=''">
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'=='' and $(Configuration.EndsWith('Debug'))">Debug</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'=='' and $(Configuration.EndsWith('Release'))">Release</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'==''">Debug</ConfigurationGroup>

    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('Windows'))">Windows_NT</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('Unix'))">Unix</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('Linux'))">Linux</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('OSX'))">OSX</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('FreeBSD'))">FreeBSD</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('NetBSD'))">NetBSD</OSGroup>
    <OSGroup Condition="'$(OSGroup)'==''">AnyOS</OSGroup>
  </PropertyGroup>

  <PropertyGroup>
    <DebugType Condition="'$(DebugType)' == ''">Portable</DebugType>
  </PropertyGroup>

  <PropertyGroup Condition="'$(DisableSourceLink)' == 'true'">
    <EnableSourceLink>false</EnableSourceLink>
    <EnableSourceControlManagerQueries>false</EnableSourceControlManagerQueries>
    <DeterministicSourcePaths>false</DeterministicSourcePaths>
    <!-- Normally set by sourcelink, and needed by the Pack targets -->
    <RepositoryUrl Condition="'$(RepositoryUrl)' == '''">https://github.com/dotnet/core-setup</RepositoryUrl>
  </PropertyGroup>

  <!-- Set up Default symbol and optimization for Configuration -->
  <Choose>
    <When Condition="'$(ConfigurationGroup)'=='Debug'">
      <PropertyGroup>
        <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
        <Optimize Condition="'$(Optimize)' == ''">false</Optimize>
        <DefineConstants>$(DefineConstants),DEBUG,TRACE</DefineConstants>
      </PropertyGroup>
    </When>
    <When Condition="'$(ConfigurationGroup)' == 'Release'">
      <PropertyGroup>
        <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
        <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
        <DefineConstants>$(DefineConstants),TRACE</DefineConstants>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <ConfigurationErrorMsg>$(ConfigurationErrorMsg);Unknown ConfigurationGroup [$(ConfigurationGroup)] specificed in your project.</ConfigurationErrorMsg>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <ExeSuffix Condition="'$(OSGroup)'=='Windows_NT'">.exe</ExeSuffix>
  </PropertyGroup>

  <Import Project="$(HostMachineInfoProps)"
          Condition="Exists('$(HostMachineInfoProps)')" />

  <PropertyGroup Condition="'$(OutputRid)' == '' and '$(HostMachineRid)' != ''">
    <OutputRid>$(HostMachineRid.Remove($(HostMachineRid.LastIndexOf('-'))))-$(TargetArchitecture)</OutputRid>
  </PropertyGroup>

  <!-- Portable -->
  <PropertyGroup Condition="'$(PortableBuild)' == 'true'">
    <OutputRid Condition="'$(OSGroup)' == 'Windows_NT'">win-$(TargetArchitecture)</OutputRid>
    <OutputRid Condition="'$(OSGroup)' == 'OSX'">osx-$(TargetArchitecture)</OutputRid>
    <OutputRid Condition="'$(OSGroup)' == 'Linux' or '$(OSGroup)' == 'Unix'">linux-$(TargetArchitecture)</OutputRid>
    <OutputRid Condition="'$(OSGroup)' == 'FreeBSD'">freebsd-$(TargetArchitecture)</OutputRid>
  </PropertyGroup>

  <PropertyGroup>
    <TestTargetRid Condition="'$(TestTargetRid)' == ''">$(OutputRid)</TestTargetRid>
  </PropertyGroup>

  <!-- Produce assets into the specified blob feed. -->
  <PropertyGroup Condition="'$(DotNetOutputBlobFeedDir)' != ''">
    <AssetOutputPath>$(DotNetOutputBlobFeedDir)assets/</AssetOutputPath>
  </PropertyGroup>

  <!-- Set up the default output and intermediate paths -->
  <PropertyGroup>
    <OSPlatformConfig>$(OutputRid).$(ConfigurationGroup)</OSPlatformConfig>

    <BaseOutputRootPath>$(ArtifactsBinDir)$(OSPlatformConfig)\</BaseOutputRootPath>
    <CrossGenRootPath>$(BaseOutputRootPath)crossgen\</CrossGenRootPath>

    <IntermediateOutputRootPath Condition="'$(IntermediateOutputRootPath)' == ''">$(ArtifactsObjDir)$(OSPlatformConfig)\</IntermediateOutputRootPath>

    <PackagesBasePath Condition="'$(PackagesBasePath)'==''">$(ArtifactsBinDir)$(OSPlatformConfig)/</PackagesBasePath>
    <PackageSymbolsBinDir Condition="'$(PackageSymbolsBinDir)' == ''">$(PackagesBasePath)symbols/</PackageSymbolsBinDir>

    <AssetOutputPath Condition="'$(AssetOutputPath)'==''">$(ArtifactsShippingPackagesDir)</AssetOutputPath>
    <SymbolPackageOutputPath Condition="'$(SymbolPackageOutputPath)'==''">$(ArtifactsShippingPackagesDir)</SymbolPackageOutputPath>

    <!-- Use '/' instead of '\': used directly by WiX which doesn't accept trailing '\'. -->
    <SharedFrameworkPublishDir>$(IntermediateOutputRootPath)sharedFrameworkPublish/</SharedFrameworkPublishDir>
    <SharedFrameworkPublishSymbolsDir>$(IntermediateOutputRootPath)sharedFrameworkPublish.symbols\</SharedFrameworkPublishSymbolsDir>
  </PropertyGroup>

  <PropertyGroup>
    <DisableCrossgen>false</DisableCrossgen>
    <!-- Disable cross-gen on FreeBSD for now. This can be revisited when we have full support. -->
    <DisableCrossgen Condition="'$(OSGroup)'=='FreeBSD'">true</DisableCrossgen>
    <OutputVersionBadge>$(AssetOutputPath)sharedfx_$(OutputRid)_$(ConfigurationGroup)_version_badge.svg</OutputVersionBadge>
  </PropertyGroup>

  <PropertyGroup>
    <DotnetHostString>dotnet-host-</DotnetHostString>
    <DotnetHostFxrString>dotnet-hostfxr-</DotnetHostFxrString>
    <DotnetRuntimeString>dotnet-runtime-</DotnetRuntimeString>
    <DotnetRuntimeDependenciesPackageString>dotnet-runtime-deps-</DotnetRuntimeDependenciesPackageString>

    <CombinedInstallerStart>$(AssetOutputPath)$(DotnetRuntimeString)</CombinedInstallerStart>
    <SharedHostInstallerStart>$(AssetOutputPath)$(DotnetHostString)</SharedHostInstallerStart>
    <HostFxrInstallerStart>$(AssetOutputPath)$(DotnetHostFxrString)</HostFxrInstallerStart>
    <SharedFrameworkInstallerStart>$(AssetOutputPath)$(DotnetRuntimeString)</SharedFrameworkInstallerStart>
    <DotnetRuntimeDependenciesPackageInstallerStart>$(AssetOutputPath)$(DotnetRuntimeDependenciesPackageString)</DotnetRuntimeDependenciesPackageInstallerStart>

    <!-- OSX specific intermediate package suffix . OSX specific intermediate packages are suffixed with -internal to avoid name collision for bundle package (dotnet-runtime-*)
         and runtime ( earlier as dotnet-sharedframework-*)	-->
    <InstallerStartSuffix Condition="'$(OSGroup)' == 'OSX'">internal</InstallerStartSuffix>
    <SharedHostInstallerStart Condition="'$(OSGroup)' == 'OSX'">$(SharedHostInstallerStart)$(InstallerStartSuffix)-</SharedHostInstallerStart>
    <HostFxrInstallerStart Condition="'$(OSGroup)' == 'OSX'">$(HostFxrInstallerStart)$(InstallerStartSuffix)-</HostFxrInstallerStart>
    <SharedFrameworkInstallerStart Condition="'$(OSGroup)' == 'OSX'">$(SharedFrameworkInstallerStart)$(InstallerStartSuffix)-</SharedFrameworkInstallerStart>

  </PropertyGroup>

  <!-- Set up handling of build warnings -->
  <PropertyGroup>
    <WarningLevel>4</WarningLevel>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <PropertyGroup>
    <TargetsWindows>false</TargetsWindows>
    <TargetsOSX>false</TargetsOSX>
    <TargetsLinux>false</TargetsLinux>
    <TargetsUnix>false</TargetsUnix>
    <TargetsUbuntu>false</TargetsUbuntu>
    <TargetsLinuxMint>false</TargetsLinuxMint>
    <TargetsDebian>false</TargetsDebian>
    <TargetsRhel>false</TargetsRhel>
    <TargetsOpensuse>false</TargetsOpensuse>
    <TargetsFedora>false</TargetsFedora>
    <TargetsCentos>false</TargetsCentos>
    <TargetsOracle>false</TargetsOracle>
    <TargetsSles>false</TargetsSles>
  </PropertyGroup>
  <Choose>
    <When Condition="$(OutputRid.StartsWith('win'))">
      <PropertyGroup>
        <TargetsWindows>true</TargetsWindows>
      </PropertyGroup>
    </When>
    <When Condition="$(OutputRid.StartsWith('osx'))">
      <PropertyGroup>
        <TargetsOSX>true</TargetsOSX>
        <TargetsUnix>true</TargetsUnix>
      </PropertyGroup>
    </When>
    <When Condition="$(OutputRid.StartsWith('debian'))">
      <PropertyGroup>
        <TargetsDebian>true</TargetsDebian>
        <TargetsLinux>true</TargetsLinux>
        <TargetsUnix>true</TargetsUnix>
      </PropertyGroup>
    </When>
    <When Condition="$(OutputRid.StartsWith('ubuntu'))">
      <PropertyGroup>
        <TargetsUbuntu>true</TargetsUbuntu>
        <TargetsLinux>true</TargetsLinux>
        <TargetsUnix>true</TargetsUnix>
      </PropertyGroup>
    </When>
    <When Condition="$(OutputRid.StartsWith('linuxmint'))">
      <PropertyGroup>
        <TargetsLinuxMint>true</TargetsLinuxMint>
        <TargetsLinux>true</TargetsLinux>
        <TargetsUnix>true</TargetsUnix>
      </PropertyGroup>
    </When>
    <When Condition="$(OutputRid.StartsWith('rhel'))">
      <PropertyGroup>
        <TargetsRhel>true</TargetsRhel>
        <TargetsLinux>true</TargetsLinux>
        <TargetsUnix>true</TargetsUnix>
      </PropertyGroup>
    </When>
    <When Condition="$(OutputRid.StartsWith('centos'))">
      <PropertyGroup>
        <TargetsCentos>true</TargetsCentos>
        <TargetsLinux>true</TargetsLinux>
        <TargetsUnix>true</TargetsUnix>
      </PropertyGroup>
    </When>
    <When Condition="$(OutputRid.StartsWith('opensuse'))">
      <PropertyGroup>
        <TargetsOpensuse>true</TargetsOpensuse>
        <TargetsLinux>true</TargetsLinux>
        <TargetsUnix>true</TargetsUnix>
      </PropertyGroup>
    </When>
    <When Condition="$(OutputRid.StartsWith('fedora'))">
      <PropertyGroup>
        <TargetsFedora>true</TargetsFedora>
        <TargetsLinux>true</TargetsLinux>
        <TargetsUnix>true</TargetsUnix>
      </PropertyGroup>
    </When>
    <When Condition="$(OutputRid.StartsWith('oracle'))">
      <PropertyGroup>
        <TargetsOracle>true</TargetsOracle>
        <TargetsLinux>true</TargetsLinux>
        <TargetsUnix>true</TargetsUnix>
      </PropertyGroup>
    </When>
    <When Condition="$(OutputRid.StartsWith('sles'))">
      <PropertyGroup>
        <TargetsSles>true</TargetsSles>
        <TargetsLinux>true</TargetsLinux>
        <TargetsUnix>true</TargetsUnix>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <TargetsLinux>true</TargetsLinux>
        <TargetsUnix>true</TargetsUnix>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <CompressedFileExtension Condition="'$(OSGroup)' == 'Windows_NT'">.zip</CompressedFileExtension>
    <CompressedFileExtension Condition="'$(OSGroup)' != 'Windows_NT'">.tar.gz</CompressedFileExtension>
    <InstallerExtension Condition="'$(OSGroup)' == 'Windows_NT'">.msi</InstallerExtension>
    <InstallerExtension Condition="'$(OSGroup)' == 'OSX'">.pkg</InstallerExtension>
    <InstallerExtension Condition="'$(TargetsDebian)' == 'true' or '$(TargetsUbuntu)' == 'true' or '$(TargetsLinuxMint)' == 'true'">.deb</InstallerExtension>
    <InstallerExtension Condition="'$(TargetsRhel)' == 'true' or '$(TargetsCentos)' == 'true' or '$(TargetsOpensuse)' == 'true' or '$(TargetsFedora)' == 'true' or '$(TargetsOracle)' == 'true' or '$(TargetsSles)' == 'true'">.rpm</InstallerExtension>
    <CombinedInstallerExtension Condition="'$(OSGroup)' == 'Windows_NT'">.exe</CombinedInstallerExtension>
    <CombinedInstallerExtension Condition="'$(OSGroup)' != 'Windows_NT'">$(InstallerExtension)</CombinedInstallerExtension>
  </PropertyGroup>

  <!-- Use actual publishable (non-dummy) package name produced by the build system for this RID -->
  <PropertyGroup Condition="'$(OutputRid)' != ''">
    <PackageTargetRid>$(OutputRid)</PackageTargetRid>
    <PackageTargetRid Condition="'$(OutputRid)' == 'osx.10.11-x64'">osx.10.10-x64</PackageTargetRid>
    <PackageTargetRid Condition="$(OutputRid.StartsWith('rhel.7.')) and $(OutputRid.EndsWith('-x64'))">rhel.7-x64</PackageTargetRid>
  </PropertyGroup>

  <PropertyGroup Condition="'$(UsingNETSdkCompiler)' != 'true'">
    <!-- Disable some standard properties for building our projects -->
    <NoStdLib>true</NoStdLib>
    <NoExplicitReferenceToStdLib>true</NoExplicitReferenceToStdLib>
    <AddAdditionalExplicitAssemblyReferences>false</AddAdditionalExplicitAssemblyReferences>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>

    <!-- We don't use any of MSBuild's resolution logic for resolving the framework, so just set these two properties to any folder that exists to skip
         the GenerateReferenceAssemblyPaths task (not target) and to prevent it from outputting a warning (MSB3644). -->
    <_TargetFrameworkDirectories>$(MSBuildThisFileDirectory)documentation</_TargetFrameworkDirectories>
    <_FullFrameworkReferenceAssemblyPaths>$(MSBuildThisFileDirectory)documentation</_FullFrameworkReferenceAssemblyPaths>
    <!-- We do not want to target a portable profile.
         TODO: Make this the default in buildtools so this is not necessary. -->
    <TargetFrameworkProfile></TargetFrameworkProfile>
    <!-- We set this property to avoid MSBuild errors regarding not setting TargetFrameworkProfile (see above line) -->
    <PortableNuGetMode>true</PortableNuGetMode>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Never use the NuGet fallback folder that comes with the SDK we use to build.
         The NuGet fallback folder can/will contain packages we are building in this repo, and we
         want to ensure we use the correct packages.
    -->
    <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
  </PropertyGroup>

  <PropertyGroup>
    <LibPrefix Condition="'$(OSGroup)' != 'Windows_NT'">lib</LibPrefix>
    <LibSuffix>.so</LibSuffix> 
    <LibSuffix Condition="'$(OSGroup)' == 'Windows_NT'">.dll</LibSuffix>
    <LibSuffix Condition="'$(OSGroup)' == 'OSX'">.dylib</LibSuffix>
  </PropertyGroup>

  <PropertyGroup>
    <CrossGenSymbolExtension>.map</CrossGenSymbolExtension>
    <CrossGenSymbolExtension Condition="'$(OSGroup)' == 'Windows_NT'">.ni.pdb</CrossGenSymbolExtension>
    <!-- OSX doesn't have crossgen symbols, yet -->
    <CrossGenSymbolExtension Condition="'$(OSGroup)' == 'OSX'"></CrossGenSymbolExtension>
  </PropertyGroup>

</Project>