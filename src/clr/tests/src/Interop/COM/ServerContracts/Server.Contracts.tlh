// Created by Microsoft (R) C/C++ Compiler

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("3b973377-8c69-4208-96c1-475da757861c"))
/* LIBID */ __Server_Contract;
struct __declspec(uuid("05655a94-a915-4926-815d-a9ea648baad9"))
/* interface */ INumericTesting;
struct __declspec(uuid("7731cb31-e063-4cc8-bcd2-d151d6bc8f43"))
/* interface */ IArrayTesting;
struct __declspec(uuid("7044c5c0-c6c6-4713-9294-b4a4e86d58cc"))
/* interface */ IStringTesting;
struct __declspec(uuid("592386a5-6837-444d-9de3-250815d18556"))
/* interface */ IErrorMarshalTesting;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(INumericTesting, __uuidof(INumericTesting));
_COM_SMARTPTR_TYPEDEF(IArrayTesting, __uuidof(IArrayTesting));
_COM_SMARTPTR_TYPEDEF(IStringTesting, __uuidof(IStringTesting));
_COM_SMARTPTR_TYPEDEF(IErrorMarshalTesting, __uuidof(IErrorMarshalTesting));

//
// Type library items
//

struct __declspec(uuid("05655a94-a915-4926-815d-a9ea648baad9"))
INumericTesting : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    unsigned char Add_Byte (
        unsigned char a,
        unsigned char b );
    short Add_Short (
        short a,
        short b );
    unsigned short Add_UShort (
        unsigned short a,
        unsigned short b );
    long Add_Int (
        long a,
        long b );
    unsigned long Add_UInt (
        unsigned long a,
        unsigned long b );
    __int64 Add_Long (
        __int64 a,
        __int64 b );
    unsigned __int64 Add_ULong (
        unsigned __int64 a,
        unsigned __int64 b );
    float Add_Float (
        float a,
        float b );
    double Add_Double (
        double a,
        double b );
    HRESULT Add_Byte_Ref (
        unsigned char a,
        unsigned char b,
        unsigned char * c );
    HRESULT Add_Short_Ref (
        short a,
        short b,
        short * c );
    HRESULT Add_UShort_Ref (
        unsigned short a,
        unsigned short b,
        unsigned short * c );
    HRESULT Add_Int_Ref (
        long a,
        long b,
        long * c );
    HRESULT Add_UInt_Ref (
        unsigned long a,
        unsigned long b,
        unsigned long * c );
    HRESULT Add_Long_Ref (
        __int64 a,
        __int64 b,
        __int64 * c );
    HRESULT Add_ULong_Ref (
        unsigned __int64 a,
        unsigned __int64 b,
        unsigned __int64 * c );
    HRESULT Add_Float_Ref (
        float a,
        float b,
        float * c );
    HRESULT Add_Double_Ref (
        double a,
        double b,
        double * c );
    HRESULT Add_Byte_Out (
        unsigned char a,
        unsigned char b,
        unsigned char * c );
    HRESULT Add_Short_Out (
        short a,
        short b,
        short * c );
    HRESULT Add_UShort_Out (
        unsigned short a,
        unsigned short b,
        unsigned short * c );
    HRESULT Add_Int_Out (
        long a,
        long b,
        long * c );
    HRESULT Add_UInt_Out (
        unsigned long a,
        unsigned long b,
        unsigned long * c );
    HRESULT Add_Long_Out (
        __int64 a,
        __int64 b,
        __int64 * c );
    HRESULT Add_ULong_Out (
        unsigned __int64 a,
        unsigned __int64 b,
        unsigned __int64 * c );
    HRESULT Add_Float_Out (
        float a,
        float b,
        float * c );
    HRESULT Add_Double_Out (
        double a,
        double b,
        double * c );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add_Byte (
        /*[in]*/ unsigned char a,
        /*[in]*/ unsigned char b,
        /*[out,retval]*/ unsigned char * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add_Short (
        /*[in]*/ short a,
        /*[in]*/ short b,
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add_UShort (
        /*[in]*/ unsigned short a,
        /*[in]*/ unsigned short b,
        /*[out,retval]*/ unsigned short * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add_Int (
        /*[in]*/ long a,
        /*[in]*/ long b,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add_UInt (
        /*[in]*/ unsigned long a,
        /*[in]*/ unsigned long b,
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add_Long (
        /*[in]*/ __int64 a,
        /*[in]*/ __int64 b,
        /*[out,retval]*/ __int64 * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add_ULong (
        /*[in]*/ unsigned __int64 a,
        /*[in]*/ unsigned __int64 b,
        /*[out,retval]*/ unsigned __int64 * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add_Float (
        /*[in]*/ float a,
        /*[in]*/ float b,
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add_Double (
        /*[in]*/ double a,
        /*[in]*/ double b,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add_Byte_Ref (
        /*[in]*/ unsigned char a,
        /*[in]*/ unsigned char b,
        /*[in,out]*/ unsigned char * c ) = 0;
      virtual HRESULT __stdcall raw_Add_Short_Ref (
        /*[in]*/ short a,
        /*[in]*/ short b,
        /*[in,out]*/ short * c ) = 0;
      virtual HRESULT __stdcall raw_Add_UShort_Ref (
        /*[in]*/ unsigned short a,
        /*[in]*/ unsigned short b,
        /*[in,out]*/ unsigned short * c ) = 0;
      virtual HRESULT __stdcall raw_Add_Int_Ref (
        /*[in]*/ long a,
        /*[in]*/ long b,
        /*[in,out]*/ long * c ) = 0;
      virtual HRESULT __stdcall raw_Add_UInt_Ref (
        /*[in]*/ unsigned long a,
        /*[in]*/ unsigned long b,
        /*[in,out]*/ unsigned long * c ) = 0;
      virtual HRESULT __stdcall raw_Add_Long_Ref (
        /*[in]*/ __int64 a,
        /*[in]*/ __int64 b,
        /*[in,out]*/ __int64 * c ) = 0;
      virtual HRESULT __stdcall raw_Add_ULong_Ref (
        /*[in]*/ unsigned __int64 a,
        /*[in]*/ unsigned __int64 b,
        /*[in,out]*/ unsigned __int64 * c ) = 0;
      virtual HRESULT __stdcall raw_Add_Float_Ref (
        /*[in]*/ float a,
        /*[in]*/ float b,
        /*[in,out]*/ float * c ) = 0;
      virtual HRESULT __stdcall raw_Add_Double_Ref (
        /*[in]*/ double a,
        /*[in]*/ double b,
        /*[in,out]*/ double * c ) = 0;
      virtual HRESULT __stdcall raw_Add_Byte_Out (
        /*[in]*/ unsigned char a,
        /*[in]*/ unsigned char b,
        /*[out]*/ unsigned char * c ) = 0;
      virtual HRESULT __stdcall raw_Add_Short_Out (
        /*[in]*/ short a,
        /*[in]*/ short b,
        /*[out]*/ short * c ) = 0;
      virtual HRESULT __stdcall raw_Add_UShort_Out (
        /*[in]*/ unsigned short a,
        /*[in]*/ unsigned short b,
        /*[out]*/ unsigned short * c ) = 0;
      virtual HRESULT __stdcall raw_Add_Int_Out (
        /*[in]*/ long a,
        /*[in]*/ long b,
        /*[out]*/ long * c ) = 0;
      virtual HRESULT __stdcall raw_Add_UInt_Out (
        /*[in]*/ unsigned long a,
        /*[in]*/ unsigned long b,
        /*[out]*/ unsigned long * c ) = 0;
      virtual HRESULT __stdcall raw_Add_Long_Out (
        /*[in]*/ __int64 a,
        /*[in]*/ __int64 b,
        /*[out]*/ __int64 * c ) = 0;
      virtual HRESULT __stdcall raw_Add_ULong_Out (
        /*[in]*/ unsigned __int64 a,
        /*[in]*/ unsigned __int64 b,
        /*[out]*/ unsigned __int64 * c ) = 0;
      virtual HRESULT __stdcall raw_Add_Float_Out (
        /*[in]*/ float a,
        /*[in]*/ float b,
        /*[out]*/ float * c ) = 0;
      virtual HRESULT __stdcall raw_Add_Double_Out (
        /*[in]*/ double a,
        /*[in]*/ double b,
        /*[out]*/ double * c ) = 0;
};

struct __declspec(uuid("7731cb31-e063-4cc8-bcd2-d151d6bc8f43"))
IArrayTesting : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    double Mean_Byte_LP_PreLen (
        long len,
        unsigned char * d );
    double Mean_Short_LP_PreLen (
        long len,
        short * d );
    double Mean_UShort_LP_PreLen (
        long len,
        unsigned short * d );
    double Mean_Int_LP_PreLen (
        long len,
        long * d );
    double Mean_UInt_LP_PreLen (
        long len,
        unsigned long * d );
    double Mean_Long_LP_PreLen (
        long len,
        __int64 * d );
    double Mean_ULong_LP_PreLen (
        long len,
        unsigned __int64 * d );
    double Mean_Float_LP_PreLen (
        long len,
        float * d );
    double Mean_Double_LP_PreLen (
        long len,
        double * d );
    double Mean_Byte_LP_PostLen (
        unsigned char * d,
        long len );
    double Mean_Short_LP_PostLen (
        short * d,
        long len );
    double Mean_UShort_LP_PostLen (
        unsigned short * d,
        long len );
    double Mean_Int_LP_PostLen (
        long * d,
        long len );
    double Mean_UInt_LP_PostLen (
        unsigned long * d,
        long len );
    double Mean_Long_LP_PostLen (
        __int64 * d,
        long len );
    double Mean_ULong_LP_PostLen (
        unsigned __int64 * d,
        long len );
    double Mean_Float_LP_PostLen (
        float * d,
        long len );
    double Mean_Double_LP_PostLen (
        double * d,
        long len );
    double Mean_Byte_SafeArray_OutLen (
        SAFEARRAY * d,
        long * len );
    double Mean_Short_SafeArray_OutLen (
        SAFEARRAY * d,
        long * len );
    double Mean_UShort_SafeArray_OutLen (
        SAFEARRAY * d,
        long * len );
    double Mean_Int_SafeArray_OutLen (
        SAFEARRAY * d,
        long * len );
    double Mean_UInt_SafeArray_OutLen (
        SAFEARRAY * d,
        long * len );
    double Mean_Long_SafeArray_OutLen (
        SAFEARRAY * d,
        long * len );
    double Mean_ULong_SafeArray_OutLen (
        SAFEARRAY * d,
        long * len );
    double Mean_Float_SafeArray_OutLen (
        SAFEARRAY * d,
        long * len );
    double Mean_Double_SafeArray_OutLen (
        SAFEARRAY * d,
        long * len );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Mean_Byte_LP_PreLen (
        /*[in]*/ long len,
        /*[in]*/ unsigned char * d,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Short_LP_PreLen (
        /*[in]*/ long len,
        /*[in]*/ short * d,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_UShort_LP_PreLen (
        /*[in]*/ long len,
        /*[in]*/ unsigned short * d,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Int_LP_PreLen (
        /*[in]*/ long len,
        /*[in]*/ long * d,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_UInt_LP_PreLen (
        /*[in]*/ long len,
        /*[in]*/ unsigned long * d,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Long_LP_PreLen (
        /*[in]*/ long len,
        /*[in]*/ __int64 * d,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_ULong_LP_PreLen (
        /*[in]*/ long len,
        /*[in]*/ unsigned __int64 * d,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Float_LP_PreLen (
        /*[in]*/ long len,
        /*[in]*/ float * d,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Double_LP_PreLen (
        /*[in]*/ long len,
        /*[in]*/ double * d,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Byte_LP_PostLen (
        /*[in]*/ unsigned char * d,
        /*[in]*/ long len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Short_LP_PostLen (
        /*[in]*/ short * d,
        /*[in]*/ long len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_UShort_LP_PostLen (
        /*[in]*/ unsigned short * d,
        /*[in]*/ long len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Int_LP_PostLen (
        /*[in]*/ long * d,
        /*[in]*/ long len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_UInt_LP_PostLen (
        /*[in]*/ unsigned long * d,
        /*[in]*/ long len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Long_LP_PostLen (
        /*[in]*/ __int64 * d,
        /*[in]*/ long len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_ULong_LP_PostLen (
        /*[in]*/ unsigned __int64 * d,
        /*[in]*/ long len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Float_LP_PostLen (
        /*[in]*/ float * d,
        /*[in]*/ long len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Double_LP_PostLen (
        /*[in]*/ double * d,
        /*[in]*/ long len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Byte_SafeArray_OutLen (
        /*[in]*/ SAFEARRAY * d,
        /*[out]*/ long * len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Short_SafeArray_OutLen (
        /*[in]*/ SAFEARRAY * d,
        /*[out]*/ long * len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_UShort_SafeArray_OutLen (
        /*[in]*/ SAFEARRAY * d,
        /*[out]*/ long * len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Int_SafeArray_OutLen (
        /*[in]*/ SAFEARRAY * d,
        /*[out]*/ long * len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_UInt_SafeArray_OutLen (
        /*[in]*/ SAFEARRAY * d,
        /*[out]*/ long * len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Long_SafeArray_OutLen (
        /*[in]*/ SAFEARRAY * d,
        /*[out]*/ long * len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_ULong_SafeArray_OutLen (
        /*[in]*/ SAFEARRAY * d,
        /*[out]*/ long * len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Float_SafeArray_OutLen (
        /*[in]*/ SAFEARRAY * d,
        /*[out]*/ long * len,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mean_Double_SafeArray_OutLen (
        /*[in]*/ SAFEARRAY * d,
        /*[out]*/ long * len,
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("7044c5c0-c6c6-4713-9294-b4a4e86d58cc"))
IStringTesting : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    LPSTR Add_LPStr (
        LPSTR a,
        LPSTR b );
    LPWSTR Add_LPWStr (
        LPWSTR a,
        LPWSTR b );
    _bstr_t Add_BStr (
        _bstr_t a,
        _bstr_t b );
    LPSTR Reverse_LPStr (
        LPSTR a );
    LPSTR Reverse_LPStr_Ref (
        LPSTR * a );
    LPSTR Reverse_LPStr_InRef (
        LPSTR * a );
    HRESULT Reverse_LPStr_Out (
        LPSTR a,
        LPSTR * b );
    HRESULT Reverse_LPStr_OutAttr (
        LPSTR a,
        LPSTR b );
    LPSTR Reverse_SB_LPStr (
        LPSTR a );
    LPSTR Reverse_SB_LPStr_Ref (
        LPSTR * a );
    LPSTR Reverse_SB_LPStr_InRef (
        LPSTR * a );
    HRESULT Reverse_SB_LPStr_Out (
        LPSTR a,
        LPSTR * b );
    HRESULT Reverse_SB_LPStr_OutAttr (
        LPSTR a,
        LPSTR b );
    LPWSTR Reverse_LPWStr (
        LPWSTR a );
    LPWSTR Reverse_LPWStr_Ref (
        LPWSTR * a );
    LPWSTR Reverse_LPWStr_InRef (
        LPWSTR * a );
    HRESULT Reverse_LPWStr_Out (
        LPWSTR a,
        LPWSTR * b );
    HRESULT Reverse_LPWStr_OutAttr (
        LPWSTR a,
        LPWSTR b );
    LPWSTR Reverse_SB_LPWStr (
        LPWSTR a );
    LPWSTR Reverse_SB_LPWStr_Ref (
        LPWSTR * a );
    LPWSTR Reverse_SB_LPWStr_InRef (
        LPWSTR * a );
    HRESULT Reverse_SB_LPWStr_Out (
        LPWSTR a,
        LPWSTR * b );
    HRESULT Reverse_SB_LPWStr_OutAttr (
        LPWSTR a,
        LPWSTR b );
    _bstr_t Reverse_BStr (
        _bstr_t a );
    _bstr_t Reverse_BStr_Ref (
        BSTR * a );
    _bstr_t Reverse_BStr_InRef (
        BSTR * a );
    HRESULT Reverse_BStr_Out (
        _bstr_t a,
        BSTR * b );
    HRESULT Reverse_BStr_OutAttr (
        _bstr_t a,
        _bstr_t b );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add_LPStr (
        /*[in]*/ LPSTR a,
        /*[in]*/ LPSTR b,
        /*[out,retval]*/ LPSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add_LPWStr (
        /*[in]*/ LPWSTR a,
        /*[in]*/ LPWSTR b,
        /*[out,retval]*/ LPWSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add_BStr (
        /*[in]*/ BSTR a,
        /*[in]*/ BSTR b,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_LPStr (
        /*[in]*/ LPSTR a,
        /*[out,retval]*/ LPSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_LPStr_Ref (
        /*[in,out]*/ LPSTR * a,
        /*[out,retval]*/ LPSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_LPStr_InRef (
        /*[in]*/ LPSTR * a,
        /*[out,retval]*/ LPSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_LPStr_Out (
        /*[in]*/ LPSTR a,
        /*[out]*/ LPSTR * b ) = 0;
      virtual HRESULT __stdcall raw_Reverse_LPStr_OutAttr (
        /*[in]*/ LPSTR a,
        /*[out]*/ LPSTR b ) = 0;
      virtual HRESULT __stdcall raw_Reverse_SB_LPStr (
        /*[in,out]*/ LPSTR a,
        /*[out,retval]*/ LPSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_SB_LPStr_Ref (
        /*[in,out]*/ LPSTR * a,
        /*[out,retval]*/ LPSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_SB_LPStr_InRef (
        /*[in]*/ LPSTR * a,
        /*[out,retval]*/ LPSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_SB_LPStr_Out (
        /*[in,out]*/ LPSTR a,
        /*[out]*/ LPSTR * b ) = 0;
      virtual HRESULT __stdcall raw_Reverse_SB_LPStr_OutAttr (
        /*[in,out]*/ LPSTR a,
        /*[out]*/ LPSTR b ) = 0;
      virtual HRESULT __stdcall raw_Reverse_LPWStr (
        /*[in]*/ LPWSTR a,
        /*[out,retval]*/ LPWSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_LPWStr_Ref (
        /*[in,out]*/ LPWSTR * a,
        /*[out,retval]*/ LPWSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_LPWStr_InRef (
        /*[in]*/ LPWSTR * a,
        /*[out,retval]*/ LPWSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_LPWStr_Out (
        /*[in]*/ LPWSTR a,
        /*[out]*/ LPWSTR * b ) = 0;
      virtual HRESULT __stdcall raw_Reverse_LPWStr_OutAttr (
        /*[in]*/ LPWSTR a,
        /*[out]*/ LPWSTR b ) = 0;
      virtual HRESULT __stdcall raw_Reverse_SB_LPWStr (
        /*[in,out]*/ LPWSTR a,
        /*[out,retval]*/ LPWSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_SB_LPWStr_Ref (
        /*[in,out]*/ LPWSTR * a,
        /*[out,retval]*/ LPWSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_SB_LPWStr_InRef (
        /*[in]*/ LPWSTR * a,
        /*[out,retval]*/ LPWSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_SB_LPWStr_Out (
        /*[in,out]*/ LPWSTR a,
        /*[out]*/ LPWSTR * b ) = 0;
      virtual HRESULT __stdcall raw_Reverse_SB_LPWStr_OutAttr (
        /*[in,out]*/ LPWSTR a,
        /*[out]*/ LPWSTR b ) = 0;
      virtual HRESULT __stdcall raw_Reverse_BStr (
        /*[in]*/ BSTR a,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_BStr_Ref (
        /*[in,out]*/ BSTR * a,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_BStr_InRef (
        /*[in]*/ BSTR * a,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse_BStr_Out (
        /*[in]*/ BSTR a,
        /*[out]*/ BSTR * b ) = 0;
      virtual HRESULT __stdcall raw_Reverse_BStr_OutAttr (
        /*[in]*/ BSTR a,
        /*[out]*/ BSTR b ) = 0;
};

struct __declspec(uuid("592386a5-6837-444d-9de3-250815d18556"))
IErrorMarshalTesting : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Throw_HResult (
        long hresultToReturn );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Throw_HResult (
        /*[in]*/ long hresultToReturn ) = 0;
      virtual long __stdcall Return_As_HResult (
        /*[in]*/ long hresultToReturn ) = 0;
};

//
// Wrapper method implementations
//

#include "Server.Contracts.tli"

#pragma pack(pop)
