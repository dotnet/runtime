//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information. 
//

// DDPack.cpp
// Implementation of DDMarshal.
// Lives on DI side. Packs DDInterface calls into a byte stream.
//
// Note that this file is generated by ndp\clr\src\Debug\tools\BuildDDMarshal\.  
// Changes should be made to output\DDPack_template.cpp in that directory.
// 


#include "stdafx.h"

#ifdef FEATURE_DBGIPC_TRANSPORT_DI
#include "dacdbiinterface.h"

#include "ddpack.h"

#include "rspriv.h" // for StringCopyHolder

#include "ddshared.h"

// Get common marshaling utilities
#include "ddmarshalutil.h"


// Suppress PREFast warning about overly large function
// These functions are automatically generated.
#if defined(_PREFAST_)
#pragma warning(disable:21000) 
#endif

/*
// Called in Real DacDbi-Implementation space. Part of the unpacking stubs. 
// Needs 
//void HandleDDMessage(ReadBuffer * pSend, WriteBuffer * pResult);

// Called by Packing stubs from Right-side. 
void DDMarshal::SendDDMessage(WriteBuffer * pSend, ReadBuffer * pResult)
{
    // For now, this is an in-memory transport. Simulate sending an event.
    // When this becomes IPC events, we'll need a CordbProcess*
    ReadBuffer pSend2;
    pSend2.Open(pSend);

    WriteBuffer pResult2;
    m_pUnpack->HandleDDMessage(&pSend2, &pResult2);
    pResult->Open(&pResult2);
}
*/

HRESULT DDMarshal::Init()
{
    HandleHolder hDummy;
    HRESULT hr = E_FAIL;

    MachineInfo machineInfo = m_pProcess->GetShim()->GetMachineInfo();

    hr = g_pDbgTransportManager->ConnectToTarget(machineInfo.GetIPAddress(), machineInfo.GetPort(), &m_pProxy);
    if (FAILED(hr))
    {
        goto Label_Exit;
    }

    hr = m_pProxy->GetTransportForProcess(m_pProcess->GetPid(), &m_pTransport, &hDummy);
    if (FAILED(hr))
    {
        goto Label_Exit;
    }

    if (!m_pTransport->WaitForSessionToOpen(10000))
    {
        hr = CORDBG_E_TIMEOUT;
        goto Label_Exit;
    }
    
Label_Exit:
    if (FAILED(hr))
    {
        if (m_pTransport != NULL)
        {
            m_pProxy->ReleaseTransport(m_pTransport);
        }

        if (m_pProxy != NULL)
        {
            g_pDbgTransportManager->ReleaseTarget(m_pProxy);
        }
    }
    return hr;
}

void DDMarshal::Destroy()
{
    // The LS DAC resources will be cleaned up when InProcDac is destructed.
    if (m_pTransport != NULL)
    {
        m_pProxy->ReleaseTransport(m_pTransport);
    }

    if (m_pProxy != NULL)
    {
        g_pDbgTransportManager->ReleaseTarget(m_pProxy);
    }
}



// {%PackImpls%}

// 
//  Impls
// 

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::CheckDbiVersion
HRESULT DDMarshal::CheckDbiVersion(const DbiVersion * pVersion)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_CheckDbiVersion); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, pVersion);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method CheckDbiVersion

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetLocalInterfaceHashAndTimestamp
void DDMarshal::GetLocalInterfaceHashAndTimestamp(DWORD & hash1, DWORD & hash2, DWORD & hash3, DWORD & hash4, DWORD & timestamp1, DWORD & timestamp2)
{
    hash1 = 0xe5ffdbe6;
    hash2 = 0xf26b43be;
    hash3 = 0x6c9685ac;
    hash4 = 0xdd723940;
    timestamp1 = 0x1cc67fb;
    timestamp2 = 0xe3ad5a06;
} // end method GetLocalInterfaceHashAndTimestamp

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetRemoteInterfaceHashAndTimestamp
void DDMarshal::GetRemoteInterfaceHashAndTimestamp(DWORD & hash1, DWORD & hash2, DWORD & hash3, DWORD & hash4, DWORD & timestamp1, DWORD & timestamp2)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetRemoteInterfaceHashAndTimestamp); // message id
    // Copy in-parameters to the send-buffer
    // hash1 does not need to be copied on input
    // hash2 does not need to be copied on input
    // hash3 does not need to be copied on input
    // hash4 does not need to be copied on input
    // timestamp1 does not need to be copied on input
    // timestamp2 does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, hash1);
    ReadFromBuffer(&bRecv, hash2);
    ReadFromBuffer(&bRecv, hash3);
    ReadFromBuffer(&bRecv, hash4);
    ReadFromBuffer(&bRecv, timestamp1);
    ReadFromBuffer(&bRecv, timestamp2);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetRemoteInterfaceHashAndTimestamp

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::FlushCache
HRESULT DDMarshal::FlushCache()
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_FlushCache); // message id
    // Copy in-parameters to the send-buffer

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method FlushCache

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::DacSetTargetConsistencyChecks
void DDMarshal::DacSetTargetConsistencyChecks(bool fEnableAsserts)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_DacSetTargetConsistencyChecks); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, fEnableAsserts);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method DacSetTargetConsistencyChecks

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsLeftSideInitialized
BOOL DDMarshal::IsLeftSideInitialized()
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsLeftSideInitialized); // message id
    // Copy in-parameters to the send-buffer

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsLeftSideInitialized

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetAppDomainFromId
VMPTR_AppDomain DDMarshal::GetAppDomainFromId(ULONG appdomainId)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetAppDomainFromId); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, appdomainId);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    VMPTR_AppDomain _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetAppDomainFromId

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetAppDomainId
ULONG DDMarshal::GetAppDomainId(VMPTR_AppDomain vmAppDomain)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetAppDomainId); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAppDomain);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    ULONG _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetAppDomainId

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetAppDomainObject
VMPTR_OBJECTHANDLE DDMarshal::GetAppDomainObject(VMPTR_AppDomain vmAppDomain)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetAppDomainObject); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAppDomain);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    VMPTR_OBJECTHANDLE _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetAppDomainObject

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsDefaultDomain
BOOL DDMarshal::IsDefaultDomain(VMPTR_AppDomain vmAppDomain)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsDefaultDomain); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAppDomain);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsDefaultDomain

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetAssemblyFromDomainAssembly
void DDMarshal::GetAssemblyFromDomainAssembly(VMPTR_DomainAssembly vmDomainAssembly, VMPTR_Assembly * vmAssembly)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetAssemblyFromDomainAssembly); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmDomainAssembly);
    // vmAssembly does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, vmAssembly);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetAssemblyFromDomainAssembly

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsAssemblyFullyTrusted
BOOL DDMarshal::IsAssemblyFullyTrusted(VMPTR_DomainAssembly vmDomainAssembly)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsAssemblyFullyTrusted); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmDomainAssembly);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsAssemblyFullyTrusted

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetAppDomainFullName
void DDMarshal::GetAppDomainFullName(VMPTR_AppDomain vmAppDomain, IStringHolder * pStrName)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetAppDomainFullName); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAppDomain);
    // pStrName does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pStrName);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetAppDomainFullName

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetModuleSimpleName
void DDMarshal::GetModuleSimpleName(VMPTR_Module vmModule, IStringHolder * pStrFilename)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetModuleSimpleName); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmModule);
    // pStrFilename does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pStrFilename);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetModuleSimpleName

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetAssemblyPath
BOOL DDMarshal::GetAssemblyPath(VMPTR_Assembly vmAssembly, IStringHolder * pStrFilename)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetAssemblyPath); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAssembly);
    // pStrFilename does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pStrFilename);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetAssemblyPath

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::ResolveTypeReference
void DDMarshal::ResolveTypeReference(const TypeRefData * pTypeRefInfo, TypeRefData * pTargetRefInfo)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_ResolveTypeReference); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, pTypeRefInfo);
    WriteToBuffer(&bSend, pTargetRefInfo);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pTargetRefInfo);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method ResolveTypeReference

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetModulePath
BOOL DDMarshal::GetModulePath(VMPTR_Module vmModule, IStringHolder * pStrFilename)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetModulePath); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmModule);
    // pStrFilename does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pStrFilename);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetModulePath

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetModuleNGenPath
BOOL DDMarshal::GetModuleNGenPath(VMPTR_Module vmModule, IStringHolder * pStrFilename)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetModuleNGenPath); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmModule);
    // pStrFilename does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pStrFilename);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetModuleNGenPath

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetMetadata
void DDMarshal::GetMetadata(VMPTR_Module vmModule, TargetBuffer * pTargetBuffer)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetMetadata); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmModule);
    // pTargetBuffer does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pTargetBuffer);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetMetadata

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetSymbolsBuffer
void DDMarshal::GetSymbolsBuffer(VMPTR_Module vmModule, TargetBuffer * pTargetBuffer, IDacDbiInterface::SymbolFormat * pSymbolFormat)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetSymbolsBuffer); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmModule);
    // pTargetBuffer does not need to be copied on input
    // pSymbolFormat does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pTargetBuffer);
    ReadFromBuffer(&bRecv, pSymbolFormat);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetSymbolsBuffer

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetModuleData
void DDMarshal::GetModuleData(VMPTR_Module vmModule, ModuleInfo * pData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetModuleData); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmModule);
    // pData does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pData);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetModuleData

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetDomainFileData
void DDMarshal::GetDomainFileData(VMPTR_DomainFile vmDomainFile, DomainFileInfo * pData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetDomainFileData); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmDomainFile);
    // pData does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pData);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetDomainFileData

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetModuleForDomainFile
void DDMarshal::GetModuleForDomainFile(VMPTR_DomainFile vmDomainFile, VMPTR_Module * pModule)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetModuleForDomainFile); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmDomainFile);
    // pModule does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pModule);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetModuleForDomainFile

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetAddressType
IDacDbiInterface::AddressType DDMarshal::GetAddressType(CORDB_ADDRESS address)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetAddressType); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, address);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    IDacDbiInterface::AddressType _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetAddressType

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsTransitionStub
BOOL DDMarshal::IsTransitionStub(CORDB_ADDRESS address)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsTransitionStub); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, address);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsTransitionStub

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetCompilerFlags
void DDMarshal::GetCompilerFlags(VMPTR_DomainFile vmDomainFile, BOOL * pfAllowJITOpts, BOOL * pfEnableEnC)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetCompilerFlags); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmDomainFile);
    // pfAllowJITOpts does not need to be copied on input
    // pfEnableEnC does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pfAllowJITOpts);
    ReadFromBuffer(&bRecv, pfEnableEnC);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetCompilerFlags

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::SetCompilerFlags
HRESULT DDMarshal::SetCompilerFlags(VMPTR_DomainFile vmDomainFile, BOOL fAllowJitOpts, BOOL fEnableEnC)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_SetCompilerFlags); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmDomainFile);
    WriteToBuffer(&bSend, fAllowJitOpts);
    WriteToBuffer(&bSend, fEnableEnC);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method SetCompilerFlags

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::EnumerateAppDomains
void DDMarshal::EnumerateAppDomains(IDacDbiInterface::FP_APPDOMAIN_ENUMERATION_CALLBACK fpCallback, CALLBACK_DATA pUserData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_EnumerateAppDomains); // message id
    // Copy in-parameters to the send-buffer
    // fpCallback does not need to be copied on input
    // pUserData does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    // Result buffer contains the entire enumeration. Now iterate through that 
    // locally and invoke the user's callback.
    while (true)
    {
        // Check status word before each element. 
        // 1 means there's another item. 2 means it's the end of the enumeration.
        DWORD dw;
        ReadFromBuffer(&bRecv, dw);
        if (dw == 2)
            break;
        _ASSERTE(dw == 1);

        VMPTR_AppDomain data;
        ReadFromBuffer(&bRecv, data);

        // Invoke user callback. This may throw.
        fpCallback(data, pUserData);
    }

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method EnumerateAppDomains

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::EnumerateAssembliesInAppDomain
void DDMarshal::EnumerateAssembliesInAppDomain(VMPTR_AppDomain vmAppDomain, IDacDbiInterface::FP_ASSEMBLY_ENUMERATION_CALLBACK fpCallback, CALLBACK_DATA pUserData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_EnumerateAssembliesInAppDomain); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAppDomain);
    // fpCallback does not need to be copied on input
    // pUserData does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    // Result buffer contains the entire enumeration. Now iterate through that 
    // locally and invoke the user's callback.
    while (true)
    {
        // Check status word before each element. 
        // 1 means there's another item. 2 means it's the end of the enumeration.
        DWORD dw;
        ReadFromBuffer(&bRecv, dw);
        if (dw == 2)
            break;
        _ASSERTE(dw == 1);

        VMPTR_DomainAssembly data;
        ReadFromBuffer(&bRecv, data);

        // Invoke user callback. This may throw.
        fpCallback(data, pUserData);
    }

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method EnumerateAssembliesInAppDomain

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::EnumerateModulesInAssembly
void DDMarshal::EnumerateModulesInAssembly(VMPTR_DomainAssembly vmAssembly, IDacDbiInterface::FP_MODULE_ENUMERATION_CALLBACK fpCallback, CALLBACK_DATA pUserData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_EnumerateModulesInAssembly); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAssembly);
    // fpCallback does not need to be copied on input
    // pUserData does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    // Result buffer contains the entire enumeration. Now iterate through that 
    // locally and invoke the user's callback.
    while (true)
    {
        // Check status word before each element. 
        // 1 means there's another item. 2 means it's the end of the enumeration.
        DWORD dw;
        ReadFromBuffer(&bRecv, dw);
        if (dw == 2)
            break;
        _ASSERTE(dw == 1);

        VMPTR_DomainFile data;
        ReadFromBuffer(&bRecv, data);

        // Invoke user callback. This may throw.
        fpCallback(data, pUserData);
    }

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method EnumerateModulesInAssembly

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::RequestSyncAtEvent
void DDMarshal::RequestSyncAtEvent()
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_RequestSyncAtEvent); // message id
    // Copy in-parameters to the send-buffer

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method RequestSyncAtEvent

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::MarkDebuggerAttachPending
void DDMarshal::MarkDebuggerAttachPending()
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_MarkDebuggerAttachPending); // message id
    // Copy in-parameters to the send-buffer

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method MarkDebuggerAttachPending

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::MarkDebuggerAttached
void DDMarshal::MarkDebuggerAttached(BOOL fAttached)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_MarkDebuggerAttached); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, fAttached);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method MarkDebuggerAttached

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::Hijack
void DDMarshal::Hijack(VMPTR_Thread vmThread, ULONG32 dwThreadId, const EXCEPTION_RECORD * pRecord, T_CONTEXT * pOriginalContext, ULONG32 cbSizeContext, EHijackReason::EHijackReason reason, void * pUserData, CORDB_ADDRESS * pRemoteContextAddr)
{
    _ASSERTE(!"Calling unimplemented callback:Hijack");
} // end method Hijack

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::EnumerateConnections
void DDMarshal::EnumerateConnections(IDacDbiInterface::FP_CONNECTION_CALLBACK fpCallback, CALLBACK_DATA pUserData)
{
    _ASSERTE(!"Calling unimplemented callback:EnumerateConnections");
} // end method EnumerateConnections

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::EnumerateThreads
void DDMarshal::EnumerateThreads(IDacDbiInterface::FP_THREAD_ENUMERATION_CALLBACK fpCallback, CALLBACK_DATA pUserData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_EnumerateThreads); // message id
    // Copy in-parameters to the send-buffer
    // fpCallback does not need to be copied on input
    // pUserData does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    // Result buffer contains the entire enumeration. Now iterate through that 
    // locally and invoke the user's callback.
    while (true)
    {
        // Check status word before each element. 
        // 1 means there's another item. 2 means it's the end of the enumeration.
        DWORD dw;
        ReadFromBuffer(&bRecv, dw);
        if (dw == 2)
            break;
        _ASSERTE(dw == 1);

        VMPTR_Thread data;
        ReadFromBuffer(&bRecv, data);

        // Invoke user callback. This may throw.
        fpCallback(data, pUserData);
    }

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method EnumerateThreads

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsThreadMarkedDead
bool DDMarshal::IsThreadMarkedDead(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsThreadMarkedDead); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    bool _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsThreadMarkedDead

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetThreadHandle
HANDLE DDMarshal::GetThreadHandle(VMPTR_Thread vmThread)
{
    _ASSERTE(!"Calling unimplemented callback:GetThreadHandle");
 ThrowHR(E_NOTIMPL);
} // end method GetThreadHandle

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetThreadObject
VMPTR_OBJECTHANDLE DDMarshal::GetThreadObject(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetThreadObject); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    VMPTR_OBJECTHANDLE _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetThreadObject

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::SetDebugState
void DDMarshal::SetDebugState(VMPTR_Thread vmThread, CorDebugThreadState debugState)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_SetDebugState); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);
    WriteToBuffer(&bSend, debugState);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method SetDebugState

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::HasUnhandledException
BOOL DDMarshal::HasUnhandledException(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_HasUnhandledException); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method HasUnhandledException

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetUserState
CorDebugUserState DDMarshal::GetUserState(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetUserState); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    CorDebugUserState _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetUserState

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetConnectionID
CONNID DDMarshal::GetConnectionID(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetConnectionID); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    CONNID _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetConnectionID

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetTaskID
TASKID DDMarshal::GetTaskID(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetTaskID); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    TASKID _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetTaskID

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::TryGetVolatileOSThreadID
DWORD DDMarshal::TryGetVolatileOSThreadID(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_TryGetVolatileOSThreadID); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    DWORD _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method TryGetVolatileOSThreadID

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetUniqueThreadID
DWORD DDMarshal::GetUniqueThreadID(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetUniqueThreadID); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    DWORD _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetUniqueThreadID

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetCurrentException
VMPTR_OBJECTHANDLE DDMarshal::GetCurrentException(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetCurrentException); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    VMPTR_OBJECTHANDLE _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetCurrentException

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetCurrentCustomDebuggerNotification
VMPTR_OBJECTHANDLE DDMarshal::GetCurrentCustomDebuggerNotification(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetCurrentCustomDebuggerNotification); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    VMPTR_OBJECTHANDLE _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetCurrentCustomDebuggerNotification

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetCurrentAppDomain
VMPTR_AppDomain DDMarshal::GetCurrentAppDomain(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetCurrentAppDomain); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    VMPTR_AppDomain _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetCurrentAppDomain

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::ResolveAssembly
VMPTR_DomainAssembly DDMarshal::ResolveAssembly(VMPTR_DomainFile vmScope, mdToken tkAssemblyRef)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_ResolveAssembly); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmScope);
    WriteToBuffer(&bSend, tkAssemblyRef);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    VMPTR_DomainAssembly _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method ResolveAssembly

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetNativeCodeSequencePointsAndVarInfo
void DDMarshal::GetNativeCodeSequencePointsAndVarInfo(VMPTR_MethodDesc vmMethodDesc, CORDB_ADDRESS startAddress, BOOL fCodeAvailabe, NativeVarData * pNativeVarData, SequencePoints * pSequencePoints)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetNativeCodeSequencePointsAndVarInfo); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmMethodDesc);
    WriteToBuffer(&bSend, startAddress);
    WriteToBuffer(&bSend, fCodeAvailabe);
    // pNativeVarData does not need to be copied on input
    // pSequencePoints does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pNativeVarData);
    ReadFromBuffer(&bRecv, pSequencePoints);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetNativeCodeSequencePointsAndVarInfo

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetManagedStoppedContext
VMPTR_CONTEXT DDMarshal::GetManagedStoppedContext(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetManagedStoppedContext); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    VMPTR_CONTEXT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetManagedStoppedContext

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::CreateStackWalk
void DDMarshal::CreateStackWalk(VMPTR_Thread vmThread, DT_CONTEXT * pInternalContextBuffer, StackWalkHandle * ppSFIHandle)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_CreateStackWalk); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);
    WriteToBuffer(&bSend, pInternalContextBuffer);
    // ppSFIHandle does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pInternalContextBuffer);
    ReadFromBuffer(&bRecv, ppSFIHandle);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method CreateStackWalk

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::DeleteStackWalk
void DDMarshal::DeleteStackWalk(StackWalkHandle ppSFIHandle)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_DeleteStackWalk); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, ppSFIHandle);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method DeleteStackWalk

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetStackWalkCurrentContext
void DDMarshal::GetStackWalkCurrentContext(StackWalkHandle pSFIHandle, DT_CONTEXT * pContext)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetStackWalkCurrentContext); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, pSFIHandle);
    WriteToBuffer(&bSend, pContext);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pContext);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetStackWalkCurrentContext

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::SetStackWalkCurrentContext
void DDMarshal::SetStackWalkCurrentContext(VMPTR_Thread vmThread, StackWalkHandle pSFIHandle, CorDebugSetContextFlag flag, DT_CONTEXT * pContext)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_SetStackWalkCurrentContext); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);
    WriteToBuffer(&bSend, pSFIHandle);
    WriteToBuffer(&bSend, flag);
    WriteToBuffer(&bSend, pContext);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pContext);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method SetStackWalkCurrentContext

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::UnwindStackWalkFrame
BOOL DDMarshal::UnwindStackWalkFrame(StackWalkHandle pSFIHandle)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_UnwindStackWalkFrame); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, pSFIHandle);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method UnwindStackWalkFrame

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::CheckContext
HRESULT DDMarshal::CheckContext(VMPTR_Thread vmThread, const DT_CONTEXT * pContext)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_CheckContext); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);
    WriteToBuffer(&bSend, pContext);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method CheckContext

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetStackWalkCurrentFrameInfo
IDacDbiInterface::FrameType DDMarshal::GetStackWalkCurrentFrameInfo(StackWalkHandle pSFIHandle, DebuggerIPCE_STRData * pFrameData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetStackWalkCurrentFrameInfo); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, pSFIHandle);
    DebuggerIPCE_STRData temp_pFrameData; // backing storage for optional parameter
    if (pFrameData == NULL)    
        pFrameData = &temp_pFrameData;
    WriteToBuffer(&bSend, pFrameData);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pFrameData);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    IDacDbiInterface::FrameType _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetStackWalkCurrentFrameInfo

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetCountOfInternalFrames
ULONG32 DDMarshal::GetCountOfInternalFrames(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetCountOfInternalFrames); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    ULONG32 _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetCountOfInternalFrames

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::EnumerateInternalFrames
void DDMarshal::EnumerateInternalFrames(VMPTR_Thread vmThread, IDacDbiInterface::FP_INTERNAL_FRAME_ENUMERATION_CALLBACK fpCallback, CALLBACK_DATA pUserData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_EnumerateInternalFrames); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);
    // fpCallback does not need to be copied on input
    // pUserData does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    // Result buffer contains the entire enumeration. Now iterate through that 
    // locally and invoke the user's callback.
    while (true)
    {
        // Check status word before each element. 
        // 1 means there's another item. 2 means it's the end of the enumeration.
        DWORD dw;
        ReadFromBuffer(&bRecv, dw);
        if (dw == 2)
            break;
        _ASSERTE(dw == 1);

        DebuggerIPCE_STRData data;
        ReadFromBuffer(&bRecv, data);

        // Invoke user callback. This may throw.
        fpCallback(&data, pUserData);
    }

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method EnumerateInternalFrames

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsMatchingParentFrame
BOOL DDMarshal::IsMatchingParentFrame(FramePointer fpToCheck, FramePointer fpParent)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsMatchingParentFrame); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, fpToCheck);
    WriteToBuffer(&bSend, fpParent);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsMatchingParentFrame

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetStackParameterSize
ULONG32 DDMarshal::GetStackParameterSize(CORDB_ADDRESS controlPC)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetStackParameterSize); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, controlPC);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    ULONG32 _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetStackParameterSize

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetFramePointer
FramePointer DDMarshal::GetFramePointer(StackWalkHandle pSFIHandle)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetFramePointer); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, pSFIHandle);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    FramePointer _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetFramePointer

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsLeafFrame
BOOL DDMarshal::IsLeafFrame(VMPTR_Thread vmThread, const DT_CONTEXT * pContext)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsLeafFrame); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);
    WriteToBuffer(&bSend, pContext);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsLeafFrame

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetContext
void DDMarshal::GetContext(VMPTR_Thread vmThread, DT_CONTEXT * pContextBuffer)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetContext); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);
    WriteToBuffer(&bSend, pContextBuffer);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pContextBuffer);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetContext

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::ConvertContextToDebuggerRegDisplay
void DDMarshal::ConvertContextToDebuggerRegDisplay(const DT_CONTEXT * pInContext, DebuggerREGDISPLAY * pOutDRD, BOOL fActive)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_ConvertContextToDebuggerRegDisplay); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, pInContext);
    WriteToBuffer(&bSend, pOutDRD);
    WriteToBuffer(&bSend, fActive);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pOutDRD);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method ConvertContextToDebuggerRegDisplay

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsILStubOrLCGMethod
IDacDbiInterface::DynamicMethodType DDMarshal::IsILStubOrLCGMethod(VMPTR_MethodDesc vmMethodDesc)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsILStubOrLCGMethod); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmMethodDesc);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    IDacDbiInterface::DynamicMethodType _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsILStubOrLCGMethod

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetVarArgSig
TargetBuffer DDMarshal::GetVarArgSig(CORDB_ADDRESS VASigCookieAddr, CORDB_ADDRESS * pArgBase)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetVarArgSig); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, VASigCookieAddr);
    // pArgBase does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pArgBase);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    TargetBuffer _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetVarArgSig

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::RequiresAlign8
BOOL DDMarshal::RequiresAlign8(VMPTR_TypeHandle thExact)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_RequiresAlign8); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, thExact);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method RequiresAlign8

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::ResolveExactGenericArgsToken
GENERICS_TYPE_TOKEN DDMarshal::ResolveExactGenericArgsToken(DWORD dwExactGenericArgsTokenIndex, GENERICS_TYPE_TOKEN rawToken)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_ResolveExactGenericArgsToken); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, dwExactGenericArgsTokenIndex);
    WriteToBuffer(&bSend, rawToken);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    GENERICS_TYPE_TOKEN _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method ResolveExactGenericArgsToken

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetILCodeAndSig
void DDMarshal::GetILCodeAndSig(VMPTR_DomainFile vmDomainFile, mdToken functionToken, TargetBuffer * pCodeInfo, mdToken * pLocalSigToken)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetILCodeAndSig); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmDomainFile);
    WriteToBuffer(&bSend, functionToken);
    // pCodeInfo does not need to be copied on input
    // pLocalSigToken does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pCodeInfo);
    ReadFromBuffer(&bRecv, pLocalSigToken);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetILCodeAndSig

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetNativeCodeInfo
void DDMarshal::GetNativeCodeInfo(VMPTR_DomainFile vmDomainFile, mdToken functionToken, NativeCodeFunctionData * pCodeInfo)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetNativeCodeInfo); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmDomainFile);
    WriteToBuffer(&bSend, functionToken);
    // pCodeInfo does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pCodeInfo);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetNativeCodeInfo

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetNativeCodeInfoForAddr
void DDMarshal::GetNativeCodeInfoForAddr(VMPTR_MethodDesc vmMethodDesc, CORDB_ADDRESS hotCodeStartAddr, NativeCodeFunctionData * pCodeInfo)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetNativeCodeInfoForAddr); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmMethodDesc);
    WriteToBuffer(&bSend, hotCodeStartAddr);
    WriteToBuffer(&bSend, pCodeInfo);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pCodeInfo);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetNativeCodeInfoForAddr

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetClassInfo
void DDMarshal::GetClassInfo(VMPTR_AppDomain vmAppDomain, VMPTR_Module vmModule, mdTypeDef metadataToken, VMPTR_TypeHandle thExact, VMPTR_TypeHandle thApprox, ClassInfo * pData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetClassInfo); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAppDomain);
    WriteToBuffer(&bSend, vmModule);
    WriteToBuffer(&bSend, metadataToken);
    WriteToBuffer(&bSend, thExact);
    WriteToBuffer(&bSend, thApprox);
    WriteToBuffer(&bSend, pData);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pData);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetClassInfo

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetInstantiationFieldInfo
void DDMarshal::GetInstantiationFieldInfo(VMPTR_DomainFile vmDomainFile, mdTypeDef metadataToken, VMPTR_TypeHandle vmThExact, VMPTR_TypeHandle vmThApprox, DacDbiArrayList<FieldData> * pFieldList, SIZE_T * pObjectSize)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetInstantiationFieldInfo); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmDomainFile);
    WriteToBuffer(&bSend, metadataToken);
    WriteToBuffer(&bSend, vmThExact);
    WriteToBuffer(&bSend, vmThApprox);
    // pFieldList does not need to be copied on input
    // pObjectSize does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pFieldList);
    ReadFromBuffer(&bRecv, pObjectSize);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetInstantiationFieldInfo

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::TypeHandleToExpandedTypeInfo
void DDMarshal::TypeHandleToExpandedTypeInfo(AreValueTypesBoxed boxed, VMPTR_AppDomain vmAppDomain, VMPTR_TypeHandle vmTypeHandle, DebuggerIPCE_ExpandedTypeData * pTypeInfo)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_TypeHandleToExpandedTypeInfo); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, boxed);
    WriteToBuffer(&bSend, vmAppDomain);
    WriteToBuffer(&bSend, vmTypeHandle);
    WriteToBuffer(&bSend, pTypeInfo);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pTypeInfo);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method TypeHandleToExpandedTypeInfo

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetObjectExpandedTypeInfo
void DDMarshal::GetObjectExpandedTypeInfo(AreValueTypesBoxed boxed, VMPTR_AppDomain vmAppDomain, CORDB_ADDRESS addr, DebuggerIPCE_ExpandedTypeData * pTypeInfo)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetObjectExpandedTypeInfo); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, boxed);
    WriteToBuffer(&bSend, vmAppDomain);
    WriteToBuffer(&bSend, addr);
    // pTypeInfo does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pTypeInfo);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetObjectExpandedTypeInfo

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetObjectExpandedTypeInfoFromID
void DDMarshal::GetObjectExpandedTypeInfoFromID(AreValueTypesBoxed boxed, VMPTR_AppDomain vmAppDomain, COR_TYPEID id, DebuggerIPCE_ExpandedTypeData * pTypeInfo)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetObjectExpandedTypeInfoFromID); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, boxed);
    WriteToBuffer(&bSend, vmAppDomain);
    WriteToBuffer(&bSend, id);
    // pTypeInfo does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pTypeInfo);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetObjectExpandedTypeInfoFromID

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetApproxTypeHandle
VMPTR_TypeHandle DDMarshal::GetApproxTypeHandle(TypeInfoList * pTypeData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetApproxTypeHandle); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, pTypeData);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pTypeData);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    VMPTR_TypeHandle _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetApproxTypeHandle

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetExactTypeHandle
HRESULT DDMarshal::GetExactTypeHandle(DebuggerIPCE_ExpandedTypeData * pTypeData, ArgInfoList * pArgInfo, VMPTR_TypeHandle & vmTypeHandle)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetExactTypeHandle); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, pTypeData);
    WriteToBuffer(&bSend, pArgInfo);
    WriteToBuffer(&bSend, vmTypeHandle);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pTypeData);
    ReadFromBuffer(&bRecv, pArgInfo);
    ReadFromBuffer(&bRecv, vmTypeHandle);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetExactTypeHandle

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetMethodDescParams
void DDMarshal::GetMethodDescParams(VMPTR_AppDomain vmAppDomain, VMPTR_MethodDesc vmMethodDesc, GENERICS_TYPE_TOKEN genericsToken, UINT32 * pcGenericClassTypeParams, TypeParamsList * pGenericTypeParams)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetMethodDescParams); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAppDomain);
    WriteToBuffer(&bSend, vmMethodDesc);
    WriteToBuffer(&bSend, genericsToken);
    // pcGenericClassTypeParams does not need to be copied on input
    // pGenericTypeParams does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pcGenericClassTypeParams);
    ReadFromBuffer(&bRecv, pGenericTypeParams);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetMethodDescParams

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetThreadOrContextStaticAddress
CORDB_ADDRESS DDMarshal::GetThreadOrContextStaticAddress(VMPTR_FieldDesc vmField, VMPTR_Thread vmRuntimeThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetThreadOrContextStaticAddress); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmField);
    WriteToBuffer(&bSend, vmRuntimeThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    CORDB_ADDRESS _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetThreadOrContextStaticAddress

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetCollectibleTypeStaticAddress
CORDB_ADDRESS DDMarshal::GetCollectibleTypeStaticAddress(VMPTR_FieldDesc vmField, VMPTR_AppDomain vmAppDomain)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetCollectibleTypeStaticAddress); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmField);
    WriteToBuffer(&bSend, vmAppDomain);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    CORDB_ADDRESS _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetCollectibleTypeStaticAddress

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetEnCHangingFieldInfo
void DDMarshal::GetEnCHangingFieldInfo(const EnCHangingFieldInfo * pEnCFieldInfo, FieldData * pFieldData, BOOL * pfStatic)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetEnCHangingFieldInfo); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, pEnCFieldInfo);
    // pFieldData does not need to be copied on input
    // pfStatic does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pFieldData);
    ReadFromBuffer(&bRecv, pfStatic);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetEnCHangingFieldInfo

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetTypeHandleParams
void DDMarshal::GetTypeHandleParams(VMPTR_AppDomain vmAppDomain, VMPTR_TypeHandle vmTypeHandle, TypeParamsList * pParams)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetTypeHandleParams); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAppDomain);
    WriteToBuffer(&bSend, vmTypeHandle);
    // pParams does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pParams);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetTypeHandleParams

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetSimpleType
void DDMarshal::GetSimpleType(VMPTR_AppDomain vmAppDomain, CorElementType simpleType, mdTypeDef * pMetadataToken, VMPTR_Module * pVmModule, VMPTR_DomainFile * pVmDomainFile)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetSimpleType); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAppDomain);
    WriteToBuffer(&bSend, simpleType);
    // pMetadataToken does not need to be copied on input
    // pVmModule does not need to be copied on input
    // pVmDomainFile does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pMetadataToken);
    ReadFromBuffer(&bRecv, pVmModule);
    ReadFromBuffer(&bRecv, pVmDomainFile);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetSimpleType

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsExceptionObject
BOOL DDMarshal::IsExceptionObject(VMPTR_Object vmObject)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsExceptionObject); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmObject);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsExceptionObject

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetStackFramesFromException
void DDMarshal::GetStackFramesFromException(VMPTR_Object vmObject, DacDbiArrayList<DacExceptionCallStackData> & dacStackFrames)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetStackFramesFromException); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmObject);
    WriteToBuffer(&bSend, dacStackFrames);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, dacStackFrames);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetStackFramesFromException

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsRcw
BOOL DDMarshal::IsRcw(VMPTR_Object vmObject)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsRcw); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmObject);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsRcw

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetRcwCachedInterfaceTypes
void DDMarshal::GetRcwCachedInterfaceTypes(VMPTR_Object vmObject, VMPTR_AppDomain vmAppDomain, BOOL bIInspectableOnly, DacDbiArrayList<DebuggerIPCE_ExpandedTypeData> * pDacInterfaces)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetRcwCachedInterfaceTypes); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmObject);
    WriteToBuffer(&bSend, vmAppDomain);
    WriteToBuffer(&bSend, bIInspectableOnly);
    // pDacInterfaces does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pDacInterfaces);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetRcwCachedInterfaceTypes

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetRcwCachedInterfacePointers
void DDMarshal::GetRcwCachedInterfacePointers(VMPTR_Object vmObject, BOOL bIInspectableOnly, DacDbiArrayList<CORDB_ADDRESS> * pDacItfPtrs)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetRcwCachedInterfacePointers); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmObject);
    WriteToBuffer(&bSend, bIInspectableOnly);
    // pDacItfPtrs does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pDacItfPtrs);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetRcwCachedInterfacePointers

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetCachedWinRTTypesForIIDs
void DDMarshal::GetCachedWinRTTypesForIIDs(VMPTR_AppDomain vmAppDomain, DacDbiArrayList<GUID> & iids, DacDbiArrayList<DebuggerIPCE_ExpandedTypeData> * pTypes)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetCachedWinRTTypesForIIDs); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAppDomain);
    WriteToBuffer(&bSend, iids);
    // pTypes does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, iids);
    ReadFromBuffer(&bRecv, pTypes);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetCachedWinRTTypesForIIDs

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetCachedWinRTTypes
void DDMarshal::GetCachedWinRTTypes(VMPTR_AppDomain vmAppDomain, DacDbiArrayList<GUID> * piids, DacDbiArrayList<DebuggerIPCE_ExpandedTypeData> * pTypes)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetCachedWinRTTypes); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmAppDomain);
    // piids does not need to be copied on input
    // pTypes does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, piids);
    ReadFromBuffer(&bRecv, pTypes);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetCachedWinRTTypes

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetTypedByRefInfo
void DDMarshal::GetTypedByRefInfo(CORDB_ADDRESS pTypedByRef, VMPTR_AppDomain vmAppDomain, DebuggerIPCE_ObjectData * pObjectData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetTypedByRefInfo); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, pTypedByRef);
    WriteToBuffer(&bSend, vmAppDomain);
    WriteToBuffer(&bSend, pObjectData);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pObjectData);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetTypedByRefInfo

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetStringData
void DDMarshal::GetStringData(CORDB_ADDRESS objectAddress, DebuggerIPCE_ObjectData * pObjectData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetStringData); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, objectAddress);
    WriteToBuffer(&bSend, pObjectData);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pObjectData);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetStringData

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetArrayData
void DDMarshal::GetArrayData(CORDB_ADDRESS objectAddress, DebuggerIPCE_ObjectData * pObjectData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetArrayData); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, objectAddress);
    WriteToBuffer(&bSend, pObjectData);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pObjectData);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetArrayData

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetBasicObjectInfo
void DDMarshal::GetBasicObjectInfo(CORDB_ADDRESS objectAddress, CorElementType type, VMPTR_AppDomain vmAppDomain, DebuggerIPCE_ObjectData * pObjectData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetBasicObjectInfo); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, objectAddress);
    WriteToBuffer(&bSend, type);
    WriteToBuffer(&bSend, vmAppDomain);
    WriteToBuffer(&bSend, pObjectData);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pObjectData);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetBasicObjectInfo

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::TestCrst
void DDMarshal::TestCrst(VMPTR_Crst vmCrst)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_TestCrst); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmCrst);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method TestCrst

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::TestRWLock
void DDMarshal::TestRWLock(VMPTR_SimpleRWLock vmRWLock)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_TestRWLock); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmRWLock);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method TestRWLock

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetDebuggerControlBlockAddress
CORDB_ADDRESS DDMarshal::GetDebuggerControlBlockAddress()
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetDebuggerControlBlockAddress); // message id
    // Copy in-parameters to the send-buffer

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    CORDB_ADDRESS _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetDebuggerControlBlockAddress

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetObjectFromRefPtr
VMPTR_Object DDMarshal::GetObjectFromRefPtr(CORDB_ADDRESS ptr)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetObjectFromRefPtr); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, ptr);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    VMPTR_Object _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetObjectFromRefPtr

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetObject
VMPTR_Object DDMarshal::GetObject(CORDB_ADDRESS ptr)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetObject); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, ptr);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    VMPTR_Object _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetObject

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::EnableNGENPolicy
HRESULT DDMarshal::EnableNGENPolicy(CorDebugNGENPolicy ePolicy)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_EnableNGENPolicy); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, ePolicy);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method EnableNGENPolicy

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetVmObjectHandle
VMPTR_OBJECTHANDLE DDMarshal::GetVmObjectHandle(CORDB_ADDRESS handleAddress)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetVmObjectHandle); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, handleAddress);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    VMPTR_OBJECTHANDLE _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetVmObjectHandle

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsVmObjectHandleValid
BOOL DDMarshal::IsVmObjectHandleValid(VMPTR_OBJECTHANDLE vmHandle)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsVmObjectHandleValid); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmHandle);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    BOOL _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsVmObjectHandleValid

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsWinRTModule
HRESULT DDMarshal::IsWinRTModule(VMPTR_Module vmModule, BOOL & isWinRT)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsWinRTModule); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmModule);
    WriteToBuffer(&bSend, isWinRT);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, isWinRT);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsWinRTModule

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetAppDomainIdFromVmObjectHandle
ULONG DDMarshal::GetAppDomainIdFromVmObjectHandle(VMPTR_OBJECTHANDLE vmHandle)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetAppDomainIdFromVmObjectHandle); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmHandle);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    ULONG _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetAppDomainIdFromVmObjectHandle

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetHandleAddressFromVmHandle
CORDB_ADDRESS DDMarshal::GetHandleAddressFromVmHandle(VMPTR_OBJECTHANDLE vmHandle)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetHandleAddressFromVmHandle); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmHandle);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    CORDB_ADDRESS _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetHandleAddressFromVmHandle

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetObjectContents
TargetBuffer DDMarshal::GetObjectContents(VMPTR_Object obj)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetObjectContents); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, obj);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    TargetBuffer _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetObjectContents

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::EnumerateBlockingObjects
void DDMarshal::EnumerateBlockingObjects(VMPTR_Thread vmThread, IDacDbiInterface::FP_BLOCKINGOBJECT_ENUMERATION_CALLBACK fpCallback, CALLBACK_DATA pUserData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_EnumerateBlockingObjects); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);
    // fpCallback does not need to be copied on input
    // pUserData does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    // Result buffer contains the entire enumeration. Now iterate through that 
    // locally and invoke the user's callback.
    while (true)
    {
        // Check status word before each element. 
        // 1 means there's another item. 2 means it's the end of the enumeration.
        DWORD dw;
        ReadFromBuffer(&bRecv, dw);
        if (dw == 2)
            break;
        _ASSERTE(dw == 1);

        DacBlockingObject data;
        ReadFromBuffer(&bRecv, data);

        // Invoke user callback. This may throw.
        fpCallback(data, pUserData);
    }

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method EnumerateBlockingObjects

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetThreadOwningMonitorLock
MonitorLockInfo DDMarshal::GetThreadOwningMonitorLock(VMPTR_Object vmObject)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetThreadOwningMonitorLock); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmObject);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    MonitorLockInfo _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetThreadOwningMonitorLock

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::EnumerateMonitorEventWaitList
void DDMarshal::EnumerateMonitorEventWaitList(VMPTR_Object vmObject, IDacDbiInterface::FP_THREAD_ENUMERATION_CALLBACK fpCallback, CALLBACK_DATA pUserData)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_EnumerateMonitorEventWaitList); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmObject);
    // fpCallback does not need to be copied on input
    // pUserData does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    // Result buffer contains the entire enumeration. Now iterate through that 
    // locally and invoke the user's callback.
    while (true)
    {
        // Check status word before each element. 
        // 1 means there's another item. 2 means it's the end of the enumeration.
        DWORD dw;
        ReadFromBuffer(&bRecv, dw);
        if (dw == 2)
            break;
        _ASSERTE(dw == 1);

        VMPTR_Thread data;
        ReadFromBuffer(&bRecv, data);

        // Invoke user callback. This may throw.
        fpCallback(data, pUserData);
    }

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method EnumerateMonitorEventWaitList

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetAttachStateFlags
CLR_DEBUGGING_PROCESS_FLAGS DDMarshal::GetAttachStateFlags()
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetAttachStateFlags); // message id
    // Copy in-parameters to the send-buffer

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    CLR_DEBUGGING_PROCESS_FLAGS _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetAttachStateFlags

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetMetaDataFileInfoFromPEFile
bool DDMarshal::GetMetaDataFileInfoFromPEFile(VMPTR_PEFile vmPEFile, DWORD & dwTimeStamp, DWORD & dwImageSize, bool & isNGEN, IStringHolder * pStrFilename)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetMetaDataFileInfoFromPEFile); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmPEFile);
    WriteToBuffer(&bSend, dwTimeStamp);
    WriteToBuffer(&bSend, dwImageSize);
    WriteToBuffer(&bSend, isNGEN);
    // pStrFilename does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, dwTimeStamp);
    ReadFromBuffer(&bRecv, dwImageSize);
    ReadFromBuffer(&bRecv, isNGEN);
    ReadFromBuffer(&bRecv, pStrFilename);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    bool _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetMetaDataFileInfoFromPEFile

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetILImageInfoFromNgenPEFile
bool DDMarshal::GetILImageInfoFromNgenPEFile(VMPTR_PEFile vmPEFile, DWORD & dwTimeStamp, DWORD & dwSize, IStringHolder * pStrFilename)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetILImageInfoFromNgenPEFile); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmPEFile);
    WriteToBuffer(&bSend, dwTimeStamp);
    WriteToBuffer(&bSend, dwSize);
    // pStrFilename does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, dwTimeStamp);
    ReadFromBuffer(&bRecv, dwSize);
    ReadFromBuffer(&bRecv, pStrFilename);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    bool _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetILImageInfoFromNgenPEFile

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsThreadSuspendedOrHijacked
bool DDMarshal::IsThreadSuspendedOrHijacked(VMPTR_Thread vmThread)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsThreadSuspendedOrHijacked); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, vmThread);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    bool _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsThreadSuspendedOrHijacked

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::AreGCStructuresValid
bool DDMarshal::AreGCStructuresValid()
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_AreGCStructuresValid); // message id
    // Copy in-parameters to the send-buffer

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    bool _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method AreGCStructuresValid

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::CreateHeapWalk
HRESULT DDMarshal::CreateHeapWalk(HeapWalkHandle * pHandle)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_CreateHeapWalk); // message id
    // Copy in-parameters to the send-buffer
    // pHandle does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pHandle);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method CreateHeapWalk

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::DeleteHeapWalk
void DDMarshal::DeleteHeapWalk(HeapWalkHandle handle)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_DeleteHeapWalk); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, handle);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method DeleteHeapWalk

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::WalkHeap
HRESULT DDMarshal::WalkHeap(HeapWalkHandle handle, ULONG count, COR_HEAPOBJECT * objects, ULONG * pFetched)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_WalkHeap); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, handle);
    WriteToBuffer(&bSend, count);
    // objects does not need to be copied on input
    // pFetched does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, objects);
    ReadFromBuffer(&bRecv, pFetched);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method WalkHeap

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetHeapSegments
HRESULT DDMarshal::GetHeapSegments(DacDbiArrayList<COR_SEGMENT> * pSegments)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetHeapSegments); // message id
    // Copy in-parameters to the send-buffer
    // pSegments does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pSegments);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetHeapSegments

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::IsValidObject
bool DDMarshal::IsValidObject(CORDB_ADDRESS obj)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_IsValidObject); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, obj);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    bool _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method IsValidObject

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetAppDomainForObject
bool DDMarshal::GetAppDomainForObject(CORDB_ADDRESS obj, VMPTR_AppDomain * pApp, VMPTR_Module * pModule, VMPTR_DomainFile * pDomainFile)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetAppDomainForObject); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, obj);
    // pApp does not need to be copied on input
    // pModule does not need to be copied on input
    // pDomainFile does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pApp);
    ReadFromBuffer(&bRecv, pModule);
    ReadFromBuffer(&bRecv, pDomainFile);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    bool _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetAppDomainForObject

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::CreateRefWalk
HRESULT DDMarshal::CreateRefWalk(RefWalkHandle * pHandle, BOOL walkStacks, BOOL walkFQ, UINT32 handleWalkMask)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_CreateRefWalk); // message id
    // Copy in-parameters to the send-buffer
    // pHandle does not need to be copied on input
    WriteToBuffer(&bSend, walkStacks);
    WriteToBuffer(&bSend, walkFQ);
    WriteToBuffer(&bSend, handleWalkMask);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pHandle);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method CreateRefWalk

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::DeleteRefWalk
void DDMarshal::DeleteRefWalk(RefWalkHandle handle)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_DeleteRefWalk); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, handle);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method DeleteRefWalk

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::WalkRefs
HRESULT DDMarshal::WalkRefs(RefWalkHandle handle, ULONG count, DacGcReference * refs, ULONG * pFetched)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_WalkRefs); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, handle);
    WriteToBuffer(&bSend, count);
    // refs does not need to be copied on input
    // pFetched does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, refs);
    ReadFromBuffer(&bRecv, pFetched);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method WalkRefs

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetTypeID
HRESULT DDMarshal::GetTypeID(CORDB_ADDRESS obj, COR_TYPEID * pType)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetTypeID); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, obj);
    WriteToBuffer(&bSend, pType);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pType);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetTypeID

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetObjectFields
HRESULT DDMarshal::GetObjectFields(COR_TYPEID id, ULONG32 celt, COR_FIELD * layout, ULONG32 * pceltFetched)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetObjectFields); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, id);
    WriteToBuffer(&bSend, celt);
    // layout does not need to be copied on input
    // pceltFetched does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, layout);
    ReadFromBuffer(&bRecv, pceltFetched);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetObjectFields

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetTypeLayout
HRESULT DDMarshal::GetTypeLayout(COR_TYPEID id, COR_TYPE_LAYOUT * pLayout)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetTypeLayout); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, id);
    WriteToBuffer(&bSend, pLayout);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pLayout);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetTypeLayout

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetArrayLayout
HRESULT DDMarshal::GetArrayLayout(COR_TYPEID id, COR_ARRAY_LAYOUT * pLayout)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetArrayLayout); // message id
    // Copy in-parameters to the send-buffer
    WriteToBuffer(&bSend, id);
    WriteToBuffer(&bSend, pLayout);

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pLayout);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    // Check return value
    HRESULT _retValue;
    ReadFromBuffer(&bRecv, _retValue);
    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
    return _retValue;
} // end method GetArrayLayout

//---------------------------------------------------------------------
// Stub for virtual IDacDbiInterface::GetGCHeapInformation
void DDMarshal::GetGCHeapInformation(COR_HEAPINFO * pHeapInfo)
{
    WriteBuffer bSend;
    ReadBuffer bRecv;

    WriteToBuffer(&bSend, DDID_GetGCHeapInformation); // message id
    // Copy in-parameters to the send-buffer
    // pHeapInfo does not need to be copied on input

    SendDDMessage(&bSend, &bRecv);

    //Copy out-parameters (including status and return value) from receive buffer
    ReadFromBuffer(&bRecv, pHeapInfo);

    // Throw last so that any out-params are still updated.
    HRESULT hrException;
    ReadFromBuffer(&bRecv, hrException);
    IfFailThrow(hrException);

    _ASSERTE(bRecv.IsAtEnd()); // ensure buffer is fully read
} // end method GetGCHeapInformation


#endif //FEATURE_DBGIPC_TRANSPORT_DI

// end of file

