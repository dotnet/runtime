<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="..\..\debug\XPlatCommon.props" />

  <PropertyGroup>
    <FileToMarkForSigning>$(BinariesDirectory)\$(OutputName).dll</FileToMarkForSigning>
    <UserIncludes>$(UserIncludes);
        ..</UserIncludes>
    <ClAdditionalOptions>$(ClAdditionalOptions) -DUNICODE -D_UNICODE</ClAdditionalOptions>
    <PCHHeader>stdafx.h</PCHHeader>
    <EnableCxxPCHHeaders>true</EnableCxxPCHHeaders>
    <!--PCH: Both precompiled header and cpp are on the same ..\ path this is likely to be wrong.-->
    <PCHCompile>..\stdafx.cpp</PCHCompile>
    
    <!--
      # We explicitly must not link with mscoree because mscordbi needs to 
      # be able to run on a machine without the runtime installed.
      # Also, for this reason explicitly use the static CRT
    -->
    <LinkNoLibraries>true</LinkNoLibraries>
    <UseMsvcrt>false</UseMsvcrt>
    <DoNotAddCrtLibPath>true</DoNotAddCrtLibPath>
    <LinkUseDefaultLib>false</LinkUseDefaultLib>
    <NoLinkGdi32>true</NoLinkGdi32>
    <!-- <LinkUseCMT>true</LinkUseCMT> -->
    <TargetType>DYNLINK</TargetType>
    <LinkSubsystem>windows</LinkSubsystem>
    <PogoOptimized>true</PogoOptimized>

    <DllEntryPoint>_DllMainCRTStartup</DllEntryPoint>
    <DllDef>$(IntermediateOutputDirectory)\mscordbi.def</DllDef>

  </PropertyGroup>


  <ItemGroup Condition="'$(HostMachineOS)' == 'OneCore' or '$(HostMachineOS)' == 'OneCoreWin7Compat'">
    <TargetLib Include="$(CoreSystemCrt)" />
    <TargetLib Include="$(SdkLibPath)\uuid.lib" />
  </ItemGroup>
  <ItemGroup Condition="'$(HostMachineOS)' == 'OneCoreWin7Compat'">
    <TargetLib Include="$(SdkLibPath)\bcrypt.lib" />
    <TargetLib Include="$(SdkLibPath)\crypt32.lib" />
    <TargetLib Include="$(SdkLibPath)\oleaut32.lib" />
    <TargetLib Include="$(SdkLibPath)\mincore_fw.lib" />
  </ItemGroup>
  <ItemGroup Condition="'$(HostMachineOS)' == 'OneCore'">
    <TargetLib Include="$(SdkLibPath)\mincore.lib" />
    <TargetLib Include="$(SdkLibPath)\mincore_legacy.lib" />
    <TargetLib Include="$(SdkLibPath)\mincore_private.lib" />
    <TargetLib Include="$(SdkLibPath)\mincore_obsolete.lib" />
  </ItemGroup>
  
  <ItemGroup>
    
    <TargetLib Condition="'$(HostMachineOS)'=='windows'" Include="$(SdkLibPath)\uuid.lib" />
    <LinkPreCrtLibs Condition="'$(HostMachineOS)'=='windows'" Include="$(SdkLibPath)\ntdll.lib" />
    <LinkPreCrtLibs Condition="'$(HostMachineOS)'=='windows'" Include="$(SdkLibPath)\kernel32.lib" />
    <LinkPreCrtLibs Condition="'$(HostMachineOS)'=='windows'" Include="$(SdkLibPath)\user32.lib" />
    <LinkPreCrtLibs Condition="'$(HostMachineOS)'=='windows'" Include="$(SdkLibPath)\advapi32.lib" />
    <LinkPreCrtLibs Condition="'$(HostMachineOS)'=='windows'" Include="$(SdkLibPath)\wtsapi32.lib" />
    <TargetLib Condition="'$(HostMachineOS)'=='windows'" Include="$(SdkLibPath)\ole32.lib" />
    <TargetLib Condition="'$(HostMachineOS)'=='windows'" Include="$(SdkLibPath)\oleaut32.lib" />
    <TargetLib Condition="'$(HostMachineOS)'=='windows'" Include="$(SdkLibPath)\version.lib" />
    <TargetLib Condition="'$(HostMachineOS)'=='windows'" Include="$(SdkLibPath)\mscoree.lib" />
    <TargetLib Condition="'$(HostMachineOS)'=='windows'" Include="$(SdkLibPath)\shlwapi.lib" />
    <TargetLib Condition="'$(HostMachineOS)'=='windows'" Include="$(CrtLibPath)\libcmt$(BuildSuffix).lib" />

    
    
    <LinkPreCrtLibs Include="$(Dbilib)">
      <ProjectReference>$(DbiProject)</ProjectReference>
    </LinkPreCrtLibs>
    <LinkPreCrtLibs Include="$(ClrLibPath)\utilcodestaticnohost$(XPlatHostLibSuffix).lib" >
      <!-- Another project with a bunch of pre-existing references so it doesn't follow the normal path convention -->
      <ProjectReference Condition="'$(XPlatHostLibBuildDir)'=='HostLocal'">$(ClrSrcDirectory)utilcode\staticnohost\staticnohost.nativeproj</ProjectReference>
      <ProjectReference Condition="'$(XPlatHostLibBuildDir)'=='HostWinx86'">$(ClrSrcDirectory)utilcode\staticnohostx86\staticnohost.nativeproj</ProjectReference>
      <ProjectReference Condition="'$(XPlatHostLibBuildDir)'=='HostWinAMD64'">$(ClrSrcDirectory)utilcode\staticnohostamd64\staticnohost.nativeproj</ProjectReference>
    </LinkPreCrtLibs>
    <TargetLib Include="$(ClrLibPath)\ipcmanager-staticcrt$(XPlatHostLibSuffix).lib" >
      <ProjectReference>$(ClrSrcDirectory)ipcman\ipcman-staticcrt\$(XPlatHostLibBuildDir)\ipcman-staticcrt.nativeproj</ProjectReference>
    </TargetLib>
    <TargetLib Include="$(ClrLibPath)\ildbsymlib$(XPlatHostLibSuffix).lib" >
      <ProjectReference>$(ClrSrcDirectory)debug\ildbsymlib\$(XPlatHostLibBuildDir)\ildbsymlib.nativeproj</ProjectReference>
    </TargetLib>
    <TargetLib Include="$(ClrLibPath)\MDCompiler-dbi$(XPlatHostLibSuffix).lib">
      <ProjectReference>$(ClrSrcDirectory)md\compiler\dbi\$(XPlatHostLibBuildDir)\mdcompiler-dbi.nativeproj</ProjectReference>
    </TargetLib>
    <TargetLib Include="$(ClrLibPath)\MDWinMD_dbi$(XPlatHostLibSuffix).lib">
      <ProjectReference>$(ClrSrcDirectory)md\winmd\dbi\$(XPlatHostLibBuildDir)\MDWinMD-dbi.nativeproj</ProjectReference>
    </TargetLib>
    <TargetLib Include="$(ClrLibPath)\MDRuntime-dbi$(XPlatHostLibSuffix).lib">
      <ProjectReference>$(ClrSrcDirectory)md\runtime\dbi\$(XPlatHostLibBuildDir)\mdruntime-dbi.nativeproj</ProjectReference>
    </TargetLib>
    <TargetLib Include="$(ClrLibPath)\MDRuntimeRW-dbi$(XPlatHostLibSuffix).lib">
      <ProjectReference>$(ClrSrcDirectory)md\enc\dbi\$(XPlatHostLibBuildDir)\mdruntimerw-dbi.nativeproj</ProjectReference>
    </TargetLib>
    <TargetLib Include="$(ClrLibPath)\MDHotData-StaticCrt$(XPlatHostLibSuffix).lib">
      <ProjectReference>$(ClrSrcDirectory)md\hotdata\full-staticcrt\$(XPlatHostLibBuildDir)\mdhotdata-staticcrt.nativeproj</ProjectReference>
    </TargetLib>
    <TargetLib Include="$(ClrLibPath)\MDDataSource_dbi$(XPlatHostLibSuffix).lib">
      <ProjectReference>$(ClrSrcDirectory)md\DataSource\dbi\$(XPlatHostLibBuildDir)\DataSource-dbi.nativeproj</ProjectReference>
    </TargetLib>
    <TargetLib Include="$(ClrLibPath)\CorGUIDS$(XPlatHostLibSuffix).lib">
      <!-- This project isn't factored like the others above... there are many projects pointing to the current path of corguids -->
      <ProjectReference Condition="'$(XPlatHostLibBuildDir)'=='HostLocal'">$(ClrSrcDirectory)inc\corguids.nativeproj</ProjectReference>
      <ProjectReference Condition="'$(XPlatHostLibBuildDir)'=='HostWinx86'">$(ClrSrcDirectory)incx86\corguids.nativeproj</ProjectReference>
      <ProjectReference Condition="'$(XPlatHostLibBuildDir)'=='HostWinAMD64'">$(ClrSrcDirectory)incamd64\corguids.nativeproj</ProjectReference>
    </TargetLib>

  </ItemGroup>

  <ItemGroup>
    
    <ProjectReference Condition="'$(XPlatHostLibBuildDir)'=='HostLocal'" Include="$(ClrSrcDirectory)inc\corguids.nativeproj" />
    <ProjectReference Condition="'$(XPlatHostLibBuildDir)'=='HostWinx86'" Include="$(ClrSrcDirectory)incx86\corguids.nativeproj" />
    <ProjectReference Condition="'$(XPlatHostLibBuildDir)'=='HostWinAMD64'" Include="$(ClrSrcDirectory)incamd64\corguids.nativeproj" />
    
  </ItemGroup>

  <ItemGroup>
    <CppPreprocess Include="..\mscordbi.src">
      <Defines>@(CommonPreprocessDefines);$(CDefines);$(TargetDefines)</Defines>
      <FinalOutput>$(IntermediateOutputDirectory)\mscordbi.def</FinalOutput>
      <AdditionalOptions>/TC</AdditionalOptions>
    </CppPreprocess>
  </ItemGroup>
  <ItemGroup>
    <ImportLib Include="$(ClrLibPath)\ipcmanager-staticcrt$(XPlatHostLibSuffix).lib" />
    <ImportLib Include="$(ClrLibPath)\ildbsymlib$(XPlatHostLibSuffix).lib" />
    <ImportLib Include="$(Dbilib)"/>
    <ImportLib Include="$(ClrLibPath)\MDCompiler-dbi$(XPlatHostLibSuffix).lib" />
    <ImportLib Include="$(ClrLibPath)\MDRuntime-dbi$(XPlatHostLibSuffix).lib" />
    <ImportLib Include="$(ClrLibPath)\MDRuntimeRW-dbi$(XPlatHostLibSuffix).lib" />
    <ImportLib Include="$(ClrLibPath)\MDHotData-StaticCrt$(XPlatHostLibSuffix).lib" />
  </ItemGroup>
  <ItemGroup>
    <RCResourceFile Include="..\Native.rc" />
  </ItemGroup>
  <ItemGroup>
    <CppCompile Include="..\mscordbi.cpp" />
  </ItemGroup>

  <Import Project="$(_NTDRIVE)$(_NTROOT)\ndp\clr\clr.targets" />
</Project>
