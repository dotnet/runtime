From edabaf799fd071a328e0adb743a98628df6649f0 Mon Sep 17 00:00:00 2001
From: Levi Broderick <levib@microsoft.com>
Date: Mon, 28 Aug 2023 15:26:38 -0700
Subject: [PATCH] Make zlib-intel compile clean against C4244 clang equivalent
 is "implicit-int-conversion" warning

The change to deflate.c is legal because 'len' has an upper bound of
MAX_STORED, which means it fits cleanly into a 16-bit integer. So
writing out 2x 8-bit values will not result in data loss.

The change to trees.c is legal because within this loop, 'count' is
intended to have an upper bound of 138, with the target assignment
only executing if 'count' is bounded by 4. Neither the 'count' local
in isolation nor the addition that's part of the target line is
expected to result in integer overflow. But even if it did, that's a
matter for a different warning code and doesn't impact the correctness
of the narrowing cast being considered here.

The change to slide_sse.c is legal because 'w_size' is limited to
1 << 15 (see deflateInit2_ in deflate.c), so this fits cleanly into
a 16-bit value.
---
 src/native/external/zlib-intel/deflate.c   | 8 ++++----
 src/native/external/zlib-intel/slide_sse.c | 2 +-
 src/native/external/zlib-intel/trees.c     | 2 +-
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/native/external/zlib-intel/deflate.c b/src/native/external/zlib-intel/deflate.c
index bd5e95774a6..108b1a187af 100644
--- a/src/native/external/zlib-intel/deflate.c
+++ b/src/native/external/zlib-intel/deflate.c
@@ -1553,10 +1553,10 @@ local block_state deflate_stored(s, flush)
         _tr_stored_block(s, (char *)0, 0L, last);
 
         /* Replace the lengths in the dummy stored block with len. */
-        s->pending_buf[s->pending - 4] = len;
-        s->pending_buf[s->pending - 3] = len >> 8;
-        s->pending_buf[s->pending - 2] = ~len;
-        s->pending_buf[s->pending - 1] = ~len >> 8;
+        s->pending_buf[s->pending - 4] = (Bytef)len;
+        s->pending_buf[s->pending - 3] = (Bytef)(len >> 8);
+        s->pending_buf[s->pending - 2] = (Bytef)~len;
+        s->pending_buf[s->pending - 1] = (Bytef)(~len >> 8);
 
         /* Write the stored block header bytes. */
         flush_pending(s->strm);
diff --git a/src/native/external/zlib-intel/slide_sse.c b/src/native/external/zlib-intel/slide_sse.c
index 342fd562dd1..eb74202c5a0 100644
--- a/src/native/external/zlib-intel/slide_sse.c
+++ b/src/native/external/zlib-intel/slide_sse.c
@@ -18,7 +18,7 @@ void slide_hash_sse(deflate_state *s)
     unsigned n;
     Posf *p;
     uInt wsize = s->w_size;
-    z_const __m128i xmm_wsize = _mm_set1_epi16(s->w_size);
+    z_const __m128i xmm_wsize = _mm_set1_epi16((short)s->w_size);
 
     n = s->hash_size;
     p = &s->head[n] - 8;
diff --git a/src/native/external/zlib-intel/trees.c b/src/native/external/zlib-intel/trees.c
index 35462a1313a..f78b7d8c63e 100644
--- a/src/native/external/zlib-intel/trees.c
+++ b/src/native/external/zlib-intel/trees.c
@@ -717,7 +717,7 @@ local void scan_tree(s, tree, max_code)
         if (++count < max_count && curlen == nextlen) {
             continue;
         } else if (count < min_count) {
-            s->bl_tree[curlen].Freq += count;
+            s->bl_tree[curlen].Freq += (ush)count;
         } else if (curlen != 0) {
             if (curlen != prevlen) s->bl_tree[curlen].Freq++;
             s->bl_tree[REP_3_6].Freq++;
-- 
2.42.0.windows.1

