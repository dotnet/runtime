<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    Include common targets for specific project types. These files include BuildTools target
    overrides that shouldn't be applied to other projects.
  -->
  <Import Project="framework.dependency.targets" Condition="'$(MSBuildProjectExtension)' == '.depproj'" />
  <Import Project="framework.packaging.targets" Condition="'$(MSBuildProjectExtension)' == '.pkgproj'" />
  <Import Project="framework.sharedfx.targets" Condition="'$(MSBuildProjectExtension)' == '.sfxproj'" />

  <Import Project="installer.targets" />

  <!-- Required by Common.Targets but not used by packaging projects. -->
  <Target Name="CreateManifestResourceNames" />
  <Target Name="CoreCompile" />

  <!--
    Set up properties for installer file. These depend on properties defined in the project file.
    (Unlike properties set up in packaging-tools.props, which shouldn't.)
  -->
  <Target Name="GetInstallerProperties"
          DependsOnTargets="
            GetInstallerBrandingNames;
            GetProductVersions">
    <!-- Detect framework pack suffix and apply defaults. -->
    <PropertyGroup Condition="'$(FrameworkPackType)' == 'targeting'">
      <InstallerName>$(ShortFrameworkName)-targeting-pack</InstallerName>
      <WixProductMoniker>$(TargetingPackBrandName)</WixProductMoniker>
    </PropertyGroup>

    <PropertyGroup Condition="'$(FrameworkPackType)' == 'apphost'">
      <InstallerName>$(ShortFrameworkName)-apphost-pack</InstallerName>
      <WixProductMoniker>$(AppHostPackBrandName)</WixProductMoniker>
    </PropertyGroup>

    <!-- Runtime packs are obtained only through NuGet. -->
    <PropertyGroup Condition="'$(FrameworkPackType)' == 'runtime'">
      <BuildDebPackage>false</BuildDebPackage>
      <BuildRpmPackage>false</BuildRpmPackage>
      <GeneratePkg>false</GeneratePkg>
      <GenerateMSI>false</GenerateMSI>
    </PropertyGroup>

    <!-- Non-framework pkgproj shouldn't build MSIs. -->
    <PropertyGroup Condition="'$(FrameworkPackType)' == '' and '$(MSBuildProjectExtension)' == '.pkgproj'">
      <GenerateMSI>false</GenerateMSI>
    </PropertyGroup>

    <PropertyGroup Condition="'$(GenerateSharedFramework)' == 'true'">
      <InstallerName>$(ShortFrameworkName)-runtime</InstallerName>
      <WixProductMoniker>$(SharedFrameworkBrandName)</WixProductMoniker>
    </PropertyGroup>

    <PropertyGroup>
      <MacOSComponentName>com.microsoft.$(ShortFrameworkName).pack.$(FrameworkPackType).$(ProductVersion).component.osx.x64</MacOSComponentName>
      <MacOSSharedInstallDir>/usr/local/share/dotnet</MacOSSharedInstallDir>

      <VersionedInstallerName>$(InstallerName)-$(ProductBandVersion)</VersionedInstallerName>
      <VersionedInstallerName>$(VersionedInstallerName.ToLowerInvariant())</VersionedInstallerName>
      <InstallerPackageRelease>1</InstallerPackageRelease>

      <InstallerPackageVersion>$(ProductionVersion)</InstallerPackageVersion>
    </PropertyGroup>

    <PropertyGroup Condition="'$(InstallerExtension)' == '.deb'">
      <InstallerPackageVersion Condition="'$(IncludePreReleaseLabelInPackageVersion)' == 'true'">$(ProductionVersion)~$(VersionSuffix)</InstallerPackageVersion>
    </PropertyGroup>

    <PropertyGroup Condition="'$(InstallerExtension)' == '.rpm'">
      <InstallerPackageRelease Condition="'$(IncludePreReleaseLabelInPackageVersion)' == 'true'">0.1.$(VersionSuffix)</InstallerPackageRelease>
      <InstallerPackageRelease>$([System.String]::Copy('$(InstallerPackageRelease)').Replace('-', '_'))</InstallerPackageRelease>
    </PropertyGroup>

    <PropertyGroup>
      <InstallerIntermediatesDir>$(PackagesIntermediateDir)$(InstallerName)/$(InstallerPackageVersion)/</InstallerIntermediatesDir>

      <InstallerBuildPart>$(ProductMoniker)</InstallerBuildPart>
      <InstallerBuildPart Condition="'$(InstallerExtension)' == '.deb' or '$(InstallerExtension)' == '.rpm'"
        >$(ProductVersion)-$(TargetArchitecture)</InstallerBuildPart>

      <!-- Location to place the installer, in bin. -->
      <InstallerFileNameWithoutExtension>$(InstallerName)-$(InstallerBuildPart)</InstallerFileNameWithoutExtension>
      <InstallerFile Condition="'$(InstallerFile)' == ''">$(AssetOutputPath)$(InstallerFileNameWithoutExtension)$(InstallerExtension)</InstallerFile>
      <CompressedArchiveFile>$(AssetOutputPath)$(InstallerFileNameWithoutExtension)$(CompressedFileExtension)</CompressedArchiveFile>
    </PropertyGroup>

    <!-- By default, a shared framework only has files in shared/, so archive that. -->
    <PropertyGroup>
      <SharedFrameworkArchiveSourceDir Condition="'$(SharedFrameworkArchiveSourceDir)' == ''">$(SharedFrameworkLayoutDir)shared/</SharedFrameworkArchiveSourceDir>
    </PropertyGroup>

    <!-- Use existing infra for non-Windows shared frameworks for now. -->
    <PropertyGroup Condition="'$(GenerateSharedFramework)' == 'true'">
      <GeneratePkg>false</GeneratePkg>
      <BuildDebPackage>false</BuildDebPackage>
      <BuildRpmPackage>false</BuildRpmPackage>
    </PropertyGroup>
  </Target>

  <!--
    By default, shared frameworks are generated based on the package. This can be overridden by the
    project, and in the future, the runtime pack is likely to be used to assemble the sfx.
  -->
  <Target Name="GetSharedFrameworkPackageReferences"
          DependsOnTargets="GetPackageIdentity"
          Returns="@(_PackageIdentity)" />

</Project>
