<Project Sdk="Microsoft.NET.Sdk" InitialTargets="GetPackageReference" DefaultTargets="Restore;Publish">
  <!--
    This project lays out a shared framework using the SDK targets.
  -->

  <UsingTask TaskName="ProcessSharedFrameworkDeps" AssemblyFile="$(LocalBuildToolsTaskDir)core-setup.tasks.dll" />

  <PropertyGroup>
    <TargetFramework>$(NETCoreAppFramework)</TargetFramework>
    <RuntimeIdentifier>$(PackageRID)</RuntimeIdentifier>
    <PackageId>unused</PackageId>

    <ProjectDepsFileName>$(SharedFrameworkName).deps.json</ProjectDepsFileName>

    <!--
      When blank, MicrosoftNETPlatformLibrary defaults to Microsoft.NETCore.App. This property
      causes the SDK to trim dependencies when publishing a framework-dependent app. We want to be
      able to create Microsoft.NETCore.App here, so disable this behavior. Use a non-'' value to
      avoid the default and make it hint at the goal in case it shows up in a weird place.
    -->
    <MicrosoftNETPlatformLibrary>do-not-consider-existing-platform</MicrosoftNETPlatformLibrary>

    <!-- Don't reference NETCore.App -->
    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>
    <!-- Only Restore from our built packages -->
    <RestoreSources>$(PackageOutputPath)</RestoreSources>
    <!-- Ensure only this repo's NuGet.config file is used. -->
    <RestoreConfigFile>$(ProjectDir)NuGet.config</RestoreConfigFile>
    <!-- Use repo-restored packages for platforms and targets dependencies -->
    <RestoreFallbackFolders>$(PackagesDir)</RestoreFallbackFolders>
    <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
    <!-- Don't error due to lack of runtime-specific deps, we're referencing those directly -->
    <EnsureRuntimePackageDependencies>false</EnsureRuntimePackageDependencies>
    <!-- Use a project-local packages folder -->
    <RestorePackagesPath>$(IntermediateOutputPath)packages</RestorePackagesPath>
    <!-- Do not build or nor build in publish output or deps -->
    <NoBuild>true</NoBuild>
    <CopyBuildOutputToPublishDirectory>false</CopyBuildOutputToPublishDirectory>
    <CopyOutputSymbolsToPublishDirectory>false</CopyOutputSymbolsToPublishDirectory>
    <IncludeMainProjectInDepsFile>false</IncludeMainProjectInDepsFile>
  </PropertyGroup>

  <Target Name="GetPackageReference">
    <Error Condition="'$(SharedFrameworkName)' == ''" Text="'SharedFrameworkName' property not specified." />
    <Error Condition="'$(SharedFrameworkPkgprojFile)' == ''" Text="'SharedFrameworkPkgprojFile' property not specified." />

    <MSBuild
      Projects="$(SharedFrameworkPkgprojFile)"
      Targets="GetPackageIdentity"
      RemoveProperties="Configuration">
      <Output TaskParameter="TargetOutputs" ItemName="PackageReference" />
    </MSBuild>

    <PropertyGroup>
      <PublishDir>$(SharedFrameworkLayoutDir)%(PackageReference.Identity)/%(PackageReference.Version)/</PublishDir>
    </PropertyGroup>
  </Target>

  <!--
    During framework-dependent publish, Microsoft.NETCore.App's props file statically adds a
    PackageConflictPlatformManifests item. This causes NuGet to remove files from publish output
    because they're "already" defined in the shared framework. But we're creating a shared framework
    here, so we need to remove the PackageConflictPlatformManifests items before they're used.
  -->
  <Target Name="RemovePlatformManifests"
          BeforeTargets="
            _HandlePublishFileConflicts;
            _HandlePackageFileConflicts">
    <ItemGroup>
      <PackageConflictPlatformManifests Remove="@(PackageConflictPlatformManifests)" />
    </ItemGroup>
  </Target>

  <Target Name="GenerateNetCoreAppRuntimeConfig"
          Condition="'$(GenerateNetCoreAppRuntimeConfig)' == 'true'"
          BeforeTargets="Publish">
    <MakeDir Directories="$(PublishDir)" />
    
    <PropertyGroup>
      <_runtimeConfigContent>
      <![CDATA[
{
  "runtimeOptions": {
    "tfm": "$(TargetFramework)",
    "framework": {
      "name": "Microsoft.NETCore.App",
      "version": "$(SharedFrameworkNugetVersion)"
    }
  }
}
      ]]>
      </_runtimeConfigContent>
    </PropertyGroup>
    
    <WriteLinesToFile
      File="$(PublishDir)$(SharedFrameworkName).runtimeconfig.json"
      Lines="$(_runtimeConfigContent)"
      Overwrite="true" />
  </Target>

  <Target Name="GenerateVersionFile"
          DependsOnTargets="GetPackageReference"
          BeforeTargets="Publish">
    <!-- Generate .version file -->
    <ItemGroup>
      <VersionLines Include="$(LatestCommit)" />
      <VersionLines Include="%(PackageReference.Version)" />
    </ItemGroup>

    <WriteLinesToFile
      File="$(PublishDir).version"
      Lines="@(VersionLines)"
      Overwrite="true" />
  </Target>

  <!-- Clean up artifacts that dotnet-publish generates which we don't need -->
  <Target Name="DeleteUnnecessaryPublishOutputs" AfterTargets="Publish">
    <ItemGroup>
      <ToDelete Include="$(PublishDir)apphost$(ExeSuffix)" />
      <ToDelete Include="$(PublishDir)$(LibPrefix)comhost$(LibSuffix)" />
      <ToDelete Include="$(PublishDir)$(LibPrefix)hostfxr$(LibSuffix)" />
      <ToDelete Include="$(PublishDir)$(LibPrefix)ijwhost$(LibSuffix)" />
    </ItemGroup>

    <Delete Files="@(ToDelete)" />
  </Target>

  <Target Name="GenerateRuntimeGraph"
          Condition="'$(GenerateRuntimeGraph)' == 'true'"
          AfterTargets="Publish">
    <PropertyGroup>
      <SharedFrameworkAssetsFile>$(IntermediateOutputPath)/project.assets.json</SharedFrameworkAssetsFile>
      <SharedFrameworkDepsFile>$(PublishDir)$(ProjectDepsFileName)</SharedFrameworkDepsFile>
      <RuntimeGraphGeneratorRuntime Condition="'$(OSGroup)'=='Windows_NT'">win</RuntimeGraphGeneratorRuntime>
      <RuntimeGraphGeneratorRuntime Condition="'$(OSGroup)'=='OSX'">osx</RuntimeGraphGeneratorRuntime>
      <RuntimeGraphGeneratorRuntime Condition="'$(OSGroup)'=='FreeBSD'">freebsd</RuntimeGraphGeneratorRuntime>
      <RuntimeGraphGeneratorRuntime Condition="'$(RuntimeGraphGeneratorRuntime)'==''">linux</RuntimeGraphGeneratorRuntime>
    </PropertyGroup>

    <ProcessSharedFrameworkDeps AssetsFilePath="$(SharedFrameworkAssetsFile)"
                                DepsFilePath="$(SharedFrameworkDepsFile)"
                                Runtime="$(RuntimeGraphGeneratorRuntime)"
                                BuildToolsTaskDir="$(BuildToolsTaskDir)" />
  </Target>

  <Target Name="CleanPackages" BeforeTargets="Clean">
    <RemoveDir Directories="$(PublishDir);$(RestorePackagesPath)" />
    <Delete Files="$(ProjectAssetsFile)" />
  </Target>

</Project>
