<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" InitialTargets="CheckForBuildTools" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\Directory.Build.targets" />
  <PropertyGroup>
    <RuntimeIdGraphDefinitionFile>$(PackagesDir)$(PlatformPackageId.ToLowerInvariant())\$(MicrosoftNETCorePlatformsPackageVersion)\runtime.json</RuntimeIdGraphDefinitionFile>
  </PropertyGroup>

  <UsingTask TaskName="DownloadFilesFromUrl" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />
  <UsingTask TaskName="ZipFileExtractToDirectory" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>

  <UsingTask TaskName="GenerateGuidFromName" AssemblyFile="$(LocalBuildToolsTaskDir)core-setup.tasks.dll" />
  <UsingTask TaskName="GenerateMsiVersion" AssemblyFile="$(LocalBuildToolsTaskDir)core-setup.tasks.dll" />

  <!-- Create deb tool package and set up the project that consumes it as a CLI tool. -->
  <Target Name="InitializeDotnetDebTool">
    <!--
      Build the deb tool and initialize the consumer project. Using an MSBuild task helps this
      to only happen once if parallel projects depend on this target.
    -->
    <MSBuild Projects="$(MSBuildThisFileDirectory)deps\init-deb-tool-consumer.proj" />
  </Target>

  <!--
    Check if the deb package build tool prereq is available.
    This issue tracks adding a way to raise this as a build error: https://github.com/dotnet/core-setup/issues/5396
  -->
  <Target Name="TestDebuild">
    <!-- run Debuild -->
    <Exec Command="/usr/bin/env debuild -h" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="DebuildExitCode" />
    </Exec>

    <!-- Check if it successfully showed us a help message. -->
    <PropertyGroup>
      <DebuildPresent>false</DebuildPresent>
      <DebuildPresent Condition=" '$(DebuildExitCode)' == '0' ">true</DebuildPresent>
    </PropertyGroup>

    <Message Condition=" '$(DebuildPresent)'  != 'true' "
             Text="Debuild Not found, Debian packages will not be built."
             Importance="High" />
  </Target>

  <!--
    Check if the RPM package build tool prereq is available.
    This issue tracks adding a way to raise this as a build error: https://github.com/dotnet/core-setup/issues/5396
  -->
  <Target Name="TestFPMTool">
    <!-- run FPM  -->
    <Exec Command="/usr/bin/env fpm -h" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="FPMExitCode" />
    </Exec>

    <!-- Check if it successfully showed us a help message. -->
    <PropertyGroup>
      <FPMPresent>false</FPMPresent>
      <FPMPresent Condition=" '$(FPMExitCode)' == '0' ">true</FPMPresent>
    </PropertyGroup>

    <Message Condition=" '$(FPMPresent)'  != 'true' "
             Text="FPM tool Not found, RPM packages will not be built."
             Importance="High" />
  </Target>

  <!--
    Acquire WiX tools, if not present.

    Adapted from https://github.com/dotnet/core-sdk/blob/6aed0cd3614f9b740cfb3f21fdb795bab53ef7e9/src/redist/targets/GenerateMSIs.targets#L80-L102
  -->
  <Target Name="AcquireWix"
          DependsOnTargets="GetAcquireWixProperties"
          Condition="'$(GenerateMSI)' == 'true'"
          Inputs="$(WixDownloadSentinel)"
          Outputs="$(WixDestinationPath)">
    <!-- Setup sentinel to take advantage of incrementality -->
    <MakeDir Directories="$(WixToolsDir)" />
    <WriteLinesToFile
      File="$(WixDownloadSentinel)"
      Lines="$(WixVersion)"
      Overwrite="true"
      Encoding="Unicode" />

    <ItemGroup>
      <_wixToolDownload
        Include="WixTool"
        Url="$(WixDownloadUrl)"
        DestinationDir="$(WixToolsDir)" />
    </ItemGroup>

    <DownloadFilesFromUrl Items="@(_wixToolDownload)" />

    <ZipFileExtractToDirectory
      SourceArchive="$(WixDestinationPath)"
      DestinationDirectory="$(WixToolsDir)" />
  </Target>

  <Target Name="GetAcquireWixProperties">
    <PropertyGroup>
      <WixDownloadFilename>wix.$(WixVersion).zip</WixDownloadFilename>
      <WixDownloadUrl>https://dotnetcli.azureedge.net/build/wix/$(WixDownloadFilename)</WixDownloadUrl>
      <WixDestinationPath>$(WixToolsDir)$(WixDownloadFilename)</WixDestinationPath>
      <WixDownloadSentinel>$(WixToolsDir)WixDownload.$(WixVersion).sentinel</WixDownloadSentinel>
    </PropertyGroup>
  </Target>

  <Target Name="GenerateMsiVersionString">
    <GenerateMsiVersion
      Major="$(MajorVersion)"
      Minor="$(MinorVersion)"
      Patch="$(PatchVersion)"
      BuildNumberMajor="$(BuildNumberMajor)"
      BuildNumberMinor="$(BuildNumberMajor)">
      <Output TaskParameter="MsiVersion" PropertyName="MsiVersionString" />
    </GenerateMsiVersion>
  </Target>

</Project>
