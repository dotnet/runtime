<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="dir.props" />
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />

  <PropertyGroup>
    <PackageTargets>
      GenerateVersionBadge;
      GenerateCompressedFiles;
      GenerateNugetPackages;
      GenerateInstallers;
      GenerateProjectInstallers;
    </PackageTargets>
  </PropertyGroup>

  <Target Name="Build" DependsOnTargets="BuildInstallers;BuildCombinedInstallers" Condition="'$(DOTNET_BUILD_SKIP_PACKAGING)' != 'true'" />
  <Target Name="BuildInstallers" DependsOnTargets="$(PackageTargets)" Condition="'$(DOTNET_BUILD_SKIP_PACKAGING)' != 'true'" />
  <Target Name="BuildCombinedInstallers" DependsOnTargets="GenerateCombinedInstallers" Condition="'$(DOTNET_BUILD_SKIP_PACKAGING)' != 'true'" />

  <Target Name="InitPackage">
    <ItemGroup>
      <OutDirs Include="$(SharedHostPublishRoot)" />
      <OutDirs Include="$(HostFxrPublishRoot)" />
      <OutDirs Include="$(SharedFrameworkPublishRoot)" />
    </ItemGroup>

    <RemoveDir Directories="@(OutDirs)" />

    <!-- copy shared host layout -->
    <Copy SourceFiles="$(SharedFrameworkPublishDir)dotnet$(ExeSuffix)"
          DestinationFolder="$(SharedHostPublishRoot)" />

    <Copy SourceFiles="$(ProjectDir)THIRD-PARTY-NOTICES.TXT"
          DestinationFiles="$(SharedHostPublishRoot)ThirdPartyNotices.txt" />

    <Copy SourceFiles="$(ProjectDir)LICENSE.TXT"
          DestinationFiles="$(SharedHostPublishRoot)LICENSE.txt"
          Condition="'$(TargetsUnix)' == 'true'"/>

    <Copy SourceFiles="$(ProjectDir)resources/LICENSE-MSFT.txt"
          DestinationFiles="$(SharedHostPublishRoot)LICENSE.txt"
          Condition="'$(TargetsUnix)' != 'true'"/>

    <!-- copy host fxr -->
    <ItemGroup>
      <HostFxrFiles Include="$(SharedFrameworkPublishDir)host\**\*" />
    </ItemGroup>
    <Copy SourceFiles="@(HostFxrFiles)"
           DestinationFolder="$(HostFxrPublishRoot)host/%(HostFxrFiles.RecursiveDir)" />

    <!-- copy shared framwork layout -->
    <ItemGroup>
      <SharedFxFiles Include="$(SharedFrameworkPublishDir)shared\**\*" />
    </ItemGroup>
    <Copy Sourcefiles="@(SharedFxFiles)"
          DestinationFolder="$(SharedFrameworkPublishRoot)shared/%(SharedFxFiles.RecursiveDir)" />

    <!-- Fix file permits -->
    <!-- Reset everything to user readable/writeable and group and world readable. -->
    <Exec Condition="'$(OSGroup)' != 'Windows_NT'"
          Command='find %(OutDirs.Identity) -type f -name "*" -exec chmod 644 {} \;' />
    <!-- Generally, dylibs and sos have 'x' -->
    <Exec Condition="'$(OSGroup)' != 'Windows_NT'"
          Command='find %(OutDirs.Identity) -type f -name "*.dylib" -exec chmod 755 {} \;' />
    <Exec Condition="'$(OSGroup)' != 'Windows_NT'"
          Command='find %(OutDirs.Identity) -type f -name "*.so" -exec chmod 755 {} \;' />
    <!-- Executables (those without dots) are executable -->
    <Exec Condition="'$(OSGroup)' != 'Windows_NT'"
          Command='find %(OutDirs.Identity) -type f ! -name "*.*" -exec chmod 755 {} \;' />


    <!-- Copy all to combined directory -->
    <ItemGroup>
      <CombinedFiles Include="$(SharedHostPublishRoot)\**\*" />
      <CombinedFiles Include="$(HostFxrPublishRoot)/**\*" />
      <CombinedFiles Include="$(SharedFrameworkPublishRoot)/**\*" />
    </ItemGroup>
    <RemoveDir Directories="@(CombinedPublishRoot)" />
    <Copy SourceFiles="@(CombinedFiles)"
          DestinationFolder="$(CombinedPublishRoot)/%(CombinedFiles.RecursiveDir)" />

    <!-- create output dir -->
    <MakeDir Condition="!Exists('$(AssetOutputPath)')"
             Directories="$(AssetOutputPath)" />
  </Target>

  <Target Name="GenerateVersionBadge">
    <PropertyGroup>
      <templateSvg>$(ProjectDir)resources/images/version_badge.svg</templateSvg>
    </PropertyGroup>

    <MakeDir  Condition="!Exists('$(BaseOutputRootPath)')" Directories="$(BaseOutputRootPath)" />

    <WriteLinesToFile
      File="$(OutputVersionBadge)"
      Lines="$([System.IO.File]::ReadAllText('$(templateSvg)').Replace('ver_number', '$(ProductVersion)'))"
      Overwrite="true"
                      />
  </Target>

  <Target Name="GenerateCompressedFiles" DependsOnTargets="InitPackage;GenerateZip;GenerateTarBall" Condition="'$(UsePrebuiltPortableBinariesForInstallers)' == 'false'"/>

  <UsingTask TaskName="ZipFileCreateFromDirectory" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <Target Name="GenerateZip"
          Condition="'$(OSGroup)'=='Windows_NT'">

    <ZipFileCreateFromDirectory
        SourceDirectory="$(CombinedPublishRoot)"
        DestinationArchive="$(AssetOutputPath)$(CombinedCompressedFile)"
        OverwriteDestination="true" />

    <ZipFileCreateFromDirectory
        SourceDirectory="$(HostFxrPublishRoot)"
        DestinationArchive="$(AssetOutputPath)$(HostFxrCompressedFile)"
        OverwriteDestination="true" />

    <ZipFileCreateFromDirectory
        SourceDirectory="$(SharedFrameworkPublishRoot)"
        DestinationArchive="$(AssetOutputPath)$(SharedFrameworkCompressedFile)"
        OverwriteDestination="true" />

    <ZipFileCreateFromDirectory
        SourceDirectory="$(SharedFrameworkPublishSymbolsDir)"
        DestinationArchive="$(AssetOutputPath)$(SharedFrameworkSymbolsCompressedFile)"
        OverwriteDestination="true" />
  </Target>

  <Target Name="GenerateTarBall"
          Condition="'$(OSGroup)'!='Windows_NT'">

    <!-- tar command will throw 'file changed as we read it' on some distros.  ignore that error.
         we use -C so that we get a relative folder structure which is compressed rather than the full path -->
    <Exec Command="tar -C $(CombinedPublishRoot) -czf $(AssetOutputPath)$(CombinedCompressedFile) ."
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true" />
    <Exec Command="tar -C $(HostFxrPublishRoot) -czf $(AssetOutputPath)$(HostFxrCompressedFile) ."
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true" />
    <Exec Command="tar -C $(SharedFrameworkPublishRoot) -czf $(AssetOutputPath)$(SharedFrameworkCompressedFile) ."
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true" />
    <Exec Command="tar -C $(SharedFrameworkPublishSymbolsDir) -czf $(AssetOutputPath)$(SharedFrameworkSymbolsCompressedFile) ."
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true" />
    <Error Condition="!Exists('$(AssetOutputPath)$(CombinedCompressedFile)')" Message="Unable to create $(AssetOutputPath)$(CombinedCompressedFile)" />
    <Error Condition="!Exists('$(AssetOutputPath)$(HostFxrCompressedFile)')" Message="Unable to create $(AssetOutputPath)$(HostFxrCompressedFile)" />
    <Error Condition="!Exists('$(AssetOutputPath)$(SharedFrameworkCompressedFile)')" Message="Unable to create $(AssetOutputPath)$(SharedFrameworkCompressedFile)" />
    <Error Condition="!Exists('$(AssetOutputPath)$(SharedFrameworkSymbolsCompressedFile)')" Message="Unable to create $(AssetOutputPath)$(SharedFrameworkSymbolsCompressedFile)" />
  </Target>

  <Import Project="windows\package.targets" />
  <Import Project="osx\package.targets" />
  <Import Project="deb\package.targets" />
  <Import Project="rpm\package.targets" />

  <PropertyGroup>
   <InstallerDependsOn>
     GenerateMsis;
     GeneratePkgs;
     GenerateDebs;
     GenerateRpms;
   </InstallerDependsOn>
  </PropertyGroup>
  <Target Name="GenerateInstallers" DependsOnTargets="InitPackage;$(InstallerDependsOn)" />

  <Target Name="GenerateCombinedInstallers" DependsOnTargets="InitPackage;GenerateBundles" />

  <!-- Run the project-based installer creation infrastructure as well. -->
  <Target Name="GenerateProjectInstallers">
    <MSBuild Targets="GenerateInstallers" Projects="..\projects\installer.builds" />
  </Target>

  <Target Name="GenerateNugetPackages" DependsOnTargets="InitPackage" Condition="'$(UsePrebuiltPortableBinariesForInstallers)' == 'false'">

    <ItemGroup>
      <!-- The list of packages we are servicing -->
      <PackageProjects Include="$(ProjectDir)src\managed\Microsoft.DotNet.PlatformAbstractions\Microsoft.DotNet.PlatformAbstractions.csproj" />
      <PackageProjects Include="$(ProjectDir)src\managed\Microsoft.Extensions.DependencyModel\Microsoft.Extensions.DependencyModel.csproj" />
    </ItemGroup>

    <ItemGroup Condition="'$(BuildAllPackages)' == 'true'">
      <!-- The list of packages we are not servicing -->
    </ItemGroup>

    <PropertyGroup>
      <PackArgs>--no-restore --no-build --output $(PackageOutputPath)</PackArgs>
      <PackArgs>$(PackArgs) $(MSBuildPassThroughPropertyList) /p:BaseOutputPath=$(IntermediateOutputForPackaging)</PackArgs>
    </PropertyGroup>

    <Exec Command="$(DotnetToolCommand) pack %(PackageProjects.Identity) $(PackArgs)"
          Condition="'@(PackageProjects)' != ''" />
  </Target>

</Project>
