<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project='package.props' />

  <UsingTask TaskName="ReplaceFileContents" AssemblyFile="$(LocalBuildToolsTaskDir)core-setup.tasks.dll"/>

  <PropertyGroup>
    <IsDebianBasedDistro Condition="$(PackageTargetRid.StartsWith('ubuntu')) or
                                    $(PackageTargetRid.StartsWith('debian'))">true</IsDebianBasedDistro>
    <BuildDebPackage Condition="'$(IsDebianBasedDistro)' == true and '$(TargetArchitecture)' == 'x64'">true</BuildDebPackage>
    <DebianConfigJsonName>debian_config.json</DebianConfigJsonName>
  </PropertyGroup>

  <Target Name="InitializeDotnetDebTool">
    <PropertyGroup>
      <VersionSuffixArg Condition="'$(VersionSuffix)' != ''">--version-suffix $(VersionSuffix)</VersionSuffixArg>
    </PropertyGroup>

    <Exec Command="$(DotnetRestoreCommand) $(dotnetDebToolSource)"/>
    <Exec Command="$(DotnetToolCommand) pack $(dotnetDebToolSource) --output $(PackageOutputPath) $(VersionSuffixArg)"/>

    <RemoveDir Condition="Exists('$(consumingProjectDirectory)')"
               Directories="$(consumingProjectDirectory)" />

    <MakeDir Directories="$(consumingProjectDirectory)" />

    <MakeDir Condition="!Exists('$(PackagesIntermediateDir)')"
             Directories="$(PackagesIntermediateDir)" />


    <Copy SourceFiles="$(MSBuildThisFileDirectory)/$(toolConsumerProjectName)"
          DestinationFiles="$(consumingProjectDirectory)/$(toolConsumerProjectName)" />

    <Exec Command="$(DotnetRestoreCommand) -s $(dotnetDebToolPackageSource)"
          WorkingDirectory="$(consumingProjectDirectory)" />

  </Target>

  <Target Name="GenerateDebs"
          DependsOnTargets="TestDebuild;
                            BuildDebs;"
          Condition="'$(BuildDebPackage)'=='true'" />

  <Target Name="BuildDebs"
          DependsOnTargets="InitializeDotnetDebTool;GenerateSharedHostDeb;GenerateHostFxrDeb;GenerateSharedFrameworkDeb;GenerateRuntimeDependenciesDeb"
          Condition="'$(BuildDebPackage)'=='true' and '$(DebuildPresent)' == 'true'" />

  <Target Name="GenerateSharedHostDeb">
    <PropertyGroup>
      <DebPackageName>$(SharedHostDebPkgName)</DebPackageName>
      <DebPackageVersion>$(HostVersion)</DebPackageVersion>
      <InputRoot>$(SharedHostPublishRoot)</InputRoot>
      <DebFile>$(SharedHostInstallerFile)</DebFile>
      <ManPagesDir>$(ProjectDir)Documentation/manpages</ManPagesDir>
      <ConfigJsonName>dotnet-sharedhost-debian_config.json</ConfigJsonName>
      <ConfigJsonFile>$(debPackaginfConfigPath)$(ConfigJsonName)</ConfigJsonFile>
      <debIntermediatesDir>$(PackagesIntermediateDir)$(DebPackageName)/$(DebPackageVersion)</debIntermediatesDir>
    </PropertyGroup>

    <PropertyGroup>
      <debLayoutDirectory>$(debIntermediatesDir)/debianLayoutDirectory/</debLayoutDirectory>
      <debLayoutAbsolute>$(debLayoutDirectory)$</debLayoutAbsolute>
      <debLayoutPackageRoot>$(debLayoutDirectory)package_root</debLayoutPackageRoot>
      <debLayoutSamples>$(debLayoutDirectory)samples</debLayoutSamples>
      <debLayoutDocs>$(debLayoutDirectory)docs</debLayoutDocs>
    </PropertyGroup>

    <RemoveDir Condition="Exists('$(debIntermediatesDir)')" Directories="$(debIntermediatesDir)" />
    <MakeDir Directories="$(debIntermediatesDir)" />

    <!-- Create empty debian layout -->
    <RemoveDir Condition="Exists('$(debLayoutDirectory)')" Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutAbsolute)" />
    <MakeDir Directories="$(debLayoutPackageRoot)" />
    <MakeDir Directories="$(debLayoutSamples)" />
    <MakeDir Directories="$(debLayoutDocs)" />

    <!-- Copy files to debian layout -->
    <ItemGroup>
      <SHFiles Include="$(InputRoot)/**/*" />
      <SHManpages Include="$(ManPagesDir)/**/*" />
    </ItemGroup>

    <Copy SourceFiles="@(SHFiles)" DestinationFiles="@(SHFiles->'$(debLayoutPackageRoot)/%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(SHManpages)" DestinationFiles="@(SHManpages->'$(debLayoutDocs)/%(RecursiveDir)%(Filename)%(Extension)')" />

    <!-- Replace config json variables -->
    <ItemGroup>
      <SharedHostTokenValue Include="%SHARED_HOST_BRAND_NAME%">
        <ReplacementString>$(SharedHostBrandName)</ReplacementString>
      </SharedHostTokenValue>
    </ItemGroup>

    <ReplaceFileContents InputFile="$(ConfigJsonFile)"
                         DestinationFile="$(debLayoutDirectory)$(DebianConfigJsonName)"
                         ReplacementItems="@(SharedHostTokenValue)" />

    <Exec Command="$(DotnetToolCommand) deb-tool -i $(debLayoutDirectory) -o $(debIntermediatesDir) -n $(DebPackageName) -v $(DebPackageVersion)"
          WorkingDirectory="$(consumingProjectDirectory)" />

    <!-- Copy package to output -->
    <ItemGroup>
      <GeneratedDebFiles Remove="@(GeneratedDebFiles)" />
      <GeneratedDebFiles Include="$(debIntermediatesDir)/*.deb" />
    </ItemGroup>

    <Error Text="@(GeneratedDebFiles->Count()) .deb files generated." Condition="'@(GeneratedDebFiles->Count())' != 1" />

    <Copy SourceFiles="@(GeneratedDebFiles)"
          DestinationFiles="$(DebFile)"
          OverwriteReadOnlyFiles="True"
          SkipUnchangedFiles="False"
          UseHardlinksIfPossible="False" />

  </Target>

  <Target Name="GenerateHostFxrDeb">
    <PropertyGroup>
      <DebPackageName>$(HostFxrDebPkgName)</DebPackageName>
      <DebPackageVersion>$(HostResolverVersion)</DebPackageVersion>
      <InputRoot>$(HostFxrPublishRoot)</InputRoot>
      <DebFile>$(HostFxrInstallerFile)</DebFile>
      <ConfigJsonName>dotnet-hostfxr-debian_config.json</ConfigJsonName>
      <ConfigJsonFile>$(debPackaginfConfigPath)$(ConfigJsonName)</ConfigJsonFile>
      <debIntermediatesDir>$(PackagesIntermediateDir)$(DebPackageName)/$(DebPackageVersion)</debIntermediatesDir>
    </PropertyGroup>

    <PropertyGroup>
      <debLayoutDirectory>$(debIntermediatesDir)/debianLayoutDirectory/</debLayoutDirectory>
      <debLayoutAbsolute>$(debLayoutDirectory)$</debLayoutAbsolute>
      <debLayoutPackageRoot>$(debLayoutDirectory)package_root</debLayoutPackageRoot>
      <debLayoutSamples>$(debLayoutDirectory)samples</debLayoutSamples>
      <debLayoutDocs>$(debLayoutDirectory)docs</debLayoutDocs>
    </PropertyGroup>

    <RemoveDir Condition="Exists('$(debIntermediatesDir)')" Directories="$(debIntermediatesDir)" />
    <MakeDir Directories="$(debIntermediatesDir)" />

    <!-- Create empty debian layout -->
    <RemoveDir Condition="Exists('$(debLayoutDirectory)')" Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutAbsolute)" />
    <MakeDir Directories="$(debLayoutPackageRoot)" />
    <MakeDir Directories="$(debLayoutSamples)" />
    <MakeDir Directories="$(debLayoutDocs)" />

    <!-- Copy files to debian layout -->
    <ItemGroup>
      <HFFiles Include="$(InputRoot)/**/*" />
    </ItemGroup>

    <Copy SourceFiles="@(HFFiles)" DestinationFiles="@(HFFiles->'$(debLayoutPackageRoot)/%(RecursiveDir)%(Filename)%(Extension)')" />

    <!-- Replace config json variables -->
    <ItemGroup>
      <HostFxrTokenValue Include="%HOSTFXR_BRAND_NAME%">
        <ReplacementString>$(HostFxrBrandName)</ReplacementString>
      </HostFxrTokenValue>
      <HostFxrTokenValue Include="%SHARED_HOST_DEBIAN_VERSION%">
        <ReplacementString>$(HostVersion)</ReplacementString>
      </HostFxrTokenValue>
      <HostFxrTokenValue Include="%HOSTFXR_NUGET_VERSION%">
        <ReplacementString>$(HostResolverVersion)</ReplacementString>
      </HostFxrTokenValue>
      <HostFxrTokenValue Include="%HOSTFXR_DEBIAN_PACKAGE_NAME%">
        <ReplacementString>$(DebPackageName)</ReplacementString>
      </HostFxrTokenValue>
    </ItemGroup>

    <ReplaceFileContents InputFile="$(ConfigJsonFile)"
                         DestinationFile="$(debLayoutDirectory)$(DebianConfigJsonName)"
                         ReplacementItems="@(HostFxrTokenValue)" />

    <Exec Command="$(DotnetToolCommand) deb-tool -i $(debLayoutDirectory) -o $(debIntermediatesDir) -n $(DebPackageName) -v $(DebPackageVersion)"
          WorkingDirectory="$(consumingProjectDirectory)" />

    <!-- Copy package to output -->
    <ItemGroup>
      <GeneratedDebFiles Remove="@(GeneratedDebFiles)" />
      <GeneratedDebFiles Include="$(debIntermediatesDir)/*.deb" />
    </ItemGroup>

    <Error Text="@(GeneratedDebFiles->Count()) .deb files generated." Condition="'@(GeneratedDebFiles->Count())' != 1" />

    <Copy SourceFiles="@(GeneratedDebFiles)"
          DestinationFiles="$(DebFile)"
          OverwriteReadOnlyFiles="True"
          SkipUnchangedFiles="False"
          UseHardlinksIfPossible="False" />

  </Target>

  <Target Name="GenerateSharedFrameworkDeb" DependsOnTargets="GetLibIcuPackageName">
  
    <PropertyGroup>
      <DebPackageName>$(SharedFxDebPkgName)</DebPackageName>
      <DebPackageVersion>$(SharedFrameworkNugetVersion)</DebPackageVersion>
      <InputRoot>$(SharedFrameworkPublishRoot)</InputRoot>
      <DebFile>$(SharedFrameworkInstallerFile)</DebFile>
      <ConfigJsonName>dotnet-sharedframework-debian_config.json</ConfigJsonName>
      <ConfigJsonName  Condition="$(PackageTargetRid.StartsWith('debian.9'))">dotnet-sharedframework-debian9_config.json</ConfigJsonName>
      <ConfigJsonFile>$(debPackaginfConfigPath)$(ConfigJsonName)</ConfigJsonFile>
      <debIntermediatesDir>$(PackagesIntermediateDir)$(DebPackageName)/$(DebPackageVersion)</debIntermediatesDir>
    </PropertyGroup>

    <PropertyGroup>
      <debLayoutDirectory>$(debIntermediatesDir)/debianLayoutDirectory/</debLayoutDirectory>
      <debLayoutAbsolute>$(debLayoutDirectory)$</debLayoutAbsolute>
      <debLayoutPackageRoot>$(debLayoutDirectory)package_root</debLayoutPackageRoot>
      <debLayoutSamples>$(debLayoutDirectory)samples</debLayoutSamples>
      <debLayoutDocs>$(debLayoutDirectory)docs</debLayoutDocs>
    </PropertyGroup>

    <RemoveDir Condition="Exists('$(debIntermediatesDir)')" Directories="$(debIntermediatesDir)" />
    <MakeDir Directories="$(debIntermediatesDir)" />

    <!-- Create empty debian layout -->
    <RemoveDir Condition="Exists('$(debLayoutDirectory)')" Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutAbsolute)" />
    <MakeDir Directories="$(debLayoutPackageRoot)" />
    <MakeDir Directories="$(debLayoutSamples)" />
    <MakeDir Directories="$(debLayoutDocs)" />

    <!-- Copy files to debian layout -->
    <ItemGroup>
      <SFFiles Include="$(InputRoot)/**/*" />
    </ItemGroup>

    <Copy SourceFiles="@(SFFiles)" DestinationFiles="@(SFFiles->'$(debLayoutPackageRoot)/%(RecursiveDir)%(Filename)%(Extension)')"/>

    <!-- Replace config json variables -->
    <ItemGroup>
      <SharedFrameworkTokenValue Include="%HOSTFXR_DEBIAN_PACKAGE_NAME%">
        <ReplacementString>$(HostFxrDebPkgName)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%SHARED_FRAMEWORK_DEBIAN_PACKAGE_NAME%">
        <ReplacementString>$(SharedFxDebPkgName)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%SHARED_FRAMEWORK_NUGET_NAME%">
        <ReplacementString>$(SharedFrameworkName)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%SHARED_FRAMEWORK_NUGET_VERSION%">
        <ReplacementString>$(SharedFrameworkNugetVersion)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%SHARED_FRAMEWORK_BRAND_NAME%">
        <ReplacementString>$(SharedFrameworkBrandName)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%LIBICU_PACKAGE_NAME%">
        <ReplacementString>$(LibIcuPackageName)</ReplacementString>
      </SharedFrameworkTokenValue>

    </ItemGroup>

    <ReplaceFileContents InputFile="$(ConfigJsonFile)"
                         DestinationFile="$(debLayoutDirectory)$(DebianConfigJsonName)"
                         ReplacementItems="@(SharedFrameworkTokenValue)" />

    <Exec Command="$(DotnetToolCommand) deb-tool -i $(debLayoutDirectory) -o $(debIntermediatesDir) -n $(DebPackageName) -v $(DebPackageVersion)"
          WorkingDirectory="$(consumingProjectDirectory)" />

    <!-- Copy package to output -->
    <ItemGroup>
      <GeneratedDebFiles Remove="@(GeneratedDebFiles)" />
      <GeneratedDebFiles Include="$(debIntermediatesDir)/*.deb" />
    </ItemGroup>

    <Error Text="@(GeneratedDebFiles->Count()) .deb files generated." Condition="'@(GeneratedDebFiles->Count())' != 1" />

    <Copy SourceFiles="@(GeneratedDebFiles)"
          DestinationFiles="$(DebFile)"
          OverwriteReadOnlyFiles="True"
          SkipUnchangedFiles="False"
          UseHardlinksIfPossible="False" />

  </Target>
  
  <Target Name="GenerateRuntimeDependenciesDeb" DependsOnTargets="GetLibIcuPackageName">
    <PropertyGroup>
      <DebPackageName>$(RuntimeDependenciesDebPkgName)</DebPackageName>
      <DebPackageVersion>$(SharedFrameworkNugetVersion)</DebPackageVersion>
      <DebFile>$(DotnetRuntimeDependenciesPackageInstallerFile)</DebFile>
      <ConfigJsonName>dotnet-runtime-deps-debian_config.json</ConfigJsonName>
      <ConfigJsonFile>$(debPackaginfConfigPath)$(ConfigJsonName)</ConfigJsonFile>
      <debIntermediatesDir>$(PackagesIntermediateDir)$(DebPackageName)/$(DebPackageVersion)</debIntermediatesDir>
    </PropertyGroup>

    <PropertyGroup>
      <debLayoutDirectory>$(debIntermediatesDir)/debianLayoutDirectory/</debLayoutDirectory>
      <debLayoutAbsolute>$(debLayoutDirectory)$</debLayoutAbsolute>
      <debLayoutPackageRoot>$(debLayoutDirectory)package_root</debLayoutPackageRoot>
      <debLayoutSamples>$(debLayoutDirectory)samples</debLayoutSamples>
      <debLayoutDocs>$(debLayoutDirectory)docs</debLayoutDocs>
    </PropertyGroup>

    <RemoveDir Condition="Exists('$(debIntermediatesDir)')" Directories="$(debIntermediatesDir)" />
    <MakeDir Directories="$(debIntermediatesDir)" />

    <!-- Compute LIBSSL Version -->
    <Exec Command="apt-cache search --names-only '^libssl[.0-9]+$' | cut -d' ' -f1" 
          ConsoleToMSBuild="true"> 
       <Output TaskParameter="ConsoleOutput" PropertyName="LibSSLPackageName" /> 
    </Exec> 

    <!-- Create empty debian layout -->
    <RemoveDir Condition="Exists('$(debLayoutDirectory)')" Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutAbsolute)" />
    <MakeDir Directories="$(debLayoutPackageRoot)" />
    <MakeDir Directories="$(debLayoutSamples)" />
    <MakeDir Directories="$(debLayoutDocs)" />

    <!-- Replace config json variables -->
    <ItemGroup>
      <SharedFrameworkTokenValue Include="%RUNTIME_DEPS_DEBIAN_PACKAGE_NAME%">
        <ReplacementString>$(RuntimeDependenciesDebPkgName)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%RUNTIME_DEPS_VERSION%">
        <ReplacementString>$(SharedFrameworkNugetVersion)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%LIBSSL_PACKAGE_NAME%">
        <ReplacementString>$(LibSSLPackageName)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%LIBICU_PACKAGE_NAME%"> 
        <ReplacementString>$(LibIcuPackageName)</ReplacementString> 
      </SharedFrameworkTokenValue> 

    </ItemGroup>

    <ReplaceFileContents InputFile="$(ConfigJsonFile)"
                         DestinationFile="$(debLayoutDirectory)$(DebianConfigJsonName)"
                         ReplacementItems="@(SharedFrameworkTokenValue)" />

    <Exec Command="$(DotnetToolCommand) deb-tool -i $(debLayoutDirectory) -o $(debIntermediatesDir) -n $(DebPackageName) -v $(DebPackageVersion)"
          WorkingDirectory="$(consumingProjectDirectory)" />

    <!-- Copy package to output -->
    <ItemGroup>
      <GeneratedDebFiles Remove="@(GeneratedDebFiles)" />
      <GeneratedDebFiles Include="$(debIntermediatesDir)/*.deb" />
    </ItemGroup>

    <Error Text="@(GeneratedDebFiles->Count()) .deb files generated." Condition="'@(GeneratedDebFiles->Count())' != 1" />

    <Copy SourceFiles="@(GeneratedDebFiles)"
          DestinationFiles="$(DebFile)"
          OverwriteReadOnlyFiles="True"
          SkipUnchangedFiles="False"
          UseHardlinksIfPossible="False" />

  </Target>

  <Target Name="TestDebuild">

    <!-- run Debuild -->
    <Exec Command="/usr/bin/env debuild -h" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="DebuildExitCode" />
    </Exec>

    <!-- Check if it returned 0 -->
    <PropertyGroup>
      <DebuildPresent>false</DebuildPresent>
      <DebuildPresent Condition=" '$(DebuildExitCode)' == '0' ">true</DebuildPresent>
    </PropertyGroup>

    <!-- Workaround for Jenkins machines that don't have the necessary packages https://github.com/dotnet/core-setup/issues/2260 -->
    <Message Condition=" '$(DebuildPresent)'  != 'true' "
             Text="Debuild Not found, Debian packages will not be built."
             Importance="High" />
  </Target>

  <!-- Compute LibIcu Package Name -->
  <Target Name="GetLibIcuPackageName">
    <Exec Command="apt-cache search --names-only '^libicu[0-9]+$' | cut -d' ' -f1" 
          ConsoleToMSBuild="true"> 
       <Output TaskParameter="ConsoleOutput" PropertyName="LibIcuPackageName" /> 
    </Exec>
  </Target>
</Project>