<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project='package.props' />

  <UsingTask TaskName="ReplaceFileContents" AssemblyFile="$(LocalBuildToolsTaskDir)core-setup.tasks.dll"/>

  <PropertyGroup>
    <DebianConfigJsonName>debian_config.json</DebianConfigJsonName>
  </PropertyGroup>

  <Target Name="GenerateDebs"
          DependsOnTargets="TestDebuild;
                            BuildDebs;"
          Condition="'$(BuildDebPackage)'=='true'" />

  <Target Name="GenerateRuntimeDebs" 
          DependsOnTargets="GenerateSharedHostDeb;GenerateHostFxrDeb;GenerateSharedFrameworkDeb"
          Condition="'$(BuildRuntimeDebs)' == 'true'" />

  <Target Name="BuildDebs"
          DependsOnTargets="InitializeDotnetDebTool;GenerateRuntimeDebs;GenerateRuntimeDependenciesDeb"
          Condition="'$(BuildDebPackage)'=='true' and '$(DebuildPresent)' == 'true'" />

  <Target Name="GenerateSharedHostDeb">
    <PropertyGroup>
      <DebPackageName>$(SharedHostDebPkgName)</DebPackageName>
      <DebPackageVersion>$(HostPackageVersion)</DebPackageVersion>
      <InputRoot>$(SharedHostPublishRoot)</InputRoot>
      <DebFile>$(SharedHostInstallerFile)</DebFile>
      <ManPagesDir>$(ProjectDir)Documentation/manpages</ManPagesDir>
      <ConfigJsonName>dotnet-sharedhost-debian_config.json</ConfigJsonName>
      <ConfigJsonFile>$(debPackaginfConfigPath)$(ConfigJsonName)</ConfigJsonFile>
      <debIntermediatesDir>$(PackagesIntermediateDir)$(DebPackageName)/$(DebPackageVersion)</debIntermediatesDir>
    </PropertyGroup>

    <PropertyGroup>
      <debLayoutDirectory>$(debIntermediatesDir)/debianLayoutDirectory/</debLayoutDirectory>
      <debLayoutAbsolute>$(debLayoutDirectory)$</debLayoutAbsolute>
      <debLayoutPackageRoot>$(debLayoutDirectory)package_root</debLayoutPackageRoot>
      <debLayoutSamples>$(debLayoutDirectory)samples</debLayoutSamples>
      <debLayoutDocs>$(debLayoutDirectory)docs</debLayoutDocs>
    </PropertyGroup>

    <RemoveDir Condition="Exists('$(debIntermediatesDir)')" Directories="$(debIntermediatesDir)" />
    <MakeDir Directories="$(debIntermediatesDir)" />

    <!-- Create empty debian layout -->
    <RemoveDir Condition="Exists('$(debLayoutDirectory)')" Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutAbsolute)" />
    <MakeDir Directories="$(debLayoutPackageRoot)" />
    <MakeDir Directories="$(debLayoutSamples)" />
    <MakeDir Directories="$(debLayoutDocs)" />

    <!-- Copy files to debian layout -->
    <ItemGroup>
      <SHFiles Include="$(InputRoot)/**/*" />
      <SHManpages Include="$(ManPagesDir)/**/*" />
    </ItemGroup>

    <Copy SourceFiles="@(SHFiles)" DestinationFiles="@(SHFiles->'$(debLayoutPackageRoot)/%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(SHManpages)" DestinationFiles="@(SHManpages->'$(debLayoutDocs)/%(RecursiveDir)%(Filename)%(Extension)')" />

    <!-- Replace config json variables -->
    <ItemGroup>
      <SharedHostTokenValue Include="%SHARED_HOST_BRAND_NAME%">
        <ReplacementString>$(SharedHostBrandName)</ReplacementString>
      </SharedHostTokenValue>
      <SharedHostTokenValue Include="%SHARED_HOST_REVISION%">
        <ReplacementString>$(HostPackageRelease)</ReplacementString>
      </SharedHostTokenValue>
    </ItemGroup>

    <ReplaceFileContents InputFile="$(ConfigJsonFile)"
                         DestinationFile="$(debLayoutDirectory)$(DebianConfigJsonName)"
                         ReplacementItems="@(SharedHostTokenValue)" />

    <Exec Command="$(DotnetToolCommand) deb-tool -i $(debLayoutDirectory) -o $(debIntermediatesDir) -n $(DebPackageName) -v $(DebPackageVersion)"
          WorkingDirectory="$(DebtoolConsumerDeployDir)" />

    <!-- Copy package to output -->
    <ItemGroup>
      <GeneratedDebFiles Remove="@(GeneratedDebFiles)" />
      <GeneratedDebFiles Include="$(debIntermediatesDir)/*.deb" />
    </ItemGroup>

    <Error Text="@(GeneratedDebFiles->Count()) .deb files generated." Condition="'@(GeneratedDebFiles->Count())' != 1" />

    <Copy SourceFiles="@(GeneratedDebFiles)"
          DestinationFiles="$(DebFile)"
          OverwriteReadOnlyFiles="True"
          SkipUnchangedFiles="False"
          UseHardlinksIfPossible="False" />

  </Target>

  <Target Name="GenerateHostFxrDeb">
    <PropertyGroup>
      <DebPackageName>$(HostFxrDebPkgName)</DebPackageName>
      <DebPackageVersion>$(HostResolverPackageVersion)</DebPackageVersion>
      <InputRoot>$(HostFxrPublishRoot)</InputRoot>
      <DebFile>$(HostFxrInstallerFile)</DebFile>
      <ConfigJsonName>dotnet-hostfxr-debian_config.json</ConfigJsonName>
      <ConfigJsonFile>$(debPackaginfConfigPath)$(ConfigJsonName)</ConfigJsonFile>
      <debIntermediatesDir>$(PackagesIntermediateDir)$(DebPackageName)/$(DebPackageVersion)</debIntermediatesDir>
    </PropertyGroup>

    <PropertyGroup>
      <debLayoutDirectory>$(debIntermediatesDir)/debianLayoutDirectory/</debLayoutDirectory>
      <debLayoutAbsolute>$(debLayoutDirectory)$</debLayoutAbsolute>
      <debLayoutPackageRoot>$(debLayoutDirectory)package_root</debLayoutPackageRoot>
      <debLayoutSamples>$(debLayoutDirectory)samples</debLayoutSamples>
      <debLayoutDocs>$(debLayoutDirectory)docs</debLayoutDocs>
    </PropertyGroup>

    <RemoveDir Condition="Exists('$(debIntermediatesDir)')" Directories="$(debIntermediatesDir)" />
    <MakeDir Directories="$(debIntermediatesDir)" />

    <!-- Create empty debian layout -->
    <RemoveDir Condition="Exists('$(debLayoutDirectory)')" Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutAbsolute)" />
    <MakeDir Directories="$(debLayoutPackageRoot)" />
    <MakeDir Directories="$(debLayoutSamples)" />
    <MakeDir Directories="$(debLayoutDocs)" />

    <!-- Copy files to debian layout -->
    <ItemGroup>
      <HFFiles Include="$(InputRoot)/**/*" />
    </ItemGroup>

    <Copy SourceFiles="@(HFFiles)" DestinationFiles="@(HFFiles->'$(debLayoutPackageRoot)/%(RecursiveDir)%(Filename)%(Extension)')" />

    <!-- Replace config json variables -->
    <ItemGroup>
      <HostFxrTokenValue Include="%HOSTFXR_BRAND_NAME%">
        <ReplacementString>$(HostFxrBrandName)</ReplacementString>
      </HostFxrTokenValue>
      <HostFxrTokenValue Include="%SHARED_HOST_DEBIAN_VERSION%">
        <ReplacementString>$(HostPackageVersion)</ReplacementString>
      </HostFxrTokenValue>
      <HostFxrTokenValue Include="%HOSTFXR_NUGET_VERSION%">
        <ReplacementString>$(HostResolverPackageVersion)</ReplacementString>
      </HostFxrTokenValue>
      <HostFxrTokenValue Include="%HOSTFXR_DEBIAN_PACKAGE_NAME%">
        <ReplacementString>$(DebPackageName)</ReplacementString>
      </HostFxrTokenValue>
      <HostFxrTokenValue Include="%HOSTFXR_REVISION%">
        <ReplacementString>$(HostResolverPackageRelease)</ReplacementString>
      </HostFxrTokenValue>
    </ItemGroup>

    <ReplaceFileContents InputFile="$(ConfigJsonFile)"
                         DestinationFile="$(debLayoutDirectory)$(DebianConfigJsonName)"
                         ReplacementItems="@(HostFxrTokenValue)" />

    <Exec Command="$(DotnetToolCommand) deb-tool -i $(debLayoutDirectory) -o $(debIntermediatesDir) -n $(DebPackageName) -v $(DebPackageVersion)"
          WorkingDirectory="$(DebtoolConsumerDeployDir)" />

    <!-- Copy package to output -->
    <ItemGroup>
      <GeneratedDebFiles Remove="@(GeneratedDebFiles)" />
      <GeneratedDebFiles Include="$(debIntermediatesDir)/*.deb" />
    </ItemGroup>

    <Error Text="@(GeneratedDebFiles->Count()) .deb files generated." Condition="'@(GeneratedDebFiles->Count())' != 1" />

    <Copy SourceFiles="@(GeneratedDebFiles)"
          DestinationFiles="$(DebFile)"
          OverwriteReadOnlyFiles="True"
          SkipUnchangedFiles="False"
          UseHardlinksIfPossible="False" />

  </Target>

  <Target Name="GenerateSharedFrameworkDeb">
  
    <PropertyGroup>
      <DebPackageName>$(SharedFxDebPkgName)</DebPackageName>
      <DebPackageVersion>$(RuntimePackageVersion)</DebPackageVersion>
      <InputRoot>$(SharedFrameworkPublishRoot)</InputRoot>
      <DebFile>$(SharedFrameworkInstallerFile)</DebFile>
      <ConfigJsonName>dotnet-sharedframework-debian_config.json</ConfigJsonName>
      <ConfigJsonFile>$(debPackaginfConfigPath)$(ConfigJsonName)</ConfigJsonFile>
      <debIntermediatesDir>$(PackagesIntermediateDir)$(DebPackageName)/$(DebPackageVersion)</debIntermediatesDir>
    </PropertyGroup>

    <PropertyGroup>
      <debLayoutDirectory>$(debIntermediatesDir)/debianLayoutDirectory/</debLayoutDirectory>
      <debLayoutAbsolute>$(debLayoutDirectory)$</debLayoutAbsolute>
      <debLayoutPackageRoot>$(debLayoutDirectory)package_root</debLayoutPackageRoot>
      <debLayoutSamples>$(debLayoutDirectory)samples</debLayoutSamples>
      <debLayoutDocs>$(debLayoutDirectory)docs</debLayoutDocs>
    </PropertyGroup>

    <RemoveDir Condition="Exists('$(debIntermediatesDir)')" Directories="$(debIntermediatesDir)" />
    <MakeDir Directories="$(debIntermediatesDir)" />

    <!-- Create empty debian layout -->
    <RemoveDir Condition="Exists('$(debLayoutDirectory)')" Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutAbsolute)" />
    <MakeDir Directories="$(debLayoutPackageRoot)" />
    <MakeDir Directories="$(debLayoutSamples)" />
    <MakeDir Directories="$(debLayoutDocs)" />

    <!-- Copy files to debian layout -->
    <ItemGroup>
      <SFFiles Include="$(InputRoot)/**/*" />
    </ItemGroup>

    <Copy SourceFiles="@(SFFiles)" DestinationFiles="@(SFFiles->'$(debLayoutPackageRoot)/%(RecursiveDir)%(Filename)%(Extension)')"/>

    <!-- Replace config json variables -->
    <ItemGroup>
      <SharedFrameworkTokenValue Include="%HOSTFXR_DEBIAN_PACKAGE_NAME%">
        <ReplacementString>$(HostFxrDebPkgName)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%HOSTFXR_NUGET_VERSION%">
        <ReplacementString>$(HostResolverPackageVersion)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%SHARED_FRAMEWORK_DEBIAN_PACKAGE_NAME%">
        <ReplacementString>$(SharedFxDebPkgName)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%SHARED_FRAMEWORK_NUGET_NAME%">
        <ReplacementString>$(SharedFrameworkName)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%SHARED_FRAMEWORK_NUGET_VERSION%">
        <ReplacementString>$(RuntimePackageVersion)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%SHARED_FRAMEWORK_BRAND_NAME%">
        <ReplacementString>$(SharedFrameworkBrandName)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%RUNTIME_DEPS_DEBIAN_PACKAGE_NAME%">
        <ReplacementString>$(RuntimeDependenciesDebPkgName)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%RUNTIME_DEPS_VERSION%">
        <ReplacementString>$(RuntimeDepsDebPackageVersion)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%SHARED_FRAMEWORK_REVISION%">
        <ReplacementString>$(RuntimePackageRelease)</ReplacementString>
      </SharedFrameworkTokenValue>

    </ItemGroup>

    <ReplaceFileContents InputFile="$(ConfigJsonFile)"
                         DestinationFile="$(debLayoutDirectory)$(DebianConfigJsonName)"
                         ReplacementItems="@(SharedFrameworkTokenValue)" />

    <Exec Command="$(DotnetToolCommand) deb-tool -i $(debLayoutDirectory) -o $(debIntermediatesDir) -n $(DebPackageName) -v $(DebPackageVersion)"
          WorkingDirectory="$(DebtoolConsumerDeployDir)" />

    <!-- Copy package to output -->
    <ItemGroup>
      <GeneratedDebFiles Remove="@(GeneratedDebFiles)" />
      <GeneratedDebFiles Include="$(debIntermediatesDir)/*.deb" />
    </ItemGroup>

    <Error Text="@(GeneratedDebFiles->Count()) .deb files generated." Condition="'@(GeneratedDebFiles->Count())' != 1" />

    <Copy SourceFiles="@(GeneratedDebFiles)"
          DestinationFiles="$(DebFile)"
          OverwriteReadOnlyFiles="True"
          SkipUnchangedFiles="False"
          UseHardlinksIfPossible="False" />

  </Target>
  
  <Target Name="GenerateRuntimeDependenciesDeb">
    <PropertyGroup>
      <DebPackageName>$(RuntimeDependenciesDebPkgName)</DebPackageName>
      <DebPackageVersion>$(RuntimeDepsDebPackageVersion)</DebPackageVersion>
      <DebFile>$(DotnetRuntimeDependenciesPackageInstallerFile)</DebFile>
      <ConfigJsonName>dotnet-runtime-deps-debian_config_$(OutputRid).json</ConfigJsonName>
      <ConfigJsonFile>$(debPackaginfConfigPath)$(ConfigJsonName)</ConfigJsonFile>
      <debIntermediatesDir>$(PackagesIntermediateDir)$(DebPackageName)/$(DebPackageVersion)</debIntermediatesDir>
    </PropertyGroup>

    <PropertyGroup>
      <debLayoutDirectory>$(debIntermediatesDir)/debianLayoutDirectory/</debLayoutDirectory>
      <debLayoutAbsolute>$(debLayoutDirectory)$</debLayoutAbsolute>
      <debLayoutPackageRoot>$(debLayoutDirectory)package_root</debLayoutPackageRoot>
      <debLayoutSamples>$(debLayoutDirectory)samples</debLayoutSamples>
      <debLayoutDocs>$(debLayoutDirectory)docs</debLayoutDocs>
    </PropertyGroup>

    <!-- Error out if the configuration file doesn't exist -->
    <Error Condition="!Exists('$(ConfigJsonFile)')" Text="Config file does not exist : '$(ConfigJsonFile)'" />

    <RemoveDir Condition="Exists('$(debIntermediatesDir)')" Directories="$(debIntermediatesDir)" />
    <MakeDir Directories="$(debIntermediatesDir)" />

    <!-- Create empty debian layout -->
    <RemoveDir Condition="Exists('$(debLayoutDirectory)')" Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutDirectory)" />
    <MakeDir Directories="$(debLayoutAbsolute)" />
    <MakeDir Directories="$(debLayoutPackageRoot)" />
    <MakeDir Directories="$(debLayoutSamples)" />
    <MakeDir Directories="$(debLayoutDocs)" />

    <!-- Replace config json variables -->
    <ItemGroup>
      <SharedFrameworkTokenValue Include="%RUNTIME_DEPS_DEBIAN_PACKAGE_NAME%">
        <ReplacementString>$(RuntimeDependenciesDebPkgName)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%RUNTIME_DEPS_VERSION%">
        <ReplacementString>$(RuntimeDepsDebPackageVersion)</ReplacementString>
      </SharedFrameworkTokenValue>
      <SharedFrameworkTokenValue Include="%RUNTIME_DEPS_REVISION%">
        <ReplacementString>$(RuntimeDepsDebPackageRelease)</ReplacementString>
      </SharedFrameworkTokenValue>
    </ItemGroup>

    <ReplaceFileContents InputFile="$(ConfigJsonFile)"
                         DestinationFile="$(debLayoutDirectory)$(DebianConfigJsonName)"
                         ReplacementItems="@(SharedFrameworkTokenValue)" />

    <Exec Command="$(DotnetToolCommand) deb-tool -i $(debLayoutDirectory) -o $(debIntermediatesDir) -n $(DebPackageName) -v $(DebPackageVersion)"
          WorkingDirectory="$(DebtoolConsumerDeployDir)" />

    <!-- Copy package to output -->
    <ItemGroup>
      <GeneratedDebFiles Remove="@(GeneratedDebFiles)" />
      <GeneratedDebFiles Include="$(debIntermediatesDir)/*.deb" />
    </ItemGroup>

    <Error Text="@(GeneratedDebFiles->Count()) .deb files generated." Condition="'@(GeneratedDebFiles->Count())' != 1" />

    <Copy SourceFiles="@(GeneratedDebFiles)"
          DestinationFiles="$(DebFile)"
          OverwriteReadOnlyFiles="True"
          SkipUnchangedFiles="False"
          UseHardlinksIfPossible="False" />

  </Target>

</Project>