<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\dir.targets" />

  <Import Project="$(PackagingToolsDir)packaging-tools.targets" />

  <UsingTask TaskName="CreateFrameworkListFile" AssemblyFile="$(LocalBuildToolsTaskDir)core-setup.tasks.dll"/>
  <UsingTask TaskName="GenerateFileVersionProps" AssemblyFile="$(LocalBuildToolsTaskDir)core-setup.tasks.dll"/>

  <PropertyGroup>
    <RestorePackages>true</RestorePackages>
    <PrereleaseResolveNuGetPackages>true</PrereleaseResolveNuGetPackages>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      If we are stabilizing set the StableVersion property for the packages.
      Needs to happen in dir.targets to allow all the pkgproj's to set Version property first.
    -->
    <StableVersion Condition="'$(IncludePreReleaseLabelInPackageVersion)' != 'true'">$(Version)</StableVersion>
  </PropertyGroup>

  <!--
    Remove duplicate files returned by PrereleaseResolveNuGetPackageAssets. The resolve task
    performs extra detection to pick up a PDB file for any file listed in the assets file. This
    causes duplicates if the assets file lists PDBs. If foo.dll and foo.pdb exist in the package and
    both are listed in the assets file, the task finds:

      foo.dll
      foo.pdb (based on foo.dll entry)
      foo.pdb
      foo.pdb (based on foo.pdb entry)

    The duplicates cause package validation failure and must be filtered out.
  -->
  <Target Name="RemoveDuplicateResolvedNuGetPackageAssets"
          AfterTargets="ResolveNuGetPackages">
    <RemoveDuplicates Inputs="@(ReferenceCopyLocalPaths)">
      <Output TaskParameter="Filtered" ItemName="FilteredReferenceCopyLocalPaths"/>
    </RemoveDuplicates>

    <ItemGroup>
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" />
      <ReferenceCopyLocalPaths Include="@(FilteredReferenceCopyLocalPaths)" />
    </ItemGroup>
  </Target>

  <!--
    Finds symbol files and injects them into the package build.
  -->
  <Target Name="GetSymbolPackageFiles" BeforeTargets="GetPackageFiles">
    <ItemGroup Condition="'$(SymbolFileExtension)' != ''">
      <AdditionalLibPackageExcludes Include="%2A%2A\%2A$(SymbolFileExtension)" />
    </ItemGroup>
    <ItemGroup Condition="'$(CrossGenSymbolExtension)' != ''">
      <AdditionalLibPackageExcludes Include="%2A%2A\%2A$(CrossGenSymbolExtension)" />
    </ItemGroup>

    <ItemGroup>
      <WindowsNativeFile Include="@(File)"
                         Condition="'%(File.Extension)' == '.dll' OR '%(File.Extension)' == '.exe'" />
      <!-- Don't include *.pdb for export libraries or headers -->
      <WindowsSymbolFile Include="@(File -> '%(RootDir)%(Directory)%(Filename).pdb')"
                         Condition="'%(File.Extension)' != '.lib' AND '%(File.Extension)' != '.h'" />
      <!-- Crossgened files (on windows) have both a *.pdb and a *.ni.pdb symbol file.  Include the *.ni.pdb file as well if it exists. -->
      <WindowsSymbolFile Include="@(File -> '%(RootDir)%(Directory)%(Filename).ni.pdb')" />
      <ExistingWindowsSymbolFile Include="@(WindowsSymbolFile)" Condition="Exists('%(Identity)')" />

      <NonWindowsNativeFile Include="@(File)"
                            Exclude="@(WindowsNativeFile)" />
      <NonWindowsSymbolFile Include="@(NonWindowsNativeFile -> '%(Identity)$(SymbolFileExtension)')" />
      <ExistingNonWindowsSymbolFile Include="@(NonWindowsSymbolFile)" Condition="Exists('%(Identity)')" />

      <!--
        These files might be directly redisted, and already in File. Duplicates cause validation
        errors, so don't add files that are already known.
      -->
      <DiscoveredSymbolFile
        Include="@(ExistingWindowsSymbolFile);@(ExistingNonWindowsSymbolFile)"
        IsSymbolFile="true" />
      
      <NormalizedFile Include="$([MSBuild]::NormalizePath('%(File.Identity)'))" />

      <File Include="@(DiscoveredSymbolFile)" Exclude="@(NormalizedFile)" />
    </ItemGroup>

    <PropertyGroup>
      <NeedsPlaceholderPdb Condition="'@(ExistingNonWindowsSymbolFile)' != '' and '@(ExistingWindowsSymbolFile)' == ''">true</NeedsPlaceholderPdb>
    </PropertyGroup>

    <ItemGroup>
      <File Include="$(MSBuildThisFileDirectory)../_.pdb"
            Condition="'$(NeedsPlaceholderPdb)' == 'true' AND '$(PackageTargetRuntime)' != ''">
        <TargetPath>runtimes/$(PackageTargetRuntime)/native</TargetPath>
        <IsSymbolFile>true</IsSymbolFile>
      </File>
    </ItemGroup>
  </Target>

  <Target Name="PreserveSymbols"
          AfterTargets="CreatePackage">
    <PropertyGroup>
      <_PackageSymbolsProjectDir>$(PackageSymbolsBinDir)$(MSBuildProjectName)/</_PackageSymbolsProjectDir>
    </PropertyGroup>
    <ItemGroup>
      <_SymbolsFiles Include="%(File.Identity)" Condition="'%(File.Extension)' == '.pdb' OR '%(File.Extension)' == '$(SymbolFileExtension)'">
        <DestinationFolder>$(_PackageSymbolsProjectDir)%(File.TargetPath)/</DestinationFolder>
      </_SymbolsFiles>
    </ItemGroup>
    <MakeDir Directories="%(_SymbolsFiles.DestinationFolder)" />
    <Copy SourceFiles="%(_SymbolsFiles.Identity)"
          DestinationFolder="%(_SymbolsFiles.DestinationFolder)" />
  </Target>

  <!-- override GetPackageIdentity so that it doesn't attempt to gather
       files from runtime dependencies,  this prevents folks from needing
       packages that don't apply to their local OS.
       https://github.com/dotnet/buildtools/issues/1273 -->
  <Target Name="GetPackageIdentity" Returns="@(_PackageIdentity)" DependsOnTargets="CalculatePackageVersion">
    <ItemGroup>
      <_PackageIdentity Include="$(Id)">
        <Version>$(PackageVersion)</Version>
        <TargetRuntime Condition="'$(PackageTargetRuntime)' != ''">$(PackageTargetRuntime)</TargetRuntime>
      </_PackageIdentity>
    </ItemGroup>
  </Target>

  <!-- override AssignPkgProjPackageDependenciesTargetFramework so that
       it doesn't attempt to resolve all files in order to get dependency
       TargetFrameworks.
       https://github.com/dotnet/buildtools/issues/1273 -->
  <Target Name="AssignPkgProjPackageDependenciesTargetFramework" DependsOnTargets="GetPkgProjPackageDependencies">
    <SplitDependenciesBySupport Condition="'$(SplitDependenciesBySupport)' == 'true'" OriginalDependencies="@(PkgProjDependency)">
      <Output TaskParameter="SplitDependencies" ItemName="_SplitPkgProjDependency" />
    </SplitDependenciesBySupport>
    <ItemGroup Condition="'@(_SplitPkgProjDependency)' != ''">
      <PkgProjDependency Remove="@(PkgProjDependency)" />
      <PkgProjDependency Include="@(_SplitPkgProjDependency)" />
    </ItemGroup>
    <ItemGroup>
      <!-- ensure that unconstrained dependencies are also expanded in constrained TFM groups -->
      <_PkgProjDependencyWithoutTFM Include="@(PkgProjDependency)" Condition="'%(PkgProjDependency.TargetFramework)' == '' AND '%(PkgProjDependency.TargetRuntime)' == '' AND '%(PkgProjDependency.DoNotExpand)' != 'true'" />
      <_AllPkgProjTFMs Include="%(PkgProjDependency.TargetFramework)" Condition="'%(PkgProjDependency.DependencyKind)' == 'Direct'" />
      <!-- Remove dependencies without a TFM so they can be replaced -->
      <PkgProjDependency Remove="@(_PkgProjDependencyWithoutTFM)" />
      <!-- operate on pkgproj dependencies and file dependencies -->
      <PkgProjDependency Include="@(_PkgProjDependencyWithoutTFM)">
        <TargetFramework>%(_AllPkgProjTFMs.Identity)</TargetFramework>
      </PkgProjDependency>
      <Dependency Include="@(PkgProjDependency)" Condition="'%(PkgProjDependency.DependencyKind)' == 'Direct'" />
    </ItemGroup>
  </Target>

  <Target Name="GetNonPkgProjDependenciesToPackage"
          Condition="'$(PackProjectDependencies)' == 'true'"
          AfterTargets="ExpandProjectReferences">
    <!-- allow projects to provide dependencies -->
    <MSBuild Targets="GetDependenciesToPackage"
             BuildInParallel="$(BuildInParallel)"
             Projects="@(_NonPkgProjProjectReference)"
             Properties="$(ProjectProperties)">
      <Output TaskParameter="TargetOutputs"
              ItemName="Dependency" />
    </MSBuild>
  </Target>

  <!--
    Creates the platform manifest and props file. Set properties "IncludePlatformManifestFile" and
    "IncludeFileVersionPropsFile" to true to include them, respectively.
  -->
  <Target Name="GenerateFileVersionProps">
    <PropertyGroup>
      <PropsFile>$(IntermediateOutputPath)$(MSBuildProjectName).props</PropsFile>
      <PlatformManifestFile>$(IntermediateOutputPath)$(MSBuildProjectName).PlatformManifest.txt</PlatformManifestFile>

      <!-- During an official build when we can guarantee that all RID-specific dependencies have been built,
          restore all of those dependencies and gather the prospective content of the RID-specific Core.App
          packages.  This is needed so that we have a complete platform manifest in the shipping version of
          the Microsoft.NETCore.App (RID-agnostic/identity package). -->
      <IncludeAllRuntimePackagesInPlatformManifest
        Condition="'$(IncludeAllRuntimePackagesInPlatformManifest)' == '' AND
                   '$(BuildFullPlatformManifest)' == 'true'">true</IncludeAllRuntimePackagesInPlatformManifest>
    </PropertyGroup>

    <MSBuild Projects="@(ProjectReference)"
             Condition="'%(ProjectReference.PackageTargetRuntime)' == '$(PackageRID)' OR
                        '%(ProjectReference.BuidOnRID)' == '$(PackageRID)' OR
                        ('$(IncludeAllRuntimePackagesInPlatformManifest)' == 'true' AND
                         '%(ProjectReference.PackageTargetRuntime)' != '' AND
                         '%(ProjectReference.ExcludeFromPlatformManifest)' != 'true')"
             Targets="GetPackageFiles">
      <Output TaskParameter="TargetOutputs" ItemName="SharedFrameworkRuntimeFiles" />
    </MSBuild>

    <!--
      Workaround: zero-versioned Microsoft.VisualBasic.dll in non-Windows CoreFX transport package.
      See https://github.com/dotnet/corefx/issues/36630
    -->
    <PropertyGroup Condition="'$(OSGroup)' != 'Windows_NT'">
      <PermitDllAndExeFilesLackingFileVersion>true</PermitDllAndExeFilesLackingFileVersion>
    </PropertyGroup>

    <GenerateFileVersionProps Files="@(SharedFrameworkRuntimeFiles)"
                              PackageId="$(Id)"
                              PackageVersion="$(Version)"
                              PlatformManifestFile="$(PlatformManifestFile)"
                              PropsFile="$(PropsFile)"
                              PreferredPackages="$(Id);@(RuntimeDependency)"
                              PermitDllAndExeFilesLackingFileVersion="$(PermitDllAndExeFilesLackingFileVersion)" />
  </Target>

  <Target Name="IncludeFileVersionPropsFile"
          DependsOnTargets="GenerateFileVersionProps"
          BeforeTargets="GetFiles"
          Condition="'$(PackageTargetRuntime)' == '' AND '$(FileVersionPropsTargetPath)' != ''">
    <ItemGroup>
      <File Include="$(PropsFile)">
        <TargetPath>$(FileVersionPropsTargetPath)</TargetPath>
      </File>
    </ItemGroup>
  </Target>

  <Target Name="IncludePlatformManifestFile"
          DependsOnTargets="GenerateFileVersionProps"
          BeforeTargets="GetFiles"
          Condition="'$(PackageTargetRuntime)' == '' AND '$(PlatformManifestTargetPath)' != ''">
    <ItemGroup>
      <File Include="$(PlatformManifestFile)">
        <TargetPath>$(PlatformManifestTargetPath)</TargetPath>
      </File>
    </ItemGroup>
  </Target>

  <Target Name="IncludeFrameworkListFile"
          BeforeTargets="GetFiles"
          Condition="'$(PackageTargetRuntime)' == '' AND '$(FrameworkListTargetPath)' != ''">
    <PropertyGroup>
      <FrameworkListFile>$(IntermediateOutputPath)FrameworkList.xml</FrameworkListFile>
    </PropertyGroup>

    <ItemGroup>
      <FrameworkListRootAttributes Include="Name" Value="$(FrameworkListName)" />
      <FrameworkListRootAttributes Include="TargetFrameworkIdentifier" Value="$(FrameworkListTargetFrameworkIdentifier)" />
      <FrameworkListRootAttributes Include="TargetFrameworkVersion" Value="$(FrameworkListTargetFrameworkVersion)" />
      <FrameworkListRootAttributes Include="FrameworkName" Value="$(FrameworkListFrameworkName)" />
    </ItemGroup>

    <Error
      Condition="'%(FrameworkListRootAttributes.Value)' == ''"
      Text="Missing value for property 'FrameworkList%(FrameworkListRootAttributes.Identity)'" />

    <CreateFrameworkListFile
      Files="@(File)"
      TargetFile="$(FrameworkListFile)"
      TargetFilePrefixes="ref/;runtimes/"
      RootAttributes="@(FrameworkListRootAttributes)" />

    <ItemGroup>
      <File Include="$(FrameworkListFile)">
        <TargetPath>$(FrameworkListTargetPath)</TargetPath>
      </File>
    </ItemGroup>
  </Target>

  <!--
    Get Project items: build the project, and build runtime packages if necessary. All projects in
    this directory are ProjectProviders.
  -->
  <Target Name="GetProjectsToBuild" Returns="@(Project)">
    <ItemGroup>
      <!-- The pkg and src builds both build these projects. Add them to both phases. -->
      <PkgSrcProject Include="@(RuntimeProject)" Condition="'$(BuildRuntimePackages)' == 'true'" />
      <PkgSrcProject Include="@(RidSpecificPackProject)" Condition="'$(BuildRidSpecificPacks)' == 'true'" />
      <PkgSrcProject Include="$(MSBuildProjectFullPath)" Condition="'$(BuildLineupPackage)' == 'true'"/>

      <Project Include="@(PkgSrcProject)" Phase="pkg" />
      <Project Include="@(PkgSrcProject)" Phase="src" />

      <!--
        Create framework pack non-nuget packages/installers. Similar to the runtime package, we only
        make one Debian or RPM package for all distros of that type.
      -->
      <Project
        Include="$(MSBuildProjectFullPath)"
        Phase="installer"
        Condition="
          '$(FrameworkPackType)' != '' AND
          '$(BuildDistroIndependentInstallers)' == 'true'" />
    </ItemGroup>

    <!-- Create shared framework and its installers. -->
    <ItemGroup Condition="'$(GenerateSharedFramework)' == 'true' AND '$(BuildDistroIndependentInstallers)' == 'true'">
      <Project Include="$(MSBuildProjectFullPath)" Phase="sharedfx" />
      <!--
        Currently any pkgproj is assumed to only build one type of installer, so there is no
        distinction between this Project and a targeting pack installer Project. Some
        AdditionalProperties may need to be added if this assumption doesn't hold up.
      -->
      <Project Include="$(MSBuildProjectFullPath)" Phase="installer" />
    </ItemGroup>
  </Target>

</Project>