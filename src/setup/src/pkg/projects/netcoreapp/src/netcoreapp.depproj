<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />

  <PropertyGroup>
    <FrameworkPackageName>Microsoft.NETCore.App</FrameworkPackageName>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Private.CoreFx.NETCoreApp">
      <Version>$(MicrosoftPrivateCoreFxNETCoreAppPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="transport.Microsoft.NETCore.Runtime.CoreCLR">
      <Version>$(MicrosoftNETCoreRuntimeCoreCLRPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.DiaSymReader.Native">
      <Version>$(MicrosoftDiaSymReaderNativePackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.Platforms">
      <Version>$(MicrosoftNETCorePlatformsPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.Targets">
      <Version>$(MicrosoftNETCoreTargetsPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="NETStandard.Library">
      <Version>$(NETStandardLibraryPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="$(MicrosoftTargetingPackPrivateWinRTPackage)" ExcludeAssets="All">
      <Version>$(MicrosoftTargetingPackPrivateWinRTPackageVersion)</Version>
    </PackageReference>
  </ItemGroup>

  <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' == ''">
    <!-- Bring in Platforms for RID graph, NETStandard.Library for build-tools,
         Targets for an empty runtime.json to reduce conflicts from 1.x packages -->
    <DependenciesToPackage Include="NETStandard.Library" />
    <DependenciesToPackage Include="Microsoft.NETCore.Platforms" />
    <DependenciesToPackage Include="Microsoft.NETCore.Targets" />
  </ItemGroup>

  <!-- get paths from packages that are needed for cross-gen and other includes,
       only relevant for runtime-specific builds -->
  <Target Name="GetPackagePaths" Condition="'$(NuGetRuntimeIdentifier)' != ''" DependsOnTargets="ResolveNuGetPackages">
    <ItemGroup  Condition="'$(NuGetRuntimeIdentifier)' != ''">
      <_runtimeCLR Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.FileName)%(ReferenceCopyLocalPaths.Extension)' == '$(LibraryFilePrefix)coreclr$(LibraryFileExtension)'" />
      <_runtimeCoreLib Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.FileName)%(ReferenceCopyLocalPaths.Extension)' == 'System.Private.CoreLib.dll'" />
      <_runtimeJIT Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.FileName)%(ReferenceCopyLocalPaths.Extension)' == '$(LibraryFilePrefix)clrjit$(LibraryFileExtension)'" />
      <_fxSystemRuntime Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.FileName)%(ReferenceCopyLocalPaths.Extension)' == 'System.Runtime.dll'" />

      <!-- Find Windows.winmd in package cache to allow ExcludeAssets=All. -->
      <_windowsWinMD Include="$(PackagesDir)$(MicrosoftTargetingPackPrivateWinRTPackage.ToLowerInvariant())/$(MicrosoftTargetingPackPrivateWinRTPackageVersion)/**/Windows.winmd" />
    </ItemGroup>

    <PropertyGroup>
      <_crossDir Condition="'$(TargetArchitecture)' == 'arm' AND '$(OS)' == 'Windows_NT'">/x86_arm</_crossDir>
      <_crossDir Condition="'$(TargetArchitecture)' == 'arm' AND '$(OS)' != 'Windows_NT'">/x64_arm</_crossDir>
      <_crossDir Condition="'$(TargetArchitecture)' == 'arm64'">/x64_arm64</_crossDir>
    </PropertyGroup>

    <PropertyGroup Condition="'@(_runtimeCLR)' != ''">
      <_runtimePackageId>%(_runtimeCLR.NuGetPackageId)</_runtimePackageId>
      <_runtimePackageVersion>%(_runtimeCLR.NuGetPackageVersion)</_runtimePackageVersion>
      <_runtimePackagePath>$(PackagesDir)/$(_runtimePackageId.ToLowerInvariant())/$(_runtimePackageVersion)</_runtimePackagePath>

      <_crossGenPath>$(_runtimePackagePath)/tools$(_crossDir)/crossgen$(ApplicationFileExtension)</_crossGenPath>
      <_runtimeDirectory>%(_runtimeCLR.RootDir)%(_runtimeCLR.Directory)</_runtimeDirectory>
    </PropertyGroup>

    <PropertyGroup Condition="'@(_runtimeCoreLib)' != ''">
      <_coreLibDirectory>%(_runtimeCoreLib.RootDir)%(_runtimeCoreLib.Directory)</_coreLibDirectory>
    </PropertyGroup>

    <PropertyGroup Condition="'@(_runtimeJIT)' != ''">
      <_jitPackageId>%(_runtimeJIT.NuGetPackageId)</_jitPackageId>
      <_jitPackageVersion>%(_runtimeJIT.NuGetPackageVersion)</_jitPackageVersion>
      <_jitPackagePath>$(PackagesDir)/$(_jitPackageId.ToLowerInvariant())/$(_jitPackageVersion)</_jitPackagePath>
      <_jitPath>%(_runtimeJIT.FullPath)</_jitPath>
      <_jitPath Condition="'$(_crossDir)' != ''">$(_jitPackagePath)/runtimes$(_crossDir)/native/$(LibraryFilePrefix)clrjit$(LibraryFileExtension)</_jitPath>
    </PropertyGroup>

    <PropertyGroup Condition="'@(_fxSystemRuntime)' != ''">
      <_fxLibDirectory>%(_fxSystemRuntime.RootDir)%(_fxSystemRuntime.Directory)</_fxLibDirectory>
    </PropertyGroup>

    <PropertyGroup Condition="'@(_windowsWinMD)' != ''">
      <_windowsWinMDDirectory>%(_windowsWinMD.RootDir)%(_windowsWinMD.Directory)</_windowsWinMDDirectory>
    </PropertyGroup>
    
    <ItemGroup>
      <_requiredProperty Include="_runtimePackagePath;_coreLibDirectory;_crossGenPath;_jitPath;_fxLibDirectory;_windowsWinMDDirectory" />
    </ItemGroup>

    <Message Text="%(_requiredProperty.Identity): $(%(_requiredProperty.Identity))" />
    <Error Condition="'$(%(_requiredProperty.Identity))' == ''" Text="Required property %(_requiredProperty.Identity) was not set." />
    <Error Condition="!Exists('$(%(_requiredProperty.Identity))')" Text="Required property %(_requiredProperty.Identity) with value '$(%(_requiredProperty.Identity))' does not exist." />
  </Target>

  <Target Name="GetDependencyVersionFiles" DependsOnTargets="GetPackagePaths;ResolveNuGetPackages">
    <ItemGroup>
      <_coreFxVersionFile
        Include="$(PackagesDir)$([System.String]::new('%(Reference.NuGetPackageId)').ToLowerInvariant())/%(Reference.NuGetPackageVersion)/version.txt"
        Condition="$([System.String]::new('%(Reference.Identity)').ToLowerInvariant().Contains('system.runtime.dll'))"
        Name="corefx" />
      <_coreClrVersionFile
        Include="$(_runtimePackagePath)/version.txt"
        Condition="'$(NuGetRuntimeIdentifier)' != ''"
        Name="coreclr" />

      <DependencyVersionFile Include="@(_coreFxVersionFile);@(_coreClrVersionFile)" />
    </ItemGroup>

    <Error
      Condition="'@(_coreFxVersionFile)' == ''"
      Text="Failed to locate corefx version.txt file." />

    <Error
      Condition="'@(_coreClrVersionFile)' == '' AND '$(NuGetRuntimeIdentifier)' != ''"
      Text="Failed to locate coreclr version.txt file." />
  </Target>

  <!-- Fetches all the runtime items from the packages that we want to redist -->
  <Target Name="GetRuntimeFilesFromPackages" DependsOnTargets="GetPackagePaths">
    <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' != ''">
      <_ToolsToPackage Include="$(_runtimePackagePath)/tools/**/*.*"/>
      <FilesToPackage Include="@(_ToolsToPackage)">
        <NuGetPackageId>$(_runtimePackageId)</NuGetPackageId>
        <TargetPath>tools/%(RecursiveDir)</TargetPath>
        <IsNative>true</IsNative>
      </FilesToPackage>
      <FilesToPackage Condition="'$(_crossDir)' != ''" Include="$(_jitPackagePath)/runtimes$(_crossDir)/native/*.*">
        <TargetPath>runtimes$(_crossDir)/native</TargetPath>
        <IsNative>true</IsNative>
      </FilesToPackage>
    </ItemGroup>
  </Target>

  <!-- Prepares all items for cross-gen and replaces package file items with their cross-gen'ed equivalents -->
  <Target Name="PrepareForCrossGen" Condition="'$(NuGetRuntimeIdentifier)' != '' AND '$(DisableCrossgen)' != 'true'" DependsOnTargets="GetFilesFromPackages">
    <PropertyGroup>
      <_crossGenIntermediatePath>$(IntermediateOutputPath)/crossgen</_crossGenIntermediatePath>
    </PropertyGroup>
    <!-- Ensure crossgen is executable.  See https://github.com/NuGet/Home/issues/4424 -->
    <Exec Command="chmod u+x $(_crossGenPath)"
          Condition="'$(OSGroup)' != 'Windows_NT'" />
    <ItemGroup>
      <!-- Exclude run crossgen on System.Runtime.WindowsRuntime for non-Windows due to System.Runtime.WindowsRuntime.dll for non-Windows only throw NotSupported Exception  -->
      <!-- Also crossgen on non-windows doesn't support -Platform_Winmd_Paths -->
      <_filesToCrossGen Include="@(FilesToPackage)"
                        Condition="'%(FilesToPackage.IsNative)' != 'true' AND '%(FileName)' != 'System.Private.CoreLib' AND '%(FileName)' != 'mscorlib' AND '%(Extension)' == '.dll' AND ('%(FileName)' != 'System.Runtime.WindowsRuntime' Or '$(OsEnvironment)'=='Windows_NT')">
        <CrossGenedDirectory>$(CrossGenOutputPath)/%(TargetPath)/</CrossGenedDirectory>
        <CrossGenedPath>$(CrossGenOutputPath)/%(TargetPath)/%(FileName)%(Extension)</CrossGenedPath>
        <CrossGenSymbolSemaphorePath>$(_crossGenIntermediatePath)/%(FileName).symbol.semaphore</CrossGenSymbolSemaphorePath>
      </_filesToCrossGen>

      <FilesToPackage Remove="@(_filesToCrossGen)" />

      <_crossGenedFilesToPackage Include="@(_filesToCrossGen->'%(CrossGenedPath)')" />
      <FilesToPackage Include="@(_crossGenedFilesToPackage)" />
    </ItemGroup>

    <ItemGroup>
      <!-- the following path *must* be passed to crossgen as it has the CoreLib.ni.dll, it will not use the IL copy. -->
      <_crossgenPlatformDirectories Include="$(_runtimeDirectory)" />
      <!-- the following need not be passed to crossgen but we do so to be safe. -->
      <_crossgenPlatformDirectories Include="$(_coreLibDirectory)" />
      <!-- the following path must be passed to crossgen to locate all dependencies. -->
      <_crossgenPlatformDirectories Include="%(_filesToCrossGen.RootDir)%(_filesToCrossGen.Directory)" />
    </ItemGroup>

    <PropertyGroup>
      <!-- Use PathSeparator so that we get a ':' on unix and ';' on windows
           Escape the value so that the ';' doesn't result multiple lines when writing to the RSP file -->
      <_pathSeparatorEscaped>$([MSBuild]::Escape($([System.IO.Path]::PathSeparator.ToString())))</_pathSeparatorEscaped>
      <_crossgenPlatformAssemblies>@(_crossgenPlatformDirectories->'%(Identity)', '$(_pathSeparatorEscaped)')</_crossgenPlatformAssemblies>
    </PropertyGroup>
  </Target>

  <Target Name="CrossGen"
          BeforeTargets="Build"
          DependsOnTargets="CreateCrossGenImages;CreateCrossGenSymbols" />

  <Target Name="CreateCrossGenImages"
          DependsOnTargets="PrepareForCrossGen"
          Inputs="@(_filesToCrossGen)"
          Outputs="%(_filesToCrossGen.CrossGenedPath)">
    <PropertyGroup>
      <_crossGenResponseFile>$(_crossGenIntermediatePath)/%(_filesToCrossGen.FileName).rsp</_crossGenResponseFile>
    </PropertyGroup>
    <ItemGroup>
      <_crossGenArgs Include="-readytorun" />
      <_crossGenArgs Include="-in %(_filesToCrossGen.FullPath)" />
      <_crossGenArgs Include="-out %(_filesToCrossGen.CrossGenedPath)" />
      <_crossGenArgs Include="-platform_assemblies_paths $(_crossgenPlatformAssemblies)" />
      <_crossGenArgs Include="-Platform_Winmd_Paths $(_windowsWinMDDirectory)" Condition="'$(OsEnvironment)'=='Windows_NT'" />
      <_crossGenArgs Include="-JITPath $(_jitPath)" />
    </ItemGroup>

    <PropertyGroup>
      <_partialCrossgenFlag>0</_partialCrossgenFlag>
    </PropertyGroup>

    <!-- Measurements show that doing partial crossgen on these assemblies captures a lot of the potential size saving. -->
    <PropertyGroup Condition="'$(OSGroup)' == 'Linux'">
      <_partialCrossgenFlag Condition="'%(_filesToCrossGen.FileName)' == 'System.ComponentModel.TypeConverter'">1</_partialCrossgenFlag>
      <_partialCrossgenFlag Condition="'%(_filesToCrossGen.FileName)' == 'System.Linq.Expressions'">1</_partialCrossgenFlag>
      <_partialCrossgenFlag Condition="'%(_filesToCrossGen.FileName)' == 'System.Private.DataContractSerialization'">1</_partialCrossgenFlag>
      <_partialCrossgenFlag Condition="'%(_filesToCrossGen.FileName)' == 'System.Private.Xml'">1</_partialCrossgenFlag>
    </PropertyGroup>

    <MakeDir Directories="$(_crossGenIntermediatePath)" />
    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(_filesToCrossGen.CrossGenedPath)'))" />
    <WriteLinesToFile File="$(_crossGenResponseFile)" Lines="@(_crossGenArgs)" Overwrite="true" />

    <Exec Command="$(_crossGenPath) @$(_crossGenResponseFile)" WorkingDirectory="$(_clrDirectory)" EnvironmentVariables="COMPlus_PartialNGen=$(_partialCrossgenFlag)" />
  </Target>

  <Target Name="CreateCrossGenSymbols"
          Condition="'$(CrossGenSymbolExtension)' != ''"
          DependsOnTargets="CreateCrossGenImages"
          Inputs="%(_filesToCrossGen.CrossGenedPath)"
          Outputs="%(_filesToCrossGen.CrossGenSymbolSemaphorePath)">
    <PropertyGroup>
      <_crossGenSymbolsResponseFile>$(_crossGenIntermediatePath)/%(_filesToCrossGen.FileName).symbols.rsp</_crossGenSymbolsResponseFile>
      <_crossGenSymbolsOptionName Condition="'$(OS)' == 'Windows_NT'">CreatePDB</_crossGenSymbolsOptionName>
      <_crossGenSymbolsOptionName Condition="'$(_crossGenSymbolsOptionName)' == ''">CreatePerfMap</_crossGenSymbolsOptionName>
      <_crossGenSymbolsOutputDirectory>$(CrossGenSymbolsOutputPath)/%(_filesToCrossGen.TargetPath)</_crossGenSymbolsOutputDirectory>
    </PropertyGroup>

    <ItemGroup>
      <_crossGenSymbolsArgs Include="-readytorun" />
      <_crossGenSymbolsArgs Include="-platform_assemblies_paths %(_filesToCrossGen.CrossGenedDirectory)$(_pathSeparatorEscaped)$(_coreLibDirectory)$(_pathSeparatorEscaped)$(_fxLibDirectory)" />
      <_crossGenSymbolsArgs Include="-Platform_Winmd_Paths $(_windowsWinMDDirectory)" Condition="'$(OsEnvironment)'=='Windows_NT'"/>
      <_crossGenSymbolsArgs Include="-$(_crossGenSymbolsOptionName)" />
      <_crossGenSymbolsArgs Include="$(_crossGenSymbolsOutputDirectory)" />
      <_crossGenSymbolsArgs Include="%(_filesToCrossGen.CrossGenedPath)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_crossGenSymbolsResponseFile)" Lines="@(_crossGenSymbolsArgs)" Overwrite="true" />

    <MakeDir Directories="$(_crossGenSymbolsOutputDirectory)" />

    <Exec Command="$(_crossGenPath) @$(_crossGenSymbolsResponseFile)" WorkingDirectory="$(_clrDirectory)" EnvironmentVariables="COMPlus_PartialNGen=0" />

    <Touch Files="%(_filesToCrossGen.CrossGenSymbolSemaphorePath)" AlwaysCreate="true" />
  </Target>

  <!--
    Note this target should not build anything since it will run during packaging, so it
    cannot depend on CreateCrossGenSymbols.  It assumes that this project has already
    gotten "Build" called on it to generate the symbol files.
  -->
  <Target Name="GetCrossGenSymbolsFiles"
          Condition="'$(CrossGenSymbolExtension)' != ''">
    <ItemGroup>
      <FilesToPackage Include="$(CrossGenSymbolsOutputPath)/**/*$(CrossGenSymbolExtension)">
        <IsSymbolFile>true</IsSymbolFile>
        <TargetPath>runtimes/$(NuGetRuntimeIdentifier)/lib/$(PackageTargetFramework)</TargetPath>
      </FilesToPackage>
    </ItemGroup>
  </Target>

  <Target Name="GetRuntimeFilesToPackage"
          BeforeTargets="GetFilesToPackage"
          DependsOnTargets="GetRuntimeFilesFromPackages;PrepareForCrossGen;GetCrossGenSymbolsFiles">
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />
</Project>
