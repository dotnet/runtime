<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />

  <PropertyGroup>
    <PackageType>Data</PackageType>
    <Version>$(SharedFrameworkNugetVersion)</Version>
    <OmitDependencies>true</OmitDependencies>
    <SkipValidatePackage>true</SkipValidatePackage>

    <!-- Include the platform manifest in the data dir. -->
    <PlatformManifestTargetPath>data/PlatformManifest.txt</PlatformManifestTargetPath>
    <FrameworkListTargetPath>data/</FrameworkListTargetPath>

    <!-- Exclude runtime.json from the package. -->
    <IncludeRuntimeJson>false</IncludeRuntimeJson>
    <IsLineupPackage>false</IsLineupPackage>

    <!-- Remove package dependencies. -->
    <ExcludeLineupReference>true</ExcludeLineupReference>
    <PackProjectDependencies>false</PackProjectDependencies>

    <!-- Location to lay out data/ dir. Used later to create installers. -->
    <DataLayoutDir>$(IntermediateOutputPath)layout/</DataLayoutDir>
  </PropertyGroup>

  <!-- Redistribute package content from other nuget packages. -->
  <ItemGroup>
    <ProjectReference Include="..\Microsoft.NETCore.App\src\Microsoft.NETCore.App.depproj" />
  </ItemGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />

  <Target Name="GetPackageReport" />

  <Target Name="MoveRefToData"
          AfterTargets="ExpandProjectReferences">
    <ItemGroup>
      <!-- Move all refs into the data dir. Leave files like LICENSE.TXT in the root. -->
      <File
        Condition="$([System.String]::new('%(File.TargetPath)').StartsWith('ref'))"
        TargetPath="data/" />
    </ItemGroup>
  </Target>

  <!--
    Copy the files in the package's data/ dir to a layout directory. This is what the targeting pack
    installer will place in the dotnet install dir.

    This extracts from the nupkg (zip) directly. An alternative would be using the PackageFile
    items, but there's some risk of handling TargetPath metadata differently than NuGet does. Using
    the nupkg directly ensures results are identical.
  -->
  <Target Name="CreateTargetingPackLayout"
          AfterTargets="CreatePackage">
    <PropertyGroup>
      <TargetingPackNupkgFile>$(PackageOutputPath)$(Id).$(PackageVersion).nupkg</TargetingPackNupkgFile>
    </PropertyGroup>

    <ZipFileGetEntries TargetArchive="$(TargetingPackNupkgFile)">
      <Output TaskParameter="Entries" ItemName="TargetingPackNupkgEntries" />
    </ZipFileGetEntries>

    <ItemGroup>
      <TargetingPackDataEntries
        Include="@(TargetingPackNupkgEntries)"
        Condition="$([System.String]::new('%(TargetingPackNupkgEntries.Identity)').StartsWith('data/'))" />
    </ItemGroup>

    <ZipFileExtractToDirectory
      SourceArchive="$(TargetingPackNupkgFile)"
      DestinationDirectory="$(DataLayoutDir)packs/$(Id)/$(Version)/"
      OverwriteDestination="true"
      Include="@(TargetingPackDataEntries)" />
  </Target>

</Project>
