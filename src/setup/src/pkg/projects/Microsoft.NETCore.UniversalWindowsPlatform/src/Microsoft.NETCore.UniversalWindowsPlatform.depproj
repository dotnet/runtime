<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />
  <PropertyGroup>
    <!-- we intentionally don't want to produce output -->
    <OutputPath>unused</OutputPath>
    <!-- we don't want any analyzers by ResolveNuGetPackageAssets
         null-refs when this isn't set and an analyzer is in the packages -->
    <Language>unused</Language>
    <NuGetTargetMoniker>$(UAPvNextTFMFull)</NuGetTargetMoniker>
    <NuGetTargetMonikerShort>$(UAPvNextTFM)</NuGetTargetMonikerShort>
    <PackageTargetFramework>$(UAPvNextTFM)</PackageTargetFramework>
    <PrimaryPackage>Microsoft.Private.CoreFx.UAP</PrimaryPackage>
    <ContainsPackageReferences>true</ContainsPackageReferences>
    <RestorePackages>true</RestorePackages>
    <RidSpecificAssets Condition="'$(NuGetRuntimeIdentifier)' != ''">true</RidSpecificAssets>
    <IntermediateOutputPath>$(IntermediateOutputPath)$(NuGetRuntimeIdentifier)</IntermediateOutputPath>
    <RestoreOutputPath>$(IntermediateOutputPath)</RestoreOutputPath>
    <AdditionalRestoreArgs>/p:HasRuntimePackages=false /p:IntermediateOutputPath=$(IntermediateOutputPath)</AdditionalRestoreArgs>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Net.Native.Compiler">
      <Version>$(MicrosoftNetNativeCompilerPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.Private.CoreFx.UAP">
      <Version>$(MicrosoftPrivateCoreFxUAPPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.Platforms">
      <Version>$(MicrosoftNETCorePlatformsPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="NETStandard.Library">
      <Version>$(NETStandardLibraryPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="System.ServiceModel.Duplex">
      <Version>$(SystemServiceModelDuplexPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="System.ServiceModel.Http">
      <Version>$(SystemServiceModelHttpPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="System.ServiceModel.NetTcp">
      <Version>$(SystemServiceModelNetTcpPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="System.ServiceModel.Primitives">
      <Version>$(SystemServiceModelPrimitivesPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="System.ServiceModel.Security">
      <Version>$(SystemServiceModelSecurityPackageVersion)</Version>
    </PackageReference>
  </ItemGroup>

  <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' == ''">
    <!-- Bring in Platforms for RID graph, NETStandard.Library for build-tools,
         Targets for an empty runtime.json to reduce conflicts from 1.x packages,
         and toolset. -->
    <DependenciesToPackage Include="NETStandard.Library" />
    <DependenciesToPackage Include="Microsoft.NETCore.Platforms" />
    <DependenciesToPackage Include="Microsoft.NETCore.Targets" />
    <DependenciesToPackage Include="Microsoft.Net.Native.Compiler" />
  </ItemGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />

  <Target Name="GetFilesToPackage" DependsOnTargets="ResolveNuGetPackages" Returns="@(FilesToPackage)">
    <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' != ''">
      <!-- RID-specific: include all runtime files -->
      <_FilesToPackage Include="@(ReferenceCopyLocalPaths)">
        <!-- ResolveNugetPackageAssets doesn't preserve the asset type (native),
             calculate it by looking for native in the path -->
        <IsNative Condition="$([System.String]::new('%(Identity)').ToLowerInvariant().Replace('\', '/').Contains('/native/'))">true</IsNative>
        <!-- We previously shipped a clrcompression on the lib folder, so we need to flag it as native in here -->
        <IsNative Condition="'%(FileName)%(Extension)' == 'clrcompression.dll'">true</IsNative>
      </_FilesToPackage>
      <_FilesToPackage>
        <TargetPath Condition="'%(_FilesToPackage.IsNative)' != 'true'">runtimes/$(NuGetRuntimeIdentifier)/lib/$(PackageTargetFramework)</TargetPath>
        <TargetPath Condition="'%(_FilesToPackage.IsNative)' == 'true'">runtimes/$(NuGetRuntimeIdentifier)/nativeassets/$(PackageTargetFramework)</TargetPath>
      </_FilesToPackage>
    </ItemGroup>

    <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' == ''">
      <!-- Not RID-specific: include all reference files -->
      <_FilesToPackage Include="@(Reference)">
        <TargetPath>ref/$(PackageTargetFramework)</TargetPath>
      </_FilesToPackage>
    </ItemGroup>

    <ItemGroup>
      <!-- add metadata for source and package -->
      <_FilesToPackage>
        <SourcePath>%(Identity)</SourcePath>
        <PackagePath>%(TargetPath)/%(FileName)%(Extension)</PackagePath>
      </_FilesToPackage>

      <!-- transform to package path for deduping -->
      <_primaryFilesByPackagePath Include="@(_FilesToPackage->'%(PackagePath)')" Condition="$([System.String]::new('%(NuGetPackageId)').EndsWith('$(PrimaryPackage)'))"/>
      <_secondaryFilesByPackagePath Include="@(_FilesToPackage->'%(PackagePath)')" Condition="!$([System.String]::new('%(NuGetPackageId)').EndsWith('$(PrimaryPackage)'))"/>

      <!-- remove any secondary files with same package path as primary files -->
      <_secondaryFilesByPackagePath Remove="@(_primaryFilesByPackagePath)" />

      <_filesByPackagePath Include="@(_primaryFilesByPackagePath);@(_secondaryFilesByPackagePath)" />

      <!-- transform back to source -->
      <FilesToPackage Include="@(_filesByPackagePath->'%(SourcePath)')" />
    </ItemGroup>

    <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' == ''">
      <!-- include all docs files -->
      <_docFilesToPackage Include="%(FilesToPackage.RootDir)%(FilesToPackage.Directory)**\%(FilesToPackage.FileName).xml" />

      <FilesToPackage Include="@(_docFilesToPackage)">
        <TargetPath>ref/$(PackageTargetFramework)/%(RecursiveDir)</TargetPath>
      </FilesToPackage>
    </ItemGroup>

    <!-- simple check to make sure we don't accidentally pull an old
         package that should have been merged to the primary package -->
    <ItemGroup>
      <PermittedSystemPackages Include="System.ServiceModel.Duplex" />
      <PermittedSystemPackages Include="System.ServiceModel.Http" />
      <PermittedSystemPackages Include="System.ServiceModel.NetTcp" />
      <PermittedSystemPackages Include="System.ServiceModel.Primitives" />
      <PermittedSystemPackages Include="System.ServiceModel.Security" />
      <PermittedSystemPackages Include="System.Private.ServiceModel" />
      <_secondarySystemPackages Include="@(_secondaryFilesByPackagePath->'%(NuGetPackageId)')"
                                Condition="$([System.String]::new('%(NuGetPackageId)').Contains('System.'))" />
      <_secondarySystemPackages Remove="@(PermittedSystemPackages)" />
    </ItemGroup>
    <Error Text="Unexpected System package(s) @(_secondarySystemPackages)" Condition="'@(_secondarySystemPackages)' != ''" />

    <ItemGroup Condition="'$(IncludeSourceFilesInPackage)' == 'true'">
      <!-- pick up any src our sources directory from packages contributing files -->
      <_sourcePathCandidate Include="@(FilesToPackage->'$(PackagesDir)\%(NuGetPackageId)\%(NuGetPackageVersion)\sources')" />
      <_sourcePathCandidate Include="@(FilesToPackage->'$(PackagesDir)\%(NuGetPackageId)\%(NuGetPackageVersion)\src')" />
      <_sourcePath Include="@(_sourcePathCandidate)" Condition="Exists('%(Identity)')" />
    </ItemGroup>

    <!-- on windows workaround max-path -->
    <!-- this can be removed once we build on core MSBuild which supports long paths. -->
    <ItemGroup Condition="'$(OsEnvironment)'=='Windows_NT'">
      <!-- choose a shorter path name, excluding package version -->
      <_shortSourcePath Include="@(_sourcePath->'$(ObjDir.Replace('/', '\'))src-%(NuGetPackageId)')">
        <Original>%(_sourcePath.FullPath)</Original>
      </_shortSourcePath>
      <_sourcePath Remove="@(_sourcePath)" />
      <_sourcePath Include="@(_shortSourcePath)" />
    </ItemGroup>
    <RemoveDir Condition="'@(_shortSourcePath)' != '' AND Exists('%(_shortSourcePath.Identity)')" Directories="%(_shortSourcePath.Identity)" />
    <Exec Condition="'@(_shortSourcePath)' != ''" Command="mklink /J %(_shortSourcePath.Identity) %(_shortSourcePath.Original)" />

    <ItemGroup>
      <FilesToPackage Include="%(_sourcePath.Identity)\%2A%2A\%2A.%2A">
        <TargetPath>src</TargetPath>
        <IsSourceCodeFile>true</IsSourceCodeFile>
      </FilesToPackage>
    </ItemGroup>
  </Target>

  <Target Name="GetDependenciesToPackage" Condition="'@(DependenciesToPackage)' != ''" DependsOnTargets="ResolveNuGetPackages" Returns="@(_DependenciesToPackageWithVersion)">
    <ItemGroup>
      <!-- intersect ReferencedPackage with DependenciesToPackage -->
      <_DependenciesToPackageWithVersion Include="@(PackageReference)" Condition="'@(PackageReference)' == '@(DependenciesToPackage)' AND '%(Identity)' != ''">
        <TargetFramework>$(PackageTargetFramework)</TargetFramework>
      </_DependenciesToPackageWithVersion>
    </ItemGroup>

    <Message Importance="low" Text="%(_DependenciesToPackageWithVersion.Identity) : %(_DependenciesToPackageWithVersion.Version) : %(_DependenciesToPackageWithVersion.TargetFramework)" />
  </Target>

  <!-- only calculate paths from this project, don't copy -->
  <Target Name="Build" DependsOnTargets="GetFilesToPackage" />

  <!-- remove when fixing https://github.com/dotnet/buildtools/issues/1273 -->
  <Target Name="DetermineRuntimeDependencies" />
</Project>
