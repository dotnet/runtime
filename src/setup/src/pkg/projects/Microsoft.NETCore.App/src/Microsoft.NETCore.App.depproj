<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />
  <PropertyGroup>
    <!-- we intentionally don't want to produce output -->
    <OutputPath>unused</OutputPath>
    <!-- we don't want any analyzers by ResolveNuGetPackageAssets
         null-refs when this isn't set and an analyzer is in the packages -->
    <Language>unused</Language>
    <NuGetTargetMoniker>.NETCoreApp,Version=v2.1</NuGetTargetMoniker>
    <NuGetTargetMonikerShort>netcoreapp2.1</NuGetTargetMonikerShort>
    <PackageTargetFramework>netcoreapp2.1</PackageTargetFramework>
    <PrimaryPackage>Microsoft.Private.CoreFx.NETCoreApp</PrimaryPackage>
    <CrossGenOutputPath>$(CrossGenRootPath)/$(MSBuildProjectName)/$(NuGetRuntimeIdentifier)</CrossGenOutputPath>
    <ContainsPackageReferences>true</ContainsPackageReferences>
    <RestorePackages>true</RestorePackages>
    <RidSpecificAssets Condition="'$(NuGetRuntimeIdentifier)' != ''">true</RidSpecificAssets>
    <IntermediateOutputPath>$(IntermediateOutputPath)$(NuGetRuntimeIdentifier)</IntermediateOutputPath>
    <RestoreOutputPath>$(IntermediateOutputPath)</RestoreOutputPath>
    <AdditionalRestoreArgs>/p:HasRuntimePackages=false /p:IntermediateOutputPath=$(IntermediateOutputPath)</AdditionalRestoreArgs>
    <CrossGenSymbolsOutputPath>$(PackageSymbolsBinDir)/$(MSBuildProjectName)</CrossGenSymbolsOutputPath>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Private.CoreFx.NETCoreApp">
      <Version>$(MicrosoftPrivateCoreFxNETCoreAppPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="transport.Microsoft.NETCore.Runtime.CoreCLR">
      <Version>$(MicrosoftNETCoreRuntimeCoreCLRPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.DiaSymReader.Native">
      <Version>$(MicrosoftDiaSymReaderNativePackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.Platforms">
      <Version>$(MicrosoftNETCorePlatformsPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="NETStandard.Library">
      <Version>$(NETStandardLibraryPackageVersion)</Version>
    </PackageReference>
  </ItemGroup>

  <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' == ''">
    <!-- Bring in Platforms for RID graph, NETStandard.Library for build-tools,
         Targets for an empty runtime.json to reduce conflicts from 1.x packages -->
    <DependenciesToPackage Include="NETStandard.Library" />
    <DependenciesToPackage Include="Microsoft.NETCore.Platforms" />
    <DependenciesToPackage Include="Microsoft.NETCore.Targets" />
  </ItemGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />

  <!-- get paths from packages that are needed for cross-gen and other includes,
       only relevant for runtime-specific builds -->
  <Target Name="GetPackagePaths" Condition="'$(NuGetRuntimeIdentifier)' != ''" DependsOnTargets="ResolveNuGetPackages">
    <ItemGroup  Condition="'$(NuGetRuntimeIdentifier)' != ''">
      <_runtimeCLR Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.FileName)%(ReferenceCopyLocalPaths.Extension)' == '$(LibraryFilePrefix)coreclr$(LibraryFileExtension)'" />
      <_runtimeCoreLib Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.FileName)%(ReferenceCopyLocalPaths.Extension)' == 'System.Private.CoreLib.dll'" />
      <_runtimeJIT Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.FileName)%(ReferenceCopyLocalPaths.Extension)' == '$(LibraryFilePrefix)clrjit$(LibraryFileExtension)'" />
      <_fxSystemRuntime Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.FileName)%(ReferenceCopyLocalPaths.Extension)' == 'System.Runtime.dll'" />
    </ItemGroup>

    <PropertyGroup>
      <_crossDir Condition="'$(NuGetRuntimeIdentifier)' == 'win8-arm' or '$(NuGetRuntimeIdentifier)' == 'win-arm'">/x86_arm</_crossDir>
      <_crossDir Condition="'$(NuGetRuntimeIdentifier)' == 'win10-arm64' or '$(NuGetRuntimeIdentifier)' == 'win-arm64'">/x64_arm64</_crossDir>
    </PropertyGroup>

    <PropertyGroup Condition="'@(_runtimeCLR)' != ''">
      <_runtimePackageId>%(_runtimeCLR.NuGetPackageId)</_runtimePackageId>
      <_runtimePackageVersion>%(_runtimeCLR.NuGetPackageVersion)</_runtimePackageVersion>
      <_runtimePackagePath>$(PackagesDir)/$(_runtimePackageId.ToLowerInvariant())/$(_runtimePackageVersion)</_runtimePackagePath>

      <_crossGenPath>$(_runtimePackagePath)/tools$(_crossDir)/crossgen$(ApplicationFileExtension)</_crossGenPath>
      <_runtimeDirectory>%(_runtimeCLR.RootDir)%(_runtimeCLR.Directory)</_runtimeDirectory>
    </PropertyGroup>

    <PropertyGroup Condition="'@(_runtimeCoreLib)' != ''">
      <_coreLibDirectory>%(_runtimeCoreLib.RootDir)%(_runtimeCoreLib.Directory)</_coreLibDirectory>
    </PropertyGroup>

    <PropertyGroup Condition="'@(_runtimeJIT)' != ''">
      <_jitPackageId>%(_runtimeJIT.NuGetPackageId)</_jitPackageId>
      <_jitPackageVersion>%(_runtimeJIT.NuGetPackageVersion)</_jitPackageVersion>
      <_jitPackagePath>$(PackagesDir)/$(_jitPackageId.ToLowerInvariant())/$(_jitPackageVersion)</_jitPackagePath>
      <_jitPath>%(_runtimeJIT.FullPath)</_jitPath>
      <_jitPath Condition="'$(_crossDir)' != ''">$(_jitPackagePath)/runtimes$(_crossDir)/native/$(LibraryFilePrefix)clrjit$(LibraryFileExtension)</_jitPath>
    </PropertyGroup>

    <PropertyGroup Condition="'@(_fxSystemRuntime)' != ''">
      <_fxLibDirectory>%(_fxSystemRuntime.RootDir)%(_fxSystemRuntime.Directory)</_fxLibDirectory>
    </PropertyGroup>

    <ItemGroup>
      <_requiredProperty Include="_runtimePackagePath;_coreLibDirectory;_crossGenPath;_jitPath;_fxLibDirectory" />
    </ItemGroup>

    <Message Text="%(_requiredProperty.Identity): $(%(_requiredProperty.Identity))" />
    <Error Condition="'$(%(_requiredProperty.Identity))' == ''" Text="Required property %(_requiredProperty.Identity) was not set." />
    <Error Condition="!Exists('$(%(_requiredProperty.Identity))')" Text="Required property %(_requiredProperty.Identity) with value '$(%(_requiredProperty.Identity))' does not exist." />
  </Target>

  <Target Name="GenerateHashVersionsFile" DependsOnTargets="GetPackagePaths;ResolveNuGetPackages">
    <PropertyGroup>
      <CoreFxVersionFile
        Condition="$([System.String]::new('%(Reference.Identity)').ToLowerInvariant().Contains('system.runtime.dll'))">
          $(PackagesDir)$([System.String]::new('%(Reference.NuGetPackageId)').ToLowerInvariant())/%(Reference.NuGetPackageVersion)/version.txt
      </CoreFxVersionFile>
      <CoreClrVersionFile Condition="'$(NuGetRuntimeIdentifier)' != ''">
          $(_runtimePackagePath)/version.txt
      </CoreClrVersionFile>
    </PropertyGroup>
    <ReadLinesFromFile File="$(CoreFxVersionFile)" Condition="Exists('$(CoreFxVersionFile)')">
      <Output TaskParameter="Lines" PropertyName="CoreFxHash" />
    </ReadLinesFromFile>
    <ReadLinesFromFile File="$(CoreClrVersionFile)" Condition="Exists('$(CoreClrVersionFile)')">
      <Output TaskParameter="Lines" PropertyName="CoreClrHash" />
    </ReadLinesFromFile>

    <Error Condition="!Exists('$(CoreFxVersionFile)')" Text="Failed to find the corefx version.txt file at $(CoreFxVersionFile)" />

    <ItemGroup>
      <_VersionsFileLines Include="core-setup $(LatestCommit)" />
      <_VersionsFileLines Include="corefx $(CoreFxHash)" />
      <_VersionsFileLines Include="dotnet/versions/corefx $(CoreFxCurrentRef)" />
      <_VersionsFileLines Include="coreclr $(CoreClrHash)" Condition="'$(CoreClrHash)'!=''" />
      <_VersionsFileLines Include="dotnet/versions/coreclr $(CoreClrCurrentRef)" Condition="'$(CoreClrHash)'!=''" />
    </ItemGroup>

    <WriteLinesToFile Lines="@(_VersionsFileLines)"
                       File="$(IntermediateOutputPath)\Microsoft.NETCore.App.versions.txt"
                       Overwrite="true"/>
  </Target>

  <!-- Fetches all the file items from the packages that we want to redist -->
  <Target Name="GetFilesFromPackages" DependsOnTargets="GetPackagePaths">
    <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' != ''">
      <!-- RID-specific: include all runtime files -->
      <FilesToPackage Include="@(ReferenceCopyLocalPaths)">
        <!-- ResolveNugetPackageAssets doesn't preserve the asset type (native),
             calculate it by looking for native in the path -->
        <IsNative Condition="$([System.String]::new('%(Identity)').ToLowerInvariant().Replace('\', '/').Contains('/native/'))">true</IsNative>
      </FilesToPackage>
      <FilesToPackage>
        <TargetPath Condition="'%(FilesToPackage.IsNative)' != 'true'">runtimes/$(NuGetRuntimeIdentifier)/lib/$(PackageTargetFramework)</TargetPath>
        <TargetPath Condition="'%(FilesToPackage.IsNative)' == 'true'">runtimes/$(NuGetRuntimeIdentifier)/native</TargetPath>
      </FilesToPackage>
      <FilesToPackage Include="$(_runtimePackagePath)/tools/*.*">
        <NuGetPackageId>$(_runtimePackageId)</NuGetPackageId>
        <TargetPath>tools</TargetPath>
      </FilesToPackage>
    </ItemGroup>

    <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' == ''">
      <!-- Not RID-specific: include all reference files -->
      <FilesToPackage Include="@(Reference)">
        <TargetPath>ref/$(PackageTargetFramework)</TargetPath>
      </FilesToPackage>

      <!-- include all doc files -->
      <_docFilesToPackage Include="%(FilesToPackage.RootDir)%(FilesToPackage.Directory)**\%(FilesToPackage.FileName).xml" />

      <FilesToPackage Include="@(_docFilesToPackage)">
        <TargetPath>ref/$(PackageTargetFramework)/%(RecursiveDir)</TargetPath>
      </FilesToPackage>
    </ItemGroup>

    <ItemGroup Condition="'$(IncludeSourceFilesInPackage)' == 'true'">
      <!-- pick up any src our sources directory from packages contributing files -->
      <_sourcePathCandidate Include="@(FilesToPackage->'$(PackagesDir)\%(NuGetPackageId)\%(NuGetPackageVersion)\sources')" />
      <_sourcePathCandidate Include="@(FilesToPackage->'$(PackagesDir)\%(NuGetPackageId)\%(NuGetPackageVersion)\src')" />
      <_sourcePath Include="@(_sourcePathCandidate)" Condition="Exists('%(Identity)')" />
    </ItemGroup>

    <!-- Add versions file with the hashes of the repos we consume -->
    <ItemGroup>
      <FilesToPackage Include="$(IntermediateOutputPath)\Microsoft.NETCore.App.versions.txt">
        <TargetPath></TargetPath>
      </FilesToPackage>
    </ItemGroup>

    <!-- on windows workaround max-path -->
    <!-- this can be removed once we build on core MSBuild which supports long paths. -->
    <ItemGroup Condition="'$(OsEnvironment)'=='Windows_NT'">
      <!-- choose a shorter path name, excluding package version -->
      <_shortSourcePath Include="@(_sourcePath->'$(ObjDir.Replace('/', '\'))src-%(NuGetPackageId)')">
        <Original>%(_sourcePath.FullPath)</Original>
      </_shortSourcePath>
      <_sourcePath Remove="@(_sourcePath)" />
      <_sourcePath Include="@(_shortSourcePath)" />
    </ItemGroup>
    <RemoveDir Condition="'@(_shortSourcePath)' != '' AND Exists('%(_shortSourcePath.Identity)')" Directories="%(_shortSourcePath.Identity)" />
    <Exec Condition="'@(_shortSourcePath)' != ''" Command="mklink /J %(_shortSourcePath.Identity) %(_shortSourcePath.Original)" />

    <ItemGroup>
      <FilesToPackage Include="%(_sourcePath.Identity)\%2A%2A\%2A.%2A">
        <TargetPath>src</TargetPath>
        <IsSourceCodeFile>true</IsSourceCodeFile>
      </FilesToPackage>
    </ItemGroup>
  </Target>

  <!-- Prepares all items for cross-gen and replaces package file items with their cross-gen'ed equivalents -->
  <Target Name="PrepareForCrossGen" Condition="'$(NuGetRuntimeIdentifier)' != '' AND '$(DisableCrossgen)' != 'true'" DependsOnTargets="GetFilesFromPackages">
    <PropertyGroup>
      <_crossGenIntermediatePath>$(IntermediateOutputPath)/crossgen</_crossGenIntermediatePath>
    </PropertyGroup>
    <!-- Ensure crossgen is executable.  See https://github.com/NuGet/Home/issues/4424 -->
    <Exec Command="chmod u+x $(_crossGenPath)"
          Condition="'$(OSGroup)' != 'Windows_NT'" />
    <ItemGroup>
      <_filesToCrossGen Include="@(FilesToPackage)"
                        Condition="'%(FilesToPackage.IsNative)' != 'true' AND '%(FileName)' != 'System.Private.CoreLib' AND '%(FileName)' != 'mscorlib' AND '%(Extension)' == '.dll'">
        <CrossGenedDirectory>$(CrossGenOutputPath)/%(TargetPath)/</CrossGenedDirectory>
        <CrossGenedPath>$(CrossGenOutputPath)/%(TargetPath)/%(FileName)%(Extension)</CrossGenedPath>
        <CrossGenSymbolSemaphorePath>$(_crossGenIntermediatePath)/%(FileName).symbol.semaphore</CrossGenSymbolSemaphorePath>
      </_filesToCrossGen>

      <FilesToPackage Remove="@(_filesToCrossGen)" />

      <_crossGenedFilesToPackage Include="@(_filesToCrossGen->'%(CrossGenedPath)')" />
      <FilesToPackage Include="@(_crossGenedFilesToPackage)" />
    </ItemGroup>

    <ItemGroup>
      <!-- the following path *must* be passed to crossgen as it has the CoreLib.ni.dll, it will not use the IL copy. -->
      <_crossgenPlatformDirectories Include="$(_runtimeDirectory)" />
      <!-- the following need not be passed to crossgen but we do so to be safe. -->
      <_crossgenPlatformDirectories Include="$(_coreLibDirectory)" />
      <!-- the following path must be passed to crossgen to locate all dependencies. -->
      <_crossgenPlatformDirectories Include="%(_filesToCrossGen.RootDir)%(_filesToCrossGen.Directory)" />
    </ItemGroup>

    <PropertyGroup>
      <!-- Use PathSeparator so that we get a ':' on unix and ';' on windows
           Escape the value so that the ';' doesn't result multiple lines when writing to the RSP file -->
      <_pathSeparatorEscaped>$([MSBuild]::Escape($([System.IO.Path]::PathSeparator.ToString())))</_pathSeparatorEscaped>
      <_crossgenPlatformAssemblies>@(_crossgenPlatformDirectories->'%(Identity)', '$(_pathSeparatorEscaped)')</_crossgenPlatformAssemblies>
    </PropertyGroup>
  </Target>

  <Target Name="CrossGen"
          DependsOnTargets="CreateCrossGenImages;CreateCrossGenSymbols" />

  <Target Name="CreateCrossGenImages"
          DependsOnTargets="PrepareForCrossGen"
          Inputs="@(_filesToCrossGen)"
          Outputs="%(_filesToCrossGen.CrossGenedPath)">
    <PropertyGroup>
      <_crossGenResponseFile>$(_crossGenIntermediatePath)/%(_filesToCrossGen.FileName).rsp</_crossGenResponseFile>
    </PropertyGroup>
    <ItemGroup>
      <_crossGenArgs Include="-readytorun" />
      <_crossGenArgs Include="-in %(_filesToCrossGen.FullPath)" />
      <_crossGenArgs Include="-out %(_filesToCrossGen.CrossGenedPath)" />
      <_crossGenArgs Include="-platform_assemblies_paths $(_crossgenPlatformAssemblies)" />
      <_crossGenArgs Include="-JITPath $(_jitPath)" />
    </ItemGroup>

    <MakeDir Directories="$(_crossGenIntermediatePath)" />
    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(_filesToCrossGen.CrossGenedPath)'))" />
    <WriteLinesToFile File="$(_crossGenResponseFile)" Lines="@(_crossGenArgs)" Overwrite="true" />

    <Exec Command="$(_crossGenPath) @$(_crossGenResponseFile)" WorkingDirectory="$(_clrDirectory)" EnvironmentVariables="COMPlus_PartialNGen=0" />
  </Target>

  <Target Name="CreateCrossGenSymbols"
          Condition="'$(CrossGenSymbolExtension)' != ''"
          DependsOnTargets="CreateCrossGenImages"
          Inputs="%(_filesToCrossGen.CrossGenedPath)"
          Outputs="%(_filesToCrossGen.CrossGenSymbolSemaphorePath)">
    <PropertyGroup>
      <_crossGenSymbolsResponseFile>$(_crossGenIntermediatePath)/%(_filesToCrossGen.FileName).symbols.rsp</_crossGenSymbolsResponseFile>
      <_crossGenSymbolsOptionName Condition="'$(OS)' == 'Windows_NT'">CreatePDB</_crossGenSymbolsOptionName>
      <_crossGenSymbolsOptionName Condition="'$(_crossGenSymbolsOptionName)' == ''">CreatePerfMap</_crossGenSymbolsOptionName>
      <_crossGenSymbolsOutputDirectory>$(CrossGenSymbolsOutputPath)/%(_filesToCrossGen.TargetPath)</_crossGenSymbolsOutputDirectory>
    </PropertyGroup>

    <ItemGroup>
      <_crossGenSymbolsArgs Include="-readytorun" />
      <_crossGenSymbolsArgs Include="-platform_assemblies_paths %(_filesToCrossGen.CrossGenedDirectory)$(_pathSeparatorEscaped)$(_coreLibDirectory)" />
      <_crossGenSymbolsArgs Include="-$(_crossGenSymbolsOptionName)" />
      <_crossGenSymbolsArgs Include="$(_crossGenSymbolsOutputDirectory)" />
      <_crossGenSymbolsArgs Include="%(_filesToCrossGen.CrossGenedPath)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_crossGenSymbolsResponseFile)" Lines="@(_crossGenSymbolsArgs)" Overwrite="true" />

    <MakeDir Directories="$(_crossGenSymbolsOutputDirectory)" />

    <Exec Command="$(_crossGenPath) @$(_crossGenSymbolsResponseFile)" WorkingDirectory="$(_clrDirectory)" EnvironmentVariables="COMPlus_PartialNGen=0" />

    <Touch Files="%(_filesToCrossGen.CrossGenSymbolSemaphorePath)" AlwaysCreate="true" />
  </Target>

  <!--
    Note this target should not build anything since it will run during packaging, so it
    cannot depend on CreateCrossGenSymbols.  It assumes that this project has already
    gotten "Build" called on it to generate the symbol files.
  -->
  <Target Name="GetCrossGenSymbolsFiles"
          Condition="'$(CrossGenSymbolExtension)' != ''">
    <ItemGroup>
      <FilesToPackage Include="$(CrossGenSymbolsOutputPath)/**/*$(CrossGenSymbolExtension)">
        <IsSymbolFile>true</IsSymbolFile>
        <TargetPath>runtimes/$(NuGetRuntimeIdentifier)/lib/$(PackageTargetFramework)</TargetPath>
      </FilesToPackage>
    </ItemGroup>
  </Target>

  <Target Name="GetFilesToPackage"
          DependsOnTargets="ResolveNuGetPackages;GetFilesFromPackages;PrepareForCrossGen;GetCrossGenSymbolsFiles"
          Returns="@(FilesToPackage)" />

  <Target Name="GetDependenciesToPackage" Condition="'@(DependenciesToPackage)' != ''" DependsOnTargets="ResolveNuGetPackages" Returns="@(_DependenciesToPackageWithVersion)">
    <ItemGroup>
      <!-- intersect ReferencedPackage with DependenciesToPackage -->
      <_DependenciesToPackageWithVersion Include="@(PackageReference)" Condition="'@(PackageReference)' == '@(DependenciesToPackage)' AND '%(Identity)' != ''">
        <TargetFramework>$(PackageTargetFramework)</TargetFramework>
      </_DependenciesToPackageWithVersion>
    </ItemGroup>

    <Message Importance="low" Text="%(_DependenciesToPackageWithVersion.Identity) : %(_DependenciesToPackageWithVersion.Version) : %(_DependenciesToPackageWithVersion.TargetFramework)" />
  </Target>

  <!-- Run crossgen -->
  <Target Name="Build" DependsOnTargets="GenerateHashVersionsFile;CrossGen;GetFilesToPackage" />

  <!-- remove when fixing https://github.com/dotnet/buildtools/issues/1273 -->
  <Target Name="DetermineRuntimeDependencies" />
</Project>
