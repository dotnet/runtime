<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">
  <Import Project="dir.props" />

  <PropertyGroup>
    <RestorePackages>true</RestorePackages>
    <PrereleaseResolveNuGetPackages>true</PrereleaseResolveNuGetPackages>
    <RestoreOutputPath>$(IntermediateOutputPath)</RestoreOutputPath>
    <AdditionalRestoreArgs>/p:HasRuntimePackages=false /p:IntermediateOutputPath=$(IntermediateOutputPath)</AdditionalRestoreArgs>
  </PropertyGroup>

  <PropertyGroup>
    <HasRuntimePackages>false</HasRuntimePackages>
    <NuGetTargetMoniker>$(UAPvNextTFMFull)</NuGetTargetMoniker>
    <NugetTargetMonikerShort>$(UAPvNextTFM)</NugetTargetMonikerShort>
    <NuGetRuntimeIdentifier Condition="'$(NuGetRuntimeIdentifier)' == ''">win10-$(Platform)</NuGetRuntimeIdentifier>

    <AppxManifestTemplate>$(MSBuildProjectDirectory)\AppxManifest.xml.template</AppxManifestTemplate>
    <AppxManifest>$(IntermediateOutputPath)AppxManifest.xml</AppxManifest>

    <AppxName>Microsoft.NET.CoreRuntime</AppxName>
    <AppxIdentityName>Microsoft.NET.CoreRuntime.$(MajorVersion).$(MinorVersion)</AppxIdentityName>
    <AppxDisplayName>Microsoft.NET.CoreRuntime.$(MajorVersion).$(MinorVersion)</AppxDisplayName>

    <BuildVersionAppX>$([System.Int32]::Parse($(BuildNumberMajor)))</BuildVersionAppX>
    <RevisionVersionAppX>$([System.Int32]::Parse($(BuildNumberMinor)))</RevisionVersionAppX>

    <!-- path to contents of appx that will be zipped -->
    <AppxOutputPath>$(IntermediateOutputPath)$(AppxIdentityName)</AppxOutputPath>
    <OutputPath>$(IntermediateOutputPath)$(AppxIdentityName)</OutputPath>

    <!-- path of generated .appx package -->
    <AppxOutputPackageName>$(UWPOutputDir)$(AppxIdentityName).appx</AppxOutputPackageName>
    
    <!-- Indicate that this project contains package references that need to be restored -->
    <ContainsPackageReferences>true</ContainsPackageReferences>
    <RidSpecificAssets>true</RidSpecificAssets>
  </PropertyGroup>

  <ItemGroup>
    <!-- Add a reference to the package containing the RID fallback graph -->
    <PackageReference Include="Microsoft.NETCore.Platforms">
      <Version>$(PlatformPackageVersion)</Version>
    </PackageReference>

    <!-- Add a reference to the CoreCLR package from which to restore the artifacts -->
    <PackageReference Include="Microsoft.NETCore.Runtime.CoreCLR">
      <Version>$(MicrosoftNETCoreRuntimeCoreCLRPackageVersion)</Version>
    </PackageReference>

    <!-- Binaries that we want to include in the AppX FW package -->
    <AppxFileList Include="clretwrc.dll;coreclr.dll;mscordaccore.dll;mscordbi.dll;mscorrc.debug.dll"/>
    <AppxFileList Include="mscorrc.dll;System.Private.CoreLib.dll;clrjit.dll" />
  </ItemGroup>

  <!-- Compute the set of the files to be included in the Framework AppX package -->
  <Target Name="IncludeAllFiles"
          AfterTargets="ResolveNuGetPackages">
    <ItemGroup>
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'@(AppxFileList->'%(FileName)%(Extension)')' != '%(FileName)%(Extension)'" />
      <ReferenceCopyLocalPaths Include="logo.png" />
      <ReferenceCopyLocalPaths Include="$(UWPOutputDir)\uwphost.dll" />
      <ReferenceCopyLocalPaths Include="$(AppxManifest)" />
    </ItemGroup>
  </Target>

  <Target Name="GenerateAppxManifestFromTemplate"
          BeforeTargets="IncludeAllFiles"
          Inputs="$(AppxManifestTemplate)"
          Outputs="$(AppxManifest)">
    <WriteLinesToFile File="$(AppxManifest)"
                      Lines="$([System.IO.File]::ReadAllText($(AppxManifestTemplate)).Replace('[AppxBuildArch]', $(Platform)).Replace('[AppxVersion]',$(MajorVersion).$(MinorVersion).$(BuildVersionAppX).$(RevisionVersionAppX)).Replace('[AppxIdentityName]',$(AppxIdentityName)).Replace('[AppxDisplayName]',$(AppxDisplayName)))"
                      Overwrite="true" />
    <ItemGroup>
      <FileWrites Include="$(AppxManifest)" />
    </ItemGroup>
  </Target>

  <Target Name="MakeAppx"
          AfterTargets="Build">
    <MakeDir Directories="$(PackageOutputPath)"/>
    <Delete Files="$(AppxOutputPackageName)" />
    <Exec Command='CALL "$(VS140COMNTOOLS)vsdevcmd.bat" &amp; makeappx pack /d "$(AppxOutputPath)" /p "$(AppxOutputPackageName)" /o' />
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />
</Project>
