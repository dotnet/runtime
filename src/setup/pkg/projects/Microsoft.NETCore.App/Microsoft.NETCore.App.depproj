<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />
  <PropertyGroup>
    <!-- we intentionally don't want to produce output -->
    <OutputPath>unused</OutputPath>
    <!-- we don't want any analyzers by ResolveNuGetPackageAssets 
         null-refs when this isn't set and an analyzer is in the packages -->
    <Language>unused</Language>
    <NuGetTargetMoniker>.NETCoreApp,Version=v2.0</NuGetTargetMoniker>
    <PackageTargetFramework>netcoreapp2.0</PackageTargetFramework>
    <PrimaryPackage>Microsoft.Private.CoreFx.NETCoreApp</PrimaryPackage>
  </PropertyGroup>
  <ItemGroup>
    <None Include="project.json" />
  </ItemGroup>
  <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' == ''">
    <!-- Bring in Platforms for RID graph, NETStandard.Library for build-tools -->
    <DependenciesToPackage Include="NETStandard.Library" />
    <DependenciesToPackage Include="Microsoft.NETCore.Platforms" />
  </ItemGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />

  <Target Name="GetFilesToPackage" DependsOnTargets="ResolveNuGetPackages" Returns="@(FilesToPackage)">
    <ItemGroup  Condition="'$(NuGetRuntimeIdentifier)' != ''">
      <_runtimeCLR Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.FileName)' == 'coreclr' OR '%(ReferenceCopyLocalPaths.FileName)' == 'libcoreclr'" />
    </ItemGroup>
    <!-- start with all the files resolved -->
    <PropertyGroup Condition="'@(_runtimeCLR)' != ''">
      <_runtimePackageId>%(_runtimeCLR.NuGetPackageId)</_runtimePackageId>
      <_runtimePackageVersion>%(_runtimeCLR.NuGetPackageVersion)</_runtimePackageVersion>
      <_runtimePackagePath>$(PackagesDir)/$(_runtimePackageId)/$(_runtimePackageVersion)</_runtimePackagePath>
    </PropertyGroup>

    <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' != ''">
      <!-- RID-specific: include all runtime files -->
      <_FilesToPackage Include="@(ReferenceCopyLocalPaths)">
        <!-- ResolveNugetPackageAssets doesn't preserve the asset type (native), 
             calculate it by looking for native in the path -->
        <IsNative Condition="$([System.String]::new('%(Identity)').ToLowerInvariant().Replace('\', '/').Contains('/native/'))">true</IsNative>
      </_FilesToPackage>
      <_FilesToPackage>
        <TargetPath Condition="'%(_FilesToPackage.IsNative)' != 'true'">runtimes/$(NuGetRuntimeIdentifier)/lib/$(PackageTargetFramework)</TargetPath>
        <TargetPath Condition="'%(_FilesToPackage.IsNative)' == 'true'">runtimes/$(NuGetRuntimeIdentifier)/native</TargetPath>
      </_FilesToPackage>
      <_FilesToPackage Include="$(_runtimePackagePath)/tools/*.*">
        <NuGetPackageId>$(_runtimePackageId)</NuGetPackageId>
        <TargetPath>tools</TargetPath>
      </_FilesToPackage>
    </ItemGroup>

    <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' == ''">
      <!-- Not RID-specific: include all reference files -->
      <_FilesToPackage Include="@(Reference)">
        <TargetPath>ref/$(PackageTargetFramework)</TargetPath>
      </_FilesToPackage>
    </ItemGroup>

    <ItemGroup>
      <!-- add metadata for source and package -->
      <_FilesToPackage>
        <SourcePath>%(Identity)</SourcePath>
        <PackagePath>%(TargetPath)/%(FileName)%(Extension)</PackagePath>
      </_FilesToPackage>

      <!-- transform to package path for deduping -->
      <_primaryFilesByPackagePath Include="@(_FilesToPackage->'%(PackagePath)')" Condition="$([System.String]::new('%(NuGetPackageId)').EndsWith('$(PrimaryPackage)'))"/>
      <_secondaryFilesByPackagePath Include="@(_FilesToPackage->'%(PackagePath)')" Condition="!$([System.String]::new('%(NuGetPackageId)').EndsWith('$(PrimaryPackage)'))"/>

      <!-- remove any secondary files with same package path as primary files -->
      <_secondaryFilesByPackagePath Remove="@(_primaryFilesByPackagePath)" />

      <_filesByPackagePath Include="@(_primaryFilesByPackagePath);@(_secondaryFilesByPackagePath)" />

      <!-- transform back to source -->
      <FilesToPackage Include="@(_filesByPackagePath->'%(SourcePath)')" />
    </ItemGroup>

    <!-- simple check to make sure we don't accidentally pull an old 
         package that should have been merged to the primary package -->
    <ItemGroup>
      <PermittedSystemPackages Include="System.ValueTuple" />
      <_secondarySystemPackages Include="@(_secondaryFilesByPackagePath->'%(NuGetPackageId)')"
                                Condition="$([System.String]::new('%(NuGetPackageId)').Contains('System.'))" />
      <_secondarySystemPackages Remove="@(PermittedSystemPackages)" />
    </ItemGroup>
    <Error Text="Unexpected System package(s) @(_secondarySystemPackages)" Condition="'@(_secondarySystemPackages)' != ''" />

    <Message Importance="low" Text="%(FilesToPackage.PackagePath) -> @(FilesToPackage)" />
  </Target>

  <Target Name="GetDependenciesToPackage" Condition="'@(DependenciesToPackage)' != ''" DependsOnTargets="ResolveNuGetPackages" Returns="@(_DependenciesToPackageWithVersion)">
    <!-- hack because current nuget task doesn't return version for ReferencedNuGetPackages,
         can be removed once we switch to msbuild-based nuget & use PackageReference-->
    <ReadLinesFromFile File="$(ProjectJson)">
      <Output TaskParameter="Lines" ItemName="ProjectJsonLines" />
    </ReadLinesFromFile>

    <ItemGroup>
      <PackageMatch Include="@(ProjectJsonLines)">
        <PackageId>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', '(\w[^:&quot;]*)'))</PackageId>
        <PackageVersion>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', '(\d+\.\d+.\d+[^&quot;]*)'))</PackageVersion>
      </PackageMatch>

      <ReferencedPackage Include="@(PackageMatch -> '%(PackageId)')" Condition="'%(PackageMatch.PackageVersion)' != ''">
        <Version>%(PackageMatch.PackageVersion)</Version>
      </ReferencedPackage>
      
      <!-- intersect ReferencedPackage with DependenciesToPackage -->
      <_DependenciesToPackageWithVersion Include="@(ReferencedPackage)" Condition="'@(ReferencedPackage)' == '@(DependenciesToPackage)' AND '%(Identity)' != ''">
        <TargetFramework>$(PackageTargetFramework)</TargetFramework>
      </_DependenciesToPackageWithVersion>
    </ItemGroup>

    <Message Importance="low" Text="%(_DependenciesToPackageWithVersion.Identity) : %(_DependenciesToPackageWithVersion.Version) : %(_DependenciesToPackageWithVersion.TargetFramework)" />
  </Target>
 
  <!-- only calculate paths from this project, don't copy -->
  <Target Name="Build" DependsOnTargets="GetFilesToPackage" />
  
  <!-- remove when fixing https://github.com/dotnet/buildtools/issues/1273 -->
  <Target Name="DetermineRuntimeDependencies" />
</Project>
