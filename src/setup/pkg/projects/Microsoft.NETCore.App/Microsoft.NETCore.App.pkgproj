<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />

  <PropertyGroup>
    <IsLineupPackage Condition="'$(PackageTargetRuntime)' == ''">true</IsLineupPackage>
    <PreventImplementationReference Condition="'$(PackageTargetRuntime)' != ''">true</PreventImplementationReference>
    <Version>$(NetCoreAppVersion)</Version>
    <NETCoreAppFramework>netcoreapp$([System.Version]::Parse('$(NetCoreAppVersion)').ToString(2))</NETCoreAppFramework>
    <PackagePlatform>AnyCPU</PackagePlatform>
    <SkipPackageFileCheck>true</SkipPackageFileCheck>
    <OmitDependencies>true</OmitDependencies>
    <SkipValidatePackage>true</SkipValidatePackage>
    <ShouldCreateLayout>false</ShouldCreateLayout>
    <PropsFile>$(IntermediateOutputPath)$(MSBuildProjectName).props</PropsFile>
    <PlatformManifestFile>$(IntermediateOutputPath)$(MSBuildProjectName).PlatformManifest.txt</PlatformManifestFile>
    <!-- During an official build when we can guarantee that all RID-specific dependencies have been built,
         restore all of those dependencies and gather the prospective content of the RID-specific Core.App
         packages.  This is needed so that we have a complete platform manifest in the shipping version of
         the Microsoft.NETCore.App (RID-agnostic/identity package). -->
    <IncludeAllRuntimePackagesInPlatformManifest Condition="'$(SIGNED_PACKAGES)' == 'true'">true</IncludeAllRuntimePackagesInPlatformManifest>
  </PropertyGroup>
  
  <Choose>
    <When Condition="$(PackageTargetRuntime.StartsWith('win'))">
      <PropertyGroup>
        <ApplicationFileExtension>.exe</ApplicationFileExtension>
        <LibraryFilePrefix></LibraryFilePrefix>
        <LibraryFileExtension>.dll</LibraryFileExtension>
        <SymbolFileExtension>.pdb</SymbolFileExtension>
      </PropertyGroup>
    </When>
    <When Condition="$(PackageTargetRuntime.StartsWith('osx'))">
      <PropertyGroup>
        <ApplicationFileExtension></ApplicationFileExtension>
        <LibraryFilePrefix>lib</LibraryFilePrefix>
        <LibraryFileExtension>.dylib</LibraryFileExtension>
        <SymbolFileExtension>.dwarf</SymbolFileExtension>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <ApplicationFileExtension></ApplicationFileExtension>
        <LibraryFilePrefix>lib</LibraryFilePrefix>
        <LibraryFileExtension>.so</LibraryFileExtension>
        <SymbolFileExtension>.dbg</SymbolFileExtension>
      </PropertyGroup>
    </Otherwise>
  </Choose>
  
  <Import Project="$(MSBuildProjectName).props" />
  <Import Project="netcoreapp1.0.props" />

  <!-- Identity / Reference package content -->
  <ItemGroup Condition="'$(PackageTargetRuntime)' == ''">
    <!-- reference RID specific packages to generate lineup -->
    <ProjectReference Include="@(Project)" />

    <!-- reference dependencies from previous versions -->
    <Dependency Include="@(NETCoreApp10Dependency)">
      <TargetFramework>.NETCoreApp1.0</TargetFramework>
    </Dependency>
    <Dependency Include="@(NETCoreApp11Dependency)">
      <TargetFramework>.NETCoreApp1.1</TargetFramework>
    </Dependency>
    <!-- references the host packages -->
    <Dependency Include="Microsoft.NETCore.DotNetAppHost">
       <Version>$(AppHostFullVersion)</Version>
    </Dependency>

    <!-- Add a placeholder to make sure NuGet understands we still support older versions,
         even though they don't have ref-assets -->
    <File Include="$(PlaceHolderFile)">
      <TargetPath>ref/netcoreapp</TargetPath>
    </File>
    
    <File Include="$(PropsFile)">
      <TargetPath>build/$(NETCoreAppFramework)</TargetPath>
    </File>
    <File Include="$(PlatformManifestFile)">
      <TargetPath>build/$(NETCoreAppFramework)</TargetPath>
    </File>
  </ItemGroup>

  <!-- Redistributed package content from other nuget packages-->
  <ItemGroup>
    <ProjectReference Include="Microsoft.NETCore.App.depproj">
      <AdditionalProperties Condition="'$(PackageTargetRuntime)' != ''">NuGetRuntimeIdentifier=$(PackageTargetRuntime)</AdditionalProperties>
    </ProjectReference>
  </ItemGroup>
  
  <ItemGroup Condition="'$(PackageTargetRuntime)' != ''">
    <ArchitectureSpecificNativeFile Include="$(DotNetHostBinDir)/dotnet$(ApplicationFileExtension)" />
    <ArchitectureSpecificNativeFile Include="$(DotNetHostBinDir)/dotnet$(SymbolFileExtension)"
                                    Condition="Exists('$(DotNetHostBinDir)/dotnet$(SymbolFileExtension)')">
      <IsSymbolFile>true</IsSymbolFile>
    </ArchitectureSpecificNativeFile>
    <ArchitectureSpecificNativeFile Include="$(DotNetHostBinDir)/$(LibraryFilePrefix)hostfxr$(LibraryFileExtension)"/>
    <ArchitectureSpecificNativeFile Include="$(DotNetHostBinDir)/$(LibraryFilePrefix)hostfxr$(SymbolFileExtension)"
                                    Condition="Exists('$(DotNetHostBinDir)/$(LibraryFilePrefix)hostfxr$(SymbolFileExtension)')">
      <IsSymbolFile>true</IsSymbolFile>
    </ArchitectureSpecificNativeFile>
    <ArchitectureSpecificNativeFile Include="$(DotNetHostBinDir)/$(LibraryFilePrefix)hostpolicy$(LibraryFileExtension)"/>
    <ArchitectureSpecificNativeFile Include="$(DotNetHostBinDir)/$(LibraryFilePrefix)hostpolicy$(SymbolFileExtension)"
                                    Condition="Exists('$(DotNetHostBinDir)/$(LibraryFilePrefix)hostpolicy$(SymbolFileExtension)')">
      <IsSymbolFile>true</IsSymbolFile>
    </ArchitectureSpecificNativeFile>

    <File Include="@(ArchitectureSpecificNativeFile)">
      <TargetPath>runtimes/$(PackageTargetRuntime)/native</TargetPath>
    </File>
  </ItemGroup>

  <UsingTask TaskName="GenerateFileVersionProps" AssemblyFile="$(BuildToolsTaskDir)core-setup.tasks.dll"/>
  <Target Name="GenerateFileVersionProps" BeforeTargets="GenerateNuSpec" Condition="'$(PackageTargetRuntime)' == ''">
    <MSBuild Projects="@(ProjectReference)"
             Condition="'%(ProjectReference.PackageTargetRuntime)' == '$(PackageRID)' OR 
                        '%(ProjectReference.BuidOnRID)' == '$(PackageRID)' OR 
                        ('$(IncludeAllRuntimePackagesInPlatformManifest)' == 'true' AND '%(ProjectReference.PackageTargetRuntime)' != '')"
             Targets="GetPackageFiles">
      <Output TaskParameter="TargetOutputs" ItemName="SharedFrameworkRuntimeFiles" />
    </MSBuild>
    
    <GenerateFileVersionProps Files="@(SharedFrameworkRuntimeFiles)"
                              PackageId="$(Id)"
                              PlatformManifestFile="$(PlatformManifestFile)"
                              PropsFile="$(PropsFile)"
                              PreferredPackages="$(Id);@(RuntimeDependency)" />
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />
  
  <Target Name="PreserveSymbols"
          AfterTargets="CreatePackage">
    <PropertyGroup>
      <_PackageSymbolsProjectDir>$(PackageSymbolsBinDir)$(MSBuildProjectName)/</_PackageSymbolsProjectDir>
    </PropertyGroup>
    <ItemGroup>
      <_SymbolsFiles Include="%(File.Identity)" Condition="'%(File.Extension)' == '.pdb' OR '%(File.Extension)' == '$(SymbolFileExtension)'">
        <DestinationFolder>$(_PackageSymbolsProjectDir)%(File.TargetPath)/</DestinationFolder>
      </_SymbolsFiles>
    </ItemGroup>
    <MakeDir Directories="%(_SymbolsFiles.DestinationFolder)" />
    <Copy SourceFiles="%(_SymbolsFiles.Identity)"
          DestinationFolder="%(_SymbolsFiles.DestinationFolder)" />

  </Target>

  <!-- override GetPackageIdentity so that it doesn't attempt to gather 
       files from runtime depdencies,  this prevents folks from needing
       packages that don't apply to their local OS.
       https://github.com/dotnet/buildtools/issues/1273 -->
  <Target Name="GetPackageIdentity" Returns="@(_PackageIdentity)" DependsOnTargets="CalculatePackageVersion">
    <ItemGroup>
      <_PackageIdentity Include="$(Id)">
        <Version>$(PackageVersion)</Version>
        <TargetRuntime Condition="'$(PackageTargetRuntime)' != ''">$(PackageTargetRuntime)</TargetRuntime>
      </_PackageIdentity>
    </ItemGroup>
  </Target>

  <!-- override AssignPkgProjPackageDependenciesTargetFramework so that
       it doesn't attempt to resolve all files in order to get dependency
       TargetFrameworks.  
       https://github.com/dotnet/buildtools/issues/1273 -->
  <Target Name="AssignPkgProjPackageDependenciesTargetFramework" DependsOnTargets="GetPkgProjPackageDependencies">
    <SplitDependenciesBySupport Condition="'$(SplitDependenciesBySupport)' == 'true'" OriginalDependencies="@(PkgProjDependency)">
      <Output TaskParameter="SplitDependencies" ItemName="_SplitPkgProjDependency" />
    </SplitDependenciesBySupport>
    <ItemGroup Condition="'@(_SplitPkgProjDependency)' != ''">
      <PkgProjDependency Remove="@(PkgProjDependency)" />
      <PkgProjDependency Include="@(_SplitPkgProjDependency)" />
    </ItemGroup>
    <ItemGroup>
      <!-- ensure that unconstrained dependencies are also expanded in constrained TFM groups -->
      <_PkgProjDependencyWithoutTFM Include="@(PkgProjDependency)" Condition="'%(PkgProjDependency.TargetFramework)' == '' AND '%(PkgProjDependency.TargetRuntime)' == '' AND '%(PkgProjDependency.DoNotExpand)' != 'true'" />
      <_AllPkgProjTFMs Include="%(PkgProjDependency.TargetFramework)" Condition="'%(PkgProjDependency.DependencyKind)' == 'Direct'" />
      <!-- Remove dependencies without a TFM so they can be replaced -->
      <PkgProjDependency Remove="@(_PkgProjDependencyWithoutTFM)" />
      <!-- operate on pkgproj dependencies and file dependencies -->
      <PkgProjDependency Include="@(_PkgProjDependencyWithoutTFM)">
        <TargetFramework>%(_AllPkgProjTFMs.Identity)</TargetFramework>
      </PkgProjDependency>
      <Dependency Include="@(PkgProjDependency)" Condition="'%(PkgProjDependency.DependencyKind)' == 'Direct'" />
    </ItemGroup>
  </Target>

  <Target Name="GetPackageReport" />

  <Target Name="GetDependenciesToPackage" AfterTargets="ExpandProjectReferences">
    <!-- allow projects to provide dependencies -->
    <MSBuild Targets="GetDependenciesToPackage"
             BuildInParallel="$(BuildInParallel)"
             Projects="@(_NonPkgProjProjectReference)"
             Properties="$(ProjectProperties)">
      <Output TaskParameter="TargetOutputs"
              ItemName="Dependency" />
    </MSBuild>
  </Target>
</Project>
