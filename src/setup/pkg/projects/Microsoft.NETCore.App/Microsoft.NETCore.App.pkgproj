<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />

  <PropertyGroup>
    <Version>$(NetCoreAppVersion)</Version>
    <NETCoreAppFramework>netcoreapp$([System.Version]::Parse('$(NetCoreAppVersion)').ToString(2))</NETCoreAppFramework>
    <OmitDependencies>true</OmitDependencies>
    <SkipValidatePackage>true</SkipValidatePackage>
    <ShouldCreateLayout>false</ShouldCreateLayout>
    <PropsFile>$(IntermediateOutputPath)$(MSBuildProjectName).props</PropsFile>
    <PlatformManifestFile>$(IntermediateOutputPath)$(MSBuildProjectName).PlatformManifest.txt</PlatformManifestFile>
    <PreventImplementationReference Condition="'$(PackageTargetRuntime)' != ''">true</PreventImplementationReference>
    <!-- During an official build when we can guarantee that all RID-specific dependencies have been built,
         restore all of those dependencies and gather the prospective content of the RID-specific Core.App
         packages.  This is needed so that we have a complete platform manifest in the shipping version of
         the Microsoft.NETCore.App (RID-agnostic/identity package). -->
    <IncludeAllRuntimePackagesInPlatformManifest Condition="'$(SIGNED_PACKAGES)' == 'true'">true</IncludeAllRuntimePackagesInPlatformManifest>
  </PropertyGroup>
  
  
  <Import Project="netcoreapp1.0.props" />

  <!-- Identity / Reference package content -->
  <ItemGroup Condition="'$(PackageTargetRuntime)' == ''">
    <!-- reference RID specific packages to generate lineup -->
    <ProjectReference Include="@(Project)" />

    <!-- reference dependencies from previous versions -->
    <Dependency Include="@(NETCoreApp10Dependency)">
      <TargetFramework>.NETCoreApp1.0</TargetFramework>
    </Dependency>
    <Dependency Include="@(NETCoreApp11Dependency)">
      <TargetFramework>.NETCoreApp1.1</TargetFramework>
    </Dependency>
    <!-- references the host packages -->
    <Dependency Include="Microsoft.NETCore.DotNetAppHost">
       <Version>$(AppHostFullVersion)</Version>
      <TargetFramework>.NETCoreApp2.0</TargetFramework>
    </Dependency>

    <!-- Add a placeholder to make sure NuGet understands we still support older versions,
         even though they don't have ref-assets -->
    <File Include="$(PlaceHolderFile)">
      <TargetPath>ref/netcoreapp</TargetPath>
    </File>
    
    <File Include="$(PropsFile)">
      <TargetPath>build/$(NETCoreAppFramework)</TargetPath>
    </File>
    <File Include="$(PlatformManifestFile)">
      <TargetPath>build/$(NETCoreAppFramework)</TargetPath>
    </File>
  </ItemGroup>

  <!-- Redistributed package content from other nuget packages-->
  <ItemGroup>
    <ProjectReference Include="Microsoft.NETCore.App.depproj">
      <AdditionalProperties Condition="'$(PackageTargetRuntime)' != ''">NuGetRuntimeIdentifier=$(PackageTargetRuntime)</AdditionalProperties>
    </ProjectReference>
  </ItemGroup>
  
  <ItemGroup Condition="'$(PackageTargetRuntime)' != ''">
    <ArchitectureSpecificNativeFile Include="$(DotNetHostBinDir)/dotnet$(ApplicationFileExtension)" />
    <ArchitectureSpecificNativeFile Include="$(DotNetHostBinDir)/dotnet$(SymbolFileExtension)"
                                    Condition="Exists('$(DotNetHostBinDir)/dotnet$(SymbolFileExtension)')">
      <IsSymbolFile>true</IsSymbolFile>
    </ArchitectureSpecificNativeFile>
    <ArchitectureSpecificNativeFile Include="$(DotNetHostBinDir)/$(LibraryFilePrefix)hostfxr$(LibraryFileExtension)"/>
    <ArchitectureSpecificNativeFile Include="$(DotNetHostBinDir)/$(LibraryFilePrefix)hostfxr$(SymbolFileExtension)"
                                    Condition="Exists('$(DotNetHostBinDir)/$(LibraryFilePrefix)hostfxr$(SymbolFileExtension)')">
      <IsSymbolFile>true</IsSymbolFile>
    </ArchitectureSpecificNativeFile>
    <ArchitectureSpecificNativeFile Include="$(DotNetHostBinDir)/$(LibraryFilePrefix)hostpolicy$(LibraryFileExtension)"/>
    <ArchitectureSpecificNativeFile Include="$(DotNetHostBinDir)/$(LibraryFilePrefix)hostpolicy$(SymbolFileExtension)"
                                    Condition="Exists('$(DotNetHostBinDir)/$(LibraryFilePrefix)hostpolicy$(SymbolFileExtension)')">
      <IsSymbolFile>true</IsSymbolFile>
    </ArchitectureSpecificNativeFile>

    <File Include="@(ArchitectureSpecificNativeFile)">
      <TargetPath>runtimes/$(PackageTargetRuntime)/native</TargetPath>
    </File>
  </ItemGroup>

  <UsingTask TaskName="GenerateFileVersionProps" AssemblyFile="$(BuildToolsTaskDir)core-setup.tasks.dll"/>
  <Target Name="GenerateFileVersionProps" BeforeTargets="GenerateNuSpec" Condition="'$(PackageTargetRuntime)' == ''">
    <MSBuild Projects="@(ProjectReference)"
             Condition="'%(ProjectReference.PackageTargetRuntime)' == '$(PackageRID)' OR 
                        '%(ProjectReference.BuidOnRID)' == '$(PackageRID)' OR 
                        ('$(IncludeAllRuntimePackagesInPlatformManifest)' == 'true' AND '%(ProjectReference.PackageTargetRuntime)' != '')"
             Targets="GetPackageFiles">
      <Output TaskParameter="TargetOutputs" ItemName="SharedFrameworkRuntimeFiles" />
    </MSBuild>
    
    <GenerateFileVersionProps Files="@(SharedFrameworkRuntimeFiles)"
                              PackageId="$(Id)"
                              PlatformManifestFile="$(PlatformManifestFile)"
                              PropsFile="$(PropsFile)"
                              PreferredPackages="$(Id);@(RuntimeDependency)" />
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />

  <Target Name="GetPackageReport" />
</Project>
