parameters:
  additionalMSBuildArguments: ''
  buildFullPlatformManifest: false
  displayName: ''
  publishRidAgnosticPackages: false
  skipTests: $(SkipTests)
  targetArchitecture: null

jobs:
  - job: ${{ parameters.displayName }}
    displayName: ${{ parameters.displayName }}
    pool:
      # Use a hosted pool when possible.
      ${{ if eq(variables['System.TeamProject'], 'public') }}:
        name: NetCorePublic-Pool
        queue: buildpool.windows.10.amd64.vs2017.open
      ${{ if ne(variables['System.TeamProject'], 'public') }}:
        name: NetCoreInternal-Pool
        queue: buildpool.windows.10.amd64.vs2017
    strategy:
      matrix: 
        debug:
          _BuildConfig: Debug
          _PublishType: none
        release:
          _BuildConfig: Release
          _PublishType: blob
    workspace:
      clean: all
    variables: 
        # TODO: (arcade) fix up artifacts:
        # /p:BuildFullPlatformManifest=${{ parameters.buildFullPlatformManifest }}
      CommonMSBuildArgs: >-
        /p:Configuration=$(_BuildConfig)
        /p:OfficialBuildId=$(OfficialBuildId)
        /p:TargetArchitecture=${{ parameters.targetArchitecture }}
        /p:PortableBuild=true
        /p:SkipTests=${{ parameters.skipTests }}
      MsbuildSigningArguments: >-
        /p:CertificateId=400
        /p:DotNetSignType=$(SignType)

    steps:

    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - task: MicroBuildSigningPlugin@2
        displayName: Install MicroBuild plugin for Signing
        inputs:
          signType: $(SignType)
          zipSources: false
          feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
        continueOnError: false
        condition: and(succeeded(), in(variables['SignType'], 'real', 'test'))

    # NuGet's http cache lasts 30 minutes. If we're on a static machine, this may interfere with
    # auto-update PRs by preventing the CI build from fetching the new version. Delete the cache.
    - powershell: Remove-Item -Recurse -ErrorAction Ignore "$env:LocalAppData\NuGet\v3-cache"
      displayName: Clear NuGet http cache (if exists)

    - script: >-
        build.cmd -ci -test
        $(CommonMSBuildArgs)
        $(MsbuildSigningArguments)
      displayName: Build

    # Publish all build assets
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - script: build.cmd -publishing
          -- '$(CommonMSBuildArgs)
          $(_CommonPublishArgs)
          /p:PublishType=$(_PublishType)
          /p:PublishRidAgnosticPackages=${{ parameters.publishRidAgnosticPackages }}
          /p:BuildFullPlatformManifest=${{ parameters.buildFullPlatformManifest }}
          /bl:$(Build.SourcesDirectory)\publish.binlog'
        displayName: Publish build assets
        condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))

    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: 'xUnit'
        testResultsFiles: '*.xml'
        searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
        mergeTestResults: true
        testRunTitle: ${{ parameters.displayName }}-$(_BuildConfig)
      continueOnError: true
      condition: always()

    - task: CopyFiles@2
      displayName: Copy Files to $(Build.StagingDirectory)\BuildLogs
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
          **/*.log
          **/*.binlog
        TargetFolder: '$(Build.StagingDirectory)\BuildLogs'
        CleanTargetFolder: true
      continueOnError: true
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact BuildLogs
      inputs:
        PathtoPublish: '$(Build.StagingDirectory)\BuildLogs'
        ArtifactName: ${{ parameters.displayName }}-$(_BuildConfig)
      continueOnError: true
      condition: succeededOrFailed()
