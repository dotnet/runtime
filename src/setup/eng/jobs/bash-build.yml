parameters:
  additionalMSBuildArgs: ''
  additionalRunArgs: ''
  crossBuild: false
  disableCrossgen: false
  displayName: null
  dockerImage: null
  osGroup: Linux
  packageDistroListDeb: null
  packageDistroListRpm: null
  skipTests: $(SkipTests)
  strategy:
    matrix: 
      debug:
        _BuildConfig: Debug
        _PublishType: none
      release:
        _BuildConfig: Release
        _PublishType: blob
  targetArchitecture: x64
jobs:
  - job: ${{ parameters.displayName }}
    displayName: ${{ parameters.displayName }}
    pool:
      ${{ if and(eq(parameters.displayName, 'Build_FreeBSD_x64'), ne(variables['System.TeamProject'], 'public')) }}:
        name: dnceng-freebsd-internal
      ${{ if ne(parameters.displayName, 'Build_FreeBSD_x64') }}:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: dnceng-linux-external-temp
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: dnceng-linux-internal-temp
    strategy: ${{ parameters.strategy }}
    variables:

      ${{ if ne(parameters.displayName, 'Build_FreeBSD_x64')}}:
          RunArguments: docker run --privileged --rm
            -v "$(Build.SourcesDirectory):/root/coresetup"
            -w="/root/coresetup"
            ${{ parameters.additionalRunArgs }}
            ${{ parameters.dockerImage }}
      
      ${{ if eq(parameters.displayName, 'Build_FreeBSD_x64')}}:
          RunArguments: export DotNetBootstrapCliTarPath=/dotnet-sdk-freebsd-x64.tar &&

      BuildArguments: -OfficialBuildId=$(OfficialBuildId)
        -ConfigurationGroup=$(_BuildConfig)
        -CrossBuild=${{ parameters.crossBuild }}
        -DisableCrossgen=${{ parameters.disableCrossgen }}
        -PortableBuild=${{ parameters.portableBuild }}
        -strip-symbols
        -SkipTests=${{ parameters.skipTests }}
        -TargetArchitecture=${{ parameters.targetArchitecture }}
        -- /p:StabilizePackageVersion=$(IsStable)
        ${{ parameters.additionalMSBuildArgs }}

      PublishArguments: /p:PublishType=$(_PublishType)
        /p:ConfigurationGroup=$(_BuildConfig)
        /p:OSGroup=${{ parameters.osGroup }}
        /p:PortableBuild=${{ parameters.portableBuild }}
        /p:StabilizePackageVersion=$(IsStable)
        /p:TargetArchitecture=${{ parameters.targetArchitecture }}
         ${{ parameters.additionalMSBuildArgs }}

      CommonMSBuildArgs: /bl
        /p:ConfigurationGroup=$(_BuildConfig)
        /p:OfficialBuildId=$(OfficialBuildId)
        /p:OSGroup=${{ parameters.osGroup }}
        /p:PortableBuild=false
        /p:StabilizePackageVersion=$(IsStable)
        /p:TargetArchitecture=${{ parameters.targetArchitecture }}

      # Packaging related variables
      # Debian
      CommonDebianRunCommand: run 
        -v $(Build.SourcesDirectory):/root/coresetup
        -v $(Build.StagingDirectory)/sharedFrameworkPublish/:/root/sharedFrameworkPublish/
        -w=/root/coresetup
        microsoft/dotnet-buildtools-prereqs:ubuntu-14.04-debpkg-e5cf912-20175003025046
        /root/coresetup/Tools/msbuild.sh
      DebianPackagingCommand: $(CommonDebianRunCommand)
        /root/coresetup/src/pkg/packaging/dir.proj
        /p:UsePrebuiltPortableBinariesForInstallers=true
        /p:SharedFrameworkPublishDir=/root/sharedFrameworkPublish/
        $(CommonMSBuildArgs)

      # RPM
      CommonRpmRunCommand: run
        -v $(Build.SourcesDirectory):/root/coresetup
        -v $(Build.StagingDirectory)/sharedFrameworkPublish/:/root/sharedFrameworkPublish/
        -w=/root/coresetup
        microsoft/dotnet-buildtools-prereqs:rhel-7-rpmpkg-c982313-20174116044113
        /root/coresetup/Tools/msbuild.sh
      RpmPackagingCommand: $(CommonRpmRunCommand)
        /root/coresetup/src/pkg/packaging/dir.proj
        /p:UsePrebuiltPortableBinariesForInstallers=true
        /p:SharedFrameworkPublishDir=/root/sharedFrameworkPublish/
        $(CommonMSBuildArgs)
    steps:

    # Build binary and nuget packages
    - script: $(RunArguments)
        ./build.sh
        $(BuildArguments)
      displayName: Build
      workingDirectory: '$(Build.SourcesDirectory)'

    # Publish only if internal and not PR 
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - script: $(RunArguments)
          ./Tools/msbuild.sh
          ./publish/publish.proj
          $(PublishArguments)
          $(_CommonPublishArgs)
        displayName: Publish
        workingDirectory: '$(Build.SourcesDirectory)'
        condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))

    # Only for glibc leg, here we produce RPMs and Debs
    - ${{ if eq(parameters.displayName, 'Build_Linux_x64_glibc')}}:
      - task: CopyFiles@2
        displayName: 'Copy built Portable linux-x64 binaries to staging directory'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/bin/obj/linux-x64.$(_BuildConfig)/sharedFrameworkPublish'
          TargetFolder: '$(Build.StagingDirectory)/sharedFrameworkPublish'
      - script: docker 
          $(CommonDebianRunCommand)
          /root/coresetup/build.proj
          /t:BuildTraversalBuildDependencies
          $(CommonMSBuildArgs)
        displayName: Build traversal build dependencies - Ubuntu 14.04
        workingDirectory: '$(Build.SourcesDirectory)'

      # Debian packaging
      - script: docker 
          $(DebianPackagingCommand)
        displayName: 'Package Runtime packages and Runtime Dep - Ubuntu 14.04'
        workingDirectory: '$(Build.SourcesDirectory)'

      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - script: docker
            $(CommonDebianRunCommand)
            /root/coresetup/publish/publish.proj
            /p:PublishType=$(_PublishType)
            /p:SharedFrameworkPublishDir=/root/sharedFrameworkPublish/
            $(CommonMSBuildArgs) 
            $(_CommonPublishArgs)
          displayName: 'Publish Runtime and Runtime Dep - Ubuntu 14.04'
          workingDirectory: '$(Build.SourcesDirectory)'
          condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))

      # Package and publish for each debian distros
      - ${{ each debdistrorid in parameters.packageDistroListDeb }}:
        - script: docker
            $(DebianPackagingCommand) /p:BuildRuntimeDebs=false
            /p:OutputRid=${{ debdistrorid }}-${{ parameters.targetArchitecture }}
          displayName: 'Package Runtime Dep - ${{ debdistrorid }}'
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          - script: docker
              $(CommonDebianRunCommand)
              /root/coresetup/publish/publish.proj
              /p:PublishType=$(_PublishType)
              /p:SharedFrameworkPublishDir=/root/sharedFrameworkPublish/ 
              $(CommonMSBuildArgs)
              $(_CommonPublishArgs)
              /p:OutputRid=${{ debdistrorid }}-${{ parameters.targetArchitecture }}
            displayName: 'Publish Runtime Dep - ${{ debdistrorid }}'
            workingDirectory: '$(Build.SourcesDirectory)'
            condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))

      # RPM Packaging
      - script: docker
          $(CommonRpmRunCommand)
          /root/coresetup/build.proj
          /t:BuildTraversalBuildDependencies
          $(CommonMSBuildArgs) 
        displayName: Build traversal build dependencies - Rhel7
        workingDirectory: '$(Build.SourcesDirectory)'
      - script: docker 
          $(RpmPackagingCommand)
        displayName: Package Runtime Dep - Rhel7
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - script: docker 
            $(CommonRpmRunCommand) 
            /root/coresetup/publish/publish.proj
            /p:PublishType=$(_PublishType)
            /p:SharedFrameworkPublishDir=/root/sharedFrameworkPublish/
            $(CommonMSBuildArgs)
            $(_CommonPublishArgs)
          displayName: Publish Runtime Dep - Rhel7
          workingDirectory: '$(Build.SourcesDirectory)'
          condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))

      # Package and publish for each rpm distros
      - ${{ each rpmdistrorid in parameters.packageDistroListRpm }}: 
        - script: docker 
            $(RpmPackagingCommand) /p:BuildRuntimeRpms=false
            /p:OutputRid=${{ rpmdistrorid }}-${{ parameters.targetArchitecture }}
          displayName: 'Package Runtime Dep - ${{ rpmdistrorid }}'
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          - script: docker
              $(CommonRpmRunCommand)
              /root/coresetup/publish/publish.proj
              /p:PublishType=$(_PublishType)
              /p:SharedFrameworkPublishDir=/root/sharedFrameworkPublish/
              $(CommonMSBuildArgs)
              $(_CommonPublishArgs)
              /p:OutputRid=${{ rpmdistrorid }}-${{ parameters.targetArchitecture }}
            displayName: 'Publish Runtime Dep -${{ rpmdistrorid }}'
            workingDirectory: '$(Build.SourcesDirectory)'
            condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))
    - task: CopyFiles@2
      displayName: Copy Files to $(Build.StagingDirectory)\BuildLogs
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
          *.log
          *.binlog
        TargetFolder: '$(Build.StagingDirectory)\BuildLogs'
      continueOnError: true
      condition: succeededOrFailed()
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact BuildLogs
      inputs:
        PathtoPublish: '$(Build.StagingDirectory)\BuildLogs'
        ArtifactName: ${{ parameters.displayName }}-$(_BuildConfig)
      continueOnError: true
      condition: succeededOrFailed()

    # Force clean up machine in case any docker images are left behind
    - ${{ if ne(parameters.displayName, 'Build_FreeBSD_x64')}}:
      - script: docker system prune -f
        displayName: Run Docker clean up
        condition: succeededOrFailed()