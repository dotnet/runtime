trigger:
  batch: true
  branches:
    include:
    - master
    - release/3.*

pr:
- master
- release/3.*

name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
  - name: TeamName
    value: dotnet-core-acquisition
  # Skip Running CI tests
  - name: SkipTests
    value: false
  # Set Official Build Id
  - name: OfficialBuildId
    value: $(Build.BuildNumber)

  # Set the target blob feed for package publish during official and validation builds.
  - name: _DotNetArtifactsCategory
    value: .NETCore
  - name: _DotNetValidationArtifactsCategory
    value: .NETCoreValidation

  # Produce test-signed build for PR and Public builds
  - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
    - name: SignType
      value: test

  # Set up non-PR build from internal project
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - name: SignType
      value: $[ coalesce(variables.OfficialSignType, 'real') ]

stages:
- stage: Build
  jobs:
  # -------- Build Bash legs (Linux and FreeBSD) --------
  - template: /eng/jobs/bash-build.yml
    parameters:
      crossBuild: true
      name: Linux_Arm
      dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-14.04-cross-e435274-20180426002420
      additionalRunArgs: -e ROOTFS_DIR=/crossrootfs/arm
      portableBuild: true
      skipTests: true
      targetArchitecture: arm

  - template: /eng/jobs/bash-build.yml
    parameters:
      crossBuild: true
      name: Linux_Arm64
      dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-cross-arm64-a3ae44b-20180316023254
      additionalRunArgs: -e ROOTFS_DIR=/crossrootfs/arm64
      portableBuild: true
      skipTests: true
      targetArchitecture: arm64

  # # Tizen build only for PR build
  # - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
  #   - template: /eng/jobs/bash-build.yml
  #     parameters:
  #       additionalMSBuildArgs: /p:OverridePackageSource=https:%2F%2Ftizen.myget.org/F/dotnet-core/api/v3/index.json /p:OutputRid=tizen.5.0.0-armel
  #       additionalRunArgs: -e ROOTFS_DIR=/crossrootfs/armel.tizen.build
  #       crossBuild: true
  #       name: Linux_ArmRel_Tizen
  #       disableCrossgen: true
  #       dockerImage: tizendotnet/dotnet-buildtools-prereqs:ubuntu-16.04-cross-e435274-20180426002255-tizen-rootfs-5.0m1
  #       portableBuild: false
  #       skipTests: true
  #       targetArchitecture: armel

  - template: /eng/jobs/bash-build.yml
    parameters:
      additionalMSBuildArgs: /p:OutputRid=linux-musl-arm64
      crossBuild: true
      name: Linux_Arm64_Alpine37
      dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-cross-arm64-alpine10fcdcf-20190208200917
      additionalRunArgs: -e ROOTFS_DIR=/crossrootfs/arm64
      portableBuild: false
      skipTests: true
      targetArchitecture: arm64

  - template: /eng/jobs/bash-build.yml
    parameters:
      additionalMSBuildArgs: /p:OutputRid=linux-musl-x64
      name: Linux_x64_Alpine36
      dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.6-3148f11-20171119021156
      portableBuild: false
      targetArchitecture: x64

  - template: /eng/jobs/bash-build.yml
    parameters:
      name: Linux_x64_glibc
      dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-d485f41-20173404063424
      packageDistroList:
      - image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-14.04-debpkg-e5cf912-20175003025046
        imageRid: ubuntu.14.04
        rids: []
      - image: mcr.microsoft.com/dotnet-buildtools/prereqs:rhel-7-rpmpkg-c982313-20174116044113
        imageRid: rhel.7
        rids:
        - centos.7
        - fedora.27
        - opensuse.42
        - oraclelinux.7
        - sles.12
      portableBuild: true
      targetArchitecture: x64

  - template: /eng/jobs/bash-build.yml
    parameters:
      additionalMSBuildArgs: /p:OutputRid=rhel.6-x64
      name: Linux_x64_Rhel6
      dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-6-376e1a3-20174311014331
      portableBuild: false
      targetArchitecture: x64

  # -------- Build OSX (macOS) leg --------
  - template: /eng/jobs/osx-build.yml
    parameters:
      name: OSX

  # -------- Build Windows legs --------
  # Windows Arm
  - template: /eng/jobs/windows-build.yml
    parameters:
      name: Windows_Arm
      skipTests: true
      targetArchitecture: arm

  # Windows Arm64
  - template: /eng/jobs/windows-build.yml
    parameters:
      name: Windows_Arm64
      skipTests: true
      targetArchitecture: arm64

  # Windows x64
  - template: /eng/jobs/windows-build.yml
    parameters:
      name: Windows_x64
      publishRidAgnosticPackages: true
      targetArchitecture: x64

  # Windows x86
  - template: /eng/jobs/windows-build.yml
    parameters:
      name: Windows_x86
      targetArchitecture: x86

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - stage: PrepareForPublish
    displayName: Prepare for Publish
    dependsOn: Build
    jobs:
    # Prep artifacts: sign them and upload pipeline artifacts expected by stages-based publishing.
    - template: /eng/jobs/prepare-signed-artifacts.yml
      parameters:
        PublishRidAgnosticPackagesFromJobName: Windows_x64
    # Publish to Build Asset Registry in order to generate the ReleaseConfigs artifact.
    - template: /eng/common/templates/job/publish-build-assets.yml
      parameters:
        publishUsingPipelines: true
        dependsOn: PrepareSignedArtifacts
        pool:
          name: NetCoreInternal-Pool
          queue: buildpool.windows.10.amd64.vs2017

  - template: /eng/stages/publish.yml
    parameters:
      # Publish channel configuration. The publish template wraps Arcade publishing and adds some
      # extras that aren't implemented in Arcade yet.
      #
      # - dependsOn: <ID of the Arcade stage that finalization should run after>
      #   channel:
      #     name: <Name of this channel, for logging and readability>
      #     bar: <Name of the Arcade variable that contains the ID of this channel in BAR>
      #     storage: <Name of the Latest channel to publish to in dotnetcli blob storage>
      dependsOnPublishStages:
      - dependsOn: PublishValidation
        channel:
          name: .NET Core 3 Dev
          bar: PublicDevRelease_30_Channel_Id
          storage: release/3.0
      - dependsOn: NetCore_Dev5_PublishValidation
        channel:
          name: .NET Core 5 Dev
          bar: NetCore_5_Dev_Channel_Id
          storage: master
      - dependsOn: PVR_PublishValidation
        channel:
          name: .NET Tools - Validation
          bar: PublicValidationRelease_30_Channel_Id
          storage: dev/validation
