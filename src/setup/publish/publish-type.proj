<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />
  <UsingTask TaskName="DownloadFromAzure" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.CloudTestTasks.dll" />

  <Import Project="$(PackagesDir)/$(FeedTasksPackage.ToLower())/$(FeedTasksPackageVersion)/build/$(FeedTasksPackage).targets" />

  <PropertyGroup>
    <BuildDependsOn>
      ValidateProperties;
      DownloadFilesFromContainer
    </BuildDependsOn>

    <BuildDependsOn Condition="$(PublishType.Contains('blob'))">
      $(BuildDependsOn);
      ValidateBlobFeedProperties;
      PublishPackagesToBlobFeed;
      PublishFilesToBlobFeed;
    </BuildDependsOn>

    <BuildDependsOn Condition="$(PublishType.Contains('versions'))">
      $(BuildDependsOn);
      UpdateVersionsRepo
    </BuildDependsOn>
  </PropertyGroup>

  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />

  <Target Name="ValidateProperties">
    <Error Condition="'$(AzureAccessToken)' == ''" Text="Missing required property 'AzureAccessToken'" />
    <Error Condition="'$(AzureAccountName)' == ''" Text="Missing required property 'AzureAccountName'" />
    <Error Condition="'$(ContainerName)' == ''" Text="Missing required property 'ContainerName'" />
    <Message Condition="'$(WindowsSdkDir)' == ''" Text="Windows SDK not found. Symbols packages will not be signed." />
  </Target>

  <Target Name="ValidateBlobFeedProperties">
    <Error Condition="'$(PublishBlobFeedUrl)' == ''" Text="Missing required property 'PublishBlobFeedUrl'" />
    <Error Condition="'$(PublishBlobFeedKey)' == ''" Text="Missing required property 'PublishBlobFeedKey'" />

    <PropertyGroup>
      <!-- map the properties to the values expexed by the Feeds.targets file -->
      <ExpectedFeedUrl>$(PublishBlobFeedUrl)</ExpectedFeedUrl>
      <AccountKey>$(PublishBlobFeedKey)</AccountKey>
    </PropertyGroup>
  </Target>

  <Target Name="DownloadFilesFromContainer">
    <!-- TODO: We should also think about pulling down the checksums or recomputing them -->
    <PropertyGroup>
      <DownloadDirectory Condition="'$(DownloadDirectory)' == ''">$(BinDir)PackageDownload/</DownloadDirectory>
    </PropertyGroup>

    <MakeDir Directories="$(DownloadDirectory)" Condition="!Exists('$(DownloadDirectory)')" />

    <Message Text="Downloading files from $(AzureAccountName)/$(ContainerName)/$(BinariesRelativePath) into $(DownloadDirectory)" />

    <DownloadFromAzure AccountName="$(AzureAccountName)"
                       AccountKey="$(AzureAccessToken)"
                       ContainerName="$(ContainerName)"
                       BlobNamePrefix="$(BinariesRelativePath)"
                       DownloadDirectory="$(DownloadDirectory)" />

    <ItemGroup>
      <!-- ShippedNugetPackage item is used for updating versions repo -->
      <ShippedNuGetPackage Include="$(DownloadDirectory)**\*.nupkg" Exclude="$(DownloadDirectory)**\*.symbols.nupkg" />

      <!-- Setup item groups for PublishPackagesToBlobFeed and PublishFilesToBlobFeed -->
      <PackagesToPublish Include="$(DownloadDirectory)**\*.nupkg" />
      <FilesToPublish Include="$(DownloadDirectory)**\*.*" Exclude="@(PackagesToPublish)" />

      <!-- Make the local relative path match what dotnet-install scripts expect -->
      <FilesToPublish>
        <RelativeBlobPath>assets/$(BinariesRelativePath)/$([System.String]::Copy('%(RecursiveDir)%(Filename)%(Extension)').Replace('\' ,'/'))</RelativeBlobPath>
      </FilesToPublish>
    </ItemGroup>
  </Target>

  <!--
    Target wrapping UpdatePublishedVersions: ensures that ShippedNuGetPackage items are created and
    disables versions repo update if no auth token is defined. Otherwise, not specifying an auth
    token would cause an error.
  -->
  <Target Name="UpdateVersionsRepo"
          Condition="'$(GitHubAuthToken)' != ''"
          DependsOnTargets="UpdatePublishedVersions" />

  <Import Project="$(ToolsDir)VersionTools.targets" Condition="Exists('$(ToolsDir)VersionTools.targets')" />
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />
</Project>
