<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />
  <UsingTask TaskName="DownloadFromAzure" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.CloudTestTasks.dll" />
  <UsingTask TaskName="ExecWithRetriesForNuGetPush" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />
  <UsingTask TaskName="FinalizeBuild" AssemblyFile="$(LocalBuildToolsTaskDir)core-setup.tasks.dll" />
  <UsingTask TaskName="ListAzureBlobs" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.CloudTestTasks.dll" />
  <UsingTask TaskName="UploadToAzure" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.CloudTestTasks.dll" />

  <Import Project="$(PackagesDir)/$(FeedTasksPackage.ToLower())/$(FeedTasksPackageVersion)/build/$(FeedTasksPackage).targets" />
  <Import Project="$(PackagesDir)/$(PublishSymbolsPackage.ToLower())/$(PublishSymbolsPackageVersion)/build/PublishSymbols.targets" />

  <PropertyGroup>
    <!-- Always push the build assets to azure for final publish -->
    <BuildDependsOn Condition="'$(PublishType)' == 'blob'">
      PublishToAzure;
    </BuildDependsOn>

    <!--
      If we are not setting a publish type (i.e. nopublishtype) then do
      the old style publishing otherwise ignore these steps because we are
      running an orchestrated publish.
    -->
    <BuildDependsOn Condition="$(PublishType.Contains('nopublishtype'))">
      $(BuildDependsOn);
      PublishDebFilesToDebianRepo;
      PublishFinalOutput;
    </BuildDependsOn>
  </PropertyGroup>

  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />

  <Target Name="PublishFinalOutput"
          Condition="'$(Finalize)' == 'true'"
          DependsOnTargets="PublishCoreHostPackages;SetupPublishSymbols;PublishSymbols;FinalizeBuildInAzure" />
    
  <Target Name="GetPackagesToSign" DependsOnTargets="GatherShippingPackages">
    <ItemGroup>
      <FilesToSign Include="@(ShippedNugetPackage)">
        <Authenticode>NuGet</Authenticode>
      </FilesToSign>
    </ItemGroup>
    <Message Importance="High" Text="Attempting to sign package '%(FilesToSign.Identity)'" />
  </Target>
  
  <Target Name="SignPackages"
          Condition="'$(SkipSigning)' != 'true' and '$(SignType)' != 'public'"
          DependsOnTargets="GetPackagesToSign;SignFiles">
  </Target>

  <!--
    Target wrapping UpdatePublishedVersions: ensures that ShippedNuGetPackage items are created and
    disables versions repo update if no auth token is defined. Otherwise, not specifying an auth
    token would cause an error.
  -->
  <Target Name="UpdateVersionsRepo"
          Condition="'$(GitHubAuthToken)' != ''"
          DependsOnTargets="GatherShippingPackages;
                            UpdatePublishedVersions" />

  <Target Name="GatherShippingPackages">
    <ItemGroup>
      <PackagesToShip Include="$(DownloadDirectory)*.nupkg" Exclude="$(DownloadDirectory)*.symbols.nupkg" />
      <PackagesToShip Remove="%(PackagesToShip.Identity)" Condition="$([System.String]::Copy('%(PackagesToShip.Identity)').Contains('latest'))" />
      <ShippedNuGetPackage Include="@(PackagesToShip)" />
    </ItemGroup>
  </Target>

  <Target Name="PublishToAzure"
          Condition="'$(Finalize)' != 'true'"
          DependsOnTargets="GatherPublishToAzureBinaries;GatherPublishToAzureInstallers;GatherPublishToAzureChecksums">
    <MSBuild Targets="%(Project.PublishTarget)"
             Projects="%(Project.Identity)"
             Properties="%(Project.AdditionalProperties)"
             BuildInParallel="true" />
  </Target>

  <Target Name="EnsureUniqueItemsToUpload">
    <ItemGroup>
      <DedupItems Include="@(ItemsToPublish->Distinct())" />
    </ItemGroup>
    <PropertyGroup>
      <CountOld>@(ItemsToPublish->Count())</CountOld>
      <CountNew>@(DedupItems->Count())</CountNew>
      <_HasDups Condition="'$(CountOld)' != '$(CountNew)'">true</_HasDups>
    </PropertyGroup>
    <Message Importance="High" Condition="'$(_HasDups)' != ''" Text="ItemsToPublish: '@(ItemsToPublish)'"/>
    <Error Condition="'$(_HasDups)' != ''" Text="Duplicate Items Present in ItemsToPublish" />
  </Target>

  <Target Name="UploadToAzure"
          DependsOnTargets="EnsureUniqueItemsToUpload"
          Condition="'$(ItemsToPublish)' != ''">
    <Error Condition="'$(AzureAccessToken)' == ''" Text="Missing required property 'AzureAccessToken'" />
    <Error Condition="'$(AzureAccountName)' == ''" Text="Missing required property 'AzureAccountName'" />
    <Error Condition="'$(ContainerName)' == ''" Text="Missing required property 'ContainerName'" />
    <Error Condition="'$(RelativeBlobPath)' == ''" Text="Missing required property 'RelativeBlobPath'" />
    <Error Condition="!HasTrailingSlash('$(RelativeBlobPath)')" Text="RelativeBlobPath is expected to have a trailing '/' - '$(RelativeBlobPath)'" />

    <ItemGroup>
      <ItemsToPublish Include="$(ItemsToPublish)" />
      <ItemsToPublish>
        <RelativeBlobPath>$(RelativeBlobPath)%(Filename)%(Extension)</RelativeBlobPath>
      </ItemsToPublish>
    </ItemGroup>

    <Message Text="Uploading files to $(AzureAccountName)/$(ContainerName)/$(RelativeBlobPath)" />

    <UploadToAzure AccountName="$(AzureAccountName)"
                   AccountKey="$(AzureAccessToken)"
                   ContainerName="$(ContainerName)"
                   Items="@(ItemsToPublish)"
                   Overwrite="false" />
  </Target>

  <Target Name="UploadChecksumsToAzure"
          Condition="'$(ItemsToPublish)' != ''">
    <Error Condition="'$(ChecksumAzureAccessToken)' == ''" Text="Missing required property 'ChecksumAzureAccessToken'" />
    <Error Condition="'$(ChecksumAzureAccountName)' == ''" Text="Missing required property 'ChecksumAzureAccountName'" />
    <Error Condition="'$(ChecksumContainerName)' == ''" Text="Missing required property 'ChecksumContainerName'" />
    <Error Condition="'$(RelativeBlobPath)' == ''" Text="Missing required property 'RelativeBlobPath'" />

    <ItemGroup>
      <ItemsToPublish Include="$(ItemsToPublish)" />
      <ItemsToPublish>
        <RelativeBlobPath>$(RelativeBlobPath)/%(Filename)%(Extension)</RelativeBlobPath>
      </ItemsToPublish>
    </ItemGroup>

    <Message Text="Uploading checksum files to $(ChecksumAzureAccountName)/$(ChecksumContainerName)/$(RelativeBlobPath)" />

    <UploadToAzure AccountName="$(ChecksumAzureAccountName)"
                   AccountKey="$(ChecksumAzureAccessToken)"
                   ContainerName="$(ChecksumContainerName)"
                   Items="@(ItemsToPublish)"
                   Overwrite="false" />
  </Target>

  <Target Name="PublishDebFilesToDebianRepo"
          DependsOnTargets="GenerateDebRepoFiles"
          Condition="'$(DebRepoId)' != '' AND
                     '$(DebRepoUser)' != '' AND
                     '$(DebRepoPass)' != '' AND
                     '$(DebRepoServer)' != ''">
    <Exec Condition="'@(DebInstallerFile)' != ''"
          Command="$(ProjectDir)tools-local/scripts/publish/repoapi_client.sh $(DebRepoUser) $(DebRepoPass) $(DebRepoId) $(DebRepoServer) -addpkg %(DebInstallerFile.UploadJsonFilename)" />
  </Target>

  <Target Name="FinalizeBuildInAzure"
          DependsOnTargets="CheckIfAllBuildsHavePublished;
                            GetLatestCommitHash">
    <Error Condition="'$(AzureAccessToken)' == ''" Text="Missing required property 'AzureAccessToken'" />
    <Error Condition="'$(AzureAccountName)' == ''" Text="Missing required property 'AzureAccountName'" />
    <Error Condition="'$(ContainerName)' == ''" Text="Missing required property 'ContainerName'" />
    <Error Condition="'$(LatestCommit)' == ''" Text="Missing required property 'LatestCommit'" />
    <Error Condition="'@(PublishRid)' == ''" Text="Missing required item 'PublishRid'" />

    <Message Importance="High" Text="Finalizing Build" />
    <!-- Ensure all publish pieces are present and then publish to Azure Latest container -->
    <FinalizeBuild AccountName="$(AzureAccountName)"
                   AccountKey="$(AzureAccessToken)"
                   ContainerName="$(ContainerName)"
                   SemaphoreBlob="Runtime/$(Channel)/sharedFxPublishSemaphore"
                   Channel="$(Channel)"
                   Version="$(SharedFrameworkNugetVersion)"
                   SharedFrameworkNugetVersion="$(SharedFrameworkNugetVersion)"
                   SharedHostNuGetVersion="$(HostVersion)"
                   ProductVersion="$(ProductVersion)"
                   CommitHash="$(LatestCommit)"
                   FinalizeContainer="Runtime/$(SharedFrameworkNugetVersion)"
                   ForcePublish="true"
                   Condition="'@(_MissingBlobNames)' == ''" />
    <Error Condition="'$(ChecksumAzureAccessToken)' == ''" Text="Missing required property 'ChecksumAzureAccessToken'" />
    <Error Condition="'$(ChecksumAzureAccountName)' == ''" Text="Missing required property 'ChecksumAzureAccountName'" />
    <Error Condition="'$(ChecksumContainerName)' == ''" Text="Missing required property 'ChecksumContainerName'" />
    <Message Importance="High" Text="Finalizing Checksums" />
    <FinalizeBuild AccountName="$(ChecksumAzureAccountName)"
                   AccountKey="$(ChecksumAzureAccessToken)"
                   ContainerName="$(ChecksumContainerName)"
                   SemaphoreBlob="Runtime/$(Channel)/checksumPublishSemaphore"
                   Channel="$(Channel)"
                   Version="$(SharedFrameworkNugetVersion)"
                   SharedFrameworkNugetVersion="$(SharedFrameworkNugetVersion)"
                   SharedHostNuGetVersion="$(HostVersion)"
                   ProductVersion="$(ProductVersion)"
                   CommitHash="$(LatestCommit)"
                   FinalizeContainer="Runtime/$(SharedFrameworkNugetVersion)"
                   ForcePublish="true" />
  </Target>

  <Target Name="PublishCoreHostPackages"
          DependsOnTargets="CheckIfAllBuildsHavePublished;DownloadCoreHostPackages;SignPackages;DoPushCoreHostPackagesToFeed;DoPushCoreHostPackagesToAzure"
          Condition="'@(_MissingBlobNames)' == '' AND '$(NuGetFeedUrl)' != ''">
    <Error Condition="'$(NuGetFeedUrl)' ==''" Text="Missing required property NuGetFeedUrl" />
    <Error Condition="'$(NuGetApiKey)' == ''" Text="Missing required property NuGetApiKey" />
    <Error Condition="'$(AzureAccessToken)' == ''" Text="Missing required property 'AzureAccessToken'" />
    <Error Condition="'$(AzureAccountName)' == ''" Text="Missing required property 'AzureAccountName'" />
    <Error Condition="'$(ContainerName)' == ''" Text="Missing required property 'ContainerName'" />
    <Message Condition="'$(WindowsSdkDir)' == ''" Text="Windows SDK not found.  Symbols packages will not be signed." />
  </Target>

  <Target Name="DownloadCoreHostPackages">
    <ListAzureBlobs AccountName="$(AzureAccountName)"
                      AccountKey="$(AzureAccessToken)"
                      ContainerName="$(ContainerName)"
                      FilterBlobNames="Runtime/$(SharedFrameworkNugetVersion)/">
      <Output TaskParameter="BlobNames" ItemName="_BlobList" />
    </ListAzureBlobs>
    <ItemGroup>
      <_CoreHostPackages Include="%(_BlobList.Identity)" />
    </ItemGroup>
    <PropertyGroup>
      <DownloadDirectory Condition="'$(DownloadDirectory)' == ''">$(BinDir)PackageDownload/</DownloadDirectory>
      <!-- The SignFiles target needs OutDir to be defined -->
      <OutDir>$(DownloadDirectory)</OutDir>
    </PropertyGroup>
    <MakeDir Directories="$(DownloadDirectory)"
             Condition="!Exists('$(DownloadDirectory)')" />
    <DownloadFromAzure AccountName="$(AzureAccountName)"
                           AccountKey="$(AzureAccessToken)"
                           ContainerName="$(ContainerName)"
                           BlobNames="@(_CoreHostPackages)"
                           BlobNamePrefix="Runtime/$(SharedFrameworkNugetVersion)/"
                           DownloadDirectory="$(DownloadDirectory)" />
    <ItemGroup>
      <_DownloadedAssets Include="@(_CoreHostPackages->'$(DownloadDirectory)%(Filename)%(Extension)')" />
      <_DownloadedPackages Include="%(_DownloadedAssets.Identity)"
                           Condition="$([System.String]::new('%(_DownloadedAssets.Identity)').EndsWith('.nupkg'))" />
      <_DownloadedSymbolsPackages Include="%(_DownloadedPackages.Identity)"
                                 Condition="$([System.String]::new('%(_DownloadedPackages.Identity)').EndsWith('.symbols.nupkg'))" />
      <_DownloadedStandardPackages Include="@(_DownloadedPackages)"
                                  Exclude="@(_DownloadedSymbolsPackages)"
                                  Condition="$([System.String]::new('%(_DownloadedPackages.Identity)').EndsWith('.nupkg'))" />
    </ItemGroup>
  </Target>

  <Target Name="SetupPublishSymbols" Condition="'$(SymbolServerPath)'!=''" >
    <PropertyGroup>
      <SymbolExpirationInDays Condition="'$(SymbolExpirationInDays)'=='' and '$(SymbolExpirationDate)'==''">1</SymbolExpirationInDays>
      <ConvertPortablePdbsToWindowsPdbs>false</ConvertPortablePdbsToWindowsPdbs>
    </PropertyGroup>
    <ItemGroup>
      <SymbolPackagesToPublish Include="$(DownloadDirectory)**\*.symbols.nupkg" Exclude="$(DownloadDirectory)**\*freebsd*.nupkg" />
    </ItemGroup>
    <Error Condition="'$(SymbolServerPAT)'==''" Text="Missing property SymbolServerPAT" />
    <Message Importance="High" Text="Publishing @(SymbolPackagesToPublish) to $(SymbolServerPath)"/>
  </Target>

  <Target Name="DoPushCoreHostPackagesToFeed">
    <Error Condition="'@(_DownloadedSymbolsPackages)' != '' and '$(NuGetSymbolsFeedUrl)' == ''" Text="Missing required property NuGetSymbolsFeedUrl" />

    <Message Text="Pushing CoreHost packages to $(NuGetFeedUrl)" />
    <PropertyGroup>
      <NuGetPushCommand>$(DotnetToolCommand) nuget push --source $(NuGetFeedUrl) --api-key $(NuGetApiKey) --timeout $(NuGetPushTimeoutSeconds)</NuGetPushCommand>
      <NuGetPushSymbolsCommand>$(DotnetToolCommand) nuget push --source $(NuGetSymbolsFeedUrl) --api-key $(NuGetApiKey) --timeout $(NuGetPushTimeoutSeconds)</NuGetPushSymbolsCommand>
    </PropertyGroup>

    <ExecWithRetriesForNuGetPush Command="$(NuGetPushCommand) %(_DownloadedStandardPackages.Identity)"
                                 IgnoredErrorMessagesWithConditional="@(IgnorableErrorMessages)" />

    <Message Condition="'@(_DownloadedSymbolsPackages)' != ''" Text="Pushing CoreHost symbols packages to $(NuGetSymbolsFeedUrl)" />
    <ExecWithRetriesForNuGetPush Condition="'@(_DownloadedSymbolsPackages)' != ''"
                                 Command="$(NuGetPushSymbolsCommand) %(_DownloadedSymbolsPackages.Identity)"
                                 IgnoredErrorMessagesWithConditional="@(IgnorableErrorMessages)" />
  </Target>

  <Target Name="DoPushCoreHostPackagesToAzure"
          DependsOnTargets="PublishToAzureBlobFeed;PublishFilesToAzureBlobFeed"
          Condition="'$(OfficialPublish)' == 'true'"/>

  <Target Name="PublishToAzureBlobFeed">
    <Error Condition="'$(PackagesUrl)'==''" Text="Missing property PackagesUrl" />
    <Error Condition="'$(TransportFeedAccessToken)'==''" Text="Missing property TransportFeedAccessToken" />
    <PropertyGroup>
      <ExpectedFeedUrl>$(PackagesUrl)</ExpectedFeedUrl>
      <AssetManifestFilePath>$(BUILD_SOURCESDIRECTORY)/artifacts/log/AssetManifest/Manifest.xml</AssetManifestFilePath>
    </PropertyGroup>
    <ItemGroup>
      <ItemsToPush Remove="@(ItemsToPush)" />
      <ItemsToPush Include="@(_DownloadedStandardPackages)"/>
      <ItemsToPush Include="@(_DownloadedSymbolsPackages)"/>
    </ItemGroup>
    <PushToBlobFeed ExpectedFeedUrl="$(ExpectedFeedUrl)"
                    AccountKey="$(TransportFeedAccessToken)"
                    ItemsToPush="@(ItemsToPush)"
                    Overwrite="$(OverwriteOnPublish)" 
                    ManifestBuildData="Location=$(ExpectedFeedUrl)"
                    ManifestRepoUri="$(BUILD_REPOSITORY_URI)"
                    ManifestBranch="$(BUILD_SOURCEBRANCH)"
                    ManifestBuildId="$(BUILD_BUILDNUMBER)"
                    ManifestCommit="$(BUILD_SOURCEVERSION)" 
                    AssetManifestPath="$(AssetManifestFilePath)"
                    />
  </Target>
  
  <Target Name="PublishFilesToAzureBlobFeed">
  <Error Condition="'$(PackagesUrl)'==''" Text="Missing property PackagesUrl" />
  <Error Condition="'$(TransportFeedAccessToken)'==''" Text="Missing property TransportFeedAccessToken" />
  <PropertyGroup>
    <ExpectedFeedUrl>$(PackagesUrl)</ExpectedFeedUrl>
    <AssetManifestFilePath>$(BUILD_SOURCESDIRECTORY)/artifacts/log/AssetManifest/Manifest_Installers.xml</AssetManifestFilePath>
  </PropertyGroup>
  <ItemGroup>
    <ItemsToPush Remove="@(ItemsToPush)" />
    <ItemsToPush Include="@(_DownloadedAssets)"
                 Exclude="@(_DownloadedPackages)" />
    <ItemsToPush>
        <RelativeBlobPath>assets/core-setup/$(InstallersRelativePath)%(Filename)%(Extension)</RelativeBlobPath>
    </ItemsToPush>
  </ItemGroup>
  <PushToBlobFeed ExpectedFeedUrl="$(ExpectedFeedUrl)"
                  AccountKey="$(TransportFeedAccessToken)"
                  ItemsToPush="@(ItemsToPush)"
                  PublishFlatContainer="true"
                  Overwrite="$(OverwriteOnPublish)" 
                  ManifestBuildData="Location=$(ExpectedFeedUrl)"
                  ManifestRepoUri="$(BUILD_REPOSITORY_URI)"
                  ManifestBranch="$(BUILD_SOURCEBRANCH)"
                  ManifestBuildId="$(BUILD_BUILDNUMBER)"
                  ManifestCommit="$(BUILD_SOURCEVERSION)" 
                  AssetManifestPath="$(AssetManifestFilePath)"
                  />
</Target>

  <Import Project="$(ToolsDir)VersionTools.targets" Condition="Exists('$(ToolsDir)VersionTools.targets')" />
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />
</Project>
