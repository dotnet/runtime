<?xml version="1.0" encoding="utf-8"?>
<Project InitialTargets="SetSigningProperties" DefaultTargets="SignFiles" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildThisFileDirectory)..\dir.props" />

  <!-- This will be overridden if we're building with MicroBuild. -->
  <Target Name="SignFiles">
    <Message Text="Fake sign target.  Would sign: @(FilesToSign)" />
  </Target>

  <Import Project="$(ToolsDir)MicroBuild.Core.props" />
  <Import Project="$(ToolsDir)MicroBuild.Core.targets" />

  <Target Name="SetSigningProperties">
    <Error Condition="'$(OutputRid)' == ''" Text="Missing required property 'OutputRid'." />
    <Error Condition="'$(CertificateId)' == ''" Text="Missing required property 'CertificateId'." />
    <PropertyGroup>
      <!-- The OutDir and IntermediateOutputPath properties are required by MicroBuild. MicroBuild only
           signs files that are under these paths. -->
      <OutDir Condition="'$(OutDir)' == ''">$(BaseOutputRootPath)/</OutDir>
      <IntermediateOutputPath Condition="'$(IntermediateOutputPath)' == ''">$(IntermediateOutputRootPath)</IntermediateOutputPath>
    </PropertyGroup>
    <Error Condition="!Exists('$(OutDir)')" Text="'OutDir' folder '$(OutDir)' does not exist."/>
  </Target>

  <Target Name="SignBinaries" Condition="'$(SignType)' == 'real'" DependsOnTargets="GetSignBinaryFiles">
    <CallTarget Targets="SignFiles" />
  </Target>

  <Target Name="GetSignBinaryFiles">
    <ItemGroup>
      <FilesToSign Include="$(OutDir)corehost/**/hostfxr.dll">
        <Authenticode>$(CertificateId)</Authenticode>
      </FilesToSign>
      <FilesToSign Include="$(OutDir)corehost/**/hostpolicy.dll">
        <Authenticode>$(CertificateId)</Authenticode>
      </FilesToSign>
      <FilesToSign Include="$(OutDir)corehost/**/dotnet.exe">
        <Authenticode>$(CertificateId)</Authenticode>
      </FilesToSign>
      <FilesToSign Include="$(OutDir)Microsoft.Build.Net.CoreRuntimeTask/**/Microsoft.Build.Net.CoreRuntimeTask.dll">
        <Authenticode>$(CertificateId)</Authenticode>
        <StrongName>StrongName</StrongName>
      </FilesToSign>
    </ItemGroup>

    <ItemGroup>
      <FilesToSign Include="$(CrossGenRootPath)/**/*.dll">
        <Authenticode>$(CertificateId)</Authenticode>
      </FilesToSign>
    </ItemGroup>

    <ItemGroup>
      <FilesToSign Include="$(IntermediateOutputPath)forPackaging/**/*.dll">
        <Authenticode>$(CertificateId)</Authenticode>
      </FilesToSign>
    </ItemGroup>

    <ItemGroup>
      <FilesToSign Include="$(UWPOutputDir)*.dll">
        <Authenticode>$(CertificateId)</Authenticode>
      </FilesToSign>
      <FilesToSign Include="$(UWPOutputDir)*.exe">
        <Authenticode>$(CertificateId)</Authenticode>
      </FilesToSign>
    </ItemGroup>
    <Error Condition="'@(FilesToSign)' == ''" Text="There are no files to sign. FilesToSign group is empty."/>
  </Target>

  <Target Name="SignAppxFiles" Condition="'$(SignType)' == 'real'" DependsOnTargets="GetSignAppxFiles">
    <CallTarget Targets="SignFiles" />
  </Target>
  
  <Target Name="GetSignAppxFiles">
    <ItemGroup>
      <FilesToSign Include="$(UWPOutputDir)*.appx">
        <Authenticode>Appx</Authenticode>
      </FilesToSign>
    </ItemGroup>
    <Error Condition="'@(FilesToSign)' == '' AND '$(Platform)' != 'arm64'" Text="There are no files to sign. FilesToSign group is empty."/>
  </Target>

  <Target Name="SignMsiAndCab" Condition="'$(SignType)' == 'real'" DependsOnTargets="GetSignMsiAndCabFiles">
    <CallTarget Targets="SignFiles" />
  </Target>

  <Target Name="GetSignMsiAndCabFiles">
    <ItemGroup>
      <FilesToSign Include="$(OutDir)packages/**/*.msi">
        <Authenticode>$(CertificateId)</Authenticode>
      </FilesToSign>
      <FilesToSign Include="$(OutDir)packages/**/*.cab">
        <Authenticode>$(CertificateId)</Authenticode>
      </FilesToSign>
    </ItemGroup>
    <Error Condition="'@(FilesToSign)' == ''" Text="There are no files to sign. FilesToSign group is empty."/>
  </Target>

  <Target Name="SignEngine" Condition="'$(SignType)' == 'real'" DependsOnTargets="GetSignEngineFiles">
    <CallTarget Targets="SignFiles" />
  </Target>

  <Target Name="GetSignEngineFiles">
    <ItemGroup>
      <FilesToSign Include="$(OutDir)packages/**/*engine.exe">
        <Authenticode>$(CertificateId)</Authenticode>
      </FilesToSign>
    </ItemGroup>
    <Error Condition="'@(FilesToSign)' == ''" Text="There are no files to sign. FilesToSign group is empty."/>
  </Target>

  <Target Name="SignBundle" Condition="'$(SignType)' == 'real'" DependsOnTargets="GetSignBundleFiles">
    <CallTarget Targets="SignFiles" />
  </Target>

  <Target Name="GetSignBundleFiles">
    <ItemGroup>
      <FilesToSign Include="$(OutDir)packages/**/*.exe">
        <Authenticode>$(CertificateId)</Authenticode>
      </FilesToSign>
    </ItemGroup>
    <Error Condition="'@(FilesToSign)' == ''" Text="There are no files to sign. FilesToSign group is empty."/>
  </Target>

</Project>
