<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Validate" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildThisFileDirectory)dir.props" />
  <UsingTask TaskName="DownloadFromAzure" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.CloudTestTasks.dll" />
  <UsingTask TaskName="ListAzureBlobs" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.CloudTestTasks.dll" />
  <UsingTask TaskName="ValidateBinInspectResults" AssemblyFile="$(LocalBuildToolsTaskDir)core-setup.tasks.dll" />

  <Target Name="Validate" DependsOnTargets="BinInspectBinaries;ValidateBinInspectResults" />

  <!-- Get Azure blob list which we want to validate are signed -->
  <Target Name="GetBlobList">
    <Error Condition="'$(AzureAccessToken)' == ''" Text="Missing required property 'AzureAccessToken'" />
    <Error Condition="'$(AzureAccountName)' == ''" Text="Missing required property 'AzureAccountName'" />
    <Error Condition="'$(ContainerName)' == ''" Text="Missing required property 'ContainerName'" />
    <Message Importance="High" Text="Retrieving artifact list from Azure..." />
    <ListAzureBlobs AccountName="$(AzureAccountName)"
                      AccountKey="$(AzureAccessToken)"
                      ContainerName="$(ContainerName)"
                      FilterBlobNames="$(FilterBlobNames)">
      <Output TaskParameter="BlobNames" ItemName="_BlobList" />
    </ListAzureBlobs>
  </Target>

  <!-- Filter blob list -->
  <Target Name="FilterBlobList"
          DependsOnTargets="GetBlobList"
          Inputs="%(_BlobList.Identity)"
          Outputs="fake">
    <PropertyGroup>
      <BlobName>%(_BlobList.Identity)</BlobName>
      <BlobExtension>%(_BlobList.Extension)</BlobExtension>
      <BlobFilename>%(_BlobList.Filename)%(_BlobList.Extension)</BlobFilename>
    </PropertyGroup>
    <ItemGroup>
      <DownloadArtifact Include="$(BlobName)" Condition="'$(BlobExtension)' == '.exe'" />
      <DownloadArtifact Include="$(BlobName)" Condition="'$(BlobExtension)' == '.msi'" />
      <DownloadArtifact Include="$(BlobName)" Condition="'$(BlobExtension)' == '.zip'" />
      <DownloadArtifact Include="$(BlobName)" Condition="'$(BlobExtension)' == '.nupkg' and $(BlobFilename.StartsWith('runtime.win'))" />
      <DownloadArtifact Include="$(BlobName)" Condition="'$(BlobExtension)' == '.nupkg' and !$(BlobFilename.StartsWith('runtime.'))" />
      <DownloadArtifact Remove="$(BlobName)" Condition="$(BlobFilename.Contains('-armel.')) or
                                                        $(BlobFilename.Contains('-symbols-'))" />
      <DownloadArtifact Remove="$(BlobName)" Condition="$(BlobFilename.EndsWith('.symbols.nupkg'))" />
    </ItemGroup>
  </Target>

  <!-- Download azure blobs for signing validation -->
  <Target Name="DownloadCoreSetupArtifactsFromAzure"
          DependsOnTargets="FilterBlobList">
    <Error Condition="!Exists('$(BuildVersionFile)')" Text="Missing required build version file - '$(BuildVersionFile)', official build id specified was '$(OfficialBuildId)'" />
    <Error Condition="'@(DownloadArtifact)' == ''" Text="No blobs found for signing validation in Container '$(ContainerName)' under path '$(BinariesRelativePath)'." />

    <!-- We don't want to re-validate an old download, so remove the DownloadDirectory -->
    <RemoveDir Directories="$(DownloadDirectory)" 
               Condition="Exists('$(DownloadDirectory)')"/>

    <MakeDir Directories="$(DownloadDirectory)" />
    <MakeDir Directories="$(LogDirectory)"
             Condition="!Exists('$(LogDirectory)')" />

    <Message Importance="High" Text="Downloading artifacts from Azure..." />
    <DownloadFromAzure AccountName="$(AzureAccountName)"
                           AccountKey="$(AzureAccessToken)"
                           ContainerName="$(ContainerName)"
                           BlobNames="@(DownloadArtifact)"
                           BlobNamePrefix="$(FilterBlobNames)"
                           DownloadDirectory="$(DownloadDirectory)" />
  </Target>

  <!-- Validate signing using BinInspect tool -->
  <Target Name="BinInspectBinaries"
          DependsOnTargets="DownloadCoreSetupArtifactsFromAzure">

    <Error Condition="!Exists('$(BinInspectCommand)')" Text="Unable to find '$(BinInspectCommand)'" />

    <PropertyGroup>
      <FullBinInspectCommand>$(BinInspectCommand) /c /o $(LogDirectory) /msu /a /v /x $(DownloadDirectory)</FullBinInspectCommand>
    </PropertyGroup>

    <Message Importance="High" Text="Executing '$(FullBinInspectCommand)'" />
    <!-- BinInspect tool does not support baselining files, so ignore its exit code -->
    <Exec Command="$(FullBinInspectCommand)"
          WorkingDirectory="$(DownloadDirectory)" 
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <!-- Examine the output of the BinInspect tool, filter out baselined files, and report results -->
  <Target Name="ValidateBinInspectResults">
    <Error Condition="!Exists('$(BinInspectResultsXml)')" Text="No results found for BinInspect - missing '$(BinInspectResultsXml)'" />

    <Message Importance="High" Text="Comparing BinInspect results ('$(BinInspectResultsXml)') to baseline" />
    <ValidateBinInspectResults ResultsXml="$(BinInspectResultsXml)"
                               BaselineFiles="@(BinInspectBaselineFile)" />
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />
</Project>