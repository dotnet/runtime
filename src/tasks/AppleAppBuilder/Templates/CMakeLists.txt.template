cmake_minimum_required(VERSION 3.16)

project(%ProjectName%)
enable_language(OBJC ASM)

set(APP_RESOURCES
%AppResources%
)


set_target_properties(lib%ProjectName% PROPERTIES
    FRAMEWORK TRUE
    FRAMEWORK_VERSION C
    MACOSX_FRAMEWORK_IDENTIFIER lib-%ProjectName%
    XCODE_ATTRIBUTE_INSTALL_PATH "@executable_path/Frameworks"
    XCODE_ATTRIBUTE_SUPPORTS_MACCATALYST "YES"
)

add_executable(
    %ProjectName%
    %MainSource%
    runtime.h
    runtime.m
    ${APP_RESOURCES}
)

%Defines%

include_directories("%MonoInclude%")

set_target_properties(%ProjectName% lib-%ProjectName% PROPERTIES
    XCODE_ATTRIBUTE_SUPPORTS_MACCATALYST "YES"
)

set_target_properties(%ProjectName% PROPERTIES
    MACOSX_BUNDLE TRUE
    MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/Info.plist
    XCODE_ATTRIBUTE_ENABLE_BITCODE "NO"
    XCODE_ATTRIBUTE_DEAD_CODE_STRIPPING "NO"
    XCODE_EMIT_EFFECTIVE_PLATFORM_NAME "YES"
    XCODE_EMBED_FRAMEWORKS lib-%ProjectName%
    RESOURCE "${APP_RESOURCES}"
)

set(HARDENED_RUNTIME
%HardenedRuntime%
)

set(HARDENED_RUNTIME_USE_ENTITLEMENTS_FILE
%HardenedRuntimeUseEntitlementsFile%
)

if("${HARDENED_RUNTIME}")
  set_target_properties(%ProjectName% PROPERTIES XCODE_ATTRIBUTE_ENABLE_HARDENED_RUNTIME "YES")
  if("${HARDENED_RUNTIME_USE_ENTITLEMENTS_FILE}")
    set_target_properties(%ProjectName% PROPERTIES XCODE_ATTRIBUTE_CODE_SIGN_ENTITLEMENTS "app.entitlements")
    add_custom_command(
      TARGET %ProjectName% POST_BUILD
      COMMAND if test \"$CODE_SIGN_IDENTITY\"\; then codesign -fs \"$CODE_SIGN_IDENTITY\" $CODESIGNING_FOLDER_PATH/Contents/Resources/*.dylib\; fi
      )
  endif()
endif()

# FIXME: `XCODE_ATTRIBUTE_DEAD_CODE_STRIPPING` should not be NO

target_link_libraries(
    %ProjectName%
    "-framework Foundation"
    "-framework Security"
    "-framework UIKit"
    "-framework GSS"
    "-lz"
    "-lc++"
    "-liconv"
    %APP_LINKER_ARGS%
)
