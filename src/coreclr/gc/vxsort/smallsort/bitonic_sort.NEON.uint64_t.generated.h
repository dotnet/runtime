// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

/////////////////////////////////////////////////////////////////////////////
////
// This file was auto-generated by a tool at 2024-12-18 17:46:04
//
// It is recommended you DO NOT directly edit this file but instead edit
// the code-generator that generated this source file instead.
/////////////////////////////////////////////////////////////////////////////

#ifndef BITONIC_SORT_NEON_UINT64_T_H
#define BITONIC_SORT_NEON_UINT64_T_H

#include <arm_neon.h>
#include "bitonic_sort.h"

namespace vxsort {
namespace smallsort {

extern "C" const uint8_t mask_table_2[16 * 2];

template<> struct bitonic<uint64_t, NEON> {
    static const int N = 2;
    static constexpr uint64_t MAX = std::numeric_limits<uint64_t>::max();
public:

    static INLINE void sort_01v_ascending(uint64x2_t& d01) {
        uint64x2_t min, max, rev;

        rev = vrev64q_u64(d01);
        min = vminq_u64(d01, rev);
        max = vmaxq_u64(d01, rev);
        d01 = vtrn2q_u64(min, max);
    }

    static INLINE void sort_01v_merge_ascending(uint64x2_t& d01) {
        uint64x2_t  min, max, rev

        rev = vrev64q_u64(d01);
        min = vminq_u64(d01, rev);
        max = vmaxq_u64(d01, rev);
        d01 = vtrn2q_u64(min, max);
    }

    static INLINE void sort_01v_descending(uint64x2_t& d01) {
        uint64x2_t min, max, rev;

        rev = vrev64q_u64(d01);
        min = vminq_u64(d01, rev);
        max = vmaxq_u64(d01, rev);
        d01 = vtrn2q_u64(max, min);
    }

    static INLINE void sort_01v_merge_descending(uint64x2_t& d01) {
        uint64x2_t  min, max, rev

        rev = vrev64q_u64(d01);
        min = vminq_u64(d01, rev);
        max = vmaxq_u64(d01, rev);
        d01 = vtrn2q_u64(max, min);
    }

    static INLINE void sort_02v_ascending(uint64x2_t& d01, uint64x2_t& d02) {
        uint64x2_t  tmp;

        sort_01v_ascending(d01);
        sort_01v_descending(d02);

        tmp = d02;
        d02 = vmaxq_u64(d01, d02);
        d01 = vminq_u64(d01, tmp);

        sort_01v_merge_ascending(d01);
        sort_01v_merge_ascending(d02);
    }

    static INLINE void sort_02v_descending(uint64x2_t& d01, uint64x2_t& d02) {
        uint64x2_t  tmp;

        sort_01v_descending(d01);
        sort_01v_ascending(d02);

        tmp = d02;
        d02 = vmaxq_u64(d01, d02);
        d01 = vminq_u64(d01, tmp);

        sort_01v_merge_descending(d01);
        sort_01v_merge_descending(d02);
    }

    static INLINE void sort_02v_merge_ascending(uint64x2_t& d01, uint64x2_t& d02) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d02, d01);
        d01 = vmaxq_u64(d02, tmp);

        sort_01v_merge_ascending(d01);
        sort_01v_merge_ascending(d02);
    }

    static INLINE void sort_02v_merge_descending(uint64x2_t& d01, uint64x2_t& d02) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d02, d01);
        d01 = vmaxq_u64(d02, tmp);

        sort_01v_merge_descending(d01);
        sort_01v_merge_descending(d02);
    }

    static INLINE void sort_03v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03) {
        uint64x2_t  tmp;

        sort_02v_ascending(d01, d02);
        sort_01v_descending(d03);

        tmp = d03;
        d03 = vmaxq_u64(d02, d03);
        d02 = vminq_u64(d02, tmp);

        sort_02v_merge_ascending(d01, d02);
        sort_01v_merge_ascending(d03);
    }

    static INLINE void sort_03v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03) {
        uint64x2_t  tmp;

        sort_02v_descending(d01, d02);
        sort_01v_ascending(d03);

        tmp = d03;
        d03 = vmaxq_u64(d02, d03);
        d02 = vminq_u64(d02, tmp);

        sort_02v_merge_descending(d01, d02);
        sort_01v_merge_descending(d03);
    }

    static INLINE void sort_03v_merge_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d03, d01);
        d01 = vmaxq_u64(d03, tmp);

        sort_02v_merge_ascending(d01, d02);
        sort_01v_merge_ascending(d03);
    }

    static INLINE void sort_03v_merge_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d03, d01);
        d01 = vmaxq_u64(d03, tmp);

        sort_02v_merge_descending(d01, d02);
        sort_01v_merge_descending(d03);
    }

    static INLINE void sort_04v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04) {
        uint64x2_t  tmp;

        sort_02v_ascending(d01, d02);
        sort_02v_descending(d03, d04);

        tmp = d03;
        d03 = vmaxq_u64(d02, d03);
        d02 = vminq_u64(d02, tmp);

        tmp = d04;
        d04 = vmaxq_u64(d01, d04);
        d01 = vminq_u64(d01, tmp);

        sort_02v_merge_ascending(d01, d02);
        sort_02v_merge_ascending(d03, d04);
    }

    static INLINE void sort_04v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04) {
        uint64x2_t  tmp;

        sort_02v_descending(d01, d02);
        sort_02v_ascending(d03, d04);

        tmp = d03;
        d03 = vmaxq_u64(d02, d03);
        d02 = vminq_u64(d02, tmp);

        tmp = d04;
        d04 = vmaxq_u64(d01, d04);
        d01 = vminq_u64(d01, tmp);

        sort_02v_merge_descending(d01, d02);
        sort_02v_merge_descending(d03, d04);
    }

    static INLINE void sort_04v_merge_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d03, d01);
        d01 = vmaxq_u64(d03, tmp);

        tmp = d02;
        d02 = vminq_u64(d04, d02);
        d02 = vmaxq_u64(d04, tmp);

        sort_02v_merge_ascending(d01, d02);
        sort_02v_merge_ascending(d03, d04);
    }

    static INLINE void sort_04v_merge_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d03, d01);
        d01 = vmaxq_u64(d03, tmp);

        tmp = d02;
        d02 = vminq_u64(d04, d02);
        d02 = vmaxq_u64(d04, tmp);

        sort_02v_merge_descending(d01, d02);
        sort_02v_merge_descending(d03, d04);
    }

    static INLINE void sort_05v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05) {
        uint64x2_t  tmp;

        sort_04v_ascending(d01, d02, d03, d04);
        sort_01v_descending(d05);

        tmp = d05;
        d05 = vmaxq_u64(d04, d05);
        d04 = vminq_u64(d04, tmp);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_01v_merge_ascending(d05);
    }

    static INLINE void sort_05v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05) {
        uint64x2_t  tmp;

        sort_04v_descending(d01, d02, d03, d04);
        sort_01v_ascending(d05);

        tmp = d05;
        d05 = vmaxq_u64(d04, d05);
        d04 = vminq_u64(d04, tmp);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_01v_merge_descending(d05);
    }

    static INLINE void sort_05v_merge_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d05, d01);
        d01 = vmaxq_u64(d05, tmp);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_01v_merge_ascending(d05);
    }

    static INLINE void sort_05v_merge_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d05, d01);
        d01 = vmaxq_u64(d05, tmp);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_01v_merge_descending(d05);
    }

    static INLINE void sort_06v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06) {
        uint64x2_t  tmp;

        sort_04v_ascending(d01, d02, d03, d04);
        sort_02v_descending(d05, d06);

        tmp = d05;
        d05 = vmaxq_u64(d04, d05);
        d04 = vminq_u64(d04, tmp);

        tmp = d06;
        d06 = vmaxq_u64(d03, d06);
        d03 = vminq_u64(d03, tmp);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_02v_merge_ascending(d05, d06);
    }

    static INLINE void sort_06v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06) {
        uint64x2_t  tmp;

        sort_04v_descending(d01, d02, d03, d04);
        sort_02v_ascending(d05, d06);

        tmp = d05;
        d05 = vmaxq_u64(d04, d05);
        d04 = vminq_u64(d04, tmp);

        tmp = d06;
        d06 = vmaxq_u64(d03, d06);
        d03 = vminq_u64(d03, tmp);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_02v_merge_descending(d05, d06);
    }

    static INLINE void sort_06v_merge_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d05, d01);
        d01 = vmaxq_u64(d05, tmp);

        tmp = d02;
        d02 = vminq_u64(d06, d02);
        d02 = vmaxq_u64(d06, tmp);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_02v_merge_ascending(d05, d06);
    }

    static INLINE void sort_06v_merge_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d05, d01);
        d01 = vmaxq_u64(d05, tmp);

        tmp = d02;
        d02 = vminq_u64(d06, d02);
        d02 = vmaxq_u64(d06, tmp);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_02v_merge_descending(d05, d06);
    }

    static INLINE void sort_07v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07) {
        uint64x2_t  tmp;

        sort_04v_ascending(d01, d02, d03, d04);
        sort_03v_descending(d05, d06, d07);

        tmp = d05;
        d05 = vmaxq_u64(d04, d05);
        d04 = vminq_u64(d04, tmp);

        tmp = d06;
        d06 = vmaxq_u64(d03, d06);
        d03 = vminq_u64(d03, tmp);

        tmp = d07;
        d07 = vmaxq_u64(d02, d07);
        d02 = vminq_u64(d02, tmp);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_03v_merge_ascending(d05, d06, d07);
    }

    static INLINE void sort_07v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07) {
        uint64x2_t  tmp;

        sort_04v_descending(d01, d02, d03, d04);
        sort_03v_ascending(d05, d06, d07);

        tmp = d05;
        d05 = vmaxq_u64(d04, d05);
        d04 = vminq_u64(d04, tmp);

        tmp = d06;
        d06 = vmaxq_u64(d03, d06);
        d03 = vminq_u64(d03, tmp);

        tmp = d07;
        d07 = vmaxq_u64(d02, d07);
        d02 = vminq_u64(d02, tmp);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_03v_merge_descending(d05, d06, d07);
    }

    static INLINE void sort_07v_merge_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d05, d01);
        d01 = vmaxq_u64(d05, tmp);

        tmp = d02;
        d02 = vminq_u64(d06, d02);
        d02 = vmaxq_u64(d06, tmp);

        tmp = d03;
        d03 = vminq_u64(d07, d03);
        d03 = vmaxq_u64(d07, tmp);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_03v_merge_ascending(d05, d06, d07);
    }

    static INLINE void sort_07v_merge_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d05, d01);
        d01 = vmaxq_u64(d05, tmp);

        tmp = d02;
        d02 = vminq_u64(d06, d02);
        d02 = vmaxq_u64(d06, tmp);

        tmp = d03;
        d03 = vminq_u64(d07, d03);
        d03 = vmaxq_u64(d07, tmp);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_03v_merge_descending(d05, d06, d07);
    }

    static INLINE void sort_08v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08) {
        uint64x2_t  tmp;

        sort_04v_ascending(d01, d02, d03, d04);
        sort_04v_descending(d05, d06, d07, d08);

        tmp = d05;
        d05 = vmaxq_u64(d04, d05);
        d04 = vminq_u64(d04, tmp);

        tmp = d06;
        d06 = vmaxq_u64(d03, d06);
        d03 = vminq_u64(d03, tmp);

        tmp = d07;
        d07 = vmaxq_u64(d02, d07);
        d02 = vminq_u64(d02, tmp);

        tmp = d08;
        d08 = vmaxq_u64(d01, d08);
        d01 = vminq_u64(d01, tmp);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_04v_merge_ascending(d05, d06, d07, d08);
    }

    static INLINE void sort_08v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08) {
        uint64x2_t  tmp;

        sort_04v_descending(d01, d02, d03, d04);
        sort_04v_ascending(d05, d06, d07, d08);

        tmp = d05;
        d05 = vmaxq_u64(d04, d05);
        d04 = vminq_u64(d04, tmp);

        tmp = d06;
        d06 = vmaxq_u64(d03, d06);
        d03 = vminq_u64(d03, tmp);

        tmp = d07;
        d07 = vmaxq_u64(d02, d07);
        d02 = vminq_u64(d02, tmp);

        tmp = d08;
        d08 = vmaxq_u64(d01, d08);
        d01 = vminq_u64(d01, tmp);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_04v_merge_descending(d05, d06, d07, d08);
    }

    static INLINE void sort_08v_merge_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d05, d01);
        d01 = vmaxq_u64(d05, tmp);

        tmp = d02;
        d02 = vminq_u64(d06, d02);
        d02 = vmaxq_u64(d06, tmp);

        tmp = d03;
        d03 = vminq_u64(d07, d03);
        d03 = vmaxq_u64(d07, tmp);

        tmp = d04;
        d04 = vminq_u64(d08, d04);
        d04 = vmaxq_u64(d08, tmp);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_04v_merge_ascending(d05, d06, d07, d08);
    }

    static INLINE void sort_08v_merge_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08) {
        uint64x2_t tmp;

        tmp = d01;
        d01 = vminq_u64(d05, d01);
        d01 = vmaxq_u64(d05, tmp);

        tmp = d02;
        d02 = vminq_u64(d06, d02);
        d02 = vmaxq_u64(d06, tmp);

        tmp = d03;
        d03 = vminq_u64(d07, d03);
        d03 = vmaxq_u64(d07, tmp);

        tmp = d04;
        d04 = vminq_u64(d08, d04);
        d04 = vmaxq_u64(d08, tmp);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_04v_merge_descending(d05, d06, d07, d08);
    }

    static INLINE void sort_09v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09) {
        uint64x2_t  tmp;

        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_01v_descending(d09);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_01v_merge_ascending(d09);
    }

    static INLINE void sort_09v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09) {
        uint64x2_t  tmp;

        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_01v_ascending(d09);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_01v_merge_descending(d09);
    }

    static INLINE void sort_10v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10) {
        uint64x2_t  tmp;

        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_02v_descending(d09, d10);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_02v_merge_ascending(d09, d10);
    }

    static INLINE void sort_10v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10) {
        uint64x2_t  tmp;

        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_02v_ascending(d09, d10);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_02v_merge_descending(d09, d10);
    }

    static INLINE void sort_11v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10, uint64x2_t& d11) {
        uint64x2_t  tmp;

        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_03v_descending(d09, d10, d11);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        tmp = d11;
        d11 = vmaxq_u64(d06, d11);
        d06 = vminq_u64(d06, tmp);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_03v_merge_ascending(d09, d10, d11);
    }

    static INLINE void sort_11v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10, uint64x2_t& d11) {
        uint64x2_t  tmp;

        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_03v_ascending(d09, d10, d11);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        tmp = d11;
        d11 = vmaxq_u64(d06, d11);
        d06 = vminq_u64(d06, tmp);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_03v_merge_descending(d09, d10, d11);
    }

    static INLINE void sort_12v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10, uint64x2_t& d11, uint64x2_t& d12) {
        uint64x2_t  tmp;

        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_04v_descending(d09, d10, d11, d12);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        tmp = d11;
        d11 = vmaxq_u64(d06, d11);
        d06 = vminq_u64(d06, tmp);

        tmp = d12;
        d12 = vmaxq_u64(d05, d12);
        d05 = vminq_u64(d05, tmp);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_04v_merge_ascending(d09, d10, d11, d12);
    }

    static INLINE void sort_12v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10, uint64x2_t& d11, uint64x2_t& d12) {
        uint64x2_t  tmp;

        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_04v_ascending(d09, d10, d11, d12);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        tmp = d11;
        d11 = vmaxq_u64(d06, d11);
        d06 = vminq_u64(d06, tmp);

        tmp = d12;
        d12 = vmaxq_u64(d05, d12);
        d05 = vminq_u64(d05, tmp);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_04v_merge_descending(d09, d10, d11, d12);
    }

    static INLINE void sort_13v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10, uint64x2_t& d11, uint64x2_t& d12, uint64x2_t& d13) {
        uint64x2_t  tmp;

        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_05v_descending(d09, d10, d11, d12, d13);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        tmp = d11;
        d11 = vmaxq_u64(d06, d11);
        d06 = vminq_u64(d06, tmp);

        tmp = d12;
        d12 = vmaxq_u64(d05, d12);
        d05 = vminq_u64(d05, tmp);

        tmp = d13;
        d13 = vmaxq_u64(d04, d13);
        d04 = vminq_u64(d04, tmp);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_05v_merge_ascending(d09, d10, d11, d12, d13);
    }

    static INLINE void sort_13v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10, uint64x2_t& d11, uint64x2_t& d12, uint64x2_t& d13) {
        uint64x2_t  tmp;

        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_05v_ascending(d09, d10, d11, d12, d13);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        tmp = d11;
        d11 = vmaxq_u64(d06, d11);
        d06 = vminq_u64(d06, tmp);

        tmp = d12;
        d12 = vmaxq_u64(d05, d12);
        d05 = vminq_u64(d05, tmp);

        tmp = d13;
        d13 = vmaxq_u64(d04, d13);
        d04 = vminq_u64(d04, tmp);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_05v_merge_descending(d09, d10, d11, d12, d13);
    }

    static INLINE void sort_14v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10, uint64x2_t& d11, uint64x2_t& d12, uint64x2_t& d13, uint64x2_t& d14) {
        uint64x2_t  tmp;

        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_06v_descending(d09, d10, d11, d12, d13, d14);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        tmp = d11;
        d11 = vmaxq_u64(d06, d11);
        d06 = vminq_u64(d06, tmp);

        tmp = d12;
        d12 = vmaxq_u64(d05, d12);
        d05 = vminq_u64(d05, tmp);

        tmp = d13;
        d13 = vmaxq_u64(d04, d13);
        d04 = vminq_u64(d04, tmp);

        tmp = d14;
        d14 = vmaxq_u64(d03, d14);
        d03 = vminq_u64(d03, tmp);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_06v_merge_ascending(d09, d10, d11, d12, d13, d14);
    }

    static INLINE void sort_14v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10, uint64x2_t& d11, uint64x2_t& d12, uint64x2_t& d13, uint64x2_t& d14) {
        uint64x2_t  tmp;

        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_06v_ascending(d09, d10, d11, d12, d13, d14);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        tmp = d11;
        d11 = vmaxq_u64(d06, d11);
        d06 = vminq_u64(d06, tmp);

        tmp = d12;
        d12 = vmaxq_u64(d05, d12);
        d05 = vminq_u64(d05, tmp);

        tmp = d13;
        d13 = vmaxq_u64(d04, d13);
        d04 = vminq_u64(d04, tmp);

        tmp = d14;
        d14 = vmaxq_u64(d03, d14);
        d03 = vminq_u64(d03, tmp);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_06v_merge_descending(d09, d10, d11, d12, d13, d14);
    }

    static INLINE void sort_15v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10, uint64x2_t& d11, uint64x2_t& d12, uint64x2_t& d13, uint64x2_t& d14, uint64x2_t& d15) {
        uint64x2_t  tmp;

        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_07v_descending(d09, d10, d11, d12, d13, d14, d15);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        tmp = d11;
        d11 = vmaxq_u64(d06, d11);
        d06 = vminq_u64(d06, tmp);

        tmp = d12;
        d12 = vmaxq_u64(d05, d12);
        d05 = vminq_u64(d05, tmp);

        tmp = d13;
        d13 = vmaxq_u64(d04, d13);
        d04 = vminq_u64(d04, tmp);

        tmp = d14;
        d14 = vmaxq_u64(d03, d14);
        d03 = vminq_u64(d03, tmp);

        tmp = d15;
        d15 = vmaxq_u64(d02, d15);
        d02 = vminq_u64(d02, tmp);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_07v_merge_ascending(d09, d10, d11, d12, d13, d14, d15);
    }

    static INLINE void sort_15v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10, uint64x2_t& d11, uint64x2_t& d12, uint64x2_t& d13, uint64x2_t& d14, uint64x2_t& d15) {
        uint64x2_t  tmp;

        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_07v_ascending(d09, d10, d11, d12, d13, d14, d15);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        tmp = d11;
        d11 = vmaxq_u64(d06, d11);
        d06 = vminq_u64(d06, tmp);

        tmp = d12;
        d12 = vmaxq_u64(d05, d12);
        d05 = vminq_u64(d05, tmp);

        tmp = d13;
        d13 = vmaxq_u64(d04, d13);
        d04 = vminq_u64(d04, tmp);

        tmp = d14;
        d14 = vmaxq_u64(d03, d14);
        d03 = vminq_u64(d03, tmp);

        tmp = d15;
        d15 = vmaxq_u64(d02, d15);
        d02 = vminq_u64(d02, tmp);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_07v_merge_descending(d09, d10, d11, d12, d13, d14, d15);
    }

    static INLINE void sort_16v_ascending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10, uint64x2_t& d11, uint64x2_t& d12, uint64x2_t& d13, uint64x2_t& d14, uint64x2_t& d15, uint64x2_t& d16) {
        uint64x2_t  tmp;

        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_08v_descending(d09, d10, d11, d12, d13, d14, d15, d16);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        tmp = d11;
        d11 = vmaxq_u64(d06, d11);
        d06 = vminq_u64(d06, tmp);

        tmp = d12;
        d12 = vmaxq_u64(d05, d12);
        d05 = vminq_u64(d05, tmp);

        tmp = d13;
        d13 = vmaxq_u64(d04, d13);
        d04 = vminq_u64(d04, tmp);

        tmp = d14;
        d14 = vmaxq_u64(d03, d14);
        d03 = vminq_u64(d03, tmp);

        tmp = d15;
        d15 = vmaxq_u64(d02, d15);
        d02 = vminq_u64(d02, tmp);

        tmp = d16;
        d16 = vmaxq_u64(d01, d16);
        d01 = vminq_u64(d01, tmp);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_08v_merge_ascending(d09, d10, d11, d12, d13, d14, d15, d16);
    }

    static INLINE void sort_16v_descending(uint64x2_t& d01, uint64x2_t& d02, uint64x2_t& d03, uint64x2_t& d04, uint64x2_t& d05, uint64x2_t& d06, uint64x2_t& d07, uint64x2_t& d08, uint64x2_t& d09, uint64x2_t& d10, uint64x2_t& d11, uint64x2_t& d12, uint64x2_t& d13, uint64x2_t& d14, uint64x2_t& d15, uint64x2_t& d16) {
        uint64x2_t  tmp;

        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_08v_ascending(d09, d10, d11, d12, d13, d14, d15, d16);

        tmp = d09;
        d09 = vmaxq_u64(d08, d09);
        d08 = vminq_u64(d08, tmp);

        tmp = d10;
        d10 = vmaxq_u64(d07, d10);
        d07 = vminq_u64(d07, tmp);

        tmp = d11;
        d11 = vmaxq_u64(d06, d11);
        d06 = vminq_u64(d06, tmp);

        tmp = d12;
        d12 = vmaxq_u64(d05, d12);
        d05 = vminq_u64(d05, tmp);

        tmp = d13;
        d13 = vmaxq_u64(d04, d13);
        d04 = vminq_u64(d04, tmp);

        tmp = d14;
        d14 = vmaxq_u64(d03, d14);
        d03 = vminq_u64(d03, tmp);

        tmp = d15;
        d15 = vmaxq_u64(d02, d15);
        d02 = vminq_u64(d02, tmp);

        tmp = d16;
        d16 = vmaxq_u64(d01, d16);
        d01 = vminq_u64(d01, tmp);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_08v_merge_descending(d09, d10, d11, d12, d13, d14, d15, d16);
    }


    static NOINLINE void sort_01v_alt(uint64_t *ptr, int remainder) {


        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d01orig = vld1q_u64(ptr + 0);
        const uint64_t d01origlower = vandq_u64(d01orig, mask);
        const uint64_t d01origupper = vandq_u64(d01orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d01 = veorq_u64(d01origlower, maxupper);

        sort_01v_ascending(d01);

        const uint64_t d01lower = vandq_u64(d01, mask);
        const uint64_t d01merged = veorq_u64(d01lower, d01origupper);

        vst1q_s64(ptr + 0, d01merged);
    }


    static NOINLINE void sort_02v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d02orig = vld1q_u64(ptr + 0);
        const uint64_t d02origlower = vandq_u64(d02orig, mask);
        const uint64_t d02origupper = vandq_u64(d02orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d02 = veorq_u64(d02origlower, maxupper);

        sort_02v_ascending(d01, d02);

        const uint64_t d02lower = vandq_u64(d02, mask);
        const uint64_t d02merged = veorq_u64(d02lower, d02origupper);

        vst1q_s64(ptr + 0, d02merged);
    }


    static NOINLINE void sort_03v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d03orig = vld1q_u64(ptr + 0);
        const uint64_t d03origlower = vandq_u64(d03orig, mask);
        const uint64_t d03origupper = vandq_u64(d03orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d03 = veorq_u64(d03origlower, maxupper);

        sort_03v_ascending(d01, d02, d03);

        const uint64_t d03lower = vandq_u64(d03, mask);
        const uint64_t d03merged = veorq_u64(d03lower, d03origupper);

        vst1q_s64(ptr + 0, d03merged);
    }


    static NOINLINE void sort_04v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d04orig = vld1q_u64(ptr + 0);
        const uint64_t d04origlower = vandq_u64(d04orig, mask);
        const uint64_t d04origupper = vandq_u64(d04orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d04 = veorq_u64(d04origlower, maxupper);

        sort_04v_ascending(d01, d02, d03, d04);

        const uint64_t d04lower = vandq_u64(d04, mask);
        const uint64_t d04merged = veorq_u64(d04lower, d04origupper);

        vst1q_s64(ptr + 0, d04merged);
    }


    static NOINLINE void sort_05v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);
        uint64x2_t d04 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d05orig = vld1q_u64(ptr + 0);
        const uint64_t d05origlower = vandq_u64(d05orig, mask);
        const uint64_t d05origupper = vandq_u64(d05orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d05 = veorq_u64(d05origlower, maxupper);

        sort_05v_ascending(d01, d02, d03, d04, d05);

        const uint64_t d05lower = vandq_u64(d05, mask);
        const uint64_t d05merged = veorq_u64(d05lower, d05origupper);

        vst1q_s64(ptr + 0, d05merged);
    }


    static NOINLINE void sort_06v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);
        uint64x2_t d04 = vld1q_u64(ptr + l);
        uint64x2_t d05 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d06orig = vld1q_u64(ptr + 0);
        const uint64_t d06origlower = vandq_u64(d06orig, mask);
        const uint64_t d06origupper = vandq_u64(d06orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d06 = veorq_u64(d06origlower, maxupper);

        sort_06v_ascending(d01, d02, d03, d04, d05, d06);

        const uint64_t d06lower = vandq_u64(d06, mask);
        const uint64_t d06merged = veorq_u64(d06lower, d06origupper);

        vst1q_s64(ptr + 0, d06merged);
    }


    static NOINLINE void sort_07v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);
        uint64x2_t d04 = vld1q_u64(ptr + l);
        uint64x2_t d05 = vld1q_u64(ptr + l);
        uint64x2_t d06 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d07orig = vld1q_u64(ptr + 0);
        const uint64_t d07origlower = vandq_u64(d07orig, mask);
        const uint64_t d07origupper = vandq_u64(d07orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d07 = veorq_u64(d07origlower, maxupper);

        sort_07v_ascending(d01, d02, d03, d04, d05, d06, d07);

        const uint64_t d07lower = vandq_u64(d07, mask);
        const uint64_t d07merged = veorq_u64(d07lower, d07origupper);

        vst1q_s64(ptr + 0, d07merged);
    }


    static NOINLINE void sort_08v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);
        uint64x2_t d04 = vld1q_u64(ptr + l);
        uint64x2_t d05 = vld1q_u64(ptr + l);
        uint64x2_t d06 = vld1q_u64(ptr + l);
        uint64x2_t d07 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d08orig = vld1q_u64(ptr + 0);
        const uint64_t d08origlower = vandq_u64(d08orig, mask);
        const uint64_t d08origupper = vandq_u64(d08orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d08 = veorq_u64(d08origlower, maxupper);

        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);

        const uint64_t d08lower = vandq_u64(d08, mask);
        const uint64_t d08merged = veorq_u64(d08lower, d08origupper);

        vst1q_s64(ptr + 0, d08merged);
    }


    static NOINLINE void sort_09v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);
        uint64x2_t d04 = vld1q_u64(ptr + l);
        uint64x2_t d05 = vld1q_u64(ptr + l);
        uint64x2_t d06 = vld1q_u64(ptr + l);
        uint64x2_t d07 = vld1q_u64(ptr + l);
        uint64x2_t d08 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d09orig = vld1q_u64(ptr + 0);
        const uint64_t d09origlower = vandq_u64(d09orig, mask);
        const uint64_t d09origupper = vandq_u64(d09orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d09 = veorq_u64(d09origlower, maxupper);

        sort_09v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09);

        const uint64_t d09lower = vandq_u64(d09, mask);
        const uint64_t d09merged = veorq_u64(d09lower, d09origupper);

        vst1q_s64(ptr + 0, d09merged);
    }


    static NOINLINE void sort_10v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);
        uint64x2_t d04 = vld1q_u64(ptr + l);
        uint64x2_t d05 = vld1q_u64(ptr + l);
        uint64x2_t d06 = vld1q_u64(ptr + l);
        uint64x2_t d07 = vld1q_u64(ptr + l);
        uint64x2_t d08 = vld1q_u64(ptr + l);
        uint64x2_t d09 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d10orig = vld1q_u64(ptr + 0);
        const uint64_t d10origlower = vandq_u64(d10orig, mask);
        const uint64_t d10origupper = vandq_u64(d10orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d10 = veorq_u64(d10origlower, maxupper);

        sort_10v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10);

        const uint64_t d10lower = vandq_u64(d10, mask);
        const uint64_t d10merged = veorq_u64(d10lower, d10origupper);

        vst1q_s64(ptr + 0, d10merged);
    }


    static NOINLINE void sort_11v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);
        uint64x2_t d04 = vld1q_u64(ptr + l);
        uint64x2_t d05 = vld1q_u64(ptr + l);
        uint64x2_t d06 = vld1q_u64(ptr + l);
        uint64x2_t d07 = vld1q_u64(ptr + l);
        uint64x2_t d08 = vld1q_u64(ptr + l);
        uint64x2_t d09 = vld1q_u64(ptr + l);
        uint64x2_t d10 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d11orig = vld1q_u64(ptr + 0);
        const uint64_t d11origlower = vandq_u64(d11orig, mask);
        const uint64_t d11origupper = vandq_u64(d11orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d11 = veorq_u64(d11origlower, maxupper);

        sort_11v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11);

        const uint64_t d11lower = vandq_u64(d11, mask);
        const uint64_t d11merged = veorq_u64(d11lower, d11origupper);

        vst1q_s64(ptr + 0, d11merged);
    }


    static NOINLINE void sort_12v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);
        uint64x2_t d04 = vld1q_u64(ptr + l);
        uint64x2_t d05 = vld1q_u64(ptr + l);
        uint64x2_t d06 = vld1q_u64(ptr + l);
        uint64x2_t d07 = vld1q_u64(ptr + l);
        uint64x2_t d08 = vld1q_u64(ptr + l);
        uint64x2_t d09 = vld1q_u64(ptr + l);
        uint64x2_t d10 = vld1q_u64(ptr + l);
        uint64x2_t d11 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d12orig = vld1q_u64(ptr + 0);
        const uint64_t d12origlower = vandq_u64(d12orig, mask);
        const uint64_t d12origupper = vandq_u64(d12orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d12 = veorq_u64(d12origlower, maxupper);

        sort_12v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11, d12);

        const uint64_t d12lower = vandq_u64(d12, mask);
        const uint64_t d12merged = veorq_u64(d12lower, d12origupper);

        vst1q_s64(ptr + 0, d12merged);
    }


    static NOINLINE void sort_13v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);
        uint64x2_t d04 = vld1q_u64(ptr + l);
        uint64x2_t d05 = vld1q_u64(ptr + l);
        uint64x2_t d06 = vld1q_u64(ptr + l);
        uint64x2_t d07 = vld1q_u64(ptr + l);
        uint64x2_t d08 = vld1q_u64(ptr + l);
        uint64x2_t d09 = vld1q_u64(ptr + l);
        uint64x2_t d10 = vld1q_u64(ptr + l);
        uint64x2_t d11 = vld1q_u64(ptr + l);
        uint64x2_t d12 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d13orig = vld1q_u64(ptr + 0);
        const uint64_t d13origlower = vandq_u64(d13orig, mask);
        const uint64_t d13origupper = vandq_u64(d13orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d13 = veorq_u64(d13origlower, maxupper);

        sort_13v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11, d12, d13);

        const uint64_t d13lower = vandq_u64(d13, mask);
        const uint64_t d13merged = veorq_u64(d13lower, d13origupper);

        vst1q_s64(ptr + 0, d13merged);
    }


    static NOINLINE void sort_14v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);
        uint64x2_t d04 = vld1q_u64(ptr + l);
        uint64x2_t d05 = vld1q_u64(ptr + l);
        uint64x2_t d06 = vld1q_u64(ptr + l);
        uint64x2_t d07 = vld1q_u64(ptr + l);
        uint64x2_t d08 = vld1q_u64(ptr + l);
        uint64x2_t d09 = vld1q_u64(ptr + l);
        uint64x2_t d10 = vld1q_u64(ptr + l);
        uint64x2_t d11 = vld1q_u64(ptr + l);
        uint64x2_t d12 = vld1q_u64(ptr + l);
        uint64x2_t d13 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d14orig = vld1q_u64(ptr + 0);
        const uint64_t d14origlower = vandq_u64(d14orig, mask);
        const uint64_t d14origupper = vandq_u64(d14orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d14 = veorq_u64(d14origlower, maxupper);

        sort_14v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11, d12, d13, d14);

        const uint64_t d14lower = vandq_u64(d14, mask);
        const uint64_t d14merged = veorq_u64(d14lower, d14origupper);

        vst1q_s64(ptr + 0, d14merged);
    }


    static NOINLINE void sort_15v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);
        uint64x2_t d04 = vld1q_u64(ptr + l);
        uint64x2_t d05 = vld1q_u64(ptr + l);
        uint64x2_t d06 = vld1q_u64(ptr + l);
        uint64x2_t d07 = vld1q_u64(ptr + l);
        uint64x2_t d08 = vld1q_u64(ptr + l);
        uint64x2_t d09 = vld1q_u64(ptr + l);
        uint64x2_t d10 = vld1q_u64(ptr + l);
        uint64x2_t d11 = vld1q_u64(ptr + l);
        uint64x2_t d12 = vld1q_u64(ptr + l);
        uint64x2_t d13 = vld1q_u64(ptr + l);
        uint64x2_t d14 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d15orig = vld1q_u64(ptr + 0);
        const uint64_t d15origlower = vandq_u64(d15orig, mask);
        const uint64_t d15origupper = vandq_u64(d15orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d15 = veorq_u64(d15origlower, maxupper);

        sort_15v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11, d12, d13, d14, d15);

        const uint64_t d15lower = vandq_u64(d15, mask);
        const uint64_t d15merged = veorq_u64(d15lower, d15origupper);

        vst1q_s64(ptr + 0, d15merged);
    }


    static NOINLINE void sort_16v_alt(uint64_t *ptr, int remainder) {

        uint64x2_t d01 = vld1q_u64(ptr + l);
        uint64x2_t d02 = vld1q_u64(ptr + l);
        uint64x2_t d03 = vld1q_u64(ptr + l);
        uint64x2_t d04 = vld1q_u64(ptr + l);
        uint64x2_t d05 = vld1q_u64(ptr + l);
        uint64x2_t d06 = vld1q_u64(ptr + l);
        uint64x2_t d07 = vld1q_u64(ptr + l);
        uint64x2_t d08 = vld1q_u64(ptr + l);
        uint64x2_t d09 = vld1q_u64(ptr + l);
        uint64x2_t d10 = vld1q_u64(ptr + l);
        uint64x2_t d11 = vld1q_u64(ptr + l);
        uint64x2_t d12 = vld1q_u64(ptr + l);
        uint64x2_t d13 = vld1q_u64(ptr + l);
        uint64x2_t d14 = vld1q_u64(ptr + l);
        uint64x2_t d15 = vld1q_u64(ptr + l);

        const uint64_t mask = vld1q_u64(mask_table_2 + remainder * N);
        const uint64_t maskinv = vmvn_u64(mask);

        const uint64_t d16orig = vld1q_u64(ptr + 0);
        const uint64_t d16origlower = vandq_u64(d16orig, mask);
        const uint64_t d16origupper = vandq_u64(d16orig, maskinv);

        const uint64_t max = vdupq_n_u64(MAX);
        const uint64_t maxupper = vandq_u64(max, maskinv);

        const uint64_t d16 = veorq_u64(d16origlower, maxupper);

        sort_16v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11, d12, d13, d14, d15, d16);

        const uint64_t d16lower = vandq_u64(d16, mask);
        const uint64_t d16merged = veorq_u64(d16lower, d16origupper);

        vst1q_s64(ptr + 0, d16merged);
    }

    static void sort(uint64_t *ptr, size_t length);

};
}
}

#endif // BITONIC_SORT_NEON

    
