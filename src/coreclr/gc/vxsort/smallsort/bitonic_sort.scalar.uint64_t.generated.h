// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

/////////////////////////////////////////////////////////////////////////////
////
// This file was auto-generated by a tool at 2025-09-12 13:54:31
//
// It is recommended you DO NOT directly edit this file but instead edit
// the code-generator that generated this source file instead.
/////////////////////////////////////////////////////////////////////////////

#ifndef BITONIC_SORT_SCALAR_UINT64_T_H
#define BITONIC_SORT_SCALAR_UINT64_T_H

#include "bitonic_sort.h"

namespace vxsort {
namespace smallsort {

struct uint64_t_v
{
 uint64_t a;
 uint64_t b;
};

template<> struct bitonic<uint64_t, scalar> {
    static const int N = 2;
    static constexpr uint64_t MAX = std::numeric_limits<uint64_t>::max();
public:

    static INLINE void sort_01v_ascending(uint64_t_v& d01) {
        if (d01.a > d01.b) std::swap(d01.a, d01.b);
    }

    static INLINE void sort_01v_merge_ascending(uint64_t_v& d01) {
        if (d01.a > d01.b) std::swap(d01.a, d01.b);
    }

    static INLINE void sort_01v_descending(uint64_t_v& d01) {
        if (d01.a < d01.b) std::swap(d01.a, d01.b);
    }

    static INLINE void sort_01v_merge_descending(uint64_t_v& d01) {
        if (d01.a < d01.b) std::swap(d01.a, d01.b);
    }

    static INLINE void sort_02v_ascending(uint64_t_v& d01, uint64_t_v& d02) {
        sort_01v_ascending(d01);
        sort_01v_descending(d02);

        if (d01.a > d02.a) std::swap(d01.a, d02.a);
        if (d01.b > d02.b) std::swap(d01.b, d02.b);

        sort_01v_merge_ascending(d01);
        sort_01v_merge_ascending(d02);
    }

    static INLINE void sort_02v_descending(uint64_t_v& d01, uint64_t_v& d02) {
        sort_01v_descending(d01);
        sort_01v_ascending(d02);

        if (d01.a > d02.a) std::swap(d01.a, d02.a);
        if (d01.b > d02.b) std::swap(d01.b, d02.b);

        sort_01v_merge_descending(d01);
        sort_01v_merge_descending(d02);
    }

    static INLINE void sort_02v_merge_ascending(uint64_t_v& d01, uint64_t_v& d02) {

        if (d01.a > d02.a) std::swap(d01.a, d02.a);
        if (d01.b > d02.b) std::swap(d01.b, d02.b);

        sort_01v_merge_ascending(d01);
        sort_01v_merge_ascending(d02);
    }

    static INLINE void sort_02v_merge_descending(uint64_t_v& d01, uint64_t_v& d02) {

        if (d01.a > d02.a) std::swap(d01.a, d02.a);
        if (d01.b > d02.b) std::swap(d01.b, d02.b);

        sort_01v_merge_descending(d01);
        sort_01v_merge_descending(d02);
    }

    static INLINE void sort_03v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03) {
        sort_02v_ascending(d01, d02);
        sort_01v_descending(d03);

        if (d02.a > d03.a) std::swap(d02.a, d03.a);
        if (d02.b > d03.b) std::swap(d02.b, d03.b);

        sort_02v_merge_ascending(d01, d02);
        sort_01v_merge_ascending(d03);
    }

    static INLINE void sort_03v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03) {
        sort_02v_descending(d01, d02);
        sort_01v_ascending(d03);

        if (d02.a > d03.a) std::swap(d02.a, d03.a);
        if (d02.b > d03.b) std::swap(d02.b, d03.b);

        sort_02v_merge_descending(d01, d02);
        sort_01v_merge_descending(d03);
    }

    static INLINE void sort_03v_merge_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03) {

        if (d01.a > d03.a) std::swap(d01.a, d03.a);
        if (d01.b > d03.b) std::swap(d01.b, d03.b);

        sort_02v_merge_ascending(d01, d02);
        sort_01v_merge_ascending(d03);
    }

    static INLINE void sort_03v_merge_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03) {

        if (d01.a > d03.a) std::swap(d01.a, d03.a);
        if (d01.b > d03.b) std::swap(d01.b, d03.b);

        sort_02v_merge_descending(d01, d02);
        sort_01v_merge_descending(d03);
    }

    static INLINE void sort_04v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04) {
        sort_02v_ascending(d01, d02);
        sort_02v_descending(d03, d04);

        if (d02.a > d03.a) std::swap(d02.a, d03.a);
        if (d02.b > d03.b) std::swap(d02.b, d03.b);

        if (d01.a > d04.a) std::swap(d01.a, d04.a);
        if (d01.b > d04.b) std::swap(d01.b, d04.b);

        sort_02v_merge_ascending(d01, d02);
        sort_02v_merge_ascending(d03, d04);
    }

    static INLINE void sort_04v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04) {
        sort_02v_descending(d01, d02);
        sort_02v_ascending(d03, d04);

        if (d02.a > d03.a) std::swap(d02.a, d03.a);
        if (d02.b > d03.b) std::swap(d02.b, d03.b);

        if (d01.a > d04.a) std::swap(d01.a, d04.a);
        if (d01.b > d04.b) std::swap(d01.b, d04.b);

        sort_02v_merge_descending(d01, d02);
        sort_02v_merge_descending(d03, d04);
    }

    static INLINE void sort_04v_merge_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04) {

        if (d01.a > d03.a) std::swap(d01.a, d03.a);
        if (d01.b > d03.b) std::swap(d01.b, d03.b);

        if (d02.a > d04.a) std::swap(d02.a, d04.a);
        if (d02.b > d04.b) std::swap(d02.b, d04.b);

        sort_02v_merge_ascending(d01, d02);
        sort_02v_merge_ascending(d03, d04);
    }

    static INLINE void sort_04v_merge_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04) {

        if (d01.a > d03.a) std::swap(d01.a, d03.a);
        if (d01.b > d03.b) std::swap(d01.b, d03.b);

        if (d02.a > d04.a) std::swap(d02.a, d04.a);
        if (d02.b > d04.b) std::swap(d02.b, d04.b);

        sort_02v_merge_descending(d01, d02);
        sort_02v_merge_descending(d03, d04);
    }

    static INLINE void sort_05v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05) {
        sort_04v_ascending(d01, d02, d03, d04);
        sort_01v_descending(d05);

        if (d04.a > d05.a) std::swap(d04.a, d05.a);
        if (d04.b > d05.b) std::swap(d04.b, d05.b);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_01v_merge_ascending(d05);
    }

    static INLINE void sort_05v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05) {
        sort_04v_descending(d01, d02, d03, d04);
        sort_01v_ascending(d05);

        if (d04.a > d05.a) std::swap(d04.a, d05.a);
        if (d04.b > d05.b) std::swap(d04.b, d05.b);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_01v_merge_descending(d05);
    }

    static INLINE void sort_05v_merge_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05) {

        if (d01.a > d05.a) std::swap(d01.a, d05.a);
        if (d01.b > d05.b) std::swap(d01.b, d05.b);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_01v_merge_ascending(d05);
    }

    static INLINE void sort_05v_merge_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05) {

        if (d01.a > d05.a) std::swap(d01.a, d05.a);
        if (d01.b > d05.b) std::swap(d01.b, d05.b);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_01v_merge_descending(d05);
    }

    static INLINE void sort_06v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06) {
        sort_04v_ascending(d01, d02, d03, d04);
        sort_02v_descending(d05, d06);

        if (d04.a > d05.a) std::swap(d04.a, d05.a);
        if (d04.b > d05.b) std::swap(d04.b, d05.b);

        if (d03.a > d06.a) std::swap(d03.a, d06.a);
        if (d03.b > d06.b) std::swap(d03.b, d06.b);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_02v_merge_ascending(d05, d06);
    }

    static INLINE void sort_06v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06) {
        sort_04v_descending(d01, d02, d03, d04);
        sort_02v_ascending(d05, d06);

        if (d04.a > d05.a) std::swap(d04.a, d05.a);
        if (d04.b > d05.b) std::swap(d04.b, d05.b);

        if (d03.a > d06.a) std::swap(d03.a, d06.a);
        if (d03.b > d06.b) std::swap(d03.b, d06.b);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_02v_merge_descending(d05, d06);
    }

    static INLINE void sort_06v_merge_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06) {

        if (d01.a > d05.a) std::swap(d01.a, d05.a);
        if (d01.b > d05.b) std::swap(d01.b, d05.b);

        if (d02.a > d06.a) std::swap(d02.a, d06.a);
        if (d02.b > d06.b) std::swap(d02.b, d06.b);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_02v_merge_ascending(d05, d06);
    }

    static INLINE void sort_06v_merge_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06) {

        if (d01.a > d05.a) std::swap(d01.a, d05.a);
        if (d01.b > d05.b) std::swap(d01.b, d05.b);

        if (d02.a > d06.a) std::swap(d02.a, d06.a);
        if (d02.b > d06.b) std::swap(d02.b, d06.b);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_02v_merge_descending(d05, d06);
    }

    static INLINE void sort_07v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07) {
        sort_04v_ascending(d01, d02, d03, d04);
        sort_03v_descending(d05, d06, d07);

        if (d04.a > d05.a) std::swap(d04.a, d05.a);
        if (d04.b > d05.b) std::swap(d04.b, d05.b);

        if (d03.a > d06.a) std::swap(d03.a, d06.a);
        if (d03.b > d06.b) std::swap(d03.b, d06.b);

        if (d02.a > d07.a) std::swap(d02.a, d07.a);
        if (d02.b > d07.b) std::swap(d02.b, d07.b);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_03v_merge_ascending(d05, d06, d07);
    }

    static INLINE void sort_07v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07) {
        sort_04v_descending(d01, d02, d03, d04);
        sort_03v_ascending(d05, d06, d07);

        if (d04.a > d05.a) std::swap(d04.a, d05.a);
        if (d04.b > d05.b) std::swap(d04.b, d05.b);

        if (d03.a > d06.a) std::swap(d03.a, d06.a);
        if (d03.b > d06.b) std::swap(d03.b, d06.b);

        if (d02.a > d07.a) std::swap(d02.a, d07.a);
        if (d02.b > d07.b) std::swap(d02.b, d07.b);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_03v_merge_descending(d05, d06, d07);
    }

    static INLINE void sort_07v_merge_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07) {

        if (d01.a > d05.a) std::swap(d01.a, d05.a);
        if (d01.b > d05.b) std::swap(d01.b, d05.b);

        if (d02.a > d06.a) std::swap(d02.a, d06.a);
        if (d02.b > d06.b) std::swap(d02.b, d06.b);

        if (d03.a > d07.a) std::swap(d03.a, d07.a);
        if (d03.b > d07.b) std::swap(d03.b, d07.b);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_03v_merge_ascending(d05, d06, d07);
    }

    static INLINE void sort_07v_merge_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07) {

        if (d01.a > d05.a) std::swap(d01.a, d05.a);
        if (d01.b > d05.b) std::swap(d01.b, d05.b);

        if (d02.a > d06.a) std::swap(d02.a, d06.a);
        if (d02.b > d06.b) std::swap(d02.b, d06.b);

        if (d03.a > d07.a) std::swap(d03.a, d07.a);
        if (d03.b > d07.b) std::swap(d03.b, d07.b);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_03v_merge_descending(d05, d06, d07);
    }

    static INLINE void sort_08v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08) {
        sort_04v_ascending(d01, d02, d03, d04);
        sort_04v_descending(d05, d06, d07, d08);

        if (d04.a > d05.a) std::swap(d04.a, d05.a);
        if (d04.b > d05.b) std::swap(d04.b, d05.b);

        if (d03.a > d06.a) std::swap(d03.a, d06.a);
        if (d03.b > d06.b) std::swap(d03.b, d06.b);

        if (d02.a > d07.a) std::swap(d02.a, d07.a);
        if (d02.b > d07.b) std::swap(d02.b, d07.b);

        if (d01.a > d08.a) std::swap(d01.a, d08.a);
        if (d01.b > d08.b) std::swap(d01.b, d08.b);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_04v_merge_ascending(d05, d06, d07, d08);
    }

    static INLINE void sort_08v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08) {
        sort_04v_descending(d01, d02, d03, d04);
        sort_04v_ascending(d05, d06, d07, d08);

        if (d04.a > d05.a) std::swap(d04.a, d05.a);
        if (d04.b > d05.b) std::swap(d04.b, d05.b);

        if (d03.a > d06.a) std::swap(d03.a, d06.a);
        if (d03.b > d06.b) std::swap(d03.b, d06.b);

        if (d02.a > d07.a) std::swap(d02.a, d07.a);
        if (d02.b > d07.b) std::swap(d02.b, d07.b);

        if (d01.a > d08.a) std::swap(d01.a, d08.a);
        if (d01.b > d08.b) std::swap(d01.b, d08.b);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_04v_merge_descending(d05, d06, d07, d08);
    }

    static INLINE void sort_08v_merge_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08) {

        if (d01.a > d05.a) std::swap(d01.a, d05.a);
        if (d01.b > d05.b) std::swap(d01.b, d05.b);

        if (d02.a > d06.a) std::swap(d02.a, d06.a);
        if (d02.b > d06.b) std::swap(d02.b, d06.b);

        if (d03.a > d07.a) std::swap(d03.a, d07.a);
        if (d03.b > d07.b) std::swap(d03.b, d07.b);

        if (d04.a > d08.a) std::swap(d04.a, d08.a);
        if (d04.b > d08.b) std::swap(d04.b, d08.b);

        sort_04v_merge_ascending(d01, d02, d03, d04);
        sort_04v_merge_ascending(d05, d06, d07, d08);
    }

    static INLINE void sort_08v_merge_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08) {

        if (d01.a > d05.a) std::swap(d01.a, d05.a);
        if (d01.b > d05.b) std::swap(d01.b, d05.b);

        if (d02.a > d06.a) std::swap(d02.a, d06.a);
        if (d02.b > d06.b) std::swap(d02.b, d06.b);

        if (d03.a > d07.a) std::swap(d03.a, d07.a);
        if (d03.b > d07.b) std::swap(d03.b, d07.b);

        if (d04.a > d08.a) std::swap(d04.a, d08.a);
        if (d04.b > d08.b) std::swap(d04.b, d08.b);

        sort_04v_merge_descending(d01, d02, d03, d04);
        sort_04v_merge_descending(d05, d06, d07, d08);
    }

    static INLINE void sort_09v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09) {
        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_01v_descending(d09);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_01v_merge_ascending(d09);
    }

    static INLINE void sort_09v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09) {
        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_01v_ascending(d09);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_01v_merge_descending(d09);
    }

    static INLINE void sort_10v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10) {
        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_02v_descending(d09, d10);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_02v_merge_ascending(d09, d10);
    }

    static INLINE void sort_10v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10) {
        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_02v_ascending(d09, d10);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_02v_merge_descending(d09, d10);
    }

    static INLINE void sort_11v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10, uint64_t_v& d11) {
        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_03v_descending(d09, d10, d11);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        if (d06.a > d11.a) std::swap(d06.a, d11.a);
        if (d06.b > d11.b) std::swap(d06.b, d11.b);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_03v_merge_ascending(d09, d10, d11);
    }

    static INLINE void sort_11v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10, uint64_t_v& d11) {
        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_03v_ascending(d09, d10, d11);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        if (d06.a > d11.a) std::swap(d06.a, d11.a);
        if (d06.b > d11.b) std::swap(d06.b, d11.b);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_03v_merge_descending(d09, d10, d11);
    }

    static INLINE void sort_12v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10, uint64_t_v& d11, uint64_t_v& d12) {
        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_04v_descending(d09, d10, d11, d12);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        if (d06.a > d11.a) std::swap(d06.a, d11.a);
        if (d06.b > d11.b) std::swap(d06.b, d11.b);

        if (d05.a > d12.a) std::swap(d05.a, d12.a);
        if (d05.b > d12.b) std::swap(d05.b, d12.b);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_04v_merge_ascending(d09, d10, d11, d12);
    }

    static INLINE void sort_12v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10, uint64_t_v& d11, uint64_t_v& d12) {
        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_04v_ascending(d09, d10, d11, d12);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        if (d06.a > d11.a) std::swap(d06.a, d11.a);
        if (d06.b > d11.b) std::swap(d06.b, d11.b);

        if (d05.a > d12.a) std::swap(d05.a, d12.a);
        if (d05.b > d12.b) std::swap(d05.b, d12.b);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_04v_merge_descending(d09, d10, d11, d12);
    }

    static INLINE void sort_13v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10, uint64_t_v& d11, uint64_t_v& d12, uint64_t_v& d13) {
        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_05v_descending(d09, d10, d11, d12, d13);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        if (d06.a > d11.a) std::swap(d06.a, d11.a);
        if (d06.b > d11.b) std::swap(d06.b, d11.b);

        if (d05.a > d12.a) std::swap(d05.a, d12.a);
        if (d05.b > d12.b) std::swap(d05.b, d12.b);

        if (d04.a > d13.a) std::swap(d04.a, d13.a);
        if (d04.b > d13.b) std::swap(d04.b, d13.b);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_05v_merge_ascending(d09, d10, d11, d12, d13);
    }

    static INLINE void sort_13v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10, uint64_t_v& d11, uint64_t_v& d12, uint64_t_v& d13) {
        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_05v_ascending(d09, d10, d11, d12, d13);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        if (d06.a > d11.a) std::swap(d06.a, d11.a);
        if (d06.b > d11.b) std::swap(d06.b, d11.b);

        if (d05.a > d12.a) std::swap(d05.a, d12.a);
        if (d05.b > d12.b) std::swap(d05.b, d12.b);

        if (d04.a > d13.a) std::swap(d04.a, d13.a);
        if (d04.b > d13.b) std::swap(d04.b, d13.b);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_05v_merge_descending(d09, d10, d11, d12, d13);
    }

    static INLINE void sort_14v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10, uint64_t_v& d11, uint64_t_v& d12, uint64_t_v& d13, uint64_t_v& d14) {
        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_06v_descending(d09, d10, d11, d12, d13, d14);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        if (d06.a > d11.a) std::swap(d06.a, d11.a);
        if (d06.b > d11.b) std::swap(d06.b, d11.b);

        if (d05.a > d12.a) std::swap(d05.a, d12.a);
        if (d05.b > d12.b) std::swap(d05.b, d12.b);

        if (d04.a > d13.a) std::swap(d04.a, d13.a);
        if (d04.b > d13.b) std::swap(d04.b, d13.b);

        if (d03.a > d14.a) std::swap(d03.a, d14.a);
        if (d03.b > d14.b) std::swap(d03.b, d14.b);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_06v_merge_ascending(d09, d10, d11, d12, d13, d14);
    }

    static INLINE void sort_14v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10, uint64_t_v& d11, uint64_t_v& d12, uint64_t_v& d13, uint64_t_v& d14) {
        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_06v_ascending(d09, d10, d11, d12, d13, d14);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        if (d06.a > d11.a) std::swap(d06.a, d11.a);
        if (d06.b > d11.b) std::swap(d06.b, d11.b);

        if (d05.a > d12.a) std::swap(d05.a, d12.a);
        if (d05.b > d12.b) std::swap(d05.b, d12.b);

        if (d04.a > d13.a) std::swap(d04.a, d13.a);
        if (d04.b > d13.b) std::swap(d04.b, d13.b);

        if (d03.a > d14.a) std::swap(d03.a, d14.a);
        if (d03.b > d14.b) std::swap(d03.b, d14.b);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_06v_merge_descending(d09, d10, d11, d12, d13, d14);
    }

    static INLINE void sort_15v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10, uint64_t_v& d11, uint64_t_v& d12, uint64_t_v& d13, uint64_t_v& d14, uint64_t_v& d15) {
        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_07v_descending(d09, d10, d11, d12, d13, d14, d15);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        if (d06.a > d11.a) std::swap(d06.a, d11.a);
        if (d06.b > d11.b) std::swap(d06.b, d11.b);

        if (d05.a > d12.a) std::swap(d05.a, d12.a);
        if (d05.b > d12.b) std::swap(d05.b, d12.b);

        if (d04.a > d13.a) std::swap(d04.a, d13.a);
        if (d04.b > d13.b) std::swap(d04.b, d13.b);

        if (d03.a > d14.a) std::swap(d03.a, d14.a);
        if (d03.b > d14.b) std::swap(d03.b, d14.b);

        if (d02.a > d15.a) std::swap(d02.a, d15.a);
        if (d02.b > d15.b) std::swap(d02.b, d15.b);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_07v_merge_ascending(d09, d10, d11, d12, d13, d14, d15);
    }

    static INLINE void sort_15v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10, uint64_t_v& d11, uint64_t_v& d12, uint64_t_v& d13, uint64_t_v& d14, uint64_t_v& d15) {
        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_07v_ascending(d09, d10, d11, d12, d13, d14, d15);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        if (d06.a > d11.a) std::swap(d06.a, d11.a);
        if (d06.b > d11.b) std::swap(d06.b, d11.b);

        if (d05.a > d12.a) std::swap(d05.a, d12.a);
        if (d05.b > d12.b) std::swap(d05.b, d12.b);

        if (d04.a > d13.a) std::swap(d04.a, d13.a);
        if (d04.b > d13.b) std::swap(d04.b, d13.b);

        if (d03.a > d14.a) std::swap(d03.a, d14.a);
        if (d03.b > d14.b) std::swap(d03.b, d14.b);

        if (d02.a > d15.a) std::swap(d02.a, d15.a);
        if (d02.b > d15.b) std::swap(d02.b, d15.b);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_07v_merge_descending(d09, d10, d11, d12, d13, d14, d15);
    }

    static INLINE void sort_16v_ascending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10, uint64_t_v& d11, uint64_t_v& d12, uint64_t_v& d13, uint64_t_v& d14, uint64_t_v& d15, uint64_t_v& d16) {
        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_08v_descending(d09, d10, d11, d12, d13, d14, d15, d16);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        if (d06.a > d11.a) std::swap(d06.a, d11.a);
        if (d06.b > d11.b) std::swap(d06.b, d11.b);

        if (d05.a > d12.a) std::swap(d05.a, d12.a);
        if (d05.b > d12.b) std::swap(d05.b, d12.b);

        if (d04.a > d13.a) std::swap(d04.a, d13.a);
        if (d04.b > d13.b) std::swap(d04.b, d13.b);

        if (d03.a > d14.a) std::swap(d03.a, d14.a);
        if (d03.b > d14.b) std::swap(d03.b, d14.b);

        if (d02.a > d15.a) std::swap(d02.a, d15.a);
        if (d02.b > d15.b) std::swap(d02.b, d15.b);

        if (d01.a > d16.a) std::swap(d01.a, d16.a);
        if (d01.b > d16.b) std::swap(d01.b, d16.b);

        sort_08v_merge_ascending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_08v_merge_ascending(d09, d10, d11, d12, d13, d14, d15, d16);
    }

    static INLINE void sort_16v_descending(uint64_t_v& d01, uint64_t_v& d02, uint64_t_v& d03, uint64_t_v& d04, uint64_t_v& d05, uint64_t_v& d06, uint64_t_v& d07, uint64_t_v& d08, uint64_t_v& d09, uint64_t_v& d10, uint64_t_v& d11, uint64_t_v& d12, uint64_t_v& d13, uint64_t_v& d14, uint64_t_v& d15, uint64_t_v& d16) {
        sort_08v_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_08v_ascending(d09, d10, d11, d12, d13, d14, d15, d16);

        if (d08.a > d09.a) std::swap(d08.a, d09.a);
        if (d08.b > d09.b) std::swap(d08.b, d09.b);

        if (d07.a > d10.a) std::swap(d07.a, d10.a);
        if (d07.b > d10.b) std::swap(d07.b, d10.b);

        if (d06.a > d11.a) std::swap(d06.a, d11.a);
        if (d06.b > d11.b) std::swap(d06.b, d11.b);

        if (d05.a > d12.a) std::swap(d05.a, d12.a);
        if (d05.b > d12.b) std::swap(d05.b, d12.b);

        if (d04.a > d13.a) std::swap(d04.a, d13.a);
        if (d04.b > d13.b) std::swap(d04.b, d13.b);

        if (d03.a > d14.a) std::swap(d03.a, d14.a);
        if (d03.b > d14.b) std::swap(d03.b, d14.b);

        if (d02.a > d15.a) std::swap(d02.a, d15.a);
        if (d02.b > d15.b) std::swap(d02.b, d15.b);

        if (d01.a > d16.a) std::swap(d01.a, d16.a);
        if (d01.b > d16.b) std::swap(d01.b, d16.b);

        sort_08v_merge_descending(d01, d02, d03, d04, d05, d06, d07, d08);
        sort_08v_merge_descending(d09, d10, d11, d12, d13, d14, d15, d16);
    }


    static NOINLINE void sort_01v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;

        d01.a = *(ptr + 0);
        d01.b = (remainder == 0) ? *(ptr + 1) : MAX;

        sort_01v_ascending(d01);

        *(ptr + 0) = d01.a;
        if (remainder == 0) *(ptr + 1) = d01.b;
    }

    static NOINLINE void sort_02v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = (remainder == 0) ? *(ptr + 3) : MAX;

        sort_02v_ascending(d01, d02);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        if (remainder == 0) *(ptr + 3) = d02.b;
    }

    static NOINLINE void sort_03v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = (remainder == 0) ? *(ptr + 5) : MAX;

        sort_03v_ascending(d01, d02, d03);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        if (remainder == 0) *(ptr + 5) = d03.b;
    }

    static NOINLINE void sort_04v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = (remainder == 0) ? *(ptr + 7) : MAX;

        sort_04v_ascending(d01, d02, d03, d04);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        if (remainder == 0) *(ptr + 7) = d04.b;
    }

    static NOINLINE void sort_05v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;
        uint64_t_v d05;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = *(ptr + 7);
        d05.a = *(ptr + 8);
        d05.b = (remainder == 0) ? *(ptr + 9) : MAX;

        sort_05v_ascending(d01, d02, d03, d04, d05);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        *(ptr + 7) = d04.b;
        *(ptr + 8) = d05.a;
        if (remainder == 0) *(ptr + 9) = d05.b;
    }

    static NOINLINE void sort_06v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;
        uint64_t_v d05;
        uint64_t_v d06;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = *(ptr + 7);
        d05.a = *(ptr + 8);
        d05.b = *(ptr + 9);
        d06.a = *(ptr + 10);
        d06.b = (remainder == 0) ? *(ptr + 11) : MAX;

        sort_06v_ascending(d01, d02, d03, d04, d05, d06);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        *(ptr + 7) = d04.b;
        *(ptr + 8) = d05.a;
        *(ptr + 9) = d05.b;
        *(ptr + 10) = d06.a;
        if (remainder == 0) *(ptr + 11) = d06.b;
    }

    static NOINLINE void sort_07v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;
        uint64_t_v d05;
        uint64_t_v d06;
        uint64_t_v d07;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = *(ptr + 7);
        d05.a = *(ptr + 8);
        d05.b = *(ptr + 9);
        d06.a = *(ptr + 10);
        d06.b = *(ptr + 11);
        d07.a = *(ptr + 12);
        d07.b = (remainder == 0) ? *(ptr + 13) : MAX;

        sort_07v_ascending(d01, d02, d03, d04, d05, d06, d07);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        *(ptr + 7) = d04.b;
        *(ptr + 8) = d05.a;
        *(ptr + 9) = d05.b;
        *(ptr + 10) = d06.a;
        *(ptr + 11) = d06.b;
        *(ptr + 12) = d07.a;
        if (remainder == 0) *(ptr + 13) = d07.b;
    }

    static NOINLINE void sort_08v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;
        uint64_t_v d05;
        uint64_t_v d06;
        uint64_t_v d07;
        uint64_t_v d08;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = *(ptr + 7);
        d05.a = *(ptr + 8);
        d05.b = *(ptr + 9);
        d06.a = *(ptr + 10);
        d06.b = *(ptr + 11);
        d07.a = *(ptr + 12);
        d07.b = *(ptr + 13);
        d08.a = *(ptr + 14);
        d08.b = (remainder == 0) ? *(ptr + 15) : MAX;

        sort_08v_ascending(d01, d02, d03, d04, d05, d06, d07, d08);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        *(ptr + 7) = d04.b;
        *(ptr + 8) = d05.a;
        *(ptr + 9) = d05.b;
        *(ptr + 10) = d06.a;
        *(ptr + 11) = d06.b;
        *(ptr + 12) = d07.a;
        *(ptr + 13) = d07.b;
        *(ptr + 14) = d08.a;
        if (remainder == 0) *(ptr + 15) = d08.b;
    }

    static NOINLINE void sort_09v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;
        uint64_t_v d05;
        uint64_t_v d06;
        uint64_t_v d07;
        uint64_t_v d08;
        uint64_t_v d09;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = *(ptr + 7);
        d05.a = *(ptr + 8);
        d05.b = *(ptr + 9);
        d06.a = *(ptr + 10);
        d06.b = *(ptr + 11);
        d07.a = *(ptr + 12);
        d07.b = *(ptr + 13);
        d08.a = *(ptr + 14);
        d08.b = *(ptr + 15);
        d09.a = *(ptr + 16);
        d09.b = (remainder == 0) ? *(ptr + 17) : MAX;

        sort_09v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        *(ptr + 7) = d04.b;
        *(ptr + 8) = d05.a;
        *(ptr + 9) = d05.b;
        *(ptr + 10) = d06.a;
        *(ptr + 11) = d06.b;
        *(ptr + 12) = d07.a;
        *(ptr + 13) = d07.b;
        *(ptr + 14) = d08.a;
        *(ptr + 15) = d08.b;
        *(ptr + 16) = d09.a;
        if (remainder == 0) *(ptr + 17) = d09.b;
    }

    static NOINLINE void sort_10v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;
        uint64_t_v d05;
        uint64_t_v d06;
        uint64_t_v d07;
        uint64_t_v d08;
        uint64_t_v d09;
        uint64_t_v d10;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = *(ptr + 7);
        d05.a = *(ptr + 8);
        d05.b = *(ptr + 9);
        d06.a = *(ptr + 10);
        d06.b = *(ptr + 11);
        d07.a = *(ptr + 12);
        d07.b = *(ptr + 13);
        d08.a = *(ptr + 14);
        d08.b = *(ptr + 15);
        d09.a = *(ptr + 16);
        d09.b = *(ptr + 17);
        d10.a = *(ptr + 18);
        d10.b = (remainder == 0) ? *(ptr + 19) : MAX;

        sort_10v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        *(ptr + 7) = d04.b;
        *(ptr + 8) = d05.a;
        *(ptr + 9) = d05.b;
        *(ptr + 10) = d06.a;
        *(ptr + 11) = d06.b;
        *(ptr + 12) = d07.a;
        *(ptr + 13) = d07.b;
        *(ptr + 14) = d08.a;
        *(ptr + 15) = d08.b;
        *(ptr + 16) = d09.a;
        *(ptr + 17) = d09.b;
        *(ptr + 18) = d10.a;
        if (remainder == 0) *(ptr + 19) = d10.b;
    }

    static NOINLINE void sort_11v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;
        uint64_t_v d05;
        uint64_t_v d06;
        uint64_t_v d07;
        uint64_t_v d08;
        uint64_t_v d09;
        uint64_t_v d10;
        uint64_t_v d11;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = *(ptr + 7);
        d05.a = *(ptr + 8);
        d05.b = *(ptr + 9);
        d06.a = *(ptr + 10);
        d06.b = *(ptr + 11);
        d07.a = *(ptr + 12);
        d07.b = *(ptr + 13);
        d08.a = *(ptr + 14);
        d08.b = *(ptr + 15);
        d09.a = *(ptr + 16);
        d09.b = *(ptr + 17);
        d10.a = *(ptr + 18);
        d10.b = *(ptr + 19);
        d11.a = *(ptr + 20);
        d11.b = (remainder == 0) ? *(ptr + 21) : MAX;

        sort_11v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        *(ptr + 7) = d04.b;
        *(ptr + 8) = d05.a;
        *(ptr + 9) = d05.b;
        *(ptr + 10) = d06.a;
        *(ptr + 11) = d06.b;
        *(ptr + 12) = d07.a;
        *(ptr + 13) = d07.b;
        *(ptr + 14) = d08.a;
        *(ptr + 15) = d08.b;
        *(ptr + 16) = d09.a;
        *(ptr + 17) = d09.b;
        *(ptr + 18) = d10.a;
        *(ptr + 19) = d10.b;
        *(ptr + 20) = d11.a;
        if (remainder == 0) *(ptr + 21) = d11.b;
    }

    static NOINLINE void sort_12v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;
        uint64_t_v d05;
        uint64_t_v d06;
        uint64_t_v d07;
        uint64_t_v d08;
        uint64_t_v d09;
        uint64_t_v d10;
        uint64_t_v d11;
        uint64_t_v d12;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = *(ptr + 7);
        d05.a = *(ptr + 8);
        d05.b = *(ptr + 9);
        d06.a = *(ptr + 10);
        d06.b = *(ptr + 11);
        d07.a = *(ptr + 12);
        d07.b = *(ptr + 13);
        d08.a = *(ptr + 14);
        d08.b = *(ptr + 15);
        d09.a = *(ptr + 16);
        d09.b = *(ptr + 17);
        d10.a = *(ptr + 18);
        d10.b = *(ptr + 19);
        d11.a = *(ptr + 20);
        d11.b = *(ptr + 21);
        d12.a = *(ptr + 22);
        d12.b = (remainder == 0) ? *(ptr + 23) : MAX;

        sort_12v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11, d12);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        *(ptr + 7) = d04.b;
        *(ptr + 8) = d05.a;
        *(ptr + 9) = d05.b;
        *(ptr + 10) = d06.a;
        *(ptr + 11) = d06.b;
        *(ptr + 12) = d07.a;
        *(ptr + 13) = d07.b;
        *(ptr + 14) = d08.a;
        *(ptr + 15) = d08.b;
        *(ptr + 16) = d09.a;
        *(ptr + 17) = d09.b;
        *(ptr + 18) = d10.a;
        *(ptr + 19) = d10.b;
        *(ptr + 20) = d11.a;
        *(ptr + 21) = d11.b;
        *(ptr + 22) = d12.a;
        if (remainder == 0) *(ptr + 23) = d12.b;
    }

    static NOINLINE void sort_13v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;
        uint64_t_v d05;
        uint64_t_v d06;
        uint64_t_v d07;
        uint64_t_v d08;
        uint64_t_v d09;
        uint64_t_v d10;
        uint64_t_v d11;
        uint64_t_v d12;
        uint64_t_v d13;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = *(ptr + 7);
        d05.a = *(ptr + 8);
        d05.b = *(ptr + 9);
        d06.a = *(ptr + 10);
        d06.b = *(ptr + 11);
        d07.a = *(ptr + 12);
        d07.b = *(ptr + 13);
        d08.a = *(ptr + 14);
        d08.b = *(ptr + 15);
        d09.a = *(ptr + 16);
        d09.b = *(ptr + 17);
        d10.a = *(ptr + 18);
        d10.b = *(ptr + 19);
        d11.a = *(ptr + 20);
        d11.b = *(ptr + 21);
        d12.a = *(ptr + 22);
        d12.b = *(ptr + 23);
        d13.a = *(ptr + 24);
        d13.b = (remainder == 0) ? *(ptr + 25) : MAX;

        sort_13v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11, d12, d13);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        *(ptr + 7) = d04.b;
        *(ptr + 8) = d05.a;
        *(ptr + 9) = d05.b;
        *(ptr + 10) = d06.a;
        *(ptr + 11) = d06.b;
        *(ptr + 12) = d07.a;
        *(ptr + 13) = d07.b;
        *(ptr + 14) = d08.a;
        *(ptr + 15) = d08.b;
        *(ptr + 16) = d09.a;
        *(ptr + 17) = d09.b;
        *(ptr + 18) = d10.a;
        *(ptr + 19) = d10.b;
        *(ptr + 20) = d11.a;
        *(ptr + 21) = d11.b;
        *(ptr + 22) = d12.a;
        *(ptr + 23) = d12.b;
        *(ptr + 24) = d13.a;
        if (remainder == 0) *(ptr + 25) = d13.b;
    }

    static NOINLINE void sort_14v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;
        uint64_t_v d05;
        uint64_t_v d06;
        uint64_t_v d07;
        uint64_t_v d08;
        uint64_t_v d09;
        uint64_t_v d10;
        uint64_t_v d11;
        uint64_t_v d12;
        uint64_t_v d13;
        uint64_t_v d14;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = *(ptr + 7);
        d05.a = *(ptr + 8);
        d05.b = *(ptr + 9);
        d06.a = *(ptr + 10);
        d06.b = *(ptr + 11);
        d07.a = *(ptr + 12);
        d07.b = *(ptr + 13);
        d08.a = *(ptr + 14);
        d08.b = *(ptr + 15);
        d09.a = *(ptr + 16);
        d09.b = *(ptr + 17);
        d10.a = *(ptr + 18);
        d10.b = *(ptr + 19);
        d11.a = *(ptr + 20);
        d11.b = *(ptr + 21);
        d12.a = *(ptr + 22);
        d12.b = *(ptr + 23);
        d13.a = *(ptr + 24);
        d13.b = *(ptr + 25);
        d14.a = *(ptr + 26);
        d14.b = (remainder == 0) ? *(ptr + 27) : MAX;

        sort_14v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11, d12, d13, d14);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        *(ptr + 7) = d04.b;
        *(ptr + 8) = d05.a;
        *(ptr + 9) = d05.b;
        *(ptr + 10) = d06.a;
        *(ptr + 11) = d06.b;
        *(ptr + 12) = d07.a;
        *(ptr + 13) = d07.b;
        *(ptr + 14) = d08.a;
        *(ptr + 15) = d08.b;
        *(ptr + 16) = d09.a;
        *(ptr + 17) = d09.b;
        *(ptr + 18) = d10.a;
        *(ptr + 19) = d10.b;
        *(ptr + 20) = d11.a;
        *(ptr + 21) = d11.b;
        *(ptr + 22) = d12.a;
        *(ptr + 23) = d12.b;
        *(ptr + 24) = d13.a;
        *(ptr + 25) = d13.b;
        *(ptr + 26) = d14.a;
        if (remainder == 0) *(ptr + 27) = d14.b;
    }

    static NOINLINE void sort_15v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;
        uint64_t_v d05;
        uint64_t_v d06;
        uint64_t_v d07;
        uint64_t_v d08;
        uint64_t_v d09;
        uint64_t_v d10;
        uint64_t_v d11;
        uint64_t_v d12;
        uint64_t_v d13;
        uint64_t_v d14;
        uint64_t_v d15;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = *(ptr + 7);
        d05.a = *(ptr + 8);
        d05.b = *(ptr + 9);
        d06.a = *(ptr + 10);
        d06.b = *(ptr + 11);
        d07.a = *(ptr + 12);
        d07.b = *(ptr + 13);
        d08.a = *(ptr + 14);
        d08.b = *(ptr + 15);
        d09.a = *(ptr + 16);
        d09.b = *(ptr + 17);
        d10.a = *(ptr + 18);
        d10.b = *(ptr + 19);
        d11.a = *(ptr + 20);
        d11.b = *(ptr + 21);
        d12.a = *(ptr + 22);
        d12.b = *(ptr + 23);
        d13.a = *(ptr + 24);
        d13.b = *(ptr + 25);
        d14.a = *(ptr + 26);
        d14.b = *(ptr + 27);
        d15.a = *(ptr + 28);
        d15.b = (remainder == 0) ? *(ptr + 29) : MAX;

        sort_15v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11, d12, d13, d14, d15);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        *(ptr + 7) = d04.b;
        *(ptr + 8) = d05.a;
        *(ptr + 9) = d05.b;
        *(ptr + 10) = d06.a;
        *(ptr + 11) = d06.b;
        *(ptr + 12) = d07.a;
        *(ptr + 13) = d07.b;
        *(ptr + 14) = d08.a;
        *(ptr + 15) = d08.b;
        *(ptr + 16) = d09.a;
        *(ptr + 17) = d09.b;
        *(ptr + 18) = d10.a;
        *(ptr + 19) = d10.b;
        *(ptr + 20) = d11.a;
        *(ptr + 21) = d11.b;
        *(ptr + 22) = d12.a;
        *(ptr + 23) = d12.b;
        *(ptr + 24) = d13.a;
        *(ptr + 25) = d13.b;
        *(ptr + 26) = d14.a;
        *(ptr + 27) = d14.b;
        *(ptr + 28) = d15.a;
        if (remainder == 0) *(ptr + 29) = d15.b;
    }

    static NOINLINE void sort_16v_alt(uint64_t *ptr, int remainder) {
        uint64_t_v d01;
        uint64_t_v d02;
        uint64_t_v d03;
        uint64_t_v d04;
        uint64_t_v d05;
        uint64_t_v d06;
        uint64_t_v d07;
        uint64_t_v d08;
        uint64_t_v d09;
        uint64_t_v d10;
        uint64_t_v d11;
        uint64_t_v d12;
        uint64_t_v d13;
        uint64_t_v d14;
        uint64_t_v d15;
        uint64_t_v d16;

        d01.a = *(ptr + 0);
        d01.b = *(ptr + 1);
        d02.a = *(ptr + 2);
        d02.b = *(ptr + 3);
        d03.a = *(ptr + 4);
        d03.b = *(ptr + 5);
        d04.a = *(ptr + 6);
        d04.b = *(ptr + 7);
        d05.a = *(ptr + 8);
        d05.b = *(ptr + 9);
        d06.a = *(ptr + 10);
        d06.b = *(ptr + 11);
        d07.a = *(ptr + 12);
        d07.b = *(ptr + 13);
        d08.a = *(ptr + 14);
        d08.b = *(ptr + 15);
        d09.a = *(ptr + 16);
        d09.b = *(ptr + 17);
        d10.a = *(ptr + 18);
        d10.b = *(ptr + 19);
        d11.a = *(ptr + 20);
        d11.b = *(ptr + 21);
        d12.a = *(ptr + 22);
        d12.b = *(ptr + 23);
        d13.a = *(ptr + 24);
        d13.b = *(ptr + 25);
        d14.a = *(ptr + 26);
        d14.b = *(ptr + 27);
        d15.a = *(ptr + 28);
        d15.b = *(ptr + 29);
        d16.a = *(ptr + 30);
        d16.b = (remainder == 0) ? *(ptr + 31) : MAX;

        sort_16v_ascending(d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11, d12, d13, d14, d15, d16);

        *(ptr + 0) = d01.a;
        *(ptr + 1) = d01.b;
        *(ptr + 2) = d02.a;
        *(ptr + 3) = d02.b;
        *(ptr + 4) = d03.a;
        *(ptr + 5) = d03.b;
        *(ptr + 6) = d04.a;
        *(ptr + 7) = d04.b;
        *(ptr + 8) = d05.a;
        *(ptr + 9) = d05.b;
        *(ptr + 10) = d06.a;
        *(ptr + 11) = d06.b;
        *(ptr + 12) = d07.a;
        *(ptr + 13) = d07.b;
        *(ptr + 14) = d08.a;
        *(ptr + 15) = d08.b;
        *(ptr + 16) = d09.a;
        *(ptr + 17) = d09.b;
        *(ptr + 18) = d10.a;
        *(ptr + 19) = d10.b;
        *(ptr + 20) = d11.a;
        *(ptr + 21) = d11.b;
        *(ptr + 22) = d12.a;
        *(ptr + 23) = d12.b;
        *(ptr + 24) = d13.a;
        *(ptr + 25) = d13.b;
        *(ptr + 26) = d14.a;
        *(ptr + 27) = d14.b;
        *(ptr + 28) = d15.a;
        *(ptr + 29) = d15.b;
        *(ptr + 30) = d16.a;
        if (remainder == 0) *(ptr + 31) = d16.b;
    }
    static void sort(uint64_t *ptr, size_t length);

};
}
}

#endif // BITONIC_SORT_SCALAR

    
