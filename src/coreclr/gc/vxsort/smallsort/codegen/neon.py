##
## Licensed to the .NET Foundation under one or more agreements.
## The .NET Foundation licenses this file to you under the MIT license.
##

import os
from datetime import datetime

from utils import native_size_map, next_power_of_2
from bitonic_isa import BitonicISA


class NEONBitonicISA(BitonicISA):
    def __init__(self, type):
        self.vector_size_in_bytes = 16

        self.type = type

        self.bitonic_size_map = {}

        for t, s in native_size_map.items():
            self.bitonic_size_map[t] = int(self.vector_size_in_bytes / s)

        self.bitonic_type_map = {
            "int32_t": "int32x4_t",
            "uint32_t": "uint32x4_t",
            "float": "float32x4_t",
            "int64_t": "int64x2_t",
            "uint64_t": "uint64x2_t",
            "double": "float64x2_t",
        }

        self.bitonic_func_suffix_type_map = {
            "int32_t": "s32",
            "uint32_t": "u32",
            "float": "f32",
            "int64_t": "s64",
            "uint64_t": "u64",
            "double": "f64",
        }

    def max_bitonic_sort_vectors(self):
        return 16

    def vector_size(self):
        return self.bitonic_size_map[self.type]

    def vector_type(self):
        return self.bitonic_type_map[self.type]

    @classmethod
    def supported_types(cls):
        return native_size_map.keys()

    def generate_param_list(self, start, numParams):
        return str.join(", ", list(map(lambda p: f"d{p:02d}", range(start, start + numParams))))

    def generate_param_def_list(self, numParams):
        t = self.type
        return str.join(", ", list(map(lambda p: f"{self.vector_type()}& d{p:02d}", range(1, numParams + 1))))

    def autogenerated_blabber(self):
        return f"""// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

/////////////////////////////////////////////////////////////////////////////
////
// This file was auto-generated by a tool at {datetime.now().strftime("%F %H:%M:%S")}
//
// It is recommended you DO NOT directly edit this file but instead edit
// the code-generator that generated this source file instead.
/////////////////////////////////////////////////////////////////////////////"""

    def generate_prologue(self, f):
        t = self.type
        s = f"""{self.autogenerated_blabber()}

#ifndef BITONIC_SORT_NEON_{t.upper()}_H
#define BITONIC_SORT_NEON_{t.upper()}_H

#include <arm_neon.h>
#include "bitonic_sort.h"

namespace vxsort {{
namespace smallsort {{

extern "C" const uint8_t mask_table_2[16 * 2];

template<> struct bitonic<{t}, NEON> {{
    static const int N = {self.vector_size()};
    static constexpr {t} MAX = std::numeric_limits<{t}>::max();
public:
"""
        print(s, file=f)

    def generate_epilogue(self, f):
        s = f"""
}};
}}
}}

#endif // BITONIC_SORT_NEON

    """
        print(s, file=f)

    def generate_1v_basic_sorters(self, f, ascending):
        g = self
        type = self.type
        vt = self.bitonic_type_map[type];
        ft = self.bitonic_func_suffix_type_map[type];

        suffix = "ascending" if ascending else "descending"

        s = f"""    static INLINE void sort_01v_{suffix}({g.generate_param_def_list(1)}) {{
        {g.vector_type()} min, max, rev;"""
        print(s, file=f)

        if g.vector_size() == 2:

            s = f"""
        rev = vrev64q_{ft}(d01);
        min = vminq_{ft}(d01, rev);
        max = vmaxq_{ft}(d01, rev);
        d01 = vtrn2q_{ft}({"min" if ascending else "max"}, {"max" if ascending else "min"});"""
            print(s, file=f)

        else:
            s = "/// TODO"
            print(s, file=f)

        print("    }\n", file=f)


    def generate_1v_merge_sorters(self, f, ascending: bool):
        g = self
        type = self.type
        vt = self.bitonic_type_map[type];
        ft = self.bitonic_func_suffix_type_map[type];

        suffix = "ascending" if ascending else "descending"

        s = f"""    static INLINE void sort_01v_merge_{suffix}({g.generate_param_def_list(1)}) {{
        {g.vector_type()}  min, max, rev"""
        print(s, file=f)

        if g.vector_size() == 2:

            # TODO: This can just be the same as generate_1v_basic_sorters ?
            s = f"""
        rev = vrev64q_{ft}(d01);
        min = vminq_{ft}(d01, rev);
        max = vmaxq_{ft}(d01, rev);
        d01 = vtrn2q_{ft}({"min" if ascending else "max"}, {"max" if ascending else "min"});"""
            print(s, file=f)

        else:
            s = "/// TODO"
            print(s, file=f)

        print("    }\n", file=f)

    def generate_compounded_sorter(self, f, width, ascending, inline):
        type = self.type
        g = self
        vt = self.bitonic_type_map[type];
        ft = self.bitonic_func_suffix_type_map[type];

        w1 = int(next_power_of_2(width) / 2)
        w2 = int(width - w1)

        suffix = "ascending" if ascending else "descending"
        rev_suffix = "descending" if ascending else "ascending"

        inl = "INLINE" if inline else "NOINLINE"

        s = f"""    static {inl} void sort_{width:02d}v_{suffix}({g.generate_param_def_list(width)}) {{
        {g.vector_type()}  tmp;

        sort_{w1:02d}v_{suffix}({g.generate_param_list(1, w1)});
        sort_{w2:02d}v_{rev_suffix}({g.generate_param_list(w1 + 1, w2)});"""

        print(s, file=f)

        for r in range(w1 + 1, width + 1):
            x = w1 + 1 - (r - w1)
            s = f"""
        tmp = d{r:02d};
        d{r:02d} = vmaxq_{ft}(d{x:02d}, d{r:02d});
        d{x:02d} = vminq_{ft}(d{x:02d}, tmp);"""
            print(s, file=f)

        s = f"""
        sort_{w1:02d}v_merge_{suffix}({g.generate_param_list(1, w1)});
        sort_{w2:02d}v_merge_{suffix}({g.generate_param_list(w1 + 1, w2)});"""
        print(s, file=f)
        print("    }\n", file=f)


    def generate_compounded_merger(self, f, width, ascending, inline):
        type = self.type
        g = self
        vt = self.bitonic_type_map[type];
        ft = self.bitonic_func_suffix_type_map[type];

        w1 = int(next_power_of_2(width) / 2)
        w2 = int(width - w1)

        suffix = "ascending" if ascending else "descending"
        rev_suffix = "descending" if ascending else "ascending"

        inl = "INLINE" if inline else "NOINLINE"

        s = f"""    static {inl} void sort_{width:02d}v_merge_{suffix}({g.generate_param_def_list(width)}) {{
        {g.vector_type()} tmp;"""
        print(s, file=f)

        for r in range(w1 + 1, width + 1):
            x = r - w1
            s = f"""
        tmp = d{x:02d};
        d{x:02d} = vminq_{ft}(d{r:02d}, d{x:02d});
        d{x:02d} = vmaxq_{ft}(d{r:02d}, tmp);"""
            print(s, file=f)

        s = f"""
        sort_{w1:02d}v_merge_{suffix}({g.generate_param_list(1, w1)});
        sort_{w2:02d}v_merge_{suffix}({g.generate_param_list(w1 + 1, w2)});"""
        print(s, file=f)
        print("    }\n", file=f)



    def generate_entry_points(self, f):
        type = self.type
        vt = self.bitonic_type_map[type];
        ft = self.bitonic_func_suffix_type_map[type];
        # return f"vandq_{ft}(vmvn_{ft}({value}), mask)"
        g = self
        for m in range(1, g.max_bitonic_sort_vectors() + 1):
            s = f"""
    static NOINLINE void sort_{m:02d}v_alt({type} *ptr, int remainder) {{
"""
            print(s, file=f)
            for l in range(0, m-1):
                s = f"        {g.vector_type()} d{l + 1:02d} = vld1q_{ft}(ptr + l);"
                print(s, file=f)

            partiald = f"d{m:02d}"
            s = f"""
        const {type} mask = vld1q_{ft}(mask_table_2 + remainder * N);
        const {type} maskinv = vmvn_{ft}(mask);

        const {type} {partiald}orig = vld1q_{ft}(ptr + 0);
        const {type} {partiald}origlower = vandq_{ft}({partiald}orig, mask);
        const {type} {partiald}origupper = vandq_{ft}({partiald}orig, maskinv);

        const {type} max = vdupq_n_{ft}(MAX);
        const {type} maxupper = vandq_{ft}(max, maskinv);

        const {type} {partiald} = veorq_{ft}({partiald}origlower, maxupper);
"""
            print(s, file=f)

            s = f"        sort_{m:02d}v_ascending({g.generate_param_list(1, m)});"
            print(s, file=f)

            s = f"""
        const {type} {partiald}lower = vandq_{ft}({partiald}, mask);
        const {type} {partiald}merged = veorq_{ft}({partiald}lower, {partiald}origupper);

        vst1q_s64(ptr + 0, {partiald}merged);
    }}
"""
            print(s, file=f)


    def generate_master_entry_point(self, f_header, f_src):
        basename = os.path.basename(f_header.name)
        s = f"""// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

#include "common.h"
#include "{basename}"

using namespace vxsort;
"""
        print(s, file=f_src)

        t = self.type
        g = self

        # s = f"""    static void sort_old({t} *ptr, size_t length);"""
        # print(s, file=f_header)

        s = f"""    static void sort({t} *ptr, size_t length);"""
        print(s, file=f_header)


    #     s = f"""void vxsort::smallsort::bitonic<{t}, vector_machine::NEON >::sort({t} *ptr, size_t length) {{
    # switch(length / N) {{"""
    #     print(s, file=f_src)
    #
    #     for m in range(1, self.max_bitonic_sort_vectors() + 1):
    #         s = f"        case {m}: sort_{m:02d}v(ptr); break;"
    #         print(s, file=f_src)
    #     print("    }", file=f_src)
    #     print("}", file=f_src)

        s = f"""void vxsort::smallsort::bitonic<{t}, vector_machine::NEON >::sort({t} *ptr, size_t length) {{
    const auto fullvlength = length / N;
    const int remainder = (int) (length - fullvlength * N);
    const auto v = fullvlength + ((remainder > 0) ? 1 : 0);
    switch(v) {{"""
        print(s, file=f_src)

        for m in range(1, self.max_bitonic_sort_vectors() + 1):
            s = f"        case {m}: sort_{m:02d}v_alt(ptr, remainder); break;"
            print(s, file=f_src)
        print("    }", file=f_src)
        print("}", file=f_src)

        pass
