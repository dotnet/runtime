[
    {
        "name": "System.Console.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "WindowAndCursorProps.SetWindowPosition_GetWindowPosition_ReturnsExpected",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\n          ↓ (pos 0)\\r\\nExpected: top\\r\\nActual:   left\\r\\n          ↑ (pos 0)"
                },
                {
                    "name": "WindowAndCursorProps.GetCursorPosition",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\nExpected: 12\\r\\nActual:   13"
                }
            ]
        }
    },
    {
        "name": "System.Diagnostics.DiagnosticSource.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Diagnostics.Tests.DiagnosticSourceEventSourceBridgeTests.TestShortcutKeywords",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: Activity1Start\\nActual:   Event\\n          ↑ (pos 0)"
                }
            ]
        }
    },
    {
        "name": "System.Diagnostics.Tracing.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\nExpected: 2\\nActual:   1"
                }
            ]
        }
    },
    {
        "name": "System.Drawing.Common.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Drawing.Tests.GraphicsTests.InterpolationMode_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-2) is invalid for Enum type 'InterpolationMode'.\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.CompositingQuality_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-2) is invalid for Enum type 'CompositingQuality'.\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.PixelOffsetMode_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-2) is invalid for Enum type 'PixelOffsetMode'.\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.PageUnit_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-1) is invalid for Enum type 'GraphicsUnit'.\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.SmoothingMode_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-2) is invalid for Enum type 'SmoothingMode'.\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.CompositingMode_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-1) is invalid for Enum type 'CompositingMode'.\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.TextRenderingHint_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-1) is invalid for Enum type 'TextRenderingHint'.\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.Graphics_DrawBezierTests.DrawBezier_PointFs",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\nExpected: Byte[] [208, 0, 8, 33, 6, ...]\\r\\nActual:   Byte[] [153, 27, 131, 228, 197, ...]"
                },
                {
                    "name": "System.Drawing.Tests.Graphics_DrawLineTests.DrawLines_PointFs",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\nExpected: Byte[] [142, 194, 251, 180, 222, ...]\\r\\nActual:   Byte[] [212, 29, 140, 217, 143, ...]"
                },
                {
                    "name": "System.Drawing.Tests.FontTests.ToLogFont_NullLogFont_ThrowsArgumentNullException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentNullException)\\r\\nActual:   typeof(System.AccessViolationException): Attempted to read or write protected memory. This is often an indication that other memory is corrupt."
                },
                {
                    "name": "System.Drawing.Tests.Graphics_DrawBezierTests.DrawBezier_Point",
                    "reason": "https://github.com/dotnet/corefx/issues/30180"
                },
                {
                    "name": "System.Drawing.Tests.Graphics_DrawBezierTests.DrawBezier_Point",
                    "reason": "https://github.com/dotnet/corefx/issues/30180"
                }
            ]
        }
    },
    {
        "name": "System.Data.SqlClient.ManualTesting.Tests",
        "enabled": false,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Data.SqlClient.Stress.Tests",
        "enabled": false,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Data.SqlClient.Tests",
        "enabled": false,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.Pipes.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOutRead_ClientInOutWrite.Server_ReadWriteCancelledToken_Throws_OperationCanceledException",
                    "reason": "https://github.com/dotnet/corefx/issues/16934"
                },
                {
                    "name": "System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOutWrite_ClientInOutRead.Server_ReadWriteCancelledToken_Throws_OperationCanceledException",
                    "reason": "https://github.com/dotnet/corefx/issues/16934"
                },
                {
                    "name": "System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Server_ReadWriteCancelledToken_Throws_OperationCanceledException",
                    "reason": "https://github.com/dotnet/corefx/issues/16934"
                },
                {
                    "name": "System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientOut.Server_ReadWriteCancelledToken_Throws_OperationCanceledException",
                    "reason": "https://github.com/dotnet/corefx/issues/16934"
                },
                {
                    "name": "System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerOut_ClientIn.Server_ReadWriteCancelledToken_Throws_OperationCanceledException",
                    "reason": "https://github.com/dotnet/corefx/issues/16934"
                },
                {
                    "name": "System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerIn_ClientOut.Server_ReadWriteCancelledToken_Throws_OperationCanceledException",
                    "reason": "https://github.com/dotnet/corefx/issues/16934"
                },
                {
                    "name": "System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOutRead_ClientInOutWrite.Client_ReadWriteCancelledToken_Throws_OperationCanceledException",
                    "reason": "https://github.com/dotnet/corefx/issues/16934"
                },
                {
                    "name": "System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOutWrite_ClientInOutRead.Client_ReadWriteCancelledToken_Throws_OperationCanceledException",
                    "reason": "https://github.com/dotnet/corefx/issues/16934"
                },
                {
                    "name": "System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException",
                    "reason": "https://github.com/dotnet/corefx/issues/16934"
                },
                {
                    "name": "System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientOut.Client_ReadWriteCancelledToken_Throws_OperationCanceledException",
                    "reason": "https://github.com/dotnet/corefx/issues/16934"
                },
                {
                    "name": "System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException",
                    "reason": "https://github.com/dotnet/corefx/issues/16934"
                },
                {
                    "name": "System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerIn_ClientOut.Client_ReadWriteCancelledToken_Throws_OperationCanceledException",
                    "reason": "https://github.com/dotnet/corefx/issues/16934"
                }
            ]
        }
    },
    {
        "name": "System.Net.Http.Functional.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Net.Http.Functional.Tests.PlatformHandler_DiagnosticsTest.SendAsync_ExpectedDiagnosticSourceActivityLogging",
                    "reason": "System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException : Remote process failed with an unhandled exception."
                },
                {
                    "name": "System.Net.Http.Functional.Tests.SocketsHttpHandler_DiagnosticsTest.SendAsync_ExpectedDiagnosticSourceActivityLogging",
                    "reason": "System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException : Remote process failed with an unhandled exception."
                }
            ]
        }
    },
    {
        "name": "System.Net.HttpListener.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Net.Tests.HttpRequestStreamTests.Read_NullBuffer_ThrowsArgumentNullException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.NullReferenceException): Object reference not set to an instance of an object."
                },
                {
                    "name": "System.Net.Tests.HttpResponseStreamTests.Write_NullBuffer_ThrowsArgumentNullException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.NullReferenceException): Object reference not set to an instance of an object."
                }
            ]
        }
    },
    {
        "name": "System.Runtime.InteropServices.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Runtime.InteropServices.MarshalTests.SetComObjectData",
                    "reason": "outdated"
                },
                {
                    "name": "System.Runtime.InteropServices.MarshalTests.GetComObjectData",
                    "reason": "outdated"
                },
                {
                    "name": "System.Runtime.InteropServices.Tests.ComAwareEventInfoTests.AddEventHandler_DispIdAttribute_ThrowsPlatformNotSupportedException",
                    "reason": "outdated"
                },
                {
                    "name": "System.Runtime.InteropServices.Tests.ComEventsHelperTests.Remove_NonNullRcw_ThrowsPlatformNotSupportedException",
                    "reason": "outdated"
                },
                {
                    "name": "System.Runtime.InteropServices.Tests.ComEventsHelperTests.AddEventHandler_DispIdAttribute_ThrowsPlatformNotSupportedException",
                    "reason": "outdated"
                },
                {
                    "name": "System.Runtime.InteropServices.Tests.ComEventsHelperTests.Combine_NonNullRcw_ThrowsPlatformNotSupportedException",
                    "reason": "outdated"
                },
            ]
        }
    },
    {
        "name": "System.Security.Cryptography.X509Certificates.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Security.Cryptography.X509Certificates.Tests.X509StoreTests.Constructor_DefaultStoreName",
                    "reason": "Assert.Equal() Failure ↓ (pos 1) Expected: My Actual:   MY ↑ (pos 1)"
                },
                {
                    "name": "System.Security.Cryptography.X509Certificates.Tests.LoadFromFileTests.TestLoadSignedFile",
                    "reason": "Expected: Expected: CN=Microsoft Code Signing PCA, O=Microsoft···\r\nActual: C=US, S=Washington, L=Redmond, O=Microsoft···"
                },
                {
                    "name": "System.Security.Cryptography.X509Certificates.Tests.LoadFromFileTests.TestSerial",
                    "reason": "Expected: B00000000100DD9F3BD08B0AAF11B000000033\r\nActual: 33000000B011AF0A8BD03B9FDD0001000000B0\r\n"
                }
            ]
        }
    },
    {
        "name": "System.Threading.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Threading.Tests.EventWaitHandleTests.Ctor_InvalidMode",
                    "reason": "Assert.Equal() Failure Expected: (null) Actual:   mode"
                }
            ]
        }
    },
    {
        "name": "System.Xml.Xsl.XslTransformApi.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Xml.Tests.CXmlResolverTest.TC_AbsolutePath_Transform",
                    "reason": "Xunit.Sdk.TrueException Assert.True() Failure\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Xml.Tests.CTransformResolverTest.TC_AbsolutePath_Transform",
                    "reason": "Xunit.Sdk.TrueException Assert.True() Failure\\nExpected: True\\nActual:   False"
                }
            ]
        }
    },
    {
        "name": "System.Collections.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_string_string.IEnumerable_Generic_Enumerator_Reset_ModifiedBeforeEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_string_string.IEnumerable_Generic_Enumerator_Reset_ModifiedAfterEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },

                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_string_string.IEnumerable_Generic_Enumerator_MoveNext_ModifiedAfterEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_string_string.IEnumerable_Generic_Enumerator_MoveNext_ModifiedBeforeEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_string_string.IEnumerable_Generic_Enumerator_Reset_ModifiedDuringEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_string_string.IEnumerable_Generic_Enumerator_MoveNext_ModifiedDuringEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_SimpleInt_int_With_Comparer_WrapStructural_SimpleInt.IEnumerable_Generic_Enumerator_Reset_ModifiedBeforeEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_SimpleInt_int_With_Comparer_WrapStructural_SimpleInt.IEnumerable_Generic_Enumerator_MoveNext_ModifiedDuringEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_SimpleInt_int_With_Comparer_WrapStructural_SimpleInt.IEnumerable_Generic_Enumerator_MoveNext_ModifiedBeforeEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_SimpleInt_int_With_Comparer_WrapStructural_SimpleInt.IEnumerable_Generic_Enumerator_Reset_ModifiedDuringEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_SimpleInt_int_With_Comparer_WrapStructural_SimpleInt.IEnumerable_Generic_Enumerator_Reset_ModifiedAfterEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_SimpleInt_int_With_Comparer_WrapStructural_SimpleInt.IEnumerable_Generic_Enumerator_MoveNext_ModifiedAfterEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_int_int.IEnumerable_Generic_Enumerator_Reset_ModifiedDuringEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_int_int.IEnumerable_Generic_Enumerator_MoveNext_ModifiedAfterEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_int_int.IEnumerable_Generic_Enumerator_MoveNext_ModifiedBeforeEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_int_int.IEnumerable_Generic_Enumerator_Reset_ModifiedBeforeEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_int_int.IEnumerable_Generic_Enumerator_Reset_ModifiedAfterEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_int_int.IEnumerable_Generic_Enumerator_MoveNext_ModifiedDuringEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_IDictionary_NonGeneric_Tests.IEnumerable_NonGeneric_Enumerator_MoveNext_ModifiedBeforeEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_IDictionary_NonGeneric_Tests.IEnumerable_NonGeneric_Enumerator_Reset_ModifiedBeforeEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_IDictionary_NonGeneric_Tests.IEnumerable_NonGeneric_Enumerator_Reset_ModifiedDuringEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_IDictionary_NonGeneric_Tests.IEnumerable_NonGeneric_Enumerator_MoveNext_ModifiedDuringEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_IDictionary_NonGeneric_Tests.IEnumerable_NonGeneric_Enumerator_Reset_ModifiedAfterEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_IDictionary_NonGeneric_Tests.IEnumerable_NonGeneric_Enumerator_MoveNext_ModifiedAfterEnumeration_ThrowsInvalidOperationException",
                    "reason": "Assert.All() Failure: 1 out of 4 items in the collection did not pass.\r\n"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_SimpleInt_int_With_Comparer_WrapStructural_SimpleInt.EnsureCapacity_Generic_RequestingLargerCapacity_DoesNotInvalidateEnumeration",
                    "reason": "outdated"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_string_string.EnsureCapacity_Generic_RequestingLargerCapacity_DoesNotInvalidateEnumeration",
                    "reason": "outdated"
                },
                {
                    "name": "System.Collections.Tests.Dictionary_Generic_Tests_int_int.EnsureCapacity_Generic_RequestingLargerCapacity_DoesNotInvalidateEnumeration",
                    "reason": "outdated"
                }
            ]
        }
    },
    {
        "name": "System.Linq.Parallel.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Linq.Parallel.Tests.GetEnumeratorTests.GetEnumerator",
                    "reason": "outdated"
                },
                {
                    "name": "System.Linq.Parallel.Tests.GetEnumeratorTests.GetEnumerator_Unordered",
                    "reason": "outdated"
                }
            ]
        }
    },
    {
        "name": "System.Linq.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Linq.Tests.EmptyEnumerableTest.CastToIListGeneric",
                    "reason": "outdated"
                },
                {
                    "name": "System.Linq.Tests.EmptyEnumerableTest.EmptyEnumerableIsIndeedEmpty",
                    "reason": "outdated"
                },
                {
                    "name": "System.Linq.Tests.EmptyEnumerableTest.CastToArray",
                    "reason": "outdated"
                },
                {
                    "name": "System.Linq.Tests.EmptyEnumerableTest.CastToIList",
                    "reason": "outdated"
                },
                {
                    "name": "System.Linq.Tests.EmptyPartitionTests.CantResetEnumerator",
                    "reason": "outdated"
                }
            ]
        }
    },
    {
        "name": "System.ComponentModel.Composition.Tests",
        "enabled": false,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "Microsoft.VisualBasic.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "Microsoft.VisualBasic.Tests.StringsTests.ChrW_CharCodeOutOfRange_ThrowsArgumentException",
                    "reason": "outdated"
                },
                {
                    "name": "Microsoft.VisualBasic.Tests.StringsTests.AscW_NullOrEmpty_ThrowsArgumentException",
                    "reason": "outdated"
                }
            ]
        }
    }
]
