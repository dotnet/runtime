<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="GetPerfTestAssemblies" AssemblyFile="$(ToolsDir)net45/Microsoft.DotNet.Build.CloudTestTasks.dll"/>
  <Import Project="$(ToolsDir)publishtest.targets" />
  <Import Project="$(ToolsDir)CloudTest.targets" />
  <Target Name="UploadPerfAssemblies">
    <Message Text="Searching for Perf tests in $(BinDir)" Importance = "High"/>
    <ItemGroup>
      <TestBinary Include="$(BinDir)**/*.dll" />
      <TestBinary Include="$(BinDir)**/*.exe" />
    </ItemGroup>

    <!-- Get full paths to each of the perf test directories -->
    <GetPerfTestAssemblies TestBinaries="@(TestBinary)" GetFullPaths="true">
      <Output TaskParameter="PerfTestAssemblies" ItemName="CoreCLRPerfTest" />
    </GetPerfTestAssemblies>

    <PropertyGroup>
      <TestRuntimeDependenciesJson>$(SourceDir)Common\test_runtime\project.json</TestRuntimeDependenciesJson>
      <TestRuntimeProjectLockJson>$(SourceDir)Common\test_runtime\project.lock.json</TestRuntimeProjectLockJson>
    </PropertyGroup>

    <ItemGroup>
     <DnuSourceList Include="$(CORE_ROOT)\.nuget\pkg" />
    </ItemGroup>

    <!-- Restore the runtime dependencies -->
    <Exec Command="$(DnuRestoreCommand) &quot;$(TestRuntimeDependenciesJson)&quot;"
           StandardOutputImportance="Low"
           CustomErrorRegularExpression="^Unable to resolve .*"
           IgnoreExitCode="true"
           IgnoreStandardErrorWarningFormat="true" />

    <!-- For each perf test, generate assembly list, and zip up the workitem -->
    <MSBuild Projects="$(MSBuildProjectFile)" Properties="CurrPerfAssembly=%(CoreCLRPerfTest.Identity);TestRuntimeProjectLockJson=$(TestRuntimeProjectLockJson)" Targets="_zipSingleProject"/>

    <!-- After all workitems are packaged, call the CloudBuild Targets from Build Tools which upload these workitems and trigger a test run for these workitems -->
    <MSBuild Projects="$(MSBuildProjectFile)" Properties="BinDir=$(BinDir)../" Targets="CloudBuild" />

  </Target>

  <Target Name="_zipSingleProject">
    <PropertyGroup>
      <OutDir>$([System.IO.Path]::GetDirectoryName($(CurrPerfAssembly)))/</OutDir>
      <TestArchiveDir>$(BaseOutputPath)\testStagingDir\</TestArchiveDir>
      <TestProjectName>$([System.IO.Path]::GetFileNameWithoutExtension($(CurrPerfAssembly)))</TestProjectName>
      <ProjectLockJson>$(OutDir)project.lock.json</ProjectLockJson>
    </PropertyGroup>

    <ItemGroup>
      <TestNugetProjectLockFile Include="$(ProjectLockJson)" Condition="Exists($(ProjectLockJson))"/>
      <TestNugetProjectLockFile Include="$(TestRuntimeProjectLockJson)" Condition="Exists($(TestRuntimeProjectLockJson))"/>
    </ItemGroup>

    <!-- Generate Assembly list based on the individual project's project.json as well as the common runtime dependencies generated by AddAssFilesToAssemblyList target -->
    <PrereleaseResolveNuGetPackageAssets
                               AllowFallbackOnTargetSelection="true"
                               IncludeFrameworkReferences="false"
                               NuGetPackagesDirectory="$(PackagesDir)"
                               RuntimeIdentifier="$(TestNugetRuntimeId)"
                               ProjectLanguage="C#"
                               ProjectLockFile="%(TestNugetProjectLockFile.FullPath)"
                               TargetMonikers="@(TestTargetFramework)">
      <Output TaskParameter="ResolvedCopyLocalItems" ItemName="RequiredAssemblies" />
    </PrereleaseResolveNuGetPackageAssets>
    <ItemGroup>
      <AssemblyPaths Include="$([MSBuild]::MakeRelative($(PackagesDir), %(RequiredAssemblies.FullPath)))" />
    </ItemGroup>
    <RemoveDuplicatesWithLastOneWinsPolicy Inputs="@(AssemblyPaths)">
      <Output TaskParameter="Filtered" ItemName="UniqueAssemblyPaths" />
    </RemoveDuplicatesWithLastOneWinsPolicy>
    <PropertyGroup>
      <_TestCopyLocalByFileNameWithoutDuplicates></_TestCopyLocalByFileNameWithoutDuplicates>
    </PropertyGroup>
    <ItemGroup>
      <UniqueAssemblyPaths Include="$([System.String]::Copy('%(_TestCopyLocalByFileNameWithoutDuplicates.SourcePath)').Replace('$(PackagesDir)',''))" Condition="'%(_TestCopyLocalByFileNameWithoutDuplicates.NugetPackageId)' != ''" />
    </ItemGroup>
    <WriteLinesToFile
      File="$(OutDir)/assemblylist.flat.txt"
      Lines="@(UniqueAssemblyPaths)"
      Overwrite="true"
      Encoding="Ascii" />

    <GenerateAssemblyList
      InputListLocation="$(OutDir)assemblylist.flat.txt"
      OutputListLocation="$(OutDir)assemblylist.txt"
     />

    <Message Text="Archiving Perf test assemblies for project: $(OutDir)" Importance="High" />
    <MSBuild Projects="$(MSBuildProjectFile)" Properties="OutDir=$(OutDir);TestArchiveDir=$(TestArchiveDir);TestProjectName=$(TestProjectName);DisableCopyTestToTestDirectory=true" Targets="ArchiveTestBuild"/>
  </Target>
</Project>