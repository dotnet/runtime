<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />
  <PropertyGroup>
      <RestoreOutputPath>$(SourceDir)Common\CoreFX\obj</RestoreOutputPath>
      <Language>C#</Language>
      <NugetTargetMoniker>.NETCoreApp,Version=v3.0</NugetTargetMoniker>
      <TargetFramework>netcoreapp3.0</TargetFramework>
      <ContainsPackageReferences>true</ContainsPackageReferences>
      <CLRTestKind>SharedLibrary</CLRTestKind>
      <IsTestProject>false</IsTestProject>
      <MicrosoftDiagnosticsRuntimePackageVersion>1.0.5</MicrosoftDiagnosticsRuntimePackageVersion>
  </PropertyGroup>

  <!-- Switch RuntimeIdentifier according to currently targeted OSGroup -->
  <PropertyGroup>
      <RuntimeIdentifier Condition="'$(OSGroup)' == 'Windows_NT'">win-$(Platform)</RuntimeIdentifier>
      <RuntimeIdentifier Condition="'$(OSGroup)' == 'Linux'">linux-$(Platform)</RuntimeIdentifier>
      <RuntimeIdentifier Condition="'$(OSGroup)' == 'OSX'">osx-$(Platform)</RuntimeIdentifier>
      <NugetRuntimeIdentifier>$(RuntimeIdentifier)</NugetRuntimeIdentifier>

      <!-- Set AdditionalRestoreArgs so the _DnuRestoreCommandFull in Tools\packageresolve.targets
           passes these on to 'dotnet restore'. This is needed so all the various dirs.props files
           set up the target architecture correctly, so $(Platform) above gets set correctly, among
           other things. (Note that _DnuRestoreCommandFull doesn't properly set
           TargetGroup/ConfigurationGroup/ArchGroup, and even if they are set, it isn't used by
           the various dirs.props files.)
      -->
      <AdditionalRestoreArgs>/p:__BuildOS=$(__BuildOS) /p:__BuildType=$(__BuildType) /p:__BuildArch=$(__BuildArch)</AdditionalRestoreArgs>
  </PropertyGroup>

  <ItemGroup>

    <!-- Microsoft.Private.CoreFx.OOB is a meta-package that contains references to most of what we need -->
    <PackageReference Include="Microsoft.Private.CoreFx.OOB" Version="$(MicrosoftPrivateCoreFxNETCoreAppVersion)" />

    <!-- dotnet.exe -->
    <PackageReference Include="Microsoft.NETCore.DotNetHost" Version="$(MicrosoftNETCoreAppVersion)" />

    <!-- hostfxr.dll -->
    <PackageReference Include="Microsoft.NETCore.DotNetHostResolver" Version="$(MicrosoftNETCoreAppVersion)" />

    <!-- hostpolicy.dll -->
    <PackageReference Include="Microsoft.NETCore.DotNetHostPolicy" Version="$(MicrosoftNETCoreAppVersion)" />

  </ItemGroup>

  <!-- Target SetupTestingHost needs to run after "AfterResolveReferences" so @(ReferenceCopyLocalPaths) is
       set up, and before "BeforeCompile" because @(ReferenceCopyLocalPaths) is cleared out during the
       compile phase.
  -->
  <Target Name="SetupTestingHost" AfterTargets="AfterResolveReferences" BeforeTargets="BeforeCompile">

    <Error Condition="'$(CORE_ROOT)' == ''"
           Text="CORE_ROOT variable is not set." />

    <PropertyGroup Condition="'$(OSGroup)'=='Windows_NT'">
      <HostFxrFileName>hostfxr</HostFxrFileName>
      <HostFxrFileExtension>dll</HostFxrFileExtension>
      <DotnetExecutableName>dotnet.exe</DotnetExecutableName>
      <HostPolicyFileName>hostpolicy</HostPolicyFileName>
      <HostPolicyExtension>dll</HostPolicyExtension>
    </PropertyGroup>

    <PropertyGroup Condition="'$(OSGroup)'!='Windows_NT'">
      <HostFxrFileName>libhostfxr</HostFxrFileName>
      <HostFxrFileExtension Condition="'$(OSGroup)' == 'Linux' Or '$(OSGroup)' == 'FreeBSD'">so</HostFxrFileExtension>
      <HostFxrFileExtension Condition="$(OSGroup) =='OSX'">dylib</HostFxrFileExtension>
      <HostPolicyFileName>libhostpolicy</HostPolicyFileName>
      <HostPolicyExtension>$(HostFxrFileExtension)</HostPolicyExtension>
      <DotnetExecutableName>dotnet</DotnetExecutableName>
    </PropertyGroup>

    <ItemGroup>
      <!-- Workaround for packages on which Microsoft.NetCoreApp expresses a dependency
           The <PackageToInclude> element doesn't allow a version to be specified and we end up with clashing assembly versions in Core_Root
      -->
      <!--
      <NetCoreAppPackagedAssemblies Include="System.Text.Encoding.CodePages.dll"/>
      -->

      <!-- Use xunit dependencies defined in CoreFX.depproj instead of conflicting versions from test dependencies. -->
      <TestDependenciesToExclude Include="$(CORE_ROOT)\**\xunit*"/>

      <!-- Exclude subdirectories that contain cross-architecture (possibly cross-bitness) crossgen/JIT -->
      <TestDependenciesToExclude Include="$(CORE_ROOT)\**\x64\*"/>

      <!-- Don't include all the nuget files -->
      <TestDependenciesToExclude Include="$(CORE_ROOT)\.nuget\**\*"/>

      <CoreCLRBinariesToExclude Include="@(NetCoreAppPackagedAssemblies);@(TestDependenciesToExclude -> '%(Identity)')" />
    </ItemGroup>

    <ItemGroup>
      <!-- REVIEW: do we need to copy recursively (and flatten the structure into a single destination folder)? Can we just copy
           the top level? Or, should we preserve the hierarchy?
      -->
      <CoreCLRBinaries Include="$(CORE_ROOT)\**\*.*" Exclude="$(CORE_ROOT)\**\@(CoreCLRBinariesToExclude -> '%(Identity)' )" />
    </ItemGroup>

    <ItemGroup>
      <HostFxFile Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == '$(HostFxrFileName)'" />
      <DotnetExe Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == 'dotnet'" />
      <HostPolicyFile Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == '$(HostPolicyFileName)'" />
    </ItemGroup>

    <Copy SourceFiles="@(HostFxFile)"
          DestinationFolder="$(NETCoreAppTestHostFxrPath)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="true" />

    <Copy SourceFiles="@(HostPolicyFile)"
          DestinationFolder="$(NETCoreAppTestSharedFrameworkPath)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="true" />

    <Copy SourceFiles="@(DotnetExe)"
          DestinationFolder="$(TestHostRootPath)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="true"  />

    <Copy SourceFiles="@(CoreCLRBinaries)"
          DestinationFolder="$(NETCoreAppTestSharedFrameworkPath)"
          SkipUnchangedFiles="true" />

    <Exec Command="chmod +x $(TestHostRootPath)%(DotnetExe.Filename)%(DotnetExe.Extension)" Condition="'$(OSGroup)' != 'Windows_NT'"/>
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />

  <PropertyGroup>
    <ProjectAssetsFile>$(SourceDir)Common\CoreFX\obj\project.assets.json</ProjectAssetsFile>
  </PropertyGroup>
</Project>
