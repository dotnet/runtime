<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- All CLRTests need to be of a certain "kind". These kinds are enumerated below.
  By default all tests are BuildAndRun. This means that the build system will Build them
  and construct a run-batch-script for them. -->
  <Choose>
    <When Condition=" '$(CLRTestKind)'=='BuildAndRun' ">
      <PropertyGroup>
        <GenerateRunScript>true</GenerateRunScript>
        <_CLRTestNeedsToRun>true</_CLRTestNeedsToRun>
        <_CLRTestCompilesSource>true</_CLRTestCompilesSource>
        <_CLRTestBuildsExecutable>true</_CLRTestBuildsExecutable>
      </PropertyGroup>
    </When>
    <When Condition=" '$(CLRTestKind)'=='BuildOnly'">
      <PropertyGroup>
        <_CLRTestNeedsToRun>false</_CLRTestNeedsToRun>
        <GenerateRunScript>false</GenerateRunScript>
        <_CLRTestCompilesSource>true</_CLRTestCompilesSource>
        <_CLRTestBuildsExecutable>true</_CLRTestBuildsExecutable>
      </PropertyGroup>
    </When>
    <When Condition=" '$(CLRTestKind)'=='RunOnly' ">
      <PropertyGroup>
        <GenerateRunScript>true</GenerateRunScript>
        <SkipSigning>true</SkipSigning>
        <_CLRTestBuildsExecutable>false</_CLRTestBuildsExecutable>
        <_CLRTestNeedsToRun>true</_CLRTestNeedsToRun>
        <_CLRTestCompilesSource>false</_CLRTestCompilesSource>
      </PropertyGroup>
    </When>
    <When Condition=" '$(CLRTestKind)'=='SharedLibrary' Or '$(OutputType)' == 'Library' ">
      <PropertyGroup>
        <_CLRTestCompilesSource>true</_CLRTestCompilesSource>
        <_CLRTestNeedsToRun>false</_CLRTestNeedsToRun>
        <GenerateRunScript>false</GenerateRunScript>
        <_CLRTestBuildsExecutable>false</_CLRTestBuildsExecutable>
      </PropertyGroup>
    </When>
  </Choose>
  
  <PropertyGroup> 
    <_CLRTestNeedsProjectToRun>false</_CLRTestNeedsProjectToRun>
    <_CLRTestNeedsProjectToRun Condition=" '$(_CLRTestNeedsToRun)' and '!$(_CLRTestBuildsExecutable)' ">true</_CLRTestNeedsProjectToRun>
  </PropertyGroup>

  <!--
  If it needs ProjectToRun, turn the project into a ProjectReference so it gets built
  -->
  <ItemGroup Condition=" $(_CLRTestNeedsProjectToRun) ">
    <ProjectReference Include="$(CLRTestProjectToRun)">
      <Private>false</Private>
    </ProjectReference>
  </ItemGroup>
        
  <PropertyGroup>
    <ErrorIfBuildToolsRestoredFromIndividualProject Condition="!Exists('$(ToolsDir)')">true</ErrorIfBuildToolsRestoredFromIndividualProject>
  </PropertyGroup>
  
  <Import Project="..\dir.targets" />

  <Target Name="CreateManifestResourceNames" />
  <Target Name="CoreCompile" />
  
  <!-- If we are a run-only, that depends on another project, this is the "Build" we use. I.e. build all dependency projects, absolutely.
  OR, in rare conditions (i.e. non-existant ones so far) a run-only script might be something we depend on, and so we may be asked to
  build a run only for a higher priority testcase.
  -->
  <Target Name="Build" Condition="('$(CLRTestPriority)' &lt;= '$(CLRTestPriorityToBuild)') Or ('$(_CLRTestInServiceOfHigherPriority)')">
    <MSBuild Projects="@(ProjectReference)" Properties="_CLRTestInServiceOfHigherPriority=true"/>
    <MakeDir Condition="'$(CLRTestKind)' == 'RunOnly'" ContinueOnError="false" Directories="$(OutputPath)" />
  </Target>
  
  <!-- We will use an imported build here in the instance that we have source that we need to build, and we are the correct priority...OR if we are being asked to build for
  a test with a higher priority. -->
  <Import Project="$(ToolsDir)Build.Common.targets" Condition="(Exists('$(ToolsDir)Build.Common.targets') And $(_CLRTestCompilesSource) And '$(CLRTestPriority)' &lt;= '$(CLRTestPriorityToBuild)') Or ('$(_CLRTestInServiceOfHigherPriority)')" />


  <Import Project="..\override.targets" Condition="Exists('..\override.targets')"/>

  <!-- We enable auto-unification of assembly references after importing the common targets.  Binding redirects are not needed
       for coreclr since it auto-unifies, so the warnings we get without this setting are just noise -->
  <PropertyGroup>
    <AutoUnifyAssemblyReferences>true</AutoUnifyAssemblyReferences>
  </PropertyGroup>

  <!-- Project language -->
  <!-- TODO: This might just be the Language property -->
  <PropertyGroup Condition="'$(ProjectLanguage)' == ''">
    <ProjectLanguage Condition="'$(MSBuildProjectExtension)' == '.ilproj' OR '$(Language)' == 'IL'">IL</ProjectLanguage>
    <ProjectLanguage Condition="'$(MSBuildProjectExtension)' == '.csproj' OR '$(Language)' == 'C#' OR '$(ProjectLanguage)'==''">CSharp</ProjectLanguage>
  </PropertyGroup>
  
  <!-- TODO (#1122): import this from the ToolsDir once it becomes available -->
  <Import Project="$(ProjectDir)src\IL.targets" Condition="'$(ProjectLanguage)' == 'IL'" />


  <Import Project="CLRTest.Execute.targets" />
  <Target Name="CreateExecuteScript" 
          AfterTargets="Build"
          Condition="'$(GenerateRunScript)' != 'false' And (('$(CLRTestPriority)' &lt;= '$(CLRTestPriorityToBuild)') Or '$(_CLRTestInServiceOfHigherPriority)')"
          DependsOnTargets="GenerateExecutionScriptsInternal" />

  <PropertyGroup>
      <OutDir>$(BaseOutputPathWithConfig)$(BuildProjectRelativeDir)\</OutDir>
  </PropertyGroup>

  <Target Name="CopyNativeProjectBinaries">
     <ItemGroup>
        <NativeProjectBinaries Include="$(NativeProjectOutputFolder)\**\*.*" />
     </ItemGroup>

     <Error  Text="The native project files are missing in $(NativeProjectOutputFolder) please run build from the root of the repo at least once"
             Condition="'@(NativeProjectBinaries)' == ''" />

     <Copy
        SourceFiles="@(NativeProjectBinaries)"
        DestinationFiles="@(NativeProjectBinaries -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')"
        SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
        OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
        Retries="$(CopyRetryCount)"
        RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
        UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)">
        <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
     </Copy>
  </Target>

  <Target Name="ResolveCmakeNativeProjectReference"
          Condition="'@(ProjectReference)' != ''"
          BeforeTargets="BeforeResolveReferences;BeforeClean" >
     <ItemGroup>
        <NativeProjectReference Include="%(ProjectReference.Identity)" Condition="$([System.String]::Copy(%(ProjectReference.FileName)).ToUpper()) == 'CMAKELISTS'" />
        <ProjectReference Remove="%(NativeProjectReference.Identity)" />
        <NativeProjectReferenceNormalized Include="@(NativeProjectReference -> '%(FullPath)')" />
     </ItemGroup>
  </Target>

  <Target Name="ConsolidateNativeProjectReference"
          Condition="'@(NativeProjectReferenceNormalized)' != ''"
          BeforeTargets="Build" >
     <ItemGroup>
        <NativeProjectOutputFoldersToCopy Include="$([System.String]::Copy('%(NativeProjectReferenceNormalized.RelativeDir)').Replace($(SourceDir),$(__NativeTestIntermediatesDir)\src\))$(Configuration)\"/>
     </ItemGroup>

    <Message Text= "Full native project references are :%(NativeProjectReferenceNormalized.Identity)" />
    <Message Text= "Native binaries will be copied from :%(NativeProjectOutputFoldersToCopy.Identity)" />
   <MSBuild Projects="$(MSBuildProjectFile)" Targets="CopyNativeProjectBinaries" Properties="NativeProjectOutputFolder=%(NativeProjectOutputFoldersToCopy.Identity)" Condition="'@(NativeProjectReference)' != ''" />

  </Target>

  <PropertyGroup>
     <PrepareForRunDependsOn>$(PrepareForRunDependsOn);ResetReferenceCopyLocalPaths</PrepareForRunDependsOn>
  </PropertyGroup>

  <Target Name="ResetReferenceCopyLocalPaths"
          Condition="'@(ReferenceCopyLocalPaths)' != ''"
          BeforeTargets="_CopyFilesMarkedCopyLocal">
    <ItemGroup>
       <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.CopyLocal)' != 'true'"/>
    </ItemGroup>
  </Target>

</Project>

