<!--
***********************************************************************************************
CLRTest.Execute.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file contains the logic for providing Execution Script generation.

WARNING:   When setting properties based on their current state (for example:
           <Foo Condition="'$(Foo)'==''>Bar</Foo>).  Be very careful.  Another script generation
           target might be trying to do the same thing.  It's better to avoid this by instead setting a new property.

           Additionally, be careful with itemgroups.  Include will propagate outside of the target too!

***********************************************************************************************
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <BashScriptSnippetGen>$(BashScriptSnippetGen);GetCrossgenBashScript</BashScriptSnippetGen>
    <BatchScriptSnippetGen>$(BatchScriptSnippetGen);GetCrossgenBatchScript</BatchScriptSnippetGen>
  </PropertyGroup>
  
  <!--
    This returns the portion of the execution script that generates the required lines to crossgen the test executable.

    Tests can opt out of ahead-of-time (AOT) compilation from crossgen / crossgen2 by setting this property in their project:

      <CrossGenTest>false</CrossGenTest>
  -->
  <Target Name="GetCrossgenBashScript">

    <PropertyGroup>
      <CrossgenBashScript Condition="'$(CLRTestKind)' == 'BuildAndRun' and '$(CrossGenTest)' != 'false'">
        <![CDATA[
# CrossGen Script
if [ ! -z ${RunCrossGen+x} ]%3B then
    export COMPlus_ZapRequire=$(ZapRequire)
    export COMPlus_ZapRequireList=$(MSBuildProjectName)
    if [ ! -f $(MSBuildProjectName).org ]%3B then
        TakeLock
        if [ ! -f $(MSBuildProjectName).org ]%3B then
          mkdir IL
          cp $(MSBuildProjectName).dll IL/$(MSBuildProjectName).dll
          mv $(MSBuildProjectName).dll $(MSBuildProjectName).org
          __Command=$_DebuggerFullPath "$CORE_ROOT/crossgen" /Platform_Assemblies_Paths $CORE_ROOT%3A$PWD /in $(MSBuildProjectName).org /out $(MSBuildProjectName).dll
          echo $__Command
          $__Command
          __cgExitCode=$?
          if [ $__cgExitCode -ne 0 ]
          then
            echo Crossgen failed with exitcode: $__cgExitCode
            ReleaseLock
            exit 1
          fi
        fi
        ReleaseLock
    fi
fi
# CrossGen2 Script
if [ ! -z ${RunCrossGen2+x} ]%3B then
    TakeLock
    if [ ! -d IL ]%3B then
      mkdir IL
      if [ ! -z ${CompositeBuildMode+x} ]%3B then
        cp $(MSBuildProjectName).dll IL/
        cp $CORE_ROOT/lib*.so $CORE_ROOT/lib*.dylib $(scriptPath)
      else
        cp *.dll IL/
      fi
    fi

    if [ ! -z ${LargeVersionBubble+x} ]%3B then
        ExtraCrossGen2Args+=" --inputbubble"
    fi

    __cg2ExitCode=0

   OneFileCrossgen2() {
      __OutputFile=$1

      __ResponseFile="$__OutputFile.rsp"
      rm $__ResponseFile

      __Command=$_DebuggerFullPath
      # Tests run locally need __TestDotNetCmd (set by runtest.py) or a compatible 5.0 dotnet runtime in the path
      if [ ! -z ${__TestDotNetCmd+x} ] %3B then
          __Command+=" $__TestDotNetCmd"
      else
          __Command+=" dotnet"
      fi
      __Command+=" $CORE_ROOT/crossgen2/crossgen2.dll"
      __Command+=" @$__ResponseFile"
      __Command+=" $ExtraCrossGen2Args"

      echo $2 >> $__ResponseFile

      echo -o:$__OutputFile>>$__ResponseFile
      echo -r:$CORE_ROOT/System.*.dll>>$__ResponseFile
      echo -r:$CORE_ROOT/Microsoft.*.dll>>$__ResponseFile
      echo -r:$CORE_ROOT/mscorlib.dll>>$__ResponseFile
      echo --targetarch:$(TargetArchitecture)>>$__ResponseFile
      echo -O>>$__ResponseFile

      echo "Response file: $__ResponseFile"
      cat $__ResponseFile
      echo "Running CrossGen2: $__Command"
      $__Command
      __cg2ExitCode=$?
  }

    if [ ! -z ${CompositeBuildMode+x} ]%3B then
        ExtraCrossGen2Args+= --composite
        OneFileCrossgen2 "$PWD/composite-r2r.dll" "$PWD/IL/*.dll"
    else
        ExtraCrossGen2Args+= -r:$PWD/IL/*.dll
      for dllFile in $PWD/IL/*.dll
      do
        echo $dllFile
        bareFileName="${dllFile##*/}"
        OneFileCrossgen2 "$PWD/$bareFileName" "$dllFile"
        if [ $__cg2ExitCode -ne 0 ]; then
          break
        fi
      done
    fi

    if [ $__cg2ExitCode -ne 0 ]; then
      echo Crossgen2 failed with exitcode: $__cg2ExitCode
      ReleaseLock
      exit 1
    fi


    ReleaseLock
fi
        ]]>
      </CrossgenBashScript>

      <BashCLRTestPreCommands>$(BashCLRTestPreCommands);$(CrossgenBashScript)</BashCLRTestPreCommands>
    </PropertyGroup>
  </Target>

  <Target Name="GetCrossgenBatchScript">
    <PropertyGroup>
      <CrossgenBatchScript Condition="'$(CLRTestKind)' == 'BuildAndRun' and '$(CrossGenTest)' != 'false'">
        <![CDATA[

REM CrossGen Script
if defined RunCrossGen (
    if defined LargeVersionBubble ( set OptionalArguments=!OptionalArguments! /largeversionbubble)
    set COMPlus_ZapRequire=$(ZapRequire)
    set COMPlus_ZapRequireList=$(MSBuildProjectName)
    if not exist "$(MSBuildProjectName).org" (
        call :TakeLock
        set CrossGenStatus=0
        if not exist "$(MSBuildProjectName).org" (
            mkdir IL
            copy $(MSBuildProjectName).dll IL\$(MSBuildProjectName).dll
            ren $(MSBuildProjectName).dll $(MSBuildProjectName).org
            set __Command=!_DebuggerFullPath! "!CORE_ROOT!\crossgen.exe" !OptionalArguments! /Platform_Assemblies_Paths !CORE_ROOT!%3B%25cd%25 /in %21scriptPath%21$(MSBuildProjectName).org /out %21scriptPath%21\$(MSBuildProjectName).dll
            echo "!__Command!"
            call !__Command!
            set CrossGenStatus=!ERRORLEVEL!
        )
        call :ReleaseLock
        IF NOT !CrossGenStatus!==0 (
            ECHO Crossgen failed with exitcode - !CrossGenStatus!
            Exit /b 1
        )
    )
)
REM CrossGen2 Script
if defined RunCrossGen2 (
    if defined LargeVersionBubble ( set ExtraCrossGen2Args=!ExtraCrossGen2Args! --inputbubble)
    call :TakeLock
    set CrossGen2Status=0
    if not exist "IL" (
        mkdir IL
        if defined CompositeBuildMode (
          copy *.dll IL\
        ) else (
          copy *.dll IL\
        )
    )

    if defined CompositeBuildMode (
        set ExtraCrossGen2Args=!ExtraCrossGen2Args! --composite
        set __OutputFile=!scriptPath!\composite-r2r.dll
        rem In composite mode, treat all dll's in the test folder as rooting inputs
        set __InputFile=!scriptPath!IL\*.dll
        call :CompileOneFileCrossgen2
        IF NOT !CrossGen2Status!==0 goto :DoneCrossgen2Operations
    ) else (
        for %%I in (!scriptPath!\*.dll) do (
            set ExtraCrossGen2Args=!ExtraCrossGen2Args! -r:!scriptPath!IL\*.dll
            set __OutputFile=!scriptPath!\%%~nI.dll
            set __InputFile=!scriptPath!IL\%%~nI.dll
            call :CompileOneFileCrossgen2
            IF NOT !CrossGen2Status!==0 (
              IF NOT !CrossGen2Status!==2 goto :DoneCrossgen2Operations
            )
            rem Normalize return code 2, no valid input files, to success code
            set CrossGen2Status=0
        )
    )

    goto :DoneCrossgen2Operations
:CompileOneFileCrossgen2
    set __ResponseFile=!__OutputFile!.rsp
    del /Q !__ResponseFile!

    set __Command=!_DebuggerFullPath!
    REM Tests run locally need __TestDotNetCmd (set by runtest.py) or a compatible 5.0 dotnet runtime in the path
    if defined __TestDotNetCmd (
        set __Command=!__Command! "!__TestDotNetCmd!"
    ) else (
        set __Command=!__Command! "dotnet"
    )
    set __Command=!__Command! "!CORE_ROOT!\crossgen2\crossgen2.dll"
    set __Command=!__Command! @"!__ResponseFile!"
    set __Command=!__Command! !ExtraCrossGen2Args!
    echo !__InputFile!>>!__ResponseFile!
    echo -o:!__OutputFile!>>!__ResponseFile!
    echo --targetarch:$(TargetArchitecture)>>!__ResponseFile!
    echo -O>>!__ResponseFile!
    echo -r:!CORE_ROOT!\System.*.dll>>!__ResponseFile!
    echo -r:!CORE_ROOT!\Microsoft.*.dll>>!__ResponseFile!
    echo -r:!CORE_ROOT!\mscorlib.dll>>!__ResponseFile!
    echo -r:!CORE_ROOT!\netstandard.dll>>!__ResponseFile!

    echo Response file: !__ResponseFile!
    type !__ResponseFile!

    echo "!__Command!"
    call !__Command!
    set CrossGen2Status=!ERRORLEVEL!
    Exit /b 0

:DoneCrossgen2Operations
    call :ReleaseLock
    IF NOT !CrossGen2Status!==0 (
        ECHO Crossgen2 failed with exitcode - !CrossGen2Status!
        Exit /b 1
    )
)
        ]]>
      </CrossgenBatchScript>

      <CLRTestBatchPreCommands>$(CLRTestBatchPreCommands);$(CrossgenBatchScript)</CLRTestBatchPreCommands>
    </PropertyGroup>
  </Target>



</Project>
