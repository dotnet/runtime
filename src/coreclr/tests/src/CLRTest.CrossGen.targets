<!--
***********************************************************************************************
CLRTest.Execute.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file contains the logic for providing Execution Script generation.

WARNING:   When setting properties based on their current state (for example:
           <Foo Condition="'$(Foo)'==''>Bar</Foo>).  Be very careful.  Another script generation
           target might be trying to do the same thing.  It's better to avoid this by instead setting a new property.
           
           Additionally, be careful with itemgroups.  Include will propagate outside of the target too!

***********************************************************************************************
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <BashScriptSnippetGen>$(BashScriptSnippetGen);GetCrossgenBashScript</BashScriptSnippetGen>
    <BatchScriptSnippetGen>$(BatchScriptSnippetGen);GetCrossgenBatchScript</BatchScriptSnippetGen>
  </PropertyGroup>
  <ItemGroup>
    <CLRTestBashEnvironmentVariable  Condition="'$(CrossGenTest)' == 'true'" Include = "export RunCrossGen=1"/>
    <CLRTestBatchEnvironmentVariable Condition="'$(CrossGenTest)' == 'true'" Include = "set RunCrossGen=1"/>
    <CLRTestBashEnvironmentVariable  Condition="'$(CrossGenTest)' == 'false'" Include = "unset RunCrossGen"/>
    <CLRTestBatchEnvironmentVariable Condition="'$(CrossGenTest)' == 'false'" Include = "set RunCrossGen="/>
    <CLRTestBashEnvironmentVariable  Condition="'$(CrossGenTest)' == 'false'" Include = "unset RunCrossGen2"/>
    <CLRTestBatchEnvironmentVariable Condition="'$(CrossGenTest)' == 'false'" Include = "set RunCrossGen2="/>
  </ItemGroup>

  <!--
    This returns the portion of the execution script that generates the required lines to crossgen the test executable.
  -->
  <Target Name="GetCrossgenBashScript">
    
    <PropertyGroup>
      <CrossgenBashScript Condition="'$(CLRTestKind)' == 'BuildAndRun'">
        <![CDATA[
# CrossGen Script
if [ ! -z ${RunCrossGen+x} ]%3B then
    export COMPlus_ZapRequire=$(ZapRequire)
    export COMPlus_ZapRequireList=$(MSBuildProjectName)
    if [ ! -f $(MSBuildProjectName).org ]%3B then
        TakeLock
        if [ ! -f $(MSBuildProjectName).org ]%3B then
          mkdir IL
          cp $(MSBuildProjectName).dll IL/$(MSBuildProjectName).dll
          mv $(MSBuildProjectName).dll $(MSBuildProjectName).org
          __Command=$_DebuggerFullPath "$CORE_ROOT/crossgen" /Platform_Assemblies_Paths $CORE_ROOT%3A$PWD /in $(MSBuildProjectName).org /out $(MSBuildProjectName).dll
          echo $__Command
          $__Command
          __cgExitCode=$?
          if [ $__cgExitCode -ne 0 ]
          then
            echo Crossgen failed with exitcode: $__cgExitCode
            ReleaseLock
            exit 1
          fi
        fi 
        ReleaseLock       
    fi        
fi        
# CrossGen2 Script
if [ ! -z ${RunCrossGen2+x} ]%3B then
    if [ ! -f $(MSBuildProjectName).org ]%3B then
        TakeLock
        if [ ! -f $(MSBuildProjectName).org ]%3B then
          mkdir IL
          cp $(MSBuildProjectName).dll IL/$(MSBuildProjectName).dll
          mv $(MSBuildProjectName).dll $(MSBuildProjectName).org
          __Command=$_DebuggerFullPath "$CORE_ROOT/crossgen2/crossgen2" -r:$CORE_ROOT/System.*.dll -r:$CORE_ROOT/Microsoft.*.dll -r:$CORE_ROOT/mscorlib.dll -r:$PWD/*.dll --targetarch=x64 -O --inputbubble -o:$(scriptPath)$(MSBuildProjectName).dll $(scriptPath)$(MSBuildProjectName).org
          echo $__Command
          $__Command
          __cg2ExitCode=$?
          if [ $__cg2ExitCode -ne 0 ]
          then
            echo Crossgen2 failed with exitcode: $__cg2ExitCode
            ReleaseLock
            exit 1
          fi
        fi 
        ReleaseLock       
    fi        
fi        
        ]]>        
      </CrossgenBashScript>

      <BashCLRTestPreCommands>$(BashCLRTestPreCommands);$(CrossgenBashScript)</BashCLRTestPreCommands>
    </PropertyGroup>
  </Target>

  <Target Name="GetCrossgenBatchScript">
    
    <PropertyGroup>
      <CrossgenBatchScript Condition="'$(CLRTestKind)' == 'BuildAndRun'">
        <![CDATA[

REM CrossGen Script
if defined RunCrossGen ( 
    if defined LargeVersionBubble ( set OptionalArguments=!OptionalArguments! /largeversionbubble)
    set COMPlus_ZapRequire=$(ZapRequire)
    set COMPlus_ZapRequireList=$(MSBuildProjectName)
    if not exist "$(MSBuildProjectName).org" (
        call :TakeLock
        set CrossGenStatus=0
        if not exist "$(MSBuildProjectName).org" (
            mkdir IL
            copy $(MSBuildProjectName).dll IL\$(MSBuildProjectName).dll
            ren $(MSBuildProjectName).dll $(MSBuildProjectName).org
            set __Command=!_DebuggerFullPath! "!CORE_ROOT!\crossgen.exe" !OptionalArguments! /Platform_Assemblies_Paths !CORE_ROOT!%3B%25cd%25 /in %21scriptPath%21$(MSBuildProjectName).org /out %21scriptPath%21\$(MSBuildProjectName).dll
            echo "!__Command!"
            call !__Command!
            set CrossGenStatus=!ERRORLEVEL!
        )
        call :ReleaseLock
        IF NOT !CrossGenStatus!==0 (
            ECHO Crossgen failed with exitcode - !CrossGenStatus!
            Exit /b 1
        )
    )
) 
REM CrossGen2 Script
if defined RunCrossGen2 ( 
    if defined LargeVersionBubble ( set OptionalArguments=!OptionalArguments! /largeversionbubble)
    if not exist "$(MSBuildProjectName).org" (
        call :TakeLock
        set CrossGen2Status=0
        if not exist "$(MSBuildProjectName).org" (
            mkdir IL
            copy $(MSBuildProjectName).dll IL\$(MSBuildProjectName).dll
            ren $(MSBuildProjectName).dll $(MSBuildProjectName).org
            set __Command=!_DebuggerFullPath! "!CORE_ROOT!\crossgen2\crossgen2" %21scriptPath%21$(MSBuildProjectName).org -o:%21scriptPath%21$(MSBuildProjectName).dll --targetarch:x64 -O --inputbubble -r:"!CORE_ROOT!\System.*.dll" -r:"!CORE_ROOT!\Microsoft.*.dll" -r:"!CORE_ROOT!\mscorlib.dll" -r:%25cd%25\*.dll
            echo "!__Command!"
            call !__Command!
            set CrossGen2Status=!ERRORLEVEL!
        )
        call :ReleaseLock
        IF NOT !CrossGen2Status!==0 (
            ECHO Crossgen2 failed with exitcode - !CrossGen2Status!
            Exit /b 1
        )
    )
) 
        ]]>
      </CrossgenBatchScript>

      <CLRTestBatchPreCommands>$(CLRTestBatchPreCommands);$(CrossgenBatchScript)</CLRTestBatchPreCommands>
    </PropertyGroup>
  </Target>


  
</Project>