// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

/******************************************************************************
 * This file is auto-generated from a template file by the GenerateTests.csx  *
 * script in tests\src\JIT\HardwareIntrinsics\X86\Shared. In order to make    *
 * changes, please update the corresponding template and run according to the *
 * directions listed in the file.                                             *
 ******************************************************************************/

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;

namespace JIT.HardwareIntrinsics.X86
{{
    public static partial class Program
    {{
        private static void {2}{4}()
        {{
            var test = new BooleanBinaryOpTest__{2}{4}();

            if (test.IsSupported)
            {{
                // Validates basic functionality works, using Unsafe.Read
                test.RunBasicScenario_UnsafeRead();

                if ({1}.IsSupported)
                {{
                    // Validates basic functionality works, using Load
                    test.RunBasicScenario_Load();

                    // Validates basic functionality works, using LoadAligned
                    test.RunBasicScenario_LoadAligned();
                }}

                // Validates calling via reflection works, using Unsafe.Read
                test.RunReflectionScenario_UnsafeRead();

                if ({1}.IsSupported)
                {{
                    // Validates calling via reflection works, using Load
                    test.RunReflectionScenario_Load();

                    // Validates calling via reflection works, using LoadAligned
                    test.RunReflectionScenario_LoadAligned();
                }}

                // Validates passing a static member works
                test.RunClsVarScenario();

                // Validates passing a local works, using Unsafe.Read
                test.RunLclVarScenario_UnsafeRead();

                if ({1}.IsSupported)
                {{
                    // Validates passing a local works, using Load
                    test.RunLclVarScenario_Load();

                    // Validates passing a local works, using LoadAligned
                    test.RunLclVarScenario_LoadAligned();
                }}

                // Validates passing the field of a local works
                test.RunLclFldScenario();

                // Validates passing an instance member works
                test.RunFldScenario();
            }}
            else
            {{
                // Validates we throw on unsupported hardware
                test.RunUnsupportedScenario();
            }}

            if (!test.Succeeded)
            {{
                throw new Exception("One or more scenarios did not complete as expected.");
            }}
        }}
    }}

    public sealed unsafe class BooleanBinaryOpTest__{2}{4}
    {{
        private const int VectorSize = {9};

        private const int Op1ElementCount = VectorSize / sizeof({6});
        private const int Op2ElementCount = VectorSize / sizeof({8});

        private static {6}[] _data1 = new {6}[Op1ElementCount];
        private static {8}[] _data2 = new {8}[Op2ElementCount];

        private static {5}<{6}> _clsVar1;
        private static {7}<{8}> _clsVar2;

        private {5}<{6}> _fld1;
        private {7}<{8}> _fld2;

        private BooleanBinaryOpTest__DataTable<{6}, {8}> _dataTable;

        static BooleanBinaryOpTest__{2}{4}()
        {{
            var random = new Random();

            for (var i = 0; i < Op1ElementCount; i++) {{ _data1[i] = {10}; }}
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{5}<{6}>, byte>(ref _clsVar1), ref Unsafe.As<{6}, byte>(ref _data1[0]), VectorSize);
            for (var i = 0; i < Op2ElementCount; i++) {{ _data2[i] = {11}; }}
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{7}<{8}>, byte>(ref _clsVar2), ref Unsafe.As<{8}, byte>(ref _data2[0]), VectorSize);
        }}

        public BooleanBinaryOpTest__{2}{4}()
        {{
            Succeeded = true;

            var random = new Random();

            for (var i = 0; i < Op1ElementCount; i++) {{ _data1[i] = {10}; }}
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{5}<{6}>, byte>(ref _fld1), ref Unsafe.As<{6}, byte>(ref _data1[0]), VectorSize);
            for (var i = 0; i < Op2ElementCount; i++) {{ _data2[i] = {11}; }}
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{7}<{8}>, byte>(ref _fld2), ref Unsafe.As<{8}, byte>(ref _data2[0]), VectorSize);

            for (var i = 0; i < Op1ElementCount; i++) {{ _data1[i] = {10}; }}
            for (var i = 0; i < Op2ElementCount; i++) {{ _data2[i] = {11}; }}
            _dataTable = new BooleanBinaryOpTest__DataTable<{6}, {8}>(_data1, _data2, VectorSize);
        }}

        public bool IsSupported => {0}.IsSupported;

        public bool Succeeded {{ get; set; }}

        public void RunBasicScenario_UnsafeRead()
        {{
            var result = {0}.{2}(
                Unsafe.Read<{5}<{6}>>(_dataTable.inArray1Ptr),
                Unsafe.Read<{7}<{8}>>(_dataTable.inArray2Ptr)
            );

            ValidateResult(_dataTable.inArray1Ptr, _dataTable.inArray2Ptr, result);
        }}

        public void RunBasicScenario_Load()
        {{
            var result = {0}.{2}(
                {1}.Load{5}(({6}*)(_dataTable.inArray1Ptr)),
                {1}.Load{7}(({8}*)(_dataTable.inArray2Ptr))
            );

            ValidateResult(_dataTable.inArray1Ptr, _dataTable.inArray2Ptr, result);
        }}

        public void RunBasicScenario_LoadAligned()
        {{
            var result = {0}.{2}(
                {1}.LoadAligned{5}(({6}*)(_dataTable.inArray1Ptr)),
                {1}.LoadAligned{7}(({8}*)(_dataTable.inArray2Ptr))
            );

            ValidateResult(_dataTable.inArray1Ptr, _dataTable.inArray2Ptr, result);
        }}

        public void RunReflectionScenario_UnsafeRead()
        {{
            var result = typeof({0}).GetMethod(nameof({0}.{2}), new Type[] {{ typeof({5}<{6}>), typeof({7}<{8}>) }})
                                     .Invoke(null, new object[] {{
                                        Unsafe.Read<{5}<{6}>>(_dataTable.inArray1Ptr),
                                        Unsafe.Read<{7}<{8}>>(_dataTable.inArray2Ptr)
                                     }});

            ValidateResult(_dataTable.inArray1Ptr, _dataTable.inArray2Ptr, (bool)(result));
        }}

        public void RunReflectionScenario_Load()
        {{
            var result = typeof({0}).GetMethod(nameof({0}.{2}), new Type[] {{ typeof({5}<{6}>), typeof({7}<{8}>) }})
                                     .Invoke(null, new object[] {{
                                        {1}.Load{5}(({6}*)(_dataTable.inArray1Ptr)),
                                        {1}.Load{7}(({8}*)(_dataTable.inArray2Ptr))
                                     }});

            ValidateResult(_dataTable.inArray1Ptr, _dataTable.inArray2Ptr, (bool)(result));
        }}

        public void RunReflectionScenario_LoadAligned()
        {{
            var result = typeof({0}).GetMethod(nameof({0}.{2}), new Type[] {{ typeof({5}<{6}>), typeof({7}<{8}>) }})
                                     .Invoke(null, new object[] {{
                                        {1}.LoadAligned{5}(({6}*)(_dataTable.inArray1Ptr)),
                                        {1}.LoadAligned{7}(({8}*)(_dataTable.inArray2Ptr))
                                     }});

            ValidateResult(_dataTable.inArray1Ptr, _dataTable.inArray2Ptr, (bool)(result));
        }}

        public void RunClsVarScenario()
        {{
            var result = {0}.{2}(
                _clsVar1,
                _clsVar2
            );

            ValidateResult(_clsVar1, _clsVar2, result);
        }}

        public void RunLclVarScenario_UnsafeRead()
        {{
            var left = Unsafe.Read<{5}<{6}>>(_dataTable.inArray1Ptr);
            var right = Unsafe.Read<{7}<{8}>>(_dataTable.inArray2Ptr);
            var result = {0}.{2}(left, right);

            ValidateResult(left, right, result);
        }}

        public void RunLclVarScenario_Load()
        {{
            var left = {1}.Load{5}(({6}*)(_dataTable.inArray1Ptr));
            var right = {1}.Load{7}(({8}*)(_dataTable.inArray2Ptr));
            var result = {0}.{2}(left, right);

            ValidateResult(left, right, result);
        }}

        public void RunLclVarScenario_LoadAligned()
        {{
            var left = {1}.LoadAligned{5}(({6}*)(_dataTable.inArray1Ptr));
            var right = {1}.LoadAligned{7}(({8}*)(_dataTable.inArray2Ptr));
            var result = {0}.{2}(left, right);

            ValidateResult(left, right, result);
        }}

        public void RunLclFldScenario()
        {{
            var test = new BooleanBinaryOpTest__{2}{4}();
            var result = {0}.{2}(test._fld1, test._fld2);

            ValidateResult(test._fld1, test._fld2, result);
        }}

        public void RunFldScenario()
        {{
            var result = {0}.{2}(_fld1, _fld2);

            ValidateResult(_fld1, _fld2, result);
        }}

        public void RunUnsupportedScenario()
        {{
            Succeeded = false;

            try
            {{
                RunBasicScenario_UnsafeRead();
            }}
            catch (PlatformNotSupportedException)
            {{
                Succeeded = true;
            }}
        }}

        private void ValidateResult({5}<{6}> left, {7}<{8}> right, bool result, [CallerMemberName] string method = "")
        {{
            {6}[] inArray1 = new {6}[Op1ElementCount];
            {8}[] inArray2 = new {8}[Op2ElementCount];

            Unsafe.Write(Unsafe.AsPointer(ref inArray1[0]), left);
            Unsafe.Write(Unsafe.AsPointer(ref inArray2[0]), right);

            ValidateResult(inArray1, inArray2, result, method);
        }}

        private void ValidateResult(void* left, void* right, bool result, [CallerMemberName] string method = "")
        {{
            {6}[] inArray1 = new {6}[Op1ElementCount];
            {8}[] inArray2 = new {8}[Op2ElementCount];

            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{6}, byte>(ref inArray1[0]), ref Unsafe.AsRef<byte>(left), VectorSize);
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{8}, byte>(ref inArray2[0]), ref Unsafe.AsRef<byte>(right), VectorSize);

            ValidateResult(inArray1, inArray2, result, method);
        }}

        private void ValidateResult({6}[] left, {8}[] right, bool result, [CallerMemberName] string method = "")
        {{
            var expectedResult = true;

            for (var i = 0; i < Op1ElementCount; i++)
            {{
                expectedResult &= ({12});
            }}

            if (expectedResult != result)
            {{
                Succeeded = false;

                Console.WriteLine($"{{nameof({0})}}.{{nameof({0}.{2})}}<{4}>({5}<{6}>, {7}<{8}>): {{method}} failed:");
                Console.WriteLine($"    left: ({{string.Join(", ", left)}})");
                Console.WriteLine($"   right: ({{string.Join(", ", right)}})");
                Console.WriteLine($"  result: ({{string.Join(", ", result)}})");
                Console.WriteLine();
            }}
        }}
    }}
}}
