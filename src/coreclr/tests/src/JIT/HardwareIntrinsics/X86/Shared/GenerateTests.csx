// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.IO;

// DIRECTIONS:
//    This file isn't very robust and makes several assumptions
//    You can execute it by calling "csi .\GenerateTests.csx"
//
//    csi can be found under the <repo-root>\tools\net46\roslyn directory
//    It must be run such from the directory that contains the csx script
//
//    New tests can be generated from the template by adding an entry to the
//    appropriate <Isa>Inputs array below.
//
//    You can support a new Isa by creating a new array and adding a new
//    "ProcessInputs" call at the bottom of the script.

private static readonly (string templateFileName, string[] templateData)[] SseInputs = new []
{
    // TemplateName                              Isa,   LoadIsa, Method,                                     RetVectorType RetBaseType, Op1VectorType, Op1BaseType,  Op2VectorType, Op2BaseType, Op3VectorType, Op3TBaseype, VectorSize, NextValueOp1,                   NextValueOp2,                   NextValueOp3, ValidateFirstResult,                                                                                                                  ValidateRemainingResults
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "Add",                                      "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(left[0] + right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                    "BitConverter.SingleToInt32Bits(left[i] + right[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "AddScalar",                                "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(left[0] + right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                    "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "And",                                      "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(BitConverter.SingleToInt32Bits(left[0]) & BitConverter.SingleToInt32Bits(right[0])) != BitConverter.SingleToInt32Bits(result[0])",  "(BitConverter.SingleToInt32Bits(left[0]) & BitConverter.SingleToInt32Bits(right[0])) != BitConverter.SingleToInt32Bits(result[0])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "AndNot",                                   "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(~BitConverter.SingleToInt32Bits(left[0]) & BitConverter.SingleToInt32Bits(right[0])) != BitConverter.SingleToInt32Bits(result[0])", "(~BitConverter.SingleToInt32Bits(left[0]) & BitConverter.SingleToInt32Bits(right[0])) != BitConverter.SingleToInt32Bits(result[0])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareEqual",                             "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((left[0] == right[0]) ? -1 : 0)",                                                      "BitConverter.SingleToInt32Bits(result[i]) != ((left[i] == right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareEqualScalar",                       "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((left[0] == right[0]) ? -1 : 0)",                                                      "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("BooleanCmpOpTest.template", new string[] { "Sse", "Sse",   "CompareEqualOrderedScalar",                "Vector128",  "Boolean",   "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(left[0] == right[0]) != result"}),
    ("BooleanCmpOpTest.template", new string[] { "Sse", "Sse",   "CompareEqualUnorderedScalar",              "Vector128",  "Boolean",   "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(left[0] == right[0]) != result"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareGreaterThan",                       "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((left[0] > right[0]) ? -1 : 0)",                                                       "BitConverter.SingleToInt32Bits(result[i]) != ((left[i] > right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareGreaterThanScalar",                 "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((left[0] > right[0]) ? -1 : 0)",                                                       "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("BooleanCmpOpTest.template", new string[] { "Sse", "Sse",   "CompareGreaterThanOrderedScalar",          "Vector128",  "Boolean",   "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(left[0] > right[0]) != result"}),
    ("BooleanCmpOpTest.template", new string[] { "Sse", "Sse",   "CompareGreaterThanUnorderedScalar",        "Vector128",  "Boolean",   "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(left[0] > right[0]) != result"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareGreaterThanOrEqual",                "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((left[0] >= right[0]) ? -1 : 0)",                                                      "BitConverter.SingleToInt32Bits(result[i]) != ((left[i] >= right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareGreaterThanOrEqualScalar",          "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((left[0] >= right[0]) ? -1 : 0)",                                                      "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("BooleanCmpOpTest.template", new string[] { "Sse", "Sse",   "CompareGreaterThanOrEqualOrderedScalar",   "Vector128",  "Boolean",   "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(left[0] >= right[0]) != result"}),
    ("BooleanCmpOpTest.template", new string[] { "Sse", "Sse",   "CompareGreaterThanOrEqualUnorderedScalar", "Vector128",  "Boolean",   "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(left[0] >= right[0]) != result"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareLessThan",                          "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((left[0] < right[0]) ? -1 : 0)",                                                       "BitConverter.SingleToInt32Bits(result[i]) != ((left[i] < right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareLessThanScalar",                    "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((left[0] < right[0]) ? -1 : 0)",                                                       "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("BooleanCmpOpTest.template", new string[] { "Sse", "Sse",   "CompareLessThanOrderedScalar",             "Vector128",  "Boolean",   "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(left[0] < right[0]) != result"}),
    ("BooleanCmpOpTest.template", new string[] { "Sse", "Sse",   "CompareLessThanUnorderedScalar",           "Vector128",  "Boolean",   "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(left[0] < right[0]) != result"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareLessThanOrEqual",                   "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((left[0] <= right[0]) ? -1 : 0)",                                                      "BitConverter.SingleToInt32Bits(result[i]) != ((left[i] <= right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareLessThanOrEqualScalar",             "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((left[0] <= right[0]) ? -1 : 0)",                                                      "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("BooleanCmpOpTest.template", new string[] { "Sse", "Sse",   "CompareLessThanOrEqualOrderedScalar",      "Vector128",  "Boolean",   "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(left[0] <= right[0]) != result"}),
    ("BooleanCmpOpTest.template", new string[] { "Sse", "Sse",   "CompareLessThanOrEqualUnorderedScalar",    "Vector128",  "Boolean",   "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(left[0] <= right[0]) != result"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareNotEqual",                          "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((left[0] != right[0]) ? -1 : 0)",                                                      "BitConverter.SingleToInt32Bits(result[i]) != ((left[i] != right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareNotEqualScalar",                    "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((left[0] != right[0]) ? -1 : 0)",                                                      "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("BooleanCmpOpTest.template", new string[] { "Sse", "Sse",   "CompareNotEqualOrderedScalar",             "Vector128",  "Boolean",   "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(left[0] != right[0]) != result"}),
    ("BooleanCmpOpTest.template", new string[] { "Sse", "Sse",   "CompareNotEqualUnorderedScalar",           "Vector128",  "Boolean",   "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(left[0] != right[0]) != result"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareNotGreaterThan",                    "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != (!(left[0] > right[0]) ? -1 : 0)",                                                      "BitConverter.SingleToInt32Bits(result[i]) != (!(left[i] > right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareNotGreaterThanScalar",              "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != (!(left[0] > right[0]) ? -1 : 0)",                                                      "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareNotGreaterThanOrEqual",             "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != (!(left[0] >= right[0]) ? -1 : 0)",                                                     "BitConverter.SingleToInt32Bits(result[i]) != (!(left[i] >= right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareNotGreaterThanOrEqualScalar",       "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != (!(left[0] >= right[0]) ? -1 : 0)",                                                     "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareNotLessThan",                       "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != (!(left[0] < right[0]) ? -1 : 0)",                                                      "BitConverter.SingleToInt32Bits(result[i]) != (!(left[i] < right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareNotLessThanScalar",                 "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != (!(left[0] < right[0]) ? -1 : 0)",                                                      "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareNotLessThanOrEqual",                "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != (!(left[0] <= right[0]) ? -1 : 0)",                                                     "BitConverter.SingleToInt32Bits(result[i]) != (!(left[i] <= right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareNotLessThanOrEqualScalar",          "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != (!(left[0] <= right[0]) ? -1 : 0)",                                                     "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareOrdered",                           "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((!float.IsNaN(left[0]) && !float.IsNaN(right[0])) ? -1 : 0)",                          "BitConverter.SingleToInt32Bits(result[i]) != ((!float.IsNaN(left[i]) && !float.IsNaN(right[i])) ? -1 : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareOrderedScalar",                     "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((!float.IsNaN(left[0]) && !float.IsNaN(right[0])) ? -1 : 0)",                          "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareUnordered",                         "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((float.IsNaN(left[0]) || float.IsNaN(right[0])) ? -1 : 0)",                            "BitConverter.SingleToInt32Bits(result[i]) != ((float.IsNaN(left[i]) || float.IsNaN(right[i])) ? -1 : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "CompareUnorderedScalar",                   "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(result[0]) != ((float.IsNaN(left[0]) || float.IsNaN(right[0])) ? -1 : 0)",                            "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "Divide",                                   "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(left[0] / right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                    "BitConverter.SingleToInt32Bits(left[i] / right[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "DivideScalar",                             "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(left[0] / right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                    "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "Max",                                      "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(Math.Max(left[0], right[0])) != BitConverter.SingleToInt32Bits(result[0])",                           "BitConverter.SingleToInt32Bits(Math.Max(left[i], right[i])) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "MaxScalar",                                "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(Math.Max(left[0], right[0])) != BitConverter.SingleToInt32Bits(result[0])",                           "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "Min",                                      "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(Math.Min(left[0], right[0])) != BitConverter.SingleToInt32Bits(result[0])",                           "BitConverter.SingleToInt32Bits(Math.Min(left[i], right[i])) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "MinScalar",                                "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(Math.Min(left[0], right[0])) != BitConverter.SingleToInt32Bits(result[0])",                           "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "Multiply",                                 "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(left[0] * right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                    "BitConverter.SingleToInt32Bits(left[i] * right[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "MultiplyScalar",                           "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(left[0] * right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                    "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "Or",                                       "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(BitConverter.SingleToInt32Bits(left[0]) | BitConverter.SingleToInt32Bits(right[0])) != BitConverter.SingleToInt32Bits(result[0])",  "(BitConverter.SingleToInt32Bits(left[0]) | BitConverter.SingleToInt32Bits(right[0])) != BitConverter.SingleToInt32Bits(result[0])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "Subtract",                                 "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(left[0] - right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                    "BitConverter.SingleToInt32Bits(left[i] - right[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "SubtractScalar",                           "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "BitConverter.SingleToInt32Bits(left[0] - right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                    "BitConverter.SingleToInt32Bits(left[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Sse", "Sse",   "Xor",                                      "Vector128",  "Single",    "Vector128",   "Single",     "Vector128",   "Single",                                "16",       "(float)(random.NextDouble())", "(float)(random.NextDouble())",               "(BitConverter.SingleToInt32Bits(left[0]) ^ BitConverter.SingleToInt32Bits(right[0])) != BitConverter.SingleToInt32Bits(result[0])",  "(BitConverter.SingleToInt32Bits(left[0]) ^ BitConverter.SingleToInt32Bits(right[0])) != BitConverter.SingleToInt32Bits(result[0])"}),
};

private static readonly (string templateFileName, string[] templateData)[] Sse2Inputs = new []
{
    // TemplateName                             Isa,    LoadIsa, Method,                         RetVectorType, RetBaseType, Op1VectorType,  Op1BaseType, Op2VectorType, Op2BaseType, Op3VectorType, Op3BaseType,  VectorSize, NextValueOp1,                                           NextValueOp2,                                           NextValueOp3, ValidateFirstResult,                                                                                                                  ValidateRemainingResults
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Add",                          "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(left[0] + right[0]) != BitConverter.DoubleToInt64Bits(result[0])",                                    "BitConverter.DoubleToInt64Bits(left[i] + right[i]) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Add",                          "Vector128",   "Byte",      "Vector128",    "Byte",      "Vector128",   "Byte",                                   "16",       "(byte)(random.Next(0, byte.MaxValue))",                "(byte)(random.Next(0, byte.MaxValue))",                              "(byte)(left[0] + right[0]) != result[0]",                                                                                            "(byte)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Add",                          "Vector128",   "Int16",     "Vector128",    "Int16",     "Vector128",   "Int16",                                  "16",       "(short)(random.Next(short.MinValue, short.MaxValue))", "(short)(random.Next(short.MinValue, short.MaxValue))",               "(short)(left[0] + right[0]) != result[0]",                                                                                           "(short)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Add",                          "Vector128",   "Int32",     "Vector128",    "Int32",     "Vector128",   "Int32",                                  "16",       "(int)(random.Next(int.MinValue, int.MaxValue))",       "(int)(random.Next(int.MinValue, int.MaxValue))",                     "(int)(left[0] + right[0]) != result[0]",                                                                                             "(int)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Add",                          "Vector128",   "Int64",     "Vector128",    "Int64",     "Vector128",   "Int64",                                  "16",       "(long)(random.Next(int.MinValue, int.MaxValue))",      "(long)(random.Next(int.MinValue, int.MaxValue))",                    "(long)(left[0] + right[0]) != result[0]",                                                                                            "(long)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Add",                          "Vector128",   "SByte",     "Vector128",    "SByte",     "Vector128",   "SByte",                                  "16",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))", "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",               "(sbyte)(left[0] + right[0]) != result[0]",                                                                                           "(sbyte)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Add",                          "Vector128",   "UInt16",    "Vector128",    "UInt16",    "Vector128",   "UInt16",                                 "16",       "(ushort)(random.Next(0, ushort.MaxValue))",            "(ushort)(random.Next(0, ushort.MaxValue))",                          "(ushort)(left[0] + right[0]) != result[0]",                                                                                          "(ushort)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Add",                          "Vector128",   "UInt32",    "Vector128",    "UInt32",    "Vector128",   "UInt32",                                 "16",       "(uint)(random.Next(0, int.MaxValue))",                 "(uint)(random.Next(0, int.MaxValue))",                               "(uint)(left[0] + right[0]) != result[0]",                                                                                            "(uint)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Add",                          "Vector128",   "UInt64",    "Vector128",    "UInt64",    "Vector128",   "UInt64",                                 "16",       "(ulong)(random.Next(0, int.MaxValue))",                "(ulong)(random.Next(0, int.MaxValue))",                              "(ulong)(left[0] + right[0]) != result[0]",                                                                                           "(ulong)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "And",                          "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "(BitConverter.DoubleToInt64Bits(left[0]) & BitConverter.DoubleToInt64Bits(right[0])) != BitConverter.DoubleToInt64Bits(result[0])",  "(BitConverter.DoubleToInt64Bits(left[i]) & BitConverter.DoubleToInt64Bits(right[i])) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "And",                          "Vector128",   "Byte",      "Vector128",    "Byte",      "Vector128",   "Byte",                                   "16",       "(byte)(random.Next(0, byte.MaxValue))",                "(byte)(random.Next(0, byte.MaxValue))",                              "(byte)(left[0] & right[0]) != result[0]",                                                                                            "(byte)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "And",                          "Vector128",   "Int16",     "Vector128",    "Int16",     "Vector128",   "Int16",                                  "16",       "(short)(random.Next(short.MinValue, short.MaxValue))", "(short)(random.Next(short.MinValue, short.MaxValue))",               "(short)(left[0] & right[0]) != result[0]",                                                                                           "(short)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "And",                          "Vector128",   "Int32",     "Vector128",    "Int32",     "Vector128",   "Int32",                                  "16",       "(int)(random.Next(int.MinValue, int.MaxValue))",       "(int)(random.Next(int.MinValue, int.MaxValue))",                     "(int)(left[0] & right[0]) != result[0]",                                                                                             "(int)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "And",                          "Vector128",   "Int64",     "Vector128",    "Int64",     "Vector128",   "Int64",                                  "16",       "(long)(random.Next(int.MinValue, int.MaxValue))",      "(long)(random.Next(int.MinValue, int.MaxValue))",                    "(long)(left[0] & right[0]) != result[0]",                                                                                            "(long)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "And",                          "Vector128",   "SByte",     "Vector128",    "SByte",     "Vector128",   "SByte",                                  "16",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))", "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",               "(sbyte)(left[0] & right[0]) != result[0]",                                                                                           "(sbyte)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "And",                          "Vector128",   "UInt16",    "Vector128",    "UInt16",    "Vector128",   "UInt16",                                 "16",       "(ushort)(random.Next(0, ushort.MaxValue))",            "(ushort)(random.Next(0, ushort.MaxValue))",                          "(ushort)(left[0] & right[0]) != result[0]",                                                                                          "(ushort)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "And",                          "Vector128",   "UInt32",    "Vector128",    "UInt32",    "Vector128",   "UInt32",                                 "16",       "(uint)(random.Next(0, int.MaxValue))",                 "(uint)(random.Next(0, int.MaxValue))",                               "(uint)(left[0] & right[0]) != result[0]",                                                                                            "(uint)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "And",                          "Vector128",   "UInt64",    "Vector128",    "UInt64",    "Vector128",   "UInt64",                                 "16",       "(ulong)(random.Next(0, int.MaxValue))",                "(ulong)(random.Next(0, int.MaxValue))",                              "(ulong)(left[0] & right[0]) != result[0]",                                                                                           "(ulong)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "AndNot",                       "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "(~BitConverter.DoubleToInt64Bits(left[0]) & BitConverter.DoubleToInt64Bits(right[0])) != BitConverter.DoubleToInt64Bits(result[0])", "(~BitConverter.DoubleToInt64Bits(left[i]) & BitConverter.DoubleToInt64Bits(right[i])) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "AndNot",                       "Vector128",   "Byte",      "Vector128",    "Byte",      "Vector128",   "Byte",                                   "16",       "(byte)(random.Next(0, byte.MaxValue))",                "(byte)(random.Next(0, byte.MaxValue))",                              "(byte)(~left[0] & right[0]) != result[0]",                                                                                           "(byte)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "AndNot",                       "Vector128",   "Int16",     "Vector128",    "Int16",     "Vector128",   "Int16",                                  "16",       "(short)(random.Next(short.MinValue, short.MaxValue))", "(short)(random.Next(short.MinValue, short.MaxValue))",               "(short)(~left[0] & right[0]) != result[0]",                                                                                          "(short)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "AndNot",                       "Vector128",   "Int32",     "Vector128",    "Int32",     "Vector128",   "Int32",                                  "16",       "(int)(random.Next(int.MinValue, int.MaxValue))",       "(int)(random.Next(int.MinValue, int.MaxValue))",                     "(int)(~left[0] & right[0]) != result[0]",                                                                                            "(int)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "AndNot",                       "Vector128",   "Int64",     "Vector128",    "Int64",     "Vector128",   "Int64",                                  "16",       "(long)(random.Next(int.MinValue, int.MaxValue))",      "(long)(random.Next(int.MinValue, int.MaxValue))",                    "(long)(~left[0] & right[0]) != result[0]",                                                                                           "(long)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "AndNot",                       "Vector128",   "SByte",     "Vector128",    "SByte",     "Vector128",   "SByte",                                  "16",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))", "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",               "(sbyte)(~left[0] & right[0]) != result[0]",                                                                                          "(sbyte)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "AndNot",                       "Vector128",   "UInt16",    "Vector128",    "UInt16",    "Vector128",   "UInt16",                                 "16",       "(ushort)(random.Next(0, ushort.MaxValue))",            "(ushort)(random.Next(0, ushort.MaxValue))",                          "(ushort)(~left[0] & right[0]) != result[0]",                                                                                         "(ushort)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "AndNot",                       "Vector128",   "UInt32",    "Vector128",    "UInt32",    "Vector128",   "UInt32",                                 "16",       "(uint)(random.Next(0, int.MaxValue))",                 "(uint)(random.Next(0, int.MaxValue))",                               "(uint)(~left[0] & right[0]) != result[0]",                                                                                           "(uint)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "AndNot",                       "Vector128",   "UInt64",    "Vector128",    "UInt64",    "Vector128",   "UInt64",                                 "16",       "(ulong)(random.Next(0, int.MaxValue))",                "(ulong)(random.Next(0, int.MaxValue))",                              "(ulong)(~left[0] & right[0]) != result[0]",                                                                                          "(ulong)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareEqual",                 "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(result[0]) != ((left[0] == right[0]) ? -1 : 0)",                                                      "BitConverter.DoubleToInt64Bits(result[i]) != ((left[i] == right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareEqual",                 "Vector128",   "Byte",      "Vector128",    "Byte",      "Vector128",   "Byte",                                   "16",       "(byte)(random.Next(0, byte.MaxValue))",                "(byte)(random.Next(0, byte.MaxValue))",                              "result[0] != ((left[0] == right[0]) ? unchecked((byte)(-1)) : 0)",                                                                   "result[i] != ((left[i] == right[i]) ? unchecked((byte)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareEqual",                 "Vector128",   "Int16",     "Vector128",    "Int16",     "Vector128",   "Int16",                                  "16",       "(short)(random.Next(short.MinValue, short.MaxValue))", "(short)(random.Next(short.MinValue, short.MaxValue))",               "result[0] != ((left[0] == right[0]) ? unchecked((short)(-1)) : 0)",                                                                  "result[i] != ((left[i] == right[i]) ? unchecked((short)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareEqual",                 "Vector128",   "Int32",     "Vector128",    "Int32",     "Vector128",   "Int32",                                  "16",       "(int)(random.Next(int.MinValue, int.MaxValue))",       "(int)(random.Next(int.MinValue, int.MaxValue))",                     "result[0] != ((left[0] == right[0]) ? unchecked((int)(-1)) : 0)",                                                                    "result[i] != ((left[i] == right[i]) ? unchecked((int)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareEqual",                 "Vector128",   "SByte",     "Vector128",    "SByte",     "Vector128",   "SByte",                                  "16",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))", "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",               "result[0] != ((left[0] == right[0]) ? unchecked((sbyte)(-1)) : 0)",                                                                  "result[i] != ((left[i] == right[i]) ? unchecked((sbyte)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareEqual",                 "Vector128",   "UInt16",    "Vector128",    "UInt16",    "Vector128",   "UInt16",                                 "16",       "(ushort)(random.Next(0, ushort.MaxValue))",            "(ushort)(random.Next(0, ushort.MaxValue))",                          "result[0] != ((left[0] == right[0]) ? unchecked((ushort)(-1)) : 0)",                                                                 "result[i] != ((left[i] == right[i]) ? unchecked((ushort)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareEqual",                 "Vector128",   "UInt32",    "Vector128",    "UInt32",    "Vector128",   "UInt32",                                 "16",       "(uint)(random.Next(0, int.MaxValue))",                 "(uint)(random.Next(0, int.MaxValue))",                               "result[0] != ((left[0] == right[0]) ? unchecked((uint)(-1)) : 0)",                                                                   "result[i] != ((left[i] == right[i]) ? unchecked((uint)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareGreaterThan",           "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(result[0]) != ((left[0] > right[0]) ? -1 : 0)",                                                       "BitConverter.DoubleToInt64Bits(result[i]) != ((left[i] > right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareGreaterThan",           "Vector128",   "Int16",     "Vector128",    "Int16",     "Vector128",   "Int16",                                  "16",       "(short)(random.Next(short.MinValue, short.MaxValue))", "(short)(random.Next(short.MinValue, short.MaxValue))",               "result[0] != ((left[0] > right[0]) ? unchecked((short)(-1)) : 0)",                                                                   "result[i] != ((left[i] > right[i]) ? unchecked((short)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareGreaterThan",           "Vector128",   "Int32",     "Vector128",    "Int32",     "Vector128",   "Int32",                                  "16",       "(int)(random.Next(int.MinValue, int.MaxValue))",       "(int)(random.Next(int.MinValue, int.MaxValue))",                     "result[0] != ((left[0] > right[0]) ? unchecked((int)(-1)) : 0)",                                                                     "result[i] != ((left[i] > right[i]) ? unchecked((int)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareGreaterThan",           "Vector128",   "SByte",     "Vector128",    "SByte",     "Vector128",   "SByte",                                  "16",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))", "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",               "result[0] != ((left[0] > right[0]) ? unchecked((sbyte)(-1)) : 0)",                                                                   "result[i] != ((left[i] > right[i]) ? unchecked((sbyte)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareGreaterThanOrEqual",    "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(result[0]) != ((left[0] >= right[0]) ? -1 : 0)",                                                      "BitConverter.DoubleToInt64Bits(result[i]) != ((left[i] >= right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareLessThan",              "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(result[0]) != ((left[0] < right[0]) ? -1 : 0)",                                                       "BitConverter.DoubleToInt64Bits(result[i]) != ((left[i] < right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareLessThan",              "Vector128",   "Int16",     "Vector128",    "Int16",     "Vector128",   "Int16",                                  "16",       "(short)(random.Next(short.MinValue, short.MaxValue))", "(short)(random.Next(short.MinValue, short.MaxValue))",               "result[0] != ((left[0] < right[0]) ? unchecked((short)(-1)) : 0)",                                                                   "result[i] != ((left[i] < right[i]) ? unchecked((short)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareLessThan",              "Vector128",   "Int32",     "Vector128",    "Int32",     "Vector128",   "Int32",                                  "16",       "(int)(random.Next(int.MinValue, int.MaxValue))",       "(int)(random.Next(int.MinValue, int.MaxValue))",                     "result[0] != ((left[0] < right[0]) ? unchecked((int)(-1)) : 0)",                                                                     "result[i] != ((left[i] < right[i]) ? unchecked((int)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareLessThan",              "Vector128",   "SByte",     "Vector128",    "SByte",     "Vector128",   "SByte",                                  "16",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))", "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",               "result[0] != ((left[0] < right[0]) ? unchecked((sbyte)(-1)) : 0)",                                                                   "result[i] != ((left[i] < right[i]) ? unchecked((sbyte)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareLessThanOrEqual",       "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(result[0]) != ((left[0] <= right[0]) ? -1 : 0)",                                                      "BitConverter.DoubleToInt64Bits(result[i]) != ((left[i] <= right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareNotEqual",              "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(result[0]) != ((left[0] != right[0]) ? -1 : 0)",                                                      "BitConverter.DoubleToInt64Bits(result[i]) != ((left[i] != right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareNotGreaterThan",        "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(result[0]) != (!(left[0] > right[0]) ? -1 : 0)",                                                      "BitConverter.DoubleToInt64Bits(result[i]) != (!(left[i] > right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareNotGreaterThanOrEqual", "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(result[0]) != (!(left[0] >= right[0]) ? -1 : 0)",                                                     "BitConverter.DoubleToInt64Bits(result[i]) != (!(left[i] >= right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareNotLessThan",           "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(result[0]) != (!(left[0] < right[0]) ? -1 : 0)",                                                      "BitConverter.DoubleToInt64Bits(result[i]) != (!(left[i] < right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareNotLessThanOrEqual",    "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(result[0]) != (!(left[0] <= right[0]) ? -1 : 0)",                                                     "BitConverter.DoubleToInt64Bits(result[i]) != (!(left[i] <= right[i]) ? -1 : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareOrdered",               "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(result[0]) != ((!double.IsNaN(left[0]) && !double.IsNaN(right[0])) ? -1 : 0)",                        "BitConverter.DoubleToInt64Bits(result[i]) != ((!double.IsNaN(left[i]) && !double.IsNaN(right[i])) ? -1 : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "CompareUnordered",             "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(result[0]) != ((double.IsNaN(left[0]) || double.IsNaN(right[0])) ? -1 : 0)",                          "BitConverter.DoubleToInt64Bits(result[i]) != ((double.IsNaN(left[i]) || double.IsNaN(right[i])) ? -1 : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Divide",                       "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(left[0] / right[0]) != BitConverter.DoubleToInt64Bits(result[0])",                                    "BitConverter.DoubleToInt64Bits(left[i] / right[i]) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Max",                          "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(Math.Max(left[0], right[0])) != BitConverter.DoubleToInt64Bits(result[0])",                           "BitConverter.DoubleToInt64Bits(Math.Max(left[i], right[i])) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Max",                          "Vector128",   "Byte",      "Vector128",    "Byte",      "Vector128",   "Byte",                                   "16",       "(byte)(random.Next(0, byte.MaxValue))",                "(byte)(random.Next(0, byte.MaxValue))",                              "Math.Max(left[0], right[0]) != result[0]",                                                                                           "Math.Max(left[i], right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Max",                          "Vector128",   "Int16",     "Vector128",    "Int16",     "Vector128",   "Int16",                                  "16",       "(short)(random.Next(short.MinValue, short.MaxValue))", "(short)(random.Next(short.MinValue, short.MaxValue))",               "Math.Max(left[0], right[0]) != result[0]",                                                                                           "Math.Max(left[i], right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Min",                          "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(Math.Min(left[0], right[0])) != BitConverter.DoubleToInt64Bits(result[0])",                           "BitConverter.DoubleToInt64Bits(Math.Min(left[i], right[i])) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Min",                          "Vector128",   "Byte",      "Vector128",    "Byte",      "Vector128",   "Byte",                                   "16",       "(byte)(random.Next(0, byte.MinValue))",                "(byte)(random.Next(0, byte.MinValue))",                              "Math.Min(left[0], right[0]) != result[0]",                                                                                           "Math.Min(left[i], right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Min",                          "Vector128",   "Int16",     "Vector128",    "Int16",     "Vector128",   "Int16",                                  "16",       "(short)(random.Next(short.MinValue, short.MinValue))", "(short)(random.Next(short.MinValue, short.MinValue))",               "Math.Min(left[0], right[0]) != result[0]",                                                                                           "Math.Min(left[i], right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Multiply",                     "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(left[0] * right[0]) != BitConverter.DoubleToInt64Bits(result[0])",                                    "BitConverter.DoubleToInt64Bits(left[i] * right[i]) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Or",                           "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "(BitConverter.DoubleToInt64Bits(left[0]) | BitConverter.DoubleToInt64Bits(right[0])) != BitConverter.DoubleToInt64Bits(result[0])",  "(BitConverter.DoubleToInt64Bits(left[i]) | BitConverter.DoubleToInt64Bits(right[i])) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Or",                           "Vector128",   "Byte",      "Vector128",    "Byte",      "Vector128",   "Byte",                                   "16",       "(byte)(random.Next(0, byte.MaxValue))",                "(byte)(random.Next(0, byte.MaxValue))",                              "(byte)(left[0] | right[0]) != result[0]",                                                                                            "(byte)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Or",                           "Vector128",   "Int16",     "Vector128",    "Int16",     "Vector128",   "Int16",                                  "16",       "(short)(random.Next(short.MinValue, short.MaxValue))", "(short)(random.Next(short.MinValue, short.MaxValue))",               "(short)(left[0] | right[0]) != result[0]",                                                                                           "(short)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Or",                           "Vector128",   "Int32",     "Vector128",    "Int32",     "Vector128",   "Int32",                                  "16",       "(int)(random.Next(int.MinValue, int.MaxValue))",       "(int)(random.Next(int.MinValue, int.MaxValue))",                     "(int)(left[0] | right[0]) != result[0]",                                                                                             "(int)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Or",                           "Vector128",   "Int64",     "Vector128",    "Int64",     "Vector128",   "Int64",                                  "16",       "(long)(random.Next(int.MinValue, int.MaxValue))",      "(long)(random.Next(int.MinValue, int.MaxValue))",                    "(long)(left[0] | right[0]) != result[0]",                                                                                            "(long)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Or",                           "Vector128",   "SByte",     "Vector128",    "SByte",     "Vector128",   "SByte",                                  "16",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))", "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",               "(sbyte)(left[0] | right[0]) != result[0]",                                                                                           "(sbyte)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Or",                           "Vector128",   "UInt16",    "Vector128",    "UInt16",    "Vector128",   "UInt16",                                 "16",       "(ushort)(random.Next(0, ushort.MaxValue))",            "(ushort)(random.Next(0, ushort.MaxValue))",                          "(ushort)(left[0] | right[0]) != result[0]",                                                                                          "(ushort)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Or",                           "Vector128",   "UInt32",    "Vector128",    "UInt32",    "Vector128",   "UInt32",                                 "16",       "(uint)(random.Next(0, int.MaxValue))",                 "(uint)(random.Next(0, int.MaxValue))",                               "(uint)(left[0] | right[0]) != result[0]",                                                                                            "(uint)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Or",                           "Vector128",   "UInt64",    "Vector128",    "UInt64",    "Vector128",   "UInt64",                                 "16",       "(ulong)(random.Next(0, int.MaxValue))",                "(ulong)(random.Next(0, int.MaxValue))",                              "(ulong)(left[0] | right[0]) != result[0]",                                                                                           "(ulong)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Subtract",                     "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "BitConverter.DoubleToInt64Bits(left[0] - right[0]) != BitConverter.DoubleToInt64Bits(result[0])",                                    "BitConverter.DoubleToInt64Bits(left[i] - right[i]) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Subtract",                     "Vector128",   "Byte",      "Vector128",    "Byte",      "Vector128",   "Byte",                                   "16",       "(byte)(random.Next(0, byte.MaxValue))",                "(byte)(random.Next(0, byte.MaxValue))",                              "(byte)(left[0] - right[0]) != result[0]",                                                                                            "(byte)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Subtract",                     "Vector128",   "Int16",     "Vector128",    "Int16",     "Vector128",   "Int16",                                  "16",       "(short)(random.Next(short.MinValue, short.MaxValue))", "(short)(random.Next(short.MinValue, short.MaxValue))",               "(short)(left[0] - right[0]) != result[0]",                                                                                           "(short)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Subtract",                     "Vector128",   "Int32",     "Vector128",    "Int32",     "Vector128",   "Int32",                                  "16",       "(int)(random.Next(int.MinValue, int.MaxValue))",       "(int)(random.Next(int.MinValue, int.MaxValue))",                     "(int)(left[0] - right[0]) != result[0]",                                                                                             "(int)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Subtract",                     "Vector128",   "Int64",     "Vector128",    "Int64",     "Vector128",   "Int64",                                  "16",       "(long)(random.Next(int.MinValue, int.MaxValue))",      "(long)(random.Next(int.MinValue, int.MaxValue))",                    "(long)(left[0] - right[0]) != result[0]",                                                                                            "(long)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Subtract",                     "Vector128",   "SByte",     "Vector128",    "SByte",     "Vector128",   "SByte",                                  "16",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))", "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",               "(sbyte)(left[0] - right[0]) != result[0]",                                                                                           "(sbyte)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Subtract",                     "Vector128",   "UInt16",    "Vector128",    "UInt16",    "Vector128",   "UInt16",                                 "16",       "(ushort)(random.Next(0, ushort.MaxValue))",            "(ushort)(random.Next(0, ushort.MaxValue))",                          "(ushort)(left[0] - right[0]) != result[0]",                                                                                          "(ushort)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Subtract",                     "Vector128",   "UInt32",    "Vector128",    "UInt32",    "Vector128",   "UInt32",                                 "16",       "(uint)(random.Next(0, int.MaxValue))",                 "(uint)(random.Next(0, int.MaxValue))",                               "(uint)(left[0] - right[0]) != result[0]",                                                                                            "(uint)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Subtract",                     "Vector128",   "UInt64",    "Vector128",    "UInt64",    "Vector128",   "UInt64",                                 "16",       "(ulong)(random.Next(0, int.MaxValue))",                "(ulong)(random.Next(0, int.MaxValue))",                              "(ulong)(left[0] - right[0]) != result[0]",                                                                                           "(ulong)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Xor",                          "Vector128",   "Double",    "Vector128",    "Double",    "Vector128",   "Double",                                 "16",       "(double)(random.NextDouble())",                        "(double)(random.NextDouble())",                                      "(BitConverter.DoubleToInt64Bits(left[0]) ^ BitConverter.DoubleToInt64Bits(right[0])) != BitConverter.DoubleToInt64Bits(result[0])",  "(BitConverter.DoubleToInt64Bits(left[i]) ^ BitConverter.DoubleToInt64Bits(right[i])) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Xor",                          "Vector128",   "Byte",      "Vector128",    "Byte",      "Vector128",   "Byte",                                   "16",       "(byte)(random.Next(0, byte.MaxValue))",                "(byte)(random.Next(0, byte.MaxValue))",                              "(byte)(left[0] ^ right[0]) != result[0]",                                                                                            "(byte)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Xor",                          "Vector128",   "Int16",     "Vector128",    "Int16",     "Vector128",   "Int16",                                  "16",       "(short)(random.Next(short.MinValue, short.MaxValue))", "(short)(random.Next(short.MinValue, short.MaxValue))",               "(short)(left[0] ^ right[0]) != result[0]",                                                                                           "(short)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Xor",                          "Vector128",   "Int32",     "Vector128",    "Int32",     "Vector128",   "Int32",                                  "16",       "(int)(random.Next(int.MinValue, int.MaxValue))",       "(int)(random.Next(int.MinValue, int.MaxValue))",                     "(int)(left[0] ^ right[0]) != result[0]",                                                                                             "(int)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Xor",                          "Vector128",   "Int64",     "Vector128",    "Int64",     "Vector128",   "Int64",                                  "16",       "(long)(random.Next(int.MinValue, int.MaxValue))",      "(long)(random.Next(int.MinValue, int.MaxValue))",                    "(long)(left[0] ^ right[0]) != result[0]",                                                                                            "(long)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Xor",                          "Vector128",   "SByte",     "Vector128",    "SByte",     "Vector128",   "SByte",                                  "16",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))", "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",               "(sbyte)(left[0] ^ right[0]) != result[0]",                                                                                           "(sbyte)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Xor",                          "Vector128",   "UInt16",    "Vector128",    "UInt16",    "Vector128",   "UInt16",                                 "16",       "(ushort)(random.Next(0, ushort.MaxValue))",            "(ushort)(random.Next(0, ushort.MaxValue))",                          "(ushort)(left[0] ^ right[0]) != result[0]",                                                                                          "(ushort)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Xor",                          "Vector128",   "UInt32",    "Vector128",    "UInt32",    "Vector128",   "UInt32",                                 "16",       "(uint)(random.Next(0, int.MaxValue))",                 "(uint)(random.Next(0, int.MaxValue))",                               "(uint)(left[0] ^ right[0]) != result[0]",                                                                                            "(uint)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template", new string[] { "Sse2", "Sse2",  "Xor",                          "Vector128",   "UInt64",    "Vector128",    "UInt64",    "Vector128",   "UInt64",                                 "16",       "(ulong)(random.Next(0, int.MaxValue))",                "(ulong)(random.Next(0, int.MaxValue))",                              "(ulong)(left[0] ^ right[0]) != result[0]",                                                                                           "(ulong)(left[i] ^ right[i]) != result[i]"}),
};

private static readonly (string templateFileName, string[] templateData)[] Sse41Inputs = new []
{
    // TemplateName                             Isa,     LoadIsa, Method,         RetVectorType, RetBaseType, Op1VectorType, Op1BaseType, Op2VectorType, Op2BaseType, Op3VectorType, Op3BaseType,  VectorSize, NextValueOp1,                                      NextValueOp2,                                      NextValueOp3, ValidateFirstResult,                                                 ValidateRemainingResults
    ("SimpleBinOpTest.template", new string[] { "Sse41", "Sse2",  "CompareEqual", "Vector128",   "Int64",     "Vector128",   "Int64",     "Vector128",   "Int64",                                  "16",       "(long)(random.Next(int.MinValue, int.MaxValue))", "(long)(random.Next(int.MinValue, int.MaxValue))",               "result[0] != ((left[0] == right[0]) ? unchecked((long)(-1)) : 0)",  "result[i] != ((left[i] == right[i]) ? unchecked((long)(-1)) : 0)"}),
    ("SimpleBinOpTest.template", new string[] { "Sse41", "Sse2",  "CompareEqual", "Vector128",   "UInt64",    "Vector128",   "UInt64",    "Vector128",   "UInt64",                                 "16",       "(ulong)(random.Next(0, int.MaxValue))",           "(ulong)(random.Next(0, int.MaxValue))",                         "result[0] != ((left[0] == right[0]) ? unchecked((ulong)(-1)) : 0)", "result[i] != ((left[i] == right[i]) ? unchecked((ulong)(-1)) : 0)"}),
};

private static readonly (string templateFileName, string[] templateData)[] Sse42Inputs = new []
{
    // TemplateName                             Isa,     LoadIsa, Method,               RetVectorType, RetBaseType, Op1VectorType, Op1BaseType, Op2VectorType, Op2BaseType, Op3VectorType, Op3BaseType, VectorSize, NextValueOp1,                                      NextValueOp2,                                      NextValueOp3, ValidateFirstResult,                                               ValidateRemainingResults
    ("SimpleBinOpTest.template", new string[] { "Sse42", "Sse2",  "CompareGreaterThan", "Vector128",   "Int64",     "Vector128",   "Int64",     "Vector128",   "Int64",                                 "16",       "(long)(random.Next(int.MinValue, int.MaxValue))", "(long)(random.Next(int.MinValue, int.MaxValue))",               "result[0] != ((left[0] > right[0]) ? unchecked((long)(-1)) : 0)", "result[i] != ((left[i] > right[i]) ? unchecked((long)(-1)) : 0)"}),
};

private static readonly (string templateFileName, string[] templateData)[] AvxInputs = new []
{                                                                                                                                                                                                                                                                     
    // TemplateName                              Isa,   LoadIsa, Method,                 RetVectorType, RetBaseType, Op1VectorType, Op1BaseType, Op2VectorType, Op2BaseType, Op3VectorType, Op3BaseType, VectorSize, NextValueOp1,                    NextValueOp2,                    NextValueOp3,                            ValidateFirstResult,                                                                                                                                                                                                                                  ValidateRemainingResults
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Add",                  "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",                                "32",       "(double)(random.NextDouble())", "(double)(random.NextDouble())",                                          "BitConverter.DoubleToInt64Bits(left[0] + right[0]) != BitConverter.DoubleToInt64Bits(result[0])",                                                                                                                                                    "BitConverter.DoubleToInt64Bits(left[i] + right[i]) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Add",                  "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",                                "32",       "(float)(random.NextDouble())",  "(float)(random.NextDouble())",                                           "BitConverter.SingleToInt32Bits(left[0] + right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                                                                    "BitConverter.SingleToInt32Bits(left[i] + right[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "AddSubtract",          "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",                                "32",       "(double)(random.NextDouble())", "(double)(random.NextDouble())",                                          "BitConverter.DoubleToInt64Bits(left[0] - right[0]) != BitConverter.DoubleToInt64Bits(result[0])",                                                                                                                                                    "((i % 2 != 0) && (BitConverter.DoubleToInt64Bits(left[i] + right[i]) != BitConverter.DoubleToInt64Bits(result[i]))) || ((i % 2 == 0) && (BitConverter.DoubleToInt64Bits(left[i] - right[i]) != BitConverter.DoubleToInt64Bits(result[i])))"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "AddSubtract",          "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",                                "32",       "(float)(random.NextDouble())",  "(float)(random.NextDouble())",                                           "BitConverter.SingleToInt32Bits(left[0] - right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                                                                    "((i % 2 != 0) && (BitConverter.SingleToInt32Bits(left[i] + right[i]) != BitConverter.SingleToInt32Bits(result[i]))) || ((i % 2 == 0) && (BitConverter.SingleToInt32Bits(left[i] - right[i]) != BitConverter.SingleToInt32Bits(result[i])))"}),    
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "And",                  "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",                                "32",       "(double)(random.NextDouble())", "(double)(random.NextDouble())",                                          "(BitConverter.DoubleToInt64Bits(left[0]) & BitConverter.DoubleToInt64Bits(right[0])) != BitConverter.DoubleToInt64Bits(result[0])",                                                                                                                  "(BitConverter.DoubleToInt64Bits(left[i]) & BitConverter.DoubleToInt64Bits(right[i])) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "And",                  "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",                                "32",       "(float)(random.NextDouble())",  "(float)(random.NextDouble())",                                           "(BitConverter.SingleToInt32Bits(left[0]) & BitConverter.SingleToInt32Bits(right[0])) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                                  "(BitConverter.SingleToInt32Bits(left[i]) & BitConverter.SingleToInt32Bits(right[i])) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "AndNot",               "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",                                "32",       "(double)(random.NextDouble())", "(double)(random.NextDouble())",                                          "((~BitConverter.DoubleToInt64Bits(left[0])) & BitConverter.DoubleToInt64Bits(right[0])) != BitConverter.DoubleToInt64Bits(result[0])",                                                                                                               "((~BitConverter.DoubleToInt64Bits(left[i])) & BitConverter.DoubleToInt64Bits(right[i])) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "AndNot",               "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",                                "32",       "(float)(random.NextDouble())",  "(float)(random.NextDouble())",                                           "((~BitConverter.SingleToInt32Bits(left[0])) & BitConverter.SingleToInt32Bits(right[0])) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                               "((~BitConverter.SingleToInt32Bits(left[i])) & BitConverter.SingleToInt32Bits(right[i])) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleTernOpTest.template", new string[] { "Avx", "Avx",   "BlendVariable",        "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",    "32",       "(double)(random.NextDouble())", "(double)(random.NextDouble())", "(double)(((i % 2) == 0) ? -0.0 : 1.0)", "((BitConverter.DoubleToInt64Bits(thirdOp[0]) >> 63) & 1) == 1 ? BitConverter.DoubleToInt64Bits(secondOp[0]) != BitConverter.DoubleToInt64Bits(result[0]) : BitConverter.DoubleToInt64Bits(firstOp[0]) != BitConverter.DoubleToInt64Bits(result[0])", "((BitConverter.DoubleToInt64Bits(thirdOp[i]) >> 63) & 1) == 1 ? BitConverter.DoubleToInt64Bits(secondOp[i]) != BitConverter.DoubleToInt64Bits(result[i]) : BitConverter.DoubleToInt64Bits(firstOp[i]) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleTernOpTest.template", new string[] { "Avx", "Avx",   "BlendVariable",        "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",    "32",       "(float)(random.NextDouble())",  "(float)(random.NextDouble())",  "(float)(((i % 2) == 0) ? -0.0 : 1.0)",  "((BitConverter.SingleToInt32Bits(thirdOp[0]) >> 31) & 1) == 1 ? BitConverter.SingleToInt32Bits(secondOp[0]) != BitConverter.SingleToInt32Bits(result[0]) : BitConverter.SingleToInt32Bits(firstOp[0]) != BitConverter.SingleToInt32Bits(result[0])", "((BitConverter.SingleToInt32Bits(thirdOp[i]) >> 31) & 1) == 1 ? BitConverter.SingleToInt32Bits(secondOp[i]) != BitConverter.SingleToInt32Bits(result[i]) : BitConverter.SingleToInt32Bits(firstOp[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Divide",               "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",                                "32",       "(double)(random.NextDouble())", "(double)(random.NextDouble())",                                          "BitConverter.DoubleToInt64Bits(left[0] / right[0]) != BitConverter.DoubleToInt64Bits(result[0])",                                                                                                                                                    "BitConverter.DoubleToInt64Bits(left[i] / right[i]) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Divide",               "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",                                "32",       "(float)(random.NextDouble())",  "(float)(random.NextDouble())",                                           "BitConverter.SingleToInt32Bits(left[0] / right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                                                                    "BitConverter.SingleToInt32Bits(left[i] / right[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleUnOpTest.template",   new string[] { "Avx", "Avx",   "DuplicateEvenIndexed", "Vector256",   "Double",    "Vector256",   "Double",                                                            "32",       "(double)(random.NextDouble())",                                                                           "BitConverter.DoubleToInt64Bits(firstOp[0]) != BitConverter.DoubleToInt64Bits(result[0])",                                                                                                                                                            "(i % 2 == 0) ? (BitConverter.DoubleToInt64Bits(firstOp[i]) != BitConverter.DoubleToInt64Bits(result[i])) : (BitConverter.DoubleToInt64Bits(firstOp[i - 1]) != BitConverter.DoubleToInt64Bits(result[i]))"}),
    ("SimpleUnOpTest.template",   new string[] { "Avx", "Avx",   "DuplicateEvenIndexed", "Vector256",   "Single",    "Vector256",   "Single",                                                            "32",       "(float)(random.NextDouble())",                                                                            "BitConverter.SingleToInt32Bits(firstOp[0]) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                                                                            "(i % 2 == 0) ? (BitConverter.SingleToInt32Bits(firstOp[i]) != BitConverter.SingleToInt32Bits(result[i])) : (BitConverter.SingleToInt32Bits(firstOp[i - 1]) != BitConverter.SingleToInt32Bits(result[i]))"}),
    ("SimpleUnOpTest.template",   new string[] { "Avx", "Avx",   "DuplicateOddIndexed",  "Vector256",   "Single",    "Vector256",   "Single",                                                            "32",       "(float)(random.NextDouble())",                                                                            "BitConverter.SingleToInt32Bits(firstOp[1]) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                                                                            "(i % 2 == 0) ? (BitConverter.SingleToInt32Bits(firstOp[i + 1]) != BitConverter.SingleToInt32Bits(result[i])) : (BitConverter.SingleToInt32Bits(firstOp[i]) != BitConverter.SingleToInt32Bits(result[i]))"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Max",                  "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",                                "32",       "(double)(random.NextDouble())", "(double)(random.NextDouble())",                                          "BitConverter.DoubleToInt64Bits(Math.Max(left[0], right[0])) != BitConverter.DoubleToInt64Bits(result[0])",                                                                                                                                           "BitConverter.DoubleToInt64Bits(Math.Max(left[i], right[i])) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Max",                  "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",                                "32",       "(float)(random.NextDouble())",  "(float)(random.NextDouble())",                                           "BitConverter.SingleToInt32Bits(MathF.Max(left[0], right[0])) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                                                          "BitConverter.SingleToInt32Bits(MathF.Max(left[i], right[i])) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Min",                  "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",                                "32",       "(double)(random.NextDouble())", "(double)(random.NextDouble())",                                          "BitConverter.DoubleToInt64Bits(Math.Min(left[0], right[0])) != BitConverter.DoubleToInt64Bits(result[0])",                                                                                                                                           "BitConverter.DoubleToInt64Bits(Math.Min(left[i], right[i])) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Min",                  "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",                                "32",       "(float)(random.NextDouble())",  "(float)(random.NextDouble())",                                           "BitConverter.SingleToInt32Bits(MathF.Min(left[0], right[0])) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                                                          "BitConverter.SingleToInt32Bits(MathF.Min(left[i], right[i])) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Multiply",             "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",                                "32",       "(double)(random.NextDouble())", "(double)(random.NextDouble())",                                          "BitConverter.DoubleToInt64Bits(left[0] * right[0]) != BitConverter.DoubleToInt64Bits(result[0])",                                                                                                                                                    "BitConverter.DoubleToInt64Bits(left[i] * right[i]) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Multiply",             "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",                                "32",       "(float)(random.NextDouble())",  "(float)(random.NextDouble())",                                           "BitConverter.SingleToInt32Bits(left[0] * right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                                                                    "BitConverter.SingleToInt32Bits(left[i] * right[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Or",                   "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",                                "32",       "(double)(random.NextDouble())", "(double)(random.NextDouble())",                                          "(BitConverter.DoubleToInt64Bits(left[0]) | BitConverter.DoubleToInt64Bits(right[0])) != BitConverter.DoubleToInt64Bits(result[0])",                                                                                                                  "(BitConverter.DoubleToInt64Bits(left[i]) | BitConverter.DoubleToInt64Bits(right[i])) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Or",                   "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",                                "32",       "(float)(random.NextDouble())",  "(float)(random.NextDouble())",                                           "(BitConverter.SingleToInt32Bits(left[0]) | BitConverter.SingleToInt32Bits(right[0])) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                                  "(BitConverter.SingleToInt32Bits(left[i]) | BitConverter.SingleToInt32Bits(right[i])) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Subtract",             "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",                                "32",       "(double)(random.NextDouble())", "(double)(random.NextDouble())",                                          "BitConverter.DoubleToInt64Bits(left[0] - right[0]) != BitConverter.DoubleToInt64Bits(result[0])",                                                                                                                                                    "BitConverter.DoubleToInt64Bits(left[i] - right[i]) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Subtract",             "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",                                "32",       "(float)(random.NextDouble())",  "(float)(random.NextDouble())",                                           "BitConverter.SingleToInt32Bits(left[0] - right[0]) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                                                                    "BitConverter.SingleToInt32Bits(left[i] - right[i]) != BitConverter.SingleToInt32Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Xor",                  "Vector256",   "Double",    "Vector256",   "Double",    "Vector256",   "Double",                                "32",       "(double)(random.NextDouble())", "(double)(random.NextDouble())",                                          "(BitConverter.DoubleToInt64Bits(left[0]) ^ BitConverter.DoubleToInt64Bits(right[0])) != BitConverter.DoubleToInt64Bits(result[0])",                                                                                                                  "(BitConverter.DoubleToInt64Bits(left[i]) ^ BitConverter.DoubleToInt64Bits(right[i])) != BitConverter.DoubleToInt64Bits(result[i])"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx", "Avx",   "Xor",                  "Vector256",   "Single",    "Vector256",   "Single",    "Vector256",   "Single",                                "32",       "(float)(random.NextDouble())",  "(float)(random.NextDouble())",                                           "(BitConverter.SingleToInt32Bits(left[0]) ^ BitConverter.SingleToInt32Bits(right[0])) != BitConverter.SingleToInt32Bits(result[0])",                                                                                                                  "(BitConverter.SingleToInt32Bits(left[i]) ^ BitConverter.SingleToInt32Bits(right[i])) != BitConverter.SingleToInt32Bits(result[i])"}),
};

private static readonly (string templateFileName, string[] templateData)[] Avx2Inputs = new []
{
    // TemplateName                              Isa,    LoadIsa, Method,               RetVectorType, RetBaseType, Op1VectorType, Op1BaseType,  Op2VectorType, Op2BaseType, Op3VectorType, Op3BaseType, VectorSize, NextValueOp1,                                            NextValueOp2,                                            NextValueOp3,                         ValidateFirstResult,                                                                 ValidateRemainingResults
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Add",                "Vector256",   "Byte",      "Vector256",   "Byte",       "Vector256",   "Byte",                                  "32",       "(byte)(random.Next(0, byte.MaxValue))",                 "(byte)(random.Next(0, byte.MaxValue))",                                                       "(byte)(left[0] + right[0]) != result[0]",                                           "(byte)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Add",                "Vector256",   "Int16",     "Vector256",   "Int16",      "Vector256",   "Int16",                                 "32",       "(short)(random.Next(short.MinValue, short.MaxValue))",  "(short)(random.Next(short.MinValue, short.MaxValue))",                                        "(short)(left[0] + right[0]) != result[0]",                                          "(short)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Add",                "Vector256",   "Int32",     "Vector256",   "Int32",      "Vector256",   "Int32",                                 "32",       "(int)(random.Next(int.MinValue, int.MaxValue))",        "(int)(random.Next(int.MinValue, int.MaxValue))",                                              "(int)(left[0] + right[0]) != result[0]",                                            "(int)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Add",                "Vector256",   "Int64",     "Vector256",   "Int64",      "Vector256",   "Int64",                                 "32",       "(long)(random.Next(int.MinValue, int.MaxValue))",       "(long)(random.Next(int.MinValue, int.MaxValue))",                                             "(long)(left[0] + right[0]) != result[0]",                                           "(long)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Add",                "Vector256",   "SByte",     "Vector256",   "SByte",      "Vector256",   "SByte",                                 "32",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",  "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",                                        "(sbyte)(left[0] + right[0]) != result[0]",                                          "(sbyte)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Add",                "Vector256",   "UInt16",    "Vector256",   "UInt16",     "Vector256",   "UInt16",                                "32",       "(ushort)(random.Next(0, ushort.MaxValue))",             "(ushort)(random.Next(0, ushort.MaxValue))",                                                   "(ushort)(left[0] + right[0]) != result[0]",                                         "(ushort)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Add",                "Vector256",   "UInt32",    "Vector256",   "UInt32",     "Vector256",   "UInt32",                                "32",       "(uint)(random.Next(0, int.MaxValue))",                  "(uint)(random.Next(0, int.MaxValue))",                                                        "(uint)(left[0] + right[0]) != result[0]",                                           "(uint)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Add",                "Vector256",   "UInt64",    "Vector256",   "UInt64",     "Vector256",   "UInt64",                                "32",       "(ulong)(random.Next(0, int.MaxValue))",                 "(ulong)(random.Next(0, int.MaxValue))",                                                       "(ulong)(left[0] + right[0]) != result[0]",                                          "(ulong)(left[i] + right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "And",                "Vector256",   "Byte",      "Vector256",   "Byte",       "Vector256",   "Byte",                                  "32",       "(byte)(random.Next(0, byte.MaxValue))",                 "(byte)(random.Next(0, byte.MaxValue))",                                                       "(byte)(left[0] & right[0]) != result[0]",                                           "(byte)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "And",                "Vector256",   "Int16",     "Vector256",   "Int16",      "Vector256",   "Int16",                                 "32",       "(short)(random.Next(short.MinValue, short.MaxValue))",  "(short)(random.Next(short.MinValue, short.MaxValue))",                                        "(short)(left[0] & right[0]) != result[0]",                                          "(short)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "And",                "Vector256",   "Int32",     "Vector256",   "Int32",      "Vector256",   "Int32",                                 "32",       "(int)(random.Next(int.MinValue, int.MaxValue))",        "(int)(random.Next(int.MinValue, int.MaxValue))",                                              "(int)(left[0] & right[0]) != result[0]",                                            "(int)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "And",                "Vector256",   "Int64",     "Vector256",   "Int64",      "Vector256",   "Int64",                                 "32",       "(long)(random.Next(int.MinValue, int.MaxValue))",       "(long)(random.Next(int.MinValue, int.MaxValue))",                                             "(long)(left[0] & right[0]) != result[0]",                                           "(long)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "And",                "Vector256",   "SByte",     "Vector256",   "SByte",      "Vector256",   "SByte",                                 "32",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",  "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",                                        "(sbyte)(left[0] & right[0]) != result[0]",                                          "(sbyte)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "And",                "Vector256",   "UInt16",    "Vector256",   "UInt16",     "Vector256",   "UInt16",                                "32",       "(ushort)(random.Next(0, ushort.MaxValue))",             "(ushort)(random.Next(0, ushort.MaxValue))",                                                   "(ushort)(left[0] & right[0]) != result[0]",                                         "(ushort)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "And",                "Vector256",   "UInt32",    "Vector256",   "UInt32",     "Vector256",   "UInt32",                                "32",       "(uint)(random.Next(0, int.MaxValue))",                  "(uint)(random.Next(0, int.MaxValue))",                                                        "(uint)(left[0] & right[0]) != result[0]",                                           "(uint)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "And",                "Vector256",   "UInt64",    "Vector256",   "UInt64",     "Vector256",   "UInt64",                                "32",       "(ulong)(random.Next(0, int.MaxValue))",                 "(ulong)(random.Next(0, int.MaxValue))",                                                       "(ulong)(left[0] & right[0]) != result[0]",                                          "(ulong)(left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "AndNot",             "Vector256",   "Byte",      "Vector256",   "Byte",       "Vector256",   "Byte",                                  "32",       "(byte)(random.Next(0, byte.MaxValue))",                 "(byte)(random.Next(0, byte.MaxValue))",                                                       "(byte)(~left[0] & right[0]) != result[0]",                                          "(byte)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "AndNot",             "Vector256",   "Int16",     "Vector256",   "Int16",      "Vector256",   "Int16",                                 "32",       "(short)(random.Next(short.MinValue, short.MaxValue))",  "(short)(random.Next(short.MinValue, short.MaxValue))",                                        "(short)(~left[0] & right[0]) != result[0]",                                         "(short)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "AndNot",             "Vector256",   "Int32",     "Vector256",   "Int32",      "Vector256",   "Int32",                                 "32",       "(int)(random.Next(int.MinValue, int.MaxValue))",        "(int)(random.Next(int.MinValue, int.MaxValue))",                                              "(int)(~left[0] & right[0]) != result[0]",                                           "(int)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "AndNot",             "Vector256",   "Int64",     "Vector256",   "Int64",      "Vector256",   "Int64",                                 "32",       "(long)(random.Next(int.MinValue, int.MaxValue))",       "(long)(random.Next(int.MinValue, int.MaxValue))",                                             "(long)(~left[0] & right[0]) != result[0]",                                          "(long)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "AndNot",             "Vector256",   "SByte",     "Vector256",   "SByte",      "Vector256",   "SByte",                                 "32",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",  "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",                                        "(sbyte)(~left[0] & right[0]) != result[0]",                                         "(sbyte)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "AndNot",             "Vector256",   "UInt16",    "Vector256",   "UInt16",     "Vector256",   "UInt16",                                "32",       "(ushort)(random.Next(0, ushort.MaxValue))",             "(ushort)(random.Next(0, ushort.MaxValue))",                                                   "(ushort)(~left[0] & right[0]) != result[0]",                                        "(ushort)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "AndNot",             "Vector256",   "UInt32",    "Vector256",   "UInt32",     "Vector256",   "UInt32",                                "32",       "(uint)(random.Next(0, int.MaxValue))",                  "(uint)(random.Next(0, int.MaxValue))",                                                        "(uint)(~left[0] & right[0]) != result[0]",                                          "(uint)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "AndNot",             "Vector256",   "UInt64",    "Vector256",   "UInt64",     "Vector256",   "UInt64",                                "32",       "(ulong)(random.Next(0, int.MaxValue))",                 "(ulong)(random.Next(0, int.MaxValue))",                                                       "(ulong)(~left[0] & right[0]) != result[0]",                                         "(ulong)(~left[i] & right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Average",            "Vector256",   "Byte",      "Vector256",   "Byte",       "Vector256",   "Byte",                                  "32",       "(byte)(random.Next(0, byte.MaxValue))",                 "(byte)(random.Next(0, byte.MaxValue))",                                                       "(byte)((left[0] + right[0] + 1) >> 1) != result[0]",                                "(byte)((left[i] + right[i] + 1) >> 1) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Average",            "Vector256",   "UInt16",    "Vector256",   "UInt16",     "Vector256",   "UInt16",                                "32",       "(ushort)(random.Next(short.MinValue, short.MaxValue))", "(ushort)(random.Next(short.MinValue, short.MaxValue))",                                       "(ushort)((left[0] + right[0] + 1) >> 1) != result[0]",                              "(ushort)((left[i] + right[i] + 1) >> 1) != result[i]"}),
    ("SimpleTernOpTest.template", new string[] { "Avx2", "Avx",   "BlendVariable",      "Vector256",   "Byte",      "Vector256",   "Byte",       "Vector256",   "Byte",      "Vector256",   "Byte",      "32",       "(byte)(random.Next(0, byte.MaxValue))",                 "(byte)(random.Next(0, byte.MaxValue))",                 "(byte)(((i % 2) == 0) ? 128 : 1)",   "((thirdOp[0] >> 7) & 1) == 1 ? secondOp[0] != result[0] : firstOp[0] != result[0]", "((thirdOp[i] >> 7) & 1) == 1 ? secondOp[i] != result[i] : firstOp[i] != result[i]"}),
    ("SimpleTernOpTest.template", new string[] { "Avx2", "Avx",   "BlendVariable",      "Vector256",   "SByte",     "Vector256",   "SByte",      "Vector256",   "SByte",     "Vector256",   "SByte",     "32",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",  "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",  "(sbyte)(((i % 2) == 0) ? -128 : 1)", "((thirdOp[0] >> 7) & 1) == 1 ? secondOp[0] != result[0] : firstOp[0] != result[0]", "((thirdOp[i] >> 7) & 1) == 1 ? secondOp[i] != result[i] : firstOp[i] != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "CompareEqual",       "Vector256",   "Byte",      "Vector256",   "Byte",       "Vector256",   "Byte",                                  "32",       "(byte)(random.Next(0, byte.MaxValue))",                 "(byte)(random.Next(0, byte.MaxValue))",                                                       "result[0] != ((left[0] == right[0]) ? unchecked((byte)(-1)) : 0)",                  "result[i] != ((left[i] == right[i]) ? unchecked((byte)(-1)) : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "CompareEqual",       "Vector256",   "Int16",     "Vector256",   "Int16",      "Vector256",   "Int16",                                 "32",       "(short)(random.Next(short.MinValue, short.MaxValue))",  "(short)(random.Next(short.MinValue, short.MaxValue))",                                        "result[0] != ((left[0] == right[0]) ? unchecked((short)(-1)) : 0)",                 "result[i] != ((left[i] == right[i]) ? unchecked((short)(-1)) : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "CompareEqual",       "Vector256",   "Int32",     "Vector256",   "Int32",      "Vector256",   "Int32",                                 "32",       "(int)(random.Next(int.MinValue, int.MaxValue))",        "(int)(random.Next(int.MinValue, int.MaxValue))",                                              "result[0] != ((left[0] == right[0]) ? unchecked((int)(-1)) : 0)",                   "result[i] != ((left[i] == right[i]) ? unchecked((int)(-1)) : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "CompareEqual",       "Vector256",   "Int64",     "Vector256",   "Int64",      "Vector256",   "Int64",                                 "32",       "(long)(random.Next(int.MinValue, int.MaxValue))",       "(long)(random.Next(int.MinValue, int.MaxValue))",                                             "result[0] != ((left[0] == right[0]) ? unchecked((long)(-1)) : 0)",                  "result[i] != ((left[i] == right[i]) ? unchecked((long)(-1)) : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "CompareEqual",       "Vector256",   "SByte",     "Vector256",   "SByte",      "Vector256",   "SByte",                                 "32",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",  "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",                                        "result[0] != ((left[0] == right[0]) ? unchecked((sbyte)(-1)) : 0)",                 "result[i] != ((left[i] == right[i]) ? unchecked((sbyte)(-1)) : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "CompareEqual",       "Vector256",   "UInt16",    "Vector256",   "UInt16",     "Vector256",   "UInt16",                                "32",       "(ushort)(random.Next(0, ushort.MaxValue))",             "(ushort)(random.Next(0, ushort.MaxValue))",                                                   "result[0] != ((left[0] == right[0]) ? unchecked((ushort)(-1)) : 0)",                "result[i] != ((left[i] == right[i]) ? unchecked((ushort)(-1)) : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "CompareEqual",       "Vector256",   "UInt32",    "Vector256",   "UInt32",     "Vector256",   "UInt32",                                "32",       "(uint)(random.Next(0, int.MaxValue))",                  "(uint)(random.Next(0, int.MaxValue))",                                                        "result[0] != ((left[0] == right[0]) ? unchecked((uint)(-1)) : 0)",                  "result[i] != ((left[i] == right[i]) ? unchecked((uint)(-1)) : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "CompareEqual",       "Vector256",   "UInt64",    "Vector256",   "UInt64",     "Vector256",   "UInt64",                                "32",       "(ulong)(random.Next(0, int.MaxValue))",                 "(ulong)(random.Next(0, int.MaxValue))",                                                       "result[0] != ((left[0] == right[0]) ? unchecked((ulong)(-1)) : 0)",                 "result[i] != ((left[i] == right[i]) ? unchecked((ulong)(-1)) : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "CompareGreaterThan", "Vector256",   "Int16",     "Vector256",   "Int16",      "Vector256",   "Int16",                                 "32",       "(short)(random.Next(short.MinValue, short.MaxValue))",  "(short)(random.Next(short.MinValue, short.MaxValue))",                                        "result[0] != ((left[0] > right[0]) ? unchecked((short)(-1)) : 0)",                  "result[i] != ((left[i] > right[i]) ? unchecked((short)(-1)) : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "CompareGreaterThan", "Vector256",   "Int32",     "Vector256",   "Int32",      "Vector256",   "Int32",                                 "32",       "(int)(random.Next(int.MinValue, int.MaxValue))",        "(int)(random.Next(int.MinValue, int.MaxValue))",                                              "result[0] != ((left[0] > right[0]) ? unchecked((int)(-1)) : 0)",                    "result[i] != ((left[i] > right[i]) ? unchecked((int)(-1)) : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "CompareGreaterThan", "Vector256",   "Int64",     "Vector256",   "Int64",      "Vector256",   "Int64",                                 "32",       "(long)(random.Next(int.MinValue, int.MaxValue))",       "(long)(random.Next(int.MinValue, int.MaxValue))",                                             "result[0] != ((left[0] > right[0]) ? unchecked((long)(-1)) : 0)",                   "result[i] != ((left[i] > right[i]) ? unchecked((long)(-1)) : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "CompareGreaterThan", "Vector256",   "SByte",     "Vector256",   "SByte",      "Vector256",   "SByte",                                 "32",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",  "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",                                        "result[0] != ((left[0] > right[0]) ? unchecked((sbyte)(-1)) : 0)",                  "result[i] != ((left[i] > right[i]) ? unchecked((sbyte)(-1)) : 0)"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Or",                 "Vector256",   "Byte",      "Vector256",   "Byte",       "Vector256",   "Byte",                                  "32",       "(byte)(random.Next(0, byte.MaxValue))",                 "(byte)(random.Next(0, byte.MaxValue))",                                                       "(byte)(left[0] | right[0]) != result[0]",                                           "(byte)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Or",                 "Vector256",   "Int16",     "Vector256",   "Int16",      "Vector256",   "Int16",                                 "32",       "(short)(random.Next(short.MinValue, short.MaxValue))",  "(short)(random.Next(short.MinValue, short.MaxValue))",                                        "(short)(left[0] | right[0]) != result[0]",                                          "(short)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Or",                 "Vector256",   "Int32",     "Vector256",   "Int32",      "Vector256",   "Int32",                                 "32",       "(int)(random.Next(int.MinValue, int.MaxValue))",        "(int)(random.Next(int.MinValue, int.MaxValue))",                                              "(int)(left[0] | right[0]) != result[0]",                                            "(int)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Or",                 "Vector256",   "Int64",     "Vector256",   "Int64",      "Vector256",   "Int64",                                 "32",       "(long)(random.Next(int.MinValue, int.MaxValue))",       "(long)(random.Next(int.MinValue, int.MaxValue))",                                             "(long)(left[0] | right[0]) != result[0]",                                           "(long)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Or",                 "Vector256",   "SByte",     "Vector256",   "SByte",      "Vector256",   "SByte",                                 "32",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",  "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",                                        "(sbyte)(left[0] | right[0]) != result[0]",                                          "(sbyte)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Or",                 "Vector256",   "UInt16",    "Vector256",   "UInt16",     "Vector256",   "UInt16",                                "32",       "(ushort)(random.Next(0, ushort.MaxValue))",             "(ushort)(random.Next(0, ushort.MaxValue))",                                                   "(ushort)(left[0] | right[0]) != result[0]",                                         "(ushort)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Or",                 "Vector256",   "UInt32",    "Vector256",   "UInt32",     "Vector256",   "UInt32",                                "32",       "(uint)(random.Next(0, int.MaxValue))",                  "(uint)(random.Next(0, int.MaxValue))",                                                        "(uint)(left[0] | right[0]) != result[0]",                                           "(uint)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Or",                 "Vector256",   "UInt64",    "Vector256",   "UInt64",     "Vector256",   "UInt64",                                "32",       "(ulong)(random.Next(0, int.MaxValue))",                 "(ulong)(random.Next(0, int.MaxValue))",                                                       "(ulong)(left[0] | right[0]) != result[0]",                                          "(ulong)(left[i] | right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Subtract",           "Vector256",   "Byte",      "Vector256",   "Byte",       "Vector256",   "Byte",                                  "32",       "(byte)(random.Next(0, byte.MaxValue))",                 "(byte)(random.Next(0, byte.MaxValue))",                                                       "(byte)(left[0] - right[0]) != result[0]",                                           "(byte)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Subtract",           "Vector256",   "Int16",     "Vector256",   "Int16",      "Vector256",   "Int16",                                 "32",       "(short)(random.Next(short.MinValue, short.MaxValue))",  "(short)(random.Next(short.MinValue, short.MaxValue))",                                        "(short)(left[0] - right[0]) != result[0]",                                          "(short)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Subtract",           "Vector256",   "Int32",     "Vector256",   "Int32",      "Vector256",   "Int32",                                 "32",       "(int)(random.Next(int.MinValue, int.MaxValue))",        "(int)(random.Next(int.MinValue, int.MaxValue))",                                              "(int)(left[0] - right[0]) != result[0]",                                            "(int)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Subtract",           "Vector256",   "Int64",     "Vector256",   "Int64",      "Vector256",   "Int64",                                 "32",       "(long)(random.Next(int.MinValue, int.MaxValue))",       "(long)(random.Next(int.MinValue, int.MaxValue))",                                             "(long)(left[0] - right[0]) != result[0]",                                           "(long)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Subtract",           "Vector256",   "SByte",     "Vector256",   "SByte",      "Vector256",   "SByte",                                 "32",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",  "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",                                        "(sbyte)(left[0] - right[0]) != result[0]",                                          "(sbyte)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Subtract",           "Vector256",   "UInt16",    "Vector256",   "UInt16",     "Vector256",   "UInt16",                                "32",       "(ushort)(random.Next(0, ushort.MaxValue))",             "(ushort)(random.Next(0, ushort.MaxValue))",                                                   "(ushort)(left[0] - right[0]) != result[0]",                                         "(ushort)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Subtract",           "Vector256",   "UInt32",    "Vector256",   "UInt32",     "Vector256",   "UInt32",                                "32",       "(uint)(random.Next(0, int.MaxValue))",                  "(uint)(random.Next(0, int.MaxValue))",                                                        "(uint)(left[0] - right[0]) != result[0]",                                           "(uint)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Subtract",           "Vector256",   "UInt64",    "Vector256",   "UInt64",     "Vector256",   "UInt64",                                "32",       "(ulong)(random.Next(0, int.MaxValue))",                 "(ulong)(random.Next(0, int.MaxValue))",                                                       "(ulong)(left[0] - right[0]) != result[0]",                                          "(ulong)(left[i] - right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Xor",                "Vector256",   "Byte",      "Vector256",   "Byte",       "Vector256",   "Byte",                                  "32",       "(byte)(random.Next(0, byte.MaxValue))",                 "(byte)(random.Next(0, byte.MaxValue))",                                                       "(byte)(left[0] ^ right[0]) != result[0]",                                           "(byte)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Xor",                "Vector256",   "Int16",     "Vector256",   "Int16",      "Vector256",   "Int16",                                 "32",       "(short)(random.Next(short.MinValue, short.MaxValue))",  "(short)(random.Next(short.MinValue, short.MaxValue))",                                        "(short)(left[0] ^ right[0]) != result[0]",                                          "(short)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Xor",                "Vector256",   "Int32",     "Vector256",   "Int32",      "Vector256",   "Int32",                                 "32",       "(int)(random.Next(int.MinValue, int.MaxValue))",        "(int)(random.Next(int.MinValue, int.MaxValue))",                                              "(int)(left[0] ^ right[0]) != result[0]",                                            "(int)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Xor",                "Vector256",   "Int64",     "Vector256",   "Int64",      "Vector256",   "Int64",                                 "32",       "(long)(random.Next(int.MinValue, int.MaxValue))",       "(long)(random.Next(int.MinValue, int.MaxValue))",                                             "(long)(left[0] ^ right[0]) != result[0]",                                           "(long)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Xor",                "Vector256",   "SByte",     "Vector256",   "SByte",      "Vector256",   "SByte",                                 "32",       "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",  "(sbyte)(random.Next(sbyte.MinValue, sbyte.MaxValue))",                                        "(sbyte)(left[0] ^ right[0]) != result[0]",                                          "(sbyte)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Xor",                "Vector256",   "UInt16",    "Vector256",   "UInt16",     "Vector256",   "UInt16",                                "32",       "(ushort)(random.Next(0, ushort.MaxValue))",             "(ushort)(random.Next(0, ushort.MaxValue))",                                                   "(ushort)(left[0] ^ right[0]) != result[0]",                                         "(ushort)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Xor",                "Vector256",   "UInt32",    "Vector256",   "UInt32",     "Vector256",   "UInt32",                                "32",       "(uint)(random.Next(0, int.MaxValue))",                  "(uint)(random.Next(0, int.MaxValue))",                                                        "(uint)(left[0] ^ right[0]) != result[0]",                                           "(uint)(left[i] ^ right[i]) != result[i]"}),
    ("SimpleBinOpTest.template",  new string[] { "Avx2", "Avx",   "Xor",                "Vector256",   "UInt64",    "Vector256",   "UInt64",     "Vector256",   "UInt64",                                "32",       "(ulong)(random.Next(0, int.MaxValue))",                 "(ulong)(random.Next(0, int.MaxValue))",                                                       "(ulong)(left[0] ^ right[0]) != result[0]",                                          "(ulong)(left[i] ^ right[i]) != result[i]"}),
};

private static void ProcessInputs(string isa, (string templateFileName, string[] templateData)[] inputs)
{
    var testListFileName = Path.Combine("..", isa, $"Program.{isa}.cs");

    using (var testListFile = new StreamWriter(testListFileName, append: false))
    {
        testListFile.WriteLine(@"// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.Collections.Generic;

namespace JIT.HardwareIntrinsics.X86
{
    public static partial class Program
    {
        static Program()
        {
            TestList = new Dictionary<string, Action>() {");

        foreach (var input in inputs)
        {
            ProcessInput(testListFile, input);
        }

        testListFile.WriteLine(@"            };
        }
    }
}");
    }
}

private static void ProcessInput(StreamWriter testListFile, (string templateFileName, string[] templateData) input)
{
    var testName = $"{input.templateData[2]}.{input.templateData[4]}";

    // Ex: ["Add.Single"] = AddSingle
    testListFile.WriteLine($@"                [""{testName}""] = {input.templateData[2]}{input.templateData[4]},");

    var testFileName = Path.Combine("..", input.templateData[0], $"{testName}.cs");
    var template = File.ReadAllText(input.templateFileName);

    if (input.templateData.Length != 0)
    {
        template = string.Format(template, input.templateData);
    }

    File.WriteAllText(testFileName, template);
}

ProcessInputs("Sse", SseInputs);
ProcessInputs("Sse2", Sse2Inputs);
ProcessInputs("Sse41", Sse41Inputs);
ProcessInputs("Sse42", Sse42Inputs);
ProcessInputs("Avx", AvxInputs);
ProcessInputs("Avx2", Avx2Inputs);
