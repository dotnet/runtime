<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// This file is auto-generated from template file Helpers.tt
// In order to make changes to this file, please update Helpers.tt
// and run the following command from Developer Command Prompt for Visual Studio
//   "%DevEnvDir%\TextTransform.exe" .\Helpers.tt

using System;

namespace JIT.HardwareIntrinsics.Arm
{
    static class Helpers
    {
<#
        string[] typeNames = { "sbyte", "short", "int" };
        foreach (string typeName in typeNames)
        {
#>
        public static <#= typeName #> CountLeadingSignBits(<#= typeName #> op1)
        {
            return (<#= typeName #>)(CountLeadingZeroBits((<#= typeName #>)((ulong)op1 ^ ((ulong)op1 >> 1))) - 1);
        }

<#
        }

        foreach (string typeName in new string[] { "sbyte", "byte", "short", "ushort", "int", "uint" })
        {
#>
        public static <#= typeName #> CountLeadingZeroBits(<#= typeName #> op1)
        {
            return (<#= typeName #>)(8 * sizeof(<#= typeName #>) - (HighestSetBit(op1) + 1));
        }

        private static int HighestSetBit(<#= typeName #> op1)
        {
            for (int i = 8 * sizeof(<#= typeName #>) - 1; i >= 0; i--)
            {
                if (((ulong)op1 & (1UL << i)) != 0)
                {
                    return i;
                }
            }

            return -1;
        }

<#
        }

        foreach (string typeName in new string [] { "sbyte", "byte" })
        {
#>
        public static <#= typeName #> BitCount(<#= typeName #> op1)
        {
            int result = 0;

            for (int i = 0; i < 8 * sizeof(<#= typeName #>); i++)
            {
                if (((ulong)op1 & (1UL << i)) != 0)
                {
                    result = result + 1;
                }
            }

            return (<#= typeName #>)result;
        }

<#
        }

        foreach (var type in new[] { (name: "byte", unsigned: "byte"),
                                     (name: "int", unsigned: "uint"),
                                     (name: "long", unsigned: "ulong"),
                                     (name: "sbyte", unsigned: "byte"),
                                     (name: "uint", unsigned: "uint"),
                                     (name: "ulong", unsigned: "ulong") })
        {
#>
        public static <#= type.name #> ReverseElementBits(<#= type.name #> op1)
        {
            <#= type.unsigned #> val = (<#= type.unsigned #>)op1;
            <#= type.unsigned #> result = 0;
            const int bitsize = sizeof(<#= type.unsigned #>) * 8;
            const <#= type.unsigned #> cst_one = 1;

            for (int i = 0; i < bitsize; i++)
            {
                if ((val & (cst_one << i)) != 0)
                {
                    result |= (<#= type.unsigned #>)(cst_one << (bitsize  - 1 - i));
                }
            }

            return (<#= type.name #>)result;
        }

<#
        }

        foreach (string typeName in new string[] { "sbyte", "byte", "short", "ushort", "int", "uint", "long", "ulong" })
        {
#>
        public static <#= typeName #> BitwiseSelect(<#= typeName #> op1, <#= typeName #> op2, <#= typeName #> op3)
        {
            ulong result = 0;

            for (int i = 0; i < 8 * sizeof(<#= typeName #>); i++)
            {
                if (((ulong)op1 & (1UL << i)) != 0)
                {
                    result = result | ((ulong)op2 & (1UL << i));
                }
                else
                {
                    result = result | ((ulong)op3 & (1UL << i));
                }
            }

            return (<#= typeName #>)result;
        }

<#
        }
#>
        public static float BitwiseSelect(float op1, float op2, float op3) => BitConverter.Int32BitsToSingle(BitwiseSelect(BitConverter.SingleToInt32Bits(op1), BitConverter.SingleToInt32Bits(op2), BitConverter.SingleToInt32Bits(op3)));

        public static double BitwiseSelect(double op1, double op2, double op3) => BitConverter.Int64BitsToDouble(BitwiseSelect(BitConverter.DoubleToInt64Bits(op1), BitConverter.DoubleToInt64Bits(op2), BitConverter.DoubleToInt64Bits(op3)));

<#
        foreach (string typeName in new string[] { "sbyte", "byte", "short", "ushort", "int", "uint", "long", "ulong" })
        {

        foreach ((string methodName, string compareOp) in new (string, string)[] {
          ("CompareEqual", "=="),
          ("CompareGreaterThan", ">"),
          ("CompareGreaterThanOrEqual", ">="),
          ("CompareLessThan", "<"),
          ("CompareLessThanOrEqual", "<=") })
        {
#>
        public static <#= typeName #> <#= methodName #>(<#= typeName #> left, <#= typeName #> right)
        {
            long result = 0;

            if (left <#= compareOp #> right)
            {
                result = -1;
            }

            return (<#= typeName #>)result;
        }

<#
        } // foreach ((string methodName, string compareOp) in ... )
#>
        public static <#= typeName #> CompareTest(<#= typeName #> left, <#= typeName #> right)
        {
            long result = 0;

            if ((left & right) != 0)
            {
                result = -1;
            }

            return (<#= typeName #>)result;
        }

<#
        } // foreach (string typeName in ... )

        foreach ((string methodName, string compareOp, bool absoluteCompare) in new (string, string, bool)[] {
          ("AbsoluteCompareGreaterThan", ">", true),
          ("AbsoluteCompareGreaterThanOrEqual", ">=", true),
          ("AbsoluteCompareLessThan", "<", true),
          ("AbsoluteCompareLessThanOrEqual", "<=", true),
          ("CompareEqual", "==", false),
          ("CompareGreaterThan", ">", false),
          ("CompareGreaterThanOrEqual", ">=", false),
          ("CompareLessThan", "<", false),
          ("CompareLessThanOrEqual", "<=", false),
        })
        {
#>
        public static double <#= methodName #>(double left, double right)
        {
            long result = 0;

<#
            if (absoluteCompare)
            {
#>
            left = Math.Abs(left);
            right = Math.Abs(right);

<#
            }
#>
            if (left <#= compareOp #> right)
            {
                result = -1;
            }

            return BitConverter.Int64BitsToDouble(result);
        }

        public static float <#= methodName #>(float left, float right)
        {
            int result = 0;

<#
            if (absoluteCompare)
            {
#>
            left = Math.Abs(left);
            right = Math.Abs(right);

<#
            }
#>
            if (left <#= compareOp #> right)
            {
                result = -1;
            }

            return BitConverter.Int32BitsToSingle(result);
        }

<#
        }
#>
        public static double CompareTest(double left, double right)
        {
            long result = 0;

            if ((BitConverter.DoubleToInt64Bits(left) & BitConverter.DoubleToInt64Bits(right)) != 0)
            {
                result = -1;
            }

            return BitConverter.Int64BitsToDouble(result);
        }

        public static float CompareTest(float left, float right)
        {
            int result = 0;

            if ((BitConverter.SingleToInt32Bits(left) & BitConverter.SingleToInt32Bits(right)) != 0)
            {
                result = -1;
            }

            return BitConverter.Int32BitsToSingle(result);
        }
    }
}
