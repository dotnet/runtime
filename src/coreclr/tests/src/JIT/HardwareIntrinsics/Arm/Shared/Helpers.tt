<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// This file is auto-generated from template file Helpers.tt
// In order to make changes to this file, please update Helpers.tt
// and run the following command from Developer Command Prompt for Visual Studio
//   "%DevEnvDir%\TextTransform.exe" .\Helpers.tt

using System;

namespace JIT.HardwareIntrinsics.Arm
{
    static class Helpers
    {
<#
        string[] typeNames = { "sbyte", "short", "int" };
        foreach (string typeName in typeNames)
        {
#>
        public static <#= typeName #> CountLeadingSignBits(<#= typeName #> op1)
        {
            return (<#= typeName #>)(CountLeadingZeroBits((<#= typeName #>)((ulong)op1 ^ ((ulong)op1 >> 1))) - 1);
        }

<#
        }

        foreach (string typeName in new string[] { "sbyte", "byte", "short", "ushort", "int", "uint" })
        {
#>
        public static <#= typeName #> CountLeadingZeroBits(<#= typeName #> op1)
        {
            return (<#= typeName #>)(8 * sizeof(<#= typeName #>) - (HighestSetBit(op1) + 1));
        }

        private static int HighestSetBit(<#= typeName #> op1)
        {
            for (int i = 8 * sizeof(<#= typeName #>) - 1; i >= 0; i--)
            {
                if (((ulong)op1 & (1UL << i)) != 0)
                {
                    return i;
                }
            }

            return -1;
        }

<#
        }

        foreach (string typeName in new string [] { "sbyte", "byte" })
        {
#>
        public static <#= typeName #> BitCount(<#= typeName #> op1)
        {
            int result = 0;

            for (int i = 0; i < 8 * sizeof(<#= typeName #>); i++)
            {
                if (((ulong)op1 & (1UL << i)) != 0)
                {
                    result = result + 1;
                }
            }

            return (<#= typeName #>)result;
        }

<#
        }

        foreach (var type in new[] { (name: "byte", unsigned: "byte"),
                                     (name: "int", unsigned: "uint"),
                                     (name: "long", unsigned: "ulong"),
                                     (name: "sbyte", unsigned: "byte"),
                                     (name: "uint", unsigned: "uint"),
                                     (name: "ulong", unsigned: "ulong") })
        {
#>
        public static <#= type.name #> ReverseElementBits(<#= type.name #> op1)
        {
            <#= type.unsigned #> val = (<#= type.unsigned #>)op1;
            <#= type.unsigned #> result = 0;
            const int bitsize = sizeof(<#= type.unsigned #>) * 8;
            const <#= type.unsigned #> cst_one = 1;

            for (int i = 0; i < bitsize; i++)
            {
                if ((val & (cst_one << i)) != 0)
                {
                    result |= (<#= type.unsigned #>)(cst_one << (bitsize  - 1 - i));
                }
            }

            return (<#= type.name #>)result;
        }

<#
        }

        foreach (string typeName in new string[] { "sbyte", "byte", "short", "ushort", "int", "uint", "long", "ulong" })
        {
#>
        public static <#= typeName #> And(<#= typeName #> op1, <#= typeName #> op2) => (<#= typeName #>)(op1 & op2);

        public static <#= typeName #> BitwiseClear(<#= typeName #> op1, <#= typeName #> op2) => (<#= typeName #>)(op1 & ~op2);

        public static <#= typeName #> BitwiseSelect(<#= typeName #> op1, <#= typeName #> op2, <#= typeName #> op3)
        {
            ulong result = 0;

            for (int i = 0; i < 8 * sizeof(<#= typeName #>); i++)
            {
                if (((ulong)op1 & (1UL << i)) != 0)
                {
                    result = result | ((ulong)op2 & (1UL << i));
                }
                else
                {
                    result = result | ((ulong)op3 & (1UL << i));
                }
            }

            return (<#= typeName #>)result;
        }

        public static <#= typeName #> Not(<#= typeName #> op1) => (<#= typeName #>)(~op1);

        public static <#= typeName #> Or(<#= typeName #> op1, <#= typeName #> op2) => (<#= typeName #>)(op1 | op2);

        public static <#= typeName #> OrNot(<#= typeName #> op1, <#= typeName #> op2) => (<#= typeName #>)(op1 | ~op2);

        public static <#= typeName #> Xor(<#= typeName #> op1, <#= typeName #> op2) => (<#= typeName #>)(op1 ^ op2);

<#
        }
#>
        public static float Not(float op1) => BitConverter.Int32BitsToSingle(~BitConverter.SingleToInt32Bits(op1));

        public static double Not(double op1) => BitConverter.Int64BitsToDouble(~BitConverter.DoubleToInt64Bits(op1));

<#
        foreach (string helperName in new string[] { "And", "BitwiseClear", "Or", "OrNot", "Xor" })
        {
#>
        public static float <#= helperName #>(float op1, float op2) => BitConverter.Int32BitsToSingle(<#= helperName #>(BitConverter.SingleToInt32Bits(op1), BitConverter.SingleToInt32Bits(op2)));

        public static double <#= helperName #>(double op1, double op2) => BitConverter.Int64BitsToDouble(<#= helperName #>(BitConverter.DoubleToInt64Bits(op1), BitConverter.DoubleToInt64Bits(op2)));

<#
        }
#>
        public static float BitwiseSelect(float op1, float op2, float op3) => BitConverter.Int32BitsToSingle(BitwiseSelect(BitConverter.SingleToInt32Bits(op1), BitConverter.SingleToInt32Bits(op2), BitConverter.SingleToInt32Bits(op3)));
        public static double BitwiseSelect(double op1, double op2, double op3) => BitConverter.Int64BitsToDouble(BitwiseSelect(BitConverter.DoubleToInt64Bits(op1), BitConverter.DoubleToInt64Bits(op2), BitConverter.DoubleToInt64Bits(op3)));

<#
        foreach (string typeName in new string[] { "sbyte", "byte", "short", "ushort", "int", "uint", "long", "ulong" })
        {

        foreach ((string methodName, string compareOp) in new (string, string)[] {
          ("CompareEqual", "=="),
          ("CompareGreaterThan", ">"),
          ("CompareGreaterThanOrEqual", ">="),
          ("CompareLessThan", "<"),
          ("CompareLessThanOrEqual", "<=") })
        {
#>
        public static <#= typeName #> <#= methodName #>(<#= typeName #> left, <#= typeName #> right)
        {
            long result = 0;

            if (left <#= compareOp #> right)
            {
                result = -1;
            }

            return (<#= typeName #>)result;
        }

<#
        } // foreach ((string methodName, string compareOp) in ... )
#>
        public static <#= typeName #> CompareTest(<#= typeName #> left, <#= typeName #> right)
        {
            long result = 0;

            if ((left & right) != 0)
            {
                result = -1;
            }

            return (<#= typeName #>)result;
        }

<#
        } // foreach (string typeName in ... )

        foreach ((string methodName, string compareOp, bool absoluteCompare) in new (string, string, bool)[] {
          ("AbsoluteCompareGreaterThan", ">", true),
          ("AbsoluteCompareGreaterThanOrEqual", ">=", true),
          ("AbsoluteCompareLessThan", "<", true),
          ("AbsoluteCompareLessThanOrEqual", "<=", true),
          ("CompareEqual", "==", false),
          ("CompareGreaterThan", ">", false),
          ("CompareGreaterThanOrEqual", ">=", false),
          ("CompareLessThan", "<", false),
          ("CompareLessThanOrEqual", "<=", false),
        })
        {
#>
        public static double <#= methodName #>(double left, double right)
        {
            long result = 0;

<#
            if (absoluteCompare)
            {
#>
            left = Math.Abs(left);
            right = Math.Abs(right);

<#
            }
#>
            if (left <#= compareOp #> right)
            {
                result = -1;
            }

            return BitConverter.Int64BitsToDouble(result);
        }

        public static float <#= methodName #>(float left, float right)
        {
            int result = 0;

<#
            if (absoluteCompare)
            {
#>
            left = Math.Abs(left);
            right = Math.Abs(right);

<#
            }
#>
            if (left <#= compareOp #> right)
            {
                result = -1;
            }

            return BitConverter.Int32BitsToSingle(result);
        }

<#
        }
#>
        public static double CompareTest(double left, double right)
        {
            long result = 0;

            if ((BitConverter.DoubleToInt64Bits(left) & BitConverter.DoubleToInt64Bits(right)) != 0)
            {
                result = -1;
            }

            return BitConverter.Int64BitsToDouble(result);
        }

        public static float CompareTest(float left, float right)
        {
            int result = 0;

            if ((BitConverter.SingleToInt32Bits(left) & BitConverter.SingleToInt32Bits(right)) != 0)
            {
                result = -1;
            }

            return BitConverter.Int32BitsToSingle(result);
        }

<#
        foreach (var type in new[] { (name: "sbyte",  unsigned: "byte"),
                                     (name: "short",  unsigned: "ushort"),
                                     (name: "int",    unsigned: "uint"),
                                     (name: "long",   unsigned: "ulong") })
        {
#>
        public static <#= type.unsigned #> Abs(<#= type.name #> value) => value < 0 ? (<#= type.unsigned #>)-value : (<#= type.unsigned #>)value;

<#
        }
#>
        public static float Abs(float value) => Math.Abs(value);

        public static double Abs(double value) => Math.Abs(value);

        public static float Divide(float op1, float op2) => op1 / op2;

        public static double Divide(double op1, double op2) => op1 / op2;

        public static float Sqrt(float value) => MathF.Sqrt(value);

        public static double Sqrt(double value) => Math.Sqrt(value);

<#
        foreach (var type in new[] { (name: "sbyte",  unsigned: "byte"),
                                     (name: "short",  unsigned: "ushort"),
                                     (name: "int",    unsigned: "uint"),
                                     (name: "byte",   unsigned: "byte"),
                                     (name: "ushort", unsigned: "ushort"),
                                     (name: "uint",   unsigned: "uint") })
        {
#>
        public static <#= type.unsigned #> AbsoluteDifference(<#= type.name #> op1, <#= type.name #> op2) => op1 < op2 ? (<#= type.unsigned #>)(op2 - op1) : (<#= type.unsigned #>)(op1 - op2);

        public static <#= type.name #> AbsoluteDifferenceAdd(<#= type.name #> op1, <#= type.name #> op2, <#= type.name #> op3) => (<#= type.name #>)(op1 + AbsoluteDifference(op2, op3));

<#
        }

        foreach ((string typeName, string className) in new (string, string)[] { ("float", "MathF"), ("double", "Math") })
        {
#>
        public static <#= typeName #> AbsoluteDifference(<#= typeName #> op1, <#= typeName #> op2) => <#= className #>.Abs(op1 - op2);

        public static <#= typeName #> FusedMultiplyAdd(<#= typeName #> op1, <#= typeName #> op2, <#= typeName #> op3) => <#= className #>.FusedMultiplyAdd(op2, op3, op1);

        public static <#= typeName #> FusedMultiplyAddNegated(<#= typeName #> op1, <#= typeName #> op2, <#= typeName #> op3) => <#= className #>.FusedMultiplyAdd(-op2, op3, -op1);

        public static <#= typeName #> FusedMultiplySubtract(<#= typeName #> op1, <#= typeName #> op2, <#= typeName #> op3) => <#= className #>.FusedMultiplyAdd(-op2, op3, op1);

        public static <#= typeName #> FusedMultiplySubtractNegated(<#= typeName #> op1, <#= typeName #> op2, <#= typeName #> op3) => <#= className #>.FusedMultiplyAdd(op2, op3, -op1);

        public static <#= typeName #> MaxNumber(<#= typeName #> op1, <#= typeName #> op2) => <#= typeName #>.IsNaN(op1) ? op2 : (<#= typeName #>.IsNaN(op2) ? op1 : <#= className #>.Max(op1, op2));

        public static <#= typeName #> MaxNumberPairwise(<#= typeName #>[] op1, int i) => Pairwise(MaxNumber, op1, i);

        public static <#= typeName #> MaxNumberPairwise(<#= typeName #>[] op1, <#= typeName #>[] op2, int i) => Pairwise(MaxNumber, op1, op2, i);

        public static <#= typeName #> MinNumber(<#= typeName #> op1, <#= typeName #> op2) => <#= typeName #>.IsNaN(op1) ? op2 : (<#= typeName #>.IsNaN(op2) ? op1 : <#= className #>.Min(op1, op2));

        public static <#= typeName #> MinNumberPairwise(<#= typeName #>[] op1, int i) => Pairwise(MinNumber, op1, i);

        public static <#= typeName #> MinNumberPairwise(<#= typeName #>[] op1, <#= typeName #>[] op2, int i) => Pairwise(MinNumber, op1, op2, i);

        public static <#= typeName #> MultiplyExtended(<#= typeName #> op1, <#= typeName #> op2)
        {
            bool inf1 = <#= typeName #>.IsInfinity(op1);
            bool inf2 = <#= typeName #>.IsInfinity(op2);

            bool zero1 = (op1 == 0);
            bool zero2 = (op2 == 0);

            if ((inf1 && zero2) || (zero1 && inf2))
            {
                return <#= className #>.CopySign(2, (zero1 ? op2 : op1));
            }
            else
            {
                return op1 * op2;
            }
        }

        public static <#= typeName #> FPRecipStepFused(<#= typeName #> op1, <#= typeName #> op2) => FusedMultiplySubtract(2, op1, op2);

        public static <#= typeName #> FPRSqrtStepFused(<#= typeName #> op1, <#= typeName #> op2) => FusedMultiplySubtract(3, op1, op2) / 2;

<#
        }
#>
        private static uint RecipEstimate(uint a)
        {
            a = a * 2 + 1;

            uint b = (1 << 19) / a;
            uint r = (b + 1) / 2;

            return r;
        }

        private static uint RecipSqrtEstimate(uint a)
        {
            if (a < 256)
            {
                a = a * 2 + 1;
            }
            else
            {
                a = (a >> 1) << 1;
                a = (a + 1) * 2;
            }

            uint b = 512;

            while (a * (b + 1) * (b + 1) < (1 << 28))
            {
                b = b + 1;
            }

            uint r = (b + 1) / 2;

            return r;
        }

<#
        foreach (string typeName in new string[] { "uint" })
        {
#>
        private static <#= typeName #> ExtractBits(<#= typeName #> val, byte msbPos, byte lsbPos)
        {
            <#= typeName #> andMask = 0;

            for (byte pos = lsbPos; pos <= msbPos; pos++)
            {
                andMask |= (<#= typeName #>)1 << pos;
            }

            return (val & andMask) >> lsbPos;
        }

<#
        }
#>
        public static uint UnsignedRecipEstimate(uint op1)
        {
            uint result;

            if ((op1 & (1 << 31)) == 0)
            {
                result = ~0U;
            }
            else
            {
                uint estimate = RecipEstimate(ExtractBits(op1, 31, 23));
                result = ExtractBits(estimate, 8, 0) << 31;
            }

            return result;
        }

        public static uint UnsignedRSqrtEstimate(uint op1)
        {
            uint result;

            if ((op1 & (3 << 30)) == 0)
            {
                result = ~0U;
            }
            else
            {
                uint estimate = RecipSqrtEstimate(ExtractBits(op1, 31, 23));
                result = ExtractBits(estimate, 8, 0) << 31;
            }

            return result;
        }

<#
        foreach (string typeName in new string[] { "sbyte", "byte", "short", "ushort", "int", "uint", "long", "ulong", "float", "double" })
        {
#>
        public static <#= typeName #> Add(<#= typeName #> op1, <#= typeName #> op2) => (<#= typeName #>)(op1 + op2);

        public static <#= typeName #> AddPairwise(<#= typeName #>[] op1, int i) => Pairwise(Add, op1, i);

        public static <#= typeName #> AddPairwise(<#= typeName #>[] op1, <#= typeName #>[] op2, int i) => Pairwise(Add, op1, op2, i);

        public static <#= typeName #> Max(<#= typeName #> op1, <#= typeName #> op2) => Math.Max(op1, op2);

        public static <#= typeName #> MaxPairwise(<#= typeName #>[] op1, int i) => Pairwise(Max, op1, i);

        public static <#= typeName #> MaxPairwise(<#= typeName #>[] op1, <#= typeName #>[] op2, int i) => Pairwise(Max, op1, op2, i);

        public static <#= typeName #> Min(<#= typeName #> op1, <#= typeName #> op2) => Math.Min(op1, op2);

        public static <#= typeName #> MinPairwise(<#= typeName #>[] op1, int i) => Pairwise(Min, op1, i);

        public static <#= typeName #> MinPairwise(<#= typeName #>[] op1, <#= typeName #>[] op2, int i) => Pairwise(Min, op1, op2, i);

        public static <#= typeName #> Multiply(<#= typeName #> op1, <#= typeName #> op2) => (<#= typeName #>)(op1 * op2);

        public static <#= typeName #> MultiplyAdd(<#= typeName #> op1, <#= typeName #> op2, <#= typeName #> op3) => (<#= typeName #>)(op1 + (<#= typeName #>)(op2 * op3));

        public static <#= typeName #> MultiplySubtract(<#= typeName #> op1, <#= typeName #> op2, <#= typeName #> op3) => (<#= typeName #>)(op1 - (<#= typeName #>)(op2 * op3));

        public static <#= typeName #> Subtract(<#= typeName #> op1, <#= typeName #> op2) => (<#= typeName #>)(op1 - op2);

        private static <#= typeName #> Pairwise(Func<<#= typeName #>, <#= typeName #>, <#= typeName #>> pairOp, <#= typeName #>[] op1, int i)
        {
            if (2 * i + 1 < op1.Length)
            {
                return pairOp(op1[2 * i], op1[2 * i + 1]);
            }
            else
            {
                return 0;
            }
        }

        private static <#= typeName #> Pairwise(Func<<#= typeName #>, <#= typeName #>, <#= typeName #>> pairOp, <#= typeName #>[] op1, <#= typeName #>[] op2, int i)
        {
            if (2 * i + 1 < op1.Length)
            {
                return pairOp(op1[2 * i], op1[2 * i + 1]);
            }
            else
            {
                return pairOp(op2[2 * i - op1.Length], op2[2 * i + 1 - op1.Length]);
            }
        }

<#
        }

        foreach (string typeName in new string[] { "sbyte", "short", "int", "long", "float", "double" })
        {
#>
        public static <#= typeName #> Negate(<#= typeName #> op1) => (<#= typeName #>)(-op1);

<#
        }

        foreach (string typeName in new string[] { "sbyte", "byte", "short", "ushort", "int", "uint", "float", "double" })
        {
#>
        public static <#= typeName #> AddAcross(<#= typeName #>[] op1) => Reduce(Add, op1);

        public static <#= typeName #> MaxAcross(<#= typeName #>[] op1) => Reduce(Max, op1);

        public static <#= typeName #> MinAcross(<#= typeName #>[] op1) => Reduce(Min, op1);

        private static <#= typeName #> Reduce(Func<<#= typeName #>, <#= typeName #>, <#= typeName #>> reduceOp, <#= typeName #>[] op1)
        {
            <#= typeName #> acc = op1[0];

            for (int i = 1; i < op1.Length; i++)
            {
                acc = reduceOp(acc, op1[i]);
            }

            return acc;
        }

<#
        }
#>
        public static float MaxNumberAcross(float[] op1) => Reduce(MaxNumber, op1);

        public static float MinNumberAcross(float[] op1) => Reduce(MinNumber, op1);

<#
        foreach (string typeName in new string[] { "sbyte", "byte" })
        {
#>
        private static ulong PolynomialMult(<#= typeName #> op1, <#= typeName #> op2)
        {
            ulong result = 0;
            ulong extendedOp2 = (ulong)op2;

            for (int i = 0; i < 8 * sizeof(<#= typeName #>); i++)
            {
                if ((op1 & (1 << i)) != 0)
                {
                    result ^= (extendedOp2 << i);
                }
            }

            return result;
        }

        public static <#= typeName #> PolynomialMultiply(<#= typeName #> op1, <#= typeName #> op2) => (<#= typeName #>)PolynomialMult(op1, op2);
<#
        }

        foreach (var type in new[] { (small: "sbyte",  wide: "short"),
                                     (small: "short",  wide: "int"),
                                     (small: "int",    wide: "long"),
                                     (small: "byte",   wide: "ushort"),
                                     (small: "ushort", wide: "uint"),
                                     (small: "uint",   wide: "ulong") })
        {
#>
        public static bool ExtractAndNarrowHigh(int i, <#= type.small  #>[] left,
                                                <#= type.wide  #>[] right,
                                                <#= type.small  #>[] result)
        {
            if (i < left.Length)
              return left[i] != result[i];
            else
              return (<#= type.small  #>)right[i - left.Length] != result[i];
        }
<#
        }
#>
    }
}
