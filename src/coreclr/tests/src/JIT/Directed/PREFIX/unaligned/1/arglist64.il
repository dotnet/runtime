// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.


/*
CompareArgs() works as such:

CompareArgs(3,1,2,3,1,2,3)
Where arg0 is 1/2 the number of the
remaining arguments.

And the arguments 1,2,3 and 1,2,3 are
treated as two separate lists of size
arg0 whose elements are compared to one
another.

ie. in this case CompareArgs checks that
arg1==arg4, arg2==arg5, arg3==arg6.
*/

.assembly extern legacy library mscorlib {}
.assembly arglist.exe{ //This byte field requests that this assembly not be verified at run time and corresponds to this C# declaration:
  //[assembly:System.Security.Permissions.SecurityPermissionAttribute( [mscorlib]System.Security.Permissions.SecurityAction.RequestMinimum, Flags=System.Security.Permissions.SecurityPermissionFlag.SkipVerification )]
  .permission reqmin ['mscorlib']System.Security.Permissions.SecurityPermissionAttribute ( "SkipVerification" = true )
                        }

/*
CompareArgs(5,1,2,3,4,5,1,2,3,4,5)
arglist on x86: 5,4,3,2,1,5,4,3,2,1,5
                ^ index 1
arglist on ia64: 5,1,2,3,4,5,1,2,3,4,5
                 ^ index 1
*/

.method static vararg int32 CompareArgs(int32){
.locals(int32 currentindex, int32 loopconstant)
.maxstack 10
.try{
	ldc.i4		2
	stloc		currentindex
	ldarg		0
	stloc		loopconstant
LOOP:	ldloc		currentindex
	ldc.i4		8
	mul
	arglist
	add
	unaligned. 0x1
	ldind.i4
	ldloc		currentindex
	ldloc		loopconstant
	add
	ldc.i4		8
	mul
	arglist
	add
	unaligned. 0x1
	ldind.i4
	ceq
	brfalse		EXITWITHFAIL
	ldloc		currentindex
	ldloc		loopconstant
	ldc.i4		1
	add
	beq		EXITWITHPASS
	ldc.i4		1
	ldloc		currentindex
	add
	stloc		currentindex
	br		LOOP
	EXITWITHPASS:
	leave SUCCESS
	EXITWITHFAIL:
	leave FAIL
}catch [mscorlib]System.NullReferenceException{
	pop
	leave FAIL
}
SUCCESS:
	ldc.i4		0x64
	ret
FAIL:
	ldc.i4		0x0
REALLYDONE:
	ret
}

//-------------------------
// Entry point - Main     -
//-------------------------
.method static int32 main() {
.entrypoint
.locals	()
.maxstack	10

	ldc.i4	1
	ldc.i4	1
	ldc.i4	1
	call	vararg int32 CompareArgs(int32,...,int32,int32)
	brfalse	FAIL

	ldc.i4	4
	ldc.i4	2
	ldc.i4	3
	ldc.i4	4
	ldc.i4	5
	ldc.i4	2
	ldc.i4	3
	ldc.i4	4
	ldc.i4	5
	call	vararg int32 CompareArgs(int32,...,int32,int32,int32,int32,int32,int32,int32,int32)
	brfalse	FAIL


PASS:
	ldc.i4	0x64
	ret
FAIL:
	ldc.i4	0x0
	ret
}
