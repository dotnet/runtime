// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

.assembly extern legacy library mscorlib {}
.assembly simple
{
}
//------------------------------------------------------
//	This test ensures that fault handlers are called
//	when exception raised.

.class TEST
{
	.field public static int32 result
	
	.method public specialname rtspecialname instance void .ctor(int32) il managed
	{
		ldarg 0
		call instance void [mscorlib]System.Object::.ctor()
		ret
	}

	.method public static void Checkpoint(int32 mask) il managed
	{
		//	TEST::result |= mask;
		ldsfld int32 TEST::result
		ldarg  mask
		or
		stsfld int32 TEST::result
		ret
	}

	.method public static int32 Simple(int32 bThrowException) il managed
	{
		//	zero result
		ldc.i4.0
		stsfld int32 TEST::result
		
		.try {
		
			ldc.i4  0x0001
			call	void TEST::Checkpoint(int32)
			
			.try {
			
				ldc.i4	0x0002
				call	void TEST::Checkpoint(int32)
				
				ldarg   bThrowException
				brfalse	skip
				newobj     instance void [mscorlib]System.Exception::.ctor()
				throw
				
				ldc.i4  0x0004
				call	void TEST::Checkpoint(int32)
				
			skip:
				ldc.i4  0x0008
				call	void TEST::Checkpoint(int32)
				
				leave the_end
			}
			fault
			{
				ldc.i4  0x0010
				call	void TEST::Checkpoint(int32)
				endfinally
			}
			
		}
		catch [mscorlib]System.Exception
		{
			pop
			ldc.i4  0x0060
			call	void TEST::Checkpoint(int32)
			leave	the_end
		}
		
	the_end:
		ldsfld int32 TEST::result
		ret
	}

	.method public static int32 Main(class [mscorlib]System.String[]) il managed
	{
		.entrypoint
		.locals (int32)

		//	Case # 1 - does not throw an exception
		ldc.i4 1
		stloc.0
		
		ldc.i4.0
		call	int32 TEST::Simple(int32)
		ldc.i4	0x000b
		ceq
		brfalse failed

		//	Case # 1 - throws an exception.
		ldc.i4  2
		stloc.0
		
		ldc.i4.1
		call	int32 TEST::Simple(int32)
		ldc.i4	0x0073
		ceq
		brfalse failed
	
	passed:
		ldstr	"Test passed."
		call	void [mscorlib]System.Console::WriteLine(class [mscorlib]System.String)
		ldc.i4  0x64
		ret
		
	failed:
		ldstr	"Test # "
		call	void [mscorlib]System.Console::Write(class [mscorlib]System.String)
		ldloc.0
		call	void [mscorlib]System.Console::Write(int32)
		ldstr	" failed!"
		call	void [mscorlib]System.Console::WriteLine(class [mscorlib]System.String)
		ldc.i4.1
		ret
	}
}
