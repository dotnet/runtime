// Created by Microsoft (R) C/C++ Compiler

#pragma once

//
// interface INumericTesting wrapper method implementations
//

inline unsigned char INumericTesting::Add_Byte ( unsigned char a, unsigned char b ) {
    unsigned char _result = 0;
    HRESULT _hr = raw_Add_Byte(a, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short INumericTesting::Add_Short ( short a, short b ) {
    short _result = 0;
    HRESULT _hr = raw_Add_Short(a, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline unsigned short INumericTesting::Add_UShort ( unsigned short a, unsigned short b ) {
    unsigned short _result = 0;
    HRESULT _hr = raw_Add_UShort(a, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long INumericTesting::Add_Int ( long a, long b ) {
    long _result = 0;
    HRESULT _hr = raw_Add_Int(a, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline unsigned long INumericTesting::Add_UInt ( unsigned long a, unsigned long b ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_Add_UInt(a, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline __int64 INumericTesting::Add_Long ( __int64 a, __int64 b ) {
    __int64 _result = 0;
    HRESULT _hr = raw_Add_Long(a, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline unsigned __int64 INumericTesting::Add_ULong ( unsigned __int64 a, unsigned __int64 b ) {
    unsigned __int64 _result = 0;
    HRESULT _hr = raw_Add_ULong(a, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float INumericTesting::Add_Float ( float a, float b ) {
    float _result = 0;
    HRESULT _hr = raw_Add_Float(a, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double INumericTesting::Add_Double ( double a, double b ) {
    double _result = 0;
    HRESULT _hr = raw_Add_Double(a, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT INumericTesting::Add_Byte_Ref ( unsigned char a, unsigned char b, unsigned char * c ) {
    HRESULT _hr = raw_Add_Byte_Ref(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_Short_Ref ( short a, short b, short * c ) {
    HRESULT _hr = raw_Add_Short_Ref(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_UShort_Ref ( unsigned short a, unsigned short b, unsigned short * c ) {
    HRESULT _hr = raw_Add_UShort_Ref(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_Int_Ref ( long a, long b, long * c ) {
    HRESULT _hr = raw_Add_Int_Ref(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_UInt_Ref ( unsigned long a, unsigned long b, unsigned long * c ) {
    HRESULT _hr = raw_Add_UInt_Ref(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_Long_Ref ( __int64 a, __int64 b, __int64 * c ) {
    HRESULT _hr = raw_Add_Long_Ref(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_ULong_Ref ( unsigned __int64 a, unsigned __int64 b, unsigned __int64 * c ) {
    HRESULT _hr = raw_Add_ULong_Ref(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_Float_Ref ( float a, float b, float * c ) {
    HRESULT _hr = raw_Add_Float_Ref(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_Double_Ref ( double a, double b, double * c ) {
    HRESULT _hr = raw_Add_Double_Ref(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_Byte_Out ( unsigned char a, unsigned char b, unsigned char * c ) {
    HRESULT _hr = raw_Add_Byte_Out(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_Short_Out ( short a, short b, short * c ) {
    HRESULT _hr = raw_Add_Short_Out(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_UShort_Out ( unsigned short a, unsigned short b, unsigned short * c ) {
    HRESULT _hr = raw_Add_UShort_Out(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_Int_Out ( long a, long b, long * c ) {
    HRESULT _hr = raw_Add_Int_Out(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_UInt_Out ( unsigned long a, unsigned long b, unsigned long * c ) {
    HRESULT _hr = raw_Add_UInt_Out(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_Long_Out ( __int64 a, __int64 b, __int64 * c ) {
    HRESULT _hr = raw_Add_Long_Out(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_ULong_Out ( unsigned __int64 a, unsigned __int64 b, unsigned __int64 * c ) {
    HRESULT _hr = raw_Add_ULong_Out(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_Float_Out ( float a, float b, float * c ) {
    HRESULT _hr = raw_Add_Float_Out(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INumericTesting::Add_Double_Out ( double a, double b, double * c ) {
    HRESULT _hr = raw_Add_Double_Out(a, b, c);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IArrayTesting wrapper method implementations
//

inline double IArrayTesting::Mean_Byte_LP_PreLen ( long len, unsigned char * d ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Byte_LP_PreLen(len, d, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Short_LP_PreLen ( long len, short * d ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Short_LP_PreLen(len, d, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_UShort_LP_PreLen ( long len, unsigned short * d ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_UShort_LP_PreLen(len, d, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Int_LP_PreLen ( long len, long * d ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Int_LP_PreLen(len, d, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_UInt_LP_PreLen ( long len, unsigned long * d ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_UInt_LP_PreLen(len, d, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Long_LP_PreLen ( long len, __int64 * d ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Long_LP_PreLen(len, d, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_ULong_LP_PreLen ( long len, unsigned __int64 * d ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_ULong_LP_PreLen(len, d, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Float_LP_PreLen ( long len, float * d ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Float_LP_PreLen(len, d, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Double_LP_PreLen ( long len, double * d ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Double_LP_PreLen(len, d, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Byte_LP_PostLen ( unsigned char * d, long len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Byte_LP_PostLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Short_LP_PostLen ( short * d, long len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Short_LP_PostLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_UShort_LP_PostLen ( unsigned short * d, long len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_UShort_LP_PostLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Int_LP_PostLen ( long * d, long len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Int_LP_PostLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_UInt_LP_PostLen ( unsigned long * d, long len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_UInt_LP_PostLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Long_LP_PostLen ( __int64 * d, long len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Long_LP_PostLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_ULong_LP_PostLen ( unsigned __int64 * d, long len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_ULong_LP_PostLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Float_LP_PostLen ( float * d, long len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Float_LP_PostLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Double_LP_PostLen ( double * d, long len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Double_LP_PostLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Byte_SafeArray_OutLen ( SAFEARRAY * d, long * len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Byte_SafeArray_OutLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Short_SafeArray_OutLen ( SAFEARRAY * d, long * len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Short_SafeArray_OutLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_UShort_SafeArray_OutLen ( SAFEARRAY * d, long * len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_UShort_SafeArray_OutLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Int_SafeArray_OutLen ( SAFEARRAY * d, long * len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Int_SafeArray_OutLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_UInt_SafeArray_OutLen ( SAFEARRAY * d, long * len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_UInt_SafeArray_OutLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Long_SafeArray_OutLen ( SAFEARRAY * d, long * len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Long_SafeArray_OutLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_ULong_SafeArray_OutLen ( SAFEARRAY * d, long * len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_ULong_SafeArray_OutLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Float_SafeArray_OutLen ( SAFEARRAY * d, long * len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Float_SafeArray_OutLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArrayTesting::Mean_Double_SafeArray_OutLen ( SAFEARRAY * d, long * len ) {
    double _result = 0;
    HRESULT _hr = raw_Mean_Double_SafeArray_OutLen(d, len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IStringTesting wrapper method implementations
//

inline LPSTR IStringTesting::Add_LPStr ( LPSTR a, LPSTR b ) {
    LPSTR _result = 0;
    HRESULT _hr = raw_Add_LPStr(a, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LPWSTR IStringTesting::Add_LPWStr ( LPWSTR a, LPWSTR b ) {
    LPWSTR _result = 0;
    HRESULT _hr = raw_Add_LPWStr(a, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IStringTesting::Add_BStr ( _bstr_t a, _bstr_t b ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Add_BStr(a, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline LPSTR IStringTesting::Reverse_LPStr ( LPSTR a ) {
    LPSTR _result = 0;
    HRESULT _hr = raw_Reverse_LPStr(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LPSTR IStringTesting::Reverse_LPStr_Ref ( LPSTR * a ) {
    LPSTR _result = 0;
    HRESULT _hr = raw_Reverse_LPStr_Ref(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LPSTR IStringTesting::Reverse_LPStr_InRef ( LPSTR * a ) {
    LPSTR _result = 0;
    HRESULT _hr = raw_Reverse_LPStr_InRef(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IStringTesting::Reverse_LPStr_Out ( LPSTR a, LPSTR * b ) {
    HRESULT _hr = raw_Reverse_LPStr_Out(a, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStringTesting::Reverse_LPStr_OutAttr ( LPSTR a, LPSTR b ) {
    HRESULT _hr = raw_Reverse_LPStr_OutAttr(a, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline LPSTR IStringTesting::Reverse_SB_LPStr ( LPSTR a ) {
    LPSTR _result = 0;
    HRESULT _hr = raw_Reverse_SB_LPStr(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LPSTR IStringTesting::Reverse_SB_LPStr_Ref ( LPSTR * a ) {
    LPSTR _result = 0;
    HRESULT _hr = raw_Reverse_SB_LPStr_Ref(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LPSTR IStringTesting::Reverse_SB_LPStr_InRef ( LPSTR * a ) {
    LPSTR _result = 0;
    HRESULT _hr = raw_Reverse_SB_LPStr_InRef(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IStringTesting::Reverse_SB_LPStr_Out ( LPSTR a, LPSTR * b ) {
    HRESULT _hr = raw_Reverse_SB_LPStr_Out(a, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStringTesting::Reverse_SB_LPStr_OutAttr ( LPSTR a, LPSTR b ) {
    HRESULT _hr = raw_Reverse_SB_LPStr_OutAttr(a, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline LPWSTR IStringTesting::Reverse_LPWStr ( LPWSTR a ) {
    LPWSTR _result = 0;
    HRESULT _hr = raw_Reverse_LPWStr(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LPWSTR IStringTesting::Reverse_LPWStr_Ref ( LPWSTR * a ) {
    LPWSTR _result = 0;
    HRESULT _hr = raw_Reverse_LPWStr_Ref(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LPWSTR IStringTesting::Reverse_LPWStr_InRef ( LPWSTR * a ) {
    LPWSTR _result = 0;
    HRESULT _hr = raw_Reverse_LPWStr_InRef(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IStringTesting::Reverse_LPWStr_Out ( LPWSTR a, LPWSTR * b ) {
    HRESULT _hr = raw_Reverse_LPWStr_Out(a, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStringTesting::Reverse_LPWStr_OutAttr ( LPWSTR a, LPWSTR b ) {
    HRESULT _hr = raw_Reverse_LPWStr_OutAttr(a, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline LPWSTR IStringTesting::Reverse_SB_LPWStr ( LPWSTR a ) {
    LPWSTR _result = 0;
    HRESULT _hr = raw_Reverse_SB_LPWStr(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LPWSTR IStringTesting::Reverse_SB_LPWStr_Ref ( LPWSTR * a ) {
    LPWSTR _result = 0;
    HRESULT _hr = raw_Reverse_SB_LPWStr_Ref(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LPWSTR IStringTesting::Reverse_SB_LPWStr_InRef ( LPWSTR * a ) {
    LPWSTR _result = 0;
    HRESULT _hr = raw_Reverse_SB_LPWStr_InRef(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IStringTesting::Reverse_SB_LPWStr_Out ( LPWSTR a, LPWSTR * b ) {
    HRESULT _hr = raw_Reverse_SB_LPWStr_Out(a, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStringTesting::Reverse_SB_LPWStr_OutAttr ( LPWSTR a, LPWSTR b ) {
    HRESULT _hr = raw_Reverse_SB_LPWStr_OutAttr(a, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IStringTesting::Reverse_BStr ( _bstr_t a ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Reverse_BStr(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IStringTesting::Reverse_BStr_Ref ( BSTR * a ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Reverse_BStr_Ref(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IStringTesting::Reverse_BStr_InRef ( BSTR * a ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Reverse_BStr_InRef(a, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IStringTesting::Reverse_BStr_Out ( _bstr_t a, BSTR * b ) {
    HRESULT _hr = raw_Reverse_BStr_Out(a, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStringTesting::Reverse_BStr_OutAttr ( _bstr_t a, _bstr_t b ) {
    HRESULT _hr = raw_Reverse_BStr_OutAttr(a, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IErrorMarshalTesting wrapper method implementations
//

inline HRESULT IErrorMarshalTesting::Throw_HResult ( long hresultToReturn ) {
    HRESULT _hr = raw_Throw_HResult(hresultToReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
