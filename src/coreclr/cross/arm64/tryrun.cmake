# This file was generated by CMake because it detected TRY_RUN() commands
# in crosscompiling mode. It will be overwritten by the next CMake run.
# Copy it to a safe location, set the variables to appropriate values
# and use it then to preset the CMake cache (using -C).


# REALPATH_SUPPORTS_NONEXISTENT_FILES_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set REALPATH_SUPPORTS_NONEXISTENT_FILES_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The REALPATH_SUPPORTS_NONEXISTENT_FILES_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec3049923556-REALPATH_SUPPORTS_NONEXISTENT_FILES_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( REALPATH_SUPPORTS_NONEXISTENT_FILES_EXITCODE 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)


# SSCANF_SUPPORT_ll_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set SSCANF_SUPPORT_ll_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The SSCANF_SUPPORT_ll_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec545135579-SSCANF_SUPPORT_ll_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( SSCANF_SUPPORT_ll_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# SSCANF_CANNOT_HANDLE_MISSING_EXPONENT_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set SSCANF_CANNOT_HANDLE_MISSING_EXPONENT_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The SSCANF_CANNOT_HANDLE_MISSING_EXPONENT_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec2916927315-SSCANF_CANNOT_HANDLE_MISSING_EXPONENT_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( SSCANF_CANNOT_HANDLE_MISSING_EXPONENT_EXITCODE 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_LARGE_SNPRINTF_SUPPORT_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_LARGE_SNPRINTF_SUPPORT_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_LARGE_SNPRINTF_SUPPORT_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec3604180903-HAVE_LARGE_SNPRINTF_SUPPORT_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_LARGE_SNPRINTF_SUPPORT_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_SCHED_GET_PRIORITY_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_SCHED_GET_PRIORITY_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_SCHED_GET_PRIORITY_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec1705323844-HAVE_SCHED_GET_PRIORITY_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_SCHED_GET_PRIORITY_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_WORKING_GETTIMEOFDAY_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_WORKING_GETTIMEOFDAY_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_WORKING_GETTIMEOFDAY_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec3288570442-HAVE_WORKING_GETTIMEOFDAY_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_WORKING_GETTIMEOFDAY_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_WORKING_CLOCK_GETTIME_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_WORKING_CLOCK_GETTIME_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_WORKING_CLOCK_GETTIME_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec2946563273-HAVE_WORKING_CLOCK_GETTIME_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_WORKING_CLOCK_GETTIME_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_CLOCK_MONOTONIC_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_CLOCK_MONOTONIC_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_CLOCK_MONOTONIC_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec535773769-HAVE_CLOCK_MONOTONIC_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_CLOCK_MONOTONIC_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_MMAP_DEV_ZERO_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_MMAP_DEV_ZERO_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_MMAP_DEV_ZERO_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec3664485497-HAVE_MMAP_DEV_ZERO_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_MMAP_DEV_ZERO_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# MMAP_IGNORES_HINT_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set MMAP_IGNORES_HINT_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The MMAP_IGNORES_HINT_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec3697298670-MMAP_IGNORES_HINT_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( MMAP_IGNORES_HINT_EXITCODE 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)


# MMAP_DOESNOT_ALLOW_REMAP_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set MMAP_DOESNOT_ALLOW_REMAP_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The MMAP_DOESNOT_ALLOW_REMAP_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec1910471565-MMAP_DOESNOT_ALLOW_REMAP_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( MMAP_DOESNOT_ALLOW_REMAP_EXITCODE 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)


# ONE_SHARED_MAPPING_PER_FILEREGION_PER_PROCESS_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set ONE_SHARED_MAPPING_PER_FILEREGION_PER_PROCESS_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The ONE_SHARED_MAPPING_PER_FILEREGION_PER_PROCESS_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec1485391791-ONE_SHARED_MAPPING_PER_FILEREGION_PER_PROCESS_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( ONE_SHARED_MAPPING_PER_FILEREGION_PER_PROCESS_EXITCODE 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)


# PTHREAD_CREATE_MODIFIES_ERRNO_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set PTHREAD_CREATE_MODIFIES_ERRNO_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The PTHREAD_CREATE_MODIFIES_ERRNO_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec1946953793-PTHREAD_CREATE_MODIFIES_ERRNO_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( PTHREAD_CREATE_MODIFIES_ERRNO_EXITCODE 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)


# SEM_INIT_MODIFIES_ERRNO_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set SEM_INIT_MODIFIES_ERRNO_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The SEM_INIT_MODIFIES_ERRNO_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec127860255-SEM_INIT_MODIFIES_ERRNO_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( SEM_INIT_MODIFIES_ERRNO_EXITCODE 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_COMPATIBLE_ACOS_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_COMPATIBLE_ACOS_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_COMPATIBLE_ACOS_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec1211597152-HAVE_COMPATIBLE_ACOS_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_COMPATIBLE_ACOS_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_COMPATIBLE_ASIN_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_COMPATIBLE_ASIN_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_COMPATIBLE_ASIN_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec2689505149-HAVE_COMPATIBLE_ASIN_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_COMPATIBLE_ASIN_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_COMPATIBLE_POW_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_COMPATIBLE_POW_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_COMPATIBLE_POW_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec1907744111-HAVE_COMPATIBLE_POW_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_COMPATIBLE_POW_EXITCODE 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_VALID_NEGATIVE_INF_POW_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_VALID_NEGATIVE_INF_POW_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_VALID_NEGATIVE_INF_POW_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec3901873657-HAVE_VALID_NEGATIVE_INF_POW_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_VALID_NEGATIVE_INF_POW_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_VALID_POSITIVE_INF_POW_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_VALID_POSITIVE_INF_POW_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_VALID_POSITIVE_INF_POW_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec1206992192-HAVE_VALID_POSITIVE_INF_POW_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_VALID_POSITIVE_INF_POW_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_COMPATIBLE_ATAN2_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_COMPATIBLE_ATAN2_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_COMPATIBLE_ATAN2_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec648637395-HAVE_COMPATIBLE_ATAN2_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_COMPATIBLE_ATAN2_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_COMPATIBLE_LOG_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_COMPATIBLE_LOG_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_COMPATIBLE_LOG_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec2990610624-HAVE_COMPATIBLE_LOG_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_COMPATIBLE_LOG_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAVE_COMPATIBLE_LOG10_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_COMPATIBLE_LOG10_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_COMPATIBLE_LOG10_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec975099261-HAVE_COMPATIBLE_LOG10_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAVE_COMPATIBLE_LOG10_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# UNGETC_NOT_RETURN_EOF_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set UNGETC_NOT_RETURN_EOF_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The UNGETC_NOT_RETURN_EOF_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec441257029-UNGETC_NOT_RETURN_EOF_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( UNGETC_NOT_RETURN_EOF_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# MALLOC_ZERO_RETURNS_NULL_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set MALLOC_ZERO_RETURNS_NULL_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The MALLOC_ZERO_RETURNS_NULL_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec1157477542-MALLOC_ZERO_RETURNS_NULL_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( MALLOC_ZERO_RETURNS_NULL_EXITCODE 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)


# HAS_POSIX_SEMAPHORES_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAS_POSIX_SEMAPHORES_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAS_POSIX_SEMAPHORES_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec1492096424-HAS_POSIX_SEMAPHORES_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( HAS_POSIX_SEMAPHORES_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# GETPWUID_R_SETS_ERRNO_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set GETPWUID_R_SETS_ERRNO_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The GETPWUID_R_SETS_ERRNO_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec3233045492-GETPWUID_R_SETS_ERRNO_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( GETPWUID_R_SETS_ERRNO_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# FILE_OPS_CHECK_FERROR_OF_PREVIOUS_CALL_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set FILE_OPS_CHECK_FERROR_OF_PREVIOUS_CALL_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The FILE_OPS_CHECK_FERROR_OF_PREVIOUS_CALL_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /home/ben/git/coreclr/bin/obj/Linux.arm.Debug/CMakeFiles/cmTryCompileExec3756892084-FILE_OPS_CHECK_FERROR_OF_PREVIOUS_CALL_EXITCODE
# Run arguments : 
#    Called from: [2]	/home/ben/git/coreclr/src/pal/src/configure.cmake
#                 [1]	/home/ben/git/coreclr/src/pal/src/CMakeLists.txt

SET( FILE_OPS_CHECK_FERROR_OF_PREVIOUS_CALL_EXITCODE 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)

