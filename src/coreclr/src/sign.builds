<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="..\dir.props"/>
  <Import Project="..\dir.targets" />

  <PropertyGroup>
    <!-- The SignFiles target needs OutDir to be defined -->
    <OutDir>$(BinDir)</OutDir>
  </PropertyGroup>

  <UsingTask AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" TaskName="ReadSigningRequired" />

  <ItemGroup>
    <WindowsNativeLocation Include="$(BinDir)*.dll" />
    <WindowsNativeLocation Include="$(BinDir)*.exe" />
  </ItemGroup>

  <ItemGroup Condition="'$(BuildArch)' == 'x86'">
    <!-- Sign api-ms-win-core-xstate-l2-1-0 binary as it is only catalog signed in the current SDK. -->
    <WindowsNativeLocation Condition="'$(BuildType)'=='Release'" Include="$(BinDir)Redist\ucrt\DLLs\$(BuildArch)\api-ms-win-core-xstate-l2-1-0.dll" />
  </ItemGroup>

  <!-- sign the cross targeted files as well -->
  <ItemGroup Condition="'$(CrossTargetComponentFolder)' != ''">
    <WindowsNativeLocation Include="$(BinDir)$(CrossTargetComponentFolder)/*.dll" />
    <WindowsNativeLocation Include="$(BinDir)$(CrossTargetComponentFolder)/*.exe" />
  </ItemGroup>

  <Target Name="GenerateSignForWindowsNative">
    <!--
      Managed assemblies should already have a requires_signing file dropped so only generate
      a requires_signing file for ones that don't exist which should leave just native assembies
    -->
    <WriteSigningRequired AuthenticodeSig="$(AuthenticodeSig)"
                          MarkerFile="%(WindowsNativeLocation.Identity).requires_signing"
                          Condition="!Exists('%(WindowsNativeLocation.Identity).requires_signing')" />
  </Target>

  <!-- populates item group FilesToSign with the list of files to sign -->
  <Target Name="GetFilesToSignItems"
          DependsOnTargets="GenerateSignForWindowsNative">
    <!-- read all of the marker files and populate the FilesToSign item group -->
    <ItemGroup>
      <SignMarkerFile Include="$(OutDir)**\*.requires_signing" />
    </ItemGroup>
    <ReadSigningRequired MarkerFiles="@(SignMarkerFile)">
      <Output TaskParameter="SigningMetadata" ItemName="FilesToSign" />
    </ReadSigningRequired>

    <Message Importance="High" Text="Attempting to sign %(FilesToSign.Identity) with authenticode='%(FilesToSign.Authenticode)' and strongname='%(FilesToSign.StrongName)'" />

  </Target>

  <Target Name="Build"
          Condition="'$(SkipSigning)' != 'true'"
          DependsOnTargets="GetFilesToSignItems;SignFiles">

    <!-- now that the files have been signed delete the marker files -->
    <Delete Files="@(SignMarkerFile)" />
  </Target>

</Project>