//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//

/******************************************************************

DO NOT MODIFY. AUTOGENERATED FILE.
This file is generated using the logic from <root>/src/inc/genXplatLttng.pl

******************************************************************/


#define TRACEPOINT_DEFINE
#define TRACEPOINT_PROBE_DYNAMIC_LINKAGE
#include "lttng/tpdotnetruntimeprivate.h"
extern "C" BOOL  EventEnabledGCDecision(){ return TRUE;}
extern "C" ULONG  FireEtwGCDecision(
                  const BOOL DoCompact
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCDecision()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCDecision,
        DoCompact
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCDecision_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCDecision_V1(
                  const BOOL DoCompact,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCDecision_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCDecision_V1,
        DoCompact,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCSettings(){ return TRUE;}
extern "C" ULONG  FireEtwGCSettings(
                  const unsigned __int64 SegmentSize,
                  const unsigned __int64 LargeObjectSegmentSize,
                  const BOOL ServerGC
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCSettings()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCSettings,
        SegmentSize,
        LargeObjectSegmentSize,
        ServerGC
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCSettings_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCSettings_V1(
                  const unsigned __int64 SegmentSize,
                  const unsigned __int64 LargeObjectSegmentSize,
                  const BOOL ServerGC,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCSettings_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCSettings_V1,
        SegmentSize,
        LargeObjectSegmentSize,
        ServerGC,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCOptimized(){ return TRUE;}
extern "C" ULONG  FireEtwGCOptimized(
                  const unsigned __int64 DesiredAllocation,
                  const unsigned __int64 NewAllocation,
                  const unsigned int GenerationNumber
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCOptimized()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCOptimized,
        DesiredAllocation,
        NewAllocation,
        GenerationNumber
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCOptimized_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCOptimized_V1(
                  const unsigned __int64 DesiredAllocation,
                  const unsigned __int64 NewAllocation,
                  const unsigned int GenerationNumber,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCOptimized_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCOptimized_V1,
        DesiredAllocation,
        NewAllocation,
        GenerationNumber,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCPerHeapHistory(){ return TRUE;}
extern "C" ULONG  FireEtwGCPerHeapHistory(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCPerHeapHistory()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCPerHeapHistory
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCPerHeapHistory_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCPerHeapHistory_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCPerHeapHistory_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCPerHeapHistory_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCGlobalHeapHistory(){ return TRUE;}
extern "C" ULONG  FireEtwGCGlobalHeapHistory(
                  const unsigned __int64 FinalYoungestDesired,
                  const signed int NumHeaps,
                  const unsigned int CondemnedGeneration,
                  const unsigned int Gen0ReductionCount,
                  const unsigned int Reason,
                  const unsigned int GlobalMechanisms
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCGlobalHeapHistory()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCGlobalHeapHistory,
        FinalYoungestDesired,
        NumHeaps,
        CondemnedGeneration,
        Gen0ReductionCount,
        Reason,
        GlobalMechanisms
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCGlobalHeapHistory_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCGlobalHeapHistory_V1(
                  const unsigned __int64 FinalYoungestDesired,
                  const signed int NumHeaps,
                  const unsigned int CondemnedGeneration,
                  const unsigned int Gen0ReductionCount,
                  const unsigned int Reason,
                  const unsigned int GlobalMechanisms,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCGlobalHeapHistory_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCGlobalHeapHistory_V1,
        FinalYoungestDesired,
        NumHeaps,
        CondemnedGeneration,
        Gen0ReductionCount,
        Reason,
        GlobalMechanisms,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCJoin(){ return TRUE;}
extern "C" ULONG  FireEtwGCJoin(
                  const unsigned int Heap,
                  const unsigned int JoinTime,
                  const unsigned int JoinType
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCJoin()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCJoin,
        Heap,
        JoinTime,
        JoinType
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCJoin_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCJoin_V1(
                  const unsigned int Heap,
                  const unsigned int JoinTime,
                  const unsigned int JoinType,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCJoin_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCJoin_V1,
        Heap,
        JoinTime,
        JoinType,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrvGCMarkStackRoots(){ return TRUE;}
extern "C" ULONG  FireEtwPrvGCMarkStackRoots(
                  const unsigned int HeapNum
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrvGCMarkStackRoots()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkStackRoots,
        HeapNum
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrvGCMarkStackRoots_V1(){ return TRUE;}
extern "C" ULONG  FireEtwPrvGCMarkStackRoots_V1(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrvGCMarkStackRoots_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkStackRoots_V1,
        HeapNum,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrvGCMarkFinalizeQueueRoots(){ return TRUE;}
extern "C" ULONG  FireEtwPrvGCMarkFinalizeQueueRoots(
                  const unsigned int HeapNum
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrvGCMarkFinalizeQueueRoots()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkFinalizeQueueRoots,
        HeapNum
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrvGCMarkFinalizeQueueRoots_V1(){ return TRUE;}
extern "C" ULONG  FireEtwPrvGCMarkFinalizeQueueRoots_V1(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrvGCMarkFinalizeQueueRoots_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkFinalizeQueueRoots_V1,
        HeapNum,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrvGCMarkHandles(){ return TRUE;}
extern "C" ULONG  FireEtwPrvGCMarkHandles(
                  const unsigned int HeapNum
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrvGCMarkHandles()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkHandles,
        HeapNum
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrvGCMarkHandles_V1(){ return TRUE;}
extern "C" ULONG  FireEtwPrvGCMarkHandles_V1(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrvGCMarkHandles_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkHandles_V1,
        HeapNum,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrvGCMarkCards(){ return TRUE;}
extern "C" ULONG  FireEtwPrvGCMarkCards(
                  const unsigned int HeapNum
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrvGCMarkCards()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkCards,
        HeapNum
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrvGCMarkCards_V1(){ return TRUE;}
extern "C" ULONG  FireEtwPrvGCMarkCards_V1(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrvGCMarkCards_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkCards_V1,
        HeapNum,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGCBegin(){ return TRUE;}
extern "C" ULONG  FireEtwBGCBegin(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGCBegin()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCBegin,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGC1stNonConEnd(){ return TRUE;}
extern "C" ULONG  FireEtwBGC1stNonConEnd(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGC1stNonConEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGC1stNonConEnd,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGC1stConEnd(){ return TRUE;}
extern "C" ULONG  FireEtwBGC1stConEnd(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGC1stConEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGC1stConEnd,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGC2ndNonConBegin(){ return TRUE;}
extern "C" ULONG  FireEtwBGC2ndNonConBegin(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGC2ndNonConBegin()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGC2ndNonConBegin,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGC2ndNonConEnd(){ return TRUE;}
extern "C" ULONG  FireEtwBGC2ndNonConEnd(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGC2ndNonConEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGC2ndNonConEnd,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGC2ndConBegin(){ return TRUE;}
extern "C" ULONG  FireEtwBGC2ndConBegin(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGC2ndConBegin()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGC2ndConBegin,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGC2ndConEnd(){ return TRUE;}
extern "C" ULONG  FireEtwBGC2ndConEnd(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGC2ndConEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGC2ndConEnd,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGCPlanEnd(){ return TRUE;}
extern "C" ULONG  FireEtwBGCPlanEnd(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGCPlanEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCPlanEnd,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGCSweepEnd(){ return TRUE;}
extern "C" ULONG  FireEtwBGCSweepEnd(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGCSweepEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCSweepEnd,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGCDrainMark(){ return TRUE;}
extern "C" ULONG  FireEtwBGCDrainMark(
                  const unsigned __int64 Objects,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGCDrainMark()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCDrainMark,
        Objects,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGCRevisit(){ return TRUE;}
extern "C" ULONG  FireEtwBGCRevisit(
                  const unsigned __int64 Pages,
                  const unsigned __int64 Objects,
                  const unsigned int IsLarge,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGCRevisit()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCRevisit,
        Pages,
        Objects,
        IsLarge,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGCOverflow(){ return TRUE;}
extern "C" ULONG  FireEtwBGCOverflow(
                  const unsigned __int64 Min,
                  const unsigned __int64 Max,
                  const unsigned __int64 Objects,
                  const unsigned int IsLarge,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGCOverflow()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCOverflow,
        Min,
        Max,
        Objects,
        IsLarge,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGCAllocWaitBegin(){ return TRUE;}
extern "C" ULONG  FireEtwBGCAllocWaitBegin(
                  const unsigned int Reason,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGCAllocWaitBegin()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCAllocWaitBegin,
        Reason,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBGCAllocWaitEnd(){ return TRUE;}
extern "C" ULONG  FireEtwBGCAllocWaitEnd(
                  const unsigned int Reason,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBGCAllocWaitEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCAllocWaitEnd,
        Reason,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCFullNotify(){ return TRUE;}
extern "C" ULONG  FireEtwGCFullNotify(
                  const unsigned int GenNumber,
                  const unsigned int IsAlloc
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCFullNotify()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCFullNotify,
        GenNumber,
        IsAlloc
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCFullNotify_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCFullNotify_V1(
                  const unsigned int GenNumber,
                  const unsigned int IsAlloc,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCFullNotify_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCFullNotify_V1,
        GenNumber,
        IsAlloc,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEEStartupStart(){ return TRUE;}
extern "C" ULONG  FireEtwEEStartupStart(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEEStartupStart()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEStartupStart
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEEStartupStart_V1(){ return TRUE;}
extern "C" ULONG  FireEtwEEStartupStart_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEEStartupStart_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEStartupStart_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEEStartupEnd(){ return TRUE;}
extern "C" ULONG  FireEtwEEStartupEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEEStartupEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEStartupEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEEStartupEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwEEStartupEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEEStartupEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEStartupEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEEConfigSetup(){ return TRUE;}
extern "C" ULONG  FireEtwEEConfigSetup(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEEConfigSetup()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSetup
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEEConfigSetup_V1(){ return TRUE;}
extern "C" ULONG  FireEtwEEConfigSetup_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEEConfigSetup_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSetup_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEEConfigSetupEnd(){ return TRUE;}
extern "C" ULONG  FireEtwEEConfigSetupEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEEConfigSetupEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSetupEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEEConfigSetupEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwEEConfigSetupEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEEConfigSetupEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSetupEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledLdSysBases(){ return TRUE;}
extern "C" ULONG  FireEtwLdSysBases(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLdSysBases()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdSysBases
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledLdSysBases_V1(){ return TRUE;}
extern "C" ULONG  FireEtwLdSysBases_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLdSysBases_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdSysBases_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledLdSysBasesEnd(){ return TRUE;}
extern "C" ULONG  FireEtwLdSysBasesEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLdSysBasesEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdSysBasesEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledLdSysBasesEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwLdSysBasesEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLdSysBasesEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdSysBasesEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExecExe(){ return TRUE;}
extern "C" ULONG  FireEtwExecExe(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExecExe()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExecExe
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExecExe_V1(){ return TRUE;}
extern "C" ULONG  FireEtwExecExe_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExecExe_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExecExe_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExecExeEnd(){ return TRUE;}
extern "C" ULONG  FireEtwExecExeEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExecExeEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExecExeEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExecExeEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwExecExeEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExecExeEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExecExeEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMain(){ return TRUE;}
extern "C" ULONG  FireEtwMain(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMain()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        Main
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMain_V1(){ return TRUE;}
extern "C" ULONG  FireEtwMain_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMain_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        Main_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMainEnd(){ return TRUE;}
extern "C" ULONG  FireEtwMainEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMainEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        MainEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMainEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwMainEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMainEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        MainEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledApplyPolicyStart(){ return TRUE;}
extern "C" ULONG  FireEtwApplyPolicyStart(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledApplyPolicyStart()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ApplyPolicyStart
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledApplyPolicyStart_V1(){ return TRUE;}
extern "C" ULONG  FireEtwApplyPolicyStart_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledApplyPolicyStart_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ApplyPolicyStart_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledApplyPolicyEnd(){ return TRUE;}
extern "C" ULONG  FireEtwApplyPolicyEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledApplyPolicyEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ApplyPolicyEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledApplyPolicyEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwApplyPolicyEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledApplyPolicyEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ApplyPolicyEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledLdLibShFolder(){ return TRUE;}
extern "C" ULONG  FireEtwLdLibShFolder(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLdLibShFolder()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdLibShFolder
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledLdLibShFolder_V1(){ return TRUE;}
extern "C" ULONG  FireEtwLdLibShFolder_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLdLibShFolder_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdLibShFolder_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledLdLibShFolderEnd(){ return TRUE;}
extern "C" ULONG  FireEtwLdLibShFolderEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLdLibShFolderEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdLibShFolderEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledLdLibShFolderEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwLdLibShFolderEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLdLibShFolderEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdLibShFolderEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrestubWorker(){ return TRUE;}
extern "C" ULONG  FireEtwPrestubWorker(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrestubWorker()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrestubWorker
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrestubWorker_V1(){ return TRUE;}
extern "C" ULONG  FireEtwPrestubWorker_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrestubWorker_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrestubWorker_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrestubWorkerEnd(){ return TRUE;}
extern "C" ULONG  FireEtwPrestubWorkerEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrestubWorkerEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrestubWorkerEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrestubWorkerEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwPrestubWorkerEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrestubWorkerEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrestubWorkerEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGetInstallationStart(){ return TRUE;}
extern "C" ULONG  FireEtwGetInstallationStart(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGetInstallationStart()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GetInstallationStart
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGetInstallationStart_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGetInstallationStart_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGetInstallationStart_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GetInstallationStart_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGetInstallationEnd(){ return TRUE;}
extern "C" ULONG  FireEtwGetInstallationEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGetInstallationEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GetInstallationEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGetInstallationEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGetInstallationEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGetInstallationEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GetInstallationEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledOpenHModule(){ return TRUE;}
extern "C" ULONG  FireEtwOpenHModule(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledOpenHModule()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        OpenHModule
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledOpenHModule_V1(){ return TRUE;}
extern "C" ULONG  FireEtwOpenHModule_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledOpenHModule_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        OpenHModule_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledOpenHModuleEnd(){ return TRUE;}
extern "C" ULONG  FireEtwOpenHModuleEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledOpenHModuleEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        OpenHModuleEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledOpenHModuleEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwOpenHModuleEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledOpenHModuleEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        OpenHModuleEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExplicitBindStart(){ return TRUE;}
extern "C" ULONG  FireEtwExplicitBindStart(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExplicitBindStart()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExplicitBindStart
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExplicitBindStart_V1(){ return TRUE;}
extern "C" ULONG  FireEtwExplicitBindStart_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExplicitBindStart_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExplicitBindStart_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExplicitBindEnd(){ return TRUE;}
extern "C" ULONG  FireEtwExplicitBindEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExplicitBindEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExplicitBindEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExplicitBindEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwExplicitBindEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExplicitBindEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExplicitBindEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledParseXml(){ return TRUE;}
extern "C" ULONG  FireEtwParseXml(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledParseXml()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ParseXml
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledParseXml_V1(){ return TRUE;}
extern "C" ULONG  FireEtwParseXml_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledParseXml_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ParseXml_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledParseXmlEnd(){ return TRUE;}
extern "C" ULONG  FireEtwParseXmlEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledParseXmlEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ParseXmlEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledParseXmlEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwParseXmlEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledParseXmlEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ParseXmlEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledInitDefaultDomain(){ return TRUE;}
extern "C" ULONG  FireEtwInitDefaultDomain(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledInitDefaultDomain()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitDefaultDomain
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledInitDefaultDomain_V1(){ return TRUE;}
extern "C" ULONG  FireEtwInitDefaultDomain_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledInitDefaultDomain_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitDefaultDomain_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledInitDefaultDomainEnd(){ return TRUE;}
extern "C" ULONG  FireEtwInitDefaultDomainEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledInitDefaultDomainEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitDefaultDomainEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledInitDefaultDomainEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwInitDefaultDomainEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledInitDefaultDomainEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitDefaultDomainEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledInitSecurity(){ return TRUE;}
extern "C" ULONG  FireEtwInitSecurity(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledInitSecurity()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitSecurity
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledInitSecurity_V1(){ return TRUE;}
extern "C" ULONG  FireEtwInitSecurity_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledInitSecurity_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitSecurity_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledInitSecurityEnd(){ return TRUE;}
extern "C" ULONG  FireEtwInitSecurityEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledInitSecurityEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitSecurityEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledInitSecurityEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwInitSecurityEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledInitSecurityEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitSecurityEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledAllowBindingRedirs(){ return TRUE;}
extern "C" ULONG  FireEtwAllowBindingRedirs(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAllowBindingRedirs()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        AllowBindingRedirs
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledAllowBindingRedirs_V1(){ return TRUE;}
extern "C" ULONG  FireEtwAllowBindingRedirs_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAllowBindingRedirs_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        AllowBindingRedirs_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledAllowBindingRedirsEnd(){ return TRUE;}
extern "C" ULONG  FireEtwAllowBindingRedirsEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAllowBindingRedirsEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        AllowBindingRedirsEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledAllowBindingRedirsEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwAllowBindingRedirsEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAllowBindingRedirsEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        AllowBindingRedirsEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEEConfigSync(){ return TRUE;}
extern "C" ULONG  FireEtwEEConfigSync(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEEConfigSync()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSync
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEEConfigSync_V1(){ return TRUE;}
extern "C" ULONG  FireEtwEEConfigSync_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEEConfigSync_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSync_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEEConfigSyncEnd(){ return TRUE;}
extern "C" ULONG  FireEtwEEConfigSyncEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEEConfigSyncEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSyncEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEEConfigSyncEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwEEConfigSyncEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEEConfigSyncEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSyncEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionBinding(){ return TRUE;}
extern "C" ULONG  FireEtwFusionBinding(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionBinding()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionBinding
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionBinding_V1(){ return TRUE;}
extern "C" ULONG  FireEtwFusionBinding_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionBinding_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionBinding_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionBindingEnd(){ return TRUE;}
extern "C" ULONG  FireEtwFusionBindingEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionBindingEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionBindingEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionBindingEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwFusionBindingEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionBindingEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionBindingEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledLoaderCatchCall(){ return TRUE;}
extern "C" ULONG  FireEtwLoaderCatchCall(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLoaderCatchCall()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderCatchCall
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledLoaderCatchCall_V1(){ return TRUE;}
extern "C" ULONG  FireEtwLoaderCatchCall_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLoaderCatchCall_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderCatchCall_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledLoaderCatchCallEnd(){ return TRUE;}
extern "C" ULONG  FireEtwLoaderCatchCallEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLoaderCatchCallEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderCatchCallEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledLoaderCatchCallEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwLoaderCatchCallEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLoaderCatchCallEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderCatchCallEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionInit(){ return TRUE;}
extern "C" ULONG  FireEtwFusionInit(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionInit()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionInit
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionInit_V1(){ return TRUE;}
extern "C" ULONG  FireEtwFusionInit_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionInit_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionInit_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionInitEnd(){ return TRUE;}
extern "C" ULONG  FireEtwFusionInitEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionInitEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionInitEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionInitEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwFusionInitEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionInitEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionInitEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionAppCtx(){ return TRUE;}
extern "C" ULONG  FireEtwFusionAppCtx(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionAppCtx()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionAppCtx
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionAppCtx_V1(){ return TRUE;}
extern "C" ULONG  FireEtwFusionAppCtx_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionAppCtx_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionAppCtx_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionAppCtxEnd(){ return TRUE;}
extern "C" ULONG  FireEtwFusionAppCtxEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionAppCtxEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionAppCtxEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionAppCtxEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwFusionAppCtxEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionAppCtxEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionAppCtxEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusion2EE(){ return TRUE;}
extern "C" ULONG  FireEtwFusion2EE(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusion2EE()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        Fusion2EE
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusion2EE_V1(){ return TRUE;}
extern "C" ULONG  FireEtwFusion2EE_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusion2EE_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        Fusion2EE_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusion2EEEnd(){ return TRUE;}
extern "C" ULONG  FireEtwFusion2EEEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusion2EEEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        Fusion2EEEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusion2EEEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwFusion2EEEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusion2EEEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        Fusion2EEEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledSecurityCatchCall(){ return TRUE;}
extern "C" ULONG  FireEtwSecurityCatchCall(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledSecurityCatchCall()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        SecurityCatchCall
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledSecurityCatchCall_V1(){ return TRUE;}
extern "C" ULONG  FireEtwSecurityCatchCall_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledSecurityCatchCall_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        SecurityCatchCall_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledSecurityCatchCallEnd(){ return TRUE;}
extern "C" ULONG  FireEtwSecurityCatchCallEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledSecurityCatchCallEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        SecurityCatchCallEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledSecurityCatchCallEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwSecurityCatchCallEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledSecurityCatchCallEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        SecurityCatchCallEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledCLRStackWalkPrivate(){ return TRUE;}
extern "C" ULONG  FireEtwCLRStackWalkPrivate(
                  const unsigned short ClrInstanceID,
                  const unsigned char Reserved1,
                  const unsigned char Reserved2,
                  const unsigned int FrameCount,
                  const void** Stack
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledCLRStackWalkPrivate()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        CLRStackWalkPrivate,
        ClrInstanceID,
        Reserved1,
        Reserved2,
        FrameCount,
        (const size_t*) Stack
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledModuleRangeLoadPrivate(){ return TRUE;}
extern "C" ULONG  FireEtwModuleRangeLoadPrivate(
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 ModuleID,
                  const unsigned int RangeBegin,
                  const unsigned int RangeSize,
                  const unsigned char RangeType,
                  const unsigned char IBCType,
                  const unsigned short SectionType
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledModuleRangeLoadPrivate()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ModuleRangeLoadPrivate,
        ClrInstanceID,
        ModuleID,
        RangeBegin,
        RangeSize,
        RangeType,
        IBCType,
        SectionType
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBindingPolicyPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtwBindingPolicyPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBindingPolicyPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingPolicyPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledBindingPolicyPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtwBindingPolicyPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBindingPolicyPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingPolicyPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledBindingNgenPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtwBindingNgenPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBindingNgenPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingNgenPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledBindingNgenPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtwBindingNgenPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBindingNgenPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingNgenPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledBindingLookupAndProbingPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtwBindingLookupAndProbingPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBindingLookupAndProbingPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingLookupAndProbingPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledBindingLookupAndProbingPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtwBindingLookupAndProbingPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBindingLookupAndProbingPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingLookupAndProbingPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledLoaderPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtwLoaderPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLoaderPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledLoaderPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtwLoaderPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLoaderPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledBindingPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtwBindingPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBindingPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledBindingPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtwBindingPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBindingPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledBindingDownloadPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtwBindingDownloadPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBindingDownloadPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingDownloadPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledBindingDownloadPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtwBindingDownloadPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBindingDownloadPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingDownloadPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledLoaderAssemblyInitPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtwLoaderAssemblyInitPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLoaderAssemblyInitPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderAssemblyInitPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledLoaderAssemblyInitPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtwLoaderAssemblyInitPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLoaderAssemblyInitPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderAssemblyInitPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledLoaderMappingPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtwLoaderMappingPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLoaderMappingPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderMappingPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledLoaderMappingPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtwLoaderMappingPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLoaderMappingPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderMappingPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledLoaderDeliverEventsPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtwLoaderDeliverEventsPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLoaderDeliverEventsPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderDeliverEventsPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledLoaderDeliverEventsPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtwLoaderDeliverEventsPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledLoaderDeliverEventsPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = PAL_wcslen(AssemblyCodebase) + 1;
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderDeliverEventsPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledEvidenceGenerated(){ return TRUE;}
extern "C" ULONG  FireEtwEvidenceGenerated(
                  const unsigned int Type,
                  const unsigned int AppDomain,
                  PCWSTR ILImage,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEvidenceGenerated()){ return ERROR_SUCCESS;};
    INT ILImage_path_size = -1;
    INT ILImage_full_name_path_size = PAL_wcslen(ILImage) + 1;
    CHAR* ILImage_full_name=NULL;

    ILImage_full_name = (CHAR*)malloc(ILImage_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ILImage_full_name != NULL);
    if(ILImage_full_name == NULL){goto LExit;}

    ILImage_path_size = WideCharToMultiByte( CP_ACP, 0, ILImage, -1, ILImage_full_name, ILImage_full_name_path_size, NULL, NULL );
    _ASSERTE(ILImage_path_size == ILImage_full_name_path_size );
    if( ILImage_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        EvidenceGenerated,
        Type,
        AppDomain,
        ILImage_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ILImage_full_name != NULL) {free(ILImage_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledModuleTransparencyComputationStart(){ return TRUE;}
extern "C" ULONG  FireEtwModuleTransparencyComputationStart(
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledModuleTransparencyComputationStart()){ return ERROR_SUCCESS;};
    INT Module_path_size = -1;
    INT Module_full_name_path_size = PAL_wcslen(Module) + 1;
    CHAR* Module_full_name=NULL;

    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        ModuleTransparencyComputationStart,
        Module_full_name,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledModuleTransparencyComputationEnd(){ return TRUE;}
extern "C" ULONG  FireEtwModuleTransparencyComputationEnd(
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const BOOL IsAllCritical,
                  const BOOL IsAllTransparent,
                  const BOOL IsTreatAsSafe,
                  const BOOL IsOpportunisticallyCritical,
                  const unsigned int SecurityRuleSet,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledModuleTransparencyComputationEnd()){ return ERROR_SUCCESS;};
    INT Module_path_size = -1;
    INT Module_full_name_path_size = PAL_wcslen(Module) + 1;
    CHAR* Module_full_name=NULL;

    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        ModuleTransparencyComputationEnd,
        Module_full_name,
        AppDomainID,
        IsAllCritical,
        IsAllTransparent,
        IsTreatAsSafe,
        IsOpportunisticallyCritical,
        SecurityRuleSet,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledTypeTransparencyComputationStart(){ return TRUE;}
extern "C" ULONG  FireEtwTypeTransparencyComputationStart(
                  PCWSTR Type,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledTypeTransparencyComputationStart()){ return ERROR_SUCCESS;};
    INT Type_path_size = -1;
    INT Type_full_name_path_size = PAL_wcslen(Type) + 1;
    CHAR* Type_full_name=NULL;
    INT Module_path_size = -1;
    INT Module_full_name_path_size = PAL_wcslen(Module) + 1;
    CHAR* Module_full_name=NULL;

    Type_full_name = (CHAR*)malloc(Type_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Type_full_name != NULL);
    if(Type_full_name == NULL){goto LExit;}

    Type_path_size = WideCharToMultiByte( CP_ACP, 0, Type, -1, Type_full_name, Type_full_name_path_size, NULL, NULL );
    _ASSERTE(Type_path_size == Type_full_name_path_size );
    if( Type_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        TypeTransparencyComputationStart,
        Type_full_name,
        Module_full_name,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}
        if (Type_full_name != NULL) {free(Type_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledTypeTransparencyComputationEnd(){ return TRUE;}
extern "C" ULONG  FireEtwTypeTransparencyComputationEnd(
                  PCWSTR Type,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const BOOL IsAllCritical,
                  const BOOL IsAllTransparent,
                  const BOOL IsCritical,
                  const BOOL IsTreatAsSafe,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledTypeTransparencyComputationEnd()){ return ERROR_SUCCESS;};
    INT Type_path_size = -1;
    INT Type_full_name_path_size = PAL_wcslen(Type) + 1;
    CHAR* Type_full_name=NULL;
    INT Module_path_size = -1;
    INT Module_full_name_path_size = PAL_wcslen(Module) + 1;
    CHAR* Module_full_name=NULL;

    Type_full_name = (CHAR*)malloc(Type_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Type_full_name != NULL);
    if(Type_full_name == NULL){goto LExit;}

    Type_path_size = WideCharToMultiByte( CP_ACP, 0, Type, -1, Type_full_name, Type_full_name_path_size, NULL, NULL );
    _ASSERTE(Type_path_size == Type_full_name_path_size );
    if( Type_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        TypeTransparencyComputationEnd,
        Type_full_name,
        Module_full_name,
        AppDomainID,
        IsAllCritical,
        IsAllTransparent,
        IsCritical,
        IsTreatAsSafe,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}
        if (Type_full_name != NULL) {free(Type_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodTransparencyComputationStart(){ return TRUE;}
extern "C" ULONG  FireEtwMethodTransparencyComputationStart(
                  PCWSTR Method,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodTransparencyComputationStart()){ return ERROR_SUCCESS;};
    INT Method_path_size = -1;
    INT Method_full_name_path_size = PAL_wcslen(Method) + 1;
    CHAR* Method_full_name=NULL;
    INT Module_path_size = -1;
    INT Module_full_name_path_size = PAL_wcslen(Module) + 1;
    CHAR* Module_full_name=NULL;

    Method_full_name = (CHAR*)malloc(Method_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Method_full_name != NULL);
    if(Method_full_name == NULL){goto LExit;}

    Method_path_size = WideCharToMultiByte( CP_ACP, 0, Method, -1, Method_full_name, Method_full_name_path_size, NULL, NULL );
    _ASSERTE(Method_path_size == Method_full_name_path_size );
    if( Method_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        MethodTransparencyComputationStart,
        Method_full_name,
        Module_full_name,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}
        if (Method_full_name != NULL) {free(Method_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodTransparencyComputationEnd(){ return TRUE;}
extern "C" ULONG  FireEtwMethodTransparencyComputationEnd(
                  PCWSTR Method,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const BOOL IsCritical,
                  const BOOL IsTreatAsSafe,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodTransparencyComputationEnd()){ return ERROR_SUCCESS;};
    INT Method_path_size = -1;
    INT Method_full_name_path_size = PAL_wcslen(Method) + 1;
    CHAR* Method_full_name=NULL;
    INT Module_path_size = -1;
    INT Module_full_name_path_size = PAL_wcslen(Module) + 1;
    CHAR* Module_full_name=NULL;

    Method_full_name = (CHAR*)malloc(Method_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Method_full_name != NULL);
    if(Method_full_name == NULL){goto LExit;}

    Method_path_size = WideCharToMultiByte( CP_ACP, 0, Method, -1, Method_full_name, Method_full_name_path_size, NULL, NULL );
    _ASSERTE(Method_path_size == Method_full_name_path_size );
    if( Method_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        MethodTransparencyComputationEnd,
        Method_full_name,
        Module_full_name,
        AppDomainID,
        IsCritical,
        IsTreatAsSafe,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}
        if (Method_full_name != NULL) {free(Method_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledFieldTransparencyComputationStart(){ return TRUE;}
extern "C" ULONG  FireEtwFieldTransparencyComputationStart(
                  PCWSTR Field,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFieldTransparencyComputationStart()){ return ERROR_SUCCESS;};
    INT Field_path_size = -1;
    INT Field_full_name_path_size = PAL_wcslen(Field) + 1;
    CHAR* Field_full_name=NULL;
    INT Module_path_size = -1;
    INT Module_full_name_path_size = PAL_wcslen(Module) + 1;
    CHAR* Module_full_name=NULL;

    Field_full_name = (CHAR*)malloc(Field_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Field_full_name != NULL);
    if(Field_full_name == NULL){goto LExit;}

    Field_path_size = WideCharToMultiByte( CP_ACP, 0, Field, -1, Field_full_name, Field_full_name_path_size, NULL, NULL );
    _ASSERTE(Field_path_size == Field_full_name_path_size );
    if( Field_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        FieldTransparencyComputationStart,
        Field_full_name,
        Module_full_name,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}
        if (Field_full_name != NULL) {free(Field_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledFieldTransparencyComputationEnd(){ return TRUE;}
extern "C" ULONG  FireEtwFieldTransparencyComputationEnd(
                  PCWSTR Field,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const BOOL IsCritical,
                  const BOOL IsTreatAsSafe,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFieldTransparencyComputationEnd()){ return ERROR_SUCCESS;};
    INT Field_path_size = -1;
    INT Field_full_name_path_size = PAL_wcslen(Field) + 1;
    CHAR* Field_full_name=NULL;
    INT Module_path_size = -1;
    INT Module_full_name_path_size = PAL_wcslen(Module) + 1;
    CHAR* Module_full_name=NULL;

    Field_full_name = (CHAR*)malloc(Field_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Field_full_name != NULL);
    if(Field_full_name == NULL){goto LExit;}

    Field_path_size = WideCharToMultiByte( CP_ACP, 0, Field, -1, Field_full_name, Field_full_name_path_size, NULL, NULL );
    _ASSERTE(Field_path_size == Field_full_name_path_size );
    if( Field_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        FieldTransparencyComputationEnd,
        Field_full_name,
        Module_full_name,
        AppDomainID,
        IsCritical,
        IsTreatAsSafe,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}
        if (Field_full_name != NULL) {free(Field_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledTokenTransparencyComputationStart(){ return TRUE;}
extern "C" ULONG  FireEtwTokenTransparencyComputationStart(
                  const unsigned int Token,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledTokenTransparencyComputationStart()){ return ERROR_SUCCESS;};
    INT Module_path_size = -1;
    INT Module_full_name_path_size = PAL_wcslen(Module) + 1;
    CHAR* Module_full_name=NULL;

    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        TokenTransparencyComputationStart,
        Token,
        Module_full_name,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledTokenTransparencyComputationEnd(){ return TRUE;}
extern "C" ULONG  FireEtwTokenTransparencyComputationEnd(
                  const unsigned int Token,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const BOOL IsCritical,
                  const BOOL IsTreatAsSafe,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledTokenTransparencyComputationEnd()){ return ERROR_SUCCESS;};
    INT Module_path_size = -1;
    INT Module_full_name_path_size = PAL_wcslen(Module) + 1;
    CHAR* Module_full_name=NULL;

    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        TokenTransparencyComputationEnd,
        Token,
        Module_full_name,
        AppDomainID,
        IsCritical,
        IsTreatAsSafe,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledNgenBindEvent(){ return TRUE;}
extern "C" ULONG  FireEtwNgenBindEvent(
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 BindingID,
                  const unsigned int ReasonCode,
                  PCWSTR AssemblyName
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledNgenBindEvent()){ return ERROR_SUCCESS;};
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = PAL_wcslen(AssemblyName) + 1;
    CHAR* AssemblyName_full_name=NULL;

    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        NgenBindEvent,
        ClrInstanceID,
        BindingID,
        ReasonCode,
        AssemblyName_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledFailFast(){ return TRUE;}
extern "C" ULONG  FireEtwFailFast(
                  PCWSTR FailFastUserMessage,
                  const void* FailedEIP,
                  const unsigned int OSExitCode,
                  const unsigned int ClrExitCode,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFailFast()){ return ERROR_SUCCESS;};
    INT FailFastUserMessage_path_size = -1;
    INT FailFastUserMessage_full_name_path_size = PAL_wcslen(FailFastUserMessage) + 1;
    CHAR* FailFastUserMessage_full_name=NULL;

    FailFastUserMessage_full_name = (CHAR*)malloc(FailFastUserMessage_full_name_path_size*sizeof(CHAR));
    _ASSERTE(FailFastUserMessage_full_name != NULL);
    if(FailFastUserMessage_full_name == NULL){goto LExit;}

    FailFastUserMessage_path_size = WideCharToMultiByte( CP_ACP, 0, FailFastUserMessage, -1, FailFastUserMessage_full_name, FailFastUserMessage_full_name_path_size, NULL, NULL );
    _ASSERTE(FailFastUserMessage_path_size == FailFastUserMessage_full_name_path_size );
    if( FailFastUserMessage_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        FailFast,
        FailFastUserMessage_full_name,
        (const size_t) FailedEIP,
        OSExitCode,
        ClrExitCode,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (FailFastUserMessage_full_name != NULL) {free(FailFastUserMessage_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledPrvFinalizeObject(){ return TRUE;}
extern "C" ULONG  FireEtwPrvFinalizeObject(
                  const void* TypeID,
                  const void* ObjectID,
                  const unsigned short ClrInstanceID,
                  PCWSTR TypeName
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrvFinalizeObject()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvFinalizeObject,
        (const size_t) TypeID,
        (const size_t) ObjectID,
        ClrInstanceID,
        TypeName_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledCCWRefCountChange(){ return TRUE;}
extern "C" ULONG  FireEtwCCWRefCountChange(
                  const void* HandleID,
                  const void* ObjectID,
                  const void* COMInterfacePointer,
                  const unsigned int NewRefCount,
                  const unsigned __int64 AppDomainID,
                  LPCSTR ClassName,
                  LPCSTR NameSpace,
                  PCWSTR Operation,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledCCWRefCountChange()){ return ERROR_SUCCESS;};
    INT Operation_path_size = -1;
    INT Operation_full_name_path_size = PAL_wcslen(Operation) + 1;
    CHAR* Operation_full_name=NULL;

    Operation_full_name = (CHAR*)malloc(Operation_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Operation_full_name != NULL);
    if(Operation_full_name == NULL){goto LExit;}

    Operation_path_size = WideCharToMultiByte( CP_ACP, 0, Operation, -1, Operation_full_name, Operation_full_name_path_size, NULL, NULL );
    _ASSERTE(Operation_path_size == Operation_full_name_path_size );
    if( Operation_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        CCWRefCountChange,
        (const size_t) HandleID,
        (const size_t) ObjectID,
        (const size_t) COMInterfacePointer,
        NewRefCount,
        AppDomainID,
        ClassName,
        NameSpace,
        Operation_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Operation_full_name != NULL) {free(Operation_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledPrvSetGCHandle(){ return TRUE;}
extern "C" ULONG  FireEtwPrvSetGCHandle(
                  const void* HandleID,
                  const void* ObjectID,
                  const unsigned int Kind,
                  const unsigned int Generation,
                  const unsigned __int64 AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrvSetGCHandle()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvSetGCHandle,
        (const size_t) HandleID,
        (const size_t) ObjectID,
        Kind,
        Generation,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPrvDestroyGCHandle(){ return TRUE;}
extern "C" ULONG  FireEtwPrvDestroyGCHandle(
                  const void* HandleID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPrvDestroyGCHandle()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvDestroyGCHandle,
        (const size_t) HandleID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFusionMessageEvent(){ return TRUE;}
extern "C" ULONG  FireEtwFusionMessageEvent(
                  const unsigned short ClrInstanceID,
                  const BOOL Prepend,
                  PCWSTR Message
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionMessageEvent()){ return ERROR_SUCCESS;};
    INT Message_path_size = -1;
    INT Message_full_name_path_size = PAL_wcslen(Message) + 1;
    CHAR* Message_full_name=NULL;

    Message_full_name = (CHAR*)malloc(Message_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Message_full_name != NULL);
    if(Message_full_name == NULL){goto LExit;}

    Message_path_size = WideCharToMultiByte( CP_ACP, 0, Message, -1, Message_full_name, Message_full_name_path_size, NULL, NULL );
    _ASSERTE(Message_path_size == Message_full_name_path_size );
    if( Message_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionMessageEvent,
        ClrInstanceID,
        Prepend,
        Message_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Message_full_name != NULL) {free(Message_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledFusionErrorCodeEvent(){ return TRUE;}
extern "C" ULONG  FireEtwFusionErrorCodeEvent(
                  const unsigned short ClrInstanceID,
                  const unsigned int Category,
                  const unsigned int ErrorCode
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFusionErrorCodeEvent()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionErrorCodeEvent,
        ClrInstanceID,
        Category,
        ErrorCode
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPinPlugAtGCTime(){ return TRUE;}
extern "C" ULONG  FireEtwPinPlugAtGCTime(
                  const void* PlugStart,
                  const void* PlugEnd,
                  const void* GapBeforeSize,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPinPlugAtGCTime()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PinPlugAtGCTime,
        (const size_t) PlugStart,
        (const size_t) PlugEnd,
        (const size_t) GapBeforeSize,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledAllocRequest(){ return TRUE;}
extern "C" ULONG  FireEtwAllocRequest(
                  const void* LoaderHeapPtr,
                  const void* MemoryAddress,
                  const unsigned int RequestSize,
                  const unsigned int Unused1,
                  const unsigned __int64 Unused2,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAllocRequest()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        AllocRequest,
        (const size_t) LoaderHeapPtr,
        (const size_t) MemoryAddress,
        RequestSize,
        Unused1,
        Unused2,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMulticoreJit(){ return TRUE;}
extern "C" ULONG  FireEtwMulticoreJit(
                  const unsigned short ClrInstanceID,
                  PCWSTR String1,
                  PCWSTR String2,
                  const signed int Int1,
                  const signed int Int2,
                  const signed int Int3
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMulticoreJit()){ return ERROR_SUCCESS;};
    INT String1_path_size = -1;
    INT String1_full_name_path_size = PAL_wcslen(String1) + 1;
    CHAR* String1_full_name=NULL;
    INT String2_path_size = -1;
    INT String2_full_name_path_size = PAL_wcslen(String2) + 1;
    CHAR* String2_full_name=NULL;

    String1_full_name = (CHAR*)malloc(String1_full_name_path_size*sizeof(CHAR));
    _ASSERTE(String1_full_name != NULL);
    if(String1_full_name == NULL){goto LExit;}

    String1_path_size = WideCharToMultiByte( CP_ACP, 0, String1, -1, String1_full_name, String1_full_name_path_size, NULL, NULL );
    _ASSERTE(String1_path_size == String1_full_name_path_size );
    if( String1_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    String2_full_name = (CHAR*)malloc(String2_full_name_path_size*sizeof(CHAR));
    _ASSERTE(String2_full_name != NULL);
    if(String2_full_name == NULL){goto LExit;}

    String2_path_size = WideCharToMultiByte( CP_ACP, 0, String2, -1, String2_full_name, String2_full_name_path_size, NULL, NULL );
    _ASSERTE(String2_path_size == String2_full_name_path_size );
    if( String2_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        MulticoreJit,
        ClrInstanceID,
        String1_full_name,
        String2_full_name,
        Int1,
        Int2,
        Int3
        );

        Error = ERROR_SUCCESS;
LExit:
        if (String2_full_name != NULL) {free(String2_full_name);}
        if (String1_full_name != NULL) {free(String1_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMulticoreJitMethodCodeReturned(){ return TRUE;}
extern "C" ULONG  FireEtwMulticoreJitMethodCodeReturned(
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMulticoreJitMethodCodeReturned()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        MulticoreJitMethodCodeReturned,
        ClrInstanceID,
        ModuleID,
        MethodID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledIInspectableRuntimeClassName(){ return TRUE;}
extern "C" ULONG  FireEtwIInspectableRuntimeClassName(
                  PCWSTR TypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledIInspectableRuntimeClassName()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        IInspectableRuntimeClassName,
        TypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledWinRTUnbox(){ return TRUE;}
extern "C" ULONG  FireEtwWinRTUnbox(
                  PCWSTR TypeName,
                  PCWSTR SecondTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledWinRTUnbox()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;
    INT SecondTypeName_path_size = -1;
    INT SecondTypeName_full_name_path_size = PAL_wcslen(SecondTypeName) + 1;
    CHAR* SecondTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    SecondTypeName_full_name = (CHAR*)malloc(SecondTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(SecondTypeName_full_name != NULL);
    if(SecondTypeName_full_name == NULL){goto LExit;}

    SecondTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, SecondTypeName_full_name, SecondTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(SecondTypeName_path_size == SecondTypeName_full_name_path_size );
    if( SecondTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        WinRTUnbox,
        TypeName_full_name,
        SecondTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (SecondTypeName_full_name != NULL) {free(SecondTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledCreateRCW(){ return TRUE;}
extern "C" ULONG  FireEtwCreateRCW(
                  PCWSTR TypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledCreateRCW()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        CreateRCW,
        TypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledRCWVariance(){ return TRUE;}
extern "C" ULONG  FireEtwRCWVariance(
                  PCWSTR TypeName,
                  PCWSTR InterfaceTypeName,
                  PCWSTR VariantInterfaceTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledRCWVariance()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;
    INT InterfaceTypeName_path_size = -1;
    INT InterfaceTypeName_full_name_path_size = PAL_wcslen(InterfaceTypeName) + 1;
    CHAR* InterfaceTypeName_full_name=NULL;
    INT VariantInterfaceTypeName_path_size = -1;
    INT VariantInterfaceTypeName_full_name_path_size = PAL_wcslen(VariantInterfaceTypeName) + 1;
    CHAR* VariantInterfaceTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InterfaceTypeName_full_name = (CHAR*)malloc(InterfaceTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InterfaceTypeName_full_name != NULL);
    if(InterfaceTypeName_full_name == NULL){goto LExit;}

    InterfaceTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, InterfaceTypeName, -1, InterfaceTypeName_full_name, InterfaceTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(InterfaceTypeName_path_size == InterfaceTypeName_full_name_path_size );
    if( InterfaceTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    VariantInterfaceTypeName_full_name = (CHAR*)malloc(VariantInterfaceTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(VariantInterfaceTypeName_full_name != NULL);
    if(VariantInterfaceTypeName_full_name == NULL){goto LExit;}

    VariantInterfaceTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, VariantInterfaceTypeName, -1, VariantInterfaceTypeName_full_name, VariantInterfaceTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(VariantInterfaceTypeName_path_size == VariantInterfaceTypeName_full_name_path_size );
    if( VariantInterfaceTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        RCWVariance,
        TypeName_full_name,
        InterfaceTypeName_full_name,
        VariantInterfaceTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (VariantInterfaceTypeName_full_name != NULL) {free(VariantInterfaceTypeName_full_name);}
        if (InterfaceTypeName_full_name != NULL) {free(InterfaceTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledRCWIEnumerableCasting(){ return TRUE;}
extern "C" ULONG  FireEtwRCWIEnumerableCasting(
                  PCWSTR TypeName,
                  PCWSTR SecondTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledRCWIEnumerableCasting()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;
    INT SecondTypeName_path_size = -1;
    INT SecondTypeName_full_name_path_size = PAL_wcslen(SecondTypeName) + 1;
    CHAR* SecondTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    SecondTypeName_full_name = (CHAR*)malloc(SecondTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(SecondTypeName_full_name != NULL);
    if(SecondTypeName_full_name == NULL){goto LExit;}

    SecondTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, SecondTypeName_full_name, SecondTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(SecondTypeName_path_size == SecondTypeName_full_name_path_size );
    if( SecondTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        RCWIEnumerableCasting,
        TypeName_full_name,
        SecondTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (SecondTypeName_full_name != NULL) {free(SecondTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledCreateCCW(){ return TRUE;}
extern "C" ULONG  FireEtwCreateCCW(
                  PCWSTR TypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledCreateCCW()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        CreateCCW,
        TypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledCCWVariance(){ return TRUE;}
extern "C" ULONG  FireEtwCCWVariance(
                  PCWSTR TypeName,
                  PCWSTR InterfaceTypeName,
                  PCWSTR VariantInterfaceTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledCCWVariance()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;
    INT InterfaceTypeName_path_size = -1;
    INT InterfaceTypeName_full_name_path_size = PAL_wcslen(InterfaceTypeName) + 1;
    CHAR* InterfaceTypeName_full_name=NULL;
    INT VariantInterfaceTypeName_path_size = -1;
    INT VariantInterfaceTypeName_full_name_path_size = PAL_wcslen(VariantInterfaceTypeName) + 1;
    CHAR* VariantInterfaceTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InterfaceTypeName_full_name = (CHAR*)malloc(InterfaceTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InterfaceTypeName_full_name != NULL);
    if(InterfaceTypeName_full_name == NULL){goto LExit;}

    InterfaceTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, InterfaceTypeName, -1, InterfaceTypeName_full_name, InterfaceTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(InterfaceTypeName_path_size == InterfaceTypeName_full_name_path_size );
    if( InterfaceTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    VariantInterfaceTypeName_full_name = (CHAR*)malloc(VariantInterfaceTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(VariantInterfaceTypeName_full_name != NULL);
    if(VariantInterfaceTypeName_full_name == NULL){goto LExit;}

    VariantInterfaceTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, VariantInterfaceTypeName, -1, VariantInterfaceTypeName_full_name, VariantInterfaceTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(VariantInterfaceTypeName_path_size == VariantInterfaceTypeName_full_name_path_size );
    if( VariantInterfaceTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        CCWVariance,
        TypeName_full_name,
        InterfaceTypeName_full_name,
        VariantInterfaceTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (VariantInterfaceTypeName_full_name != NULL) {free(VariantInterfaceTypeName_full_name);}
        if (InterfaceTypeName_full_name != NULL) {free(InterfaceTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledObjectVariantMarshallingToNative(){ return TRUE;}
extern "C" ULONG  FireEtwObjectVariantMarshallingToNative(
                  PCWSTR TypeName,
                  const signed int Int1,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledObjectVariantMarshallingToNative()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        ObjectVariantMarshallingToNative,
        TypeName_full_name,
        Int1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledGetTypeFromGUID(){ return TRUE;}
extern "C" ULONG  FireEtwGetTypeFromGUID(
                  PCWSTR TypeName,
                  PCWSTR SecondTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGetTypeFromGUID()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;
    INT SecondTypeName_path_size = -1;
    INT SecondTypeName_full_name_path_size = PAL_wcslen(SecondTypeName) + 1;
    CHAR* SecondTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    SecondTypeName_full_name = (CHAR*)malloc(SecondTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(SecondTypeName_full_name != NULL);
    if(SecondTypeName_full_name == NULL){goto LExit;}

    SecondTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, SecondTypeName_full_name, SecondTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(SecondTypeName_path_size == SecondTypeName_full_name_path_size );
    if( SecondTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        GetTypeFromGUID,
        TypeName_full_name,
        SecondTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (SecondTypeName_full_name != NULL) {free(SecondTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledGetTypeFromProgID(){ return TRUE;}
extern "C" ULONG  FireEtwGetTypeFromProgID(
                  PCWSTR TypeName,
                  PCWSTR SecondTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGetTypeFromProgID()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;
    INT SecondTypeName_path_size = -1;
    INT SecondTypeName_full_name_path_size = PAL_wcslen(SecondTypeName) + 1;
    CHAR* SecondTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    SecondTypeName_full_name = (CHAR*)malloc(SecondTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(SecondTypeName_full_name != NULL);
    if(SecondTypeName_full_name == NULL){goto LExit;}

    SecondTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, SecondTypeName_full_name, SecondTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(SecondTypeName_path_size == SecondTypeName_full_name_path_size );
    if( SecondTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        GetTypeFromProgID,
        TypeName_full_name,
        SecondTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (SecondTypeName_full_name != NULL) {free(SecondTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledConvertToCallbackEtw(){ return TRUE;}
extern "C" ULONG  FireEtwConvertToCallbackEtw(
                  PCWSTR TypeName,
                  PCWSTR SecondTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledConvertToCallbackEtw()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;
    INT SecondTypeName_path_size = -1;
    INT SecondTypeName_full_name_path_size = PAL_wcslen(SecondTypeName) + 1;
    CHAR* SecondTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    SecondTypeName_full_name = (CHAR*)malloc(SecondTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(SecondTypeName_full_name != NULL);
    if(SecondTypeName_full_name == NULL){goto LExit;}

    SecondTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, SecondTypeName_full_name, SecondTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(SecondTypeName_path_size == SecondTypeName_full_name_path_size );
    if( SecondTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        ConvertToCallbackEtw,
        TypeName_full_name,
        SecondTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (SecondTypeName_full_name != NULL) {free(SecondTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledBeginCreateManagedReference(){ return TRUE;}
extern "C" ULONG  FireEtwBeginCreateManagedReference(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBeginCreateManagedReference()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BeginCreateManagedReference,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledEndCreateManagedReference(){ return TRUE;}
extern "C" ULONG  FireEtwEndCreateManagedReference(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledEndCreateManagedReference()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EndCreateManagedReference,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledObjectVariantMarshallingToManaged(){ return TRUE;}
extern "C" ULONG  FireEtwObjectVariantMarshallingToManaged(
                  PCWSTR TypeName,
                  const signed int Int1,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledObjectVariantMarshallingToManaged()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        ObjectVariantMarshallingToManaged,
        TypeName_full_name,
        Int1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
