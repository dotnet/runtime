//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//

/******************************************************************

DO NOT MODIFY. AUTOGENERATED FILE.
This file is generated using the logic from <root>/src/inc/genXplatLttng.pl

******************************************************************/


#define TRACEPOINT_DEFINE
#define TRACEPOINT_PROBE_DYNAMIC_LINKAGE
#include "lttng/tpdotnetruntimeprivate.h"
extern "C" BOOL  EventXplatEnabledGCDecision(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCDecision(
                  const BOOL DoCompact
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCDecision()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCDecision,
        DoCompact
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCDecision_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCDecision_V1(
                  const BOOL DoCompact,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCDecision_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCDecision_V1,
        DoCompact,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCSettings(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCSettings(
                  const unsigned __int64 SegmentSize,
                  const unsigned __int64 LargeObjectSegmentSize,
                  const BOOL ServerGC
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCSettings()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCSettings,
        SegmentSize,
        LargeObjectSegmentSize,
        ServerGC
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCSettings_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCSettings_V1(
                  const unsigned __int64 SegmentSize,
                  const unsigned __int64 LargeObjectSegmentSize,
                  const BOOL ServerGC,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCSettings_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCSettings_V1,
        SegmentSize,
        LargeObjectSegmentSize,
        ServerGC,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCOptimized(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCOptimized(
                  const unsigned __int64 DesiredAllocation,
                  const unsigned __int64 NewAllocation,
                  const unsigned int GenerationNumber
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCOptimized()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCOptimized,
        DesiredAllocation,
        NewAllocation,
        GenerationNumber
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCOptimized_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCOptimized_V1(
                  const unsigned __int64 DesiredAllocation,
                  const unsigned __int64 NewAllocation,
                  const unsigned int GenerationNumber,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCOptimized_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCOptimized_V1,
        DesiredAllocation,
        NewAllocation,
        GenerationNumber,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCPerHeapHistory(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCPerHeapHistory(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCPerHeapHistory()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCPerHeapHistory
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCPerHeapHistory_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCPerHeapHistory_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCPerHeapHistory_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCPerHeapHistory_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCGlobalHeapHistory(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCGlobalHeapHistory(
                  const unsigned __int64 FinalYoungestDesired,
                  const signed int NumHeaps,
                  const unsigned int CondemnedGeneration,
                  const unsigned int Gen0ReductionCount,
                  const unsigned int Reason,
                  const unsigned int GlobalMechanisms
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCGlobalHeapHistory()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCGlobalHeapHistory,
        FinalYoungestDesired,
        NumHeaps,
        CondemnedGeneration,
        Gen0ReductionCount,
        Reason,
        GlobalMechanisms
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCGlobalHeapHistory_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCGlobalHeapHistory_V1(
                  const unsigned __int64 FinalYoungestDesired,
                  const signed int NumHeaps,
                  const unsigned int CondemnedGeneration,
                  const unsigned int Gen0ReductionCount,
                  const unsigned int Reason,
                  const unsigned int GlobalMechanisms,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCGlobalHeapHistory_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCGlobalHeapHistory_V1,
        FinalYoungestDesired,
        NumHeaps,
        CondemnedGeneration,
        Gen0ReductionCount,
        Reason,
        GlobalMechanisms,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCJoin(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCJoin(
                  const unsigned int Heap,
                  const unsigned int JoinTime,
                  const unsigned int JoinType
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCJoin()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCJoin,
        Heap,
        JoinTime,
        JoinType
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCJoin_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCJoin_V1(
                  const unsigned int Heap,
                  const unsigned int JoinTime,
                  const unsigned int JoinType,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCJoin_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCJoin_V1,
        Heap,
        JoinTime,
        JoinType,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrvGCMarkStackRoots(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrvGCMarkStackRoots(
                  const unsigned int HeapNum
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrvGCMarkStackRoots()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkStackRoots,
        HeapNum
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrvGCMarkStackRoots_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrvGCMarkStackRoots_V1(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrvGCMarkStackRoots_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkStackRoots_V1,
        HeapNum,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrvGCMarkFinalizeQueueRoots(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrvGCMarkFinalizeQueueRoots(
                  const unsigned int HeapNum
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrvGCMarkFinalizeQueueRoots()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkFinalizeQueueRoots,
        HeapNum
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrvGCMarkFinalizeQueueRoots_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrvGCMarkFinalizeQueueRoots_V1(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrvGCMarkFinalizeQueueRoots_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkFinalizeQueueRoots_V1,
        HeapNum,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrvGCMarkHandles(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrvGCMarkHandles(
                  const unsigned int HeapNum
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrvGCMarkHandles()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkHandles,
        HeapNum
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrvGCMarkHandles_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrvGCMarkHandles_V1(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrvGCMarkHandles_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkHandles_V1,
        HeapNum,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrvGCMarkCards(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrvGCMarkCards(
                  const unsigned int HeapNum
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrvGCMarkCards()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkCards,
        HeapNum
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrvGCMarkCards_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrvGCMarkCards_V1(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrvGCMarkCards_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvGCMarkCards_V1,
        HeapNum,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGCBegin(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGCBegin(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGCBegin()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCBegin,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGC1stNonConEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGC1stNonConEnd(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGC1stNonConEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGC1stNonConEnd,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGC1stConEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGC1stConEnd(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGC1stConEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGC1stConEnd,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGC2ndNonConBegin(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGC2ndNonConBegin(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGC2ndNonConBegin()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGC2ndNonConBegin,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGC2ndNonConEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGC2ndNonConEnd(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGC2ndNonConEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGC2ndNonConEnd,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGC2ndConBegin(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGC2ndConBegin(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGC2ndConBegin()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGC2ndConBegin,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGC2ndConEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGC2ndConEnd(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGC2ndConEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGC2ndConEnd,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGCPlanEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGCPlanEnd(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGCPlanEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCPlanEnd,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGCSweepEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGCSweepEnd(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGCSweepEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCSweepEnd,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGCDrainMark(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGCDrainMark(
                  const unsigned __int64 Objects,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGCDrainMark()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCDrainMark,
        Objects,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGCRevisit(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGCRevisit(
                  const unsigned __int64 Pages,
                  const unsigned __int64 Objects,
                  const unsigned int IsLarge,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGCRevisit()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCRevisit,
        Pages,
        Objects,
        IsLarge,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGCOverflow(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGCOverflow(
                  const unsigned __int64 Min,
                  const unsigned __int64 Max,
                  const unsigned __int64 Objects,
                  const unsigned int IsLarge,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGCOverflow()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCOverflow,
        Min,
        Max,
        Objects,
        IsLarge,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGCAllocWaitBegin(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGCAllocWaitBegin(
                  const unsigned int Reason,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGCAllocWaitBegin()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCAllocWaitBegin,
        Reason,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBGCAllocWaitEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatBGCAllocWaitEnd(
                  const unsigned int Reason,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBGCAllocWaitEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BGCAllocWaitEnd,
        Reason,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCFullNotify(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCFullNotify(
                  const unsigned int GenNumber,
                  const unsigned int IsAlloc
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCFullNotify()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCFullNotify,
        GenNumber,
        IsAlloc
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGCFullNotify_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatGCFullNotify_V1(
                  const unsigned int GenNumber,
                  const unsigned int IsAlloc,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGCFullNotify_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GCFullNotify_V1,
        GenNumber,
        IsAlloc,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEEStartupStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatEEStartupStart(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEEStartupStart()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEStartupStart
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEEStartupStart_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatEEStartupStart_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEEStartupStart_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEStartupStart_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEEStartupEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatEEStartupEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEEStartupEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEStartupEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEEStartupEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatEEStartupEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEEStartupEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEStartupEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEEConfigSetup(){ return TRUE;}
extern "C" ULONG  FireEtXplatEEConfigSetup(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEEConfigSetup()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSetup
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEEConfigSetup_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatEEConfigSetup_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEEConfigSetup_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSetup_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEEConfigSetupEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatEEConfigSetupEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEEConfigSetupEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSetupEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEEConfigSetupEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatEEConfigSetupEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEEConfigSetupEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSetupEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledLdSysBases(){ return TRUE;}
extern "C" ULONG  FireEtXplatLdSysBases(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLdSysBases()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdSysBases
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledLdSysBases_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatLdSysBases_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLdSysBases_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdSysBases_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledLdSysBasesEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatLdSysBasesEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLdSysBasesEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdSysBasesEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledLdSysBasesEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatLdSysBasesEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLdSysBasesEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdSysBasesEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledExecExe(){ return TRUE;}
extern "C" ULONG  FireEtXplatExecExe(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledExecExe()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExecExe
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledExecExe_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatExecExe_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledExecExe_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExecExe_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledExecExeEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatExecExeEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledExecExeEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExecExeEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledExecExeEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatExecExeEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledExecExeEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExecExeEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledMain(){ return TRUE;}
extern "C" ULONG  FireEtXplatMain(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledMain()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        Main
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledMain_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatMain_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledMain_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        Main_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledMainEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatMainEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledMainEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        MainEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledMainEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatMainEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledMainEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        MainEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledApplyPolicyStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatApplyPolicyStart(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledApplyPolicyStart()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ApplyPolicyStart
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledApplyPolicyStart_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatApplyPolicyStart_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledApplyPolicyStart_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ApplyPolicyStart_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledApplyPolicyEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatApplyPolicyEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledApplyPolicyEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ApplyPolicyEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledApplyPolicyEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatApplyPolicyEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledApplyPolicyEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ApplyPolicyEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledLdLibShFolder(){ return TRUE;}
extern "C" ULONG  FireEtXplatLdLibShFolder(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLdLibShFolder()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdLibShFolder
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledLdLibShFolder_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatLdLibShFolder_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLdLibShFolder_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdLibShFolder_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledLdLibShFolderEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatLdLibShFolderEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLdLibShFolderEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdLibShFolderEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledLdLibShFolderEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatLdLibShFolderEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLdLibShFolderEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LdLibShFolderEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrestubWorker(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrestubWorker(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrestubWorker()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrestubWorker
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrestubWorker_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrestubWorker_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrestubWorker_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrestubWorker_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrestubWorkerEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrestubWorkerEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrestubWorkerEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrestubWorkerEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrestubWorkerEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrestubWorkerEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrestubWorkerEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrestubWorkerEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGetInstallationStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatGetInstallationStart(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGetInstallationStart()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GetInstallationStart
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGetInstallationStart_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatGetInstallationStart_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGetInstallationStart_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GetInstallationStart_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGetInstallationEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatGetInstallationEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGetInstallationEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GetInstallationEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledGetInstallationEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatGetInstallationEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGetInstallationEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        GetInstallationEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledOpenHModule(){ return TRUE;}
extern "C" ULONG  FireEtXplatOpenHModule(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledOpenHModule()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        OpenHModule
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledOpenHModule_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatOpenHModule_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledOpenHModule_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        OpenHModule_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledOpenHModuleEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatOpenHModuleEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledOpenHModuleEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        OpenHModuleEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledOpenHModuleEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatOpenHModuleEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledOpenHModuleEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        OpenHModuleEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledExplicitBindStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatExplicitBindStart(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledExplicitBindStart()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExplicitBindStart
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledExplicitBindStart_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatExplicitBindStart_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledExplicitBindStart_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExplicitBindStart_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledExplicitBindEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatExplicitBindEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledExplicitBindEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExplicitBindEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledExplicitBindEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatExplicitBindEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledExplicitBindEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ExplicitBindEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledParseXml(){ return TRUE;}
extern "C" ULONG  FireEtXplatParseXml(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledParseXml()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ParseXml
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledParseXml_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatParseXml_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledParseXml_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ParseXml_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledParseXmlEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatParseXmlEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledParseXmlEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ParseXmlEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledParseXmlEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatParseXmlEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledParseXmlEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ParseXmlEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledInitDefaultDomain(){ return TRUE;}
extern "C" ULONG  FireEtXplatInitDefaultDomain(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledInitDefaultDomain()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitDefaultDomain
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledInitDefaultDomain_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatInitDefaultDomain_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledInitDefaultDomain_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitDefaultDomain_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledInitDefaultDomainEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatInitDefaultDomainEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledInitDefaultDomainEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitDefaultDomainEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledInitDefaultDomainEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatInitDefaultDomainEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledInitDefaultDomainEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitDefaultDomainEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledInitSecurity(){ return TRUE;}
extern "C" ULONG  FireEtXplatInitSecurity(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledInitSecurity()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitSecurity
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledInitSecurity_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatInitSecurity_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledInitSecurity_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitSecurity_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledInitSecurityEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatInitSecurityEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledInitSecurityEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitSecurityEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledInitSecurityEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatInitSecurityEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledInitSecurityEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        InitSecurityEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledAllowBindingRedirs(){ return TRUE;}
extern "C" ULONG  FireEtXplatAllowBindingRedirs(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledAllowBindingRedirs()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        AllowBindingRedirs
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledAllowBindingRedirs_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatAllowBindingRedirs_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledAllowBindingRedirs_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        AllowBindingRedirs_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledAllowBindingRedirsEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatAllowBindingRedirsEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledAllowBindingRedirsEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        AllowBindingRedirsEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledAllowBindingRedirsEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatAllowBindingRedirsEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledAllowBindingRedirsEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        AllowBindingRedirsEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEEConfigSync(){ return TRUE;}
extern "C" ULONG  FireEtXplatEEConfigSync(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEEConfigSync()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSync
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEEConfigSync_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatEEConfigSync_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEEConfigSync_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSync_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEEConfigSyncEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatEEConfigSyncEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEEConfigSyncEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSyncEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEEConfigSyncEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatEEConfigSyncEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEEConfigSyncEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EEConfigSyncEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionBinding(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionBinding(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionBinding()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionBinding
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionBinding_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionBinding_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionBinding_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionBinding_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionBindingEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionBindingEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionBindingEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionBindingEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionBindingEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionBindingEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionBindingEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionBindingEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledLoaderCatchCall(){ return TRUE;}
extern "C" ULONG  FireEtXplatLoaderCatchCall(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLoaderCatchCall()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderCatchCall
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledLoaderCatchCall_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatLoaderCatchCall_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLoaderCatchCall_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderCatchCall_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledLoaderCatchCallEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatLoaderCatchCallEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLoaderCatchCallEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderCatchCallEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledLoaderCatchCallEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatLoaderCatchCallEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLoaderCatchCallEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderCatchCallEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionInit(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionInit(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionInit()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionInit
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionInit_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionInit_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionInit_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionInit_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionInitEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionInitEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionInitEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionInitEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionInitEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionInitEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionInitEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionInitEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionAppCtx(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionAppCtx(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionAppCtx()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionAppCtx
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionAppCtx_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionAppCtx_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionAppCtx_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionAppCtx_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionAppCtxEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionAppCtxEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionAppCtxEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionAppCtxEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionAppCtxEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionAppCtxEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionAppCtxEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionAppCtxEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusion2EE(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusion2EE(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusion2EE()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        Fusion2EE
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusion2EE_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusion2EE_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusion2EE_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        Fusion2EE_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusion2EEEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusion2EEEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusion2EEEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        Fusion2EEEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusion2EEEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusion2EEEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusion2EEEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        Fusion2EEEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledSecurityCatchCall(){ return TRUE;}
extern "C" ULONG  FireEtXplatSecurityCatchCall(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledSecurityCatchCall()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        SecurityCatchCall
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledSecurityCatchCall_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatSecurityCatchCall_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledSecurityCatchCall_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        SecurityCatchCall_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledSecurityCatchCallEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatSecurityCatchCallEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledSecurityCatchCallEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        SecurityCatchCallEnd
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledSecurityCatchCallEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtXplatSecurityCatchCallEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledSecurityCatchCallEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        SecurityCatchCallEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledCLRStackWalkPrivate(){ return TRUE;}
extern "C" ULONG  FireEtXplatCLRStackWalkPrivate(
                  const unsigned short ClrInstanceID,
                  const unsigned char Reserved1,
                  const unsigned char Reserved2,
                  const unsigned int FrameCount,
                  const void** Stack
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledCLRStackWalkPrivate()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        CLRStackWalkPrivate,
        ClrInstanceID,
        Reserved1,
        Reserved2,
        FrameCount,
        (const size_t*) Stack
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledModuleRangeLoadPrivate(){ return TRUE;}
extern "C" ULONG  FireEtXplatModuleRangeLoadPrivate(
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 ModuleID,
                  const unsigned int RangeBegin,
                  const unsigned int RangeSize,
                  const unsigned char RangeType,
                  const unsigned char IBCType,
                  const unsigned short SectionType
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledModuleRangeLoadPrivate()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        ModuleRangeLoadPrivate,
        ClrInstanceID,
        ModuleID,
        RangeBegin,
        RangeSize,
        RangeType,
        IBCType,
        SectionType
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledBindingPolicyPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatBindingPolicyPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBindingPolicyPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingPolicyPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledBindingPolicyPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatBindingPolicyPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBindingPolicyPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingPolicyPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledBindingNgenPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatBindingNgenPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBindingNgenPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingNgenPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledBindingNgenPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatBindingNgenPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBindingNgenPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingNgenPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledBindingLookupAndProbingPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatBindingLookupAndProbingPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBindingLookupAndProbingPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingLookupAndProbingPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledBindingLookupAndProbingPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatBindingLookupAndProbingPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBindingLookupAndProbingPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingLookupAndProbingPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledLoaderPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatLoaderPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLoaderPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledLoaderPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatLoaderPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLoaderPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledBindingPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatBindingPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBindingPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledBindingPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatBindingPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBindingPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledBindingDownloadPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatBindingDownloadPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBindingDownloadPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingDownloadPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledBindingDownloadPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatBindingDownloadPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBindingDownloadPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        BindingDownloadPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledLoaderAssemblyInitPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatLoaderAssemblyInitPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLoaderAssemblyInitPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderAssemblyInitPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledLoaderAssemblyInitPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatLoaderAssemblyInitPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLoaderAssemblyInitPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderAssemblyInitPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledLoaderMappingPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatLoaderMappingPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLoaderMappingPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderMappingPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledLoaderMappingPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatLoaderMappingPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLoaderMappingPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderMappingPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledLoaderDeliverEventsPhaseStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatLoaderDeliverEventsPhaseStart(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLoaderDeliverEventsPhaseStart()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderDeliverEventsPhaseStart,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledLoaderDeliverEventsPhaseEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatLoaderDeliverEventsPhaseEnd(
                  const unsigned int AppDomainID,
                  const unsigned int LoadContextID,
                  const unsigned int FromLoaderCache,
                  const unsigned int DynamicLoad,
                  PCWSTR AssemblyCodebase,
                  PCWSTR AssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledLoaderDeliverEventsPhaseEnd()){ return ERROR_SUCCESS;};
    INT AssemblyCodebase_path_size = -1;
    INT AssemblyCodebase_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyCodebase_full_name=NULL;
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyCodebase_full_name = (CHAR*)malloc(AssemblyCodebase_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyCodebase_full_name != NULL);
    if(AssemblyCodebase_full_name == NULL){goto LExit;}

    AssemblyCodebase_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyCodebase, -1, AssemblyCodebase_full_name, AssemblyCodebase_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyCodebase_path_size == AssemblyCodebase_full_name_path_size );
    if( AssemblyCodebase_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        LoaderDeliverEventsPhaseEnd,
        AppDomainID,
        LoadContextID,
        FromLoaderCache,
        DynamicLoad,
        AssemblyCodebase_full_name,
        AssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}
        if (AssemblyCodebase_full_name != NULL) {free(AssemblyCodebase_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledEvidenceGenerated(){ return TRUE;}
extern "C" ULONG  FireEtXplatEvidenceGenerated(
                  const unsigned int Type,
                  const unsigned int AppDomain,
                  PCWSTR ILImage,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEvidenceGenerated()){ return ERROR_SUCCESS;};
    INT ILImage_path_size = -1;
    INT ILImage_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, ILImage, -1, NULL, 0, NULL, NULL );
    CHAR* ILImage_full_name=NULL;

    ILImage_full_name = (CHAR*)malloc(ILImage_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ILImage_full_name != NULL);
    if(ILImage_full_name == NULL){goto LExit;}

    ILImage_path_size = WideCharToMultiByte( CP_ACP, 0, ILImage, -1, ILImage_full_name, ILImage_full_name_path_size, NULL, NULL );
    _ASSERTE(ILImage_path_size == ILImage_full_name_path_size );
    if( ILImage_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        EvidenceGenerated,
        Type,
        AppDomain,
        ILImage_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ILImage_full_name != NULL) {free(ILImage_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledModuleTransparencyComputationStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatModuleTransparencyComputationStart(
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledModuleTransparencyComputationStart()){ return ERROR_SUCCESS;};
    INT Module_path_size = -1;
    INT Module_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, NULL, 0, NULL, NULL );
    CHAR* Module_full_name=NULL;

    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        ModuleTransparencyComputationStart,
        Module_full_name,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledModuleTransparencyComputationEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatModuleTransparencyComputationEnd(
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const BOOL IsAllCritical,
                  const BOOL IsAllTransparent,
                  const BOOL IsTreatAsSafe,
                  const BOOL IsOpportunisticallyCritical,
                  const unsigned int SecurityRuleSet,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledModuleTransparencyComputationEnd()){ return ERROR_SUCCESS;};
    INT Module_path_size = -1;
    INT Module_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, NULL, 0, NULL, NULL );
    CHAR* Module_full_name=NULL;

    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        ModuleTransparencyComputationEnd,
        Module_full_name,
        AppDomainID,
        IsAllCritical,
        IsAllTransparent,
        IsTreatAsSafe,
        IsOpportunisticallyCritical,
        SecurityRuleSet,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledTypeTransparencyComputationStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatTypeTransparencyComputationStart(
                  PCWSTR Type,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledTypeTransparencyComputationStart()){ return ERROR_SUCCESS;};
    INT Type_path_size = -1;
    INT Type_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Type, -1, NULL, 0, NULL, NULL );
    CHAR* Type_full_name=NULL;
    INT Module_path_size = -1;
    INT Module_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, NULL, 0, NULL, NULL );
    CHAR* Module_full_name=NULL;

    Type_full_name = (CHAR*)malloc(Type_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Type_full_name != NULL);
    if(Type_full_name == NULL){goto LExit;}

    Type_path_size = WideCharToMultiByte( CP_ACP, 0, Type, -1, Type_full_name, Type_full_name_path_size, NULL, NULL );
    _ASSERTE(Type_path_size == Type_full_name_path_size );
    if( Type_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        TypeTransparencyComputationStart,
        Type_full_name,
        Module_full_name,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}
        if (Type_full_name != NULL) {free(Type_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledTypeTransparencyComputationEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatTypeTransparencyComputationEnd(
                  PCWSTR Type,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const BOOL IsAllCritical,
                  const BOOL IsAllTransparent,
                  const BOOL IsCritical,
                  const BOOL IsTreatAsSafe,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledTypeTransparencyComputationEnd()){ return ERROR_SUCCESS;};
    INT Type_path_size = -1;
    INT Type_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Type, -1, NULL, 0, NULL, NULL );
    CHAR* Type_full_name=NULL;
    INT Module_path_size = -1;
    INT Module_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, NULL, 0, NULL, NULL );
    CHAR* Module_full_name=NULL;

    Type_full_name = (CHAR*)malloc(Type_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Type_full_name != NULL);
    if(Type_full_name == NULL){goto LExit;}

    Type_path_size = WideCharToMultiByte( CP_ACP, 0, Type, -1, Type_full_name, Type_full_name_path_size, NULL, NULL );
    _ASSERTE(Type_path_size == Type_full_name_path_size );
    if( Type_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        TypeTransparencyComputationEnd,
        Type_full_name,
        Module_full_name,
        AppDomainID,
        IsAllCritical,
        IsAllTransparent,
        IsCritical,
        IsTreatAsSafe,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}
        if (Type_full_name != NULL) {free(Type_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledMethodTransparencyComputationStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatMethodTransparencyComputationStart(
                  PCWSTR Method,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledMethodTransparencyComputationStart()){ return ERROR_SUCCESS;};
    INT Method_path_size = -1;
    INT Method_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Method, -1, NULL, 0, NULL, NULL );
    CHAR* Method_full_name=NULL;
    INT Module_path_size = -1;
    INT Module_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, NULL, 0, NULL, NULL );
    CHAR* Module_full_name=NULL;

    Method_full_name = (CHAR*)malloc(Method_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Method_full_name != NULL);
    if(Method_full_name == NULL){goto LExit;}

    Method_path_size = WideCharToMultiByte( CP_ACP, 0, Method, -1, Method_full_name, Method_full_name_path_size, NULL, NULL );
    _ASSERTE(Method_path_size == Method_full_name_path_size );
    if( Method_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        MethodTransparencyComputationStart,
        Method_full_name,
        Module_full_name,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}
        if (Method_full_name != NULL) {free(Method_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledMethodTransparencyComputationEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatMethodTransparencyComputationEnd(
                  PCWSTR Method,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const BOOL IsCritical,
                  const BOOL IsTreatAsSafe,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledMethodTransparencyComputationEnd()){ return ERROR_SUCCESS;};
    INT Method_path_size = -1;
    INT Method_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Method, -1, NULL, 0, NULL, NULL );
    CHAR* Method_full_name=NULL;
    INT Module_path_size = -1;
    INT Module_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, NULL, 0, NULL, NULL );
    CHAR* Module_full_name=NULL;

    Method_full_name = (CHAR*)malloc(Method_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Method_full_name != NULL);
    if(Method_full_name == NULL){goto LExit;}

    Method_path_size = WideCharToMultiByte( CP_ACP, 0, Method, -1, Method_full_name, Method_full_name_path_size, NULL, NULL );
    _ASSERTE(Method_path_size == Method_full_name_path_size );
    if( Method_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        MethodTransparencyComputationEnd,
        Method_full_name,
        Module_full_name,
        AppDomainID,
        IsCritical,
        IsTreatAsSafe,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}
        if (Method_full_name != NULL) {free(Method_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledFieldTransparencyComputationStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatFieldTransparencyComputationStart(
                  PCWSTR Field,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFieldTransparencyComputationStart()){ return ERROR_SUCCESS;};
    INT Field_path_size = -1;
    INT Field_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Field, -1, NULL, 0, NULL, NULL );
    CHAR* Field_full_name=NULL;
    INT Module_path_size = -1;
    INT Module_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, NULL, 0, NULL, NULL );
    CHAR* Module_full_name=NULL;

    Field_full_name = (CHAR*)malloc(Field_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Field_full_name != NULL);
    if(Field_full_name == NULL){goto LExit;}

    Field_path_size = WideCharToMultiByte( CP_ACP, 0, Field, -1, Field_full_name, Field_full_name_path_size, NULL, NULL );
    _ASSERTE(Field_path_size == Field_full_name_path_size );
    if( Field_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        FieldTransparencyComputationStart,
        Field_full_name,
        Module_full_name,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}
        if (Field_full_name != NULL) {free(Field_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledFieldTransparencyComputationEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatFieldTransparencyComputationEnd(
                  PCWSTR Field,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const BOOL IsCritical,
                  const BOOL IsTreatAsSafe,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFieldTransparencyComputationEnd()){ return ERROR_SUCCESS;};
    INT Field_path_size = -1;
    INT Field_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Field, -1, NULL, 0, NULL, NULL );
    CHAR* Field_full_name=NULL;
    INT Module_path_size = -1;
    INT Module_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, NULL, 0, NULL, NULL );
    CHAR* Module_full_name=NULL;

    Field_full_name = (CHAR*)malloc(Field_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Field_full_name != NULL);
    if(Field_full_name == NULL){goto LExit;}

    Field_path_size = WideCharToMultiByte( CP_ACP, 0, Field, -1, Field_full_name, Field_full_name_path_size, NULL, NULL );
    _ASSERTE(Field_path_size == Field_full_name_path_size );
    if( Field_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        FieldTransparencyComputationEnd,
        Field_full_name,
        Module_full_name,
        AppDomainID,
        IsCritical,
        IsTreatAsSafe,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}
        if (Field_full_name != NULL) {free(Field_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledTokenTransparencyComputationStart(){ return TRUE;}
extern "C" ULONG  FireEtXplatTokenTransparencyComputationStart(
                  const unsigned int Token,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledTokenTransparencyComputationStart()){ return ERROR_SUCCESS;};
    INT Module_path_size = -1;
    INT Module_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, NULL, 0, NULL, NULL );
    CHAR* Module_full_name=NULL;

    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        TokenTransparencyComputationStart,
        Token,
        Module_full_name,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledTokenTransparencyComputationEnd(){ return TRUE;}
extern "C" ULONG  FireEtXplatTokenTransparencyComputationEnd(
                  const unsigned int Token,
                  PCWSTR Module,
                  const unsigned int AppDomainID,
                  const BOOL IsCritical,
                  const BOOL IsTreatAsSafe,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledTokenTransparencyComputationEnd()){ return ERROR_SUCCESS;};
    INT Module_path_size = -1;
    INT Module_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, NULL, 0, NULL, NULL );
    CHAR* Module_full_name=NULL;

    Module_full_name = (CHAR*)malloc(Module_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Module_full_name != NULL);
    if(Module_full_name == NULL){goto LExit;}

    Module_path_size = WideCharToMultiByte( CP_ACP, 0, Module, -1, Module_full_name, Module_full_name_path_size, NULL, NULL );
    _ASSERTE(Module_path_size == Module_full_name_path_size );
    if( Module_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        TokenTransparencyComputationEnd,
        Token,
        Module_full_name,
        AppDomainID,
        IsCritical,
        IsTreatAsSafe,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Module_full_name != NULL) {free(Module_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledNgenBindEvent(){ return TRUE;}
extern "C" ULONG  FireEtXplatNgenBindEvent(
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 BindingID,
                  const unsigned int ReasonCode,
                  PCWSTR AssemblyName
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledNgenBindEvent()){ return ERROR_SUCCESS;};
    INT AssemblyName_path_size = -1;
    INT AssemblyName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, NULL, 0, NULL, NULL );
    CHAR* AssemblyName_full_name=NULL;

    AssemblyName_full_name = (CHAR*)malloc(AssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AssemblyName_full_name != NULL);
    if(AssemblyName_full_name == NULL){goto LExit;}

    AssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, AssemblyName, -1, AssemblyName_full_name, AssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(AssemblyName_path_size == AssemblyName_full_name_path_size );
    if( AssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        NgenBindEvent,
        ClrInstanceID,
        BindingID,
        ReasonCode,
        AssemblyName_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AssemblyName_full_name != NULL) {free(AssemblyName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledFailFast(){ return TRUE;}
extern "C" ULONG  FireEtXplatFailFast(
                  PCWSTR FailFastUserMessage,
                  const void* FailedEIP,
                  const unsigned int OSExitCode,
                  const unsigned int ClrExitCode,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFailFast()){ return ERROR_SUCCESS;};
    INT FailFastUserMessage_path_size = -1;
    INT FailFastUserMessage_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, FailFastUserMessage, -1, NULL, 0, NULL, NULL );
    CHAR* FailFastUserMessage_full_name=NULL;

    FailFastUserMessage_full_name = (CHAR*)malloc(FailFastUserMessage_full_name_path_size*sizeof(CHAR));
    _ASSERTE(FailFastUserMessage_full_name != NULL);
    if(FailFastUserMessage_full_name == NULL){goto LExit;}

    FailFastUserMessage_path_size = WideCharToMultiByte( CP_ACP, 0, FailFastUserMessage, -1, FailFastUserMessage_full_name, FailFastUserMessage_full_name_path_size, NULL, NULL );
    _ASSERTE(FailFastUserMessage_path_size == FailFastUserMessage_full_name_path_size );
    if( FailFastUserMessage_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        FailFast,
        FailFastUserMessage_full_name,
        (const size_t) FailedEIP,
        OSExitCode,
        ClrExitCode,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (FailFastUserMessage_full_name != NULL) {free(FailFastUserMessage_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledPrvFinalizeObject(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrvFinalizeObject(
                  const void* TypeID,
                  const void* ObjectID,
                  const unsigned short ClrInstanceID,
                  PCWSTR TypeName
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrvFinalizeObject()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvFinalizeObject,
        (const size_t) TypeID,
        (const size_t) ObjectID,
        ClrInstanceID,
        TypeName_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledCCWRefCountChange(){ return TRUE;}
extern "C" ULONG  FireEtXplatCCWRefCountChange(
                  const void* HandleID,
                  const void* ObjectID,
                  const void* COMInterfacePointer,
                  const unsigned int NewRefCount,
                  const unsigned __int64 AppDomainID,
                  LPCSTR ClassName,
                  LPCSTR NameSpace,
                  PCWSTR Operation,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledCCWRefCountChange()){ return ERROR_SUCCESS;};
    INT Operation_path_size = -1;
    INT Operation_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Operation, -1, NULL, 0, NULL, NULL );
    CHAR* Operation_full_name=NULL;

    Operation_full_name = (CHAR*)malloc(Operation_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Operation_full_name != NULL);
    if(Operation_full_name == NULL){goto LExit;}

    Operation_path_size = WideCharToMultiByte( CP_ACP, 0, Operation, -1, Operation_full_name, Operation_full_name_path_size, NULL, NULL );
    _ASSERTE(Operation_path_size == Operation_full_name_path_size );
    if( Operation_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        CCWRefCountChange,
        (const size_t) HandleID,
        (const size_t) ObjectID,
        (const size_t) COMInterfacePointer,
        NewRefCount,
        AppDomainID,
        ClassName,
        NameSpace,
        Operation_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Operation_full_name != NULL) {free(Operation_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledPrvSetGCHandle(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrvSetGCHandle(
                  const void* HandleID,
                  const void* ObjectID,
                  const unsigned int Kind,
                  const unsigned int Generation,
                  const unsigned __int64 AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrvSetGCHandle()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvSetGCHandle,
        (const size_t) HandleID,
        (const size_t) ObjectID,
        Kind,
        Generation,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPrvDestroyGCHandle(){ return TRUE;}
extern "C" ULONG  FireEtXplatPrvDestroyGCHandle(
                  const void* HandleID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPrvDestroyGCHandle()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PrvDestroyGCHandle,
        (const size_t) HandleID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionMessageEvent(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionMessageEvent(
                  const unsigned short ClrInstanceID,
                  const BOOL Prepend,
                  PCWSTR Message
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionMessageEvent()){ return ERROR_SUCCESS;};
    INT Message_path_size = -1;
    INT Message_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, Message, -1, NULL, 0, NULL, NULL );
    CHAR* Message_full_name=NULL;

    Message_full_name = (CHAR*)malloc(Message_full_name_path_size*sizeof(CHAR));
    _ASSERTE(Message_full_name != NULL);
    if(Message_full_name == NULL){goto LExit;}

    Message_path_size = WideCharToMultiByte( CP_ACP, 0, Message, -1, Message_full_name, Message_full_name_path_size, NULL, NULL );
    _ASSERTE(Message_path_size == Message_full_name_path_size );
    if( Message_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionMessageEvent,
        ClrInstanceID,
        Prepend,
        Message_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (Message_full_name != NULL) {free(Message_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledFusionErrorCodeEvent(){ return TRUE;}
extern "C" ULONG  FireEtXplatFusionErrorCodeEvent(
                  const unsigned short ClrInstanceID,
                  const unsigned int Category,
                  const unsigned int ErrorCode
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledFusionErrorCodeEvent()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        FusionErrorCodeEvent,
        ClrInstanceID,
        Category,
        ErrorCode
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledPinPlugAtGCTime(){ return TRUE;}
extern "C" ULONG  FireEtXplatPinPlugAtGCTime(
                  const void* PlugStart,
                  const void* PlugEnd,
                  const void* GapBeforeSize,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledPinPlugAtGCTime()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        PinPlugAtGCTime,
        (const size_t) PlugStart,
        (const size_t) PlugEnd,
        (const size_t) GapBeforeSize,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledAllocRequest(){ return TRUE;}
extern "C" ULONG  FireEtXplatAllocRequest(
                  const void* LoaderHeapPtr,
                  const void* MemoryAddress,
                  const unsigned int RequestSize,
                  const unsigned int Unused1,
                  const unsigned __int64 Unused2,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledAllocRequest()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        AllocRequest,
        (const size_t) LoaderHeapPtr,
        (const size_t) MemoryAddress,
        RequestSize,
        Unused1,
        Unused2,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledMulticoreJit(){ return TRUE;}
extern "C" ULONG  FireEtXplatMulticoreJit(
                  const unsigned short ClrInstanceID,
                  PCWSTR String1,
                  PCWSTR String2,
                  const signed int Int1,
                  const signed int Int2,
                  const signed int Int3
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledMulticoreJit()){ return ERROR_SUCCESS;};
    INT String1_path_size = -1;
    INT String1_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, String1, -1, NULL, 0, NULL, NULL );
    CHAR* String1_full_name=NULL;
    INT String2_path_size = -1;
    INT String2_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, String2, -1, NULL, 0, NULL, NULL );
    CHAR* String2_full_name=NULL;

    String1_full_name = (CHAR*)malloc(String1_full_name_path_size*sizeof(CHAR));
    _ASSERTE(String1_full_name != NULL);
    if(String1_full_name == NULL){goto LExit;}

    String1_path_size = WideCharToMultiByte( CP_ACP, 0, String1, -1, String1_full_name, String1_full_name_path_size, NULL, NULL );
    _ASSERTE(String1_path_size == String1_full_name_path_size );
    if( String1_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    String2_full_name = (CHAR*)malloc(String2_full_name_path_size*sizeof(CHAR));
    _ASSERTE(String2_full_name != NULL);
    if(String2_full_name == NULL){goto LExit;}

    String2_path_size = WideCharToMultiByte( CP_ACP, 0, String2, -1, String2_full_name, String2_full_name_path_size, NULL, NULL );
    _ASSERTE(String2_path_size == String2_full_name_path_size );
    if( String2_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        MulticoreJit,
        ClrInstanceID,
        String1_full_name,
        String2_full_name,
        Int1,
        Int2,
        Int3
        );

        Error = ERROR_SUCCESS;
LExit:
        if (String2_full_name != NULL) {free(String2_full_name);}
        if (String1_full_name != NULL) {free(String1_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledMulticoreJitMethodCodeReturned(){ return TRUE;}
extern "C" ULONG  FireEtXplatMulticoreJitMethodCodeReturned(
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledMulticoreJitMethodCodeReturned()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        MulticoreJitMethodCodeReturned,
        ClrInstanceID,
        ModuleID,
        MethodID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledIInspectableRuntimeClassName(){ return TRUE;}
extern "C" ULONG  FireEtXplatIInspectableRuntimeClassName(
                  PCWSTR TypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledIInspectableRuntimeClassName()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        IInspectableRuntimeClassName,
        TypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledWinRTUnbox(){ return TRUE;}
extern "C" ULONG  FireEtXplatWinRTUnbox(
                  PCWSTR TypeName,
                  PCWSTR SecondTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledWinRTUnbox()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;
    INT SecondTypeName_path_size = -1;
    INT SecondTypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, NULL, 0, NULL, NULL );
    CHAR* SecondTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    SecondTypeName_full_name = (CHAR*)malloc(SecondTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(SecondTypeName_full_name != NULL);
    if(SecondTypeName_full_name == NULL){goto LExit;}

    SecondTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, SecondTypeName_full_name, SecondTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(SecondTypeName_path_size == SecondTypeName_full_name_path_size );
    if( SecondTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        WinRTUnbox,
        TypeName_full_name,
        SecondTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (SecondTypeName_full_name != NULL) {free(SecondTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledCreateRCW(){ return TRUE;}
extern "C" ULONG  FireEtXplatCreateRCW(
                  PCWSTR TypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledCreateRCW()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        CreateRCW,
        TypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledRCWVariance(){ return TRUE;}
extern "C" ULONG  FireEtXplatRCWVariance(
                  PCWSTR TypeName,
                  PCWSTR InterfaceTypeName,
                  PCWSTR VariantInterfaceTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledRCWVariance()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;
    INT InterfaceTypeName_path_size = -1;
    INT InterfaceTypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, InterfaceTypeName, -1, NULL, 0, NULL, NULL );
    CHAR* InterfaceTypeName_full_name=NULL;
    INT VariantInterfaceTypeName_path_size = -1;
    INT VariantInterfaceTypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, VariantInterfaceTypeName, -1, NULL, 0, NULL, NULL );
    CHAR* VariantInterfaceTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InterfaceTypeName_full_name = (CHAR*)malloc(InterfaceTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InterfaceTypeName_full_name != NULL);
    if(InterfaceTypeName_full_name == NULL){goto LExit;}

    InterfaceTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, InterfaceTypeName, -1, InterfaceTypeName_full_name, InterfaceTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(InterfaceTypeName_path_size == InterfaceTypeName_full_name_path_size );
    if( InterfaceTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    VariantInterfaceTypeName_full_name = (CHAR*)malloc(VariantInterfaceTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(VariantInterfaceTypeName_full_name != NULL);
    if(VariantInterfaceTypeName_full_name == NULL){goto LExit;}

    VariantInterfaceTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, VariantInterfaceTypeName, -1, VariantInterfaceTypeName_full_name, VariantInterfaceTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(VariantInterfaceTypeName_path_size == VariantInterfaceTypeName_full_name_path_size );
    if( VariantInterfaceTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        RCWVariance,
        TypeName_full_name,
        InterfaceTypeName_full_name,
        VariantInterfaceTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (VariantInterfaceTypeName_full_name != NULL) {free(VariantInterfaceTypeName_full_name);}
        if (InterfaceTypeName_full_name != NULL) {free(InterfaceTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledRCWIEnumerableCasting(){ return TRUE;}
extern "C" ULONG  FireEtXplatRCWIEnumerableCasting(
                  PCWSTR TypeName,
                  PCWSTR SecondTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledRCWIEnumerableCasting()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;
    INT SecondTypeName_path_size = -1;
    INT SecondTypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, NULL, 0, NULL, NULL );
    CHAR* SecondTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    SecondTypeName_full_name = (CHAR*)malloc(SecondTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(SecondTypeName_full_name != NULL);
    if(SecondTypeName_full_name == NULL){goto LExit;}

    SecondTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, SecondTypeName_full_name, SecondTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(SecondTypeName_path_size == SecondTypeName_full_name_path_size );
    if( SecondTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        RCWIEnumerableCasting,
        TypeName_full_name,
        SecondTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (SecondTypeName_full_name != NULL) {free(SecondTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledCreateCCW(){ return TRUE;}
extern "C" ULONG  FireEtXplatCreateCCW(
                  PCWSTR TypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledCreateCCW()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        CreateCCW,
        TypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledCCWVariance(){ return TRUE;}
extern "C" ULONG  FireEtXplatCCWVariance(
                  PCWSTR TypeName,
                  PCWSTR InterfaceTypeName,
                  PCWSTR VariantInterfaceTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledCCWVariance()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;
    INT InterfaceTypeName_path_size = -1;
    INT InterfaceTypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, InterfaceTypeName, -1, NULL, 0, NULL, NULL );
    CHAR* InterfaceTypeName_full_name=NULL;
    INT VariantInterfaceTypeName_path_size = -1;
    INT VariantInterfaceTypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, VariantInterfaceTypeName, -1, NULL, 0, NULL, NULL );
    CHAR* VariantInterfaceTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InterfaceTypeName_full_name = (CHAR*)malloc(InterfaceTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InterfaceTypeName_full_name != NULL);
    if(InterfaceTypeName_full_name == NULL){goto LExit;}

    InterfaceTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, InterfaceTypeName, -1, InterfaceTypeName_full_name, InterfaceTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(InterfaceTypeName_path_size == InterfaceTypeName_full_name_path_size );
    if( InterfaceTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    VariantInterfaceTypeName_full_name = (CHAR*)malloc(VariantInterfaceTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(VariantInterfaceTypeName_full_name != NULL);
    if(VariantInterfaceTypeName_full_name == NULL){goto LExit;}

    VariantInterfaceTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, VariantInterfaceTypeName, -1, VariantInterfaceTypeName_full_name, VariantInterfaceTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(VariantInterfaceTypeName_path_size == VariantInterfaceTypeName_full_name_path_size );
    if( VariantInterfaceTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        CCWVariance,
        TypeName_full_name,
        InterfaceTypeName_full_name,
        VariantInterfaceTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (VariantInterfaceTypeName_full_name != NULL) {free(VariantInterfaceTypeName_full_name);}
        if (InterfaceTypeName_full_name != NULL) {free(InterfaceTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledObjectVariantMarshallingToNative(){ return TRUE;}
extern "C" ULONG  FireEtXplatObjectVariantMarshallingToNative(
                  PCWSTR TypeName,
                  const signed int Int1,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledObjectVariantMarshallingToNative()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        ObjectVariantMarshallingToNative,
        TypeName_full_name,
        Int1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledGetTypeFromGUID(){ return TRUE;}
extern "C" ULONG  FireEtXplatGetTypeFromGUID(
                  PCWSTR TypeName,
                  PCWSTR SecondTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGetTypeFromGUID()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;
    INT SecondTypeName_path_size = -1;
    INT SecondTypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, NULL, 0, NULL, NULL );
    CHAR* SecondTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    SecondTypeName_full_name = (CHAR*)malloc(SecondTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(SecondTypeName_full_name != NULL);
    if(SecondTypeName_full_name == NULL){goto LExit;}

    SecondTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, SecondTypeName_full_name, SecondTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(SecondTypeName_path_size == SecondTypeName_full_name_path_size );
    if( SecondTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        GetTypeFromGUID,
        TypeName_full_name,
        SecondTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (SecondTypeName_full_name != NULL) {free(SecondTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledGetTypeFromProgID(){ return TRUE;}
extern "C" ULONG  FireEtXplatGetTypeFromProgID(
                  PCWSTR TypeName,
                  PCWSTR SecondTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledGetTypeFromProgID()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;
    INT SecondTypeName_path_size = -1;
    INT SecondTypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, NULL, 0, NULL, NULL );
    CHAR* SecondTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    SecondTypeName_full_name = (CHAR*)malloc(SecondTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(SecondTypeName_full_name != NULL);
    if(SecondTypeName_full_name == NULL){goto LExit;}

    SecondTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, SecondTypeName_full_name, SecondTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(SecondTypeName_path_size == SecondTypeName_full_name_path_size );
    if( SecondTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        GetTypeFromProgID,
        TypeName_full_name,
        SecondTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (SecondTypeName_full_name != NULL) {free(SecondTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledConvertToCallbackEtw(){ return TRUE;}
extern "C" ULONG  FireEtXplatConvertToCallbackEtw(
                  PCWSTR TypeName,
                  PCWSTR SecondTypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledConvertToCallbackEtw()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;
    INT SecondTypeName_path_size = -1;
    INT SecondTypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, NULL, 0, NULL, NULL );
    CHAR* SecondTypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    SecondTypeName_full_name = (CHAR*)malloc(SecondTypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(SecondTypeName_full_name != NULL);
    if(SecondTypeName_full_name == NULL){goto LExit;}

    SecondTypeName_path_size = WideCharToMultiByte( CP_ACP, 0, SecondTypeName, -1, SecondTypeName_full_name, SecondTypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(SecondTypeName_path_size == SecondTypeName_full_name_path_size );
    if( SecondTypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        ConvertToCallbackEtw,
        TypeName_full_name,
        SecondTypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (SecondTypeName_full_name != NULL) {free(SecondTypeName_full_name);}
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventXplatEnabledBeginCreateManagedReference(){ return TRUE;}
extern "C" ULONG  FireEtXplatBeginCreateManagedReference(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledBeginCreateManagedReference()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        BeginCreateManagedReference,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledEndCreateManagedReference(){ return TRUE;}
extern "C" ULONG  FireEtXplatEndCreateManagedReference(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledEndCreateManagedReference()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntimePrivate,
        EndCreateManagedReference,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventXplatEnabledObjectVariantMarshallingToManaged(){ return TRUE;}
extern "C" ULONG  FireEtXplatObjectVariantMarshallingToManaged(
                  PCWSTR TypeName,
                  const signed int Int1,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventXplatEnabledObjectVariantMarshallingToManaged()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, NULL, 0, NULL, NULL );
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntimePrivate,
        ObjectVariantMarshallingToManaged,
        TypeName_full_name,
        Int1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
