//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//

/******************************************************************

DO NOT MODIFY. AUTOGENERATED FILE.
This file is generated using the logic from <root>/src/inc/genXplatLttng.pl

******************************************************************/


#define TRACEPOINT_DEFINE
#define TRACEPOINT_PROBE_DYNAMIC_LINKAGE
#include "lttng/tpdotnetruntime.h"
extern "C" BOOL  EventEnabledGCStart(){ return TRUE;}
extern "C" ULONG  FireEtwGCStart(
                  const unsigned int Count,
                  const unsigned int Reason
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCStart()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCStart,
        Count,
        Reason
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCStart_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCStart_V1(
                  const unsigned int Count,
                  const unsigned int Depth,
                  const unsigned int Reason,
                  const unsigned int Type,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCStart_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCStart_V1,
        Count,
        Depth,
        Reason,
        Type,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCStart_V2(){ return TRUE;}
extern "C" ULONG  FireEtwGCStart_V2(
                  const unsigned int Count,
                  const unsigned int Depth,
                  const unsigned int Reason,
                  const unsigned int Type,
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 ClientSequenceNumber
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCStart_V2()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCStart_V2,
        Count,
        Depth,
        Reason,
        Type,
        ClrInstanceID,
        ClientSequenceNumber
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCEnd(){ return TRUE;}
extern "C" ULONG  FireEtwGCEnd(
                  const unsigned int Count,
                  const unsigned short Depth
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCEnd,
        Count,
        Depth
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCEnd_V1(
                  const unsigned int Count,
                  const unsigned int Depth,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCEnd_V1,
        Count,
        Depth,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCRestartEEEnd(){ return TRUE;}
extern "C" ULONG  FireEtwGCRestartEEEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCRestartEEEnd()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        GCRestartEEEnd
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCRestartEEEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCRestartEEEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCRestartEEEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCRestartEEEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCHeapStats(){ return TRUE;}
extern "C" ULONG  FireEtwGCHeapStats(
                  const unsigned __int64 GenerationSize0,
                  const unsigned __int64 TotalPromotedSize0,
                  const unsigned __int64 GenerationSize1,
                  const unsigned __int64 TotalPromotedSize1,
                  const unsigned __int64 GenerationSize2,
                  const unsigned __int64 TotalPromotedSize2,
                  const unsigned __int64 GenerationSize3,
                  const unsigned __int64 TotalPromotedSize3,
                  const unsigned __int64 FinalizationPromotedSize,
                  const unsigned __int64 FinalizationPromotedCount,
                  const unsigned int PinnedObjectCount,
                  const unsigned int SinkBlockCount,
                  const unsigned int GCHandleCount
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCHeapStats()){ return ERROR_SUCCESS;};

                                                    
     tracepoint(
        DotNETRuntime,
        GCHeapStats,
        GenerationSize0,
        TotalPromotedSize0,
        GenerationSize1,
        TotalPromotedSize1,
        GenerationSize2,
        TotalPromotedSize2,
        GenerationSize3,
        TotalPromotedSize3,
        FinalizationPromotedSize,
        FinalizationPromotedCount
        );

     tracepoint(
        DotNETRuntime,
        GCHeapStats_1,
        PinnedObjectCount,
        SinkBlockCount,
        GCHandleCount
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCHeapStats_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCHeapStats_V1(
                  const unsigned __int64 GenerationSize0,
                  const unsigned __int64 TotalPromotedSize0,
                  const unsigned __int64 GenerationSize1,
                  const unsigned __int64 TotalPromotedSize1,
                  const unsigned __int64 GenerationSize2,
                  const unsigned __int64 TotalPromotedSize2,
                  const unsigned __int64 GenerationSize3,
                  const unsigned __int64 TotalPromotedSize3,
                  const unsigned __int64 FinalizationPromotedSize,
                  const unsigned __int64 FinalizationPromotedCount,
                  const unsigned int PinnedObjectCount,
                  const unsigned int SinkBlockCount,
                  const unsigned int GCHandleCount,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCHeapStats_V1()){ return ERROR_SUCCESS;};

                                                    
     tracepoint(
        DotNETRuntime,
        GCHeapStats_V1,
        GenerationSize0,
        TotalPromotedSize0,
        GenerationSize1,
        TotalPromotedSize1,
        GenerationSize2,
        TotalPromotedSize2,
        GenerationSize3,
        TotalPromotedSize3,
        FinalizationPromotedSize,
        FinalizationPromotedCount
        );

     tracepoint(
        DotNETRuntime,
        GCHeapStats_V1_1,
        PinnedObjectCount,
        SinkBlockCount,
        GCHandleCount,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCCreateSegment(){ return TRUE;}
extern "C" ULONG  FireEtwGCCreateSegment(
                  const unsigned __int64 Address,
                  const unsigned __int64 Size,
                  const unsigned int Type
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCCreateSegment()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCCreateSegment,
        Address,
        Size,
        Type
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCCreateSegment_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCCreateSegment_V1(
                  const unsigned __int64 Address,
                  const unsigned __int64 Size,
                  const unsigned int Type,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCCreateSegment_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCCreateSegment_V1,
        Address,
        Size,
        Type,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCFreeSegment(){ return TRUE;}
extern "C" ULONG  FireEtwGCFreeSegment(
                  const unsigned __int64 Address
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCFreeSegment()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCFreeSegment,
        Address
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCFreeSegment_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCFreeSegment_V1(
                  const unsigned __int64 Address,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCFreeSegment_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCFreeSegment_V1,
        Address,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCRestartEEBegin(){ return TRUE;}
extern "C" ULONG  FireEtwGCRestartEEBegin(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCRestartEEBegin()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        GCRestartEEBegin
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCRestartEEBegin_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCRestartEEBegin_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCRestartEEBegin_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCRestartEEBegin_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCSuspendEEEnd(){ return TRUE;}
extern "C" ULONG  FireEtwGCSuspendEEEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCSuspendEEEnd()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        GCSuspendEEEnd
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCSuspendEEEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCSuspendEEEnd_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCSuspendEEEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCSuspendEEEnd_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCSuspendEEBegin(){ return TRUE;}
extern "C" ULONG  FireEtwGCSuspendEEBegin(
                  const unsigned short Reason
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCSuspendEEBegin()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCSuspendEEBegin,
        Reason
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCSuspendEEBegin_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCSuspendEEBegin_V1(
                  const unsigned int Reason,
                  const unsigned int Count,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCSuspendEEBegin_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCSuspendEEBegin_V1,
        Reason,
        Count,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCAllocationTick(){ return TRUE;}
extern "C" ULONG  FireEtwGCAllocationTick(
                  const unsigned int AllocationAmount,
                  const unsigned int AllocationKind
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCAllocationTick()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCAllocationTick,
        AllocationAmount,
        AllocationKind
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCAllocationTick_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCAllocationTick_V1(
                  const unsigned int AllocationAmount,
                  const unsigned int AllocationKind,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCAllocationTick_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCAllocationTick_V1,
        AllocationAmount,
        AllocationKind,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCAllocationTick_V2(){ return TRUE;}
extern "C" ULONG  FireEtwGCAllocationTick_V2(
                  const unsigned int AllocationAmount,
                  const unsigned int AllocationKind,
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 AllocationAmount64,
                  const void* TypeID,
                  PCWSTR TypeName,
                  const unsigned int HeapIndex
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCAllocationTick_V2()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        GCAllocationTick_V2,
        AllocationAmount,
        AllocationKind,
        ClrInstanceID,
        AllocationAmount64,
        (const size_t) TypeID,
        TypeName_full_name,
        HeapIndex
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledGCAllocationTick_V3(){ return TRUE;}
extern "C" ULONG  FireEtwGCAllocationTick_V3(
                  const unsigned int AllocationAmount,
                  const unsigned int AllocationKind,
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 AllocationAmount64,
                  const void* TypeID,
                  PCWSTR TypeName,
                  const unsigned int HeapIndex,
                  const void* Address
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCAllocationTick_V3()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        GCAllocationTick_V3,
        AllocationAmount,
        AllocationKind,
        ClrInstanceID,
        AllocationAmount64,
        (const size_t) TypeID,
        TypeName_full_name,
        HeapIndex,
        (const size_t) Address
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledGCCreateConcurrentThread(){ return TRUE;}
extern "C" ULONG  FireEtwGCCreateConcurrentThread(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCCreateConcurrentThread()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        GCCreateConcurrentThread
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCCreateConcurrentThread_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCCreateConcurrentThread_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCCreateConcurrentThread_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCCreateConcurrentThread_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCTerminateConcurrentThread(){ return TRUE;}
extern "C" ULONG  FireEtwGCTerminateConcurrentThread(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCTerminateConcurrentThread()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        GCTerminateConcurrentThread
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCTerminateConcurrentThread_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCTerminateConcurrentThread_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCTerminateConcurrentThread_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCTerminateConcurrentThread_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCFinalizersEnd(){ return TRUE;}
extern "C" ULONG  FireEtwGCFinalizersEnd(
                  const unsigned int Count
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCFinalizersEnd()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCFinalizersEnd,
        Count
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCFinalizersEnd_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCFinalizersEnd_V1(
                  const unsigned int Count,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCFinalizersEnd_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCFinalizersEnd_V1,
        Count,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCFinalizersBegin(){ return TRUE;}
extern "C" ULONG  FireEtwGCFinalizersBegin(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCFinalizersBegin()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        GCFinalizersBegin
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCFinalizersBegin_V1(){ return TRUE;}
extern "C" ULONG  FireEtwGCFinalizersBegin_V1(
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCFinalizersBegin_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCFinalizersBegin_V1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledBulkType(){ return TRUE;}
extern "C" ULONG  FireEtwBulkType(
                  const unsigned int Count,
                  const unsigned short ClrInstanceID,
                  const ULONG Arg2_Struct_Len_,
                  const void* Arg2_Struct_Pointer_
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledBulkType()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        BulkType,
        Count,
        ClrInstanceID,
        Arg2_Struct_Len_,
        (const int*) Arg2_Struct_Pointer_
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCBulkRootEdge(){ return TRUE;}
extern "C" ULONG  FireEtwGCBulkRootEdge(
                  const unsigned int Index,
                  const unsigned int Count,
                  const unsigned short ClrInstanceID,
                  const ULONG Arg3_Struct_Len_,
                  const void* Arg3_Struct_Pointer_
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCBulkRootEdge()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCBulkRootEdge,
        Index,
        Count,
        ClrInstanceID,
        Arg3_Struct_Len_,
        (const int*) Arg3_Struct_Pointer_
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCBulkRootConditionalWeakTableElementEdge(){ return TRUE;}
extern "C" ULONG  FireEtwGCBulkRootConditionalWeakTableElementEdge(
                  const unsigned int Index,
                  const unsigned int Count,
                  const unsigned short ClrInstanceID,
                  const ULONG Arg3_Struct_Len_,
                  const void* Arg3_Struct_Pointer_
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCBulkRootConditionalWeakTableElementEdge()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCBulkRootConditionalWeakTableElementEdge,
        Index,
        Count,
        ClrInstanceID,
        Arg3_Struct_Len_,
        (const int*) Arg3_Struct_Pointer_
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCBulkNode(){ return TRUE;}
extern "C" ULONG  FireEtwGCBulkNode(
                  const unsigned int Index,
                  const unsigned int Count,
                  const unsigned short ClrInstanceID,
                  const ULONG Arg3_Struct_Len_,
                  const void* Arg3_Struct_Pointer_
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCBulkNode()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCBulkNode,
        Index,
        Count,
        ClrInstanceID,
        Arg3_Struct_Len_,
        (const int*) Arg3_Struct_Pointer_
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCBulkEdge(){ return TRUE;}
extern "C" ULONG  FireEtwGCBulkEdge(
                  const unsigned int Index,
                  const unsigned int Count,
                  const unsigned short ClrInstanceID,
                  const ULONG Arg3_Struct_Len_,
                  const void* Arg3_Struct_Pointer_
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCBulkEdge()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCBulkEdge,
        Index,
        Count,
        ClrInstanceID,
        Arg3_Struct_Len_,
        (const int*) Arg3_Struct_Pointer_
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCSampledObjectAllocationHigh(){ return TRUE;}
extern "C" ULONG  FireEtwGCSampledObjectAllocationHigh(
                  const void* Address,
                  const void* TypeID,
                  const unsigned int ObjectCountForTypeSample,
                  const unsigned __int64 TotalSizeForTypeSample,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCSampledObjectAllocationHigh()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCSampledObjectAllocationHigh,
        (const size_t) Address,
        (const size_t) TypeID,
        ObjectCountForTypeSample,
        TotalSizeForTypeSample,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCBulkSurvivingObjectRanges(){ return TRUE;}
extern "C" ULONG  FireEtwGCBulkSurvivingObjectRanges(
                  const unsigned int Index,
                  const unsigned int Count,
                  const unsigned short ClrInstanceID,
                  const ULONG Arg3_Struct_Len_,
                  const void* Arg3_Struct_Pointer_
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCBulkSurvivingObjectRanges()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCBulkSurvivingObjectRanges,
        Index,
        Count,
        ClrInstanceID,
        Arg3_Struct_Len_,
        (const int*) Arg3_Struct_Pointer_
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCBulkMovedObjectRanges(){ return TRUE;}
extern "C" ULONG  FireEtwGCBulkMovedObjectRanges(
                  const unsigned int Index,
                  const unsigned int Count,
                  const unsigned short ClrInstanceID,
                  const ULONG Arg3_Struct_Len_,
                  const void* Arg3_Struct_Pointer_
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCBulkMovedObjectRanges()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCBulkMovedObjectRanges,
        Index,
        Count,
        ClrInstanceID,
        Arg3_Struct_Len_,
        (const int*) Arg3_Struct_Pointer_
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCGenerationRange(){ return TRUE;}
extern "C" ULONG  FireEtwGCGenerationRange(
                  const unsigned char Generation,
                  const void* RangeStart,
                  const unsigned __int64 RangeUsedLength,
                  const unsigned __int64 RangeReservedLength,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCGenerationRange()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCGenerationRange,
        Generation,
        (const size_t) RangeStart,
        RangeUsedLength,
        RangeReservedLength,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCMarkStackRoots(){ return TRUE;}
extern "C" ULONG  FireEtwGCMarkStackRoots(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCMarkStackRoots()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCMarkStackRoots,
        HeapNum,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCMarkFinalizeQueueRoots(){ return TRUE;}
extern "C" ULONG  FireEtwGCMarkFinalizeQueueRoots(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCMarkFinalizeQueueRoots()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCMarkFinalizeQueueRoots,
        HeapNum,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCMarkHandles(){ return TRUE;}
extern "C" ULONG  FireEtwGCMarkHandles(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCMarkHandles()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCMarkHandles,
        HeapNum,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCMarkOlderGenerationRoots(){ return TRUE;}
extern "C" ULONG  FireEtwGCMarkOlderGenerationRoots(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCMarkOlderGenerationRoots()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCMarkOlderGenerationRoots,
        HeapNum,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledFinalizeObject(){ return TRUE;}
extern "C" ULONG  FireEtwFinalizeObject(
                  const void* TypeID,
                  const void* ObjectID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledFinalizeObject()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        FinalizeObject,
        (const size_t) TypeID,
        (const size_t) ObjectID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledSetGCHandle(){ return TRUE;}
extern "C" ULONG  FireEtwSetGCHandle(
                  const void* HandleID,
                  const void* ObjectID,
                  const unsigned int Kind,
                  const unsigned int Generation,
                  const unsigned __int64 AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledSetGCHandle()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        SetGCHandle,
        (const size_t) HandleID,
        (const size_t) ObjectID,
        Kind,
        Generation,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledDestroyGCHandle(){ return TRUE;}
extern "C" ULONG  FireEtwDestroyGCHandle(
                  const void* HandleID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledDestroyGCHandle()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        DestroyGCHandle,
        (const size_t) HandleID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCSampledObjectAllocationLow(){ return TRUE;}
extern "C" ULONG  FireEtwGCSampledObjectAllocationLow(
                  const void* Address,
                  const void* TypeID,
                  const unsigned int ObjectCountForTypeSample,
                  const unsigned __int64 TotalSizeForTypeSample,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCSampledObjectAllocationLow()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCSampledObjectAllocationLow,
        (const size_t) Address,
        (const size_t) TypeID,
        ObjectCountForTypeSample,
        TotalSizeForTypeSample,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledPinObjectAtGCTime(){ return TRUE;}
extern "C" ULONG  FireEtwPinObjectAtGCTime(
                  const void* HandleID,
                  const void* ObjectID,
                  const unsigned __int64 ObjectSize,
                  PCWSTR TypeName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledPinObjectAtGCTime()){ return ERROR_SUCCESS;};
    INT TypeName_path_size = -1;
    INT TypeName_full_name_path_size = PAL_wcslen(TypeName) + 1;
    CHAR* TypeName_full_name=NULL;

    TypeName_full_name = (CHAR*)malloc(TypeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(TypeName_full_name != NULL);
    if(TypeName_full_name == NULL){goto LExit;}

    TypeName_path_size = WideCharToMultiByte( CP_ACP, 0, TypeName, -1, TypeName_full_name, TypeName_full_name_path_size, NULL, NULL );
    _ASSERTE(TypeName_path_size == TypeName_full_name_path_size );
    if( TypeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        PinObjectAtGCTime,
        (const size_t) HandleID,
        (const size_t) ObjectID,
        ObjectSize,
        TypeName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (TypeName_full_name != NULL) {free(TypeName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledGCTriggered(){ return TRUE;}
extern "C" ULONG  FireEtwGCTriggered(
                  const unsigned int Reason,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCTriggered()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCTriggered,
        Reason,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCBulkRootCCW(){ return TRUE;}
extern "C" ULONG  FireEtwGCBulkRootCCW(
                  const unsigned int Count,
                  const unsigned short ClrInstanceID,
                  const ULONG Arg2_Struct_Len_,
                  const void* Arg2_Struct_Pointer_
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCBulkRootCCW()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCBulkRootCCW,
        Count,
        ClrInstanceID,
        Arg2_Struct_Len_,
        (const int*) Arg2_Struct_Pointer_
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCBulkRCW(){ return TRUE;}
extern "C" ULONG  FireEtwGCBulkRCW(
                  const unsigned int Count,
                  const unsigned short ClrInstanceID,
                  const ULONG Arg2_Struct_Len_,
                  const void* Arg2_Struct_Pointer_
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCBulkRCW()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCBulkRCW,
        Count,
        ClrInstanceID,
        Arg2_Struct_Len_,
        (const int*) Arg2_Struct_Pointer_
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCBulkRootStaticVar(){ return TRUE;}
extern "C" ULONG  FireEtwGCBulkRootStaticVar(
                  const unsigned int Count,
                  const unsigned __int64 AppDomainID,
                  const unsigned short ClrInstanceID,
                  const ULONG Arg3_Struct_Len_,
                  const void* Arg3_Struct_Pointer_
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCBulkRootStaticVar()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCBulkRootStaticVar,
        Count,
        AppDomainID,
        ClrInstanceID,
        Arg3_Struct_Len_,
        (const int*) Arg3_Struct_Pointer_
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledWorkerThreadCreate(){ return TRUE;}
extern "C" ULONG  FireEtwWorkerThreadCreate(
                  const unsigned int WorkerThreadCount,
                  const unsigned int RetiredWorkerThreads
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledWorkerThreadCreate()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        WorkerThreadCreate,
        WorkerThreadCount,
        RetiredWorkerThreads
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledWorkerThreadTerminate(){ return TRUE;}
extern "C" ULONG  FireEtwWorkerThreadTerminate(
                  const unsigned int WorkerThreadCount,
                  const unsigned int RetiredWorkerThreads
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledWorkerThreadTerminate()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        WorkerThreadTerminate,
        WorkerThreadCount,
        RetiredWorkerThreads
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledWorkerThreadRetire(){ return TRUE;}
extern "C" ULONG  FireEtwWorkerThreadRetire(
                  const unsigned int WorkerThreadCount,
                  const unsigned int RetiredWorkerThreads
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledWorkerThreadRetire()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        WorkerThreadRetire,
        WorkerThreadCount,
        RetiredWorkerThreads
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledWorkerThreadUnretire(){ return TRUE;}
extern "C" ULONG  FireEtwWorkerThreadUnretire(
                  const unsigned int WorkerThreadCount,
                  const unsigned int RetiredWorkerThreads
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledWorkerThreadUnretire()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        WorkerThreadUnretire,
        WorkerThreadCount,
        RetiredWorkerThreads
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledIOThreadCreate(){ return TRUE;}
extern "C" ULONG  FireEtwIOThreadCreate(
                  const unsigned int IOThreadCount,
                  const unsigned int RetiredIOThreads
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledIOThreadCreate()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        IOThreadCreate,
        IOThreadCount,
        RetiredIOThreads
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledIOThreadCreate_V1(){ return TRUE;}
extern "C" ULONG  FireEtwIOThreadCreate_V1(
                  const unsigned int IOThreadCount,
                  const unsigned int RetiredIOThreads,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledIOThreadCreate_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        IOThreadCreate_V1,
        IOThreadCount,
        RetiredIOThreads,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledIOThreadTerminate(){ return TRUE;}
extern "C" ULONG  FireEtwIOThreadTerminate(
                  const unsigned int IOThreadCount,
                  const unsigned int RetiredIOThreads
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledIOThreadTerminate()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        IOThreadTerminate,
        IOThreadCount,
        RetiredIOThreads
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledIOThreadTerminate_V1(){ return TRUE;}
extern "C" ULONG  FireEtwIOThreadTerminate_V1(
                  const unsigned int IOThreadCount,
                  const unsigned int RetiredIOThreads,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledIOThreadTerminate_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        IOThreadTerminate_V1,
        IOThreadCount,
        RetiredIOThreads,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledIOThreadRetire(){ return TRUE;}
extern "C" ULONG  FireEtwIOThreadRetire(
                  const unsigned int IOThreadCount,
                  const unsigned int RetiredIOThreads
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledIOThreadRetire()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        IOThreadRetire,
        IOThreadCount,
        RetiredIOThreads
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledIOThreadRetire_V1(){ return TRUE;}
extern "C" ULONG  FireEtwIOThreadRetire_V1(
                  const unsigned int IOThreadCount,
                  const unsigned int RetiredIOThreads,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledIOThreadRetire_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        IOThreadRetire_V1,
        IOThreadCount,
        RetiredIOThreads,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledIOThreadUnretire(){ return TRUE;}
extern "C" ULONG  FireEtwIOThreadUnretire(
                  const unsigned int IOThreadCount,
                  const unsigned int RetiredIOThreads
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledIOThreadUnretire()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        IOThreadUnretire,
        IOThreadCount,
        RetiredIOThreads
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledIOThreadUnretire_V1(){ return TRUE;}
extern "C" ULONG  FireEtwIOThreadUnretire_V1(
                  const unsigned int IOThreadCount,
                  const unsigned int RetiredIOThreads,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledIOThreadUnretire_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        IOThreadUnretire_V1,
        IOThreadCount,
        RetiredIOThreads,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadpoolSuspensionSuspendThread(){ return TRUE;}
extern "C" ULONG  FireEtwThreadpoolSuspensionSuspendThread(
                  const unsigned int ClrThreadID,
                  const unsigned int CpuUtilization
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadpoolSuspensionSuspendThread()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadpoolSuspensionSuspendThread,
        ClrThreadID,
        CpuUtilization
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadpoolSuspensionResumeThread(){ return TRUE;}
extern "C" ULONG  FireEtwThreadpoolSuspensionResumeThread(
                  const unsigned int ClrThreadID,
                  const unsigned int CpuUtilization
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadpoolSuspensionResumeThread()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadpoolSuspensionResumeThread,
        ClrThreadID,
        CpuUtilization
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolWorkerThreadStart(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolWorkerThreadStart(
                  const unsigned int ActiveWorkerThreadCount,
                  const unsigned int RetiredWorkerThreadCount,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolWorkerThreadStart()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolWorkerThreadStart,
        ActiveWorkerThreadCount,
        RetiredWorkerThreadCount,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolWorkerThreadStop(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolWorkerThreadStop(
                  const unsigned int ActiveWorkerThreadCount,
                  const unsigned int RetiredWorkerThreadCount,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolWorkerThreadStop()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolWorkerThreadStop,
        ActiveWorkerThreadCount,
        RetiredWorkerThreadCount,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolWorkerThreadRetirementStart(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolWorkerThreadRetirementStart(
                  const unsigned int ActiveWorkerThreadCount,
                  const unsigned int RetiredWorkerThreadCount,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolWorkerThreadRetirementStart()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolWorkerThreadRetirementStart,
        ActiveWorkerThreadCount,
        RetiredWorkerThreadCount,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolWorkerThreadRetirementStop(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolWorkerThreadRetirementStop(
                  const unsigned int ActiveWorkerThreadCount,
                  const unsigned int RetiredWorkerThreadCount,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolWorkerThreadRetirementStop()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolWorkerThreadRetirementStop,
        ActiveWorkerThreadCount,
        RetiredWorkerThreadCount,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolWorkerThreadAdjustmentSample(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolWorkerThreadAdjustmentSample(
                  const double Throughput,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolWorkerThreadAdjustmentSample()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolWorkerThreadAdjustmentSample,
        Throughput,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolWorkerThreadAdjustmentAdjustment(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolWorkerThreadAdjustmentAdjustment(
                  const double AverageThroughput,
                  const unsigned int NewWorkerThreadCount,
                  const unsigned int Reason,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolWorkerThreadAdjustmentAdjustment()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolWorkerThreadAdjustmentAdjustment,
        AverageThroughput,
        NewWorkerThreadCount,
        Reason,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolWorkerThreadAdjustmentStats(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolWorkerThreadAdjustmentStats(
                  const double Duration,
                  const double Throughput,
                  const double ThreadWave,
                  const double ThroughputWave,
                  const double ThroughputErrorEstimate,
                  const double AverageThroughputErrorEstimate,
                  const double ThroughputRatio,
                  const double Confidence,
                  const double NewControlSetting,
                  const unsigned short NewThreadWaveMagnitude,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolWorkerThreadAdjustmentStats()){ return ERROR_SUCCESS;};

                                                    
     tracepoint(
        DotNETRuntime,
        ThreadPoolWorkerThreadAdjustmentStats,
        Duration,
        Throughput,
        ThreadWave,
        ThroughputWave,
        ThroughputErrorEstimate,
        AverageThroughputErrorEstimate,
        ThroughputRatio,
        Confidence,
        NewControlSetting,
        NewThreadWaveMagnitude
        );

     tracepoint(
        DotNETRuntime,
        ThreadPoolWorkerThreadAdjustmentStats_1,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolWorkerThreadWait(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolWorkerThreadWait(
                  const unsigned int ActiveWorkerThreadCount,
                  const unsigned int RetiredWorkerThreadCount,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolWorkerThreadWait()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolWorkerThreadWait,
        ActiveWorkerThreadCount,
        RetiredWorkerThreadCount,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolWorkingThreadCount(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolWorkingThreadCount(
                  const unsigned int Count,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolWorkingThreadCount()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolWorkingThreadCount,
        Count,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolEnqueue(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolEnqueue(
                  const void* WorkID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolEnqueue()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolEnqueue,
        (const size_t) WorkID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolDequeue(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolDequeue(
                  const void* WorkID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolDequeue()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolDequeue,
        (const size_t) WorkID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolIOEnqueue(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolIOEnqueue(
                  const void* NativeOverlapped,
                  const void* Overlapped,
                  const BOOL MultiDequeues,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolIOEnqueue()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolIOEnqueue,
        (const size_t) NativeOverlapped,
        (const size_t) Overlapped,
        MultiDequeues,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolIODequeue(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolIODequeue(
                  const void* NativeOverlapped,
                  const void* Overlapped,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolIODequeue()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolIODequeue,
        (const size_t) NativeOverlapped,
        (const size_t) Overlapped,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadPoolIOPack(){ return TRUE;}
extern "C" ULONG  FireEtwThreadPoolIOPack(
                  const void* NativeOverlapped,
                  const void* Overlapped,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadPoolIOPack()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadPoolIOPack,
        (const size_t) NativeOverlapped,
        (const size_t) Overlapped,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadCreating(){ return TRUE;}
extern "C" ULONG  FireEtwThreadCreating(
                  const void* ID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadCreating()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadCreating,
        (const size_t) ID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadRunning(){ return TRUE;}
extern "C" ULONG  FireEtwThreadRunning(
                  const void* ID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadRunning()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadRunning,
        (const size_t) ID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExceptionThrown(){ return TRUE;}
extern "C" ULONG  FireEtwExceptionThrown(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExceptionThrown()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        ExceptionThrown
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExceptionThrown_V1(){ return TRUE;}
extern "C" ULONG  FireEtwExceptionThrown_V1(
                  PCWSTR ExceptionType,
                  PCWSTR ExceptionMessage,
                  const void* ExceptionEIP,
                  const unsigned int ExceptionHRESULT,
                  const unsigned short ExceptionFlags,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExceptionThrown_V1()){ return ERROR_SUCCESS;};
    INT ExceptionType_path_size = -1;
    INT ExceptionType_full_name_path_size = PAL_wcslen(ExceptionType) + 1;
    CHAR* ExceptionType_full_name=NULL;
    INT ExceptionMessage_path_size = -1;
    INT ExceptionMessage_full_name_path_size = PAL_wcslen(ExceptionMessage) + 1;
    CHAR* ExceptionMessage_full_name=NULL;

    ExceptionType_full_name = (CHAR*)malloc(ExceptionType_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ExceptionType_full_name != NULL);
    if(ExceptionType_full_name == NULL){goto LExit;}

    ExceptionType_path_size = WideCharToMultiByte( CP_ACP, 0, ExceptionType, -1, ExceptionType_full_name, ExceptionType_full_name_path_size, NULL, NULL );
    _ASSERTE(ExceptionType_path_size == ExceptionType_full_name_path_size );
    if( ExceptionType_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ExceptionMessage_full_name = (CHAR*)malloc(ExceptionMessage_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ExceptionMessage_full_name != NULL);
    if(ExceptionMessage_full_name == NULL){goto LExit;}

    ExceptionMessage_path_size = WideCharToMultiByte( CP_ACP, 0, ExceptionMessage, -1, ExceptionMessage_full_name, ExceptionMessage_full_name_path_size, NULL, NULL );
    _ASSERTE(ExceptionMessage_path_size == ExceptionMessage_full_name_path_size );
    if( ExceptionMessage_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        ExceptionThrown_V1,
        ExceptionType_full_name,
        ExceptionMessage_full_name,
        (const size_t) ExceptionEIP,
        ExceptionHRESULT,
        ExceptionFlags,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ExceptionMessage_full_name != NULL) {free(ExceptionMessage_full_name);}
        if (ExceptionType_full_name != NULL) {free(ExceptionType_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledExceptionCatchStart(){ return TRUE;}
extern "C" ULONG  FireEtwExceptionCatchStart(
                  const unsigned __int64 EntryEIP,
                  const unsigned __int64 MethodID,
                  PCWSTR MethodName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExceptionCatchStart()){ return ERROR_SUCCESS;};
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;

    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        ExceptionCatchStart,
        EntryEIP,
        MethodID,
        MethodName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledExceptionCatchStop(){ return TRUE;}
extern "C" ULONG  FireEtwExceptionCatchStop(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExceptionCatchStop()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        ExceptionCatchStop
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExceptionFinallyStart(){ return TRUE;}
extern "C" ULONG  FireEtwExceptionFinallyStart(
                  const unsigned __int64 EntryEIP,
                  const unsigned __int64 MethodID,
                  PCWSTR MethodName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExceptionFinallyStart()){ return ERROR_SUCCESS;};
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;

    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        ExceptionFinallyStart,
        EntryEIP,
        MethodID,
        MethodName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledExceptionFinallyStop(){ return TRUE;}
extern "C" ULONG  FireEtwExceptionFinallyStop(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExceptionFinallyStop()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        ExceptionFinallyStop
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExceptionFilterStart(){ return TRUE;}
extern "C" ULONG  FireEtwExceptionFilterStart(
                  const unsigned __int64 EntryEIP,
                  const unsigned __int64 MethodID,
                  PCWSTR MethodName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExceptionFilterStart()){ return ERROR_SUCCESS;};
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;

    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        ExceptionFilterStart,
        EntryEIP,
        MethodID,
        MethodName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledExceptionFilterStop(){ return TRUE;}
extern "C" ULONG  FireEtwExceptionFilterStop(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExceptionFilterStop()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        ExceptionFilterStop
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledExceptionThrownStop(){ return TRUE;}
extern "C" ULONG  FireEtwExceptionThrownStop(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledExceptionThrownStop()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        ExceptionThrownStop
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledContention(){ return TRUE;}
extern "C" ULONG  FireEtwContention(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledContention()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        Contention
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledContentionStart_V1(){ return TRUE;}
extern "C" ULONG  FireEtwContentionStart_V1(
                  const unsigned char ContentionFlags,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledContentionStart_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ContentionStart_V1,
        ContentionFlags,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledContentionStop(){ return TRUE;}
extern "C" ULONG  FireEtwContentionStop(
                  const unsigned char ContentionFlags,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledContentionStop()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ContentionStop,
        ContentionFlags,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledCLRStackWalk(){ return TRUE;}
extern "C" ULONG  FireEtwCLRStackWalk(
                  const unsigned short ClrInstanceID,
                  const unsigned char Reserved1,
                  const unsigned char Reserved2,
                  const unsigned int FrameCount,
                  const void** Stack
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledCLRStackWalk()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        CLRStackWalk,
        ClrInstanceID,
        Reserved1,
        Reserved2,
        FrameCount,
        (const size_t*) Stack
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledAppDomainMemAllocated(){ return TRUE;}
extern "C" ULONG  FireEtwAppDomainMemAllocated(
                  const unsigned __int64 AppDomainID,
                  const unsigned __int64 Allocated,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAppDomainMemAllocated()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        AppDomainMemAllocated,
        AppDomainID,
        Allocated,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledAppDomainMemSurvived(){ return TRUE;}
extern "C" ULONG  FireEtwAppDomainMemSurvived(
                  const unsigned __int64 AppDomainID,
                  const unsigned __int64 Survived,
                  const unsigned __int64 ProcessSurvived,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAppDomainMemSurvived()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        AppDomainMemSurvived,
        AppDomainID,
        Survived,
        ProcessSurvived,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadCreated(){ return TRUE;}
extern "C" ULONG  FireEtwThreadCreated(
                  const unsigned __int64 ManagedThreadID,
                  const unsigned __int64 AppDomainID,
                  const unsigned int Flags,
                  const unsigned int ManagedThreadIndex,
                  const unsigned int OSThreadID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadCreated()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadCreated,
        ManagedThreadID,
        AppDomainID,
        Flags,
        ManagedThreadIndex,
        OSThreadID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadTerminated(){ return TRUE;}
extern "C" ULONG  FireEtwThreadTerminated(
                  const unsigned __int64 ManagedThreadID,
                  const unsigned __int64 AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadTerminated()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadTerminated,
        ManagedThreadID,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledThreadDomainEnter(){ return TRUE;}
extern "C" ULONG  FireEtwThreadDomainEnter(
                  const unsigned __int64 ManagedThreadID,
                  const unsigned __int64 AppDomainID,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledThreadDomainEnter()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ThreadDomainEnter,
        ManagedThreadID,
        AppDomainID,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledILStubGenerated(){ return TRUE;}
extern "C" ULONG  FireEtwILStubGenerated(
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 StubMethodID,
                  const unsigned int StubFlags,
                  const unsigned int ManagedInteropMethodToken,
                  PCWSTR ManagedInteropMethodNamespace,
                  PCWSTR ManagedInteropMethodName,
                  PCWSTR ManagedInteropMethodSignature,
                  PCWSTR NativeMethodSignature,
                  PCWSTR StubMethodSignature,
                  PCWSTR StubMethodILCode
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledILStubGenerated()){ return ERROR_SUCCESS;};
    INT ManagedInteropMethodNamespace_path_size = -1;
    INT ManagedInteropMethodNamespace_full_name_path_size = PAL_wcslen(ManagedInteropMethodNamespace) + 1;
    CHAR* ManagedInteropMethodNamespace_full_name=NULL;
    INT ManagedInteropMethodName_path_size = -1;
    INT ManagedInteropMethodName_full_name_path_size = PAL_wcslen(ManagedInteropMethodName) + 1;
    CHAR* ManagedInteropMethodName_full_name=NULL;
    INT ManagedInteropMethodSignature_path_size = -1;
    INT ManagedInteropMethodSignature_full_name_path_size = PAL_wcslen(ManagedInteropMethodSignature) + 1;
    CHAR* ManagedInteropMethodSignature_full_name=NULL;
    INT NativeMethodSignature_path_size = -1;
    INT NativeMethodSignature_full_name_path_size = PAL_wcslen(NativeMethodSignature) + 1;
    CHAR* NativeMethodSignature_full_name=NULL;
    INT StubMethodSignature_path_size = -1;
    INT StubMethodSignature_full_name_path_size = PAL_wcslen(StubMethodSignature) + 1;
    CHAR* StubMethodSignature_full_name=NULL;
    INT StubMethodILCode_path_size = -1;
    INT StubMethodILCode_full_name_path_size = PAL_wcslen(StubMethodILCode) + 1;
    CHAR* StubMethodILCode_full_name=NULL;

    ManagedInteropMethodNamespace_full_name = (CHAR*)malloc(ManagedInteropMethodNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ManagedInteropMethodNamespace_full_name != NULL);
    if(ManagedInteropMethodNamespace_full_name == NULL){goto LExit;}

    ManagedInteropMethodNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, ManagedInteropMethodNamespace, -1, ManagedInteropMethodNamespace_full_name, ManagedInteropMethodNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(ManagedInteropMethodNamespace_path_size == ManagedInteropMethodNamespace_full_name_path_size );
    if( ManagedInteropMethodNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ManagedInteropMethodName_full_name = (CHAR*)malloc(ManagedInteropMethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ManagedInteropMethodName_full_name != NULL);
    if(ManagedInteropMethodName_full_name == NULL){goto LExit;}

    ManagedInteropMethodName_path_size = WideCharToMultiByte( CP_ACP, 0, ManagedInteropMethodName, -1, ManagedInteropMethodName_full_name, ManagedInteropMethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(ManagedInteropMethodName_path_size == ManagedInteropMethodName_full_name_path_size );
    if( ManagedInteropMethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ManagedInteropMethodSignature_full_name = (CHAR*)malloc(ManagedInteropMethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ManagedInteropMethodSignature_full_name != NULL);
    if(ManagedInteropMethodSignature_full_name == NULL){goto LExit;}

    ManagedInteropMethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, ManagedInteropMethodSignature, -1, ManagedInteropMethodSignature_full_name, ManagedInteropMethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(ManagedInteropMethodSignature_path_size == ManagedInteropMethodSignature_full_name_path_size );
    if( ManagedInteropMethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    NativeMethodSignature_full_name = (CHAR*)malloc(NativeMethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(NativeMethodSignature_full_name != NULL);
    if(NativeMethodSignature_full_name == NULL){goto LExit;}

    NativeMethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, NativeMethodSignature, -1, NativeMethodSignature_full_name, NativeMethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(NativeMethodSignature_path_size == NativeMethodSignature_full_name_path_size );
    if( NativeMethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    StubMethodSignature_full_name = (CHAR*)malloc(StubMethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(StubMethodSignature_full_name != NULL);
    if(StubMethodSignature_full_name == NULL){goto LExit;}

    StubMethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, StubMethodSignature, -1, StubMethodSignature_full_name, StubMethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(StubMethodSignature_path_size == StubMethodSignature_full_name_path_size );
    if( StubMethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    StubMethodILCode_full_name = (CHAR*)malloc(StubMethodILCode_full_name_path_size*sizeof(CHAR));
    _ASSERTE(StubMethodILCode_full_name != NULL);
    if(StubMethodILCode_full_name == NULL){goto LExit;}

    StubMethodILCode_path_size = WideCharToMultiByte( CP_ACP, 0, StubMethodILCode, -1, StubMethodILCode_full_name, StubMethodILCode_full_name_path_size, NULL, NULL );
    _ASSERTE(StubMethodILCode_path_size == StubMethodILCode_full_name_path_size );
    if( StubMethodILCode_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                                    
     tracepoint(
        DotNETRuntime,
        ILStubGenerated,
        ClrInstanceID,
        ModuleID,
        StubMethodID,
        StubFlags,
        ManagedInteropMethodToken,
        ManagedInteropMethodNamespace_full_name,
        ManagedInteropMethodName_full_name,
        ManagedInteropMethodSignature_full_name,
        NativeMethodSignature_full_name,
        StubMethodSignature_full_name
        );

     tracepoint(
        DotNETRuntime,
        ILStubGenerated_1,
        StubMethodILCode_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (StubMethodILCode_full_name != NULL) {free(StubMethodILCode_full_name);}
        if (StubMethodSignature_full_name != NULL) {free(StubMethodSignature_full_name);}
        if (NativeMethodSignature_full_name != NULL) {free(NativeMethodSignature_full_name);}
        if (ManagedInteropMethodSignature_full_name != NULL) {free(ManagedInteropMethodSignature_full_name);}
        if (ManagedInteropMethodName_full_name != NULL) {free(ManagedInteropMethodName_full_name);}
        if (ManagedInteropMethodNamespace_full_name != NULL) {free(ManagedInteropMethodNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledILStubCacheHit(){ return TRUE;}
extern "C" ULONG  FireEtwILStubCacheHit(
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 StubMethodID,
                  const unsigned int ManagedInteropMethodToken,
                  PCWSTR ManagedInteropMethodNamespace,
                  PCWSTR ManagedInteropMethodName,
                  PCWSTR ManagedInteropMethodSignature
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledILStubCacheHit()){ return ERROR_SUCCESS;};
    INT ManagedInteropMethodNamespace_path_size = -1;
    INT ManagedInteropMethodNamespace_full_name_path_size = PAL_wcslen(ManagedInteropMethodNamespace) + 1;
    CHAR* ManagedInteropMethodNamespace_full_name=NULL;
    INT ManagedInteropMethodName_path_size = -1;
    INT ManagedInteropMethodName_full_name_path_size = PAL_wcslen(ManagedInteropMethodName) + 1;
    CHAR* ManagedInteropMethodName_full_name=NULL;
    INT ManagedInteropMethodSignature_path_size = -1;
    INT ManagedInteropMethodSignature_full_name_path_size = PAL_wcslen(ManagedInteropMethodSignature) + 1;
    CHAR* ManagedInteropMethodSignature_full_name=NULL;

    ManagedInteropMethodNamespace_full_name = (CHAR*)malloc(ManagedInteropMethodNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ManagedInteropMethodNamespace_full_name != NULL);
    if(ManagedInteropMethodNamespace_full_name == NULL){goto LExit;}

    ManagedInteropMethodNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, ManagedInteropMethodNamespace, -1, ManagedInteropMethodNamespace_full_name, ManagedInteropMethodNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(ManagedInteropMethodNamespace_path_size == ManagedInteropMethodNamespace_full_name_path_size );
    if( ManagedInteropMethodNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ManagedInteropMethodName_full_name = (CHAR*)malloc(ManagedInteropMethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ManagedInteropMethodName_full_name != NULL);
    if(ManagedInteropMethodName_full_name == NULL){goto LExit;}

    ManagedInteropMethodName_path_size = WideCharToMultiByte( CP_ACP, 0, ManagedInteropMethodName, -1, ManagedInteropMethodName_full_name, ManagedInteropMethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(ManagedInteropMethodName_path_size == ManagedInteropMethodName_full_name_path_size );
    if( ManagedInteropMethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ManagedInteropMethodSignature_full_name = (CHAR*)malloc(ManagedInteropMethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ManagedInteropMethodSignature_full_name != NULL);
    if(ManagedInteropMethodSignature_full_name == NULL){goto LExit;}

    ManagedInteropMethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, ManagedInteropMethodSignature, -1, ManagedInteropMethodSignature_full_name, ManagedInteropMethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(ManagedInteropMethodSignature_path_size == ManagedInteropMethodSignature_full_name_path_size );
    if( ManagedInteropMethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        ILStubCacheHit,
        ClrInstanceID,
        ModuleID,
        StubMethodID,
        ManagedInteropMethodToken,
        ManagedInteropMethodNamespace_full_name,
        ManagedInteropMethodName_full_name,
        ManagedInteropMethodSignature_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ManagedInteropMethodSignature_full_name != NULL) {free(ManagedInteropMethodSignature_full_name);}
        if (ManagedInteropMethodName_full_name != NULL) {free(ManagedInteropMethodName_full_name);}
        if (ManagedInteropMethodNamespace_full_name != NULL) {free(ManagedInteropMethodNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledDCStartCompleteV2(){ return TRUE;}
extern "C" ULONG  FireEtwDCStartCompleteV2(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledDCStartCompleteV2()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        DCStartCompleteV2
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledDCEndCompleteV2(){ return TRUE;}
extern "C" ULONG  FireEtwDCEndCompleteV2(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledDCEndCompleteV2()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        DCEndCompleteV2
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMethodDCStartV2(){ return TRUE;}
extern "C" ULONG  FireEtwMethodDCStartV2(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodDCStartV2()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        MethodDCStartV2,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMethodDCEndV2(){ return TRUE;}
extern "C" ULONG  FireEtwMethodDCEndV2(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodDCEndV2()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        MethodDCEndV2,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMethodDCStartVerboseV2(){ return TRUE;}
extern "C" ULONG  FireEtwMethodDCStartVerboseV2(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags,
                  PCWSTR MethodNamespace,
                  PCWSTR MethodName,
                  PCWSTR MethodSignature
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodDCStartVerboseV2()){ return ERROR_SUCCESS;};
    INT MethodNamespace_path_size = -1;
    INT MethodNamespace_full_name_path_size = PAL_wcslen(MethodNamespace) + 1;
    CHAR* MethodNamespace_full_name=NULL;
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;
    INT MethodSignature_path_size = -1;
    INT MethodSignature_full_name_path_size = PAL_wcslen(MethodSignature) + 1;
    CHAR* MethodSignature_full_name=NULL;

    MethodNamespace_full_name = (CHAR*)malloc(MethodNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodNamespace_full_name != NULL);
    if(MethodNamespace_full_name == NULL){goto LExit;}

    MethodNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodNamespace, -1, MethodNamespace_full_name, MethodNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodNamespace_path_size == MethodNamespace_full_name_path_size );
    if( MethodNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodSignature_full_name = (CHAR*)malloc(MethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodSignature_full_name != NULL);
    if(MethodSignature_full_name == NULL){goto LExit;}

    MethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodSignature, -1, MethodSignature_full_name, MethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodSignature_path_size == MethodSignature_full_name_path_size );
    if( MethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        MethodDCStartVerboseV2,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags,
        MethodNamespace_full_name,
        MethodName_full_name,
        MethodSignature_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodSignature_full_name != NULL) {free(MethodSignature_full_name);}
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}
        if (MethodNamespace_full_name != NULL) {free(MethodNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodDCEndVerboseV2(){ return TRUE;}
extern "C" ULONG  FireEtwMethodDCEndVerboseV2(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags,
                  PCWSTR MethodNamespace,
                  PCWSTR MethodName,
                  PCWSTR MethodSignature
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodDCEndVerboseV2()){ return ERROR_SUCCESS;};
    INT MethodNamespace_path_size = -1;
    INT MethodNamespace_full_name_path_size = PAL_wcslen(MethodNamespace) + 1;
    CHAR* MethodNamespace_full_name=NULL;
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;
    INT MethodSignature_path_size = -1;
    INT MethodSignature_full_name_path_size = PAL_wcslen(MethodSignature) + 1;
    CHAR* MethodSignature_full_name=NULL;

    MethodNamespace_full_name = (CHAR*)malloc(MethodNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodNamespace_full_name != NULL);
    if(MethodNamespace_full_name == NULL){goto LExit;}

    MethodNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodNamespace, -1, MethodNamespace_full_name, MethodNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodNamespace_path_size == MethodNamespace_full_name_path_size );
    if( MethodNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodSignature_full_name = (CHAR*)malloc(MethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodSignature_full_name != NULL);
    if(MethodSignature_full_name == NULL){goto LExit;}

    MethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodSignature, -1, MethodSignature_full_name, MethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodSignature_path_size == MethodSignature_full_name_path_size );
    if( MethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        MethodDCEndVerboseV2,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags,
        MethodNamespace_full_name,
        MethodName_full_name,
        MethodSignature_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodSignature_full_name != NULL) {free(MethodSignature_full_name);}
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}
        if (MethodNamespace_full_name != NULL) {free(MethodNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodLoad(){ return TRUE;}
extern "C" ULONG  FireEtwMethodLoad(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodLoad()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        MethodLoad,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMethodLoad_V1(){ return TRUE;}
extern "C" ULONG  FireEtwMethodLoad_V1(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodLoad_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        MethodLoad_V1,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMethodLoad_V2(){ return TRUE;}
extern "C" ULONG  FireEtwMethodLoad_V2(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags,
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 ReJITID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodLoad_V2()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        MethodLoad_V2,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags,
        ClrInstanceID,
        ReJITID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMethodUnload(){ return TRUE;}
extern "C" ULONG  FireEtwMethodUnload(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodUnload()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        MethodUnload,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMethodUnload_V1(){ return TRUE;}
extern "C" ULONG  FireEtwMethodUnload_V1(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodUnload_V1()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        MethodUnload_V1,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMethodUnload_V2(){ return TRUE;}
extern "C" ULONG  FireEtwMethodUnload_V2(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags,
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 ReJITID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodUnload_V2()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        MethodUnload_V2,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags,
        ClrInstanceID,
        ReJITID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledMethodLoadVerbose(){ return TRUE;}
extern "C" ULONG  FireEtwMethodLoadVerbose(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags,
                  PCWSTR MethodNamespace,
                  PCWSTR MethodName,
                  PCWSTR MethodSignature
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodLoadVerbose()){ return ERROR_SUCCESS;};
    INT MethodNamespace_path_size = -1;
    INT MethodNamespace_full_name_path_size = PAL_wcslen(MethodNamespace) + 1;
    CHAR* MethodNamespace_full_name=NULL;
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;
    INT MethodSignature_path_size = -1;
    INT MethodSignature_full_name_path_size = PAL_wcslen(MethodSignature) + 1;
    CHAR* MethodSignature_full_name=NULL;

    MethodNamespace_full_name = (CHAR*)malloc(MethodNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodNamespace_full_name != NULL);
    if(MethodNamespace_full_name == NULL){goto LExit;}

    MethodNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodNamespace, -1, MethodNamespace_full_name, MethodNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodNamespace_path_size == MethodNamespace_full_name_path_size );
    if( MethodNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodSignature_full_name = (CHAR*)malloc(MethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodSignature_full_name != NULL);
    if(MethodSignature_full_name == NULL){goto LExit;}

    MethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodSignature, -1, MethodSignature_full_name, MethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodSignature_path_size == MethodSignature_full_name_path_size );
    if( MethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        MethodLoadVerbose,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags,
        MethodNamespace_full_name,
        MethodName_full_name,
        MethodSignature_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodSignature_full_name != NULL) {free(MethodSignature_full_name);}
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}
        if (MethodNamespace_full_name != NULL) {free(MethodNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodLoadVerbose_V1(){ return TRUE;}
extern "C" ULONG  FireEtwMethodLoadVerbose_V1(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags,
                  PCWSTR MethodNamespace,
                  PCWSTR MethodName,
                  PCWSTR MethodSignature,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodLoadVerbose_V1()){ return ERROR_SUCCESS;};
    INT MethodNamespace_path_size = -1;
    INT MethodNamespace_full_name_path_size = PAL_wcslen(MethodNamespace) + 1;
    CHAR* MethodNamespace_full_name=NULL;
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;
    INT MethodSignature_path_size = -1;
    INT MethodSignature_full_name_path_size = PAL_wcslen(MethodSignature) + 1;
    CHAR* MethodSignature_full_name=NULL;

    MethodNamespace_full_name = (CHAR*)malloc(MethodNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodNamespace_full_name != NULL);
    if(MethodNamespace_full_name == NULL){goto LExit;}

    MethodNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodNamespace, -1, MethodNamespace_full_name, MethodNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodNamespace_path_size == MethodNamespace_full_name_path_size );
    if( MethodNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodSignature_full_name = (CHAR*)malloc(MethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodSignature_full_name != NULL);
    if(MethodSignature_full_name == NULL){goto LExit;}

    MethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodSignature, -1, MethodSignature_full_name, MethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodSignature_path_size == MethodSignature_full_name_path_size );
    if( MethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        MethodLoadVerbose_V1,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags,
        MethodNamespace_full_name,
        MethodName_full_name,
        MethodSignature_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodSignature_full_name != NULL) {free(MethodSignature_full_name);}
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}
        if (MethodNamespace_full_name != NULL) {free(MethodNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodLoadVerbose_V2(){ return TRUE;}
extern "C" ULONG  FireEtwMethodLoadVerbose_V2(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags,
                  PCWSTR MethodNamespace,
                  PCWSTR MethodName,
                  PCWSTR MethodSignature,
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 ReJITID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodLoadVerbose_V2()){ return ERROR_SUCCESS;};
    INT MethodNamespace_path_size = -1;
    INT MethodNamespace_full_name_path_size = PAL_wcslen(MethodNamespace) + 1;
    CHAR* MethodNamespace_full_name=NULL;
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;
    INT MethodSignature_path_size = -1;
    INT MethodSignature_full_name_path_size = PAL_wcslen(MethodSignature) + 1;
    CHAR* MethodSignature_full_name=NULL;

    MethodNamespace_full_name = (CHAR*)malloc(MethodNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodNamespace_full_name != NULL);
    if(MethodNamespace_full_name == NULL){goto LExit;}

    MethodNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodNamespace, -1, MethodNamespace_full_name, MethodNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodNamespace_path_size == MethodNamespace_full_name_path_size );
    if( MethodNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodSignature_full_name = (CHAR*)malloc(MethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodSignature_full_name != NULL);
    if(MethodSignature_full_name == NULL){goto LExit;}

    MethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodSignature, -1, MethodSignature_full_name, MethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodSignature_path_size == MethodSignature_full_name_path_size );
    if( MethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                                    
     tracepoint(
        DotNETRuntime,
        MethodLoadVerbose_V2,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags,
        MethodNamespace_full_name,
        MethodName_full_name,
        MethodSignature_full_name,
        ClrInstanceID
        );

     tracepoint(
        DotNETRuntime,
        MethodLoadVerbose_V2_1,
        ReJITID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodSignature_full_name != NULL) {free(MethodSignature_full_name);}
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}
        if (MethodNamespace_full_name != NULL) {free(MethodNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodUnloadVerbose(){ return TRUE;}
extern "C" ULONG  FireEtwMethodUnloadVerbose(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags,
                  PCWSTR MethodNamespace,
                  PCWSTR MethodName,
                  PCWSTR MethodSignature
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodUnloadVerbose()){ return ERROR_SUCCESS;};
    INT MethodNamespace_path_size = -1;
    INT MethodNamespace_full_name_path_size = PAL_wcslen(MethodNamespace) + 1;
    CHAR* MethodNamespace_full_name=NULL;
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;
    INT MethodSignature_path_size = -1;
    INT MethodSignature_full_name_path_size = PAL_wcslen(MethodSignature) + 1;
    CHAR* MethodSignature_full_name=NULL;

    MethodNamespace_full_name = (CHAR*)malloc(MethodNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodNamespace_full_name != NULL);
    if(MethodNamespace_full_name == NULL){goto LExit;}

    MethodNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodNamespace, -1, MethodNamespace_full_name, MethodNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodNamespace_path_size == MethodNamespace_full_name_path_size );
    if( MethodNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodSignature_full_name = (CHAR*)malloc(MethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodSignature_full_name != NULL);
    if(MethodSignature_full_name == NULL){goto LExit;}

    MethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodSignature, -1, MethodSignature_full_name, MethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodSignature_path_size == MethodSignature_full_name_path_size );
    if( MethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        MethodUnloadVerbose,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags,
        MethodNamespace_full_name,
        MethodName_full_name,
        MethodSignature_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodSignature_full_name != NULL) {free(MethodSignature_full_name);}
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}
        if (MethodNamespace_full_name != NULL) {free(MethodNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodUnloadVerbose_V1(){ return TRUE;}
extern "C" ULONG  FireEtwMethodUnloadVerbose_V1(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags,
                  PCWSTR MethodNamespace,
                  PCWSTR MethodName,
                  PCWSTR MethodSignature,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodUnloadVerbose_V1()){ return ERROR_SUCCESS;};
    INT MethodNamespace_path_size = -1;
    INT MethodNamespace_full_name_path_size = PAL_wcslen(MethodNamespace) + 1;
    CHAR* MethodNamespace_full_name=NULL;
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;
    INT MethodSignature_path_size = -1;
    INT MethodSignature_full_name_path_size = PAL_wcslen(MethodSignature) + 1;
    CHAR* MethodSignature_full_name=NULL;

    MethodNamespace_full_name = (CHAR*)malloc(MethodNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodNamespace_full_name != NULL);
    if(MethodNamespace_full_name == NULL){goto LExit;}

    MethodNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodNamespace, -1, MethodNamespace_full_name, MethodNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodNamespace_path_size == MethodNamespace_full_name_path_size );
    if( MethodNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodSignature_full_name = (CHAR*)malloc(MethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodSignature_full_name != NULL);
    if(MethodSignature_full_name == NULL){goto LExit;}

    MethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodSignature, -1, MethodSignature_full_name, MethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodSignature_path_size == MethodSignature_full_name_path_size );
    if( MethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        MethodUnloadVerbose_V1,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags,
        MethodNamespace_full_name,
        MethodName_full_name,
        MethodSignature_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodSignature_full_name != NULL) {free(MethodSignature_full_name);}
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}
        if (MethodNamespace_full_name != NULL) {free(MethodNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodUnloadVerbose_V2(){ return TRUE;}
extern "C" ULONG  FireEtwMethodUnloadVerbose_V2(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 MethodStartAddress,
                  const unsigned int MethodSize,
                  const unsigned int MethodToken,
                  const unsigned int MethodFlags,
                  PCWSTR MethodNamespace,
                  PCWSTR MethodName,
                  PCWSTR MethodSignature,
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 ReJITID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodUnloadVerbose_V2()){ return ERROR_SUCCESS;};
    INT MethodNamespace_path_size = -1;
    INT MethodNamespace_full_name_path_size = PAL_wcslen(MethodNamespace) + 1;
    CHAR* MethodNamespace_full_name=NULL;
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;
    INT MethodSignature_path_size = -1;
    INT MethodSignature_full_name_path_size = PAL_wcslen(MethodSignature) + 1;
    CHAR* MethodSignature_full_name=NULL;

    MethodNamespace_full_name = (CHAR*)malloc(MethodNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodNamespace_full_name != NULL);
    if(MethodNamespace_full_name == NULL){goto LExit;}

    MethodNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodNamespace, -1, MethodNamespace_full_name, MethodNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodNamespace_path_size == MethodNamespace_full_name_path_size );
    if( MethodNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodSignature_full_name = (CHAR*)malloc(MethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodSignature_full_name != NULL);
    if(MethodSignature_full_name == NULL){goto LExit;}

    MethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodSignature, -1, MethodSignature_full_name, MethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodSignature_path_size == MethodSignature_full_name_path_size );
    if( MethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                                    
     tracepoint(
        DotNETRuntime,
        MethodUnloadVerbose_V2,
        MethodID,
        ModuleID,
        MethodStartAddress,
        MethodSize,
        MethodToken,
        MethodFlags,
        MethodNamespace_full_name,
        MethodName_full_name,
        MethodSignature_full_name,
        ClrInstanceID
        );

     tracepoint(
        DotNETRuntime,
        MethodUnloadVerbose_V2_1,
        ReJITID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodSignature_full_name != NULL) {free(MethodSignature_full_name);}
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}
        if (MethodNamespace_full_name != NULL) {free(MethodNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodJittingStarted(){ return TRUE;}
extern "C" ULONG  FireEtwMethodJittingStarted(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned int MethodToken,
                  const unsigned int MethodILSize,
                  PCWSTR MethodNamespace,
                  PCWSTR MethodName,
                  PCWSTR MethodSignature
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodJittingStarted()){ return ERROR_SUCCESS;};
    INT MethodNamespace_path_size = -1;
    INT MethodNamespace_full_name_path_size = PAL_wcslen(MethodNamespace) + 1;
    CHAR* MethodNamespace_full_name=NULL;
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;
    INT MethodSignature_path_size = -1;
    INT MethodSignature_full_name_path_size = PAL_wcslen(MethodSignature) + 1;
    CHAR* MethodSignature_full_name=NULL;

    MethodNamespace_full_name = (CHAR*)malloc(MethodNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodNamespace_full_name != NULL);
    if(MethodNamespace_full_name == NULL){goto LExit;}

    MethodNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodNamespace, -1, MethodNamespace_full_name, MethodNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodNamespace_path_size == MethodNamespace_full_name_path_size );
    if( MethodNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodSignature_full_name = (CHAR*)malloc(MethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodSignature_full_name != NULL);
    if(MethodSignature_full_name == NULL){goto LExit;}

    MethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodSignature, -1, MethodSignature_full_name, MethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodSignature_path_size == MethodSignature_full_name_path_size );
    if( MethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        MethodJittingStarted,
        MethodID,
        ModuleID,
        MethodToken,
        MethodILSize,
        MethodNamespace_full_name,
        MethodName_full_name,
        MethodSignature_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodSignature_full_name != NULL) {free(MethodSignature_full_name);}
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}
        if (MethodNamespace_full_name != NULL) {free(MethodNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodJittingStarted_V1(){ return TRUE;}
extern "C" ULONG  FireEtwMethodJittingStarted_V1(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ModuleID,
                  const unsigned int MethodToken,
                  const unsigned int MethodILSize,
                  PCWSTR MethodNamespace,
                  PCWSTR MethodName,
                  PCWSTR MethodSignature,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodJittingStarted_V1()){ return ERROR_SUCCESS;};
    INT MethodNamespace_path_size = -1;
    INT MethodNamespace_full_name_path_size = PAL_wcslen(MethodNamespace) + 1;
    CHAR* MethodNamespace_full_name=NULL;
    INT MethodName_path_size = -1;
    INT MethodName_full_name_path_size = PAL_wcslen(MethodName) + 1;
    CHAR* MethodName_full_name=NULL;
    INT MethodSignature_path_size = -1;
    INT MethodSignature_full_name_path_size = PAL_wcslen(MethodSignature) + 1;
    CHAR* MethodSignature_full_name=NULL;

    MethodNamespace_full_name = (CHAR*)malloc(MethodNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodNamespace_full_name != NULL);
    if(MethodNamespace_full_name == NULL){goto LExit;}

    MethodNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodNamespace, -1, MethodNamespace_full_name, MethodNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodNamespace_path_size == MethodNamespace_full_name_path_size );
    if( MethodNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodName_full_name = (CHAR*)malloc(MethodName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodName_full_name != NULL);
    if(MethodName_full_name == NULL){goto LExit;}

    MethodName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodName, -1, MethodName_full_name, MethodName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodName_path_size == MethodName_full_name_path_size );
    if( MethodName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodSignature_full_name = (CHAR*)malloc(MethodSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodSignature_full_name != NULL);
    if(MethodSignature_full_name == NULL){goto LExit;}

    MethodSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodSignature, -1, MethodSignature_full_name, MethodSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodSignature_path_size == MethodSignature_full_name_path_size );
    if( MethodSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        MethodJittingStarted_V1,
        MethodID,
        ModuleID,
        MethodToken,
        MethodILSize,
        MethodNamespace_full_name,
        MethodName_full_name,
        MethodSignature_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (MethodSignature_full_name != NULL) {free(MethodSignature_full_name);}
        if (MethodName_full_name != NULL) {free(MethodName_full_name);}
        if (MethodNamespace_full_name != NULL) {free(MethodNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodJitInliningSucceeded(){ return TRUE;}
extern "C" ULONG  FireEtwMethodJitInliningSucceeded(
                  PCWSTR MethodBeingCompiledNamespace,
                  PCWSTR MethodBeingCompiledName,
                  PCWSTR MethodBeingCompiledNameSignature,
                  PCWSTR InlinerNamespace,
                  PCWSTR InlinerName,
                  PCWSTR InlinerNameSignature,
                  PCWSTR InlineeNamespace,
                  PCWSTR InlineeName,
                  PCWSTR InlineeNameSignature,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodJitInliningSucceeded()){ return ERROR_SUCCESS;};
    INT MethodBeingCompiledNamespace_path_size = -1;
    INT MethodBeingCompiledNamespace_full_name_path_size = PAL_wcslen(MethodBeingCompiledNamespace) + 1;
    CHAR* MethodBeingCompiledNamespace_full_name=NULL;
    INT MethodBeingCompiledName_path_size = -1;
    INT MethodBeingCompiledName_full_name_path_size = PAL_wcslen(MethodBeingCompiledName) + 1;
    CHAR* MethodBeingCompiledName_full_name=NULL;
    INT MethodBeingCompiledNameSignature_path_size = -1;
    INT MethodBeingCompiledNameSignature_full_name_path_size = PAL_wcslen(MethodBeingCompiledNameSignature) + 1;
    CHAR* MethodBeingCompiledNameSignature_full_name=NULL;
    INT InlinerNamespace_path_size = -1;
    INT InlinerNamespace_full_name_path_size = PAL_wcslen(InlinerNamespace) + 1;
    CHAR* InlinerNamespace_full_name=NULL;
    INT InlinerName_path_size = -1;
    INT InlinerName_full_name_path_size = PAL_wcslen(InlinerName) + 1;
    CHAR* InlinerName_full_name=NULL;
    INT InlinerNameSignature_path_size = -1;
    INT InlinerNameSignature_full_name_path_size = PAL_wcslen(InlinerNameSignature) + 1;
    CHAR* InlinerNameSignature_full_name=NULL;
    INT InlineeNamespace_path_size = -1;
    INT InlineeNamespace_full_name_path_size = PAL_wcslen(InlineeNamespace) + 1;
    CHAR* InlineeNamespace_full_name=NULL;
    INT InlineeName_path_size = -1;
    INT InlineeName_full_name_path_size = PAL_wcslen(InlineeName) + 1;
    CHAR* InlineeName_full_name=NULL;
    INT InlineeNameSignature_path_size = -1;
    INT InlineeNameSignature_full_name_path_size = PAL_wcslen(InlineeNameSignature) + 1;
    CHAR* InlineeNameSignature_full_name=NULL;

    MethodBeingCompiledNamespace_full_name = (CHAR*)malloc(MethodBeingCompiledNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodBeingCompiledNamespace_full_name != NULL);
    if(MethodBeingCompiledNamespace_full_name == NULL){goto LExit;}

    MethodBeingCompiledNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodBeingCompiledNamespace, -1, MethodBeingCompiledNamespace_full_name, MethodBeingCompiledNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodBeingCompiledNamespace_path_size == MethodBeingCompiledNamespace_full_name_path_size );
    if( MethodBeingCompiledNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodBeingCompiledName_full_name = (CHAR*)malloc(MethodBeingCompiledName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodBeingCompiledName_full_name != NULL);
    if(MethodBeingCompiledName_full_name == NULL){goto LExit;}

    MethodBeingCompiledName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodBeingCompiledName, -1, MethodBeingCompiledName_full_name, MethodBeingCompiledName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodBeingCompiledName_path_size == MethodBeingCompiledName_full_name_path_size );
    if( MethodBeingCompiledName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodBeingCompiledNameSignature_full_name = (CHAR*)malloc(MethodBeingCompiledNameSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodBeingCompiledNameSignature_full_name != NULL);
    if(MethodBeingCompiledNameSignature_full_name == NULL){goto LExit;}

    MethodBeingCompiledNameSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodBeingCompiledNameSignature, -1, MethodBeingCompiledNameSignature_full_name, MethodBeingCompiledNameSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodBeingCompiledNameSignature_path_size == MethodBeingCompiledNameSignature_full_name_path_size );
    if( MethodBeingCompiledNameSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InlinerNamespace_full_name = (CHAR*)malloc(InlinerNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InlinerNamespace_full_name != NULL);
    if(InlinerNamespace_full_name == NULL){goto LExit;}

    InlinerNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, InlinerNamespace, -1, InlinerNamespace_full_name, InlinerNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(InlinerNamespace_path_size == InlinerNamespace_full_name_path_size );
    if( InlinerNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InlinerName_full_name = (CHAR*)malloc(InlinerName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InlinerName_full_name != NULL);
    if(InlinerName_full_name == NULL){goto LExit;}

    InlinerName_path_size = WideCharToMultiByte( CP_ACP, 0, InlinerName, -1, InlinerName_full_name, InlinerName_full_name_path_size, NULL, NULL );
    _ASSERTE(InlinerName_path_size == InlinerName_full_name_path_size );
    if( InlinerName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InlinerNameSignature_full_name = (CHAR*)malloc(InlinerNameSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InlinerNameSignature_full_name != NULL);
    if(InlinerNameSignature_full_name == NULL){goto LExit;}

    InlinerNameSignature_path_size = WideCharToMultiByte( CP_ACP, 0, InlinerNameSignature, -1, InlinerNameSignature_full_name, InlinerNameSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(InlinerNameSignature_path_size == InlinerNameSignature_full_name_path_size );
    if( InlinerNameSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InlineeNamespace_full_name = (CHAR*)malloc(InlineeNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InlineeNamespace_full_name != NULL);
    if(InlineeNamespace_full_name == NULL){goto LExit;}

    InlineeNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, InlineeNamespace, -1, InlineeNamespace_full_name, InlineeNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(InlineeNamespace_path_size == InlineeNamespace_full_name_path_size );
    if( InlineeNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InlineeName_full_name = (CHAR*)malloc(InlineeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InlineeName_full_name != NULL);
    if(InlineeName_full_name == NULL){goto LExit;}

    InlineeName_path_size = WideCharToMultiByte( CP_ACP, 0, InlineeName, -1, InlineeName_full_name, InlineeName_full_name_path_size, NULL, NULL );
    _ASSERTE(InlineeName_path_size == InlineeName_full_name_path_size );
    if( InlineeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InlineeNameSignature_full_name = (CHAR*)malloc(InlineeNameSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InlineeNameSignature_full_name != NULL);
    if(InlineeNameSignature_full_name == NULL){goto LExit;}

    InlineeNameSignature_path_size = WideCharToMultiByte( CP_ACP, 0, InlineeNameSignature, -1, InlineeNameSignature_full_name, InlineeNameSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(InlineeNameSignature_path_size == InlineeNameSignature_full_name_path_size );
    if( InlineeNameSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        MethodJitInliningSucceeded,
        MethodBeingCompiledNamespace_full_name,
        MethodBeingCompiledName_full_name,
        MethodBeingCompiledNameSignature_full_name,
        InlinerNamespace_full_name,
        InlinerName_full_name,
        InlinerNameSignature_full_name,
        InlineeNamespace_full_name,
        InlineeName_full_name,
        InlineeNameSignature_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (InlineeNameSignature_full_name != NULL) {free(InlineeNameSignature_full_name);}
        if (InlineeName_full_name != NULL) {free(InlineeName_full_name);}
        if (InlineeNamespace_full_name != NULL) {free(InlineeNamespace_full_name);}
        if (InlinerNameSignature_full_name != NULL) {free(InlinerNameSignature_full_name);}
        if (InlinerName_full_name != NULL) {free(InlinerName_full_name);}
        if (InlinerNamespace_full_name != NULL) {free(InlinerNamespace_full_name);}
        if (MethodBeingCompiledNameSignature_full_name != NULL) {free(MethodBeingCompiledNameSignature_full_name);}
        if (MethodBeingCompiledName_full_name != NULL) {free(MethodBeingCompiledName_full_name);}
        if (MethodBeingCompiledNamespace_full_name != NULL) {free(MethodBeingCompiledNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodJitInliningFailed(){ return TRUE;}
extern "C" ULONG  FireEtwMethodJitInliningFailed(
                  PCWSTR MethodBeingCompiledNamespace,
                  PCWSTR MethodBeingCompiledName,
                  PCWSTR MethodBeingCompiledNameSignature,
                  PCWSTR InlinerNamespace,
                  PCWSTR InlinerName,
                  PCWSTR InlinerNameSignature,
                  PCWSTR InlineeNamespace,
                  PCWSTR InlineeName,
                  PCWSTR InlineeNameSignature,
                  const BOOL FailAlways,
                  LPCSTR FailReason,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodJitInliningFailed()){ return ERROR_SUCCESS;};
    INT MethodBeingCompiledNamespace_path_size = -1;
    INT MethodBeingCompiledNamespace_full_name_path_size = PAL_wcslen(MethodBeingCompiledNamespace) + 1;
    CHAR* MethodBeingCompiledNamespace_full_name=NULL;
    INT MethodBeingCompiledName_path_size = -1;
    INT MethodBeingCompiledName_full_name_path_size = PAL_wcslen(MethodBeingCompiledName) + 1;
    CHAR* MethodBeingCompiledName_full_name=NULL;
    INT MethodBeingCompiledNameSignature_path_size = -1;
    INT MethodBeingCompiledNameSignature_full_name_path_size = PAL_wcslen(MethodBeingCompiledNameSignature) + 1;
    CHAR* MethodBeingCompiledNameSignature_full_name=NULL;
    INT InlinerNamespace_path_size = -1;
    INT InlinerNamespace_full_name_path_size = PAL_wcslen(InlinerNamespace) + 1;
    CHAR* InlinerNamespace_full_name=NULL;
    INT InlinerName_path_size = -1;
    INT InlinerName_full_name_path_size = PAL_wcslen(InlinerName) + 1;
    CHAR* InlinerName_full_name=NULL;
    INT InlinerNameSignature_path_size = -1;
    INT InlinerNameSignature_full_name_path_size = PAL_wcslen(InlinerNameSignature) + 1;
    CHAR* InlinerNameSignature_full_name=NULL;
    INT InlineeNamespace_path_size = -1;
    INT InlineeNamespace_full_name_path_size = PAL_wcslen(InlineeNamespace) + 1;
    CHAR* InlineeNamespace_full_name=NULL;
    INT InlineeName_path_size = -1;
    INT InlineeName_full_name_path_size = PAL_wcslen(InlineeName) + 1;
    CHAR* InlineeName_full_name=NULL;
    INT InlineeNameSignature_path_size = -1;
    INT InlineeNameSignature_full_name_path_size = PAL_wcslen(InlineeNameSignature) + 1;
    CHAR* InlineeNameSignature_full_name=NULL;

    MethodBeingCompiledNamespace_full_name = (CHAR*)malloc(MethodBeingCompiledNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodBeingCompiledNamespace_full_name != NULL);
    if(MethodBeingCompiledNamespace_full_name == NULL){goto LExit;}

    MethodBeingCompiledNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodBeingCompiledNamespace, -1, MethodBeingCompiledNamespace_full_name, MethodBeingCompiledNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodBeingCompiledNamespace_path_size == MethodBeingCompiledNamespace_full_name_path_size );
    if( MethodBeingCompiledNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodBeingCompiledName_full_name = (CHAR*)malloc(MethodBeingCompiledName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodBeingCompiledName_full_name != NULL);
    if(MethodBeingCompiledName_full_name == NULL){goto LExit;}

    MethodBeingCompiledName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodBeingCompiledName, -1, MethodBeingCompiledName_full_name, MethodBeingCompiledName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodBeingCompiledName_path_size == MethodBeingCompiledName_full_name_path_size );
    if( MethodBeingCompiledName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodBeingCompiledNameSignature_full_name = (CHAR*)malloc(MethodBeingCompiledNameSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodBeingCompiledNameSignature_full_name != NULL);
    if(MethodBeingCompiledNameSignature_full_name == NULL){goto LExit;}

    MethodBeingCompiledNameSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodBeingCompiledNameSignature, -1, MethodBeingCompiledNameSignature_full_name, MethodBeingCompiledNameSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodBeingCompiledNameSignature_path_size == MethodBeingCompiledNameSignature_full_name_path_size );
    if( MethodBeingCompiledNameSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InlinerNamespace_full_name = (CHAR*)malloc(InlinerNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InlinerNamespace_full_name != NULL);
    if(InlinerNamespace_full_name == NULL){goto LExit;}

    InlinerNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, InlinerNamespace, -1, InlinerNamespace_full_name, InlinerNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(InlinerNamespace_path_size == InlinerNamespace_full_name_path_size );
    if( InlinerNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InlinerName_full_name = (CHAR*)malloc(InlinerName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InlinerName_full_name != NULL);
    if(InlinerName_full_name == NULL){goto LExit;}

    InlinerName_path_size = WideCharToMultiByte( CP_ACP, 0, InlinerName, -1, InlinerName_full_name, InlinerName_full_name_path_size, NULL, NULL );
    _ASSERTE(InlinerName_path_size == InlinerName_full_name_path_size );
    if( InlinerName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InlinerNameSignature_full_name = (CHAR*)malloc(InlinerNameSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InlinerNameSignature_full_name != NULL);
    if(InlinerNameSignature_full_name == NULL){goto LExit;}

    InlinerNameSignature_path_size = WideCharToMultiByte( CP_ACP, 0, InlinerNameSignature, -1, InlinerNameSignature_full_name, InlinerNameSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(InlinerNameSignature_path_size == InlinerNameSignature_full_name_path_size );
    if( InlinerNameSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InlineeNamespace_full_name = (CHAR*)malloc(InlineeNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InlineeNamespace_full_name != NULL);
    if(InlineeNamespace_full_name == NULL){goto LExit;}

    InlineeNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, InlineeNamespace, -1, InlineeNamespace_full_name, InlineeNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(InlineeNamespace_path_size == InlineeNamespace_full_name_path_size );
    if( InlineeNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InlineeName_full_name = (CHAR*)malloc(InlineeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InlineeName_full_name != NULL);
    if(InlineeName_full_name == NULL){goto LExit;}

    InlineeName_path_size = WideCharToMultiByte( CP_ACP, 0, InlineeName, -1, InlineeName_full_name, InlineeName_full_name_path_size, NULL, NULL );
    _ASSERTE(InlineeName_path_size == InlineeName_full_name_path_size );
    if( InlineeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    InlineeNameSignature_full_name = (CHAR*)malloc(InlineeNameSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(InlineeNameSignature_full_name != NULL);
    if(InlineeNameSignature_full_name == NULL){goto LExit;}

    InlineeNameSignature_path_size = WideCharToMultiByte( CP_ACP, 0, InlineeNameSignature, -1, InlineeNameSignature_full_name, InlineeNameSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(InlineeNameSignature_path_size == InlineeNameSignature_full_name_path_size );
    if( InlineeNameSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                                    
     tracepoint(
        DotNETRuntime,
        MethodJitInliningFailed,
        MethodBeingCompiledNamespace_full_name,
        MethodBeingCompiledName_full_name,
        MethodBeingCompiledNameSignature_full_name,
        InlinerNamespace_full_name,
        InlinerName_full_name,
        InlinerNameSignature_full_name,
        InlineeNamespace_full_name,
        InlineeName_full_name,
        InlineeNameSignature_full_name,
        FailAlways
        );

     tracepoint(
        DotNETRuntime,
        MethodJitInliningFailed_1,
        FailReason,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (InlineeNameSignature_full_name != NULL) {free(InlineeNameSignature_full_name);}
        if (InlineeName_full_name != NULL) {free(InlineeName_full_name);}
        if (InlineeNamespace_full_name != NULL) {free(InlineeNamespace_full_name);}
        if (InlinerNameSignature_full_name != NULL) {free(InlinerNameSignature_full_name);}
        if (InlinerName_full_name != NULL) {free(InlinerName_full_name);}
        if (InlinerNamespace_full_name != NULL) {free(InlinerNamespace_full_name);}
        if (MethodBeingCompiledNameSignature_full_name != NULL) {free(MethodBeingCompiledNameSignature_full_name);}
        if (MethodBeingCompiledName_full_name != NULL) {free(MethodBeingCompiledName_full_name);}
        if (MethodBeingCompiledNamespace_full_name != NULL) {free(MethodBeingCompiledNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodJitTailCallSucceeded(){ return TRUE;}
extern "C" ULONG  FireEtwMethodJitTailCallSucceeded(
                  PCWSTR MethodBeingCompiledNamespace,
                  PCWSTR MethodBeingCompiledName,
                  PCWSTR MethodBeingCompiledNameSignature,
                  PCWSTR CallerNamespace,
                  PCWSTR CallerName,
                  PCWSTR CallerNameSignature,
                  PCWSTR CalleeNamespace,
                  PCWSTR CalleeName,
                  PCWSTR CalleeNameSignature,
                  const BOOL TailPrefix,
                  const unsigned int TailCallType,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodJitTailCallSucceeded()){ return ERROR_SUCCESS;};
    INT MethodBeingCompiledNamespace_path_size = -1;
    INT MethodBeingCompiledNamespace_full_name_path_size = PAL_wcslen(MethodBeingCompiledNamespace) + 1;
    CHAR* MethodBeingCompiledNamespace_full_name=NULL;
    INT MethodBeingCompiledName_path_size = -1;
    INT MethodBeingCompiledName_full_name_path_size = PAL_wcslen(MethodBeingCompiledName) + 1;
    CHAR* MethodBeingCompiledName_full_name=NULL;
    INT MethodBeingCompiledNameSignature_path_size = -1;
    INT MethodBeingCompiledNameSignature_full_name_path_size = PAL_wcslen(MethodBeingCompiledNameSignature) + 1;
    CHAR* MethodBeingCompiledNameSignature_full_name=NULL;
    INT CallerNamespace_path_size = -1;
    INT CallerNamespace_full_name_path_size = PAL_wcslen(CallerNamespace) + 1;
    CHAR* CallerNamespace_full_name=NULL;
    INT CallerName_path_size = -1;
    INT CallerName_full_name_path_size = PAL_wcslen(CallerName) + 1;
    CHAR* CallerName_full_name=NULL;
    INT CallerNameSignature_path_size = -1;
    INT CallerNameSignature_full_name_path_size = PAL_wcslen(CallerNameSignature) + 1;
    CHAR* CallerNameSignature_full_name=NULL;
    INT CalleeNamespace_path_size = -1;
    INT CalleeNamespace_full_name_path_size = PAL_wcslen(CalleeNamespace) + 1;
    CHAR* CalleeNamespace_full_name=NULL;
    INT CalleeName_path_size = -1;
    INT CalleeName_full_name_path_size = PAL_wcslen(CalleeName) + 1;
    CHAR* CalleeName_full_name=NULL;
    INT CalleeNameSignature_path_size = -1;
    INT CalleeNameSignature_full_name_path_size = PAL_wcslen(CalleeNameSignature) + 1;
    CHAR* CalleeNameSignature_full_name=NULL;

    MethodBeingCompiledNamespace_full_name = (CHAR*)malloc(MethodBeingCompiledNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodBeingCompiledNamespace_full_name != NULL);
    if(MethodBeingCompiledNamespace_full_name == NULL){goto LExit;}

    MethodBeingCompiledNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodBeingCompiledNamespace, -1, MethodBeingCompiledNamespace_full_name, MethodBeingCompiledNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodBeingCompiledNamespace_path_size == MethodBeingCompiledNamespace_full_name_path_size );
    if( MethodBeingCompiledNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodBeingCompiledName_full_name = (CHAR*)malloc(MethodBeingCompiledName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodBeingCompiledName_full_name != NULL);
    if(MethodBeingCompiledName_full_name == NULL){goto LExit;}

    MethodBeingCompiledName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodBeingCompiledName, -1, MethodBeingCompiledName_full_name, MethodBeingCompiledName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodBeingCompiledName_path_size == MethodBeingCompiledName_full_name_path_size );
    if( MethodBeingCompiledName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodBeingCompiledNameSignature_full_name = (CHAR*)malloc(MethodBeingCompiledNameSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodBeingCompiledNameSignature_full_name != NULL);
    if(MethodBeingCompiledNameSignature_full_name == NULL){goto LExit;}

    MethodBeingCompiledNameSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodBeingCompiledNameSignature, -1, MethodBeingCompiledNameSignature_full_name, MethodBeingCompiledNameSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodBeingCompiledNameSignature_path_size == MethodBeingCompiledNameSignature_full_name_path_size );
    if( MethodBeingCompiledNameSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    CallerNamespace_full_name = (CHAR*)malloc(CallerNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CallerNamespace_full_name != NULL);
    if(CallerNamespace_full_name == NULL){goto LExit;}

    CallerNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, CallerNamespace, -1, CallerNamespace_full_name, CallerNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(CallerNamespace_path_size == CallerNamespace_full_name_path_size );
    if( CallerNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    CallerName_full_name = (CHAR*)malloc(CallerName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CallerName_full_name != NULL);
    if(CallerName_full_name == NULL){goto LExit;}

    CallerName_path_size = WideCharToMultiByte( CP_ACP, 0, CallerName, -1, CallerName_full_name, CallerName_full_name_path_size, NULL, NULL );
    _ASSERTE(CallerName_path_size == CallerName_full_name_path_size );
    if( CallerName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    CallerNameSignature_full_name = (CHAR*)malloc(CallerNameSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CallerNameSignature_full_name != NULL);
    if(CallerNameSignature_full_name == NULL){goto LExit;}

    CallerNameSignature_path_size = WideCharToMultiByte( CP_ACP, 0, CallerNameSignature, -1, CallerNameSignature_full_name, CallerNameSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(CallerNameSignature_path_size == CallerNameSignature_full_name_path_size );
    if( CallerNameSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    CalleeNamespace_full_name = (CHAR*)malloc(CalleeNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CalleeNamespace_full_name != NULL);
    if(CalleeNamespace_full_name == NULL){goto LExit;}

    CalleeNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, CalleeNamespace, -1, CalleeNamespace_full_name, CalleeNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(CalleeNamespace_path_size == CalleeNamespace_full_name_path_size );
    if( CalleeNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    CalleeName_full_name = (CHAR*)malloc(CalleeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CalleeName_full_name != NULL);
    if(CalleeName_full_name == NULL){goto LExit;}

    CalleeName_path_size = WideCharToMultiByte( CP_ACP, 0, CalleeName, -1, CalleeName_full_name, CalleeName_full_name_path_size, NULL, NULL );
    _ASSERTE(CalleeName_path_size == CalleeName_full_name_path_size );
    if( CalleeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    CalleeNameSignature_full_name = (CHAR*)malloc(CalleeNameSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CalleeNameSignature_full_name != NULL);
    if(CalleeNameSignature_full_name == NULL){goto LExit;}

    CalleeNameSignature_path_size = WideCharToMultiByte( CP_ACP, 0, CalleeNameSignature, -1, CalleeNameSignature_full_name, CalleeNameSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(CalleeNameSignature_path_size == CalleeNameSignature_full_name_path_size );
    if( CalleeNameSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                                    
     tracepoint(
        DotNETRuntime,
        MethodJitTailCallSucceeded,
        MethodBeingCompiledNamespace_full_name,
        MethodBeingCompiledName_full_name,
        MethodBeingCompiledNameSignature_full_name,
        CallerNamespace_full_name,
        CallerName_full_name,
        CallerNameSignature_full_name,
        CalleeNamespace_full_name,
        CalleeName_full_name,
        CalleeNameSignature_full_name,
        TailPrefix
        );

     tracepoint(
        DotNETRuntime,
        MethodJitTailCallSucceeded_1,
        TailCallType,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (CalleeNameSignature_full_name != NULL) {free(CalleeNameSignature_full_name);}
        if (CalleeName_full_name != NULL) {free(CalleeName_full_name);}
        if (CalleeNamespace_full_name != NULL) {free(CalleeNamespace_full_name);}
        if (CallerNameSignature_full_name != NULL) {free(CallerNameSignature_full_name);}
        if (CallerName_full_name != NULL) {free(CallerName_full_name);}
        if (CallerNamespace_full_name != NULL) {free(CallerNamespace_full_name);}
        if (MethodBeingCompiledNameSignature_full_name != NULL) {free(MethodBeingCompiledNameSignature_full_name);}
        if (MethodBeingCompiledName_full_name != NULL) {free(MethodBeingCompiledName_full_name);}
        if (MethodBeingCompiledNamespace_full_name != NULL) {free(MethodBeingCompiledNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodJitTailCallFailed(){ return TRUE;}
extern "C" ULONG  FireEtwMethodJitTailCallFailed(
                  PCWSTR MethodBeingCompiledNamespace,
                  PCWSTR MethodBeingCompiledName,
                  PCWSTR MethodBeingCompiledNameSignature,
                  PCWSTR CallerNamespace,
                  PCWSTR CallerName,
                  PCWSTR CallerNameSignature,
                  PCWSTR CalleeNamespace,
                  PCWSTR CalleeName,
                  PCWSTR CalleeNameSignature,
                  const BOOL TailPrefix,
                  LPCSTR FailReason,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodJitTailCallFailed()){ return ERROR_SUCCESS;};
    INT MethodBeingCompiledNamespace_path_size = -1;
    INT MethodBeingCompiledNamespace_full_name_path_size = PAL_wcslen(MethodBeingCompiledNamespace) + 1;
    CHAR* MethodBeingCompiledNamespace_full_name=NULL;
    INT MethodBeingCompiledName_path_size = -1;
    INT MethodBeingCompiledName_full_name_path_size = PAL_wcslen(MethodBeingCompiledName) + 1;
    CHAR* MethodBeingCompiledName_full_name=NULL;
    INT MethodBeingCompiledNameSignature_path_size = -1;
    INT MethodBeingCompiledNameSignature_full_name_path_size = PAL_wcslen(MethodBeingCompiledNameSignature) + 1;
    CHAR* MethodBeingCompiledNameSignature_full_name=NULL;
    INT CallerNamespace_path_size = -1;
    INT CallerNamespace_full_name_path_size = PAL_wcslen(CallerNamespace) + 1;
    CHAR* CallerNamespace_full_name=NULL;
    INT CallerName_path_size = -1;
    INT CallerName_full_name_path_size = PAL_wcslen(CallerName) + 1;
    CHAR* CallerName_full_name=NULL;
    INT CallerNameSignature_path_size = -1;
    INT CallerNameSignature_full_name_path_size = PAL_wcslen(CallerNameSignature) + 1;
    CHAR* CallerNameSignature_full_name=NULL;
    INT CalleeNamespace_path_size = -1;
    INT CalleeNamespace_full_name_path_size = PAL_wcslen(CalleeNamespace) + 1;
    CHAR* CalleeNamespace_full_name=NULL;
    INT CalleeName_path_size = -1;
    INT CalleeName_full_name_path_size = PAL_wcslen(CalleeName) + 1;
    CHAR* CalleeName_full_name=NULL;
    INT CalleeNameSignature_path_size = -1;
    INT CalleeNameSignature_full_name_path_size = PAL_wcslen(CalleeNameSignature) + 1;
    CHAR* CalleeNameSignature_full_name=NULL;

    MethodBeingCompiledNamespace_full_name = (CHAR*)malloc(MethodBeingCompiledNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodBeingCompiledNamespace_full_name != NULL);
    if(MethodBeingCompiledNamespace_full_name == NULL){goto LExit;}

    MethodBeingCompiledNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, MethodBeingCompiledNamespace, -1, MethodBeingCompiledNamespace_full_name, MethodBeingCompiledNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodBeingCompiledNamespace_path_size == MethodBeingCompiledNamespace_full_name_path_size );
    if( MethodBeingCompiledNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodBeingCompiledName_full_name = (CHAR*)malloc(MethodBeingCompiledName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodBeingCompiledName_full_name != NULL);
    if(MethodBeingCompiledName_full_name == NULL){goto LExit;}

    MethodBeingCompiledName_path_size = WideCharToMultiByte( CP_ACP, 0, MethodBeingCompiledName, -1, MethodBeingCompiledName_full_name, MethodBeingCompiledName_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodBeingCompiledName_path_size == MethodBeingCompiledName_full_name_path_size );
    if( MethodBeingCompiledName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    MethodBeingCompiledNameSignature_full_name = (CHAR*)malloc(MethodBeingCompiledNameSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(MethodBeingCompiledNameSignature_full_name != NULL);
    if(MethodBeingCompiledNameSignature_full_name == NULL){goto LExit;}

    MethodBeingCompiledNameSignature_path_size = WideCharToMultiByte( CP_ACP, 0, MethodBeingCompiledNameSignature, -1, MethodBeingCompiledNameSignature_full_name, MethodBeingCompiledNameSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(MethodBeingCompiledNameSignature_path_size == MethodBeingCompiledNameSignature_full_name_path_size );
    if( MethodBeingCompiledNameSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    CallerNamespace_full_name = (CHAR*)malloc(CallerNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CallerNamespace_full_name != NULL);
    if(CallerNamespace_full_name == NULL){goto LExit;}

    CallerNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, CallerNamespace, -1, CallerNamespace_full_name, CallerNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(CallerNamespace_path_size == CallerNamespace_full_name_path_size );
    if( CallerNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    CallerName_full_name = (CHAR*)malloc(CallerName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CallerName_full_name != NULL);
    if(CallerName_full_name == NULL){goto LExit;}

    CallerName_path_size = WideCharToMultiByte( CP_ACP, 0, CallerName, -1, CallerName_full_name, CallerName_full_name_path_size, NULL, NULL );
    _ASSERTE(CallerName_path_size == CallerName_full_name_path_size );
    if( CallerName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    CallerNameSignature_full_name = (CHAR*)malloc(CallerNameSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CallerNameSignature_full_name != NULL);
    if(CallerNameSignature_full_name == NULL){goto LExit;}

    CallerNameSignature_path_size = WideCharToMultiByte( CP_ACP, 0, CallerNameSignature, -1, CallerNameSignature_full_name, CallerNameSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(CallerNameSignature_path_size == CallerNameSignature_full_name_path_size );
    if( CallerNameSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    CalleeNamespace_full_name = (CHAR*)malloc(CalleeNamespace_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CalleeNamespace_full_name != NULL);
    if(CalleeNamespace_full_name == NULL){goto LExit;}

    CalleeNamespace_path_size = WideCharToMultiByte( CP_ACP, 0, CalleeNamespace, -1, CalleeNamespace_full_name, CalleeNamespace_full_name_path_size, NULL, NULL );
    _ASSERTE(CalleeNamespace_path_size == CalleeNamespace_full_name_path_size );
    if( CalleeNamespace_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    CalleeName_full_name = (CHAR*)malloc(CalleeName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CalleeName_full_name != NULL);
    if(CalleeName_full_name == NULL){goto LExit;}

    CalleeName_path_size = WideCharToMultiByte( CP_ACP, 0, CalleeName, -1, CalleeName_full_name, CalleeName_full_name_path_size, NULL, NULL );
    _ASSERTE(CalleeName_path_size == CalleeName_full_name_path_size );
    if( CalleeName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    CalleeNameSignature_full_name = (CHAR*)malloc(CalleeNameSignature_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CalleeNameSignature_full_name != NULL);
    if(CalleeNameSignature_full_name == NULL){goto LExit;}

    CalleeNameSignature_path_size = WideCharToMultiByte( CP_ACP, 0, CalleeNameSignature, -1, CalleeNameSignature_full_name, CalleeNameSignature_full_name_path_size, NULL, NULL );
    _ASSERTE(CalleeNameSignature_path_size == CalleeNameSignature_full_name_path_size );
    if( CalleeNameSignature_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                                    
     tracepoint(
        DotNETRuntime,
        MethodJitTailCallFailed,
        MethodBeingCompiledNamespace_full_name,
        MethodBeingCompiledName_full_name,
        MethodBeingCompiledNameSignature_full_name,
        CallerNamespace_full_name,
        CallerName_full_name,
        CallerNameSignature_full_name,
        CalleeNamespace_full_name,
        CalleeName_full_name,
        CalleeNameSignature_full_name,
        TailPrefix
        );

     tracepoint(
        DotNETRuntime,
        MethodJitTailCallFailed_1,
        FailReason,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (CalleeNameSignature_full_name != NULL) {free(CalleeNameSignature_full_name);}
        if (CalleeName_full_name != NULL) {free(CalleeName_full_name);}
        if (CalleeNamespace_full_name != NULL) {free(CalleeNamespace_full_name);}
        if (CallerNameSignature_full_name != NULL) {free(CallerNameSignature_full_name);}
        if (CallerName_full_name != NULL) {free(CallerName_full_name);}
        if (CallerNamespace_full_name != NULL) {free(CallerNamespace_full_name);}
        if (MethodBeingCompiledNameSignature_full_name != NULL) {free(MethodBeingCompiledNameSignature_full_name);}
        if (MethodBeingCompiledName_full_name != NULL) {free(MethodBeingCompiledName_full_name);}
        if (MethodBeingCompiledNamespace_full_name != NULL) {free(MethodBeingCompiledNamespace_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledMethodILToNativeMap(){ return TRUE;}
extern "C" ULONG  FireEtwMethodILToNativeMap(
                  const unsigned __int64 MethodID,
                  const unsigned __int64 ReJITID,
                  const unsigned char MethodExtent,
                  const unsigned short CountOfMapEntries,
                  const unsigned int* ILOffsets,
                  const unsigned int* NativeOffsets,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledMethodILToNativeMap()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        MethodILToNativeMap,
        MethodID,
        ReJITID,
        MethodExtent,
        CountOfMapEntries,
        (const unsigned int*) ILOffsets,
        (const unsigned int*) NativeOffsets,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledModuleDCStartV2(){ return TRUE;}
extern "C" ULONG  FireEtwModuleDCStartV2(
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 AssemblyID,
                  const unsigned int ModuleFlags,
                  const unsigned int Reserved1,
                  PCWSTR ModuleILPath,
                  PCWSTR ModuleNativePath
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledModuleDCStartV2()){ return ERROR_SUCCESS;};
    INT ModuleILPath_path_size = -1;
    INT ModuleILPath_full_name_path_size = PAL_wcslen(ModuleILPath) + 1;
    CHAR* ModuleILPath_full_name=NULL;
    INT ModuleNativePath_path_size = -1;
    INT ModuleNativePath_full_name_path_size = PAL_wcslen(ModuleNativePath) + 1;
    CHAR* ModuleNativePath_full_name=NULL;

    ModuleILPath_full_name = (CHAR*)malloc(ModuleILPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleILPath_full_name != NULL);
    if(ModuleILPath_full_name == NULL){goto LExit;}

    ModuleILPath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleILPath, -1, ModuleILPath_full_name, ModuleILPath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleILPath_path_size == ModuleILPath_full_name_path_size );
    if( ModuleILPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ModuleNativePath_full_name = (CHAR*)malloc(ModuleNativePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleNativePath_full_name != NULL);
    if(ModuleNativePath_full_name == NULL){goto LExit;}

    ModuleNativePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleNativePath, -1, ModuleNativePath_full_name, ModuleNativePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleNativePath_path_size == ModuleNativePath_full_name_path_size );
    if( ModuleNativePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        ModuleDCStartV2,
        ModuleID,
        AssemblyID,
        ModuleFlags,
        Reserved1,
        ModuleILPath_full_name,
        ModuleNativePath_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ModuleNativePath_full_name != NULL) {free(ModuleNativePath_full_name);}
        if (ModuleILPath_full_name != NULL) {free(ModuleILPath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledModuleDCEndV2(){ return TRUE;}
extern "C" ULONG  FireEtwModuleDCEndV2(
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 AssemblyID,
                  const unsigned int ModuleFlags,
                  const unsigned int Reserved1,
                  PCWSTR ModuleILPath,
                  PCWSTR ModuleNativePath
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledModuleDCEndV2()){ return ERROR_SUCCESS;};
    INT ModuleILPath_path_size = -1;
    INT ModuleILPath_full_name_path_size = PAL_wcslen(ModuleILPath) + 1;
    CHAR* ModuleILPath_full_name=NULL;
    INT ModuleNativePath_path_size = -1;
    INT ModuleNativePath_full_name_path_size = PAL_wcslen(ModuleNativePath) + 1;
    CHAR* ModuleNativePath_full_name=NULL;

    ModuleILPath_full_name = (CHAR*)malloc(ModuleILPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleILPath_full_name != NULL);
    if(ModuleILPath_full_name == NULL){goto LExit;}

    ModuleILPath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleILPath, -1, ModuleILPath_full_name, ModuleILPath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleILPath_path_size == ModuleILPath_full_name_path_size );
    if( ModuleILPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ModuleNativePath_full_name = (CHAR*)malloc(ModuleNativePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleNativePath_full_name != NULL);
    if(ModuleNativePath_full_name == NULL){goto LExit;}

    ModuleNativePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleNativePath, -1, ModuleNativePath_full_name, ModuleNativePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleNativePath_path_size == ModuleNativePath_full_name_path_size );
    if( ModuleNativePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        ModuleDCEndV2,
        ModuleID,
        AssemblyID,
        ModuleFlags,
        Reserved1,
        ModuleILPath_full_name,
        ModuleNativePath_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ModuleNativePath_full_name != NULL) {free(ModuleNativePath_full_name);}
        if (ModuleILPath_full_name != NULL) {free(ModuleILPath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledDomainModuleLoad(){ return TRUE;}
extern "C" ULONG  FireEtwDomainModuleLoad(
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 AssemblyID,
                  const unsigned __int64 AppDomainID,
                  const unsigned int ModuleFlags,
                  const unsigned int Reserved1,
                  PCWSTR ModuleILPath,
                  PCWSTR ModuleNativePath
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledDomainModuleLoad()){ return ERROR_SUCCESS;};
    INT ModuleILPath_path_size = -1;
    INT ModuleILPath_full_name_path_size = PAL_wcslen(ModuleILPath) + 1;
    CHAR* ModuleILPath_full_name=NULL;
    INT ModuleNativePath_path_size = -1;
    INT ModuleNativePath_full_name_path_size = PAL_wcslen(ModuleNativePath) + 1;
    CHAR* ModuleNativePath_full_name=NULL;

    ModuleILPath_full_name = (CHAR*)malloc(ModuleILPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleILPath_full_name != NULL);
    if(ModuleILPath_full_name == NULL){goto LExit;}

    ModuleILPath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleILPath, -1, ModuleILPath_full_name, ModuleILPath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleILPath_path_size == ModuleILPath_full_name_path_size );
    if( ModuleILPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ModuleNativePath_full_name = (CHAR*)malloc(ModuleNativePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleNativePath_full_name != NULL);
    if(ModuleNativePath_full_name == NULL){goto LExit;}

    ModuleNativePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleNativePath, -1, ModuleNativePath_full_name, ModuleNativePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleNativePath_path_size == ModuleNativePath_full_name_path_size );
    if( ModuleNativePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        DomainModuleLoad,
        ModuleID,
        AssemblyID,
        AppDomainID,
        ModuleFlags,
        Reserved1,
        ModuleILPath_full_name,
        ModuleNativePath_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ModuleNativePath_full_name != NULL) {free(ModuleNativePath_full_name);}
        if (ModuleILPath_full_name != NULL) {free(ModuleILPath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledDomainModuleLoad_V1(){ return TRUE;}
extern "C" ULONG  FireEtwDomainModuleLoad_V1(
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 AssemblyID,
                  const unsigned __int64 AppDomainID,
                  const unsigned int ModuleFlags,
                  const unsigned int Reserved1,
                  PCWSTR ModuleILPath,
                  PCWSTR ModuleNativePath,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledDomainModuleLoad_V1()){ return ERROR_SUCCESS;};
    INT ModuleILPath_path_size = -1;
    INT ModuleILPath_full_name_path_size = PAL_wcslen(ModuleILPath) + 1;
    CHAR* ModuleILPath_full_name=NULL;
    INT ModuleNativePath_path_size = -1;
    INT ModuleNativePath_full_name_path_size = PAL_wcslen(ModuleNativePath) + 1;
    CHAR* ModuleNativePath_full_name=NULL;

    ModuleILPath_full_name = (CHAR*)malloc(ModuleILPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleILPath_full_name != NULL);
    if(ModuleILPath_full_name == NULL){goto LExit;}

    ModuleILPath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleILPath, -1, ModuleILPath_full_name, ModuleILPath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleILPath_path_size == ModuleILPath_full_name_path_size );
    if( ModuleILPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ModuleNativePath_full_name = (CHAR*)malloc(ModuleNativePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleNativePath_full_name != NULL);
    if(ModuleNativePath_full_name == NULL){goto LExit;}

    ModuleNativePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleNativePath, -1, ModuleNativePath_full_name, ModuleNativePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleNativePath_path_size == ModuleNativePath_full_name_path_size );
    if( ModuleNativePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        DomainModuleLoad_V1,
        ModuleID,
        AssemblyID,
        AppDomainID,
        ModuleFlags,
        Reserved1,
        ModuleILPath_full_name,
        ModuleNativePath_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ModuleNativePath_full_name != NULL) {free(ModuleNativePath_full_name);}
        if (ModuleILPath_full_name != NULL) {free(ModuleILPath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledModuleLoad(){ return TRUE;}
extern "C" ULONG  FireEtwModuleLoad(
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 AssemblyID,
                  const unsigned int ModuleFlags,
                  const unsigned int Reserved1,
                  PCWSTR ModuleILPath,
                  PCWSTR ModuleNativePath
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledModuleLoad()){ return ERROR_SUCCESS;};
    INT ModuleILPath_path_size = -1;
    INT ModuleILPath_full_name_path_size = PAL_wcslen(ModuleILPath) + 1;
    CHAR* ModuleILPath_full_name=NULL;
    INT ModuleNativePath_path_size = -1;
    INT ModuleNativePath_full_name_path_size = PAL_wcslen(ModuleNativePath) + 1;
    CHAR* ModuleNativePath_full_name=NULL;

    ModuleILPath_full_name = (CHAR*)malloc(ModuleILPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleILPath_full_name != NULL);
    if(ModuleILPath_full_name == NULL){goto LExit;}

    ModuleILPath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleILPath, -1, ModuleILPath_full_name, ModuleILPath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleILPath_path_size == ModuleILPath_full_name_path_size );
    if( ModuleILPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ModuleNativePath_full_name = (CHAR*)malloc(ModuleNativePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleNativePath_full_name != NULL);
    if(ModuleNativePath_full_name == NULL){goto LExit;}

    ModuleNativePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleNativePath, -1, ModuleNativePath_full_name, ModuleNativePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleNativePath_path_size == ModuleNativePath_full_name_path_size );
    if( ModuleNativePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        ModuleLoad,
        ModuleID,
        AssemblyID,
        ModuleFlags,
        Reserved1,
        ModuleILPath_full_name,
        ModuleNativePath_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ModuleNativePath_full_name != NULL) {free(ModuleNativePath_full_name);}
        if (ModuleILPath_full_name != NULL) {free(ModuleILPath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledModuleLoad_V1(){ return TRUE;}
extern "C" ULONG  FireEtwModuleLoad_V1(
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 AssemblyID,
                  const unsigned int ModuleFlags,
                  const unsigned int Reserved1,
                  PCWSTR ModuleILPath,
                  PCWSTR ModuleNativePath,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledModuleLoad_V1()){ return ERROR_SUCCESS;};
    INT ModuleILPath_path_size = -1;
    INT ModuleILPath_full_name_path_size = PAL_wcslen(ModuleILPath) + 1;
    CHAR* ModuleILPath_full_name=NULL;
    INT ModuleNativePath_path_size = -1;
    INT ModuleNativePath_full_name_path_size = PAL_wcslen(ModuleNativePath) + 1;
    CHAR* ModuleNativePath_full_name=NULL;

    ModuleILPath_full_name = (CHAR*)malloc(ModuleILPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleILPath_full_name != NULL);
    if(ModuleILPath_full_name == NULL){goto LExit;}

    ModuleILPath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleILPath, -1, ModuleILPath_full_name, ModuleILPath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleILPath_path_size == ModuleILPath_full_name_path_size );
    if( ModuleILPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ModuleNativePath_full_name = (CHAR*)malloc(ModuleNativePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleNativePath_full_name != NULL);
    if(ModuleNativePath_full_name == NULL){goto LExit;}

    ModuleNativePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleNativePath, -1, ModuleNativePath_full_name, ModuleNativePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleNativePath_path_size == ModuleNativePath_full_name_path_size );
    if( ModuleNativePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        ModuleLoad_V1,
        ModuleID,
        AssemblyID,
        ModuleFlags,
        Reserved1,
        ModuleILPath_full_name,
        ModuleNativePath_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ModuleNativePath_full_name != NULL) {free(ModuleNativePath_full_name);}
        if (ModuleILPath_full_name != NULL) {free(ModuleILPath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledModuleLoad_V2(){ return TRUE;}
extern "C" ULONG  FireEtwModuleLoad_V2(
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 AssemblyID,
                  const unsigned int ModuleFlags,
                  const unsigned int Reserved1,
                  PCWSTR ModuleILPath,
                  PCWSTR ModuleNativePath,
                  const unsigned short ClrInstanceID,
                  const GUID* ManagedPdbSignature,
                  const unsigned int ManagedPdbAge,
                  PCWSTR ManagedPdbBuildPath,
                  const GUID* NativePdbSignature,
                  const unsigned int NativePdbAge,
                  PCWSTR NativePdbBuildPath
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledModuleLoad_V2()){ return ERROR_SUCCESS;};
    INT ModuleILPath_path_size = -1;
    INT ModuleILPath_full_name_path_size = PAL_wcslen(ModuleILPath) + 1;
    CHAR* ModuleILPath_full_name=NULL;
    INT ModuleNativePath_path_size = -1;
    INT ModuleNativePath_full_name_path_size = PAL_wcslen(ModuleNativePath) + 1;
    CHAR* ModuleNativePath_full_name=NULL;
    INT ManagedPdbBuildPath_path_size = -1;
    INT ManagedPdbBuildPath_full_name_path_size = PAL_wcslen(ManagedPdbBuildPath) + 1;
    CHAR* ManagedPdbBuildPath_full_name=NULL;
    INT NativePdbBuildPath_path_size = -1;
    INT NativePdbBuildPath_full_name_path_size = PAL_wcslen(NativePdbBuildPath) + 1;
    CHAR* NativePdbBuildPath_full_name=NULL;

    ModuleILPath_full_name = (CHAR*)malloc(ModuleILPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleILPath_full_name != NULL);
    if(ModuleILPath_full_name == NULL){goto LExit;}

    ModuleILPath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleILPath, -1, ModuleILPath_full_name, ModuleILPath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleILPath_path_size == ModuleILPath_full_name_path_size );
    if( ModuleILPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ModuleNativePath_full_name = (CHAR*)malloc(ModuleNativePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleNativePath_full_name != NULL);
    if(ModuleNativePath_full_name == NULL){goto LExit;}

    ModuleNativePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleNativePath, -1, ModuleNativePath_full_name, ModuleNativePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleNativePath_path_size == ModuleNativePath_full_name_path_size );
    if( ModuleNativePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ManagedPdbBuildPath_full_name = (CHAR*)malloc(ManagedPdbBuildPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ManagedPdbBuildPath_full_name != NULL);
    if(ManagedPdbBuildPath_full_name == NULL){goto LExit;}

    ManagedPdbBuildPath_path_size = WideCharToMultiByte( CP_ACP, 0, ManagedPdbBuildPath, -1, ManagedPdbBuildPath_full_name, ManagedPdbBuildPath_full_name_path_size, NULL, NULL );
    _ASSERTE(ManagedPdbBuildPath_path_size == ManagedPdbBuildPath_full_name_path_size );
    if( ManagedPdbBuildPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    NativePdbBuildPath_full_name = (CHAR*)malloc(NativePdbBuildPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(NativePdbBuildPath_full_name != NULL);
    if(NativePdbBuildPath_full_name == NULL){goto LExit;}

    NativePdbBuildPath_path_size = WideCharToMultiByte( CP_ACP, 0, NativePdbBuildPath, -1, NativePdbBuildPath_full_name, NativePdbBuildPath_full_name_path_size, NULL, NULL );
    _ASSERTE(NativePdbBuildPath_path_size == NativePdbBuildPath_full_name_path_size );
    if( NativePdbBuildPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                                    
     tracepoint(
        DotNETRuntime,
        ModuleLoad_V2,
        ModuleID,
        AssemblyID,
        ModuleFlags,
        Reserved1,
        ModuleILPath_full_name,
        ModuleNativePath_full_name,
        ClrInstanceID,
        (const int*) ManagedPdbSignature,
        ManagedPdbAge,
        ManagedPdbBuildPath_full_name
        );

     tracepoint(
        DotNETRuntime,
        ModuleLoad_V2_1,
        (const int*) NativePdbSignature,
        NativePdbAge,
        NativePdbBuildPath_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (NativePdbBuildPath_full_name != NULL) {free(NativePdbBuildPath_full_name);}
        if (ManagedPdbBuildPath_full_name != NULL) {free(ManagedPdbBuildPath_full_name);}
        if (ModuleNativePath_full_name != NULL) {free(ModuleNativePath_full_name);}
        if (ModuleILPath_full_name != NULL) {free(ModuleILPath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledModuleUnload(){ return TRUE;}
extern "C" ULONG  FireEtwModuleUnload(
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 AssemblyID,
                  const unsigned int ModuleFlags,
                  const unsigned int Reserved1,
                  PCWSTR ModuleILPath,
                  PCWSTR ModuleNativePath
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledModuleUnload()){ return ERROR_SUCCESS;};
    INT ModuleILPath_path_size = -1;
    INT ModuleILPath_full_name_path_size = PAL_wcslen(ModuleILPath) + 1;
    CHAR* ModuleILPath_full_name=NULL;
    INT ModuleNativePath_path_size = -1;
    INT ModuleNativePath_full_name_path_size = PAL_wcslen(ModuleNativePath) + 1;
    CHAR* ModuleNativePath_full_name=NULL;

    ModuleILPath_full_name = (CHAR*)malloc(ModuleILPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleILPath_full_name != NULL);
    if(ModuleILPath_full_name == NULL){goto LExit;}

    ModuleILPath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleILPath, -1, ModuleILPath_full_name, ModuleILPath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleILPath_path_size == ModuleILPath_full_name_path_size );
    if( ModuleILPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ModuleNativePath_full_name = (CHAR*)malloc(ModuleNativePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleNativePath_full_name != NULL);
    if(ModuleNativePath_full_name == NULL){goto LExit;}

    ModuleNativePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleNativePath, -1, ModuleNativePath_full_name, ModuleNativePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleNativePath_path_size == ModuleNativePath_full_name_path_size );
    if( ModuleNativePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        ModuleUnload,
        ModuleID,
        AssemblyID,
        ModuleFlags,
        Reserved1,
        ModuleILPath_full_name,
        ModuleNativePath_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ModuleNativePath_full_name != NULL) {free(ModuleNativePath_full_name);}
        if (ModuleILPath_full_name != NULL) {free(ModuleILPath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledModuleUnload_V1(){ return TRUE;}
extern "C" ULONG  FireEtwModuleUnload_V1(
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 AssemblyID,
                  const unsigned int ModuleFlags,
                  const unsigned int Reserved1,
                  PCWSTR ModuleILPath,
                  PCWSTR ModuleNativePath,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledModuleUnload_V1()){ return ERROR_SUCCESS;};
    INT ModuleILPath_path_size = -1;
    INT ModuleILPath_full_name_path_size = PAL_wcslen(ModuleILPath) + 1;
    CHAR* ModuleILPath_full_name=NULL;
    INT ModuleNativePath_path_size = -1;
    INT ModuleNativePath_full_name_path_size = PAL_wcslen(ModuleNativePath) + 1;
    CHAR* ModuleNativePath_full_name=NULL;

    ModuleILPath_full_name = (CHAR*)malloc(ModuleILPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleILPath_full_name != NULL);
    if(ModuleILPath_full_name == NULL){goto LExit;}

    ModuleILPath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleILPath, -1, ModuleILPath_full_name, ModuleILPath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleILPath_path_size == ModuleILPath_full_name_path_size );
    if( ModuleILPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ModuleNativePath_full_name = (CHAR*)malloc(ModuleNativePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleNativePath_full_name != NULL);
    if(ModuleNativePath_full_name == NULL){goto LExit;}

    ModuleNativePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleNativePath, -1, ModuleNativePath_full_name, ModuleNativePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleNativePath_path_size == ModuleNativePath_full_name_path_size );
    if( ModuleNativePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        ModuleUnload_V1,
        ModuleID,
        AssemblyID,
        ModuleFlags,
        Reserved1,
        ModuleILPath_full_name,
        ModuleNativePath_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ModuleNativePath_full_name != NULL) {free(ModuleNativePath_full_name);}
        if (ModuleILPath_full_name != NULL) {free(ModuleILPath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledModuleUnload_V2(){ return TRUE;}
extern "C" ULONG  FireEtwModuleUnload_V2(
                  const unsigned __int64 ModuleID,
                  const unsigned __int64 AssemblyID,
                  const unsigned int ModuleFlags,
                  const unsigned int Reserved1,
                  PCWSTR ModuleILPath,
                  PCWSTR ModuleNativePath,
                  const unsigned short ClrInstanceID,
                  const GUID* ManagedPdbSignature,
                  const unsigned int ManagedPdbAge,
                  PCWSTR ManagedPdbBuildPath,
                  const GUID* NativePdbSignature,
                  const unsigned int NativePdbAge,
                  PCWSTR NativePdbBuildPath
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledModuleUnload_V2()){ return ERROR_SUCCESS;};
    INT ModuleILPath_path_size = -1;
    INT ModuleILPath_full_name_path_size = PAL_wcslen(ModuleILPath) + 1;
    CHAR* ModuleILPath_full_name=NULL;
    INT ModuleNativePath_path_size = -1;
    INT ModuleNativePath_full_name_path_size = PAL_wcslen(ModuleNativePath) + 1;
    CHAR* ModuleNativePath_full_name=NULL;
    INT ManagedPdbBuildPath_path_size = -1;
    INT ManagedPdbBuildPath_full_name_path_size = PAL_wcslen(ManagedPdbBuildPath) + 1;
    CHAR* ManagedPdbBuildPath_full_name=NULL;
    INT NativePdbBuildPath_path_size = -1;
    INT NativePdbBuildPath_full_name_path_size = PAL_wcslen(NativePdbBuildPath) + 1;
    CHAR* NativePdbBuildPath_full_name=NULL;

    ModuleILPath_full_name = (CHAR*)malloc(ModuleILPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleILPath_full_name != NULL);
    if(ModuleILPath_full_name == NULL){goto LExit;}

    ModuleILPath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleILPath, -1, ModuleILPath_full_name, ModuleILPath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleILPath_path_size == ModuleILPath_full_name_path_size );
    if( ModuleILPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ModuleNativePath_full_name = (CHAR*)malloc(ModuleNativePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModuleNativePath_full_name != NULL);
    if(ModuleNativePath_full_name == NULL){goto LExit;}

    ModuleNativePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModuleNativePath, -1, ModuleNativePath_full_name, ModuleNativePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModuleNativePath_path_size == ModuleNativePath_full_name_path_size );
    if( ModuleNativePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    ManagedPdbBuildPath_full_name = (CHAR*)malloc(ManagedPdbBuildPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ManagedPdbBuildPath_full_name != NULL);
    if(ManagedPdbBuildPath_full_name == NULL){goto LExit;}

    ManagedPdbBuildPath_path_size = WideCharToMultiByte( CP_ACP, 0, ManagedPdbBuildPath, -1, ManagedPdbBuildPath_full_name, ManagedPdbBuildPath_full_name_path_size, NULL, NULL );
    _ASSERTE(ManagedPdbBuildPath_path_size == ManagedPdbBuildPath_full_name_path_size );
    if( ManagedPdbBuildPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    NativePdbBuildPath_full_name = (CHAR*)malloc(NativePdbBuildPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(NativePdbBuildPath_full_name != NULL);
    if(NativePdbBuildPath_full_name == NULL){goto LExit;}

    NativePdbBuildPath_path_size = WideCharToMultiByte( CP_ACP, 0, NativePdbBuildPath, -1, NativePdbBuildPath_full_name, NativePdbBuildPath_full_name_path_size, NULL, NULL );
    _ASSERTE(NativePdbBuildPath_path_size == NativePdbBuildPath_full_name_path_size );
    if( NativePdbBuildPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                                    
     tracepoint(
        DotNETRuntime,
        ModuleUnload_V2,
        ModuleID,
        AssemblyID,
        ModuleFlags,
        Reserved1,
        ModuleILPath_full_name,
        ModuleNativePath_full_name,
        ClrInstanceID,
        (const int*) ManagedPdbSignature,
        ManagedPdbAge,
        ManagedPdbBuildPath_full_name
        );

     tracepoint(
        DotNETRuntime,
        ModuleUnload_V2_1,
        (const int*) NativePdbSignature,
        NativePdbAge,
        NativePdbBuildPath_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (NativePdbBuildPath_full_name != NULL) {free(NativePdbBuildPath_full_name);}
        if (ManagedPdbBuildPath_full_name != NULL) {free(ManagedPdbBuildPath_full_name);}
        if (ModuleNativePath_full_name != NULL) {free(ModuleNativePath_full_name);}
        if (ModuleILPath_full_name != NULL) {free(ModuleILPath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledAssemblyLoad(){ return TRUE;}
extern "C" ULONG  FireEtwAssemblyLoad(
                  const unsigned __int64 AssemblyID,
                  const unsigned __int64 AppDomainID,
                  const unsigned int AssemblyFlags,
                  PCWSTR FullyQualifiedAssemblyName
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAssemblyLoad()){ return ERROR_SUCCESS;};
    INT FullyQualifiedAssemblyName_path_size = -1;
    INT FullyQualifiedAssemblyName_full_name_path_size = PAL_wcslen(FullyQualifiedAssemblyName) + 1;
    CHAR* FullyQualifiedAssemblyName_full_name=NULL;

    FullyQualifiedAssemblyName_full_name = (CHAR*)malloc(FullyQualifiedAssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(FullyQualifiedAssemblyName_full_name != NULL);
    if(FullyQualifiedAssemblyName_full_name == NULL){goto LExit;}

    FullyQualifiedAssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, FullyQualifiedAssemblyName, -1, FullyQualifiedAssemblyName_full_name, FullyQualifiedAssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(FullyQualifiedAssemblyName_path_size == FullyQualifiedAssemblyName_full_name_path_size );
    if( FullyQualifiedAssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        AssemblyLoad,
        AssemblyID,
        AppDomainID,
        AssemblyFlags,
        FullyQualifiedAssemblyName_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (FullyQualifiedAssemblyName_full_name != NULL) {free(FullyQualifiedAssemblyName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledAssemblyLoad_V1(){ return TRUE;}
extern "C" ULONG  FireEtwAssemblyLoad_V1(
                  const unsigned __int64 AssemblyID,
                  const unsigned __int64 AppDomainID,
                  const unsigned __int64 BindingID,
                  const unsigned int AssemblyFlags,
                  PCWSTR FullyQualifiedAssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAssemblyLoad_V1()){ return ERROR_SUCCESS;};
    INT FullyQualifiedAssemblyName_path_size = -1;
    INT FullyQualifiedAssemblyName_full_name_path_size = PAL_wcslen(FullyQualifiedAssemblyName) + 1;
    CHAR* FullyQualifiedAssemblyName_full_name=NULL;

    FullyQualifiedAssemblyName_full_name = (CHAR*)malloc(FullyQualifiedAssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(FullyQualifiedAssemblyName_full_name != NULL);
    if(FullyQualifiedAssemblyName_full_name == NULL){goto LExit;}

    FullyQualifiedAssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, FullyQualifiedAssemblyName, -1, FullyQualifiedAssemblyName_full_name, FullyQualifiedAssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(FullyQualifiedAssemblyName_path_size == FullyQualifiedAssemblyName_full_name_path_size );
    if( FullyQualifiedAssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        AssemblyLoad_V1,
        AssemblyID,
        AppDomainID,
        BindingID,
        AssemblyFlags,
        FullyQualifiedAssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (FullyQualifiedAssemblyName_full_name != NULL) {free(FullyQualifiedAssemblyName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledAssemblyUnload(){ return TRUE;}
extern "C" ULONG  FireEtwAssemblyUnload(
                  const unsigned __int64 AssemblyID,
                  const unsigned __int64 AppDomainID,
                  const unsigned int AssemblyFlags,
                  PCWSTR FullyQualifiedAssemblyName
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAssemblyUnload()){ return ERROR_SUCCESS;};
    INT FullyQualifiedAssemblyName_path_size = -1;
    INT FullyQualifiedAssemblyName_full_name_path_size = PAL_wcslen(FullyQualifiedAssemblyName) + 1;
    CHAR* FullyQualifiedAssemblyName_full_name=NULL;

    FullyQualifiedAssemblyName_full_name = (CHAR*)malloc(FullyQualifiedAssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(FullyQualifiedAssemblyName_full_name != NULL);
    if(FullyQualifiedAssemblyName_full_name == NULL){goto LExit;}

    FullyQualifiedAssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, FullyQualifiedAssemblyName, -1, FullyQualifiedAssemblyName_full_name, FullyQualifiedAssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(FullyQualifiedAssemblyName_path_size == FullyQualifiedAssemblyName_full_name_path_size );
    if( FullyQualifiedAssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        AssemblyUnload,
        AssemblyID,
        AppDomainID,
        AssemblyFlags,
        FullyQualifiedAssemblyName_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (FullyQualifiedAssemblyName_full_name != NULL) {free(FullyQualifiedAssemblyName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledAssemblyUnload_V1(){ return TRUE;}
extern "C" ULONG  FireEtwAssemblyUnload_V1(
                  const unsigned __int64 AssemblyID,
                  const unsigned __int64 AppDomainID,
                  const unsigned __int64 BindingID,
                  const unsigned int AssemblyFlags,
                  PCWSTR FullyQualifiedAssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAssemblyUnload_V1()){ return ERROR_SUCCESS;};
    INT FullyQualifiedAssemblyName_path_size = -1;
    INT FullyQualifiedAssemblyName_full_name_path_size = PAL_wcslen(FullyQualifiedAssemblyName) + 1;
    CHAR* FullyQualifiedAssemblyName_full_name=NULL;

    FullyQualifiedAssemblyName_full_name = (CHAR*)malloc(FullyQualifiedAssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(FullyQualifiedAssemblyName_full_name != NULL);
    if(FullyQualifiedAssemblyName_full_name == NULL){goto LExit;}

    FullyQualifiedAssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, FullyQualifiedAssemblyName, -1, FullyQualifiedAssemblyName_full_name, FullyQualifiedAssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(FullyQualifiedAssemblyName_path_size == FullyQualifiedAssemblyName_full_name_path_size );
    if( FullyQualifiedAssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        AssemblyUnload_V1,
        AssemblyID,
        AppDomainID,
        BindingID,
        AssemblyFlags,
        FullyQualifiedAssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (FullyQualifiedAssemblyName_full_name != NULL) {free(FullyQualifiedAssemblyName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledAppDomainLoad(){ return TRUE;}
extern "C" ULONG  FireEtwAppDomainLoad(
                  const unsigned __int64 AppDomainID,
                  const unsigned int AppDomainFlags,
                  PCWSTR AppDomainName
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAppDomainLoad()){ return ERROR_SUCCESS;};
    INT AppDomainName_path_size = -1;
    INT AppDomainName_full_name_path_size = PAL_wcslen(AppDomainName) + 1;
    CHAR* AppDomainName_full_name=NULL;

    AppDomainName_full_name = (CHAR*)malloc(AppDomainName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AppDomainName_full_name != NULL);
    if(AppDomainName_full_name == NULL){goto LExit;}

    AppDomainName_path_size = WideCharToMultiByte( CP_ACP, 0, AppDomainName, -1, AppDomainName_full_name, AppDomainName_full_name_path_size, NULL, NULL );
    _ASSERTE(AppDomainName_path_size == AppDomainName_full_name_path_size );
    if( AppDomainName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        AppDomainLoad,
        AppDomainID,
        AppDomainFlags,
        AppDomainName_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AppDomainName_full_name != NULL) {free(AppDomainName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledAppDomainLoad_V1(){ return TRUE;}
extern "C" ULONG  FireEtwAppDomainLoad_V1(
                  const unsigned __int64 AppDomainID,
                  const unsigned int AppDomainFlags,
                  PCWSTR AppDomainName,
                  const unsigned int AppDomainIndex,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAppDomainLoad_V1()){ return ERROR_SUCCESS;};
    INT AppDomainName_path_size = -1;
    INT AppDomainName_full_name_path_size = PAL_wcslen(AppDomainName) + 1;
    CHAR* AppDomainName_full_name=NULL;

    AppDomainName_full_name = (CHAR*)malloc(AppDomainName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AppDomainName_full_name != NULL);
    if(AppDomainName_full_name == NULL){goto LExit;}

    AppDomainName_path_size = WideCharToMultiByte( CP_ACP, 0, AppDomainName, -1, AppDomainName_full_name, AppDomainName_full_name_path_size, NULL, NULL );
    _ASSERTE(AppDomainName_path_size == AppDomainName_full_name_path_size );
    if( AppDomainName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        AppDomainLoad_V1,
        AppDomainID,
        AppDomainFlags,
        AppDomainName_full_name,
        AppDomainIndex,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AppDomainName_full_name != NULL) {free(AppDomainName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledAppDomainUnload(){ return TRUE;}
extern "C" ULONG  FireEtwAppDomainUnload(
                  const unsigned __int64 AppDomainID,
                  const unsigned int AppDomainFlags,
                  PCWSTR AppDomainName
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAppDomainUnload()){ return ERROR_SUCCESS;};
    INT AppDomainName_path_size = -1;
    INT AppDomainName_full_name_path_size = PAL_wcslen(AppDomainName) + 1;
    CHAR* AppDomainName_full_name=NULL;

    AppDomainName_full_name = (CHAR*)malloc(AppDomainName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AppDomainName_full_name != NULL);
    if(AppDomainName_full_name == NULL){goto LExit;}

    AppDomainName_path_size = WideCharToMultiByte( CP_ACP, 0, AppDomainName, -1, AppDomainName_full_name, AppDomainName_full_name_path_size, NULL, NULL );
    _ASSERTE(AppDomainName_path_size == AppDomainName_full_name_path_size );
    if( AppDomainName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        AppDomainUnload,
        AppDomainID,
        AppDomainFlags,
        AppDomainName_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AppDomainName_full_name != NULL) {free(AppDomainName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledAppDomainUnload_V1(){ return TRUE;}
extern "C" ULONG  FireEtwAppDomainUnload_V1(
                  const unsigned __int64 AppDomainID,
                  const unsigned int AppDomainFlags,
                  PCWSTR AppDomainName,
                  const unsigned int AppDomainIndex,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAppDomainUnload_V1()){ return ERROR_SUCCESS;};
    INT AppDomainName_path_size = -1;
    INT AppDomainName_full_name_path_size = PAL_wcslen(AppDomainName) + 1;
    CHAR* AppDomainName_full_name=NULL;

    AppDomainName_full_name = (CHAR*)malloc(AppDomainName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(AppDomainName_full_name != NULL);
    if(AppDomainName_full_name == NULL){goto LExit;}

    AppDomainName_path_size = WideCharToMultiByte( CP_ACP, 0, AppDomainName, -1, AppDomainName_full_name, AppDomainName_full_name_path_size, NULL, NULL );
    _ASSERTE(AppDomainName_path_size == AppDomainName_full_name_path_size );
    if( AppDomainName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        AppDomainUnload_V1,
        AppDomainID,
        AppDomainFlags,
        AppDomainName_full_name,
        AppDomainIndex,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (AppDomainName_full_name != NULL) {free(AppDomainName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledModuleRangeLoad(){ return TRUE;}
extern "C" ULONG  FireEtwModuleRangeLoad(
                  const unsigned short ClrInstanceID,
                  const unsigned __int64 ModuleID,
                  const unsigned int RangeBegin,
                  const unsigned int RangeSize,
                  const unsigned char RangeType
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledModuleRangeLoad()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        ModuleRangeLoad,
        ClrInstanceID,
        ModuleID,
        RangeBegin,
        RangeSize,
        RangeType
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledStrongNameVerificationStart(){ return TRUE;}
extern "C" ULONG  FireEtwStrongNameVerificationStart(
                  const unsigned int VerificationFlags,
                  const unsigned int ErrorCode,
                  PCWSTR FullyQualifiedAssemblyName
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledStrongNameVerificationStart()){ return ERROR_SUCCESS;};
    INT FullyQualifiedAssemblyName_path_size = -1;
    INT FullyQualifiedAssemblyName_full_name_path_size = PAL_wcslen(FullyQualifiedAssemblyName) + 1;
    CHAR* FullyQualifiedAssemblyName_full_name=NULL;

    FullyQualifiedAssemblyName_full_name = (CHAR*)malloc(FullyQualifiedAssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(FullyQualifiedAssemblyName_full_name != NULL);
    if(FullyQualifiedAssemblyName_full_name == NULL){goto LExit;}

    FullyQualifiedAssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, FullyQualifiedAssemblyName, -1, FullyQualifiedAssemblyName_full_name, FullyQualifiedAssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(FullyQualifiedAssemblyName_path_size == FullyQualifiedAssemblyName_full_name_path_size );
    if( FullyQualifiedAssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        StrongNameVerificationStart,
        VerificationFlags,
        ErrorCode,
        FullyQualifiedAssemblyName_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (FullyQualifiedAssemblyName_full_name != NULL) {free(FullyQualifiedAssemblyName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledStrongNameVerificationStart_V1(){ return TRUE;}
extern "C" ULONG  FireEtwStrongNameVerificationStart_V1(
                  const unsigned int VerificationFlags,
                  const unsigned int ErrorCode,
                  PCWSTR FullyQualifiedAssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledStrongNameVerificationStart_V1()){ return ERROR_SUCCESS;};
    INT FullyQualifiedAssemblyName_path_size = -1;
    INT FullyQualifiedAssemblyName_full_name_path_size = PAL_wcslen(FullyQualifiedAssemblyName) + 1;
    CHAR* FullyQualifiedAssemblyName_full_name=NULL;

    FullyQualifiedAssemblyName_full_name = (CHAR*)malloc(FullyQualifiedAssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(FullyQualifiedAssemblyName_full_name != NULL);
    if(FullyQualifiedAssemblyName_full_name == NULL){goto LExit;}

    FullyQualifiedAssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, FullyQualifiedAssemblyName, -1, FullyQualifiedAssemblyName_full_name, FullyQualifiedAssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(FullyQualifiedAssemblyName_path_size == FullyQualifiedAssemblyName_full_name_path_size );
    if( FullyQualifiedAssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        StrongNameVerificationStart_V1,
        VerificationFlags,
        ErrorCode,
        FullyQualifiedAssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (FullyQualifiedAssemblyName_full_name != NULL) {free(FullyQualifiedAssemblyName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledStrongNameVerificationStop(){ return TRUE;}
extern "C" ULONG  FireEtwStrongNameVerificationStop(
                  const unsigned int VerificationFlags,
                  const unsigned int ErrorCode,
                  PCWSTR FullyQualifiedAssemblyName
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledStrongNameVerificationStop()){ return ERROR_SUCCESS;};
    INT FullyQualifiedAssemblyName_path_size = -1;
    INT FullyQualifiedAssemblyName_full_name_path_size = PAL_wcslen(FullyQualifiedAssemblyName) + 1;
    CHAR* FullyQualifiedAssemblyName_full_name=NULL;

    FullyQualifiedAssemblyName_full_name = (CHAR*)malloc(FullyQualifiedAssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(FullyQualifiedAssemblyName_full_name != NULL);
    if(FullyQualifiedAssemblyName_full_name == NULL){goto LExit;}

    FullyQualifiedAssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, FullyQualifiedAssemblyName, -1, FullyQualifiedAssemblyName_full_name, FullyQualifiedAssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(FullyQualifiedAssemblyName_path_size == FullyQualifiedAssemblyName_full_name_path_size );
    if( FullyQualifiedAssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        StrongNameVerificationStop,
        VerificationFlags,
        ErrorCode,
        FullyQualifiedAssemblyName_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (FullyQualifiedAssemblyName_full_name != NULL) {free(FullyQualifiedAssemblyName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledStrongNameVerificationStop_V1(){ return TRUE;}
extern "C" ULONG  FireEtwStrongNameVerificationStop_V1(
                  const unsigned int VerificationFlags,
                  const unsigned int ErrorCode,
                  PCWSTR FullyQualifiedAssemblyName,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledStrongNameVerificationStop_V1()){ return ERROR_SUCCESS;};
    INT FullyQualifiedAssemblyName_path_size = -1;
    INT FullyQualifiedAssemblyName_full_name_path_size = PAL_wcslen(FullyQualifiedAssemblyName) + 1;
    CHAR* FullyQualifiedAssemblyName_full_name=NULL;

    FullyQualifiedAssemblyName_full_name = (CHAR*)malloc(FullyQualifiedAssemblyName_full_name_path_size*sizeof(CHAR));
    _ASSERTE(FullyQualifiedAssemblyName_full_name != NULL);
    if(FullyQualifiedAssemblyName_full_name == NULL){goto LExit;}

    FullyQualifiedAssemblyName_path_size = WideCharToMultiByte( CP_ACP, 0, FullyQualifiedAssemblyName, -1, FullyQualifiedAssemblyName_full_name, FullyQualifiedAssemblyName_full_name_path_size, NULL, NULL );
    _ASSERTE(FullyQualifiedAssemblyName_path_size == FullyQualifiedAssemblyName_full_name_path_size );
    if( FullyQualifiedAssemblyName_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        StrongNameVerificationStop_V1,
        VerificationFlags,
        ErrorCode,
        FullyQualifiedAssemblyName_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (FullyQualifiedAssemblyName_full_name != NULL) {free(FullyQualifiedAssemblyName_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledAuthenticodeVerificationStart(){ return TRUE;}
extern "C" ULONG  FireEtwAuthenticodeVerificationStart(
                  const unsigned int VerificationFlags,
                  const unsigned int ErrorCode,
                  PCWSTR ModulePath
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAuthenticodeVerificationStart()){ return ERROR_SUCCESS;};
    INT ModulePath_path_size = -1;
    INT ModulePath_full_name_path_size = PAL_wcslen(ModulePath) + 1;
    CHAR* ModulePath_full_name=NULL;

    ModulePath_full_name = (CHAR*)malloc(ModulePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModulePath_full_name != NULL);
    if(ModulePath_full_name == NULL){goto LExit;}

    ModulePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModulePath, -1, ModulePath_full_name, ModulePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModulePath_path_size == ModulePath_full_name_path_size );
    if( ModulePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        AuthenticodeVerificationStart,
        VerificationFlags,
        ErrorCode,
        ModulePath_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ModulePath_full_name != NULL) {free(ModulePath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledAuthenticodeVerificationStart_V1(){ return TRUE;}
extern "C" ULONG  FireEtwAuthenticodeVerificationStart_V1(
                  const unsigned int VerificationFlags,
                  const unsigned int ErrorCode,
                  PCWSTR ModulePath,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAuthenticodeVerificationStart_V1()){ return ERROR_SUCCESS;};
    INT ModulePath_path_size = -1;
    INT ModulePath_full_name_path_size = PAL_wcslen(ModulePath) + 1;
    CHAR* ModulePath_full_name=NULL;

    ModulePath_full_name = (CHAR*)malloc(ModulePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModulePath_full_name != NULL);
    if(ModulePath_full_name == NULL){goto LExit;}

    ModulePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModulePath, -1, ModulePath_full_name, ModulePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModulePath_path_size == ModulePath_full_name_path_size );
    if( ModulePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        AuthenticodeVerificationStart_V1,
        VerificationFlags,
        ErrorCode,
        ModulePath_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ModulePath_full_name != NULL) {free(ModulePath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledAuthenticodeVerificationStop(){ return TRUE;}
extern "C" ULONG  FireEtwAuthenticodeVerificationStop(
                  const unsigned int VerificationFlags,
                  const unsigned int ErrorCode,
                  PCWSTR ModulePath
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAuthenticodeVerificationStop()){ return ERROR_SUCCESS;};
    INT ModulePath_path_size = -1;
    INT ModulePath_full_name_path_size = PAL_wcslen(ModulePath) + 1;
    CHAR* ModulePath_full_name=NULL;

    ModulePath_full_name = (CHAR*)malloc(ModulePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModulePath_full_name != NULL);
    if(ModulePath_full_name == NULL){goto LExit;}

    ModulePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModulePath, -1, ModulePath_full_name, ModulePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModulePath_path_size == ModulePath_full_name_path_size );
    if( ModulePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        AuthenticodeVerificationStop,
        VerificationFlags,
        ErrorCode,
        ModulePath_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ModulePath_full_name != NULL) {free(ModulePath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledAuthenticodeVerificationStop_V1(){ return TRUE;}
extern "C" ULONG  FireEtwAuthenticodeVerificationStop_V1(
                  const unsigned int VerificationFlags,
                  const unsigned int ErrorCode,
                  PCWSTR ModulePath,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledAuthenticodeVerificationStop_V1()){ return ERROR_SUCCESS;};
    INT ModulePath_path_size = -1;
    INT ModulePath_full_name_path_size = PAL_wcslen(ModulePath) + 1;
    CHAR* ModulePath_full_name=NULL;

    ModulePath_full_name = (CHAR*)malloc(ModulePath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(ModulePath_full_name != NULL);
    if(ModulePath_full_name == NULL){goto LExit;}

    ModulePath_path_size = WideCharToMultiByte( CP_ACP, 0, ModulePath, -1, ModulePath_full_name, ModulePath_full_name_path_size, NULL, NULL );
    _ASSERTE(ModulePath_path_size == ModulePath_full_name_path_size );
    if( ModulePath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                
     tracepoint(
        DotNETRuntime,
        AuthenticodeVerificationStop_V1,
        VerificationFlags,
        ErrorCode,
        ModulePath_full_name,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;
LExit:
        if (ModulePath_full_name != NULL) {free(ModulePath_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledRuntimeInformationStart(){ return TRUE;}
extern "C" ULONG  FireEtwRuntimeInformationStart(
                  const unsigned short ClrInstanceID,
                  const unsigned short Sku,
                  const unsigned short BclMajorVersion,
                  const unsigned short BclMinorVersion,
                  const unsigned short BclBuildNumber,
                  const unsigned short BclQfeNumber,
                  const unsigned short VMMajorVersion,
                  const unsigned short VMMinorVersion,
                  const unsigned short VMBuildNumber,
                  const unsigned short VMQfeNumber,
                  const unsigned int StartupFlags,
                  const unsigned char StartupMode,
                  PCWSTR CommandLine,
                  const GUID* ComObjectGuid,
                  PCWSTR RuntimeDllPath
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledRuntimeInformationStart()){ return ERROR_SUCCESS;};
    INT CommandLine_path_size = -1;
    INT CommandLine_full_name_path_size = PAL_wcslen(CommandLine) + 1;
    CHAR* CommandLine_full_name=NULL;
    INT RuntimeDllPath_path_size = -1;
    INT RuntimeDllPath_full_name_path_size = PAL_wcslen(RuntimeDllPath) + 1;
    CHAR* RuntimeDllPath_full_name=NULL;

    CommandLine_full_name = (CHAR*)malloc(CommandLine_full_name_path_size*sizeof(CHAR));
    _ASSERTE(CommandLine_full_name != NULL);
    if(CommandLine_full_name == NULL){goto LExit;}

    CommandLine_path_size = WideCharToMultiByte( CP_ACP, 0, CommandLine, -1, CommandLine_full_name, CommandLine_full_name_path_size, NULL, NULL );
    _ASSERTE(CommandLine_path_size == CommandLine_full_name_path_size );
    if( CommandLine_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
    RuntimeDllPath_full_name = (CHAR*)malloc(RuntimeDllPath_full_name_path_size*sizeof(CHAR));
    _ASSERTE(RuntimeDllPath_full_name != NULL);
    if(RuntimeDllPath_full_name == NULL){goto LExit;}

    RuntimeDllPath_path_size = WideCharToMultiByte( CP_ACP, 0, RuntimeDllPath, -1, RuntimeDllPath_full_name, RuntimeDllPath_full_name_path_size, NULL, NULL );
    _ASSERTE(RuntimeDllPath_path_size == RuntimeDllPath_full_name_path_size );
    if( RuntimeDllPath_path_size == 0 ){ Error = ERROR_INVALID_PARAMETER; goto LExit;}
                                                    
     tracepoint(
        DotNETRuntime,
        RuntimeInformationStart,
        ClrInstanceID,
        Sku,
        BclMajorVersion,
        BclMinorVersion,
        BclBuildNumber,
        BclQfeNumber,
        VMMajorVersion,
        VMMinorVersion,
        VMBuildNumber,
        VMQfeNumber
        );

     tracepoint(
        DotNETRuntime,
        RuntimeInformationStart_1,
        StartupFlags,
        StartupMode,
        CommandLine_full_name,
        (const int*) ComObjectGuid,
        RuntimeDllPath_full_name
        );

        Error = ERROR_SUCCESS;
LExit:
        if (RuntimeDllPath_full_name != NULL) {free(RuntimeDllPath_full_name);}
        if (CommandLine_full_name != NULL) {free(CommandLine_full_name);}

return Error;
}
extern "C" BOOL  EventEnabledIncreaseMemoryPressure(){ return TRUE;}
extern "C" ULONG  FireEtwIncreaseMemoryPressure(
                  const unsigned __int64 BytesAllocated,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledIncreaseMemoryPressure()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        IncreaseMemoryPressure,
        BytesAllocated,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledDecreaseMemoryPressure(){ return TRUE;}
extern "C" ULONG  FireEtwDecreaseMemoryPressure(
                  const unsigned __int64 BytesFreed,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledDecreaseMemoryPressure()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        DecreaseMemoryPressure,
        BytesFreed,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCMarkWithType(){ return TRUE;}
extern "C" ULONG  FireEtwGCMarkWithType(
                  const unsigned int HeapNum,
                  const unsigned short ClrInstanceID,
                  const unsigned int Type,
                  const unsigned __int64 Bytes
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCMarkWithType()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCMarkWithType,
        HeapNum,
        ClrInstanceID,
        Type,
        Bytes
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCJoin_V2(){ return TRUE;}
extern "C" ULONG  FireEtwGCJoin_V2(
                  const unsigned int Heap,
                  const unsigned int JoinTime,
                  const unsigned int JoinType,
                  const unsigned short ClrInstanceID,
                  const unsigned int JoinID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCJoin_V2()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCJoin_V2,
        Heap,
        JoinTime,
        JoinType,
        ClrInstanceID,
        JoinID
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCPerHeapHistory_V3(){ return TRUE;}
extern "C" ULONG  FireEtwGCPerHeapHistory_V3(
                  const unsigned short ClrInstanceID,
                  const void* FreeListAllocated,
                  const void* FreeListRejected,
                  const void* EndOfSegAllocated,
                  const void* CondemnedAllocated,
                  const void* PinnedAllocated,
                  const void* PinnedAllocatedAdvance,
                  const unsigned int RunningFreeListEfficiency,
                  const unsigned int CondemnReasons0,
                  const unsigned int CondemnReasons1,
                  const unsigned int CompactMechanisms,
                  const unsigned int ExpandMechanisms,
                  const unsigned int HeapIndex,
                  const void* ExtraGen0Commit,
                  const unsigned int Count,
                  const ULONG Arg15_Struct_Len_,
                  const void* Arg15_Struct_Pointer_
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCPerHeapHistory_V3()){ return ERROR_SUCCESS;};

                                                    
     tracepoint(
        DotNETRuntime,
        GCPerHeapHistory_V3,
        ClrInstanceID,
        (const size_t) FreeListAllocated,
        (const size_t) FreeListRejected,
        (const size_t) EndOfSegAllocated,
        (const size_t) CondemnedAllocated,
        (const size_t) PinnedAllocated,
        (const size_t) PinnedAllocatedAdvance,
        RunningFreeListEfficiency,
        CondemnReasons0,
        CondemnReasons1
        );

     tracepoint(
        DotNETRuntime,
        GCPerHeapHistory_V3_1,
        CompactMechanisms,
        ExpandMechanisms,
        HeapIndex,
        (const size_t) ExtraGen0Commit,
        Count,
        Arg15_Struct_Len_,
        (const int*) Arg15_Struct_Pointer_
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledGCGlobalHeapHistory_V2(){ return TRUE;}
extern "C" ULONG  FireEtwGCGlobalHeapHistory_V2(
                  const unsigned __int64 FinalYoungestDesired,
                  const signed int NumHeaps,
                  const unsigned int CondemnedGeneration,
                  const unsigned int Gen0ReductionCount,
                  const unsigned int Reason,
                  const unsigned int GlobalMechanisms,
                  const unsigned short ClrInstanceID,
                  const unsigned int PauseMode,
                  const unsigned int MemoryPressure
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledGCGlobalHeapHistory_V2()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        GCGlobalHeapHistory_V2,
        FinalYoungestDesired,
        NumHeaps,
        CondemnedGeneration,
        Gen0ReductionCount,
        Reason,
        GlobalMechanisms,
        ClrInstanceID,
        PauseMode,
        MemoryPressure
        );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledDebugIPCEventStart(){ return TRUE;}
extern "C" ULONG  FireEtwDebugIPCEventStart(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledDebugIPCEventStart()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        DebugIPCEventStart
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledDebugIPCEventEnd(){ return TRUE;}
extern "C" ULONG  FireEtwDebugIPCEventEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledDebugIPCEventEnd()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        DebugIPCEventEnd
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledDebugExceptionProcessingStart(){ return TRUE;}
extern "C" ULONG  FireEtwDebugExceptionProcessingStart(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledDebugExceptionProcessingStart()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        DebugExceptionProcessingStart
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledDebugExceptionProcessingEnd(){ return TRUE;}
extern "C" ULONG  FireEtwDebugExceptionProcessingEnd(
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledDebugExceptionProcessingEnd()){ return ERROR_SUCCESS;};
                                
     tracepoint(
        DotNETRuntime,
        DebugExceptionProcessingEnd
     );

        Error = ERROR_SUCCESS;

return Error;
}
extern "C" BOOL  EventEnabledCodeSymbols(){ return TRUE;}
extern "C" ULONG  FireEtwCodeSymbols(
                  const unsigned __int64 ModuleId,
                  const unsigned short TotalChunks,
                  const unsigned short ChunkNumber,
                  const unsigned int ChunkLength,
                  const BYTE* Chunk,
                  const unsigned short ClrInstanceID
)
{
  ULONG Error = ERROR_WRITE_FAULT;
    if (!EventEnabledCodeSymbols()){ return ERROR_SUCCESS;};

                                
     tracepoint(
        DotNETRuntime,
        CodeSymbols,
        ModuleId,
        TotalChunks,
        ChunkNumber,
        ChunkLength,
        (const BYTE*) Chunk,
        ClrInstanceID
        );

        Error = ERROR_SUCCESS;

return Error;
}
