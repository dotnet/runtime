//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information. 
//

//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//**********************************************************************`
#pragma once
#include <wmistr.h>
#include <evntrace.h>
#include "evntprov.h"
//
//  Initial Defs
//
#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION
#if  !defined(McGenDebug)
#define McGenDebug(a,b)
#endif 


#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level; 
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;

}
#endif

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{

    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);

}
#endif


//
// EnableCheckMacro
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled &&  McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Vista.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider. 

    ControlCode - The parameter indicates whether the provider 
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to 
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category 
                      of events that the provider writes. 

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider 
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;
 
        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif
   
    return;
}

#endif
#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION
//+
// Provider Microsoft-Windows-DotNETRuntime Event Count 159
//+
EXTERN_C __declspec(selectany) const GUID MICROSOFT_WINDOWS_DOTNETRUNTIME_PROVIDER = {0xe13c0d23, 0xccbc, 0x4e12, {0x93, 0x1b, 0xd9, 0xcc, 0x2e, 0xee, 0x27, 0xe4}};

//
// Opcodes
//
#define CLR_GC_RESTARTEEEND_OPCODE 0x84
#define CLR_GC_HEAPSTATS_OPCODE 0x85
#define CLR_GC_CREATESEGMENT_OPCODE 0x86
#define CLR_GC_FREESEGMENT_OPCODE 0x87
#define CLR_GC_RESTARTEEBEING_OPCODE 0x88
#define CLR_GC_SUSPENDEEND_OPCODE 0x89
#define CLR_GC_SUSPENDEEBEGIN_OPCODE 0xa
#define CLR_GC_ALLOCATIONTICK_OPCODE 0xb
#define CLR_GC_CREATECONCURRENTTHREAD_OPCODE 0xc
#define CLR_GC_TERMINATECONCURRENTTHREAD_OPCODE 0xd
#define CLR_GC_FINALIZERSEND_OPCODE 0xf
#define CLR_GC_FINALIZERSBEGIN_OPCODE 0x13
#define CLR_GC_BULKROOTEDGE_OPCODE 0x14
#define CLR_GC_BULKROOTCONDITIONALWEAKTABLEELEMENTEDGE_OPCODE 0x15
#define CLR_GC_BULKNODE_OPCODE 0x16
#define CLR_GC_BULKEDGE_OPCODE 0x17
#define CLR_GC_OBJECTALLOCATION_OPCODE 0x18
#define CLR_GC_BULKSURVIVINGOBJECTRANGES_OPCODE 0x19
#define CLR_GC_BULKMOVEDOBJECTRANGES_OPCODE 0x1a
#define CLR_GC_GENERATIONRANGE_OPCODE 0x1b
#define CLR_GC_MARKSTACKROOTS_OPCODE 0x1c
#define CLR_GC_MARKFINALIZEQUEUEROOTS_OPCODE 0x1d
#define CLR_GC_MARKHANDLES_OPCODE 0x1e
#define CLR_GC_MARKCARDS_OPCODE 0x1f
#define CLR_GC_FINALIZEOBJECT_OPCODE 0x20
#define CLR_GC_SETGCHANDLE_OPCODE 0x21
#define CLR_GC_DESTROYGCHANDLE_OPCODE 0x22
#define CLR_GC_TRIGGERED_OPCODE 0x23
#define CLR_GC_PINGCOBJECT_OPCODE 0x24
#define CLR_GC_BULKROOTCCW_OPCODE 0x26
#define CLR_GC_BULKRCW_OPCODE 0x27
#define CLR_GC_BULKROOTSTATICVAR_OPCODE 0x28
#define CLR_GC_INCREASEMEMORYPRESSURE_OPCODE 0xc8
#define CLR_GC_DECREASEMEMORYPRESSURE_OPCODE 0xc9
#define CLR_GC_MARK_OPCODE 0xca
#define CLR_GC_JOIN_OPCODE 0xcb
#define CLR_GC_GCPERHEAPHISTORY_OPCODE 0xcc
#define CLR_GC_GCGLOBALHEAPHISTORY_OPCODE 0xcd
#define CLR_METHOD_DCSTARTCOMPLETE_OPCODE 0xe
#define CLR_METHOD_DCENDCOMPLETE_OPCODE 0xf
#define CLR_METHOD_METHODLOAD_OPCODE 0x21
#define CLR_METHOD_METHODUNLOAD_OPCODE 0x22
#define CLR_METHOD_METHODDCSTART_OPCODE 0x23
#define CLR_METHOD_METHODDCEND_OPCODE 0x24
#define CLR_METHOD_METHODLOADVERBOSE_OPCODE 0x25
#define CLR_METHOD_METHODUNLOADVERBOSE_OPCODE 0x26
#define CLR_METHOD_METHODDCSTARTVERBOSE_OPCODE 0x27
#define CLR_METHOD_METHODDCENDVERBOSE_OPCODE 0x28
#define CLR_METHOD_METHODJITTINGSTARTED_OPCODE 0x2a
#define CLR_JITINLININGSUCCEEDED_OPCODE 0x53
#define CLR_JITINLININGFAILED_OPCODE 0x54
#define CLR_JITTAILCALLSUCCEEDED_OPCODE 0x55
#define CLR_JITTAILCALLFAILED_OPCODE 0x56
#define CLR_METHODILTONATIVEMAP_OPCODE 0x57
#define CLR_DOMAINMODULELOAD_OPCODE 0x2d
#define CLR_MODULELOAD_OPCODE 0x21
#define CLR_MODULEUNLOAD_OPCODE 0x22
#define CLR_MODULEDCSTART_OPCODE 0x23
#define CLR_MODULEDCEND_OPCODE 0x24
#define CLR_ASSEMBLYLOAD_OPCODE 0x25
#define CLR_ASSEMBLYUNLOAD_OPCODE 0x26
#define CLR_APPDOMAINLOAD_OPCODE 0x29
#define CLR_APPDOMAINUNLOAD_OPCODE 0x2a
#define CLR_STACK_STACKWALK_OPCODE 0x52
#define CLR_APPDOMAINRESOURCEMANAGEMENT_APPDOMAINMEMALLOCATED_OPCODE 0x30
#define CLR_APPDOMAINRESOURCEMANAGEMENT_APPDOMAINMEMSURVIVED_OPCODE 0x31
#define CLR_APPDOMAINRESOURCEMANAGEMENT_THREADCREATED_OPCODE 0x32
#define CLR_APPDOMAINRESOURCEMANAGEMENT_THREADTERMINATED_OPCODE 0x33
#define CLR_APPDOMAINRESOURCEMANAGEMENT_THREADDOMAINENTER_OPCODE 0x34
#define CLR_ILSTUB_ILSTUBGENERATED_OPCODE 0x58
#define CLR_ILSTUB_ILSTUBCACHEHIT_OPCODE 0x59
#define CLR_WAIT_OPCODE 0x5a
#define CLR_THREADPOOL_WORKERTHREADADJUSTMENT_SAMPLE_OPCODE 0x64
#define CLR_THREADPOOL_WORKERTHREADADJUSTMENT_ADJUSTMENT_OPCODE 0x65
#define CLR_THREADPOOL_WORKERTHREADADJUSTMENT_STATS_OPCODE 0x66
#define CLR_PERFTRACK_MODULERANGELOAD_OPCODE 0xa
#define CLR_BULKTYPE_OPCODE 0xa
#define CLR_ENQUEUE_OPCODE 0xb
#define CLR_DEQUEUE_OPCODE 0xc
#define CLR_IOENQUEUE_OPCODE 0xd
#define CLR_IODEQUEUE_OPCODE 0xe
#define CLR_IOPACK_OPCODE 0xf
#define CLR_THREAD_CREATING_OPCODE 0xb
#define CLR_THREAD_RUNNING_OPCODE 0xc

//
// Tasks
//
#define CLR_GC_TASK 0x1
EXTERN_C __declspec(selectany) const GUID GarbageCollectionId = {0x044973cd, 0x251f, 0x4dff, {0xa3, 0xe9, 0x9d, 0x63, 0x07, 0x28, 0x6b, 0x05}};
#define CLR_WORKERTHREADCREATE_TASK 0x2
EXTERN_C __declspec(selectany) const GUID WorkerThreadCreationId = {0xcfc4ba53, 0xfb42, 0x4757, {0x8b, 0x70, 0x5f, 0x5d, 0x51, 0xfe, 0xe2, 0xf4}};
#define CLR_IOTHREADCREATE_TASK 0x3
EXTERN_C __declspec(selectany) const GUID IOThreadCreationId = {0xc71408de, 0x42cc, 0x4f81, {0x9c, 0x93, 0xb8, 0x91, 0x2a, 0xbf, 0x2a, 0x0f}};
#define CLR_WORKERTHREADRETIRE_TASK 0x4
EXTERN_C __declspec(selectany) const GUID WorkerThreadRetirementId = {0xefdf1eac, 0x1d5d, 0x4e84, {0x89, 0x3a, 0x19, 0xb8, 0x0f, 0x69, 0x21, 0x76}};
#define CLR_IOTHREADRETIRE_TASK 0x5
EXTERN_C __declspec(selectany) const GUID IOThreadRetirementId = {0x840c8456, 0x6457, 0x4eb7, {0x9c, 0xd0, 0xd2, 0x8f, 0x01, 0xc6, 0x4f, 0x5e}};
#define CLR_THREADPOOLSUSPEND_TASK 0x6
EXTERN_C __declspec(selectany) const GUID ThreadpoolSuspensionId = {0xc424b3e3, 0x2ae0, 0x416e, {0xa0, 0x39, 0x41, 0x0c, 0x5d, 0x8e, 0x5f, 0x14}};
#define CLR_EXCEPTION_TASK 0x7
EXTERN_C __declspec(selectany) const GUID ExceptionId = {0x300ce105, 0x86d1, 0x41f8, {0xb9, 0xd2, 0x83, 0xfc, 0xbf, 0xf3, 0x2d, 0x99}};
#define CLR_CONTENTION_TASK 0x8
EXTERN_C __declspec(selectany) const GUID ContentionId = {0x561410f5, 0xa138, 0x4ab3, {0x94, 0x5e, 0x51, 0x64, 0x83, 0xcd, 0xdf, 0xbc}};
#define CLR_METHOD_TASK 0x9
EXTERN_C __declspec(selectany) const GUID CLRMethodId = {0x3044f61a, 0x99b0, 0x4c21, {0xb2, 0x03, 0xd3, 0x94, 0x23, 0xc7, 0x3b, 0x00}};
#define CLR_LOADER_TASK 0xa
EXTERN_C __declspec(selectany) const GUID CLRLoaderId = {0xd00792da, 0x07b7, 0x40f5, {0x97, 0xeb, 0x5d, 0x97, 0x4e, 0x05, 0x47, 0x40}};
#define CLR_STACK_TASK 0xb
EXTERN_C __declspec(selectany) const GUID CLRStackId = {0xd3363dc0, 0x243a, 0x4620, {0xa4, 0xd0, 0x8a, 0x07, 0xd7, 0x72, 0xf5, 0x33}};
#define CLR_STRONGNAMEVERIFICATION_TASK 0xc
EXTERN_C __declspec(selectany) const GUID CLRStrongNameVerificationId = {0x15447a14, 0xb523, 0x46ae, {0xb7, 0x5b, 0x02, 0x3f, 0x90, 0x0b, 0x43, 0x93}};
#define CLR_AUTHENTICODEVERIFICATION_TASK 0xd
EXTERN_C __declspec(selectany) const GUID CLRAuthenticodeVerificationId = {0xb17304d9, 0x5afa, 0x4da6, {0x9f, 0x7b, 0x5a, 0x4f, 0xa7, 0x31, 0x29, 0xb6}};
#define CLR_APPDOMAINRESOURCEMANAGEMENT_TASK 0xe
EXTERN_C __declspec(selectany) const GUID AppDomainResourceManagementId = {0x88e83959, 0x6185, 0x4e0b, {0x95, 0xb8, 0x0e, 0x4a, 0x35, 0xdf, 0x61, 0x22}};
#define CLR_IL_STUB 0xf
EXTERN_C __declspec(selectany) const GUID CLRILStubId = {0xd00792da, 0x07b7, 0x40f5, {0x00, 0x00, 0x5d, 0x97, 0x4e, 0x05, 0x47, 0x40}};
#define CLR_THREADPOOLWORKERTHREAD_TASK 0x10
EXTERN_C __declspec(selectany) const GUID ThreadPoolWorkerThreadId = {0x8a9a44ab, 0xf681, 0x4271, {0x88, 0x10, 0x83, 0x0d, 0xab, 0x9f, 0x56, 0x21}};
#define CLR_THREADPOOLWORKERTHREADRETIREMENT_TASK 0x11
EXTERN_C __declspec(selectany) const GUID ThreadPoolWorkerThreadRetirementId = {0x402ee399, 0xc137, 0x4dc0, {0xa5, 0xab, 0x3c, 0x2d, 0xea, 0x64, 0xac, 0x9c}};
#define CLR_THREADPOOLWORKERTHREADADJUSTMENT_TASK 0x12
EXTERN_C __declspec(selectany) const GUID ThreadPoolWorkerThreadAdjustmentId = {0x94179831, 0xe99a, 0x4625, {0x88, 0x24, 0x23, 0xca, 0x5e, 0x00, 0xca, 0x7d}};
#define CLR_EEStartup_TASK 0x13
EXTERN_C __declspec(selectany) const GUID CLRRuntimeInformationId = {0xcd7d3e32, 0x65fe, 0x40cd, {0x92, 0x25, 0xa2, 0x57, 0x7d, 0x20, 0x3f, 0xc3}};
#define CLR_PERFTRACK_TASK 0x14
EXTERN_C __declspec(selectany) const GUID CLRPerfTrackId = {0xeac685f6, 0x2104, 0x4dec, {0x88, 0xfd, 0x91, 0xe4, 0x25, 0x42, 0x21, 0xec}};
#define CLR_TYPE_TASK 0x15
EXTERN_C __declspec(selectany) const GUID TypeId = {0x003e5a9b, 0x4757, 0x4d3e, {0xb4, 0xa1, 0xe4, 0x7b, 0xfb, 0x48, 0x94, 0x08}};
#define CLR_THREADPOOLWORKINGTHREADCOUNT_TASK 0x16
EXTERN_C __declspec(selectany) const GUID ThreadPoolWorkingThreadCountId = {0x1b032b96, 0x767c, 0x42e4, {0x84, 0x81, 0xcb, 0x52, 0x8a, 0x66, 0xd7, 0xbd}};
#define CLR_THREADPOOL_TASK 0x17
EXTERN_C __declspec(selectany) const GUID ThreadPoolId = {0xead685f6, 0x2104, 0x4dec, {0x88, 0xfd, 0x91, 0xe4, 0x25, 0x42, 0x21, 0xe9}};
#define CLR_THREADING_TASK 0x18
EXTERN_C __declspec(selectany) const GUID ThreadId = {0x641994c5, 0x16f2, 0x4123, {0x91, 0xa7, 0xa2, 0x99, 0x9d, 0xd7, 0xbf, 0xc3}};
#define CLR_DEBUG_IPC_EVENT_TASK 0x19
EXTERN_C __declspec(selectany) const GUID DebugIPCEventId = {0xec2f3703, 0x8321, 0x4301, {0xbd, 0x51, 0x2c, 0xb9, 0xa0, 0x9f, 0x31, 0xb1}};
#define CLR_EXCEPTION_PROCESSING_TASK 0x1a
EXTERN_C __declspec(selectany) const GUID DebugExceptionProcessingId = {0xc4412198, 0xef03, 0x47f1, {0x9b, 0xd1, 0x11, 0xc6, 0x63, 0x7a, 0x20, 0x62}};
//
// Keyword
//
#define CLR_GC_KEYWORD 0x1
#define CLR_GCHANDLE_KEYWORD 0x2
#define CLR_FUSION_KEYWORD 0x4
#define CLR_LOADER_KEYWORD 0x8
#define CLR_JIT_KEYWORD 0x10
#define CLR_NGEN_KEYWORD 0x20
#define CLR_STARTENUMERATION_KEYWORD 0x40
#define CLR_ENDENUMERATION_KEYWORD 0x80
#define CLR_SECURITY_KEYWORD 0x400
#define CLR_APPDOMAINRESOURCEMANAGEMENT_KEYWORD 0x800
#define CLR_JITTRACING_KEYWORD 0x1000
#define CLR_INTEROP_KEYWORD 0x2000
#define CLR_CONTENTION_KEYWORD 0x4000
#define CLR_EXCEPTION_KEYWORD 0x8000
#define CLR_THREADING_KEYWORD 0x10000
#define CLR_JITTEDMETHODILTONATIVEMAP_KEYWORD 0x20000
#define CLR_OVERRIDEANDSUPPRESSNGENEVENTS_KEYWORD 0x40000
#define CLR_TYPE_KEYWORD 0x80000
#define CLR_GCHEAPDUMP_KEYWORD 0x100000
#define CLR_GCHEAPALLOCHIGH_KEYWORD 0x200000
#define CLR_GCHEAPSURVIVALANDMOVEMENT_KEYWORD 0x400000
#define CLR_GCHEAPCOLLECT_KEYWORD 0x800000
#define CLR_GCHEAPANDTYPENAMES_KEYWORD 0x1000000
#define CLR_GCHEAPALLOCLOW_KEYWORD 0x2000000
#define CLR_PERFTRACK_KEYWORD 0x20000000
#define CLR_STACK_KEYWORD 0x40000000
#define CLR_THREADTRANSFER_KEYWORD 0x80000000
#define CLR_DEBUGGER_KEYWORD 0x100000000

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCStart = {0x1, 0x0, 0x0, 0x4, 0x1, 0x1, 0x1};
#define GCStart_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCStart_V1 = {0x1, 0x1, 0x0, 0x4, 0x1, 0x1, 0x1};
#define GCStart_V1_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCStart_V2 = {0x1, 0x2, 0x0, 0x4, 0x1, 0x1, 0x1};
#define GCStart_V2_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCEnd = {0x2, 0x0, 0x0, 0x4, 0x2, 0x1, 0x1};
#define GCEnd_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCEnd_V1 = {0x2, 0x1, 0x0, 0x4, 0x2, 0x1, 0x1};
#define GCEnd_V1_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCRestartEEEnd = {0x3, 0x0, 0x0, 0x4, 0x84, 0x1, 0x1};
#define GCRestartEEEnd_value 0x3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCRestartEEEnd_V1 = {0x3, 0x1, 0x0, 0x4, 0x84, 0x1, 0x1};
#define GCRestartEEEnd_V1_value 0x3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCHeapStats = {0x4, 0x0, 0x0, 0x4, 0x85, 0x1, 0x1};
#define GCHeapStats_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCHeapStats_V1 = {0x4, 0x1, 0x0, 0x4, 0x85, 0x1, 0x1};
#define GCHeapStats_V1_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCCreateSegment = {0x5, 0x0, 0x0, 0x4, 0x86, 0x1, 0x1};
#define GCCreateSegment_value 0x5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCCreateSegment_V1 = {0x5, 0x1, 0x0, 0x4, 0x86, 0x1, 0x1};
#define GCCreateSegment_V1_value 0x5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCFreeSegment = {0x6, 0x0, 0x0, 0x4, 0x87, 0x1, 0x1};
#define GCFreeSegment_value 0x6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCFreeSegment_V1 = {0x6, 0x1, 0x0, 0x4, 0x87, 0x1, 0x1};
#define GCFreeSegment_V1_value 0x6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCRestartEEBegin = {0x7, 0x0, 0x0, 0x4, 0x88, 0x1, 0x1};
#define GCRestartEEBegin_value 0x7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCRestartEEBegin_V1 = {0x7, 0x1, 0x0, 0x4, 0x88, 0x1, 0x1};
#define GCRestartEEBegin_V1_value 0x7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCSuspendEEEnd = {0x8, 0x0, 0x0, 0x4, 0x89, 0x1, 0x1};
#define GCSuspendEEEnd_value 0x8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCSuspendEEEnd_V1 = {0x8, 0x1, 0x0, 0x4, 0x89, 0x1, 0x1};
#define GCSuspendEEEnd_V1_value 0x8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCSuspendEEBegin = {0x9, 0x0, 0x0, 0x4, 0xa, 0x1, 0x1};
#define GCSuspendEEBegin_value 0x9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCSuspendEEBegin_V1 = {0x9, 0x1, 0x0, 0x4, 0xa, 0x1, 0x1};
#define GCSuspendEEBegin_V1_value 0x9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCAllocationTick = {0xa, 0x0, 0x0, 0x5, 0xb, 0x1, 0x1};
#define GCAllocationTick_value 0xa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCAllocationTick_V1 = {0xa, 0x1, 0x0, 0x5, 0xb, 0x1, 0x1};
#define GCAllocationTick_V1_value 0xa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCAllocationTick_V2 = {0xa, 0x2, 0x0, 0x5, 0xb, 0x1, 0x1};
#define GCAllocationTick_V2_value 0xa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCAllocationTick_V3 = {0xa, 0x3, 0x0, 0x5, 0xb, 0x1, 0x1};
#define GCAllocationTick_V3_value 0xa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCCreateConcurrentThread = {0xb, 0x0, 0x0, 0x4, 0xc, 0x1, 0x1};
#define GCCreateConcurrentThread_value 0xb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCCreateConcurrentThread_V1 = {0xb, 0x1, 0x0, 0x4, 0xc, 0x1, 0x10001};
#define GCCreateConcurrentThread_V1_value 0xb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCTerminateConcurrentThread = {0xc, 0x0, 0x0, 0x4, 0xd, 0x1, 0x1};
#define GCTerminateConcurrentThread_value 0xc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCTerminateConcurrentThread_V1 = {0xc, 0x1, 0x0, 0x4, 0xd, 0x1, 0x10001};
#define GCTerminateConcurrentThread_V1_value 0xc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCFinalizersEnd = {0xd, 0x0, 0x0, 0x4, 0xf, 0x1, 0x1};
#define GCFinalizersEnd_value 0xd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCFinalizersEnd_V1 = {0xd, 0x1, 0x0, 0x4, 0xf, 0x1, 0x1};
#define GCFinalizersEnd_V1_value 0xd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCFinalizersBegin = {0xe, 0x0, 0x0, 0x4, 0x13, 0x1, 0x1};
#define GCFinalizersBegin_value 0xe
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCFinalizersBegin_V1 = {0xe, 0x1, 0x0, 0x4, 0x13, 0x1, 0x1};
#define GCFinalizersBegin_V1_value 0xe
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BulkType = {0xf, 0x0, 0x0, 0x4, 0xa, 0x15, 0x80000};
#define BulkType_value 0xf
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCBulkRootEdge = {0x10, 0x0, 0x0, 0x4, 0x14, 0x1, 0x100000};
#define GCBulkRootEdge_value 0x10
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCBulkRootConditionalWeakTableElementEdge = {0x11, 0x0, 0x0, 0x4, 0x15, 0x1, 0x100000};
#define GCBulkRootConditionalWeakTableElementEdge_value 0x11
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCBulkNode = {0x12, 0x0, 0x0, 0x4, 0x16, 0x1, 0x100000};
#define GCBulkNode_value 0x12
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCBulkEdge = {0x13, 0x0, 0x0, 0x4, 0x17, 0x1, 0x100000};
#define GCBulkEdge_value 0x13
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCSampledObjectAllocationHigh = {0x14, 0x0, 0x0, 0x4, 0x18, 0x1, 0x200000};
#define GCSampledObjectAllocationHigh_value 0x14
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCBulkSurvivingObjectRanges = {0x15, 0x0, 0x0, 0x4, 0x19, 0x1, 0x400000};
#define GCBulkSurvivingObjectRanges_value 0x15
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCBulkMovedObjectRanges = {0x16, 0x0, 0x0, 0x4, 0x1a, 0x1, 0x400000};
#define GCBulkMovedObjectRanges_value 0x16
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCGenerationRange = {0x17, 0x0, 0x0, 0x4, 0x1b, 0x1, 0x400000};
#define GCGenerationRange_value 0x17
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCMarkStackRoots = {0x19, 0x0, 0x0, 0x4, 0x1c, 0x1, 0x1};
#define GCMarkStackRoots_value 0x19
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCMarkFinalizeQueueRoots = {0x1a, 0x0, 0x0, 0x4, 0x1d, 0x1, 0x1};
#define GCMarkFinalizeQueueRoots_value 0x1a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCMarkHandles = {0x1b, 0x0, 0x0, 0x4, 0x1e, 0x1, 0x1};
#define GCMarkHandles_value 0x1b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCMarkOlderGenerationRoots = {0x1c, 0x0, 0x0, 0x4, 0x1f, 0x1, 0x1};
#define GCMarkOlderGenerationRoots_value 0x1c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FinalizeObject = {0x1d, 0x0, 0x0, 0x5, 0x20, 0x1, 0x1};
#define FinalizeObject_value 0x1d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SetGCHandle = {0x1e, 0x0, 0x0, 0x4, 0x21, 0x1, 0x2};
#define SetGCHandle_value 0x1e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DestroyGCHandle = {0x1f, 0x0, 0x0, 0x4, 0x22, 0x1, 0x2};
#define DestroyGCHandle_value 0x1f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCSampledObjectAllocationLow = {0x20, 0x0, 0x0, 0x4, 0x18, 0x1, 0x2000000};
#define GCSampledObjectAllocationLow_value 0x20
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PinObjectAtGCTime = {0x21, 0x0, 0x0, 0x5, 0x24, 0x1, 0x1};
#define PinObjectAtGCTime_value 0x21
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCTriggered = {0x23, 0x0, 0x0, 0x4, 0x23, 0x1, 0x1};
#define GCTriggered_value 0x23
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCBulkRootCCW = {0x24, 0x0, 0x0, 0x4, 0x26, 0x1, 0x100000};
#define GCBulkRootCCW_value 0x24
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCBulkRCW = {0x25, 0x0, 0x0, 0x4, 0x27, 0x1, 0x100000};
#define GCBulkRCW_value 0x25
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCBulkRootStaticVar = {0x26, 0x0, 0x0, 0x4, 0x28, 0x1, 0x100000};
#define GCBulkRootStaticVar_value 0x26
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WorkerThreadCreate = {0x28, 0x0, 0x0, 0x4, 0x1, 0x2, 0x10000};
#define WorkerThreadCreate_value 0x28
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WorkerThreadTerminate = {0x29, 0x0, 0x0, 0x4, 0x2, 0x2, 0x10000};
#define WorkerThreadTerminate_value 0x29
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WorkerThreadRetire = {0x2a, 0x0, 0x0, 0x4, 0x1, 0x4, 0x10000};
#define WorkerThreadRetire_value 0x2a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WorkerThreadUnretire = {0x2b, 0x0, 0x0, 0x4, 0x2, 0x4, 0x10000};
#define WorkerThreadUnretire_value 0x2b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR IOThreadCreate = {0x2c, 0x0, 0x0, 0x4, 0x1, 0x3, 0x10000};
#define IOThreadCreate_value 0x2c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR IOThreadCreate_V1 = {0x2c, 0x1, 0x0, 0x4, 0x1, 0x3, 0x10000};
#define IOThreadCreate_V1_value 0x2c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR IOThreadTerminate = {0x2d, 0x0, 0x0, 0x4, 0x2, 0x3, 0x10000};
#define IOThreadTerminate_value 0x2d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR IOThreadTerminate_V1 = {0x2d, 0x1, 0x0, 0x4, 0x2, 0x3, 0x10000};
#define IOThreadTerminate_V1_value 0x2d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR IOThreadRetire = {0x2e, 0x0, 0x0, 0x4, 0x1, 0x5, 0x10000};
#define IOThreadRetire_value 0x2e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR IOThreadRetire_V1 = {0x2e, 0x1, 0x0, 0x4, 0x1, 0x5, 0x10000};
#define IOThreadRetire_V1_value 0x2e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR IOThreadUnretire = {0x2f, 0x0, 0x0, 0x4, 0x2, 0x5, 0x10000};
#define IOThreadUnretire_value 0x2f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR IOThreadUnretire_V1 = {0x2f, 0x1, 0x0, 0x4, 0x2, 0x5, 0x10000};
#define IOThreadUnretire_V1_value 0x2f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadpoolSuspensionSuspendThread = {0x30, 0x0, 0x0, 0x4, 0x1, 0x6, 0x10000};
#define ThreadpoolSuspensionSuspendThread_value 0x30
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadpoolSuspensionResumeThread = {0x31, 0x0, 0x0, 0x4, 0x2, 0x6, 0x10000};
#define ThreadpoolSuspensionResumeThread_value 0x31
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolWorkerThreadStart = {0x32, 0x0, 0x0, 0x4, 0x1, 0x10, 0x10000};
#define ThreadPoolWorkerThreadStart_value 0x32
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolWorkerThreadStop = {0x33, 0x0, 0x0, 0x4, 0x2, 0x10, 0x10000};
#define ThreadPoolWorkerThreadStop_value 0x33
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolWorkerThreadRetirementStart = {0x34, 0x0, 0x0, 0x4, 0x1, 0x11, 0x10000};
#define ThreadPoolWorkerThreadRetirementStart_value 0x34
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolWorkerThreadRetirementStop = {0x35, 0x0, 0x0, 0x4, 0x2, 0x11, 0x10000};
#define ThreadPoolWorkerThreadRetirementStop_value 0x35
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolWorkerThreadAdjustmentSample = {0x36, 0x0, 0x0, 0x4, 0x64, 0x12, 0x10000};
#define ThreadPoolWorkerThreadAdjustmentSample_value 0x36
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolWorkerThreadAdjustmentAdjustment = {0x37, 0x0, 0x0, 0x4, 0x65, 0x12, 0x10000};
#define ThreadPoolWorkerThreadAdjustmentAdjustment_value 0x37
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolWorkerThreadAdjustmentStats = {0x38, 0x0, 0x0, 0x5, 0x66, 0x12, 0x10000};
#define ThreadPoolWorkerThreadAdjustmentStats_value 0x38
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolWorkerThreadWait = {0x39, 0x0, 0x0, 0x4, 0x5a, 0x10, 0x10000};
#define ThreadPoolWorkerThreadWait_value 0x39
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolWorkingThreadCount = {0x3c, 0x0, 0x0, 0x5, 0x1, 0x16, 0x10000};
#define ThreadPoolWorkingThreadCount_value 0x3c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolEnqueue = {0x3d, 0x0, 0x0, 0x5, 0xb, 0x17, 0x80010000};
#define ThreadPoolEnqueue_value 0x3d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolDequeue = {0x3e, 0x0, 0x0, 0x5, 0xc, 0x17, 0x80010000};
#define ThreadPoolDequeue_value 0x3e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolIOEnqueue = {0x3f, 0x0, 0x0, 0x5, 0xd, 0x17, 0x80010000};
#define ThreadPoolIOEnqueue_value 0x3f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolIODequeue = {0x40, 0x0, 0x0, 0x5, 0xe, 0x17, 0x80010000};
#define ThreadPoolIODequeue_value 0x40
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadPoolIOPack = {0x41, 0x0, 0x0, 0x5, 0xf, 0x17, 0x10000};
#define ThreadPoolIOPack_value 0x41
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadCreating = {0x46, 0x0, 0x0, 0x4, 0xb, 0x18, 0x80010000};
#define ThreadCreating_value 0x46
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadRunning = {0x47, 0x0, 0x0, 0x4, 0xc, 0x18, 0x80010000};
#define ThreadRunning_value 0x47
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ExceptionThrown = {0x50, 0x0, 0x0, 0x4, 0x1, 0x7, 0x0};
#define ExceptionThrown_value 0x50
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ExceptionThrown_V1 = {0x50, 0x1, 0x0, 0x2, 0x1, 0x7, 0x8000};
#define ExceptionThrown_V1_value 0x50
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Contention = {0x51, 0x0, 0x0, 0x4, 0x1, 0x8, 0x0};
#define Contention_value 0x51
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ContentionStart_V1 = {0x51, 0x1, 0x0, 0x4, 0x1, 0x8, 0x4000};
#define ContentionStart_V1_value 0x51
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ContentionStop = {0x5b, 0x0, 0x0, 0x4, 0x2, 0x8, 0x4000};
#define ContentionStop_value 0x5b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR CLRStackWalk = {0x52, 0x0, 0x0, 0x0, 0x52, 0xb, 0x40000000};
#define CLRStackWalk_value 0x52
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AppDomainMemAllocated = {0x53, 0x0, 0x0, 0x4, 0x30, 0xe, 0x800};
#define AppDomainMemAllocated_value 0x53
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AppDomainMemSurvived = {0x54, 0x0, 0x0, 0x4, 0x31, 0xe, 0x800};
#define AppDomainMemSurvived_value 0x54
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadCreated = {0x55, 0x0, 0x0, 0x4, 0x32, 0xe, 0x10800};
#define ThreadCreated_value 0x55
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadTerminated = {0x56, 0x0, 0x0, 0x4, 0x33, 0xe, 0x10800};
#define ThreadTerminated_value 0x56
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadDomainEnter = {0x57, 0x0, 0x0, 0x4, 0x34, 0xe, 0x10800};
#define ThreadDomainEnter_value 0x57
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ILStubGenerated = {0x58, 0x0, 0x0, 0x4, 0x58, 0xf, 0x2000};
#define ILStubGenerated_value 0x58
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ILStubCacheHit = {0x59, 0x0, 0x0, 0x4, 0x59, 0xf, 0x2000};
#define ILStubCacheHit_value 0x59
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DCStartCompleteV2 = {0x87, 0x0, 0x0, 0x4, 0xe, 0x9, 0x30};
#define DCStartCompleteV2_value 0x87
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DCEndCompleteV2 = {0x88, 0x0, 0x0, 0x4, 0xf, 0x9, 0x30};
#define DCEndCompleteV2_value 0x88
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCStartV2 = {0x89, 0x0, 0x0, 0x4, 0x23, 0x9, 0x30};
#define MethodDCStartV2_value 0x89
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCEndV2 = {0x8a, 0x0, 0x0, 0x4, 0x24, 0x9, 0x30};
#define MethodDCEndV2_value 0x8a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCStartVerboseV2 = {0x8b, 0x0, 0x0, 0x4, 0x27, 0x9, 0x30};
#define MethodDCStartVerboseV2_value 0x8b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCEndVerboseV2 = {0x8c, 0x0, 0x0, 0x4, 0x28, 0x9, 0x30};
#define MethodDCEndVerboseV2_value 0x8c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodLoad = {0x8d, 0x0, 0x0, 0x4, 0x21, 0x9, 0x30};
#define MethodLoad_value 0x8d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodLoad_V1 = {0x8d, 0x1, 0x0, 0x4, 0x21, 0x9, 0x30};
#define MethodLoad_V1_value 0x8d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodLoad_V2 = {0x8d, 0x2, 0x0, 0x4, 0x21, 0x9, 0x30};
#define MethodLoad_V2_value 0x8d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodUnload = {0x8e, 0x0, 0x0, 0x4, 0x22, 0x9, 0x30};
#define MethodUnload_value 0x8e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodUnload_V1 = {0x8e, 0x1, 0x0, 0x4, 0x22, 0x9, 0x30};
#define MethodUnload_V1_value 0x8e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodUnload_V2 = {0x8e, 0x2, 0x0, 0x4, 0x22, 0x9, 0x30};
#define MethodUnload_V2_value 0x8e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodLoadVerbose = {0x8f, 0x0, 0x0, 0x4, 0x25, 0x9, 0x30};
#define MethodLoadVerbose_value 0x8f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodLoadVerbose_V1 = {0x8f, 0x1, 0x0, 0x4, 0x25, 0x9, 0x30};
#define MethodLoadVerbose_V1_value 0x8f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodLoadVerbose_V2 = {0x8f, 0x2, 0x0, 0x4, 0x25, 0x9, 0x30};
#define MethodLoadVerbose_V2_value 0x8f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodUnloadVerbose = {0x90, 0x0, 0x0, 0x4, 0x26, 0x9, 0x30};
#define MethodUnloadVerbose_value 0x90
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodUnloadVerbose_V1 = {0x90, 0x1, 0x0, 0x4, 0x26, 0x9, 0x30};
#define MethodUnloadVerbose_V1_value 0x90
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodUnloadVerbose_V2 = {0x90, 0x2, 0x0, 0x4, 0x26, 0x9, 0x30};
#define MethodUnloadVerbose_V2_value 0x90
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodJittingStarted = {0x91, 0x0, 0x0, 0x5, 0x2a, 0x9, 0x10};
#define MethodJittingStarted_value 0x91
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodJittingStarted_V1 = {0x91, 0x1, 0x0, 0x5, 0x2a, 0x9, 0x10};
#define MethodJittingStarted_V1_value 0x91
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodJitInliningSucceeded = {0xb9, 0x0, 0x0, 0x5, 0x53, 0x9, 0x1000};
#define MethodJitInliningSucceeded_value 0xb9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodJitInliningFailed = {0xba, 0x0, 0x0, 0x5, 0x54, 0x9, 0x1000};
#define MethodJitInliningFailed_value 0xba
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodJitTailCallSucceeded = {0xbc, 0x0, 0x0, 0x5, 0x55, 0x9, 0x1000};
#define MethodJitTailCallSucceeded_value 0xbc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodJitTailCallFailed = {0xbd, 0x0, 0x0, 0x5, 0x56, 0x9, 0x1000};
#define MethodJitTailCallFailed_value 0xbd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodILToNativeMap = {0xbe, 0x0, 0x0, 0x5, 0x57, 0x9, 0x20000};
#define MethodILToNativeMap_value 0xbe
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleDCStartV2 = {0x95, 0x0, 0x0, 0x4, 0x23, 0xa, 0x8};
#define ModuleDCStartV2_value 0x95
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleDCEndV2 = {0x96, 0x0, 0x0, 0x4, 0x24, 0xa, 0x8};
#define ModuleDCEndV2_value 0x96
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DomainModuleLoad = {0x97, 0x0, 0x0, 0x4, 0x2d, 0xa, 0x8};
#define DomainModuleLoad_value 0x97
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DomainModuleLoad_V1 = {0x97, 0x1, 0x0, 0x4, 0x2d, 0xa, 0x8};
#define DomainModuleLoad_V1_value 0x97
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleLoad = {0x98, 0x0, 0x0, 0x4, 0x21, 0xa, 0x8};
#define ModuleLoad_value 0x98
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleLoad_V1 = {0x98, 0x1, 0x0, 0x4, 0x21, 0xa, 0x20000008};
#define ModuleLoad_V1_value 0x98
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleLoad_V2 = {0x98, 0x2, 0x0, 0x4, 0x21, 0xa, 0x20000008};
#define ModuleLoad_V2_value 0x98
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleUnload = {0x99, 0x0, 0x0, 0x4, 0x22, 0xa, 0x8};
#define ModuleUnload_value 0x99
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleUnload_V1 = {0x99, 0x1, 0x0, 0x4, 0x22, 0xa, 0x20000008};
#define ModuleUnload_V1_value 0x99
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleUnload_V2 = {0x99, 0x2, 0x0, 0x4, 0x22, 0xa, 0x20000008};
#define ModuleUnload_V2_value 0x99
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AssemblyLoad = {0x9a, 0x0, 0x0, 0x4, 0x25, 0xa, 0x8};
#define AssemblyLoad_value 0x9a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AssemblyLoad_V1 = {0x9a, 0x1, 0x0, 0x4, 0x25, 0xa, 0x8};
#define AssemblyLoad_V1_value 0x9a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AssemblyUnload = {0x9b, 0x0, 0x0, 0x4, 0x26, 0xa, 0x8};
#define AssemblyUnload_value 0x9b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AssemblyUnload_V1 = {0x9b, 0x1, 0x0, 0x4, 0x26, 0xa, 0x8};
#define AssemblyUnload_V1_value 0x9b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AppDomainLoad = {0x9c, 0x0, 0x0, 0x4, 0x29, 0xa, 0x8};
#define AppDomainLoad_value 0x9c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AppDomainLoad_V1 = {0x9c, 0x1, 0x0, 0x4, 0x29, 0xa, 0x8};
#define AppDomainLoad_V1_value 0x9c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AppDomainUnload = {0x9d, 0x0, 0x0, 0x4, 0x2a, 0xa, 0x8};
#define AppDomainUnload_value 0x9d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AppDomainUnload_V1 = {0x9d, 0x1, 0x0, 0x4, 0x2a, 0xa, 0x8};
#define AppDomainUnload_V1_value 0x9d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleRangeLoad = {0x9e, 0x0, 0x0, 0x4, 0xa, 0x14, 0x20000000};
#define ModuleRangeLoad_value 0x9e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR StrongNameVerificationStart = {0xb5, 0x0, 0x0, 0x5, 0x1, 0xc, 0x400};
#define StrongNameVerificationStart_value 0xb5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR StrongNameVerificationStart_V1 = {0xb5, 0x1, 0x0, 0x5, 0x1, 0xc, 0x400};
#define StrongNameVerificationStart_V1_value 0xb5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR StrongNameVerificationStop = {0xb6, 0x0, 0x0, 0x4, 0x2, 0xc, 0x400};
#define StrongNameVerificationStop_value 0xb6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR StrongNameVerificationStop_V1 = {0xb6, 0x1, 0x0, 0x4, 0x2, 0xc, 0x400};
#define StrongNameVerificationStop_V1_value 0xb6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AuthenticodeVerificationStart = {0xb7, 0x0, 0x0, 0x5, 0x1, 0xd, 0x400};
#define AuthenticodeVerificationStart_value 0xb7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AuthenticodeVerificationStart_V1 = {0xb7, 0x1, 0x0, 0x5, 0x1, 0xd, 0x400};
#define AuthenticodeVerificationStart_V1_value 0xb7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AuthenticodeVerificationStop = {0xb8, 0x0, 0x0, 0x4, 0x2, 0xd, 0x400};
#define AuthenticodeVerificationStop_value 0xb8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AuthenticodeVerificationStop_V1 = {0xb8, 0x1, 0x0, 0x4, 0x2, 0xd, 0x400};
#define AuthenticodeVerificationStop_V1_value 0xb8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RuntimeInformationStart = {0xbb, 0x0, 0x0, 0x4, 0x1, 0x13, 0x0};
#define RuntimeInformationStart_value 0xbb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR IncreaseMemoryPressure = {0xc8, 0x0, 0x0, 0x5, 0xc8, 0x1, 0x1};
#define IncreaseMemoryPressure_value 0xc8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DecreaseMemoryPressure = {0xc9, 0x0, 0x0, 0x5, 0xc9, 0x1, 0x1};
#define DecreaseMemoryPressure_value 0xc9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCMarkWithType = {0xca, 0x0, 0x0, 0x4, 0xca, 0x1, 0x1};
#define GCMarkWithType_value 0xca
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCJoin_V2 = {0xcb, 0x2, 0x0, 0x5, 0xcb, 0x1, 0x1};
#define GCJoin_V2_value 0xcb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCPerHeapHistory_V3 = {0xcc, 0x3, 0x0, 0x4, 0xcc, 0x1, 0x1};
#define GCPerHeapHistory_V3_value 0xcc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCGlobalHeapHistory_V2 = {0xcd, 0x2, 0x0, 0x4, 0xcd, 0x1, 0x1};
#define GCGlobalHeapHistory_V2_value 0xcd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DebugIPCEventStart = {0xf0, 0x0, 0x0, 0x4, 0x1, 0x19, 0x100000000};
#define DebugIPCEventStart_value 0xf0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DebugIPCEventEnd = {0xf1, 0x0, 0x0, 0x4, 0x2, 0x19, 0x100000000};
#define DebugIPCEventEnd_value 0xf1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DebugExceptionProcessingStart = {0xf2, 0x0, 0x0, 0x4, 0x1, 0x1a, 0x100000000};
#define DebugExceptionProcessingStart_value 0xf2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DebugExceptionProcessingEnd = {0xf3, 0x0, 0x0, 0x4, 0x2, 0x1a, 0x100000000};
#define DebugExceptionProcessingEnd_value 0xf3

//
// Note on Generate Code from Manifest Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra 
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length 
//strings, the generated code will take the count of characters for the whole array as an input parameter. 
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate 
//GetLengthSid function to get the length.
//

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals 
//


//
// Event Enablement Bits
//

EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG Microsoft_Windows_DotNETRuntimeEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG Microsoft_Windows_DotNETRuntimeKeywords[30] = {0x1, 0x1, 0x10001, 0x80000, 0x100000, 0x200000, 0x400000, 0x2, 0x2000000, 0x10000, 0x10000, 0x80010000, 0x80010000, 0x0, 0x8000, 0x4000, 0x40000000, 0x800, 0x10800, 0x2000, 0x30, 0x10, 0x1000, 0x20000, 0x8, 0x20000008, 0x20000000, 0x400, 0x400, 0x100000000};
EXTERN_C __declspec(selectany) const UCHAR Microsoft_Windows_DotNETRuntimeLevels[30] = {4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 4, 4, 2, 4, 0, 4, 4, 4, 4, 5, 5, 5, 4, 4, 4, 5, 4, 4};
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT MICROSOFT_WINDOWS_DOTNETRUNTIME_PROVIDER_Context = {0, 0, 0, 0, 0, 0, 0, 0, 30, Microsoft_Windows_DotNETRuntimeEnableBits, Microsoft_Windows_DotNETRuntimeKeywords, Microsoft_Windows_DotNETRuntimeLevels};

EXTERN_C __declspec(selectany) REGHANDLE Microsoft_Windows_DotNETRuntimeHandle = (REGHANDLE)0;

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function register the provider with ETW USER mode.

Arguments:
    ProviderId - Provider Id to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to Registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If Provider has not register RegHandle = NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterMicrosoft_Windows_DotNETRuntime
#define EventRegisterMicrosoft_Windows_DotNETRuntime() McGenEventRegister(&MICROSOFT_WINDOWS_DOTNETRUNTIME_PROVIDER, McGenControlCallbackV2, &MICROSOFT_WINDOWS_DOTNETRUNTIME_PROVIDER_Context, &Microsoft_Windows_DotNETRuntimeHandle) 
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterMicrosoft_Windows_DotNETRuntime
#define EventUnregisterMicrosoft_Windows_DotNETRuntime() McGenEventUnregister(&Microsoft_Windows_DotNETRuntimeHandle) 
#endif

//
// Enablement check macro for GCStart
//

#define EventEnabledGCStart() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCStart
//
#define FireEtwGCStart(Count, Reason)\
        EventEnabledGCStart() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimeHandle, &GCStart, Count, Reason)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCStart_V1
//

#define EventEnabledGCStart_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCStart_V1
//
#define FireEtwGCStart_V1(Count, Depth, Reason, Type, ClrInstanceID)\
        EventEnabledGCStart_V1() ?\
        CoTemplate_qqqqh(Microsoft_Windows_DotNETRuntimeHandle, &GCStart_V1, Count, Depth, Reason, Type, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCStart_V2
//

#define EventEnabledGCStart_V2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCStart_V2
//
#define FireEtwGCStart_V2(Count, Depth, Reason, Type, ClrInstanceID, ClientSequenceNumber)\
        EventEnabledGCStart_V2() ?\
        CoTemplate_qqqqhx(Microsoft_Windows_DotNETRuntimeHandle, &GCStart_V2, Count, Depth, Reason, Type, ClrInstanceID, ClientSequenceNumber)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCEnd
//

#define EventEnabledGCEnd() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCEnd
//
#define FireEtwGCEnd(Count, Depth)\
        EventEnabledGCEnd() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimeHandle, &GCEnd, Count, Depth)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCEnd_V1
//

#define EventEnabledGCEnd_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCEnd_V1
//
#define FireEtwGCEnd_V1(Count, Depth, ClrInstanceID)\
        EventEnabledGCEnd_V1() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimeHandle, &GCEnd_V1, Count, Depth, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCRestartEEEnd
//

#define EventEnabledGCRestartEEEnd() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCRestartEEEnd
//
#define FireEtwGCRestartEEEnd()\
        EventEnabledGCRestartEEEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &GCRestartEEEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCRestartEEEnd_V1
//

#define EventEnabledGCRestartEEEnd_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCRestartEEEnd_V1
//
#define FireEtwGCRestartEEEnd_V1(ClrInstanceID)\
        EventEnabledGCRestartEEEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimeHandle, &GCRestartEEEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCHeapStats
//

#define EventEnabledGCHeapStats() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCHeapStats
//
#define FireEtwGCHeapStats(GenerationSize0, TotalPromotedSize0, GenerationSize1, TotalPromotedSize1, GenerationSize2, TotalPromotedSize2, GenerationSize3, TotalPromotedSize3, FinalizationPromotedSize, FinalizationPromotedCount, PinnedObjectCount, SinkBlockCount, GCHandleCount)\
        EventEnabledGCHeapStats() ?\
        CoTemplate_xxxxxxxxxxqqq(Microsoft_Windows_DotNETRuntimeHandle, &GCHeapStats, GenerationSize0, TotalPromotedSize0, GenerationSize1, TotalPromotedSize1, GenerationSize2, TotalPromotedSize2, GenerationSize3, TotalPromotedSize3, FinalizationPromotedSize, FinalizationPromotedCount, PinnedObjectCount, SinkBlockCount, GCHandleCount)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCHeapStats_V1
//

#define EventEnabledGCHeapStats_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCHeapStats_V1
//
#define FireEtwGCHeapStats_V1(GenerationSize0, TotalPromotedSize0, GenerationSize1, TotalPromotedSize1, GenerationSize2, TotalPromotedSize2, GenerationSize3, TotalPromotedSize3, FinalizationPromotedSize, FinalizationPromotedCount, PinnedObjectCount, SinkBlockCount, GCHandleCount, ClrInstanceID)\
        EventEnabledGCHeapStats_V1() ?\
        CoTemplate_xxxxxxxxxxqqqh(Microsoft_Windows_DotNETRuntimeHandle, &GCHeapStats_V1, GenerationSize0, TotalPromotedSize0, GenerationSize1, TotalPromotedSize1, GenerationSize2, TotalPromotedSize2, GenerationSize3, TotalPromotedSize3, FinalizationPromotedSize, FinalizationPromotedCount, PinnedObjectCount, SinkBlockCount, GCHandleCount, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCCreateSegment
//

#define EventEnabledGCCreateSegment() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCCreateSegment
//
#define FireEtwGCCreateSegment(Address, Size, Type)\
        EventEnabledGCCreateSegment() ?\
        CoTemplate_xxq(Microsoft_Windows_DotNETRuntimeHandle, &GCCreateSegment, Address, Size, Type)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCCreateSegment_V1
//

#define EventEnabledGCCreateSegment_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCCreateSegment_V1
//
#define FireEtwGCCreateSegment_V1(Address, Size, Type, ClrInstanceID)\
        EventEnabledGCCreateSegment_V1() ?\
        CoTemplate_xxqh(Microsoft_Windows_DotNETRuntimeHandle, &GCCreateSegment_V1, Address, Size, Type, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCFreeSegment
//

#define EventEnabledGCFreeSegment() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCFreeSegment
//
#define FireEtwGCFreeSegment(Address)\
        EventEnabledGCFreeSegment() ?\
        CoTemplate_x(Microsoft_Windows_DotNETRuntimeHandle, &GCFreeSegment, Address)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCFreeSegment_V1
//

#define EventEnabledGCFreeSegment_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCFreeSegment_V1
//
#define FireEtwGCFreeSegment_V1(Address, ClrInstanceID)\
        EventEnabledGCFreeSegment_V1() ?\
        CoTemplate_xh(Microsoft_Windows_DotNETRuntimeHandle, &GCFreeSegment_V1, Address, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCRestartEEBegin
//

#define EventEnabledGCRestartEEBegin() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCRestartEEBegin
//
#define FireEtwGCRestartEEBegin()\
        EventEnabledGCRestartEEBegin() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &GCRestartEEBegin)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCRestartEEBegin_V1
//

#define EventEnabledGCRestartEEBegin_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCRestartEEBegin_V1
//
#define FireEtwGCRestartEEBegin_V1(ClrInstanceID)\
        EventEnabledGCRestartEEBegin_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimeHandle, &GCRestartEEBegin_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCSuspendEEEnd
//

#define EventEnabledGCSuspendEEEnd() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCSuspendEEEnd
//
#define FireEtwGCSuspendEEEnd()\
        EventEnabledGCSuspendEEEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &GCSuspendEEEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCSuspendEEEnd_V1
//

#define EventEnabledGCSuspendEEEnd_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCSuspendEEEnd_V1
//
#define FireEtwGCSuspendEEEnd_V1(ClrInstanceID)\
        EventEnabledGCSuspendEEEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimeHandle, &GCSuspendEEEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCSuspendEEBegin
//

#define EventEnabledGCSuspendEEBegin() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCSuspendEEBegin
//
#define FireEtwGCSuspendEEBegin(Reason)\
        EventEnabledGCSuspendEEBegin() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimeHandle, &GCSuspendEEBegin, Reason)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCSuspendEEBegin_V1
//

#define EventEnabledGCSuspendEEBegin_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCSuspendEEBegin_V1
//
#define FireEtwGCSuspendEEBegin_V1(Reason, Count, ClrInstanceID)\
        EventEnabledGCSuspendEEBegin_V1() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimeHandle, &GCSuspendEEBegin_V1, Reason, Count, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCAllocationTick
//

#define EventEnabledGCAllocationTick() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for GCAllocationTick
//
#define FireEtwGCAllocationTick(AllocationAmount, AllocationKind)\
        EventEnabledGCAllocationTick() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimeHandle, &GCAllocationTick, AllocationAmount, AllocationKind)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCAllocationTick_V1
//

#define EventEnabledGCAllocationTick_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for GCAllocationTick_V1
//
#define FireEtwGCAllocationTick_V1(AllocationAmount, AllocationKind, ClrInstanceID)\
        EventEnabledGCAllocationTick_V1() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimeHandle, &GCAllocationTick_V1, AllocationAmount, AllocationKind, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCAllocationTick_V2
//

#define EventEnabledGCAllocationTick_V2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for GCAllocationTick_V2
//
#define FireEtwGCAllocationTick_V2(AllocationAmount, AllocationKind, ClrInstanceID, AllocationAmount64, TypeID, TypeName, HeapIndex)\
        EventEnabledGCAllocationTick_V2() ?\
        CoTemplate_qqhxpzq(Microsoft_Windows_DotNETRuntimeHandle, &GCAllocationTick_V2, AllocationAmount, AllocationKind, ClrInstanceID, AllocationAmount64, TypeID, TypeName, HeapIndex)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCAllocationTick_V3
//

#define EventEnabledGCAllocationTick_V3() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for GCAllocationTick_V3
//
#define FireEtwGCAllocationTick_V3(AllocationAmount, AllocationKind, ClrInstanceID, AllocationAmount64, TypeID, TypeName, HeapIndex, Address)\
        EventEnabledGCAllocationTick_V3() ?\
        CoTemplate_qqhxpzqp(Microsoft_Windows_DotNETRuntimeHandle, &GCAllocationTick_V3, AllocationAmount, AllocationKind, ClrInstanceID, AllocationAmount64, TypeID, TypeName, HeapIndex, Address)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCCreateConcurrentThread
//

#define EventEnabledGCCreateConcurrentThread() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCCreateConcurrentThread
//
#define FireEtwGCCreateConcurrentThread()\
        EventEnabledGCCreateConcurrentThread() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &GCCreateConcurrentThread)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCCreateConcurrentThread_V1
//

#define EventEnabledGCCreateConcurrentThread_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for GCCreateConcurrentThread_V1
//
#define FireEtwGCCreateConcurrentThread_V1(ClrInstanceID)\
        EventEnabledGCCreateConcurrentThread_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimeHandle, &GCCreateConcurrentThread_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCTerminateConcurrentThread
//

#define EventEnabledGCTerminateConcurrentThread() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCTerminateConcurrentThread
//
#define FireEtwGCTerminateConcurrentThread()\
        EventEnabledGCTerminateConcurrentThread() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &GCTerminateConcurrentThread)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCTerminateConcurrentThread_V1
//

#define EventEnabledGCTerminateConcurrentThread_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for GCTerminateConcurrentThread_V1
//
#define FireEtwGCTerminateConcurrentThread_V1(ClrInstanceID)\
        EventEnabledGCTerminateConcurrentThread_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimeHandle, &GCTerminateConcurrentThread_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCFinalizersEnd
//

#define EventEnabledGCFinalizersEnd() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCFinalizersEnd
//
#define FireEtwGCFinalizersEnd(Count)\
        EventEnabledGCFinalizersEnd() ?\
        CoTemplate_q(Microsoft_Windows_DotNETRuntimeHandle, &GCFinalizersEnd, Count)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCFinalizersEnd_V1
//

#define EventEnabledGCFinalizersEnd_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCFinalizersEnd_V1
//
#define FireEtwGCFinalizersEnd_V1(Count, ClrInstanceID)\
        EventEnabledGCFinalizersEnd_V1() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimeHandle, &GCFinalizersEnd_V1, Count, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCFinalizersBegin
//

#define EventEnabledGCFinalizersBegin() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCFinalizersBegin
//
#define FireEtwGCFinalizersBegin()\
        EventEnabledGCFinalizersBegin() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &GCFinalizersBegin)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCFinalizersBegin_V1
//

#define EventEnabledGCFinalizersBegin_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCFinalizersBegin_V1
//
#define FireEtwGCFinalizersBegin_V1(ClrInstanceID)\
        EventEnabledGCFinalizersBegin_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimeHandle, &GCFinalizersBegin_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BulkType
//

#define EventEnabledBulkType() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000008) != 0)

//
// Event Macro for BulkType
//
#define FireEtwBulkType(Count, ClrInstanceID, Values_Len_, Values)\
        EventEnabledBulkType() ?\
        CoTemplate_qhNR0(Microsoft_Windows_DotNETRuntimeHandle, &BulkType, Count, ClrInstanceID, Values_Len_, Values)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCBulkRootEdge
//

#define EventEnabledGCBulkRootEdge() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for GCBulkRootEdge
//
#define FireEtwGCBulkRootEdge(Index, Count, ClrInstanceID, Values_Len_, Values)\
        EventEnabledGCBulkRootEdge() ?\
        CoTemplate_qqhNR1(Microsoft_Windows_DotNETRuntimeHandle, &GCBulkRootEdge, Index, Count, ClrInstanceID, Values_Len_, Values)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCBulkRootConditionalWeakTableElementEdge
//

#define EventEnabledGCBulkRootConditionalWeakTableElementEdge() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for GCBulkRootConditionalWeakTableElementEdge
//
#define FireEtwGCBulkRootConditionalWeakTableElementEdge(Index, Count, ClrInstanceID, Values_Len_, Values)\
        EventEnabledGCBulkRootConditionalWeakTableElementEdge() ?\
        CoTemplate_qqhNR1(Microsoft_Windows_DotNETRuntimeHandle, &GCBulkRootConditionalWeakTableElementEdge, Index, Count, ClrInstanceID, Values_Len_, Values)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCBulkNode
//

#define EventEnabledGCBulkNode() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for GCBulkNode
//
#define FireEtwGCBulkNode(Index, Count, ClrInstanceID, Values_Len_, Values)\
        EventEnabledGCBulkNode() ?\
        CoTemplate_qqhNR1(Microsoft_Windows_DotNETRuntimeHandle, &GCBulkNode, Index, Count, ClrInstanceID, Values_Len_, Values)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCBulkEdge
//

#define EventEnabledGCBulkEdge() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for GCBulkEdge
//
#define FireEtwGCBulkEdge(Index, Count, ClrInstanceID, Values_Len_, Values)\
        EventEnabledGCBulkEdge() ?\
        CoTemplate_qqhNR1(Microsoft_Windows_DotNETRuntimeHandle, &GCBulkEdge, Index, Count, ClrInstanceID, Values_Len_, Values)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCSampledObjectAllocationHigh
//

#define EventEnabledGCSampledObjectAllocationHigh() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for GCSampledObjectAllocationHigh
//
#define FireEtwGCSampledObjectAllocationHigh(Address, TypeID, ObjectCountForTypeSample, TotalSizeForTypeSample, ClrInstanceID)\
        EventEnabledGCSampledObjectAllocationHigh() ?\
        CoTemplate_ppqxh(Microsoft_Windows_DotNETRuntimeHandle, &GCSampledObjectAllocationHigh, Address, TypeID, ObjectCountForTypeSample, TotalSizeForTypeSample, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCBulkSurvivingObjectRanges
//

#define EventEnabledGCBulkSurvivingObjectRanges() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for GCBulkSurvivingObjectRanges
//
#define FireEtwGCBulkSurvivingObjectRanges(Index, Count, ClrInstanceID, Values_Len_, Values)\
        EventEnabledGCBulkSurvivingObjectRanges() ?\
        CoTemplate_qqhNR1(Microsoft_Windows_DotNETRuntimeHandle, &GCBulkSurvivingObjectRanges, Index, Count, ClrInstanceID, Values_Len_, Values)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCBulkMovedObjectRanges
//

#define EventEnabledGCBulkMovedObjectRanges() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for GCBulkMovedObjectRanges
//
#define FireEtwGCBulkMovedObjectRanges(Index, Count, ClrInstanceID, Values_Len_, Values)\
        EventEnabledGCBulkMovedObjectRanges() ?\
        CoTemplate_qqhNR1(Microsoft_Windows_DotNETRuntimeHandle, &GCBulkMovedObjectRanges, Index, Count, ClrInstanceID, Values_Len_, Values)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCGenerationRange
//

#define EventEnabledGCGenerationRange() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for GCGenerationRange
//
#define FireEtwGCGenerationRange(Generation, RangeStart, RangeUsedLength, RangeReservedLength, ClrInstanceID)\
        EventEnabledGCGenerationRange() ?\
        CoTemplate_cpxxh(Microsoft_Windows_DotNETRuntimeHandle, &GCGenerationRange, Generation, RangeStart, RangeUsedLength, RangeReservedLength, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCMarkStackRoots
//

#define EventEnabledGCMarkStackRoots() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCMarkStackRoots
//
#define FireEtwGCMarkStackRoots(HeapNum, ClrInstanceID)\
        EventEnabledGCMarkStackRoots() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimeHandle, &GCMarkStackRoots, HeapNum, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCMarkFinalizeQueueRoots
//

#define EventEnabledGCMarkFinalizeQueueRoots() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCMarkFinalizeQueueRoots
//
#define FireEtwGCMarkFinalizeQueueRoots(HeapNum, ClrInstanceID)\
        EventEnabledGCMarkFinalizeQueueRoots() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimeHandle, &GCMarkFinalizeQueueRoots, HeapNum, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCMarkHandles
//

#define EventEnabledGCMarkHandles() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCMarkHandles
//
#define FireEtwGCMarkHandles(HeapNum, ClrInstanceID)\
        EventEnabledGCMarkHandles() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimeHandle, &GCMarkHandles, HeapNum, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCMarkOlderGenerationRoots
//

#define EventEnabledGCMarkOlderGenerationRoots() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCMarkOlderGenerationRoots
//
#define FireEtwGCMarkOlderGenerationRoots(HeapNum, ClrInstanceID)\
        EventEnabledGCMarkOlderGenerationRoots() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimeHandle, &GCMarkOlderGenerationRoots, HeapNum, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FinalizeObject
//

#define EventEnabledFinalizeObject() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for FinalizeObject
//
#define FireEtwFinalizeObject(TypeID, ObjectID, ClrInstanceID)\
        EventEnabledFinalizeObject() ?\
        CoTemplate_pph(Microsoft_Windows_DotNETRuntimeHandle, &FinalizeObject, TypeID, ObjectID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SetGCHandle
//

#define EventEnabledSetGCHandle() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000080) != 0)

//
// Event Macro for SetGCHandle
//
#define FireEtwSetGCHandle(HandleID, ObjectID, Kind, Generation, AppDomainID, ClrInstanceID)\
        EventEnabledSetGCHandle() ?\
        CoTemplate_ppqqxh(Microsoft_Windows_DotNETRuntimeHandle, &SetGCHandle, HandleID, ObjectID, Kind, Generation, AppDomainID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DestroyGCHandle
//

#define EventEnabledDestroyGCHandle() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000080) != 0)

//
// Event Macro for DestroyGCHandle
//
#define FireEtwDestroyGCHandle(HandleID, ClrInstanceID)\
        EventEnabledDestroyGCHandle() ?\
        CoTemplate_ph(Microsoft_Windows_DotNETRuntimeHandle, &DestroyGCHandle, HandleID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCSampledObjectAllocationLow
//

#define EventEnabledGCSampledObjectAllocationLow() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000100) != 0)

//
// Event Macro for GCSampledObjectAllocationLow
//
#define FireEtwGCSampledObjectAllocationLow(Address, TypeID, ObjectCountForTypeSample, TotalSizeForTypeSample, ClrInstanceID)\
        EventEnabledGCSampledObjectAllocationLow() ?\
        CoTemplate_ppqxh(Microsoft_Windows_DotNETRuntimeHandle, &GCSampledObjectAllocationLow, Address, TypeID, ObjectCountForTypeSample, TotalSizeForTypeSample, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PinObjectAtGCTime
//

#define EventEnabledPinObjectAtGCTime() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for PinObjectAtGCTime
//
#define FireEtwPinObjectAtGCTime(HandleID, ObjectID, ObjectSize, TypeName, ClrInstanceID)\
        EventEnabledPinObjectAtGCTime() ?\
        CoTemplate_ppxzh(Microsoft_Windows_DotNETRuntimeHandle, &PinObjectAtGCTime, HandleID, ObjectID, ObjectSize, TypeName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCTriggered
//

#define EventEnabledGCTriggered() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCTriggered
//
#define FireEtwGCTriggered(Reason, ClrInstanceID)\
        EventEnabledGCTriggered() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimeHandle, &GCTriggered, Reason, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCBulkRootCCW
//

#define EventEnabledGCBulkRootCCW() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for GCBulkRootCCW
//
#define FireEtwGCBulkRootCCW(Count, ClrInstanceID, Values_Len_, Values)\
        EventEnabledGCBulkRootCCW() ?\
        CoTemplate_qhNR0(Microsoft_Windows_DotNETRuntimeHandle, &GCBulkRootCCW, Count, ClrInstanceID, Values_Len_, Values)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCBulkRCW
//

#define EventEnabledGCBulkRCW() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for GCBulkRCW
//
#define FireEtwGCBulkRCW(Count, ClrInstanceID, Values_Len_, Values)\
        EventEnabledGCBulkRCW() ?\
        CoTemplate_qhNR0(Microsoft_Windows_DotNETRuntimeHandle, &GCBulkRCW, Count, ClrInstanceID, Values_Len_, Values)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCBulkRootStaticVar
//

#define EventEnabledGCBulkRootStaticVar() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for GCBulkRootStaticVar
//
#define FireEtwGCBulkRootStaticVar(Count, AppDomainID, ClrInstanceID, Values_Len_, Values)\
        EventEnabledGCBulkRootStaticVar() ?\
        CoTemplate_qxhNR0(Microsoft_Windows_DotNETRuntimeHandle, &GCBulkRootStaticVar, Count, AppDomainID, ClrInstanceID, Values_Len_, Values)\
        : ERROR_SUCCESS\

//
// Enablement check macro for WorkerThreadCreate
//

#define EventEnabledWorkerThreadCreate() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for WorkerThreadCreate
//
#define FireEtwWorkerThreadCreate(WorkerThreadCount, RetiredWorkerThreads)\
        EventEnabledWorkerThreadCreate() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimeHandle, &WorkerThreadCreate, WorkerThreadCount, RetiredWorkerThreads)\
        : ERROR_SUCCESS\

//
// Enablement check macro for WorkerThreadTerminate
//

#define EventEnabledWorkerThreadTerminate() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for WorkerThreadTerminate
//
#define FireEtwWorkerThreadTerminate(WorkerThreadCount, RetiredWorkerThreads)\
        EventEnabledWorkerThreadTerminate() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimeHandle, &WorkerThreadTerminate, WorkerThreadCount, RetiredWorkerThreads)\
        : ERROR_SUCCESS\

//
// Enablement check macro for WorkerThreadRetire
//

#define EventEnabledWorkerThreadRetire() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for WorkerThreadRetire
//
#define FireEtwWorkerThreadRetire(WorkerThreadCount, RetiredWorkerThreads)\
        EventEnabledWorkerThreadRetire() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimeHandle, &WorkerThreadRetire, WorkerThreadCount, RetiredWorkerThreads)\
        : ERROR_SUCCESS\

//
// Enablement check macro for WorkerThreadUnretire
//

#define EventEnabledWorkerThreadUnretire() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for WorkerThreadUnretire
//
#define FireEtwWorkerThreadUnretire(WorkerThreadCount, RetiredWorkerThreads)\
        EventEnabledWorkerThreadUnretire() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimeHandle, &WorkerThreadUnretire, WorkerThreadCount, RetiredWorkerThreads)\
        : ERROR_SUCCESS\

//
// Enablement check macro for IOThreadCreate
//

#define EventEnabledIOThreadCreate() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for IOThreadCreate
//
#define FireEtwIOThreadCreate(IOThreadCount, RetiredIOThreads)\
        EventEnabledIOThreadCreate() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimeHandle, &IOThreadCreate, IOThreadCount, RetiredIOThreads)\
        : ERROR_SUCCESS\

//
// Enablement check macro for IOThreadCreate_V1
//

#define EventEnabledIOThreadCreate_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for IOThreadCreate_V1
//
#define FireEtwIOThreadCreate_V1(IOThreadCount, RetiredIOThreads, ClrInstanceID)\
        EventEnabledIOThreadCreate_V1() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimeHandle, &IOThreadCreate_V1, IOThreadCount, RetiredIOThreads, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for IOThreadTerminate
//

#define EventEnabledIOThreadTerminate() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for IOThreadTerminate
//
#define FireEtwIOThreadTerminate(IOThreadCount, RetiredIOThreads)\
        EventEnabledIOThreadTerminate() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimeHandle, &IOThreadTerminate, IOThreadCount, RetiredIOThreads)\
        : ERROR_SUCCESS\

//
// Enablement check macro for IOThreadTerminate_V1
//

#define EventEnabledIOThreadTerminate_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for IOThreadTerminate_V1
//
#define FireEtwIOThreadTerminate_V1(IOThreadCount, RetiredIOThreads, ClrInstanceID)\
        EventEnabledIOThreadTerminate_V1() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimeHandle, &IOThreadTerminate_V1, IOThreadCount, RetiredIOThreads, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for IOThreadRetire
//

#define EventEnabledIOThreadRetire() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for IOThreadRetire
//
#define FireEtwIOThreadRetire(IOThreadCount, RetiredIOThreads)\
        EventEnabledIOThreadRetire() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimeHandle, &IOThreadRetire, IOThreadCount, RetiredIOThreads)\
        : ERROR_SUCCESS\

//
// Enablement check macro for IOThreadRetire_V1
//

#define EventEnabledIOThreadRetire_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for IOThreadRetire_V1
//
#define FireEtwIOThreadRetire_V1(IOThreadCount, RetiredIOThreads, ClrInstanceID)\
        EventEnabledIOThreadRetire_V1() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimeHandle, &IOThreadRetire_V1, IOThreadCount, RetiredIOThreads, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for IOThreadUnretire
//

#define EventEnabledIOThreadUnretire() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for IOThreadUnretire
//
#define FireEtwIOThreadUnretire(IOThreadCount, RetiredIOThreads)\
        EventEnabledIOThreadUnretire() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimeHandle, &IOThreadUnretire, IOThreadCount, RetiredIOThreads)\
        : ERROR_SUCCESS\

//
// Enablement check macro for IOThreadUnretire_V1
//

#define EventEnabledIOThreadUnretire_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for IOThreadUnretire_V1
//
#define FireEtwIOThreadUnretire_V1(IOThreadCount, RetiredIOThreads, ClrInstanceID)\
        EventEnabledIOThreadUnretire_V1() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimeHandle, &IOThreadUnretire_V1, IOThreadCount, RetiredIOThreads, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadpoolSuspensionSuspendThread
//

#define EventEnabledThreadpoolSuspensionSuspendThread() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for ThreadpoolSuspensionSuspendThread
//
#define FireEtwThreadpoolSuspensionSuspendThread(ClrThreadID, CpuUtilization)\
        EventEnabledThreadpoolSuspensionSuspendThread() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimeHandle, &ThreadpoolSuspensionSuspendThread, ClrThreadID, CpuUtilization)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadpoolSuspensionResumeThread
//

#define EventEnabledThreadpoolSuspensionResumeThread() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for ThreadpoolSuspensionResumeThread
//
#define FireEtwThreadpoolSuspensionResumeThread(ClrThreadID, CpuUtilization)\
        EventEnabledThreadpoolSuspensionResumeThread() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimeHandle, &ThreadpoolSuspensionResumeThread, ClrThreadID, CpuUtilization)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolWorkerThreadStart
//

#define EventEnabledThreadPoolWorkerThreadStart() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for ThreadPoolWorkerThreadStart
//
#define FireEtwThreadPoolWorkerThreadStart(ActiveWorkerThreadCount, RetiredWorkerThreadCount, ClrInstanceID)\
        EventEnabledThreadPoolWorkerThreadStart() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolWorkerThreadStart, ActiveWorkerThreadCount, RetiredWorkerThreadCount, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolWorkerThreadStop
//

#define EventEnabledThreadPoolWorkerThreadStop() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for ThreadPoolWorkerThreadStop
//
#define FireEtwThreadPoolWorkerThreadStop(ActiveWorkerThreadCount, RetiredWorkerThreadCount, ClrInstanceID)\
        EventEnabledThreadPoolWorkerThreadStop() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolWorkerThreadStop, ActiveWorkerThreadCount, RetiredWorkerThreadCount, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolWorkerThreadRetirementStart
//

#define EventEnabledThreadPoolWorkerThreadRetirementStart() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for ThreadPoolWorkerThreadRetirementStart
//
#define FireEtwThreadPoolWorkerThreadRetirementStart(ActiveWorkerThreadCount, RetiredWorkerThreadCount, ClrInstanceID)\
        EventEnabledThreadPoolWorkerThreadRetirementStart() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolWorkerThreadRetirementStart, ActiveWorkerThreadCount, RetiredWorkerThreadCount, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolWorkerThreadRetirementStop
//

#define EventEnabledThreadPoolWorkerThreadRetirementStop() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for ThreadPoolWorkerThreadRetirementStop
//
#define FireEtwThreadPoolWorkerThreadRetirementStop(ActiveWorkerThreadCount, RetiredWorkerThreadCount, ClrInstanceID)\
        EventEnabledThreadPoolWorkerThreadRetirementStop() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolWorkerThreadRetirementStop, ActiveWorkerThreadCount, RetiredWorkerThreadCount, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolWorkerThreadAdjustmentSample
//

#define EventEnabledThreadPoolWorkerThreadAdjustmentSample() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for ThreadPoolWorkerThreadAdjustmentSample
//
#define FireEtwThreadPoolWorkerThreadAdjustmentSample(Throughput, ClrInstanceID)\
        EventEnabledThreadPoolWorkerThreadAdjustmentSample() ?\
        CoTemplate_gh(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolWorkerThreadAdjustmentSample, Throughput, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolWorkerThreadAdjustmentAdjustment
//

#define EventEnabledThreadPoolWorkerThreadAdjustmentAdjustment() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for ThreadPoolWorkerThreadAdjustmentAdjustment
//
#define FireEtwThreadPoolWorkerThreadAdjustmentAdjustment(AverageThroughput, NewWorkerThreadCount, Reason, ClrInstanceID)\
        EventEnabledThreadPoolWorkerThreadAdjustmentAdjustment() ?\
        CoTemplate_gqqh(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolWorkerThreadAdjustmentAdjustment, AverageThroughput, NewWorkerThreadCount, Reason, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolWorkerThreadAdjustmentStats
//

#define EventEnabledThreadPoolWorkerThreadAdjustmentStats() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000400) != 0)

//
// Event Macro for ThreadPoolWorkerThreadAdjustmentStats
//
#define FireEtwThreadPoolWorkerThreadAdjustmentStats(Duration, Throughput, ThreadWave, ThroughputWave, ThroughputErrorEstimate, AverageThroughputErrorEstimate, ThroughputRatio, Confidence, NewControlSetting, NewThreadWaveMagnitude, ClrInstanceID)\
        EventEnabledThreadPoolWorkerThreadAdjustmentStats() ?\
        CoTemplate_ggggggggghh(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolWorkerThreadAdjustmentStats, Duration, Throughput, ThreadWave, ThroughputWave, ThroughputErrorEstimate, AverageThroughputErrorEstimate, ThroughputRatio, Confidence, NewControlSetting, NewThreadWaveMagnitude, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolWorkerThreadWait
//

#define EventEnabledThreadPoolWorkerThreadWait() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for ThreadPoolWorkerThreadWait
//
#define FireEtwThreadPoolWorkerThreadWait(ActiveWorkerThreadCount, RetiredWorkerThreadCount, ClrInstanceID)\
        EventEnabledThreadPoolWorkerThreadWait() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolWorkerThreadWait, ActiveWorkerThreadCount, RetiredWorkerThreadCount, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolWorkingThreadCount
//

#define EventEnabledThreadPoolWorkingThreadCount() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000400) != 0)

//
// Event Macro for ThreadPoolWorkingThreadCount
//
#define FireEtwThreadPoolWorkingThreadCount(Count, ClrInstanceID)\
        EventEnabledThreadPoolWorkingThreadCount() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolWorkingThreadCount, Count, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolEnqueue
//

#define EventEnabledThreadPoolEnqueue() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000800) != 0)

//
// Event Macro for ThreadPoolEnqueue
//
#define FireEtwThreadPoolEnqueue(WorkID, ClrInstanceID)\
        EventEnabledThreadPoolEnqueue() ?\
        CoTemplate_ph(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolEnqueue, WorkID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolDequeue
//

#define EventEnabledThreadPoolDequeue() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000800) != 0)

//
// Event Macro for ThreadPoolDequeue
//
#define FireEtwThreadPoolDequeue(WorkID, ClrInstanceID)\
        EventEnabledThreadPoolDequeue() ?\
        CoTemplate_ph(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolDequeue, WorkID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolIOEnqueue
//

#define EventEnabledThreadPoolIOEnqueue() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000800) != 0)

//
// Event Macro for ThreadPoolIOEnqueue
//
#define FireEtwThreadPoolIOEnqueue(NativeOverlapped, Overlapped, MultiDequeues, ClrInstanceID)\
        EventEnabledThreadPoolIOEnqueue() ?\
        CoTemplate_ppth(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolIOEnqueue, NativeOverlapped, Overlapped, MultiDequeues, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolIODequeue
//

#define EventEnabledThreadPoolIODequeue() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000800) != 0)

//
// Event Macro for ThreadPoolIODequeue
//
#define FireEtwThreadPoolIODequeue(NativeOverlapped, Overlapped, ClrInstanceID)\
        EventEnabledThreadPoolIODequeue() ?\
        CoTemplate_pph(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolIODequeue, NativeOverlapped, Overlapped, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadPoolIOPack
//

#define EventEnabledThreadPoolIOPack() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000400) != 0)

//
// Event Macro for ThreadPoolIOPack
//
#define FireEtwThreadPoolIOPack(NativeOverlapped, Overlapped, ClrInstanceID)\
        EventEnabledThreadPoolIOPack() ?\
        CoTemplate_pph(Microsoft_Windows_DotNETRuntimeHandle, &ThreadPoolIOPack, NativeOverlapped, Overlapped, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadCreating
//

#define EventEnabledThreadCreating() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00001000) != 0)

//
// Event Macro for ThreadCreating
//
#define FireEtwThreadCreating(ID, ClrInstanceID)\
        EventEnabledThreadCreating() ?\
        CoTemplate_ph(Microsoft_Windows_DotNETRuntimeHandle, &ThreadCreating, ID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadRunning
//

#define EventEnabledThreadRunning() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00001000) != 0)

//
// Event Macro for ThreadRunning
//
#define FireEtwThreadRunning(ID, ClrInstanceID)\
        EventEnabledThreadRunning() ?\
        CoTemplate_ph(Microsoft_Windows_DotNETRuntimeHandle, &ThreadRunning, ID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ExceptionThrown
//

#define EventEnabledExceptionThrown() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for ExceptionThrown
//
#define FireEtwExceptionThrown()\
        EventEnabledExceptionThrown() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &ExceptionThrown)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ExceptionThrown_V1
//

#define EventEnabledExceptionThrown_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00004000) != 0)

//
// Event Macro for ExceptionThrown_V1
//
#define FireEtwExceptionThrown_V1(ExceptionType, ExceptionMessage, ExceptionEIP, ExceptionHRESULT, ExceptionFlags, ClrInstanceID)\
        EventEnabledExceptionThrown_V1() ?\
        CoTemplate_zzpqhh(Microsoft_Windows_DotNETRuntimeHandle, &ExceptionThrown_V1, ExceptionType, ExceptionMessage, ExceptionEIP, ExceptionHRESULT, ExceptionFlags, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for Contention
//

#define EventEnabledContention() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for Contention
//
#define FireEtwContention()\
        EventEnabledContention() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &Contention)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ContentionStart_V1
//

#define EventEnabledContentionStart_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00008000) != 0)

//
// Event Macro for ContentionStart_V1
//
#define FireEtwContentionStart_V1(ContentionFlags, ClrInstanceID)\
        EventEnabledContentionStart_V1() ?\
        CoTemplate_ch(Microsoft_Windows_DotNETRuntimeHandle, &ContentionStart_V1, ContentionFlags, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ContentionStop
//

#define EventEnabledContentionStop() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00008000) != 0)

//
// Event Macro for ContentionStop
//
#define FireEtwContentionStop(ContentionFlags, ClrInstanceID)\
        EventEnabledContentionStop() ?\
        CoTemplate_ch(Microsoft_Windows_DotNETRuntimeHandle, &ContentionStop, ContentionFlags, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for CLRStackWalk
//

#define EventEnabledCLRStackWalk() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00010000) != 0)

//
// Event Macro for CLRStackWalk
//
#define FireEtwCLRStackWalk(ClrInstanceID, Reserved1, Reserved2, FrameCount, Stack)\
        EventEnabledCLRStackWalk() ?\
        CoTemplate_hccqP2(Microsoft_Windows_DotNETRuntimeHandle, &CLRStackWalk, ClrInstanceID, Reserved1, Reserved2, FrameCount, Stack)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AppDomainMemAllocated
//

#define EventEnabledAppDomainMemAllocated() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00020000) != 0)

//
// Event Macro for AppDomainMemAllocated
//
#define FireEtwAppDomainMemAllocated(AppDomainID, Allocated, ClrInstanceID)\
        EventEnabledAppDomainMemAllocated() ?\
        CoTemplate_xxh(Microsoft_Windows_DotNETRuntimeHandle, &AppDomainMemAllocated, AppDomainID, Allocated, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AppDomainMemSurvived
//

#define EventEnabledAppDomainMemSurvived() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00020000) != 0)

//
// Event Macro for AppDomainMemSurvived
//
#define FireEtwAppDomainMemSurvived(AppDomainID, Survived, ProcessSurvived, ClrInstanceID)\
        EventEnabledAppDomainMemSurvived() ?\
        CoTemplate_xxxh(Microsoft_Windows_DotNETRuntimeHandle, &AppDomainMemSurvived, AppDomainID, Survived, ProcessSurvived, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadCreated
//

#define EventEnabledThreadCreated() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00040000) != 0)

//
// Event Macro for ThreadCreated
//
#define FireEtwThreadCreated(ManagedThreadID, AppDomainID, Flags, ManagedThreadIndex, OSThreadID, ClrInstanceID)\
        EventEnabledThreadCreated() ?\
        CoTemplate_xxqqqh(Microsoft_Windows_DotNETRuntimeHandle, &ThreadCreated, ManagedThreadID, AppDomainID, Flags, ManagedThreadIndex, OSThreadID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadTerminated
//

#define EventEnabledThreadTerminated() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00040000) != 0)

//
// Event Macro for ThreadTerminated
//
#define FireEtwThreadTerminated(ManagedThreadID, AppDomainID, ClrInstanceID)\
        EventEnabledThreadTerminated() ?\
        CoTemplate_xxh(Microsoft_Windows_DotNETRuntimeHandle, &ThreadTerminated, ManagedThreadID, AppDomainID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadDomainEnter
//

#define EventEnabledThreadDomainEnter() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00040000) != 0)

//
// Event Macro for ThreadDomainEnter
//
#define FireEtwThreadDomainEnter(ManagedThreadID, AppDomainID, ClrInstanceID)\
        EventEnabledThreadDomainEnter() ?\
        CoTemplate_xxh(Microsoft_Windows_DotNETRuntimeHandle, &ThreadDomainEnter, ManagedThreadID, AppDomainID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ILStubGenerated
//

#define EventEnabledILStubGenerated() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00080000) != 0)

//
// Event Macro for ILStubGenerated
//
#define FireEtwILStubGenerated(ClrInstanceID, ModuleID, StubMethodID, StubFlags, ManagedInteropMethodToken, ManagedInteropMethodNamespace, ManagedInteropMethodName, ManagedInteropMethodSignature, NativeMethodSignature, StubMethodSignature, StubMethodILCode)\
        EventEnabledILStubGenerated() ?\
        CoTemplate_hxxqqzzzzzz(Microsoft_Windows_DotNETRuntimeHandle, &ILStubGenerated, ClrInstanceID, ModuleID, StubMethodID, StubFlags, ManagedInteropMethodToken, ManagedInteropMethodNamespace, ManagedInteropMethodName, ManagedInteropMethodSignature, NativeMethodSignature, StubMethodSignature, StubMethodILCode)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ILStubCacheHit
//

#define EventEnabledILStubCacheHit() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00080000) != 0)

//
// Event Macro for ILStubCacheHit
//
#define FireEtwILStubCacheHit(ClrInstanceID, ModuleID, StubMethodID, ManagedInteropMethodToken, ManagedInteropMethodNamespace, ManagedInteropMethodName, ManagedInteropMethodSignature)\
        EventEnabledILStubCacheHit() ?\
        CoTemplate_hxxqzzz(Microsoft_Windows_DotNETRuntimeHandle, &ILStubCacheHit, ClrInstanceID, ModuleID, StubMethodID, ManagedInteropMethodToken, ManagedInteropMethodNamespace, ManagedInteropMethodName, ManagedInteropMethodSignature)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DCStartCompleteV2
//

#define EventEnabledDCStartCompleteV2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for DCStartCompleteV2
//
#define FireEtwDCStartCompleteV2()\
        EventEnabledDCStartCompleteV2() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &DCStartCompleteV2)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DCEndCompleteV2
//

#define EventEnabledDCEndCompleteV2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for DCEndCompleteV2
//
#define FireEtwDCEndCompleteV2()\
        EventEnabledDCEndCompleteV2() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &DCEndCompleteV2)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCStartV2
//

#define EventEnabledMethodDCStartV2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodDCStartV2
//
#define FireEtwMethodDCStartV2(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags)\
        EventEnabledMethodDCStartV2() ?\
        CoTemplate_xxxqqq(Microsoft_Windows_DotNETRuntimeHandle, &MethodDCStartV2, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCEndV2
//

#define EventEnabledMethodDCEndV2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodDCEndV2
//
#define FireEtwMethodDCEndV2(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags)\
        EventEnabledMethodDCEndV2() ?\
        CoTemplate_xxxqqq(Microsoft_Windows_DotNETRuntimeHandle, &MethodDCEndV2, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCStartVerboseV2
//

#define EventEnabledMethodDCStartVerboseV2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodDCStartVerboseV2
//
#define FireEtwMethodDCStartVerboseV2(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature)\
        EventEnabledMethodDCStartVerboseV2() ?\
        CoTemplate_xxxqqqzzz(Microsoft_Windows_DotNETRuntimeHandle, &MethodDCStartVerboseV2, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCEndVerboseV2
//

#define EventEnabledMethodDCEndVerboseV2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodDCEndVerboseV2
//
#define FireEtwMethodDCEndVerboseV2(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature)\
        EventEnabledMethodDCEndVerboseV2() ?\
        CoTemplate_xxxqqqzzz(Microsoft_Windows_DotNETRuntimeHandle, &MethodDCEndVerboseV2, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodLoad
//

#define EventEnabledMethodLoad() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodLoad
//
#define FireEtwMethodLoad(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags)\
        EventEnabledMethodLoad() ?\
        CoTemplate_xxxqqq(Microsoft_Windows_DotNETRuntimeHandle, &MethodLoad, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodLoad_V1
//

#define EventEnabledMethodLoad_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodLoad_V1
//
#define FireEtwMethodLoad_V1(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID)\
        EventEnabledMethodLoad_V1() ?\
        CoTemplate_xxxqqqh(Microsoft_Windows_DotNETRuntimeHandle, &MethodLoad_V1, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodLoad_V2
//

#define EventEnabledMethodLoad_V2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodLoad_V2
//
#define FireEtwMethodLoad_V2(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID, ReJITID)\
        EventEnabledMethodLoad_V2() ?\
        CoTemplate_xxxqqqhx(Microsoft_Windows_DotNETRuntimeHandle, &MethodLoad_V2, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID, ReJITID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodUnload
//

#define EventEnabledMethodUnload() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodUnload
//
#define FireEtwMethodUnload(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags)\
        EventEnabledMethodUnload() ?\
        CoTemplate_xxxqqq(Microsoft_Windows_DotNETRuntimeHandle, &MethodUnload, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodUnload_V1
//

#define EventEnabledMethodUnload_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodUnload_V1
//
#define FireEtwMethodUnload_V1(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID)\
        EventEnabledMethodUnload_V1() ?\
        CoTemplate_xxxqqqh(Microsoft_Windows_DotNETRuntimeHandle, &MethodUnload_V1, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodUnload_V2
//

#define EventEnabledMethodUnload_V2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodUnload_V2
//
#define FireEtwMethodUnload_V2(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID, ReJITID)\
        EventEnabledMethodUnload_V2() ?\
        CoTemplate_xxxqqqhx(Microsoft_Windows_DotNETRuntimeHandle, &MethodUnload_V2, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID, ReJITID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodLoadVerbose
//

#define EventEnabledMethodLoadVerbose() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodLoadVerbose
//
#define FireEtwMethodLoadVerbose(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature)\
        EventEnabledMethodLoadVerbose() ?\
        CoTemplate_xxxqqqzzz(Microsoft_Windows_DotNETRuntimeHandle, &MethodLoadVerbose, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodLoadVerbose_V1
//

#define EventEnabledMethodLoadVerbose_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodLoadVerbose_V1
//
#define FireEtwMethodLoadVerbose_V1(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID)\
        EventEnabledMethodLoadVerbose_V1() ?\
        CoTemplate_xxxqqqzzzh(Microsoft_Windows_DotNETRuntimeHandle, &MethodLoadVerbose_V1, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodLoadVerbose_V2
//

#define EventEnabledMethodLoadVerbose_V2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodLoadVerbose_V2
//
#define FireEtwMethodLoadVerbose_V2(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID, ReJITID)\
        EventEnabledMethodLoadVerbose_V2() ?\
        CoTemplate_xxxqqqzzzhx(Microsoft_Windows_DotNETRuntimeHandle, &MethodLoadVerbose_V2, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID, ReJITID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodUnloadVerbose
//

#define EventEnabledMethodUnloadVerbose() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodUnloadVerbose
//
#define FireEtwMethodUnloadVerbose(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature)\
        EventEnabledMethodUnloadVerbose() ?\
        CoTemplate_xxxqqqzzz(Microsoft_Windows_DotNETRuntimeHandle, &MethodUnloadVerbose, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodUnloadVerbose_V1
//

#define EventEnabledMethodUnloadVerbose_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodUnloadVerbose_V1
//
#define FireEtwMethodUnloadVerbose_V1(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID)\
        EventEnabledMethodUnloadVerbose_V1() ?\
        CoTemplate_xxxqqqzzzh(Microsoft_Windows_DotNETRuntimeHandle, &MethodUnloadVerbose_V1, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodUnloadVerbose_V2
//

#define EventEnabledMethodUnloadVerbose_V2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for MethodUnloadVerbose_V2
//
#define FireEtwMethodUnloadVerbose_V2(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID, ReJITID)\
        EventEnabledMethodUnloadVerbose_V2() ?\
        CoTemplate_xxxqqqzzzhx(Microsoft_Windows_DotNETRuntimeHandle, &MethodUnloadVerbose_V2, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID, ReJITID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodJittingStarted
//

#define EventEnabledMethodJittingStarted() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00200000) != 0)

//
// Event Macro for MethodJittingStarted
//
#define FireEtwMethodJittingStarted(MethodID, ModuleID, MethodToken, MethodILSize, MethodNamespace, MethodName, MethodSignature)\
        EventEnabledMethodJittingStarted() ?\
        CoTemplate_xxqqzzz(Microsoft_Windows_DotNETRuntimeHandle, &MethodJittingStarted, MethodID, ModuleID, MethodToken, MethodILSize, MethodNamespace, MethodName, MethodSignature)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodJittingStarted_V1
//

#define EventEnabledMethodJittingStarted_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00200000) != 0)

//
// Event Macro for MethodJittingStarted_V1
//
#define FireEtwMethodJittingStarted_V1(MethodID, ModuleID, MethodToken, MethodILSize, MethodNamespace, MethodName, MethodSignature, ClrInstanceID)\
        EventEnabledMethodJittingStarted_V1() ?\
        CoTemplate_xxqqzzzh(Microsoft_Windows_DotNETRuntimeHandle, &MethodJittingStarted_V1, MethodID, ModuleID, MethodToken, MethodILSize, MethodNamespace, MethodName, MethodSignature, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodJitInliningSucceeded
//

#define EventEnabledMethodJitInliningSucceeded() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00400000) != 0)

//
// Event Macro for MethodJitInliningSucceeded
//
#define FireEtwMethodJitInliningSucceeded(MethodBeingCompiledNamespace, MethodBeingCompiledName, MethodBeingCompiledNameSignature, InlinerNamespace, InlinerName, InlinerNameSignature, InlineeNamespace, InlineeName, InlineeNameSignature, ClrInstanceID)\
        EventEnabledMethodJitInliningSucceeded() ?\
        CoTemplate_zzzzzzzzzh(Microsoft_Windows_DotNETRuntimeHandle, &MethodJitInliningSucceeded, MethodBeingCompiledNamespace, MethodBeingCompiledName, MethodBeingCompiledNameSignature, InlinerNamespace, InlinerName, InlinerNameSignature, InlineeNamespace, InlineeName, InlineeNameSignature, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodJitInliningFailed
//

#define EventEnabledMethodJitInliningFailed() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00400000) != 0)

//
// Event Macro for MethodJitInliningFailed
//
#define FireEtwMethodJitInliningFailed(MethodBeingCompiledNamespace, MethodBeingCompiledName, MethodBeingCompiledNameSignature, InlinerNamespace, InlinerName, InlinerNameSignature, InlineeNamespace, InlineeName, InlineeNameSignature, FailAlways, FailReason, ClrInstanceID)\
        EventEnabledMethodJitInliningFailed() ?\
        CoTemplate_zzzzzzzzztsh(Microsoft_Windows_DotNETRuntimeHandle, &MethodJitInliningFailed, MethodBeingCompiledNamespace, MethodBeingCompiledName, MethodBeingCompiledNameSignature, InlinerNamespace, InlinerName, InlinerNameSignature, InlineeNamespace, InlineeName, InlineeNameSignature, FailAlways, FailReason, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodJitTailCallSucceeded
//

#define EventEnabledMethodJitTailCallSucceeded() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00400000) != 0)

//
// Event Macro for MethodJitTailCallSucceeded
//
#define FireEtwMethodJitTailCallSucceeded(MethodBeingCompiledNamespace, MethodBeingCompiledName, MethodBeingCompiledNameSignature, CallerNamespace, CallerName, CallerNameSignature, CalleeNamespace, CalleeName, CalleeNameSignature, TailPrefix, TailCallType, ClrInstanceID)\
        EventEnabledMethodJitTailCallSucceeded() ?\
        CoTemplate_zzzzzzzzztqh(Microsoft_Windows_DotNETRuntimeHandle, &MethodJitTailCallSucceeded, MethodBeingCompiledNamespace, MethodBeingCompiledName, MethodBeingCompiledNameSignature, CallerNamespace, CallerName, CallerNameSignature, CalleeNamespace, CalleeName, CalleeNameSignature, TailPrefix, TailCallType, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodJitTailCallFailed
//

#define EventEnabledMethodJitTailCallFailed() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00400000) != 0)

//
// Event Macro for MethodJitTailCallFailed
//
#define FireEtwMethodJitTailCallFailed(MethodBeingCompiledNamespace, MethodBeingCompiledName, MethodBeingCompiledNameSignature, CallerNamespace, CallerName, CallerNameSignature, CalleeNamespace, CalleeName, CalleeNameSignature, TailPrefix, FailReason, ClrInstanceID)\
        EventEnabledMethodJitTailCallFailed() ?\
        CoTemplate_zzzzzzzzztsh(Microsoft_Windows_DotNETRuntimeHandle, &MethodJitTailCallFailed, MethodBeingCompiledNamespace, MethodBeingCompiledName, MethodBeingCompiledNameSignature, CallerNamespace, CallerName, CallerNameSignature, CalleeNamespace, CalleeName, CalleeNameSignature, TailPrefix, FailReason, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodILToNativeMap
//

#define EventEnabledMethodILToNativeMap() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00800000) != 0)

//
// Event Macro for MethodILToNativeMap
//
#define FireEtwMethodILToNativeMap(MethodID, ReJITID, MethodExtent, CountOfMapEntries, ILOffsets, NativeOffsets, ClrInstanceID)\
        EventEnabledMethodILToNativeMap() ?\
        CoTemplate_xxchQR3QR3h(Microsoft_Windows_DotNETRuntimeHandle, &MethodILToNativeMap, MethodID, ReJITID, MethodExtent, CountOfMapEntries, ILOffsets, NativeOffsets, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleDCStartV2
//

#define EventEnabledModuleDCStartV2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for ModuleDCStartV2
//
#define FireEtwModuleDCStartV2(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        EventEnabledModuleDCStartV2() ?\
        CoTemplate_xxqqzz(Microsoft_Windows_DotNETRuntimeHandle, &ModuleDCStartV2, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleDCEndV2
//

#define EventEnabledModuleDCEndV2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for ModuleDCEndV2
//
#define FireEtwModuleDCEndV2(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        EventEnabledModuleDCEndV2() ?\
        CoTemplate_xxqqzz(Microsoft_Windows_DotNETRuntimeHandle, &ModuleDCEndV2, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DomainModuleLoad
//

#define EventEnabledDomainModuleLoad() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for DomainModuleLoad
//
#define FireEtwDomainModuleLoad(ModuleID, AssemblyID, AppDomainID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        EventEnabledDomainModuleLoad() ?\
        CoTemplate_xxxqqzz(Microsoft_Windows_DotNETRuntimeHandle, &DomainModuleLoad, ModuleID, AssemblyID, AppDomainID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DomainModuleLoad_V1
//

#define EventEnabledDomainModuleLoad_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for DomainModuleLoad_V1
//
#define FireEtwDomainModuleLoad_V1(ModuleID, AssemblyID, AppDomainID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        EventEnabledDomainModuleLoad_V1() ?\
        CoTemplate_xxxqqzzh(Microsoft_Windows_DotNETRuntimeHandle, &DomainModuleLoad_V1, ModuleID, AssemblyID, AppDomainID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleLoad
//

#define EventEnabledModuleLoad() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for ModuleLoad
//
#define FireEtwModuleLoad(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        EventEnabledModuleLoad() ?\
        CoTemplate_xxqqzz(Microsoft_Windows_DotNETRuntimeHandle, &ModuleLoad, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleLoad_V1
//

#define EventEnabledModuleLoad_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x02000000) != 0)

//
// Event Macro for ModuleLoad_V1
//
#define FireEtwModuleLoad_V1(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        EventEnabledModuleLoad_V1() ?\
        CoTemplate_xxqqzzh(Microsoft_Windows_DotNETRuntimeHandle, &ModuleLoad_V1, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleLoad_V2
//

#define EventEnabledModuleLoad_V2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x02000000) != 0)

//
// Event Macro for ModuleLoad_V2
//
#define FireEtwModuleLoad_V2(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID, ManagedPdbSignature, ManagedPdbAge, ManagedPdbBuildPath, NativePdbSignature, NativePdbAge, NativePdbBuildPath)\
        EventEnabledModuleLoad_V2() ?\
        CoTemplate_xxqqzzhjqzjqz(Microsoft_Windows_DotNETRuntimeHandle, &ModuleLoad_V2, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID, ManagedPdbSignature, ManagedPdbAge, ManagedPdbBuildPath, NativePdbSignature, NativePdbAge, NativePdbBuildPath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleUnload
//

#define EventEnabledModuleUnload() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for ModuleUnload
//
#define FireEtwModuleUnload(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        EventEnabledModuleUnload() ?\
        CoTemplate_xxqqzz(Microsoft_Windows_DotNETRuntimeHandle, &ModuleUnload, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleUnload_V1
//

#define EventEnabledModuleUnload_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x02000000) != 0)

//
// Event Macro for ModuleUnload_V1
//
#define FireEtwModuleUnload_V1(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        EventEnabledModuleUnload_V1() ?\
        CoTemplate_xxqqzzh(Microsoft_Windows_DotNETRuntimeHandle, &ModuleUnload_V1, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleUnload_V2
//

#define EventEnabledModuleUnload_V2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x02000000) != 0)

//
// Event Macro for ModuleUnload_V2
//
#define FireEtwModuleUnload_V2(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID, ManagedPdbSignature, ManagedPdbAge, ManagedPdbBuildPath, NativePdbSignature, NativePdbAge, NativePdbBuildPath)\
        EventEnabledModuleUnload_V2() ?\
        CoTemplate_xxqqzzhjqzjqz(Microsoft_Windows_DotNETRuntimeHandle, &ModuleUnload_V2, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID, ManagedPdbSignature, ManagedPdbAge, ManagedPdbBuildPath, NativePdbSignature, NativePdbAge, NativePdbBuildPath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AssemblyLoad
//

#define EventEnabledAssemblyLoad() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for AssemblyLoad
//
#define FireEtwAssemblyLoad(AssemblyID, AppDomainID, AssemblyFlags, FullyQualifiedAssemblyName)\
        EventEnabledAssemblyLoad() ?\
        CoTemplate_xxqz(Microsoft_Windows_DotNETRuntimeHandle, &AssemblyLoad, AssemblyID, AppDomainID, AssemblyFlags, FullyQualifiedAssemblyName)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AssemblyLoad_V1
//

#define EventEnabledAssemblyLoad_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for AssemblyLoad_V1
//
#define FireEtwAssemblyLoad_V1(AssemblyID, AppDomainID, BindingID, AssemblyFlags, FullyQualifiedAssemblyName, ClrInstanceID)\
        EventEnabledAssemblyLoad_V1() ?\
        CoTemplate_xxxqzh(Microsoft_Windows_DotNETRuntimeHandle, &AssemblyLoad_V1, AssemblyID, AppDomainID, BindingID, AssemblyFlags, FullyQualifiedAssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AssemblyUnload
//

#define EventEnabledAssemblyUnload() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for AssemblyUnload
//
#define FireEtwAssemblyUnload(AssemblyID, AppDomainID, AssemblyFlags, FullyQualifiedAssemblyName)\
        EventEnabledAssemblyUnload() ?\
        CoTemplate_xxqz(Microsoft_Windows_DotNETRuntimeHandle, &AssemblyUnload, AssemblyID, AppDomainID, AssemblyFlags, FullyQualifiedAssemblyName)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AssemblyUnload_V1
//

#define EventEnabledAssemblyUnload_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for AssemblyUnload_V1
//
#define FireEtwAssemblyUnload_V1(AssemblyID, AppDomainID, BindingID, AssemblyFlags, FullyQualifiedAssemblyName, ClrInstanceID)\
        EventEnabledAssemblyUnload_V1() ?\
        CoTemplate_xxxqzh(Microsoft_Windows_DotNETRuntimeHandle, &AssemblyUnload_V1, AssemblyID, AppDomainID, BindingID, AssemblyFlags, FullyQualifiedAssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AppDomainLoad
//

#define EventEnabledAppDomainLoad() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for AppDomainLoad
//
#define FireEtwAppDomainLoad(AppDomainID, AppDomainFlags, AppDomainName)\
        EventEnabledAppDomainLoad() ?\
        CoTemplate_xqz(Microsoft_Windows_DotNETRuntimeHandle, &AppDomainLoad, AppDomainID, AppDomainFlags, AppDomainName)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AppDomainLoad_V1
//

#define EventEnabledAppDomainLoad_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for AppDomainLoad_V1
//
#define FireEtwAppDomainLoad_V1(AppDomainID, AppDomainFlags, AppDomainName, AppDomainIndex, ClrInstanceID)\
        EventEnabledAppDomainLoad_V1() ?\
        CoTemplate_xqzqh(Microsoft_Windows_DotNETRuntimeHandle, &AppDomainLoad_V1, AppDomainID, AppDomainFlags, AppDomainName, AppDomainIndex, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AppDomainUnload
//

#define EventEnabledAppDomainUnload() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for AppDomainUnload
//
#define FireEtwAppDomainUnload(AppDomainID, AppDomainFlags, AppDomainName)\
        EventEnabledAppDomainUnload() ?\
        CoTemplate_xqz(Microsoft_Windows_DotNETRuntimeHandle, &AppDomainUnload, AppDomainID, AppDomainFlags, AppDomainName)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AppDomainUnload_V1
//

#define EventEnabledAppDomainUnload_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x01000000) != 0)

//
// Event Macro for AppDomainUnload_V1
//
#define FireEtwAppDomainUnload_V1(AppDomainID, AppDomainFlags, AppDomainName, AppDomainIndex, ClrInstanceID)\
        EventEnabledAppDomainUnload_V1() ?\
        CoTemplate_xqzqh(Microsoft_Windows_DotNETRuntimeHandle, &AppDomainUnload_V1, AppDomainID, AppDomainFlags, AppDomainName, AppDomainIndex, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleRangeLoad
//

#define EventEnabledModuleRangeLoad() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x04000000) != 0)

//
// Event Macro for ModuleRangeLoad
//
#define FireEtwModuleRangeLoad(ClrInstanceID, ModuleID, RangeBegin, RangeSize, RangeType)\
        EventEnabledModuleRangeLoad() ?\
        CoTemplate_hxqqc(Microsoft_Windows_DotNETRuntimeHandle, &ModuleRangeLoad, ClrInstanceID, ModuleID, RangeBegin, RangeSize, RangeType)\
        : ERROR_SUCCESS\

//
// Enablement check macro for StrongNameVerificationStart
//

#define EventEnabledStrongNameVerificationStart() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x08000000) != 0)

//
// Event Macro for StrongNameVerificationStart
//
#define FireEtwStrongNameVerificationStart(VerificationFlags, ErrorCode, FullyQualifiedAssemblyName)\
        EventEnabledStrongNameVerificationStart() ?\
        CoTemplate_qqz(Microsoft_Windows_DotNETRuntimeHandle, &StrongNameVerificationStart, VerificationFlags, ErrorCode, FullyQualifiedAssemblyName)\
        : ERROR_SUCCESS\

//
// Enablement check macro for StrongNameVerificationStart_V1
//

#define EventEnabledStrongNameVerificationStart_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x08000000) != 0)

//
// Event Macro for StrongNameVerificationStart_V1
//
#define FireEtwStrongNameVerificationStart_V1(VerificationFlags, ErrorCode, FullyQualifiedAssemblyName, ClrInstanceID)\
        EventEnabledStrongNameVerificationStart_V1() ?\
        CoTemplate_qqzh(Microsoft_Windows_DotNETRuntimeHandle, &StrongNameVerificationStart_V1, VerificationFlags, ErrorCode, FullyQualifiedAssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for StrongNameVerificationStop
//

#define EventEnabledStrongNameVerificationStop() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x10000000) != 0)

//
// Event Macro for StrongNameVerificationStop
//
#define FireEtwStrongNameVerificationStop(VerificationFlags, ErrorCode, FullyQualifiedAssemblyName)\
        EventEnabledStrongNameVerificationStop() ?\
        CoTemplate_qqz(Microsoft_Windows_DotNETRuntimeHandle, &StrongNameVerificationStop, VerificationFlags, ErrorCode, FullyQualifiedAssemblyName)\
        : ERROR_SUCCESS\

//
// Enablement check macro for StrongNameVerificationStop_V1
//

#define EventEnabledStrongNameVerificationStop_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x10000000) != 0)

//
// Event Macro for StrongNameVerificationStop_V1
//
#define FireEtwStrongNameVerificationStop_V1(VerificationFlags, ErrorCode, FullyQualifiedAssemblyName, ClrInstanceID)\
        EventEnabledStrongNameVerificationStop_V1() ?\
        CoTemplate_qqzh(Microsoft_Windows_DotNETRuntimeHandle, &StrongNameVerificationStop_V1, VerificationFlags, ErrorCode, FullyQualifiedAssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AuthenticodeVerificationStart
//

#define EventEnabledAuthenticodeVerificationStart() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x08000000) != 0)

//
// Event Macro for AuthenticodeVerificationStart
//
#define FireEtwAuthenticodeVerificationStart(VerificationFlags, ErrorCode, ModulePath)\
        EventEnabledAuthenticodeVerificationStart() ?\
        CoTemplate_qqz(Microsoft_Windows_DotNETRuntimeHandle, &AuthenticodeVerificationStart, VerificationFlags, ErrorCode, ModulePath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AuthenticodeVerificationStart_V1
//

#define EventEnabledAuthenticodeVerificationStart_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x08000000) != 0)

//
// Event Macro for AuthenticodeVerificationStart_V1
//
#define FireEtwAuthenticodeVerificationStart_V1(VerificationFlags, ErrorCode, ModulePath, ClrInstanceID)\
        EventEnabledAuthenticodeVerificationStart_V1() ?\
        CoTemplate_qqzh(Microsoft_Windows_DotNETRuntimeHandle, &AuthenticodeVerificationStart_V1, VerificationFlags, ErrorCode, ModulePath, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AuthenticodeVerificationStop
//

#define EventEnabledAuthenticodeVerificationStop() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x10000000) != 0)

//
// Event Macro for AuthenticodeVerificationStop
//
#define FireEtwAuthenticodeVerificationStop(VerificationFlags, ErrorCode, ModulePath)\
        EventEnabledAuthenticodeVerificationStop() ?\
        CoTemplate_qqz(Microsoft_Windows_DotNETRuntimeHandle, &AuthenticodeVerificationStop, VerificationFlags, ErrorCode, ModulePath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AuthenticodeVerificationStop_V1
//

#define EventEnabledAuthenticodeVerificationStop_V1() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x10000000) != 0)

//
// Event Macro for AuthenticodeVerificationStop_V1
//
#define FireEtwAuthenticodeVerificationStop_V1(VerificationFlags, ErrorCode, ModulePath, ClrInstanceID)\
        EventEnabledAuthenticodeVerificationStop_V1() ?\
        CoTemplate_qqzh(Microsoft_Windows_DotNETRuntimeHandle, &AuthenticodeVerificationStop_V1, VerificationFlags, ErrorCode, ModulePath, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for RuntimeInformationStart
//

#define EventEnabledRuntimeInformationStart() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for RuntimeInformationStart
//
#define FireEtwRuntimeInformationStart(ClrInstanceID, Sku, BclMajorVersion, BclMinorVersion, BclBuildNumber, BclQfeNumber, VMMajorVersion, VMMinorVersion, VMBuildNumber, VMQfeNumber, StartupFlags, StartupMode, CommandLine, ComObjectGuid, RuntimeDllPath)\
        EventEnabledRuntimeInformationStart() ?\
        CoTemplate_hhhhhhhhhhqczjz(Microsoft_Windows_DotNETRuntimeHandle, &RuntimeInformationStart, ClrInstanceID, Sku, BclMajorVersion, BclMinorVersion, BclBuildNumber, BclQfeNumber, VMMajorVersion, VMMinorVersion, VMBuildNumber, VMQfeNumber, StartupFlags, StartupMode, CommandLine, ComObjectGuid, RuntimeDllPath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for IncreaseMemoryPressure
//

#define EventEnabledIncreaseMemoryPressure() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for IncreaseMemoryPressure
//
#define FireEtwIncreaseMemoryPressure(BytesAllocated, ClrInstanceID)\
        EventEnabledIncreaseMemoryPressure() ?\
        CoTemplate_xh(Microsoft_Windows_DotNETRuntimeHandle, &IncreaseMemoryPressure, BytesAllocated, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DecreaseMemoryPressure
//

#define EventEnabledDecreaseMemoryPressure() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for DecreaseMemoryPressure
//
#define FireEtwDecreaseMemoryPressure(BytesFreed, ClrInstanceID)\
        EventEnabledDecreaseMemoryPressure() ?\
        CoTemplate_xh(Microsoft_Windows_DotNETRuntimeHandle, &DecreaseMemoryPressure, BytesFreed, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCMarkWithType
//

#define EventEnabledGCMarkWithType() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCMarkWithType
//
#define FireEtwGCMarkWithType(HeapNum, ClrInstanceID, Type, Bytes)\
        EventEnabledGCMarkWithType() ?\
        CoTemplate_qhqx(Microsoft_Windows_DotNETRuntimeHandle, &GCMarkWithType, HeapNum, ClrInstanceID, Type, Bytes)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCJoin_V2
//

#define EventEnabledGCJoin_V2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for GCJoin_V2
//
#define FireEtwGCJoin_V2(Heap, JoinTime, JoinType, ClrInstanceID, JoinID)\
        EventEnabledGCJoin_V2() ?\
        CoTemplate_qqqhq(Microsoft_Windows_DotNETRuntimeHandle, &GCJoin_V2, Heap, JoinTime, JoinType, ClrInstanceID, JoinID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCPerHeapHistory_V3
//

#define EventEnabledGCPerHeapHistory_V3() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCPerHeapHistory_V3
//
#define FireEtwGCPerHeapHistory_V3(ClrInstanceID, FreeListAllocated, FreeListRejected, EndOfSegAllocated, CondemnedAllocated, PinnedAllocated, PinnedAllocatedAdvance, RunningFreeListEfficiency, CondemnReasons0, CondemnReasons1, CompactMechanisms, ExpandMechanisms, HeapIndex, ExtraGen0Commit, Count, Values_Len_, Values)\
        EventEnabledGCPerHeapHistory_V3() ?\
        CoTemplate_hppppppqqqqqqpqNR14(Microsoft_Windows_DotNETRuntimeHandle, &GCPerHeapHistory_V3, ClrInstanceID, FreeListAllocated, FreeListRejected, EndOfSegAllocated, CondemnedAllocated, PinnedAllocated, PinnedAllocatedAdvance, RunningFreeListEfficiency, CondemnReasons0, CondemnReasons1, CompactMechanisms, ExpandMechanisms, HeapIndex, ExtraGen0Commit, Count, Values_Len_, Values)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCGlobalHeapHistory_V2
//

#define EventEnabledGCGlobalHeapHistory_V2() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCGlobalHeapHistory_V2
//
#define FireEtwGCGlobalHeapHistory_V2(FinalYoungestDesired, NumHeaps, CondemnedGeneration, Gen0ReductionCount, Reason, GlobalMechanisms, ClrInstanceID, PauseMode, MemoryPressure)\
        EventEnabledGCGlobalHeapHistory_V2() ?\
        CoTemplate_xdqqqqhqq(Microsoft_Windows_DotNETRuntimeHandle, &GCGlobalHeapHistory_V2, FinalYoungestDesired, NumHeaps, CondemnedGeneration, Gen0ReductionCount, Reason, GlobalMechanisms, ClrInstanceID, PauseMode, MemoryPressure)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DebugIPCEventStart
//

#define EventEnabledDebugIPCEventStart() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x20000000) != 0)

//
// Event Macro for DebugIPCEventStart
//
#define FireEtwDebugIPCEventStart()\
        EventEnabledDebugIPCEventStart() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &DebugIPCEventStart)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DebugIPCEventEnd
//

#define EventEnabledDebugIPCEventEnd() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x20000000) != 0)

//
// Event Macro for DebugIPCEventEnd
//
#define FireEtwDebugIPCEventEnd()\
        EventEnabledDebugIPCEventEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &DebugIPCEventEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DebugExceptionProcessingStart
//

#define EventEnabledDebugExceptionProcessingStart() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x20000000) != 0)

//
// Event Macro for DebugExceptionProcessingStart
//
#define FireEtwDebugExceptionProcessingStart()\
        EventEnabledDebugExceptionProcessingStart() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &DebugExceptionProcessingStart)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DebugExceptionProcessingEnd
//

#define EventEnabledDebugExceptionProcessingEnd() ((Microsoft_Windows_DotNETRuntimeEnableBits[0] & 0x20000000) != 0)

//
// Event Macro for DebugExceptionProcessingEnd
//
#define FireEtwDebugExceptionProcessingEnd()\
        EventEnabledDebugExceptionProcessingEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeHandle, &DebugExceptionProcessingEnd)\
        : ERROR_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//+
// Provider Microsoft-Windows-DotNETRuntimeRundown Event Count 45
//+
EXTERN_C __declspec(selectany) const GUID MICROSOFT_WINDOWS_DOTNETRUNTIME_RUNDOWN_PROVIDER = {0xa669021c, 0xc450, 0x4609, {0xa0, 0x35, 0x5a, 0xf5, 0x9a, 0xf4, 0xdf, 0x18}};

//
// Opcodes
//
#define CLR_METHODDC_METHODDCSTART_OPCODE 0x23
#define CLR_METHODDC_METHODDCEND_OPCODE 0x24
#define CLR_METHODDC_METHODDCSTARTVERBOSE_OPCODE 0x27
#define CLR_METHODDC_METHODDCENDVERBOSE_OPCODE 0x28
#define CLR_METHODDC_METHODDCSTARTILTONATIVEMAP_OPCODE 0x29
#define CLR_METHODDC_METHODDCENDILTONATIVEMAP_OPCODE 0x2a
#define CLR_METHODDC_DCSTARTCOMPLETE_OPCODE 0xe
#define CLR_METHODDC_DCENDCOMPLETE_OPCODE 0xf
#define CLR_METHODDC_DCSTARTINIT_OPCODE 0x10
#define CLR_METHODDC_DCENDINIT_OPCODE 0x11
#define CLR_LOADERDC_MODULEDCSTART_OPCODE 0x23
#define CLR_LOADERDC_MODULEDCEND_OPCODE 0x24
#define CLR_LOADERDC_ASSEMBLYDCSTART_OPCODE 0x27
#define CLR_LOADERDC_ASSEMBLYDCEND_OPCODE 0x28
#define CLR_LOADERDC_APPDOMAINDCSTART_OPCODE 0x2b
#define CLR_LOADERDC_APPDOMAINDCEND_OPCODE 0x2c
#define CLR_LOADERDC_DOMAINMODULEDCSTART_OPCODE 0x2e
#define CLR_LOADERDC_DOMAINMODULEDCEND_OPCODE 0x2f
#define CLR_LOADERDC_THREADDC_OPCODE 0x30
#define CLR_RUNDOWNSTACK_STACKWALK_OPCODE 0x52
#define CLR_PERFTRACKRUNDOWN_MODULERANGEDCSTART_OPCODE 0xa
#define CLR_PERFTRACKRUNDOWN_MODULERANGEDCEND_OPCODE 0xb

//
// Tasks
//
#define CLR_METHODRUNDOWN_TASK 0x1
EXTERN_C __declspec(selectany) const GUID CLRMethodRundownId = {0x0bcd91db, 0xf943, 0x454a, {0xa6, 0x62, 0x6e, 0xdb, 0xcf, 0xbb, 0x76, 0xd2}};
#define CLR_LOADERRUNDOWN_TASK 0x2
EXTERN_C __declspec(selectany) const GUID CLRLoaderRundownId = {0x5a54f4df, 0xd302, 0x4fee, {0xa2, 0x11, 0x6c, 0x2c, 0x0c, 0x1d, 0xcb, 0x1a}};
#define CLR_STACKRUNDOWN_TASK 0xb
EXTERN_C __declspec(selectany) const GUID CLRStackRundownId = {0xd3363dc0, 0x243a, 0x4620, {0xa4, 0xd0, 0x8a, 0x07, 0xd7, 0x72, 0xf5, 0x33}};
#define CLR_RuntimeInformation_TASK 0x13
EXTERN_C __declspec(selectany) const GUID CLRRuntimeInformationRundownId = {0xcd7d3e32, 0x65fe, 0x40cd, {0x92, 0x25, 0xa2, 0x57, 0x7d, 0x20, 0x3f, 0xc3}};
#define CLR_PERFTRACKRUNDOWN_TASK 0x14
EXTERN_C __declspec(selectany) const GUID CLRPerfTrackRundownId = {0xeac685f6, 0x2104, 0x4dec, {0x88, 0xfd, 0x91, 0xe4, 0x25, 0x42, 0x21, 0xec}};
//
// Keyword
//
#define CLR_RUNDOWNLOADER_KEYWORD 0x8
#define CLR_RUNDOWNJIT_KEYWORD 0x10
#define CLR_RUNDOWNNGEN_KEYWORD 0x20
#define CLR_RUNDOWNSTART_KEYWORD 0x40
#define CLR_RUNDOWNEND_KEYWORD 0x100
#define CLR_RUNDOWNAPPDOMAINRESOURCEMANAGEMENT_KEYWORD 0x800
#define CLR_RUNDOWNTHREADING_KEYWORD 0x10000
#define CLR_RUNDOWNJITTEDMETHODILTONATIVEMAP_KEYWORD 0x20000
#define CLR_RUNDOWNOVERRIDEANDSUPPRESSNGENEVENTS_KEYWORD 0x40000
#define CLR_RUNDOWNPERFTRACK_KEYWORD 0x20000000
#define CLR_RUNDOWNSTACK_KEYWORD 0x40000000

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR CLRStackWalkDCStart = {0x0, 0x0, 0x0, 0x0, 0x52, 0xb, 0x40000000};
#define CLRStackWalkDCStart_value 0x0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCStart = {0x8d, 0x0, 0x0, 0x4, 0x23, 0x1, 0x30};
#define MethodDCStart_value 0x8d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCStart_V1 = {0x8d, 0x1, 0x0, 0x4, 0x23, 0x1, 0x30};
#define MethodDCStart_V1_value 0x8d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCStart_V2 = {0x8d, 0x2, 0x0, 0x4, 0x23, 0x1, 0x30};
#define MethodDCStart_V2_value 0x8d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCEnd = {0x8e, 0x0, 0x0, 0x4, 0x24, 0x1, 0x30};
#define MethodDCEnd_value 0x8e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCEnd_V1 = {0x8e, 0x1, 0x0, 0x4, 0x24, 0x1, 0x30};
#define MethodDCEnd_V1_value 0x8e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCEnd_V2 = {0x8e, 0x2, 0x0, 0x4, 0x24, 0x1, 0x30};
#define MethodDCEnd_V2_value 0x8e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCStartVerbose = {0x8f, 0x0, 0x0, 0x4, 0x27, 0x1, 0x30};
#define MethodDCStartVerbose_value 0x8f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCStartVerbose_V1 = {0x8f, 0x1, 0x0, 0x4, 0x27, 0x1, 0x30};
#define MethodDCStartVerbose_V1_value 0x8f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCStartVerbose_V2 = {0x8f, 0x2, 0x0, 0x4, 0x27, 0x1, 0x30};
#define MethodDCStartVerbose_V2_value 0x8f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCEndVerbose = {0x90, 0x0, 0x0, 0x4, 0x28, 0x1, 0x30};
#define MethodDCEndVerbose_value 0x90
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCEndVerbose_V1 = {0x90, 0x1, 0x0, 0x4, 0x28, 0x1, 0x30};
#define MethodDCEndVerbose_V1_value 0x90
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCEndVerbose_V2 = {0x90, 0x2, 0x0, 0x4, 0x28, 0x1, 0x30};
#define MethodDCEndVerbose_V2_value 0x90
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DCStartComplete = {0x91, 0x0, 0x0, 0x4, 0xe, 0x1, 0x20038};
#define DCStartComplete_value 0x91
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DCStartComplete_V1 = {0x91, 0x1, 0x0, 0x4, 0xe, 0x1, 0x20038};
#define DCStartComplete_V1_value 0x91
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DCEndComplete = {0x92, 0x0, 0x0, 0x4, 0xf, 0x1, 0x20038};
#define DCEndComplete_value 0x92
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DCEndComplete_V1 = {0x92, 0x1, 0x0, 0x4, 0xf, 0x1, 0x20038};
#define DCEndComplete_V1_value 0x92
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DCStartInit = {0x93, 0x0, 0x0, 0x4, 0x10, 0x1, 0x20038};
#define DCStartInit_value 0x93
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DCStartInit_V1 = {0x93, 0x1, 0x0, 0x4, 0x10, 0x1, 0x20038};
#define DCStartInit_V1_value 0x93
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DCEndInit = {0x94, 0x0, 0x0, 0x4, 0x11, 0x1, 0x20038};
#define DCEndInit_value 0x94
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DCEndInit_V1 = {0x94, 0x1, 0x0, 0x4, 0x11, 0x1, 0x20038};
#define DCEndInit_V1_value 0x94
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCStartILToNativeMap = {0x95, 0x0, 0x0, 0x5, 0x29, 0x1, 0x20000};
#define MethodDCStartILToNativeMap_value 0x95
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodDCEndILToNativeMap = {0x96, 0x0, 0x0, 0x5, 0x2a, 0x1, 0x20000};
#define MethodDCEndILToNativeMap_value 0x96
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DomainModuleDCStart = {0x97, 0x0, 0x0, 0x4, 0x2e, 0x2, 0x8};
#define DomainModuleDCStart_value 0x97
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DomainModuleDCStart_V1 = {0x97, 0x1, 0x0, 0x4, 0x2e, 0x2, 0x8};
#define DomainModuleDCStart_V1_value 0x97
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DomainModuleDCEnd = {0x98, 0x0, 0x0, 0x4, 0x2f, 0x2, 0x8};
#define DomainModuleDCEnd_value 0x98
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DomainModuleDCEnd_V1 = {0x98, 0x1, 0x0, 0x4, 0x2f, 0x2, 0x8};
#define DomainModuleDCEnd_V1_value 0x98
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleDCStart = {0x99, 0x0, 0x0, 0x4, 0x23, 0x2, 0x8};
#define ModuleDCStart_value 0x99
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleDCStart_V1 = {0x99, 0x1, 0x0, 0x4, 0x23, 0x2, 0x20000008};
#define ModuleDCStart_V1_value 0x99
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleDCStart_V2 = {0x99, 0x2, 0x0, 0x4, 0x23, 0x2, 0x20000008};
#define ModuleDCStart_V2_value 0x99
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleDCEnd = {0x9a, 0x0, 0x0, 0x4, 0x24, 0x2, 0x8};
#define ModuleDCEnd_value 0x9a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleDCEnd_V1 = {0x9a, 0x1, 0x0, 0x4, 0x24, 0x2, 0x20000008};
#define ModuleDCEnd_V1_value 0x9a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleDCEnd_V2 = {0x9a, 0x2, 0x0, 0x4, 0x24, 0x2, 0x20000008};
#define ModuleDCEnd_V2_value 0x9a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AssemblyDCStart = {0x9b, 0x0, 0x0, 0x4, 0x27, 0x2, 0x8};
#define AssemblyDCStart_value 0x9b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AssemblyDCStart_V1 = {0x9b, 0x1, 0x0, 0x4, 0x27, 0x2, 0x8};
#define AssemblyDCStart_V1_value 0x9b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AssemblyDCEnd = {0x9c, 0x0, 0x0, 0x4, 0x28, 0x2, 0x8};
#define AssemblyDCEnd_value 0x9c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AssemblyDCEnd_V1 = {0x9c, 0x1, 0x0, 0x4, 0x28, 0x2, 0x8};
#define AssemblyDCEnd_V1_value 0x9c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AppDomainDCStart = {0x9d, 0x0, 0x0, 0x4, 0x2b, 0x2, 0x8};
#define AppDomainDCStart_value 0x9d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AppDomainDCStart_V1 = {0x9d, 0x1, 0x0, 0x4, 0x2b, 0x2, 0x8};
#define AppDomainDCStart_V1_value 0x9d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AppDomainDCEnd = {0x9e, 0x0, 0x0, 0x4, 0x2c, 0x2, 0x8};
#define AppDomainDCEnd_value 0x9e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AppDomainDCEnd_V1 = {0x9e, 0x1, 0x0, 0x4, 0x2c, 0x2, 0x8};
#define AppDomainDCEnd_V1_value 0x9e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadDC = {0x9f, 0x0, 0x0, 0x4, 0x30, 0x2, 0x10800};
#define ThreadDC_value 0x9f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleRangeDCStart = {0xa0, 0x0, 0x0, 0x4, 0xa, 0x14, 0x20000000};
#define ModuleRangeDCStart_value 0xa0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleRangeDCEnd = {0xa1, 0x0, 0x0, 0x4, 0xb, 0x14, 0x20000000};
#define ModuleRangeDCEnd_value 0xa1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RuntimeInformationDCStart = {0xbb, 0x0, 0x0, 0x4, 0x1, 0x13, 0x0};
#define RuntimeInformationDCStart_value 0xbb

//
// Note on Generate Code from Manifest Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra 
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length 
//strings, the generated code will take the count of characters for the whole array as an input parameter. 
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate 
//GetLengthSid function to get the length.
//

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals 
//


//
// Event Enablement Bits
//

EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG Microsoft_Windows_DotNETRuntimeRundownEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG Microsoft_Windows_DotNETRuntimeRundownKeywords[9] = {0x40000000, 0x30, 0x20038, 0x20000, 0x8, 0x20000008, 0x10800, 0x20000000, 0x0};
EXTERN_C __declspec(selectany) const UCHAR Microsoft_Windows_DotNETRuntimeRundownLevels[9] = {0, 4, 4, 5, 4, 4, 4, 4, 4};
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT MICROSOFT_WINDOWS_DOTNETRUNTIME_RUNDOWN_PROVIDER_Context = {0, 0, 0, 0, 0, 0, 0, 0, 9, Microsoft_Windows_DotNETRuntimeRundownEnableBits, Microsoft_Windows_DotNETRuntimeRundownKeywords, Microsoft_Windows_DotNETRuntimeRundownLevels};

EXTERN_C __declspec(selectany) REGHANDLE Microsoft_Windows_DotNETRuntimeRundownHandle = (REGHANDLE)0;

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function register the provider with ETW USER mode.

Arguments:
    ProviderId - Provider Id to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to Registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If Provider has not register RegHandle = NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterMicrosoft_Windows_DotNETRuntimeRundown
#define EventRegisterMicrosoft_Windows_DotNETRuntimeRundown() McGenEventRegister(&MICROSOFT_WINDOWS_DOTNETRUNTIME_RUNDOWN_PROVIDER, McGenControlCallbackV2, &MICROSOFT_WINDOWS_DOTNETRUNTIME_RUNDOWN_PROVIDER_Context, &Microsoft_Windows_DotNETRuntimeRundownHandle) 
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterMicrosoft_Windows_DotNETRuntimeRundown
#define EventUnregisterMicrosoft_Windows_DotNETRuntimeRundown() McGenEventUnregister(&Microsoft_Windows_DotNETRuntimeRundownHandle) 
#endif

//
// Enablement check macro for CLRStackWalkDCStart
//

#define EventEnabledCLRStackWalkDCStart() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for CLRStackWalkDCStart
//
#define FireEtwCLRStackWalkDCStart(ClrInstanceID, Reserved1, Reserved2, FrameCount, Stack)\
        EventEnabledCLRStackWalkDCStart() ?\
        CoTemplate_hccqP2(Microsoft_Windows_DotNETRuntimeRundownHandle, &CLRStackWalkDCStart, ClrInstanceID, Reserved1, Reserved2, FrameCount, Stack)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCStart
//

#define EventEnabledMethodDCStart() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MethodDCStart
//
#define FireEtwMethodDCStart(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags)\
        EventEnabledMethodDCStart() ?\
        CoTemplate_xxxqqq(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCStart, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCStart_V1
//

#define EventEnabledMethodDCStart_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MethodDCStart_V1
//
#define FireEtwMethodDCStart_V1(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID)\
        EventEnabledMethodDCStart_V1() ?\
        CoTemplate_xxxqqqh(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCStart_V1, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCStart_V2
//

#define EventEnabledMethodDCStart_V2() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MethodDCStart_V2
//
#define FireEtwMethodDCStart_V2(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID, ReJITID)\
        EventEnabledMethodDCStart_V2() ?\
        CoTemplate_xxxqqqhx(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCStart_V2, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID, ReJITID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCEnd
//

#define EventEnabledMethodDCEnd() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MethodDCEnd
//
#define FireEtwMethodDCEnd(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags)\
        EventEnabledMethodDCEnd() ?\
        CoTemplate_xxxqqq(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCEnd, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCEnd_V1
//

#define EventEnabledMethodDCEnd_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MethodDCEnd_V1
//
#define FireEtwMethodDCEnd_V1(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID)\
        EventEnabledMethodDCEnd_V1() ?\
        CoTemplate_xxxqqqh(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCEnd_V1, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCEnd_V2
//

#define EventEnabledMethodDCEnd_V2() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MethodDCEnd_V2
//
#define FireEtwMethodDCEnd_V2(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID, ReJITID)\
        EventEnabledMethodDCEnd_V2() ?\
        CoTemplate_xxxqqqhx(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCEnd_V2, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, ClrInstanceID, ReJITID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCStartVerbose
//

#define EventEnabledMethodDCStartVerbose() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MethodDCStartVerbose
//
#define FireEtwMethodDCStartVerbose(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature)\
        EventEnabledMethodDCStartVerbose() ?\
        CoTemplate_xxxqqqzzz(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCStartVerbose, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCStartVerbose_V1
//

#define EventEnabledMethodDCStartVerbose_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MethodDCStartVerbose_V1
//
#define FireEtwMethodDCStartVerbose_V1(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID)\
        EventEnabledMethodDCStartVerbose_V1() ?\
        CoTemplate_xxxqqqzzzh(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCStartVerbose_V1, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCStartVerbose_V2
//

#define EventEnabledMethodDCStartVerbose_V2() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MethodDCStartVerbose_V2
//
#define FireEtwMethodDCStartVerbose_V2(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID, ReJITID)\
        EventEnabledMethodDCStartVerbose_V2() ?\
        CoTemplate_xxxqqqzzzhx(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCStartVerbose_V2, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID, ReJITID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCEndVerbose
//

#define EventEnabledMethodDCEndVerbose() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MethodDCEndVerbose
//
#define FireEtwMethodDCEndVerbose(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature)\
        EventEnabledMethodDCEndVerbose() ?\
        CoTemplate_xxxqqqzzz(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCEndVerbose, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCEndVerbose_V1
//

#define EventEnabledMethodDCEndVerbose_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MethodDCEndVerbose_V1
//
#define FireEtwMethodDCEndVerbose_V1(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID)\
        EventEnabledMethodDCEndVerbose_V1() ?\
        CoTemplate_xxxqqqzzzh(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCEndVerbose_V1, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCEndVerbose_V2
//

#define EventEnabledMethodDCEndVerbose_V2() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MethodDCEndVerbose_V2
//
#define FireEtwMethodDCEndVerbose_V2(MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID, ReJITID)\
        EventEnabledMethodDCEndVerbose_V2() ?\
        CoTemplate_xxxqqqzzzhx(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCEndVerbose_V2, MethodID, ModuleID, MethodStartAddress, MethodSize, MethodToken, MethodFlags, MethodNamespace, MethodName, MethodSignature, ClrInstanceID, ReJITID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DCStartComplete
//

#define EventEnabledDCStartComplete() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for DCStartComplete
//
#define FireEtwDCStartComplete()\
        EventEnabledDCStartComplete() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeRundownHandle, &DCStartComplete)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DCStartComplete_V1
//

#define EventEnabledDCStartComplete_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for DCStartComplete_V1
//
#define FireEtwDCStartComplete_V1(ClrInstanceID)\
        EventEnabledDCStartComplete_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimeRundownHandle, &DCStartComplete_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DCEndComplete
//

#define EventEnabledDCEndComplete() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for DCEndComplete
//
#define FireEtwDCEndComplete()\
        EventEnabledDCEndComplete() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeRundownHandle, &DCEndComplete)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DCEndComplete_V1
//

#define EventEnabledDCEndComplete_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for DCEndComplete_V1
//
#define FireEtwDCEndComplete_V1(ClrInstanceID)\
        EventEnabledDCEndComplete_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimeRundownHandle, &DCEndComplete_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DCStartInit
//

#define EventEnabledDCStartInit() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for DCStartInit
//
#define FireEtwDCStartInit()\
        EventEnabledDCStartInit() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeRundownHandle, &DCStartInit)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DCStartInit_V1
//

#define EventEnabledDCStartInit_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for DCStartInit_V1
//
#define FireEtwDCStartInit_V1(ClrInstanceID)\
        EventEnabledDCStartInit_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimeRundownHandle, &DCStartInit_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DCEndInit
//

#define EventEnabledDCEndInit() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for DCEndInit
//
#define FireEtwDCEndInit()\
        EventEnabledDCEndInit() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimeRundownHandle, &DCEndInit)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DCEndInit_V1
//

#define EventEnabledDCEndInit_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for DCEndInit_V1
//
#define FireEtwDCEndInit_V1(ClrInstanceID)\
        EventEnabledDCEndInit_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimeRundownHandle, &DCEndInit_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCStartILToNativeMap
//

#define EventEnabledMethodDCStartILToNativeMap() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000008) != 0)

//
// Event Macro for MethodDCStartILToNativeMap
//
#define FireEtwMethodDCStartILToNativeMap(MethodID, ReJITID, MethodExtent, CountOfMapEntries, ILOffsets, NativeOffsets, ClrInstanceID)\
        EventEnabledMethodDCStartILToNativeMap() ?\
        CoTemplate_xxchQR3QR3h(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCStartILToNativeMap, MethodID, ReJITID, MethodExtent, CountOfMapEntries, ILOffsets, NativeOffsets, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodDCEndILToNativeMap
//

#define EventEnabledMethodDCEndILToNativeMap() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000008) != 0)

//
// Event Macro for MethodDCEndILToNativeMap
//
#define FireEtwMethodDCEndILToNativeMap(MethodID, ReJITID, MethodExtent, CountOfMapEntries, ILOffsets, NativeOffsets, ClrInstanceID)\
        EventEnabledMethodDCEndILToNativeMap() ?\
        CoTemplate_xxchQR3QR3h(Microsoft_Windows_DotNETRuntimeRundownHandle, &MethodDCEndILToNativeMap, MethodID, ReJITID, MethodExtent, CountOfMapEntries, ILOffsets, NativeOffsets, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DomainModuleDCStart
//

#define EventEnabledDomainModuleDCStart() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for DomainModuleDCStart
//
#define FireEtwDomainModuleDCStart(ModuleID, AssemblyID, AppDomainID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        EventEnabledDomainModuleDCStart() ?\
        CoTemplate_xxxqqzz(Microsoft_Windows_DotNETRuntimeRundownHandle, &DomainModuleDCStart, ModuleID, AssemblyID, AppDomainID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DomainModuleDCStart_V1
//

#define EventEnabledDomainModuleDCStart_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for DomainModuleDCStart_V1
//
#define FireEtwDomainModuleDCStart_V1(ModuleID, AssemblyID, AppDomainID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        EventEnabledDomainModuleDCStart_V1() ?\
        CoTemplate_xxxqqzzh(Microsoft_Windows_DotNETRuntimeRundownHandle, &DomainModuleDCStart_V1, ModuleID, AssemblyID, AppDomainID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DomainModuleDCEnd
//

#define EventEnabledDomainModuleDCEnd() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for DomainModuleDCEnd
//
#define FireEtwDomainModuleDCEnd(ModuleID, AssemblyID, AppDomainID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        EventEnabledDomainModuleDCEnd() ?\
        CoTemplate_xxxqqzz(Microsoft_Windows_DotNETRuntimeRundownHandle, &DomainModuleDCEnd, ModuleID, AssemblyID, AppDomainID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for DomainModuleDCEnd_V1
//

#define EventEnabledDomainModuleDCEnd_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for DomainModuleDCEnd_V1
//
#define FireEtwDomainModuleDCEnd_V1(ModuleID, AssemblyID, AppDomainID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        EventEnabledDomainModuleDCEnd_V1() ?\
        CoTemplate_xxxqqzzh(Microsoft_Windows_DotNETRuntimeRundownHandle, &DomainModuleDCEnd_V1, ModuleID, AssemblyID, AppDomainID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleDCStart
//

#define EventEnabledModuleDCStart() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for ModuleDCStart
//
#define FireEtwModuleDCStart(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        EventEnabledModuleDCStart() ?\
        CoTemplate_xxqqzz(Microsoft_Windows_DotNETRuntimeRundownHandle, &ModuleDCStart, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleDCStart_V1
//

#define EventEnabledModuleDCStart_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for ModuleDCStart_V1
//
#define FireEtwModuleDCStart_V1(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        EventEnabledModuleDCStart_V1() ?\
        CoTemplate_xxqqzzh(Microsoft_Windows_DotNETRuntimeRundownHandle, &ModuleDCStart_V1, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleDCStart_V2
//

#define EventEnabledModuleDCStart_V2() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for ModuleDCStart_V2
//
#define FireEtwModuleDCStart_V2(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID, ManagedPdbSignature, ManagedPdbAge, ManagedPdbBuildPath, NativePdbSignature, NativePdbAge, NativePdbBuildPath)\
        EventEnabledModuleDCStart_V2() ?\
        CoTemplate_xxqqzzhjqzjqz(Microsoft_Windows_DotNETRuntimeRundownHandle, &ModuleDCStart_V2, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID, ManagedPdbSignature, ManagedPdbAge, ManagedPdbBuildPath, NativePdbSignature, NativePdbAge, NativePdbBuildPath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleDCEnd
//

#define EventEnabledModuleDCEnd() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for ModuleDCEnd
//
#define FireEtwModuleDCEnd(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        EventEnabledModuleDCEnd() ?\
        CoTemplate_xxqqzz(Microsoft_Windows_DotNETRuntimeRundownHandle, &ModuleDCEnd, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleDCEnd_V1
//

#define EventEnabledModuleDCEnd_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for ModuleDCEnd_V1
//
#define FireEtwModuleDCEnd_V1(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        EventEnabledModuleDCEnd_V1() ?\
        CoTemplate_xxqqzzh(Microsoft_Windows_DotNETRuntimeRundownHandle, &ModuleDCEnd_V1, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleDCEnd_V2
//

#define EventEnabledModuleDCEnd_V2() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for ModuleDCEnd_V2
//
#define FireEtwModuleDCEnd_V2(ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID, ManagedPdbSignature, ManagedPdbAge, ManagedPdbBuildPath, NativePdbSignature, NativePdbAge, NativePdbBuildPath)\
        EventEnabledModuleDCEnd_V2() ?\
        CoTemplate_xxqqzzhjqzjqz(Microsoft_Windows_DotNETRuntimeRundownHandle, &ModuleDCEnd_V2, ModuleID, AssemblyID, ModuleFlags, Reserved1, ModuleILPath, ModuleNativePath, ClrInstanceID, ManagedPdbSignature, ManagedPdbAge, ManagedPdbBuildPath, NativePdbSignature, NativePdbAge, NativePdbBuildPath)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AssemblyDCStart
//

#define EventEnabledAssemblyDCStart() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for AssemblyDCStart
//
#define FireEtwAssemblyDCStart(AssemblyID, AppDomainID, AssemblyFlags, FullyQualifiedAssemblyName)\
        EventEnabledAssemblyDCStart() ?\
        CoTemplate_xxqz(Microsoft_Windows_DotNETRuntimeRundownHandle, &AssemblyDCStart, AssemblyID, AppDomainID, AssemblyFlags, FullyQualifiedAssemblyName)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AssemblyDCStart_V1
//

#define EventEnabledAssemblyDCStart_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for AssemblyDCStart_V1
//
#define FireEtwAssemblyDCStart_V1(AssemblyID, AppDomainID, BindingID, AssemblyFlags, FullyQualifiedAssemblyName, ClrInstanceID)\
        EventEnabledAssemblyDCStart_V1() ?\
        CoTemplate_xxxqzh(Microsoft_Windows_DotNETRuntimeRundownHandle, &AssemblyDCStart_V1, AssemblyID, AppDomainID, BindingID, AssemblyFlags, FullyQualifiedAssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AssemblyDCEnd
//

#define EventEnabledAssemblyDCEnd() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for AssemblyDCEnd
//
#define FireEtwAssemblyDCEnd(AssemblyID, AppDomainID, AssemblyFlags, FullyQualifiedAssemblyName)\
        EventEnabledAssemblyDCEnd() ?\
        CoTemplate_xxqz(Microsoft_Windows_DotNETRuntimeRundownHandle, &AssemblyDCEnd, AssemblyID, AppDomainID, AssemblyFlags, FullyQualifiedAssemblyName)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AssemblyDCEnd_V1
//

#define EventEnabledAssemblyDCEnd_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for AssemblyDCEnd_V1
//
#define FireEtwAssemblyDCEnd_V1(AssemblyID, AppDomainID, BindingID, AssemblyFlags, FullyQualifiedAssemblyName, ClrInstanceID)\
        EventEnabledAssemblyDCEnd_V1() ?\
        CoTemplate_xxxqzh(Microsoft_Windows_DotNETRuntimeRundownHandle, &AssemblyDCEnd_V1, AssemblyID, AppDomainID, BindingID, AssemblyFlags, FullyQualifiedAssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AppDomainDCStart
//

#define EventEnabledAppDomainDCStart() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for AppDomainDCStart
//
#define FireEtwAppDomainDCStart(AppDomainID, AppDomainFlags, AppDomainName)\
        EventEnabledAppDomainDCStart() ?\
        CoTemplate_xqz(Microsoft_Windows_DotNETRuntimeRundownHandle, &AppDomainDCStart, AppDomainID, AppDomainFlags, AppDomainName)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AppDomainDCStart_V1
//

#define EventEnabledAppDomainDCStart_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for AppDomainDCStart_V1
//
#define FireEtwAppDomainDCStart_V1(AppDomainID, AppDomainFlags, AppDomainName, AppDomainIndex, ClrInstanceID)\
        EventEnabledAppDomainDCStart_V1() ?\
        CoTemplate_xqzqh(Microsoft_Windows_DotNETRuntimeRundownHandle, &AppDomainDCStart_V1, AppDomainID, AppDomainFlags, AppDomainName, AppDomainIndex, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AppDomainDCEnd
//

#define EventEnabledAppDomainDCEnd() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for AppDomainDCEnd
//
#define FireEtwAppDomainDCEnd(AppDomainID, AppDomainFlags, AppDomainName)\
        EventEnabledAppDomainDCEnd() ?\
        CoTemplate_xqz(Microsoft_Windows_DotNETRuntimeRundownHandle, &AppDomainDCEnd, AppDomainID, AppDomainFlags, AppDomainName)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AppDomainDCEnd_V1
//

#define EventEnabledAppDomainDCEnd_V1() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for AppDomainDCEnd_V1
//
#define FireEtwAppDomainDCEnd_V1(AppDomainID, AppDomainFlags, AppDomainName, AppDomainIndex, ClrInstanceID)\
        EventEnabledAppDomainDCEnd_V1() ?\
        CoTemplate_xqzqh(Microsoft_Windows_DotNETRuntimeRundownHandle, &AppDomainDCEnd_V1, AppDomainID, AppDomainFlags, AppDomainName, AppDomainIndex, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadDC
//

#define EventEnabledThreadDC() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for ThreadDC
//
#define FireEtwThreadDC(ManagedThreadID, AppDomainID, Flags, ManagedThreadIndex, OSThreadID, ClrInstanceID)\
        EventEnabledThreadDC() ?\
        CoTemplate_xxqqqh(Microsoft_Windows_DotNETRuntimeRundownHandle, &ThreadDC, ManagedThreadID, AppDomainID, Flags, ManagedThreadIndex, OSThreadID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleRangeDCStart
//

#define EventEnabledModuleRangeDCStart() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000080) != 0)

//
// Event Macro for ModuleRangeDCStart
//
#define FireEtwModuleRangeDCStart(ClrInstanceID, ModuleID, RangeBegin, RangeSize, RangeType)\
        EventEnabledModuleRangeDCStart() ?\
        CoTemplate_hxqqc(Microsoft_Windows_DotNETRuntimeRundownHandle, &ModuleRangeDCStart, ClrInstanceID, ModuleID, RangeBegin, RangeSize, RangeType)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleRangeDCEnd
//

#define EventEnabledModuleRangeDCEnd() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000080) != 0)

//
// Event Macro for ModuleRangeDCEnd
//
#define FireEtwModuleRangeDCEnd(ClrInstanceID, ModuleID, RangeBegin, RangeSize, RangeType)\
        EventEnabledModuleRangeDCEnd() ?\
        CoTemplate_hxqqc(Microsoft_Windows_DotNETRuntimeRundownHandle, &ModuleRangeDCEnd, ClrInstanceID, ModuleID, RangeBegin, RangeSize, RangeType)\
        : ERROR_SUCCESS\

//
// Enablement check macro for RuntimeInformationDCStart
//

#define EventEnabledRuntimeInformationDCStart() ((Microsoft_Windows_DotNETRuntimeRundownEnableBits[0] & 0x00000100) != 0)

//
// Event Macro for RuntimeInformationDCStart
//
#define FireEtwRuntimeInformationDCStart(ClrInstanceID, Sku, BclMajorVersion, BclMinorVersion, BclBuildNumber, BclQfeNumber, VMMajorVersion, VMMinorVersion, VMBuildNumber, VMQfeNumber, StartupFlags, StartupMode, CommandLine, ComObjectGuid, RuntimeDllPath)\
        EventEnabledRuntimeInformationDCStart() ?\
        CoTemplate_hhhhhhhhhhqczjz(Microsoft_Windows_DotNETRuntimeRundownHandle, &RuntimeInformationDCStart, ClrInstanceID, Sku, BclMajorVersion, BclMinorVersion, BclBuildNumber, BclQfeNumber, VMMajorVersion, VMMinorVersion, VMBuildNumber, VMQfeNumber, StartupFlags, StartupMode, CommandLine, ComObjectGuid, RuntimeDllPath)\
        : ERROR_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//+
// Provider Microsoft-Windows-DotNETRuntimeStress Event Count 3
//+
EXTERN_C __declspec(selectany) const GUID MICROSOFT_WINDOWS_DOTNETRUNTIME_STRESS_PROVIDER = {0xcc2bcbba, 0x16b6, 0x4cf3, {0x89, 0x90, 0xd7, 0x4c, 0x2e, 0x8a, 0xf5, 0x00}};

//
// Opcodes
//
#define CLR_STRESSSTACK_STACKWALK_OPCODE 0x52

//
// Tasks
//
#define CLR_STRESSLOG_TASK 0x1
EXTERN_C __declspec(selectany) const GUID StressLogTaskId = {0xea40c74d, 0x4f65, 0x4561, {0xbb, 0x26, 0x65, 0x62, 0x31, 0xc8, 0x96, 0x7f}};
#define CLR_STACKSTRESS_TASK 0xb
EXTERN_C __declspec(selectany) const GUID CLRStackStressId = {0xd3363dc0, 0x243a, 0x4620, {0xa4, 0xd0, 0x8a, 0x07, 0xd7, 0x72, 0xf5, 0x33}};
//
// Keyword
//
#define CLR_STRESSSTACK_KEYWORD 0x40000000

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR StressLogEvent = {0x0, 0x0, 0x0, 0x4, 0x1, 0x1, 0x0};
#define StressLogEvent_value 0x0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR StressLogEvent_V1 = {0x0, 0x1, 0x0, 0x4, 0x1, 0x1, 0x0};
#define StressLogEvent_V1_value 0x0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR CLRStackWalkStress = {0x1, 0x0, 0x0, 0x0, 0x52, 0xb, 0x40000000};
#define CLRStackWalkStress_value 0x1

//
// Note on Generate Code from Manifest Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra 
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length 
//strings, the generated code will take the count of characters for the whole array as an input parameter. 
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate 
//GetLengthSid function to get the length.
//

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals 
//


//
// Event Enablement Bits
//

EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG Microsoft_Windows_DotNETRuntimeStressEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG Microsoft_Windows_DotNETRuntimeStressKeywords[2] = {0x0, 0x40000000};
EXTERN_C __declspec(selectany) const UCHAR Microsoft_Windows_DotNETRuntimeStressLevels[2] = {4, 0};
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT MICROSOFT_WINDOWS_DOTNETRUNTIME_STRESS_PROVIDER_Context = {0, 0, 0, 0, 0, 0, 0, 0, 2, Microsoft_Windows_DotNETRuntimeStressEnableBits, Microsoft_Windows_DotNETRuntimeStressKeywords, Microsoft_Windows_DotNETRuntimeStressLevels};

EXTERN_C __declspec(selectany) REGHANDLE Microsoft_Windows_DotNETRuntimeStressHandle = (REGHANDLE)0;

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function register the provider with ETW USER mode.

Arguments:
    ProviderId - Provider Id to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to Registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If Provider has not register RegHandle = NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterMicrosoft_Windows_DotNETRuntimeStress
#define EventRegisterMicrosoft_Windows_DotNETRuntimeStress() McGenEventRegister(&MICROSOFT_WINDOWS_DOTNETRUNTIME_STRESS_PROVIDER, McGenControlCallbackV2, &MICROSOFT_WINDOWS_DOTNETRUNTIME_STRESS_PROVIDER_Context, &Microsoft_Windows_DotNETRuntimeStressHandle) 
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterMicrosoft_Windows_DotNETRuntimeStress
#define EventUnregisterMicrosoft_Windows_DotNETRuntimeStress() McGenEventUnregister(&Microsoft_Windows_DotNETRuntimeStressHandle) 
#endif

//
// Enablement check macro for StressLogEvent
//

#define EventEnabledStressLogEvent() ((Microsoft_Windows_DotNETRuntimeStressEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for StressLogEvent
//
#define FireEtwStressLogEvent(Facility, LogLevel, Message)\
        EventEnabledStressLogEvent() ?\
        CoTemplate_qcs(Microsoft_Windows_DotNETRuntimeStressHandle, &StressLogEvent, Facility, LogLevel, Message)\
        : ERROR_SUCCESS\

//
// Enablement check macro for StressLogEvent_V1
//

#define EventEnabledStressLogEvent_V1() ((Microsoft_Windows_DotNETRuntimeStressEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for StressLogEvent_V1
//
#define FireEtwStressLogEvent_V1(Facility, LogLevel, Message, ClrInstanceID)\
        EventEnabledStressLogEvent_V1() ?\
        CoTemplate_qcsh(Microsoft_Windows_DotNETRuntimeStressHandle, &StressLogEvent_V1, Facility, LogLevel, Message, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for CLRStackWalkStress
//

#define EventEnabledCLRStackWalkStress() ((Microsoft_Windows_DotNETRuntimeStressEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for CLRStackWalkStress
//
#define FireEtwCLRStackWalkStress(ClrInstanceID, Reserved1, Reserved2, FrameCount, Stack)\
        EventEnabledCLRStackWalkStress() ?\
        CoTemplate_hccqP2(Microsoft_Windows_DotNETRuntimeStressHandle, &CLRStackWalkStress, ClrInstanceID, Reserved1, Reserved2, FrameCount, Stack)\
        : ERROR_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//+
// Provider Microsoft-Windows-DotNETRuntimePrivate Event Count 181
//+
EXTERN_C __declspec(selectany) const GUID MICROSOFT_WINDOWS_DOTNETRUNTIME_PRIVATE_PROVIDER = {0x763fd754, 0x7086, 0x4dfe, {0x95, 0xeb, 0xc0, 0x1a, 0x46, 0xfa, 0xf4, 0xca}};

//
// Opcodes
//
#define CLR_PRIVATEGC_GCDECISION_OPCODE 0x84
#define CLR_PRIVATEGC_GCSETTINGS_OPCODE 0xe
#define CLR_PRIVATEGC_GCOPTIMIZED_OPCODE 0x10
#define CLR_PRIVATEGC_GCPERHEAPHISTORY_OPCODE 0x11
#define CLR_PRIVATEGC_GCGLOBALHEAPHISTORY_OPCODE 0x12
#define CLR_PRIVATEGC_GCFULLNOTIFY_OPCODE 0x13
#define CLR_PRIVATEGC_JOIN_OPCODE 0x14
#define CLR_PRIVATEGC_MARKSTACKROOTS_OPCODE 0x15
#define CLR_PRIVATEGC_MARKFINALIZEQUEUEROOTS_OPCODE 0x16
#define CLR_PRIVATEGC_MARKHANDLES_OPCODE 0x17
#define CLR_PRIVATEGC_MARKCARDS_OPCODE 0x18
#define CLR_PRIVATEGC_BGCBEGIN_OPCODE 0x19
#define CLR_PRIVATEGC_BGC1STNONCONEND_OPCODE 0x1a
#define CLR_PRIVATEGC_BGC1STCONEND_OPCODE 0x1b
#define CLR_PRIVATEGC_BGC2NDNONCONBEGIN_OPCODE 0x1c
#define CLR_PRIVATEGC_BGC2NDNONCONEND_OPCODE 0x1d
#define CLR_PRIVATEGC_BGC2NDCONBEGIN_OPCODE 0x1e
#define CLR_PRIVATEGC_BGC2NDCONEND_OPCODE 0x1f
#define CLR_PRIVATEGC_BGCPLANEND_OPCODE 0x20
#define CLR_PRIVATEGC_BGCSWEEPEND_OPCODE 0x21
#define CLR_PRIVATEGC_BGCDRAINMARK_OPCODE 0x22
#define CLR_PRIVATEGC_BGCREVISIT_OPCODE 0x23
#define CLR_PRIVATEGC_BGCOVERFLOW_OPCODE 0x24
#define CLR_PRIVATEGC_BGCALLOCWAITBEGIN_OPCODE 0x25
#define CLR_PRIVATEGC_BGCALLOCWAITEND_OPCODE 0x26
#define CLR_PRIVATEGC_FINALIZEOBJECT_OPCODE 0x27
#define CLR_PRIVATEGC_CCWREFCOUNTCHANGE_OPCODE 0x28
#define CLR_PRIVATEGC_SETGCHANDLE_OPCODE 0x2a
#define CLR_PRIVATEGC_DESTROYGCHANDLE_OPCODE 0x2b
#define CLR_PRIVATEGC_PINGCPLUG_OPCODE 0x2c
#define CLR_FAILFAST_FAILFAST_OPCODE 0x34
#define CLR_PRIVATESTARTUP_EESTARTUPSTART_OPCODE 0x80
#define CLR_PRIVATESTARTUP_EESTARTUPEND_OPCODE 0x81
#define CLR_PRIVATESTARTUP_EECONFIGSETUP_OPCODE 0x82
#define CLR_PRIVATESTARTUP_EECONFIGSETUPEND_OPCODE 0x83
#define CLR_PRIVATESTARTUP_LOADSYSTEMBASES_OPCODE 0x84
#define CLR_PRIVATESTARTUP_LOADSYSTEMBASESEND_OPCODE 0x85
#define CLR_PRIVATESTARTUP_EXEEXE_OPCODE 0x86
#define CLR_PRIVATESTARTUP_EXEEXEEND_OPCODE 0x87
#define CLR_PRIVATESTARTUP_MAIN_OPCODE 0x88
#define CLR_PRIVATESTARTUP_MAINEND_OPCODE 0x89
#define CLR_PRIVATESTARTUP_APPLYPOLICYSTART_OPCODE 0xa
#define CLR_PRIVATESTARTUP_APPLYPOLICYEND_OPCODE 0xb
#define CLR_PRIVATESTARTUP_LDLIBSHFOLDER_OPCODE 0xc
#define CLR_PRIVATESTARTUP_LDLIBSHFOLDEREND_OPCODE 0xd
#define CLR_PRIVATESTARTUP_PRESTUBWORKER_OPCODE 0xe
#define CLR_PRIVATESTARTUP_PRESTUBWORKEREND_OPCODE 0xf
#define CLR_PRIVATESTARTUP_GETINSTALLATIONSTART_OPCODE 0x10
#define CLR_PRIVATESTARTUP_GETINSTALLATIONEND_OPCODE 0x11
#define CLR_PRIVATESTARTUP_OPENHMODULE_OPCODE 0x12
#define CLR_PRIVATESTARTUP_OPENHMODULEEND_OPCODE 0x13
#define CLR_PRIVATESTARTUP_EXPLICITBINDSTART_OPCODE 0x14
#define CLR_PRIVATESTARTUP_EXPLICITBINDEND_OPCODE 0x15
#define CLR_PRIVATESTARTUP_PARSEXML_OPCODE 0x16
#define CLR_PRIVATESTARTUP_PARSEXMLEND_OPCODE 0x17
#define CLR_PRIVATESTARTUP_INITDEFAULTDOMAIN_OPCODE 0x18
#define CLR_PRIVATESTARTUP_INITDEFAULTDOMAINEND_OPCODE 0x19
#define CLR_PRIVATESTARTUP_INITSECURITY_OPCODE 0x1a
#define CLR_PRIVATESTARTUP_INITSECURITYEND_OPCODE 0x1b
#define CLR_PRIVATESTARTUP_ALLOWBINDINGREDIRS_OPCODE 0x1c
#define CLR_PRIVATESTARTUP_ALLOWBINDINGREDIRSEND_OPCODE 0x1d
#define CLR_PRIVATESTARTUP_EECONFIGSYNC_OPCODE 0x1e
#define CLR_PRIVATESTARTUP_EECONFIGSYNCEND_OPCODE 0x1f
#define CLR_PRIVATESTARTUP_FUSIONBINDING_OPCODE 0x20
#define CLR_PRIVATESTARTUP_FUSIONBINDINGEND_OPCODE 0x21
#define CLR_PRIVATESTARTUP_LOADERCATCHCALL_OPCODE 0x22
#define CLR_PRIVATESTARTUP_LOADERCATCHCALLEND_OPCODE 0x23
#define CLR_PRIVATESTARTUP_FUSIONINIT_OPCODE 0x24
#define CLR_PRIVATESTARTUP_FUSIONINITEND_OPCODE 0x25
#define CLR_PRIVATESTARTUP_FUSIONAPPCTX_OPCODE 0x26
#define CLR_PRIVATESTARTUP_FUSIONAPPCTXEND_OPCODE 0x27
#define CLR_PRIVATESTARTUP_FUSION2EE_OPCODE 0x28
#define CLR_PRIVATESTARTUP_FUSION2EEEND_OPCODE 0x29
#define CLR_PRIVATESTARTUP_SECURITYCATCHCALL_OPCODE 0x2a
#define CLR_PRIVATESTARTUP_SECURITYCATCHCALLEND_OPCODE 0x2b
#define CLR_PRIVATEBINDING_BINDINGPOLICYPHASESTART_OPCODE 0x33
#define CLR_PRIVATEBINDING_BINDINGPOLICYPHASEEND_OPCODE 0x34
#define CLR_PRIVATEBINDING_BINDINGNGENPHASESTART_OPCODE 0x35
#define CLR_PRIVATEBINDING_BINDINGNGENPHASEEND_OPCODE 0x36
#define CLR_PRIVATEBINDING_BINDINGLOOKUPANDPROBINGPHASESTART_OPCODE 0x37
#define CLR_PRIVATEBINDING_BINDINGLOOKUPANDPROBINGPHASEEND_OPCODE 0x38
#define CLR_PRIVATEBINDING_LOADERPHASESTART_OPCODE 0x39
#define CLR_PRIVATEBINDING_LOADERPHASEEND_OPCODE 0x3a
#define CLR_PRIVATEBINDING_BINDINGPHASESTART_OPCODE 0x3b
#define CLR_PRIVATEBINDING_BINDINGPHASEEND_OPCODE 0x3c
#define CLR_PRIVATEBINDING_BINDINGDOWNLOADPHASESTART_OPCODE 0x3d
#define CLR_PRIVATEBINDING_BINDINGDOWNLOADPHASEEND_OPCODE 0x3e
#define CLR_PRIVATEBINDING_LOADERASSEMBLYINITPHASESTART_OPCODE 0x3f
#define CLR_PRIVATEBINDING_LOADERASSEMBLYINITPHASEEND_OPCODE 0x40
#define CLR_PRIVATEBINDING_LOADERMAPPINGPHASESTART_OPCODE 0x41
#define CLR_PRIVATEBINDING_LOADERMAPPINGPHASEEND_OPCODE 0x42
#define CLR_PRIVATEBINDING_LOADERDELIVERYEVENTSPHASESTART_OPCODE 0x43
#define CLR_PRIVATEBINDING_LOADERDELIVERYEVENTSPHASEEND_OPCODE 0x44
#define CLR_PRIVATEBINDING_FUSIONMESSAGE_OPCODE 0x46
#define CLR_PRIVATEBINDING_FUSIONERRORCODE_OPCODE 0x47
#define CLR_PRIVATESTACK_STACKWALK_OPCODE 0x52
#define CLR_EVIDENCEGENERATED_OPCODE 0xa
#define CLR_NGEN_BINDER_OPCODE 0x45
#define CLR_MODULE_TRANSPARENCY_COMPUTATION_START_OPCODE 0x53
#define CLR_MODULE_TRANSPARENCY_COMPUTATION_END_OPCODE 0x54
#define CLR_TYPE_TRANSPARENCY_COMPUTATION_START_OPCODE 0x55
#define CLR_TYPE_TRANSPARENCY_COMPUTATION_END_OPCODE 0x56
#define CLR_METHOD_TRANSPARENCY_COMPUTATION_START_OPCODE 0x57
#define CLR_METHOD_TRANSPARENCY_COMPUTATION_END_OPCODE 0x58
#define CLR_FIELD_TRANSPARENCY_COMPUTATION_START_OPCODE 0x59
#define CLR_FIELD_TRANSPARENCY_COMPUTATION_END_OPCODE 0x5a
#define CLR_TOKEN_TRANSPARENCY_COMPUTATION_START_OPCODE 0x5b
#define CLR_TOKEN_TRANSPARENCY_COMPUTATION_END_OPCODE 0x5c
#define CLR_LOADERHEAP_ALLOCREQUEST_OPCODE 0x61
#define CLR_MULTICOREJIT_COMMON_OPCODE 0xa
#define CLR_MULTICOREJIT_METHODCODERETURNED_OPCODE 0xb
#define CLR_PERFTRACK_PRIVATE_MODULE_RANGE_LOAD_OPCODE 0xa
#define CLR_DYNAMICTYPEUSAGE_IINSPECTABLERUNTIMECLASSNAME_OPCODE 0xb
#define CLR_DYNAMICTYPEUSAGE_WINRTUNBOX_OPCODE 0xc
#define CLR_DYNAMICTYPEUSAGE_CREATERCW_OPCODE 0xd
#define CLR_DYNAMICTYPEUSAGE_RCWVARIANCE_OPCODE 0xe
#define CLR_DYNAMICTYPEUSAGE_RCWIENUMERABLECASTING_OPCODE 0xf
#define CLR_DYNAMICTYPEUSAGE_CREATECCW_OPCODE 0x10
#define CLR_DYNAMICTYPEUSAGE_CCWVARIANCE_OPCODE 0x11
#define CLR_DYNAMICTYPEUSAGE_OBJECTVARIANTMARSHALLINGTONATIVE_OPCODE 0x12
#define CLR_DYNAMICTYPEUSAGE_GETTYPEFROMGUID_OPCODE 0x13
#define CLR_DYNAMICTYPEUSAGE_GETTYPEFROMPROGID_OPCODE 0x14
#define CLR_DYNAMICTYPEUSAGE_CONVERTTOCALLBACKETW_OPCODE 0x15
#define CLR_DYNAMICTYPEUSAGE_BEGINCREATEMANAGEDREFERENCE_OPCODE 0x16
#define CLR_DYNAMICTYPEUSAGE_ENDCREATEMANAGEDREFERENCE_OPCODE 0x17
#define CLR_DYNAMICTYPEUSAGE_OBJECTVARIANTMARSHALLINGTOMANAGED_OPCODE 0x18

//
// Tasks
//
#define CLR_GCPRIVATE_TASK 0x1
EXTERN_C __declspec(selectany) const GUID GarbageCollectionPrivateId = {0x2f1b6bf6, 0x18ff, 0x4645, {0x95, 0x01, 0x15, 0xdf, 0x6c, 0x64, 0xc2, 0xcf}};
#define CLR_FAILFAST_TASK 0x2
EXTERN_C __declspec(selectany) const GUID CLRFailFastId = {0xee9ede12, 0xc5f5, 0x4995, {0x81, 0xa2, 0xdc, 0xfb, 0x5f, 0x6b, 0x80, 0xc8}};
#define CLR_STARTUP_TASK 0x9
EXTERN_C __declspec(selectany) const GUID StartupId = {0x02d08a4f, 0xfd01, 0x4538, {0x98, 0x9b, 0x03, 0xe4, 0x37, 0xb9, 0x50, 0xf4}};
#define CLR_BINDING_TASK 0xa
EXTERN_C __declspec(selectany) const GUID BindingId = {0xe90e32ba, 0xe396, 0x4e6a, {0xa7, 0x90, 0x0a, 0x08, 0xc6, 0xc9, 0x25, 0xdc}};
#define CLR_STACKPRIVATE_TASK 0xb
EXTERN_C __declspec(selectany) const GUID CLRStackPrivateId = {0xd3363dc0, 0x243a, 0x4620, {0xa4, 0xd0, 0x8a, 0x07, 0xd7, 0x72, 0xf5, 0x33}};
#define CLR_EVIDENCE_GENERATED_TASK 0xc
EXTERN_C __declspec(selectany) const GUID EvidenceGeneratedTaskId = {0x24333617, 0x5ae4, 0x4f9e, {0xa5, 0xc5, 0x5e, 0xde, 0x1b, 0xc5, 0x92, 0x07}};
#define CLR_NGEN_BINDER_TASK 0xd
EXTERN_C __declspec(selectany) const GUID CLRNgenBinderId = {0x861f5339, 0x19d6, 0x4873, {0xb3, 0x50, 0x7b, 0x03, 0x22, 0x8b, 0xda, 0x7c}};
#define CLR_TRANSPARENCY_COMPUTATION_TASK 0xe
EXTERN_C __declspec(selectany) const GUID TransparencyComputationId = {0xe2444377, 0xddf9, 0x4589, {0xa8, 0x85, 0x08, 0xd6, 0x09, 0x25, 0x21, 0xdf}};
#define CLR_LOADERHEAPALLOCATIONPRIVATE_TASK 0x10
EXTERN_C __declspec(selectany) const GUID LoaderHeapAllocationId = {0x87f1e966, 0xd604, 0x41ba, {0xb1, 0xab, 0x18, 0x38, 0x49, 0xdf, 0xf2, 0x9d}};
#define CLR_MULTICOREJIT_TASK 0x11
EXTERN_C __declspec(selectany) const GUID CLRMulticoreJitId = {0xb85ad9e5, 0x658b, 0x4215, {0x8d, 0xdb, 0x83, 0x40, 0x40, 0xf4, 0xbc, 0x10}};
#define CLR_PERFTRACK_PRIVATE_TASK 0x14
EXTERN_C __declspec(selectany) const GUID CLRPerfTrackPrivateId = {0xeac685f6, 0x2104, 0x4dec, {0x88, 0xfd, 0x91, 0xe4, 0x25, 0x42, 0x21, 0xec}};
#define CLR_DYNAMICTYPEUSAGE_TASK 0x16
EXTERN_C __declspec(selectany) const GUID DynamicTypeUsageId = {0x4f67e18d, 0xeedd, 0x4056, {0xb8, 0xce, 0xdd, 0x82, 0x2f, 0xe5, 0x45, 0x53}};
//
// Keyword
//
#define CLR_PRIVATEGC_KEYWORD 0x1
#define CLR_PRIVATEBINDING_KEYWORD 0x2
#define CLR_PRIVATENGENFORCERESTORE_KEYWORD 0x4
#define CLR_PRIVATEFUSION_KEYWORD 0x8
#define CLR_PRIVATELOADERHEAP_KEYWORD 0x10
#define CLR_PRIVATESECURITY_KEYWORD 0x400
#define CLR_INTEROP_KEYWORD 0x2000
#define CLR_PRIVATEGCHANDLE_KEYWORD 0x4000
#define CLR_PRIVATEMULTICOREJIT_KEYWORD 0x20000
#define CLR_PRIVATESTACK_KEYWORD 0x40000000
#define CLR_PRIVATESTARTUP_KEYWORD 0x80000000
#define CLR_PERFTRACK_PRIVATE_KEYWORD 0x20000000
#define CLR_PRIVATE_DYNAMICTYPEUSAGE_KEYWORD 0x20

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCDecision = {0x1, 0x0, 0x0, 0x4, 0x84, 0x1, 0x1};
#define GCDecision_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCDecision_V1 = {0x1, 0x1, 0x0, 0x4, 0x84, 0x1, 0x1};
#define GCDecision_V1_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCSettings = {0x2, 0x0, 0x0, 0x4, 0xe, 0x1, 0x1};
#define GCSettings_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCSettings_V1 = {0x2, 0x1, 0x0, 0x4, 0xe, 0x1, 0x1};
#define GCSettings_V1_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCOptimized = {0x3, 0x0, 0x0, 0x5, 0x10, 0x1, 0x1};
#define GCOptimized_value 0x3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCOptimized_V1 = {0x3, 0x1, 0x0, 0x5, 0x10, 0x1, 0x1};
#define GCOptimized_V1_value 0x3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCPerHeapHistory = {0x4, 0x2, 0x0, 0x4, 0x11, 0x1, 0x1};
#define GCPerHeapHistory_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCPerHeapHistory_V1 = {0x4, 0x1, 0x0, 0x4, 0x11, 0x1, 0x1};
#define GCPerHeapHistory_V1_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCGlobalHeapHistory = {0x5, 0x0, 0x0, 0x4, 0x12, 0x1, 0x1};
#define GCGlobalHeapHistory_value 0x5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCGlobalHeapHistory_V1 = {0x5, 0x1, 0x0, 0x4, 0x12, 0x1, 0x1};
#define GCGlobalHeapHistory_V1_value 0x5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCJoin = {0x6, 0x0, 0x0, 0x5, 0x14, 0x1, 0x1};
#define GCJoin_value 0x6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCJoin_V1 = {0x6, 0x1, 0x0, 0x5, 0x14, 0x1, 0x1};
#define GCJoin_V1_value 0x6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrvGCMarkStackRoots = {0x7, 0x0, 0x0, 0x4, 0x15, 0x1, 0x1};
#define PrvGCMarkStackRoots_value 0x7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrvGCMarkStackRoots_V1 = {0x7, 0x1, 0x0, 0x4, 0x15, 0x1, 0x1};
#define PrvGCMarkStackRoots_V1_value 0x7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrvGCMarkFinalizeQueueRoots = {0x8, 0x0, 0x0, 0x4, 0x16, 0x1, 0x1};
#define PrvGCMarkFinalizeQueueRoots_value 0x8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrvGCMarkFinalizeQueueRoots_V1 = {0x8, 0x1, 0x0, 0x4, 0x16, 0x1, 0x1};
#define PrvGCMarkFinalizeQueueRoots_V1_value 0x8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrvGCMarkHandles = {0x9, 0x0, 0x0, 0x4, 0x17, 0x1, 0x1};
#define PrvGCMarkHandles_value 0x9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrvGCMarkHandles_V1 = {0x9, 0x1, 0x0, 0x4, 0x17, 0x1, 0x1};
#define PrvGCMarkHandles_V1_value 0x9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrvGCMarkCards = {0xa, 0x0, 0x0, 0x4, 0x18, 0x1, 0x1};
#define PrvGCMarkCards_value 0xa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrvGCMarkCards_V1 = {0xa, 0x1, 0x0, 0x4, 0x18, 0x1, 0x1};
#define PrvGCMarkCards_V1_value 0xa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGCBegin = {0xb, 0x0, 0x0, 0x4, 0x19, 0x1, 0x1};
#define BGCBegin_value 0xb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGC1stNonConEnd = {0xc, 0x0, 0x0, 0x4, 0x1a, 0x1, 0x1};
#define BGC1stNonConEnd_value 0xc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGC1stConEnd = {0xd, 0x0, 0x0, 0x4, 0x1b, 0x1, 0x1};
#define BGC1stConEnd_value 0xd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGC2ndNonConBegin = {0xe, 0x0, 0x0, 0x4, 0x1c, 0x1, 0x1};
#define BGC2ndNonConBegin_value 0xe
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGC2ndNonConEnd = {0xf, 0x0, 0x0, 0x4, 0x1d, 0x1, 0x1};
#define BGC2ndNonConEnd_value 0xf
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGC2ndConBegin = {0x10, 0x0, 0x0, 0x4, 0x1e, 0x1, 0x1};
#define BGC2ndConBegin_value 0x10
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGC2ndConEnd = {0x11, 0x0, 0x0, 0x4, 0x1f, 0x1, 0x1};
#define BGC2ndConEnd_value 0x11
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGCPlanEnd = {0x12, 0x0, 0x0, 0x4, 0x20, 0x1, 0x1};
#define BGCPlanEnd_value 0x12
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGCSweepEnd = {0x13, 0x0, 0x0, 0x4, 0x21, 0x1, 0x1};
#define BGCSweepEnd_value 0x13
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGCDrainMark = {0x14, 0x0, 0x0, 0x4, 0x22, 0x1, 0x1};
#define BGCDrainMark_value 0x14
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGCRevisit = {0x15, 0x0, 0x0, 0x4, 0x23, 0x1, 0x1};
#define BGCRevisit_value 0x15
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGCOverflow = {0x16, 0x0, 0x0, 0x4, 0x24, 0x1, 0x1};
#define BGCOverflow_value 0x16
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGCAllocWaitBegin = {0x17, 0x0, 0x0, 0x4, 0x25, 0x1, 0x1};
#define BGCAllocWaitBegin_value 0x17
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BGCAllocWaitEnd = {0x18, 0x0, 0x0, 0x4, 0x26, 0x1, 0x1};
#define BGCAllocWaitEnd_value 0x18
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCFullNotify = {0x19, 0x0, 0x0, 0x4, 0x13, 0x1, 0x1};
#define GCFullNotify_value 0x19
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GCFullNotify_V1 = {0x19, 0x1, 0x0, 0x4, 0x13, 0x1, 0x1};
#define GCFullNotify_V1_value 0x19
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EEStartupStart = {0x50, 0x0, 0x0, 0x4, 0x80, 0x9, 0x80000000};
#define EEStartupStart_value 0x50
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EEStartupStart_V1 = {0x50, 0x1, 0x0, 0x4, 0x80, 0x9, 0x80000000};
#define EEStartupStart_V1_value 0x50
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EEStartupEnd = {0x51, 0x0, 0x0, 0x4, 0x81, 0x9, 0x80000000};
#define EEStartupEnd_value 0x51
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EEStartupEnd_V1 = {0x51, 0x1, 0x0, 0x4, 0x81, 0x9, 0x80000000};
#define EEStartupEnd_V1_value 0x51
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EEConfigSetup = {0x52, 0x0, 0x0, 0x4, 0x82, 0x9, 0x80000000};
#define EEConfigSetup_value 0x52
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EEConfigSetup_V1 = {0x52, 0x1, 0x0, 0x4, 0x82, 0x9, 0x80000000};
#define EEConfigSetup_V1_value 0x52
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EEConfigSetupEnd = {0x53, 0x0, 0x0, 0x4, 0x83, 0x9, 0x80000000};
#define EEConfigSetupEnd_value 0x53
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EEConfigSetupEnd_V1 = {0x53, 0x1, 0x0, 0x4, 0x83, 0x9, 0x80000000};
#define EEConfigSetupEnd_V1_value 0x53
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LdSysBases = {0x54, 0x0, 0x0, 0x4, 0x84, 0x9, 0x80000000};
#define LdSysBases_value 0x54
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LdSysBases_V1 = {0x54, 0x1, 0x0, 0x4, 0x84, 0x9, 0x80000000};
#define LdSysBases_V1_value 0x54
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LdSysBasesEnd = {0x55, 0x0, 0x0, 0x4, 0x85, 0x9, 0x80000000};
#define LdSysBasesEnd_value 0x55
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LdSysBasesEnd_V1 = {0x55, 0x1, 0x0, 0x4, 0x85, 0x9, 0x80000000};
#define LdSysBasesEnd_V1_value 0x55
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ExecExe = {0x56, 0x0, 0x0, 0x4, 0x86, 0x9, 0x80000000};
#define ExecExe_value 0x56
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ExecExe_V1 = {0x56, 0x1, 0x0, 0x4, 0x86, 0x9, 0x80000000};
#define ExecExe_V1_value 0x56
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ExecExeEnd = {0x57, 0x0, 0x0, 0x4, 0x87, 0x9, 0x80000000};
#define ExecExeEnd_value 0x57
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ExecExeEnd_V1 = {0x57, 0x1, 0x0, 0x4, 0x87, 0x9, 0x80000000};
#define ExecExeEnd_V1_value 0x57
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Main = {0x58, 0x0, 0x0, 0x4, 0x88, 0x9, 0x80000000};
#define Main_value 0x58
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Main_V1 = {0x58, 0x1, 0x0, 0x4, 0x88, 0x9, 0x80000000};
#define Main_V1_value 0x58
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MainEnd = {0x59, 0x0, 0x0, 0x4, 0x89, 0x9, 0x80000000};
#define MainEnd_value 0x59
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MainEnd_V1 = {0x59, 0x1, 0x0, 0x4, 0x89, 0x9, 0x80000000};
#define MainEnd_V1_value 0x59
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ApplyPolicyStart = {0x5a, 0x0, 0x0, 0x4, 0xa, 0x9, 0x80000000};
#define ApplyPolicyStart_value 0x5a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ApplyPolicyStart_V1 = {0x5a, 0x1, 0x0, 0x4, 0xa, 0x9, 0x80000000};
#define ApplyPolicyStart_V1_value 0x5a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ApplyPolicyEnd = {0x5b, 0x0, 0x0, 0x4, 0xb, 0x9, 0x80000000};
#define ApplyPolicyEnd_value 0x5b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ApplyPolicyEnd_V1 = {0x5b, 0x1, 0x0, 0x4, 0xb, 0x9, 0x80000000};
#define ApplyPolicyEnd_V1_value 0x5b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LdLibShFolder = {0x5c, 0x0, 0x0, 0x4, 0xc, 0x9, 0x80000000};
#define LdLibShFolder_value 0x5c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LdLibShFolder_V1 = {0x5c, 0x1, 0x0, 0x4, 0xc, 0x9, 0x80000000};
#define LdLibShFolder_V1_value 0x5c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LdLibShFolderEnd = {0x5d, 0x0, 0x0, 0x4, 0xd, 0x9, 0x80000000};
#define LdLibShFolderEnd_value 0x5d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LdLibShFolderEnd_V1 = {0x5d, 0x1, 0x0, 0x4, 0xd, 0x9, 0x80000000};
#define LdLibShFolderEnd_V1_value 0x5d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrestubWorker = {0x5e, 0x0, 0x0, 0x4, 0xe, 0x9, 0x80000000};
#define PrestubWorker_value 0x5e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrestubWorker_V1 = {0x5e, 0x1, 0x0, 0x4, 0xe, 0x9, 0x80000000};
#define PrestubWorker_V1_value 0x5e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrestubWorkerEnd = {0x5f, 0x0, 0x0, 0x4, 0xf, 0x9, 0x80000000};
#define PrestubWorkerEnd_value 0x5f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrestubWorkerEnd_V1 = {0x5f, 0x1, 0x0, 0x4, 0xf, 0x9, 0x80000000};
#define PrestubWorkerEnd_V1_value 0x5f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GetInstallationStart = {0x60, 0x0, 0x0, 0x4, 0x10, 0x9, 0x80000000};
#define GetInstallationStart_value 0x60
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GetInstallationStart_V1 = {0x60, 0x1, 0x0, 0x4, 0x10, 0x9, 0x80000000};
#define GetInstallationStart_V1_value 0x60
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GetInstallationEnd = {0x61, 0x0, 0x0, 0x4, 0x11, 0x9, 0x80000000};
#define GetInstallationEnd_value 0x61
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GetInstallationEnd_V1 = {0x61, 0x1, 0x0, 0x4, 0x11, 0x9, 0x80000000};
#define GetInstallationEnd_V1_value 0x61
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpenHModule = {0x62, 0x0, 0x0, 0x4, 0x12, 0x9, 0x80000000};
#define OpenHModule_value 0x62
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpenHModule_V1 = {0x62, 0x1, 0x0, 0x4, 0x12, 0x9, 0x80000000};
#define OpenHModule_V1_value 0x62
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpenHModuleEnd = {0x63, 0x0, 0x0, 0x4, 0x13, 0x9, 0x80000000};
#define OpenHModuleEnd_value 0x63
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpenHModuleEnd_V1 = {0x63, 0x1, 0x0, 0x4, 0x13, 0x9, 0x80000000};
#define OpenHModuleEnd_V1_value 0x63
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ExplicitBindStart = {0x64, 0x0, 0x0, 0x4, 0x14, 0x9, 0x80000000};
#define ExplicitBindStart_value 0x64
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ExplicitBindStart_V1 = {0x64, 0x1, 0x0, 0x4, 0x14, 0x9, 0x80000000};
#define ExplicitBindStart_V1_value 0x64
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ExplicitBindEnd = {0x65, 0x0, 0x0, 0x4, 0x15, 0x9, 0x80000000};
#define ExplicitBindEnd_value 0x65
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ExplicitBindEnd_V1 = {0x65, 0x1, 0x0, 0x4, 0x15, 0x9, 0x80000000};
#define ExplicitBindEnd_V1_value 0x65
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ParseXml = {0x66, 0x0, 0x0, 0x4, 0x16, 0x9, 0x80000000};
#define ParseXml_value 0x66
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ParseXml_V1 = {0x66, 0x1, 0x0, 0x4, 0x16, 0x9, 0x80000000};
#define ParseXml_V1_value 0x66
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ParseXmlEnd = {0x67, 0x0, 0x0, 0x4, 0x17, 0x9, 0x80000000};
#define ParseXmlEnd_value 0x67
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ParseXmlEnd_V1 = {0x67, 0x1, 0x0, 0x4, 0x17, 0x9, 0x80000000};
#define ParseXmlEnd_V1_value 0x67
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR InitDefaultDomain = {0x68, 0x0, 0x0, 0x4, 0x18, 0x9, 0x80000000};
#define InitDefaultDomain_value 0x68
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR InitDefaultDomain_V1 = {0x68, 0x1, 0x0, 0x4, 0x18, 0x9, 0x80000000};
#define InitDefaultDomain_V1_value 0x68
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR InitDefaultDomainEnd = {0x69, 0x0, 0x0, 0x4, 0x19, 0x9, 0x80000000};
#define InitDefaultDomainEnd_value 0x69
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR InitDefaultDomainEnd_V1 = {0x69, 0x1, 0x0, 0x4, 0x19, 0x9, 0x80000000};
#define InitDefaultDomainEnd_V1_value 0x69
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR InitSecurity = {0x6a, 0x0, 0x0, 0x4, 0x1a, 0x9, 0x80000000};
#define InitSecurity_value 0x6a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR InitSecurity_V1 = {0x6a, 0x1, 0x0, 0x4, 0x1a, 0x9, 0x80000000};
#define InitSecurity_V1_value 0x6a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR InitSecurityEnd = {0x6b, 0x0, 0x0, 0x4, 0x1b, 0x9, 0x80000000};
#define InitSecurityEnd_value 0x6b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR InitSecurityEnd_V1 = {0x6b, 0x1, 0x0, 0x4, 0x1b, 0x9, 0x80000000};
#define InitSecurityEnd_V1_value 0x6b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AllowBindingRedirs = {0x6c, 0x0, 0x0, 0x4, 0x1c, 0x9, 0x80000000};
#define AllowBindingRedirs_value 0x6c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AllowBindingRedirs_V1 = {0x6c, 0x1, 0x0, 0x4, 0x1c, 0x9, 0x80000000};
#define AllowBindingRedirs_V1_value 0x6c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AllowBindingRedirsEnd = {0x6d, 0x0, 0x0, 0x4, 0x1d, 0x9, 0x80000000};
#define AllowBindingRedirsEnd_value 0x6d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AllowBindingRedirsEnd_V1 = {0x6d, 0x1, 0x0, 0x4, 0x1d, 0x9, 0x80000000};
#define AllowBindingRedirsEnd_V1_value 0x6d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EEConfigSync = {0x6e, 0x0, 0x0, 0x4, 0x1e, 0x9, 0x80000000};
#define EEConfigSync_value 0x6e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EEConfigSync_V1 = {0x6e, 0x1, 0x0, 0x4, 0x1e, 0x9, 0x80000000};
#define EEConfigSync_V1_value 0x6e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EEConfigSyncEnd = {0x6f, 0x0, 0x0, 0x4, 0x1f, 0x9, 0x80000000};
#define EEConfigSyncEnd_value 0x6f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EEConfigSyncEnd_V1 = {0x6f, 0x1, 0x0, 0x4, 0x1f, 0x9, 0x80000000};
#define EEConfigSyncEnd_V1_value 0x6f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionBinding = {0x70, 0x0, 0x0, 0x4, 0x20, 0x9, 0x80000000};
#define FusionBinding_value 0x70
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionBinding_V1 = {0x70, 0x1, 0x0, 0x4, 0x20, 0x9, 0x80000000};
#define FusionBinding_V1_value 0x70
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionBindingEnd = {0x71, 0x0, 0x0, 0x4, 0x21, 0x9, 0x80000000};
#define FusionBindingEnd_value 0x71
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionBindingEnd_V1 = {0x71, 0x1, 0x0, 0x4, 0x21, 0x9, 0x80000000};
#define FusionBindingEnd_V1_value 0x71
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LoaderCatchCall = {0x72, 0x0, 0x0, 0x4, 0x22, 0x9, 0x80000000};
#define LoaderCatchCall_value 0x72
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LoaderCatchCall_V1 = {0x72, 0x1, 0x0, 0x4, 0x22, 0x9, 0x80000000};
#define LoaderCatchCall_V1_value 0x72
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LoaderCatchCallEnd = {0x73, 0x0, 0x0, 0x4, 0x23, 0x9, 0x80000000};
#define LoaderCatchCallEnd_value 0x73
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LoaderCatchCallEnd_V1 = {0x73, 0x1, 0x0, 0x4, 0x23, 0x9, 0x80000000};
#define LoaderCatchCallEnd_V1_value 0x73
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionInit = {0x74, 0x0, 0x0, 0x4, 0x24, 0x9, 0x80000000};
#define FusionInit_value 0x74
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionInit_V1 = {0x74, 0x1, 0x0, 0x4, 0x24, 0x9, 0x80000000};
#define FusionInit_V1_value 0x74
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionInitEnd = {0x75, 0x0, 0x0, 0x4, 0x25, 0x9, 0x80000000};
#define FusionInitEnd_value 0x75
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionInitEnd_V1 = {0x75, 0x1, 0x0, 0x4, 0x25, 0x9, 0x80000000};
#define FusionInitEnd_V1_value 0x75
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionAppCtx = {0x76, 0x0, 0x0, 0x4, 0x26, 0x9, 0x80000000};
#define FusionAppCtx_value 0x76
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionAppCtx_V1 = {0x76, 0x1, 0x0, 0x4, 0x26, 0x9, 0x80000000};
#define FusionAppCtx_V1_value 0x76
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionAppCtxEnd = {0x77, 0x0, 0x0, 0x4, 0x27, 0x9, 0x80000000};
#define FusionAppCtxEnd_value 0x77
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionAppCtxEnd_V1 = {0x77, 0x1, 0x0, 0x4, 0x27, 0x9, 0x80000000};
#define FusionAppCtxEnd_V1_value 0x77
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Fusion2EE = {0x78, 0x0, 0x0, 0x4, 0x28, 0x9, 0x80000000};
#define Fusion2EE_value 0x78
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Fusion2EE_V1 = {0x78, 0x1, 0x0, 0x4, 0x28, 0x9, 0x80000000};
#define Fusion2EE_V1_value 0x78
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Fusion2EEEnd = {0x79, 0x0, 0x0, 0x4, 0x29, 0x9, 0x80000000};
#define Fusion2EEEnd_value 0x79
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Fusion2EEEnd_V1 = {0x79, 0x1, 0x0, 0x4, 0x29, 0x9, 0x80000000};
#define Fusion2EEEnd_V1_value 0x79
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SecurityCatchCall = {0x7a, 0x0, 0x0, 0x4, 0x2a, 0x9, 0x80000000};
#define SecurityCatchCall_value 0x7a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SecurityCatchCall_V1 = {0x7a, 0x1, 0x0, 0x4, 0x2a, 0x9, 0x80000000};
#define SecurityCatchCall_V1_value 0x7a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SecurityCatchCallEnd = {0x7b, 0x0, 0x0, 0x4, 0x2b, 0x9, 0x80000000};
#define SecurityCatchCallEnd_value 0x7b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SecurityCatchCallEnd_V1 = {0x7b, 0x1, 0x0, 0x4, 0x2b, 0x9, 0x80000000};
#define SecurityCatchCallEnd_V1_value 0x7b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR CLRStackWalkPrivate = {0x97, 0x0, 0x0, 0x0, 0x52, 0xb, 0x40000000};
#define CLRStackWalkPrivate_value 0x97
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleRangeLoadPrivate = {0x9e, 0x0, 0x0, 0x4, 0xa, 0x14, 0x20000000};
#define ModuleRangeLoadPrivate_value 0x9e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BindingPolicyPhaseStart = {0x9f, 0x0, 0x0, 0x4, 0x33, 0xa, 0x2};
#define BindingPolicyPhaseStart_value 0x9f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BindingPolicyPhaseEnd = {0xa0, 0x0, 0x0, 0x4, 0x34, 0xa, 0x2};
#define BindingPolicyPhaseEnd_value 0xa0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BindingNgenPhaseStart = {0xa1, 0x0, 0x0, 0x4, 0x35, 0xa, 0x2};
#define BindingNgenPhaseStart_value 0xa1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BindingNgenPhaseEnd = {0xa2, 0x0, 0x0, 0x4, 0x36, 0xa, 0x2};
#define BindingNgenPhaseEnd_value 0xa2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BindingLookupAndProbingPhaseStart = {0xa3, 0x0, 0x0, 0x4, 0x37, 0xa, 0x2};
#define BindingLookupAndProbingPhaseStart_value 0xa3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BindingLookupAndProbingPhaseEnd = {0xa4, 0x0, 0x0, 0x4, 0x38, 0xa, 0x2};
#define BindingLookupAndProbingPhaseEnd_value 0xa4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LoaderPhaseStart = {0xa5, 0x0, 0x0, 0x4, 0x39, 0xa, 0x2};
#define LoaderPhaseStart_value 0xa5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LoaderPhaseEnd = {0xa6, 0x0, 0x0, 0x4, 0x3a, 0xa, 0x2};
#define LoaderPhaseEnd_value 0xa6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BindingPhaseStart = {0xa7, 0x0, 0x0, 0x4, 0x3b, 0xa, 0x2};
#define BindingPhaseStart_value 0xa7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BindingPhaseEnd = {0xa8, 0x0, 0x0, 0x4, 0x3c, 0xa, 0x2};
#define BindingPhaseEnd_value 0xa8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BindingDownloadPhaseStart = {0xa9, 0x0, 0x0, 0x4, 0x3d, 0xa, 0x2};
#define BindingDownloadPhaseStart_value 0xa9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BindingDownloadPhaseEnd = {0xaa, 0x0, 0x0, 0x4, 0x3e, 0xa, 0x2};
#define BindingDownloadPhaseEnd_value 0xaa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LoaderAssemblyInitPhaseStart = {0xab, 0x0, 0x0, 0x4, 0x3f, 0xa, 0x2};
#define LoaderAssemblyInitPhaseStart_value 0xab
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LoaderAssemblyInitPhaseEnd = {0xac, 0x0, 0x0, 0x4, 0x40, 0xa, 0x2};
#define LoaderAssemblyInitPhaseEnd_value 0xac
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LoaderMappingPhaseStart = {0xad, 0x0, 0x0, 0x4, 0x41, 0xa, 0x2};
#define LoaderMappingPhaseStart_value 0xad
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LoaderMappingPhaseEnd = {0xae, 0x0, 0x0, 0x4, 0x42, 0xa, 0x2};
#define LoaderMappingPhaseEnd_value 0xae
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LoaderDeliverEventsPhaseStart = {0xaf, 0x0, 0x0, 0x4, 0x43, 0xa, 0x2};
#define LoaderDeliverEventsPhaseStart_value 0xaf
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LoaderDeliverEventsPhaseEnd = {0xb0, 0x0, 0x0, 0x4, 0x44, 0xa, 0x2};
#define LoaderDeliverEventsPhaseEnd_value 0xb0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvidenceGenerated = {0xb1, 0x0, 0x0, 0x4, 0xa, 0xc, 0x400};
#define EvidenceGenerated_value 0xb1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleTransparencyComputationStart = {0xb2, 0x0, 0x0, 0x4, 0x53, 0xe, 0x400};
#define ModuleTransparencyComputationStart_value 0xb2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ModuleTransparencyComputationEnd = {0xb3, 0x0, 0x0, 0x4, 0x54, 0xe, 0x400};
#define ModuleTransparencyComputationEnd_value 0xb3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR TypeTransparencyComputationStart = {0xb4, 0x0, 0x0, 0x4, 0x55, 0xe, 0x400};
#define TypeTransparencyComputationStart_value 0xb4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR TypeTransparencyComputationEnd = {0xb5, 0x0, 0x0, 0x4, 0x56, 0xe, 0x400};
#define TypeTransparencyComputationEnd_value 0xb5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodTransparencyComputationStart = {0xb6, 0x0, 0x0, 0x4, 0x57, 0xe, 0x400};
#define MethodTransparencyComputationStart_value 0xb6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MethodTransparencyComputationEnd = {0xb7, 0x0, 0x0, 0x4, 0x58, 0xe, 0x400};
#define MethodTransparencyComputationEnd_value 0xb7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FieldTransparencyComputationStart = {0xb8, 0x0, 0x0, 0x4, 0x59, 0xe, 0x400};
#define FieldTransparencyComputationStart_value 0xb8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FieldTransparencyComputationEnd = {0xb9, 0x0, 0x0, 0x4, 0x5a, 0xe, 0x400};
#define FieldTransparencyComputationEnd_value 0xb9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR TokenTransparencyComputationStart = {0xba, 0x0, 0x0, 0x4, 0x5b, 0xe, 0x400};
#define TokenTransparencyComputationStart_value 0xba
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR TokenTransparencyComputationEnd = {0xbb, 0x0, 0x0, 0x4, 0x5c, 0xe, 0x400};
#define TokenTransparencyComputationEnd_value 0xbb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR NgenBindEvent = {0xbc, 0x0, 0x0, 0x4, 0x45, 0xd, 0x8};
#define NgenBindEvent_value 0xbc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FailFast = {0xbf, 0x0, 0x0, 0x1, 0x34, 0x2, 0x0};
#define FailFast_value 0xbf
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrvFinalizeObject = {0xc0, 0x0, 0x0, 0x5, 0x27, 0x1, 0x1};
#define PrvFinalizeObject_value 0xc0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR CCWRefCountChange = {0xc1, 0x0, 0x0, 0x5, 0x28, 0x1, 0x2000};
#define CCWRefCountChange_value 0xc1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrvSetGCHandle = {0xc2, 0x0, 0x0, 0x5, 0x2a, 0x1, 0x4000};
#define PrvSetGCHandle_value 0xc2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PrvDestroyGCHandle = {0xc3, 0x0, 0x0, 0x5, 0x2b, 0x1, 0x4000};
#define PrvDestroyGCHandle_value 0xc3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionMessageEvent = {0xc4, 0x0, 0x0, 0x4, 0x46, 0xa, 0x2};
#define FusionMessageEvent_value 0xc4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FusionErrorCodeEvent = {0xc5, 0x0, 0x0, 0x4, 0x47, 0xa, 0x2};
#define FusionErrorCodeEvent_value 0xc5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PinPlugAtGCTime = {0xc7, 0x0, 0x0, 0x5, 0x2c, 0x1, 0x1};
#define PinPlugAtGCTime_value 0xc7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AllocRequest = {0x136, 0x0, 0x0, 0x5, 0x61, 0x10, 0x10};
#define AllocRequest_value 0x136
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MulticoreJit = {0xc9, 0x0, 0x0, 0x4, 0xa, 0x11, 0x20000};
#define MulticoreJit_value 0xc9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MulticoreJitMethodCodeReturned = {0xca, 0x0, 0x0, 0x4, 0xb, 0x11, 0x20000};
#define MulticoreJitMethodCodeReturned_value 0xca
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR IInspectableRuntimeClassName = {0x190, 0x0, 0x0, 0x4, 0xb, 0x16, 0x20};
#define IInspectableRuntimeClassName_value 0x190
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WinRTUnbox = {0x191, 0x0, 0x0, 0x4, 0xc, 0x16, 0x20};
#define WinRTUnbox_value 0x191
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR CreateRCW = {0x192, 0x0, 0x0, 0x4, 0xd, 0x16, 0x20};
#define CreateRCW_value 0x192
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RCWVariance = {0x193, 0x0, 0x0, 0x4, 0xe, 0x16, 0x20};
#define RCWVariance_value 0x193
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RCWIEnumerableCasting = {0x194, 0x0, 0x0, 0x4, 0xf, 0x16, 0x20};
#define RCWIEnumerableCasting_value 0x194
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR CreateCCW = {0x195, 0x0, 0x0, 0x4, 0x10, 0x16, 0x20};
#define CreateCCW_value 0x195
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR CCWVariance = {0x196, 0x0, 0x0, 0x4, 0x11, 0x16, 0x20};
#define CCWVariance_value 0x196
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ObjectVariantMarshallingToNative = {0x197, 0x0, 0x0, 0x4, 0x12, 0x16, 0x20};
#define ObjectVariantMarshallingToNative_value 0x197
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GetTypeFromGUID = {0x198, 0x0, 0x0, 0x4, 0x13, 0x16, 0x20};
#define GetTypeFromGUID_value 0x198
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GetTypeFromProgID = {0x199, 0x0, 0x0, 0x4, 0x14, 0x16, 0x20};
#define GetTypeFromProgID_value 0x199
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ConvertToCallbackEtw = {0x19a, 0x0, 0x0, 0x4, 0x15, 0x16, 0x20};
#define ConvertToCallbackEtw_value 0x19a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR BeginCreateManagedReference = {0x19b, 0x0, 0x0, 0x4, 0x16, 0x16, 0x20};
#define BeginCreateManagedReference_value 0x19b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EndCreateManagedReference = {0x19c, 0x0, 0x0, 0x4, 0x17, 0x16, 0x20};
#define EndCreateManagedReference_value 0x19c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ObjectVariantMarshallingToManaged = {0x19d, 0x0, 0x0, 0x4, 0x18, 0x16, 0x20};
#define ObjectVariantMarshallingToManaged_value 0x19d

//
// Note on Generate Code from Manifest Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra 
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length 
//strings, the generated code will take the count of characters for the whole array as an input parameter. 
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate 
//GetLengthSid function to get the length.
//

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals 
//


//
// Event Enablement Bits
//

EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG Microsoft_Windows_DotNETRuntimePrivateEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG Microsoft_Windows_DotNETRuntimePrivateKeywords[14] = {0x1, 0x1, 0x80000000, 0x40000000, 0x20000000, 0x2, 0x400, 0x8, 0x0, 0x2000, 0x4000, 0x10, 0x20000, 0x20};
EXTERN_C __declspec(selectany) const UCHAR Microsoft_Windows_DotNETRuntimePrivateLevels[14] = {4, 5, 4, 0, 4, 4, 4, 4, 1, 5, 5, 5, 4, 4};
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT MICROSOFT_WINDOWS_DOTNETRUNTIME_PRIVATE_PROVIDER_Context = {0, 0, 0, 0, 0, 0, 0, 0, 14, Microsoft_Windows_DotNETRuntimePrivateEnableBits, Microsoft_Windows_DotNETRuntimePrivateKeywords, Microsoft_Windows_DotNETRuntimePrivateLevels};

EXTERN_C __declspec(selectany) REGHANDLE Microsoft_Windows_DotNETRuntimePrivateHandle = (REGHANDLE)0;

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function register the provider with ETW USER mode.

Arguments:
    ProviderId - Provider Id to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to Registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If Provider has not register RegHandle = NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterMicrosoft_Windows_DotNETRuntimePrivate
#define EventRegisterMicrosoft_Windows_DotNETRuntimePrivate() McGenEventRegister(&MICROSOFT_WINDOWS_DOTNETRUNTIME_PRIVATE_PROVIDER, McGenControlCallbackV2, &MICROSOFT_WINDOWS_DOTNETRUNTIME_PRIVATE_PROVIDER_Context, &Microsoft_Windows_DotNETRuntimePrivateHandle) 
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterMicrosoft_Windows_DotNETRuntimePrivate
#define EventUnregisterMicrosoft_Windows_DotNETRuntimePrivate() McGenEventUnregister(&Microsoft_Windows_DotNETRuntimePrivateHandle) 
#endif

//
// Enablement check macro for GCDecision
//

#define EventEnabledGCDecision() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCDecision
//
#define FireEtwGCDecision(DoCompact)\
        EventEnabledGCDecision() ?\
        CoTemplate_t(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCDecision, DoCompact)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCDecision_V1
//

#define EventEnabledGCDecision_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCDecision_V1
//
#define FireEtwGCDecision_V1(DoCompact, ClrInstanceID)\
        EventEnabledGCDecision_V1() ?\
        CoTemplate_th(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCDecision_V1, DoCompact, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCSettings
//

#define EventEnabledGCSettings() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCSettings
//
#define FireEtwGCSettings(SegmentSize, LargeObjectSegmentSize, ServerGC)\
        EventEnabledGCSettings() ?\
        CoTemplate_xxt(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCSettings, SegmentSize, LargeObjectSegmentSize, ServerGC)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCSettings_V1
//

#define EventEnabledGCSettings_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCSettings_V1
//
#define FireEtwGCSettings_V1(SegmentSize, LargeObjectSegmentSize, ServerGC, ClrInstanceID)\
        EventEnabledGCSettings_V1() ?\
        CoTemplate_xxth(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCSettings_V1, SegmentSize, LargeObjectSegmentSize, ServerGC, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCOptimized
//

#define EventEnabledGCOptimized() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for GCOptimized
//
#define FireEtwGCOptimized(DesiredAllocation, NewAllocation, GenerationNumber)\
        EventEnabledGCOptimized() ?\
        CoTemplate_xxq(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCOptimized, DesiredAllocation, NewAllocation, GenerationNumber)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCOptimized_V1
//

#define EventEnabledGCOptimized_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for GCOptimized_V1
//
#define FireEtwGCOptimized_V1(DesiredAllocation, NewAllocation, GenerationNumber, ClrInstanceID)\
        EventEnabledGCOptimized_V1() ?\
        CoTemplate_xxqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCOptimized_V1, DesiredAllocation, NewAllocation, GenerationNumber, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCPerHeapHistory
//

#define EventEnabledGCPerHeapHistory() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCPerHeapHistory
//
#define FireEtwGCPerHeapHistory()\
        EventEnabledGCPerHeapHistory() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCPerHeapHistory)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCPerHeapHistory_V1
//

#define EventEnabledGCPerHeapHistory_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCPerHeapHistory_V1
//
#define FireEtwGCPerHeapHistory_V1(ClrInstanceID)\
        EventEnabledGCPerHeapHistory_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCPerHeapHistory_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCGlobalHeapHistory
//

#define EventEnabledGCGlobalHeapHistory() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCGlobalHeapHistory
//
#define FireEtwGCGlobalHeapHistory(FinalYoungestDesired, NumHeaps, CondemnedGeneration, Gen0ReductionCount, Reason, GlobalMechanisms)\
        EventEnabledGCGlobalHeapHistory() ?\
        CoTemplate_xdqqqq(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCGlobalHeapHistory, FinalYoungestDesired, NumHeaps, CondemnedGeneration, Gen0ReductionCount, Reason, GlobalMechanisms)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCGlobalHeapHistory_V1
//

#define EventEnabledGCGlobalHeapHistory_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCGlobalHeapHistory_V1
//
#define FireEtwGCGlobalHeapHistory_V1(FinalYoungestDesired, NumHeaps, CondemnedGeneration, Gen0ReductionCount, Reason, GlobalMechanisms, ClrInstanceID)\
        EventEnabledGCGlobalHeapHistory_V1() ?\
        CoTemplate_xdqqqqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCGlobalHeapHistory_V1, FinalYoungestDesired, NumHeaps, CondemnedGeneration, Gen0ReductionCount, Reason, GlobalMechanisms, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCJoin
//

#define EventEnabledGCJoin() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for GCJoin
//
#define FireEtwGCJoin(Heap, JoinTime, JoinType)\
        EventEnabledGCJoin() ?\
        CoTemplate_qqq(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCJoin, Heap, JoinTime, JoinType)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCJoin_V1
//

#define EventEnabledGCJoin_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for GCJoin_V1
//
#define FireEtwGCJoin_V1(Heap, JoinTime, JoinType, ClrInstanceID)\
        EventEnabledGCJoin_V1() ?\
        CoTemplate_qqqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCJoin_V1, Heap, JoinTime, JoinType, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrvGCMarkStackRoots
//

#define EventEnabledPrvGCMarkStackRoots() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for PrvGCMarkStackRoots
//
#define FireEtwPrvGCMarkStackRoots(HeapNum)\
        EventEnabledPrvGCMarkStackRoots() ?\
        CoTemplate_q(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrvGCMarkStackRoots, HeapNum)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrvGCMarkStackRoots_V1
//

#define EventEnabledPrvGCMarkStackRoots_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for PrvGCMarkStackRoots_V1
//
#define FireEtwPrvGCMarkStackRoots_V1(HeapNum, ClrInstanceID)\
        EventEnabledPrvGCMarkStackRoots_V1() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrvGCMarkStackRoots_V1, HeapNum, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrvGCMarkFinalizeQueueRoots
//

#define EventEnabledPrvGCMarkFinalizeQueueRoots() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for PrvGCMarkFinalizeQueueRoots
//
#define FireEtwPrvGCMarkFinalizeQueueRoots(HeapNum)\
        EventEnabledPrvGCMarkFinalizeQueueRoots() ?\
        CoTemplate_q(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrvGCMarkFinalizeQueueRoots, HeapNum)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrvGCMarkFinalizeQueueRoots_V1
//

#define EventEnabledPrvGCMarkFinalizeQueueRoots_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for PrvGCMarkFinalizeQueueRoots_V1
//
#define FireEtwPrvGCMarkFinalizeQueueRoots_V1(HeapNum, ClrInstanceID)\
        EventEnabledPrvGCMarkFinalizeQueueRoots_V1() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrvGCMarkFinalizeQueueRoots_V1, HeapNum, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrvGCMarkHandles
//

#define EventEnabledPrvGCMarkHandles() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for PrvGCMarkHandles
//
#define FireEtwPrvGCMarkHandles(HeapNum)\
        EventEnabledPrvGCMarkHandles() ?\
        CoTemplate_q(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrvGCMarkHandles, HeapNum)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrvGCMarkHandles_V1
//

#define EventEnabledPrvGCMarkHandles_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for PrvGCMarkHandles_V1
//
#define FireEtwPrvGCMarkHandles_V1(HeapNum, ClrInstanceID)\
        EventEnabledPrvGCMarkHandles_V1() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrvGCMarkHandles_V1, HeapNum, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrvGCMarkCards
//

#define EventEnabledPrvGCMarkCards() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for PrvGCMarkCards
//
#define FireEtwPrvGCMarkCards(HeapNum)\
        EventEnabledPrvGCMarkCards() ?\
        CoTemplate_q(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrvGCMarkCards, HeapNum)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrvGCMarkCards_V1
//

#define EventEnabledPrvGCMarkCards_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for PrvGCMarkCards_V1
//
#define FireEtwPrvGCMarkCards_V1(HeapNum, ClrInstanceID)\
        EventEnabledPrvGCMarkCards_V1() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrvGCMarkCards_V1, HeapNum, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGCBegin
//

#define EventEnabledBGCBegin() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGCBegin
//
#define FireEtwBGCBegin(ClrInstanceID)\
        EventEnabledBGCBegin() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGCBegin, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGC1stNonConEnd
//

#define EventEnabledBGC1stNonConEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGC1stNonConEnd
//
#define FireEtwBGC1stNonConEnd(ClrInstanceID)\
        EventEnabledBGC1stNonConEnd() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGC1stNonConEnd, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGC1stConEnd
//

#define EventEnabledBGC1stConEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGC1stConEnd
//
#define FireEtwBGC1stConEnd(ClrInstanceID)\
        EventEnabledBGC1stConEnd() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGC1stConEnd, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGC2ndNonConBegin
//

#define EventEnabledBGC2ndNonConBegin() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGC2ndNonConBegin
//
#define FireEtwBGC2ndNonConBegin(ClrInstanceID)\
        EventEnabledBGC2ndNonConBegin() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGC2ndNonConBegin, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGC2ndNonConEnd
//

#define EventEnabledBGC2ndNonConEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGC2ndNonConEnd
//
#define FireEtwBGC2ndNonConEnd(ClrInstanceID)\
        EventEnabledBGC2ndNonConEnd() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGC2ndNonConEnd, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGC2ndConBegin
//

#define EventEnabledBGC2ndConBegin() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGC2ndConBegin
//
#define FireEtwBGC2ndConBegin(ClrInstanceID)\
        EventEnabledBGC2ndConBegin() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGC2ndConBegin, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGC2ndConEnd
//

#define EventEnabledBGC2ndConEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGC2ndConEnd
//
#define FireEtwBGC2ndConEnd(ClrInstanceID)\
        EventEnabledBGC2ndConEnd() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGC2ndConEnd, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGCPlanEnd
//

#define EventEnabledBGCPlanEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGCPlanEnd
//
#define FireEtwBGCPlanEnd(ClrInstanceID)\
        EventEnabledBGCPlanEnd() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGCPlanEnd, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGCSweepEnd
//

#define EventEnabledBGCSweepEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGCSweepEnd
//
#define FireEtwBGCSweepEnd(ClrInstanceID)\
        EventEnabledBGCSweepEnd() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGCSweepEnd, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGCDrainMark
//

#define EventEnabledBGCDrainMark() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGCDrainMark
//
#define FireEtwBGCDrainMark(Objects, ClrInstanceID)\
        EventEnabledBGCDrainMark() ?\
        CoTemplate_xh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGCDrainMark, Objects, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGCRevisit
//

#define EventEnabledBGCRevisit() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGCRevisit
//
#define FireEtwBGCRevisit(Pages, Objects, IsLarge, ClrInstanceID)\
        EventEnabledBGCRevisit() ?\
        CoTemplate_xxqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGCRevisit, Pages, Objects, IsLarge, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGCOverflow
//

#define EventEnabledBGCOverflow() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGCOverflow
//
#define FireEtwBGCOverflow(Min, Max, Objects, IsLarge, ClrInstanceID)\
        EventEnabledBGCOverflow() ?\
        CoTemplate_xxxqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGCOverflow, Min, Max, Objects, IsLarge, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGCAllocWaitBegin
//

#define EventEnabledBGCAllocWaitBegin() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGCAllocWaitBegin
//
#define FireEtwBGCAllocWaitBegin(Reason, ClrInstanceID)\
        EventEnabledBGCAllocWaitBegin() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGCAllocWaitBegin, Reason, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BGCAllocWaitEnd
//

#define EventEnabledBGCAllocWaitEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for BGCAllocWaitEnd
//
#define FireEtwBGCAllocWaitEnd(Reason, ClrInstanceID)\
        EventEnabledBGCAllocWaitEnd() ?\
        CoTemplate_qh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BGCAllocWaitEnd, Reason, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCFullNotify
//

#define EventEnabledGCFullNotify() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCFullNotify
//
#define FireEtwGCFullNotify(GenNumber, IsAlloc)\
        EventEnabledGCFullNotify() ?\
        CoTemplate_qq(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCFullNotify, GenNumber, IsAlloc)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GCFullNotify_V1
//

#define EventEnabledGCFullNotify_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for GCFullNotify_V1
//
#define FireEtwGCFullNotify_V1(GenNumber, IsAlloc, ClrInstanceID)\
        EventEnabledGCFullNotify_V1() ?\
        CoTemplate_qqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &GCFullNotify_V1, GenNumber, IsAlloc, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EEStartupStart
//

#define EventEnabledEEStartupStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EEStartupStart
//
#define FireEtwEEStartupStart()\
        EventEnabledEEStartupStart() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &EEStartupStart)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EEStartupStart_V1
//

#define EventEnabledEEStartupStart_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EEStartupStart_V1
//
#define FireEtwEEStartupStart_V1(ClrInstanceID)\
        EventEnabledEEStartupStart_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &EEStartupStart_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EEStartupEnd
//

#define EventEnabledEEStartupEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EEStartupEnd
//
#define FireEtwEEStartupEnd()\
        EventEnabledEEStartupEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &EEStartupEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EEStartupEnd_V1
//

#define EventEnabledEEStartupEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EEStartupEnd_V1
//
#define FireEtwEEStartupEnd_V1(ClrInstanceID)\
        EventEnabledEEStartupEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &EEStartupEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EEConfigSetup
//

#define EventEnabledEEConfigSetup() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EEConfigSetup
//
#define FireEtwEEConfigSetup()\
        EventEnabledEEConfigSetup() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &EEConfigSetup)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EEConfigSetup_V1
//

#define EventEnabledEEConfigSetup_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EEConfigSetup_V1
//
#define FireEtwEEConfigSetup_V1(ClrInstanceID)\
        EventEnabledEEConfigSetup_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &EEConfigSetup_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EEConfigSetupEnd
//

#define EventEnabledEEConfigSetupEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EEConfigSetupEnd
//
#define FireEtwEEConfigSetupEnd()\
        EventEnabledEEConfigSetupEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &EEConfigSetupEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EEConfigSetupEnd_V1
//

#define EventEnabledEEConfigSetupEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EEConfigSetupEnd_V1
//
#define FireEtwEEConfigSetupEnd_V1(ClrInstanceID)\
        EventEnabledEEConfigSetupEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &EEConfigSetupEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LdSysBases
//

#define EventEnabledLdSysBases() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for LdSysBases
//
#define FireEtwLdSysBases()\
        EventEnabledLdSysBases() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &LdSysBases)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LdSysBases_V1
//

#define EventEnabledLdSysBases_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for LdSysBases_V1
//
#define FireEtwLdSysBases_V1(ClrInstanceID)\
        EventEnabledLdSysBases_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &LdSysBases_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LdSysBasesEnd
//

#define EventEnabledLdSysBasesEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for LdSysBasesEnd
//
#define FireEtwLdSysBasesEnd()\
        EventEnabledLdSysBasesEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &LdSysBasesEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LdSysBasesEnd_V1
//

#define EventEnabledLdSysBasesEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for LdSysBasesEnd_V1
//
#define FireEtwLdSysBasesEnd_V1(ClrInstanceID)\
        EventEnabledLdSysBasesEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &LdSysBasesEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ExecExe
//

#define EventEnabledExecExe() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ExecExe
//
#define FireEtwExecExe()\
        EventEnabledExecExe() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &ExecExe)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ExecExe_V1
//

#define EventEnabledExecExe_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ExecExe_V1
//
#define FireEtwExecExe_V1(ClrInstanceID)\
        EventEnabledExecExe_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &ExecExe_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ExecExeEnd
//

#define EventEnabledExecExeEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ExecExeEnd
//
#define FireEtwExecExeEnd()\
        EventEnabledExecExeEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &ExecExeEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ExecExeEnd_V1
//

#define EventEnabledExecExeEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ExecExeEnd_V1
//
#define FireEtwExecExeEnd_V1(ClrInstanceID)\
        EventEnabledExecExeEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &ExecExeEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for Main
//

#define EventEnabledMain() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for Main
//
#define FireEtwMain()\
        EventEnabledMain() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &Main)\
        : ERROR_SUCCESS\

//
// Enablement check macro for Main_V1
//

#define EventEnabledMain_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for Main_V1
//
#define FireEtwMain_V1(ClrInstanceID)\
        EventEnabledMain_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &Main_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MainEnd
//

#define EventEnabledMainEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for MainEnd
//
#define FireEtwMainEnd()\
        EventEnabledMainEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &MainEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MainEnd_V1
//

#define EventEnabledMainEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for MainEnd_V1
//
#define FireEtwMainEnd_V1(ClrInstanceID)\
        EventEnabledMainEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &MainEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ApplyPolicyStart
//

#define EventEnabledApplyPolicyStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ApplyPolicyStart
//
#define FireEtwApplyPolicyStart()\
        EventEnabledApplyPolicyStart() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &ApplyPolicyStart)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ApplyPolicyStart_V1
//

#define EventEnabledApplyPolicyStart_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ApplyPolicyStart_V1
//
#define FireEtwApplyPolicyStart_V1(ClrInstanceID)\
        EventEnabledApplyPolicyStart_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &ApplyPolicyStart_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ApplyPolicyEnd
//

#define EventEnabledApplyPolicyEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ApplyPolicyEnd
//
#define FireEtwApplyPolicyEnd()\
        EventEnabledApplyPolicyEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &ApplyPolicyEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ApplyPolicyEnd_V1
//

#define EventEnabledApplyPolicyEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ApplyPolicyEnd_V1
//
#define FireEtwApplyPolicyEnd_V1(ClrInstanceID)\
        EventEnabledApplyPolicyEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &ApplyPolicyEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LdLibShFolder
//

#define EventEnabledLdLibShFolder() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for LdLibShFolder
//
#define FireEtwLdLibShFolder()\
        EventEnabledLdLibShFolder() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &LdLibShFolder)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LdLibShFolder_V1
//

#define EventEnabledLdLibShFolder_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for LdLibShFolder_V1
//
#define FireEtwLdLibShFolder_V1(ClrInstanceID)\
        EventEnabledLdLibShFolder_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &LdLibShFolder_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LdLibShFolderEnd
//

#define EventEnabledLdLibShFolderEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for LdLibShFolderEnd
//
#define FireEtwLdLibShFolderEnd()\
        EventEnabledLdLibShFolderEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &LdLibShFolderEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LdLibShFolderEnd_V1
//

#define EventEnabledLdLibShFolderEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for LdLibShFolderEnd_V1
//
#define FireEtwLdLibShFolderEnd_V1(ClrInstanceID)\
        EventEnabledLdLibShFolderEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &LdLibShFolderEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrestubWorker
//

#define EventEnabledPrestubWorker() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for PrestubWorker
//
#define FireEtwPrestubWorker()\
        EventEnabledPrestubWorker() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrestubWorker)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrestubWorker_V1
//

#define EventEnabledPrestubWorker_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for PrestubWorker_V1
//
#define FireEtwPrestubWorker_V1(ClrInstanceID)\
        EventEnabledPrestubWorker_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrestubWorker_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrestubWorkerEnd
//

#define EventEnabledPrestubWorkerEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for PrestubWorkerEnd
//
#define FireEtwPrestubWorkerEnd()\
        EventEnabledPrestubWorkerEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrestubWorkerEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrestubWorkerEnd_V1
//

#define EventEnabledPrestubWorkerEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for PrestubWorkerEnd_V1
//
#define FireEtwPrestubWorkerEnd_V1(ClrInstanceID)\
        EventEnabledPrestubWorkerEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrestubWorkerEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GetInstallationStart
//

#define EventEnabledGetInstallationStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for GetInstallationStart
//
#define FireEtwGetInstallationStart()\
        EventEnabledGetInstallationStart() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &GetInstallationStart)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GetInstallationStart_V1
//

#define EventEnabledGetInstallationStart_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for GetInstallationStart_V1
//
#define FireEtwGetInstallationStart_V1(ClrInstanceID)\
        EventEnabledGetInstallationStart_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &GetInstallationStart_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GetInstallationEnd
//

#define EventEnabledGetInstallationEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for GetInstallationEnd
//
#define FireEtwGetInstallationEnd()\
        EventEnabledGetInstallationEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &GetInstallationEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GetInstallationEnd_V1
//

#define EventEnabledGetInstallationEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for GetInstallationEnd_V1
//
#define FireEtwGetInstallationEnd_V1(ClrInstanceID)\
        EventEnabledGetInstallationEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &GetInstallationEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpenHModule
//

#define EventEnabledOpenHModule() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for OpenHModule
//
#define FireEtwOpenHModule()\
        EventEnabledOpenHModule() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &OpenHModule)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpenHModule_V1
//

#define EventEnabledOpenHModule_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for OpenHModule_V1
//
#define FireEtwOpenHModule_V1(ClrInstanceID)\
        EventEnabledOpenHModule_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &OpenHModule_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpenHModuleEnd
//

#define EventEnabledOpenHModuleEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for OpenHModuleEnd
//
#define FireEtwOpenHModuleEnd()\
        EventEnabledOpenHModuleEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &OpenHModuleEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpenHModuleEnd_V1
//

#define EventEnabledOpenHModuleEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for OpenHModuleEnd_V1
//
#define FireEtwOpenHModuleEnd_V1(ClrInstanceID)\
        EventEnabledOpenHModuleEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &OpenHModuleEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ExplicitBindStart
//

#define EventEnabledExplicitBindStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ExplicitBindStart
//
#define FireEtwExplicitBindStart()\
        EventEnabledExplicitBindStart() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &ExplicitBindStart)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ExplicitBindStart_V1
//

#define EventEnabledExplicitBindStart_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ExplicitBindStart_V1
//
#define FireEtwExplicitBindStart_V1(ClrInstanceID)\
        EventEnabledExplicitBindStart_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &ExplicitBindStart_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ExplicitBindEnd
//

#define EventEnabledExplicitBindEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ExplicitBindEnd
//
#define FireEtwExplicitBindEnd()\
        EventEnabledExplicitBindEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &ExplicitBindEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ExplicitBindEnd_V1
//

#define EventEnabledExplicitBindEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ExplicitBindEnd_V1
//
#define FireEtwExplicitBindEnd_V1(ClrInstanceID)\
        EventEnabledExplicitBindEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &ExplicitBindEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ParseXml
//

#define EventEnabledParseXml() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ParseXml
//
#define FireEtwParseXml()\
        EventEnabledParseXml() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &ParseXml)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ParseXml_V1
//

#define EventEnabledParseXml_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ParseXml_V1
//
#define FireEtwParseXml_V1(ClrInstanceID)\
        EventEnabledParseXml_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &ParseXml_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ParseXmlEnd
//

#define EventEnabledParseXmlEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ParseXmlEnd
//
#define FireEtwParseXmlEnd()\
        EventEnabledParseXmlEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &ParseXmlEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ParseXmlEnd_V1
//

#define EventEnabledParseXmlEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ParseXmlEnd_V1
//
#define FireEtwParseXmlEnd_V1(ClrInstanceID)\
        EventEnabledParseXmlEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &ParseXmlEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for InitDefaultDomain
//

#define EventEnabledInitDefaultDomain() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for InitDefaultDomain
//
#define FireEtwInitDefaultDomain()\
        EventEnabledInitDefaultDomain() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &InitDefaultDomain)\
        : ERROR_SUCCESS\

//
// Enablement check macro for InitDefaultDomain_V1
//

#define EventEnabledInitDefaultDomain_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for InitDefaultDomain_V1
//
#define FireEtwInitDefaultDomain_V1(ClrInstanceID)\
        EventEnabledInitDefaultDomain_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &InitDefaultDomain_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for InitDefaultDomainEnd
//

#define EventEnabledInitDefaultDomainEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for InitDefaultDomainEnd
//
#define FireEtwInitDefaultDomainEnd()\
        EventEnabledInitDefaultDomainEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &InitDefaultDomainEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for InitDefaultDomainEnd_V1
//

#define EventEnabledInitDefaultDomainEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for InitDefaultDomainEnd_V1
//
#define FireEtwInitDefaultDomainEnd_V1(ClrInstanceID)\
        EventEnabledInitDefaultDomainEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &InitDefaultDomainEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for InitSecurity
//

#define EventEnabledInitSecurity() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for InitSecurity
//
#define FireEtwInitSecurity()\
        EventEnabledInitSecurity() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &InitSecurity)\
        : ERROR_SUCCESS\

//
// Enablement check macro for InitSecurity_V1
//

#define EventEnabledInitSecurity_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for InitSecurity_V1
//
#define FireEtwInitSecurity_V1(ClrInstanceID)\
        EventEnabledInitSecurity_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &InitSecurity_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for InitSecurityEnd
//

#define EventEnabledInitSecurityEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for InitSecurityEnd
//
#define FireEtwInitSecurityEnd()\
        EventEnabledInitSecurityEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &InitSecurityEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for InitSecurityEnd_V1
//

#define EventEnabledInitSecurityEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for InitSecurityEnd_V1
//
#define FireEtwInitSecurityEnd_V1(ClrInstanceID)\
        EventEnabledInitSecurityEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &InitSecurityEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AllowBindingRedirs
//

#define EventEnabledAllowBindingRedirs() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for AllowBindingRedirs
//
#define FireEtwAllowBindingRedirs()\
        EventEnabledAllowBindingRedirs() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &AllowBindingRedirs)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AllowBindingRedirs_V1
//

#define EventEnabledAllowBindingRedirs_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for AllowBindingRedirs_V1
//
#define FireEtwAllowBindingRedirs_V1(ClrInstanceID)\
        EventEnabledAllowBindingRedirs_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &AllowBindingRedirs_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AllowBindingRedirsEnd
//

#define EventEnabledAllowBindingRedirsEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for AllowBindingRedirsEnd
//
#define FireEtwAllowBindingRedirsEnd()\
        EventEnabledAllowBindingRedirsEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &AllowBindingRedirsEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AllowBindingRedirsEnd_V1
//

#define EventEnabledAllowBindingRedirsEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for AllowBindingRedirsEnd_V1
//
#define FireEtwAllowBindingRedirsEnd_V1(ClrInstanceID)\
        EventEnabledAllowBindingRedirsEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &AllowBindingRedirsEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EEConfigSync
//

#define EventEnabledEEConfigSync() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EEConfigSync
//
#define FireEtwEEConfigSync()\
        EventEnabledEEConfigSync() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &EEConfigSync)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EEConfigSync_V1
//

#define EventEnabledEEConfigSync_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EEConfigSync_V1
//
#define FireEtwEEConfigSync_V1(ClrInstanceID)\
        EventEnabledEEConfigSync_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &EEConfigSync_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EEConfigSyncEnd
//

#define EventEnabledEEConfigSyncEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EEConfigSyncEnd
//
#define FireEtwEEConfigSyncEnd()\
        EventEnabledEEConfigSyncEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &EEConfigSyncEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EEConfigSyncEnd_V1
//

#define EventEnabledEEConfigSyncEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EEConfigSyncEnd_V1
//
#define FireEtwEEConfigSyncEnd_V1(ClrInstanceID)\
        EventEnabledEEConfigSyncEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &EEConfigSyncEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionBinding
//

#define EventEnabledFusionBinding() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FusionBinding
//
#define FireEtwFusionBinding()\
        EventEnabledFusionBinding() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionBinding)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionBinding_V1
//

#define EventEnabledFusionBinding_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FusionBinding_V1
//
#define FireEtwFusionBinding_V1(ClrInstanceID)\
        EventEnabledFusionBinding_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionBinding_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionBindingEnd
//

#define EventEnabledFusionBindingEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FusionBindingEnd
//
#define FireEtwFusionBindingEnd()\
        EventEnabledFusionBindingEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionBindingEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionBindingEnd_V1
//

#define EventEnabledFusionBindingEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FusionBindingEnd_V1
//
#define FireEtwFusionBindingEnd_V1(ClrInstanceID)\
        EventEnabledFusionBindingEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionBindingEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LoaderCatchCall
//

#define EventEnabledLoaderCatchCall() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for LoaderCatchCall
//
#define FireEtwLoaderCatchCall()\
        EventEnabledLoaderCatchCall() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &LoaderCatchCall)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LoaderCatchCall_V1
//

#define EventEnabledLoaderCatchCall_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for LoaderCatchCall_V1
//
#define FireEtwLoaderCatchCall_V1(ClrInstanceID)\
        EventEnabledLoaderCatchCall_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &LoaderCatchCall_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LoaderCatchCallEnd
//

#define EventEnabledLoaderCatchCallEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for LoaderCatchCallEnd
//
#define FireEtwLoaderCatchCallEnd()\
        EventEnabledLoaderCatchCallEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &LoaderCatchCallEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LoaderCatchCallEnd_V1
//

#define EventEnabledLoaderCatchCallEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for LoaderCatchCallEnd_V1
//
#define FireEtwLoaderCatchCallEnd_V1(ClrInstanceID)\
        EventEnabledLoaderCatchCallEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &LoaderCatchCallEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionInit
//

#define EventEnabledFusionInit() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FusionInit
//
#define FireEtwFusionInit()\
        EventEnabledFusionInit() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionInit)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionInit_V1
//

#define EventEnabledFusionInit_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FusionInit_V1
//
#define FireEtwFusionInit_V1(ClrInstanceID)\
        EventEnabledFusionInit_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionInit_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionInitEnd
//

#define EventEnabledFusionInitEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FusionInitEnd
//
#define FireEtwFusionInitEnd()\
        EventEnabledFusionInitEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionInitEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionInitEnd_V1
//

#define EventEnabledFusionInitEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FusionInitEnd_V1
//
#define FireEtwFusionInitEnd_V1(ClrInstanceID)\
        EventEnabledFusionInitEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionInitEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionAppCtx
//

#define EventEnabledFusionAppCtx() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FusionAppCtx
//
#define FireEtwFusionAppCtx()\
        EventEnabledFusionAppCtx() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionAppCtx)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionAppCtx_V1
//

#define EventEnabledFusionAppCtx_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FusionAppCtx_V1
//
#define FireEtwFusionAppCtx_V1(ClrInstanceID)\
        EventEnabledFusionAppCtx_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionAppCtx_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionAppCtxEnd
//

#define EventEnabledFusionAppCtxEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FusionAppCtxEnd
//
#define FireEtwFusionAppCtxEnd()\
        EventEnabledFusionAppCtxEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionAppCtxEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionAppCtxEnd_V1
//

#define EventEnabledFusionAppCtxEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FusionAppCtxEnd_V1
//
#define FireEtwFusionAppCtxEnd_V1(ClrInstanceID)\
        EventEnabledFusionAppCtxEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionAppCtxEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for Fusion2EE
//

#define EventEnabledFusion2EE() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for Fusion2EE
//
#define FireEtwFusion2EE()\
        EventEnabledFusion2EE() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &Fusion2EE)\
        : ERROR_SUCCESS\

//
// Enablement check macro for Fusion2EE_V1
//

#define EventEnabledFusion2EE_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for Fusion2EE_V1
//
#define FireEtwFusion2EE_V1(ClrInstanceID)\
        EventEnabledFusion2EE_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &Fusion2EE_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for Fusion2EEEnd
//

#define EventEnabledFusion2EEEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for Fusion2EEEnd
//
#define FireEtwFusion2EEEnd()\
        EventEnabledFusion2EEEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &Fusion2EEEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for Fusion2EEEnd_V1
//

#define EventEnabledFusion2EEEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for Fusion2EEEnd_V1
//
#define FireEtwFusion2EEEnd_V1(ClrInstanceID)\
        EventEnabledFusion2EEEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &Fusion2EEEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SecurityCatchCall
//

#define EventEnabledSecurityCatchCall() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SecurityCatchCall
//
#define FireEtwSecurityCatchCall()\
        EventEnabledSecurityCatchCall() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &SecurityCatchCall)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SecurityCatchCall_V1
//

#define EventEnabledSecurityCatchCall_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SecurityCatchCall_V1
//
#define FireEtwSecurityCatchCall_V1(ClrInstanceID)\
        EventEnabledSecurityCatchCall_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &SecurityCatchCall_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SecurityCatchCallEnd
//

#define EventEnabledSecurityCatchCallEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SecurityCatchCallEnd
//
#define FireEtwSecurityCatchCallEnd()\
        EventEnabledSecurityCatchCallEnd() ?\
        CoTemplateEventDescriptor(Microsoft_Windows_DotNETRuntimePrivateHandle, &SecurityCatchCallEnd)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SecurityCatchCallEnd_V1
//

#define EventEnabledSecurityCatchCallEnd_V1() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SecurityCatchCallEnd_V1
//
#define FireEtwSecurityCatchCallEnd_V1(ClrInstanceID)\
        EventEnabledSecurityCatchCallEnd_V1() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &SecurityCatchCallEnd_V1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for CLRStackWalkPrivate
//

#define EventEnabledCLRStackWalkPrivate() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000008) != 0)

//
// Event Macro for CLRStackWalkPrivate
//
#define FireEtwCLRStackWalkPrivate(ClrInstanceID, Reserved1, Reserved2, FrameCount, Stack)\
        EventEnabledCLRStackWalkPrivate() ?\
        CoTemplate_hccqP2(Microsoft_Windows_DotNETRuntimePrivateHandle, &CLRStackWalkPrivate, ClrInstanceID, Reserved1, Reserved2, FrameCount, Stack)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleRangeLoadPrivate
//

#define EventEnabledModuleRangeLoadPrivate() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for ModuleRangeLoadPrivate
//
#define FireEtwModuleRangeLoadPrivate(ClrInstanceID, ModuleID, RangeBegin, RangeSize, RangeType, IBCType, SectionType)\
        EventEnabledModuleRangeLoadPrivate() ?\
        CoTemplate_hxqqcch(Microsoft_Windows_DotNETRuntimePrivateHandle, &ModuleRangeLoadPrivate, ClrInstanceID, ModuleID, RangeBegin, RangeSize, RangeType, IBCType, SectionType)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BindingPolicyPhaseStart
//

#define EventEnabledBindingPolicyPhaseStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for BindingPolicyPhaseStart
//
#define FireEtwBindingPolicyPhaseStart(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledBindingPolicyPhaseStart() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BindingPolicyPhaseStart, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BindingPolicyPhaseEnd
//

#define EventEnabledBindingPolicyPhaseEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for BindingPolicyPhaseEnd
//
#define FireEtwBindingPolicyPhaseEnd(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledBindingPolicyPhaseEnd() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BindingPolicyPhaseEnd, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BindingNgenPhaseStart
//

#define EventEnabledBindingNgenPhaseStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for BindingNgenPhaseStart
//
#define FireEtwBindingNgenPhaseStart(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledBindingNgenPhaseStart() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BindingNgenPhaseStart, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BindingNgenPhaseEnd
//

#define EventEnabledBindingNgenPhaseEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for BindingNgenPhaseEnd
//
#define FireEtwBindingNgenPhaseEnd(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledBindingNgenPhaseEnd() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BindingNgenPhaseEnd, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BindingLookupAndProbingPhaseStart
//

#define EventEnabledBindingLookupAndProbingPhaseStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for BindingLookupAndProbingPhaseStart
//
#define FireEtwBindingLookupAndProbingPhaseStart(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledBindingLookupAndProbingPhaseStart() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BindingLookupAndProbingPhaseStart, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BindingLookupAndProbingPhaseEnd
//

#define EventEnabledBindingLookupAndProbingPhaseEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for BindingLookupAndProbingPhaseEnd
//
#define FireEtwBindingLookupAndProbingPhaseEnd(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledBindingLookupAndProbingPhaseEnd() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BindingLookupAndProbingPhaseEnd, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LoaderPhaseStart
//

#define EventEnabledLoaderPhaseStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for LoaderPhaseStart
//
#define FireEtwLoaderPhaseStart(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledLoaderPhaseStart() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &LoaderPhaseStart, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LoaderPhaseEnd
//

#define EventEnabledLoaderPhaseEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for LoaderPhaseEnd
//
#define FireEtwLoaderPhaseEnd(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledLoaderPhaseEnd() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &LoaderPhaseEnd, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BindingPhaseStart
//

#define EventEnabledBindingPhaseStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for BindingPhaseStart
//
#define FireEtwBindingPhaseStart(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledBindingPhaseStart() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BindingPhaseStart, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BindingPhaseEnd
//

#define EventEnabledBindingPhaseEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for BindingPhaseEnd
//
#define FireEtwBindingPhaseEnd(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledBindingPhaseEnd() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BindingPhaseEnd, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BindingDownloadPhaseStart
//

#define EventEnabledBindingDownloadPhaseStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for BindingDownloadPhaseStart
//
#define FireEtwBindingDownloadPhaseStart(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledBindingDownloadPhaseStart() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BindingDownloadPhaseStart, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BindingDownloadPhaseEnd
//

#define EventEnabledBindingDownloadPhaseEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for BindingDownloadPhaseEnd
//
#define FireEtwBindingDownloadPhaseEnd(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledBindingDownloadPhaseEnd() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &BindingDownloadPhaseEnd, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LoaderAssemblyInitPhaseStart
//

#define EventEnabledLoaderAssemblyInitPhaseStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for LoaderAssemblyInitPhaseStart
//
#define FireEtwLoaderAssemblyInitPhaseStart(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledLoaderAssemblyInitPhaseStart() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &LoaderAssemblyInitPhaseStart, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LoaderAssemblyInitPhaseEnd
//

#define EventEnabledLoaderAssemblyInitPhaseEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for LoaderAssemblyInitPhaseEnd
//
#define FireEtwLoaderAssemblyInitPhaseEnd(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledLoaderAssemblyInitPhaseEnd() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &LoaderAssemblyInitPhaseEnd, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LoaderMappingPhaseStart
//

#define EventEnabledLoaderMappingPhaseStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for LoaderMappingPhaseStart
//
#define FireEtwLoaderMappingPhaseStart(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledLoaderMappingPhaseStart() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &LoaderMappingPhaseStart, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LoaderMappingPhaseEnd
//

#define EventEnabledLoaderMappingPhaseEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for LoaderMappingPhaseEnd
//
#define FireEtwLoaderMappingPhaseEnd(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledLoaderMappingPhaseEnd() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &LoaderMappingPhaseEnd, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LoaderDeliverEventsPhaseStart
//

#define EventEnabledLoaderDeliverEventsPhaseStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for LoaderDeliverEventsPhaseStart
//
#define FireEtwLoaderDeliverEventsPhaseStart(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledLoaderDeliverEventsPhaseStart() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &LoaderDeliverEventsPhaseStart, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LoaderDeliverEventsPhaseEnd
//

#define EventEnabledLoaderDeliverEventsPhaseEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for LoaderDeliverEventsPhaseEnd
//
#define FireEtwLoaderDeliverEventsPhaseEnd(AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        EventEnabledLoaderDeliverEventsPhaseEnd() ?\
        CoTemplate_qqqqzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &LoaderDeliverEventsPhaseEnd, AppDomainID, LoadContextID, FromLoaderCache, DynamicLoad, AssemblyCodebase, AssemblyName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EvidenceGenerated
//

#define EventEnabledEvidenceGenerated() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for EvidenceGenerated
//
#define FireEtwEvidenceGenerated(Type, AppDomain, ILImage, ClrInstanceID)\
        EventEnabledEvidenceGenerated() ?\
        CoTemplate_qqzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &EvidenceGenerated, Type, AppDomain, ILImage, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleTransparencyComputationStart
//

#define EventEnabledModuleTransparencyComputationStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for ModuleTransparencyComputationStart
//
#define FireEtwModuleTransparencyComputationStart(Module, AppDomainID, ClrInstanceID)\
        EventEnabledModuleTransparencyComputationStart() ?\
        CoTemplate_zqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &ModuleTransparencyComputationStart, Module, AppDomainID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ModuleTransparencyComputationEnd
//

#define EventEnabledModuleTransparencyComputationEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for ModuleTransparencyComputationEnd
//
#define FireEtwModuleTransparencyComputationEnd(Module, AppDomainID, IsAllCritical, IsAllTransparent, IsTreatAsSafe, IsOpportunisticallyCritical, SecurityRuleSet, ClrInstanceID)\
        EventEnabledModuleTransparencyComputationEnd() ?\
        CoTemplate_zqttttqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &ModuleTransparencyComputationEnd, Module, AppDomainID, IsAllCritical, IsAllTransparent, IsTreatAsSafe, IsOpportunisticallyCritical, SecurityRuleSet, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for TypeTransparencyComputationStart
//

#define EventEnabledTypeTransparencyComputationStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for TypeTransparencyComputationStart
//
#define FireEtwTypeTransparencyComputationStart(Type, Module, AppDomainID, ClrInstanceID)\
        EventEnabledTypeTransparencyComputationStart() ?\
        CoTemplate_zzqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &TypeTransparencyComputationStart, Type, Module, AppDomainID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for TypeTransparencyComputationEnd
//

#define EventEnabledTypeTransparencyComputationEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for TypeTransparencyComputationEnd
//
#define FireEtwTypeTransparencyComputationEnd(Type, Module, AppDomainID, IsAllCritical, IsAllTransparent, IsCritical, IsTreatAsSafe, ClrInstanceID)\
        EventEnabledTypeTransparencyComputationEnd() ?\
        CoTemplate_zzqtttth(Microsoft_Windows_DotNETRuntimePrivateHandle, &TypeTransparencyComputationEnd, Type, Module, AppDomainID, IsAllCritical, IsAllTransparent, IsCritical, IsTreatAsSafe, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodTransparencyComputationStart
//

#define EventEnabledMethodTransparencyComputationStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for MethodTransparencyComputationStart
//
#define FireEtwMethodTransparencyComputationStart(Method, Module, AppDomainID, ClrInstanceID)\
        EventEnabledMethodTransparencyComputationStart() ?\
        CoTemplate_zzqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &MethodTransparencyComputationStart, Method, Module, AppDomainID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MethodTransparencyComputationEnd
//

#define EventEnabledMethodTransparencyComputationEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for MethodTransparencyComputationEnd
//
#define FireEtwMethodTransparencyComputationEnd(Method, Module, AppDomainID, IsCritical, IsTreatAsSafe, ClrInstanceID)\
        EventEnabledMethodTransparencyComputationEnd() ?\
        CoTemplate_zzqtth(Microsoft_Windows_DotNETRuntimePrivateHandle, &MethodTransparencyComputationEnd, Method, Module, AppDomainID, IsCritical, IsTreatAsSafe, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FieldTransparencyComputationStart
//

#define EventEnabledFieldTransparencyComputationStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for FieldTransparencyComputationStart
//
#define FireEtwFieldTransparencyComputationStart(Field, Module, AppDomainID, ClrInstanceID)\
        EventEnabledFieldTransparencyComputationStart() ?\
        CoTemplate_zzqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &FieldTransparencyComputationStart, Field, Module, AppDomainID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FieldTransparencyComputationEnd
//

#define EventEnabledFieldTransparencyComputationEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for FieldTransparencyComputationEnd
//
#define FireEtwFieldTransparencyComputationEnd(Field, Module, AppDomainID, IsCritical, IsTreatAsSafe, ClrInstanceID)\
        EventEnabledFieldTransparencyComputationEnd() ?\
        CoTemplate_zzqtth(Microsoft_Windows_DotNETRuntimePrivateHandle, &FieldTransparencyComputationEnd, Field, Module, AppDomainID, IsCritical, IsTreatAsSafe, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for TokenTransparencyComputationStart
//

#define EventEnabledTokenTransparencyComputationStart() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for TokenTransparencyComputationStart
//
#define FireEtwTokenTransparencyComputationStart(Token, Module, AppDomainID, ClrInstanceID)\
        EventEnabledTokenTransparencyComputationStart() ?\
        CoTemplate_qzqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &TokenTransparencyComputationStart, Token, Module, AppDomainID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for TokenTransparencyComputationEnd
//

#define EventEnabledTokenTransparencyComputationEnd() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for TokenTransparencyComputationEnd
//
#define FireEtwTokenTransparencyComputationEnd(Token, Module, AppDomainID, IsCritical, IsTreatAsSafe, ClrInstanceID)\
        EventEnabledTokenTransparencyComputationEnd() ?\
        CoTemplate_qzqtth(Microsoft_Windows_DotNETRuntimePrivateHandle, &TokenTransparencyComputationEnd, Token, Module, AppDomainID, IsCritical, IsTreatAsSafe, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for NgenBindEvent
//

#define EventEnabledNgenBindEvent() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000080) != 0)

//
// Event Macro for NgenBindEvent
//
#define FireEtwNgenBindEvent(ClrInstanceID, BindingID, ReasonCode, AssemblyName)\
        EventEnabledNgenBindEvent() ?\
        CoTemplate_hxqz(Microsoft_Windows_DotNETRuntimePrivateHandle, &NgenBindEvent, ClrInstanceID, BindingID, ReasonCode, AssemblyName)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FailFast
//

#define EventEnabledFailFast() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000100) != 0)

//
// Event Macro for FailFast
//
#define FireEtwFailFast(FailFastUserMessage, FailedEIP, OSExitCode, ClrExitCode, ClrInstanceID)\
        EventEnabledFailFast() ?\
        CoTemplate_zpqqh(Microsoft_Windows_DotNETRuntimePrivateHandle, &FailFast, FailFastUserMessage, FailedEIP, OSExitCode, ClrExitCode, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrvFinalizeObject
//

#define EventEnabledPrvFinalizeObject() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for PrvFinalizeObject
//
#define FireEtwPrvFinalizeObject(TypeID, ObjectID, ClrInstanceID, TypeName)\
        EventEnabledPrvFinalizeObject() ?\
        CoTemplate_pphz(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrvFinalizeObject, TypeID, ObjectID, ClrInstanceID, TypeName)\
        : ERROR_SUCCESS\

//
// Enablement check macro for CCWRefCountChange
//

#define EventEnabledCCWRefCountChange() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for CCWRefCountChange
//
#define FireEtwCCWRefCountChange(HandleID, ObjectID, COMInterfacePointer, NewRefCount, AppDomainID, ClassName, NameSpace, Operation, ClrInstanceID)\
        EventEnabledCCWRefCountChange() ?\
        CoTemplate_pppqxsszh(Microsoft_Windows_DotNETRuntimePrivateHandle, &CCWRefCountChange, HandleID, ObjectID, COMInterfacePointer, NewRefCount, AppDomainID, ClassName, NameSpace, Operation, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrvSetGCHandle
//

#define EventEnabledPrvSetGCHandle() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000400) != 0)

//
// Event Macro for PrvSetGCHandle
//
#define FireEtwPrvSetGCHandle(HandleID, ObjectID, Kind, Generation, AppDomainID, ClrInstanceID)\
        EventEnabledPrvSetGCHandle() ?\
        CoTemplate_ppqqxh(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrvSetGCHandle, HandleID, ObjectID, Kind, Generation, AppDomainID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PrvDestroyGCHandle
//

#define EventEnabledPrvDestroyGCHandle() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000400) != 0)

//
// Event Macro for PrvDestroyGCHandle
//
#define FireEtwPrvDestroyGCHandle(HandleID, ClrInstanceID)\
        EventEnabledPrvDestroyGCHandle() ?\
        CoTemplate_ph(Microsoft_Windows_DotNETRuntimePrivateHandle, &PrvDestroyGCHandle, HandleID, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionMessageEvent
//

#define EventEnabledFusionMessageEvent() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for FusionMessageEvent
//
#define FireEtwFusionMessageEvent(ClrInstanceID, Prepend, Message)\
        EventEnabledFusionMessageEvent() ?\
        CoTemplate_htz(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionMessageEvent, ClrInstanceID, Prepend, Message)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FusionErrorCodeEvent
//

#define EventEnabledFusionErrorCodeEvent() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for FusionErrorCodeEvent
//
#define FireEtwFusionErrorCodeEvent(ClrInstanceID, Category, ErrorCode)\
        EventEnabledFusionErrorCodeEvent() ?\
        CoTemplate_hqq(Microsoft_Windows_DotNETRuntimePrivateHandle, &FusionErrorCodeEvent, ClrInstanceID, Category, ErrorCode)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PinPlugAtGCTime
//

#define EventEnabledPinPlugAtGCTime() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for PinPlugAtGCTime
//
#define FireEtwPinPlugAtGCTime(PlugStart, PlugEnd, GapBeforeSize, ClrInstanceID)\
        EventEnabledPinPlugAtGCTime() ?\
        CoTemplate_ppph(Microsoft_Windows_DotNETRuntimePrivateHandle, &PinPlugAtGCTime, PlugStart, PlugEnd, GapBeforeSize, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AllocRequest
//

#define EventEnabledAllocRequest() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00000800) != 0)

//
// Event Macro for AllocRequest
//
#define FireEtwAllocRequest(LoaderHeapPtr, MemoryAddress, RequestSize, Unused1, Unused2, ClrInstanceID)\
        EventEnabledAllocRequest() ?\
        CoTemplate_ppqqxh(Microsoft_Windows_DotNETRuntimePrivateHandle, &AllocRequest, LoaderHeapPtr, MemoryAddress, RequestSize, Unused1, Unused2, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MulticoreJit
//

#define EventEnabledMulticoreJit() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00001000) != 0)

//
// Event Macro for MulticoreJit
//
#define FireEtwMulticoreJit(ClrInstanceID, String1, String2, Int1, Int2, Int3)\
        EventEnabledMulticoreJit() ?\
        CoTemplate_hzzddd(Microsoft_Windows_DotNETRuntimePrivateHandle, &MulticoreJit, ClrInstanceID, String1, String2, Int1, Int2, Int3)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MulticoreJitMethodCodeReturned
//

#define EventEnabledMulticoreJitMethodCodeReturned() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00001000) != 0)

//
// Event Macro for MulticoreJitMethodCodeReturned
//
#define FireEtwMulticoreJitMethodCodeReturned(ClrInstanceID, ModuleID, MethodID)\
        EventEnabledMulticoreJitMethodCodeReturned() ?\
        CoTemplate_hxx(Microsoft_Windows_DotNETRuntimePrivateHandle, &MulticoreJitMethodCodeReturned, ClrInstanceID, ModuleID, MethodID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for IInspectableRuntimeClassName
//

#define EventEnabledIInspectableRuntimeClassName() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for IInspectableRuntimeClassName
//
#define FireEtwIInspectableRuntimeClassName(TypeName, ClrInstanceID)\
        EventEnabledIInspectableRuntimeClassName() ?\
        CoTemplate_zh(Microsoft_Windows_DotNETRuntimePrivateHandle, &IInspectableRuntimeClassName, TypeName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for WinRTUnbox
//

#define EventEnabledWinRTUnbox() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for WinRTUnbox
//
#define FireEtwWinRTUnbox(TypeName, SecondTypeName, ClrInstanceID)\
        EventEnabledWinRTUnbox() ?\
        CoTemplate_zzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &WinRTUnbox, TypeName, SecondTypeName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for CreateRCW
//

#define EventEnabledCreateRCW() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for CreateRCW
//
#define FireEtwCreateRCW(TypeName, ClrInstanceID)\
        EventEnabledCreateRCW() ?\
        CoTemplate_zh(Microsoft_Windows_DotNETRuntimePrivateHandle, &CreateRCW, TypeName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for RCWVariance
//

#define EventEnabledRCWVariance() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for RCWVariance
//
#define FireEtwRCWVariance(TypeName, InterfaceTypeName, VariantInterfaceTypeName, ClrInstanceID)\
        EventEnabledRCWVariance() ?\
        CoTemplate_zzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &RCWVariance, TypeName, InterfaceTypeName, VariantInterfaceTypeName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for RCWIEnumerableCasting
//

#define EventEnabledRCWIEnumerableCasting() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for RCWIEnumerableCasting
//
#define FireEtwRCWIEnumerableCasting(TypeName, SecondTypeName, ClrInstanceID)\
        EventEnabledRCWIEnumerableCasting() ?\
        CoTemplate_zzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &RCWIEnumerableCasting, TypeName, SecondTypeName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for CreateCCW
//

#define EventEnabledCreateCCW() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for CreateCCW
//
#define FireEtwCreateCCW(TypeName, ClrInstanceID)\
        EventEnabledCreateCCW() ?\
        CoTemplate_zh(Microsoft_Windows_DotNETRuntimePrivateHandle, &CreateCCW, TypeName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for CCWVariance
//

#define EventEnabledCCWVariance() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for CCWVariance
//
#define FireEtwCCWVariance(TypeName, InterfaceTypeName, VariantInterfaceTypeName, ClrInstanceID)\
        EventEnabledCCWVariance() ?\
        CoTemplate_zzzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &CCWVariance, TypeName, InterfaceTypeName, VariantInterfaceTypeName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ObjectVariantMarshallingToNative
//

#define EventEnabledObjectVariantMarshallingToNative() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for ObjectVariantMarshallingToNative
//
#define FireEtwObjectVariantMarshallingToNative(TypeName, Int1, ClrInstanceID)\
        EventEnabledObjectVariantMarshallingToNative() ?\
        CoTemplate_zdh(Microsoft_Windows_DotNETRuntimePrivateHandle, &ObjectVariantMarshallingToNative, TypeName, Int1, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GetTypeFromGUID
//

#define EventEnabledGetTypeFromGUID() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for GetTypeFromGUID
//
#define FireEtwGetTypeFromGUID(TypeName, SecondTypeName, ClrInstanceID)\
        EventEnabledGetTypeFromGUID() ?\
        CoTemplate_zzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &GetTypeFromGUID, TypeName, SecondTypeName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for GetTypeFromProgID
//

#define EventEnabledGetTypeFromProgID() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for GetTypeFromProgID
//
#define FireEtwGetTypeFromProgID(TypeName, SecondTypeName, ClrInstanceID)\
        EventEnabledGetTypeFromProgID() ?\
        CoTemplate_zzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &GetTypeFromProgID, TypeName, SecondTypeName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ConvertToCallbackEtw
//

#define EventEnabledConvertToCallbackEtw() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for ConvertToCallbackEtw
//
#define FireEtwConvertToCallbackEtw(TypeName, SecondTypeName, ClrInstanceID)\
        EventEnabledConvertToCallbackEtw() ?\
        CoTemplate_zzh(Microsoft_Windows_DotNETRuntimePrivateHandle, &ConvertToCallbackEtw, TypeName, SecondTypeName, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for BeginCreateManagedReference
//

#define EventEnabledBeginCreateManagedReference() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for BeginCreateManagedReference
//
#define FireEtwBeginCreateManagedReference(ClrInstanceID)\
        EventEnabledBeginCreateManagedReference() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &BeginCreateManagedReference, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EndCreateManagedReference
//

#define EventEnabledEndCreateManagedReference() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for EndCreateManagedReference
//
#define FireEtwEndCreateManagedReference(ClrInstanceID)\
        EventEnabledEndCreateManagedReference() ?\
        CoTemplate_h(Microsoft_Windows_DotNETRuntimePrivateHandle, &EndCreateManagedReference, ClrInstanceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ObjectVariantMarshallingToManaged
//

#define EventEnabledObjectVariantMarshallingToManaged() ((Microsoft_Windows_DotNETRuntimePrivateEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for ObjectVariantMarshallingToManaged
//
#define FireEtwObjectVariantMarshallingToManaged(TypeName, Int1, ClrInstanceID)\
        EventEnabledObjectVariantMarshallingToManaged() ?\
        CoTemplate_zdh(Microsoft_Windows_DotNETRuntimePrivateHandle, &ObjectVariantMarshallingToManaged, TypeName, Int1, ClrInstanceID)\
        : ERROR_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION


//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions 
//
//
//Template from manifest : GCStart
//
#ifndef CoTemplate_qq_def
#define CoTemplate_qq_def
ETW_INLINE
ULONG
CoTemplate_qq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1
    )
{
#define ARGUMENT_COUNT_qq 2
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qq, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qq,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCStart_V1
//
#ifndef CoTemplate_qqqqh_def
#define CoTemplate_qqqqh_def
ETW_INLINE
ULONG
CoTemplate_qqqqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned short  _Arg4
    )
{
#define ARGUMENT_COUNT_qqqqh 5
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqqqh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqqqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qqqqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCStart_V2
//
#ifndef CoTemplate_qqqqhx_def
#define CoTemplate_qqqqhx_def
ETW_INLINE
ULONG
CoTemplate_qqqqhx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned short  _Arg4,
    _In_ unsigned __int64  _Arg5
    )
{
#define ARGUMENT_COUNT_qqqqhx 6
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqqqhx];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(unsigned __int64)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqqqhx, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qqqqhx,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCEnd
//
#ifndef CoTemplate_qh_def
#define CoTemplate_qh_def
ETW_INLINE
ULONG
CoTemplate_qh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned short  _Arg1
    )
{
#define ARGUMENT_COUNT_qh 2
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCEnd_V1
//
#ifndef CoTemplate_qqh_def
#define CoTemplate_qqh_def
ETW_INLINE
ULONG
CoTemplate_qqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned short  _Arg2
    )
{
#define ARGUMENT_COUNT_qqh 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : (null)
//
#ifndef CoTemplateEventDescriptor_def
#define CoTemplateEventDescriptor_def


ETW_INLINE
ULONG
CoTemplateEventDescriptor(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor
    )
{
    ULONG Error = ERROR_SUCCESS;

    Error = EventWrite(RegHandle, Descriptor, 0, NULL);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              0,
              NULL);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCNoUserData
//
#ifndef CoTemplate_h_def
#define CoTemplate_h_def
ETW_INLINE
ULONG
CoTemplate_h(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0
    )
{
#define ARGUMENT_COUNT_h 1
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_h];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_h, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_h,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCHeapStats
//
#ifndef CoTemplate_xxxxxxxxxxqqq_def
#define CoTemplate_xxxxxxxxxxqqq_def
ETW_INLINE
ULONG
CoTemplate_xxxxxxxxxxqqq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ unsigned __int64  _Arg4,
    _In_ unsigned __int64  _Arg5,
    _In_ unsigned __int64  _Arg6,
    _In_ unsigned __int64  _Arg7,
    _In_ unsigned __int64  _Arg8,
    _In_ unsigned __int64  _Arg9,
    _In_ const unsigned int  _Arg10,
    _In_ const unsigned int  _Arg11,
    _In_ const unsigned int  _Arg12
    )
{
#define ARGUMENT_COUNT_xxxxxxxxxxqqq 13
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxxxxxxxxqqq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[8], &_Arg8, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[9], &_Arg9, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[10], &_Arg10, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11], &_Arg11, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[12], &_Arg12, sizeof(const unsigned int)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxxxxxxxxqqq, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxxxxxxxxqqq,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCHeapStats_V1
//
#ifndef CoTemplate_xxxxxxxxxxqqqh_def
#define CoTemplate_xxxxxxxxxxqqqh_def
ETW_INLINE
ULONG
CoTemplate_xxxxxxxxxxqqqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ unsigned __int64  _Arg4,
    _In_ unsigned __int64  _Arg5,
    _In_ unsigned __int64  _Arg6,
    _In_ unsigned __int64  _Arg7,
    _In_ unsigned __int64  _Arg8,
    _In_ unsigned __int64  _Arg9,
    _In_ const unsigned int  _Arg10,
    _In_ const unsigned int  _Arg11,
    _In_ const unsigned int  _Arg12,
    _In_ const unsigned short  _Arg13
    )
{
#define ARGUMENT_COUNT_xxxxxxxxxxqqqh 14
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxxxxxxxxqqqh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[8], &_Arg8, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[9], &_Arg9, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[10], &_Arg10, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11], &_Arg11, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[12], &_Arg12, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[13], &_Arg13, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxxxxxxxxqqqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxxxxxxxxqqqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCCreateSegment
//
#ifndef CoTemplate_xxq_def
#define CoTemplate_xxq_def
ETW_INLINE
ULONG
CoTemplate_xxq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2
    )
{
#define ARGUMENT_COUNT_xxq 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxq, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxq,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCCreateSegment_V1
//
#ifndef CoTemplate_xxqh_def
#define CoTemplate_xxqh_def
ETW_INLINE
ULONG
CoTemplate_xxqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned short  _Arg3
    )
{
#define ARGUMENT_COUNT_xxqh 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxqh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCFreeSegment
//
#ifndef CoTemplate_x_def
#define CoTemplate_x_def
ETW_INLINE
ULONG
CoTemplate_x(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0
    )
{
#define ARGUMENT_COUNT_x 1
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_x];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_x, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_x,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCFreeSegment_V1
//
#ifndef CoTemplate_xh_def
#define CoTemplate_xh_def
ETW_INLINE
ULONG
CoTemplate_xh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ const unsigned short  _Arg1
    )
{
#define ARGUMENT_COUNT_xh 2
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCAllocationTick_V2
//
#ifndef CoTemplate_qqhxpzq_def
#define CoTemplate_qqhxpzq_def
ETW_INLINE
ULONG
CoTemplate_qqhxpzq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned short  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_opt_ const void *  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6
    )
{
#define ARGUMENT_COUNT_qqhxpzq 7
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqhxpzq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned int)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqhxpzq, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qqhxpzq,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCAllocationTick_V3
//
#ifndef CoTemplate_qqhxpzqp_def
#define CoTemplate_qqhxpzqp_def
ETW_INLINE
ULONG
CoTemplate_qqhxpzqp(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned short  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_opt_ const void *  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ const void *  _Arg7
    )
{
#define ARGUMENT_COUNT_qqhxpzqp 8
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqhxpzqp];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(PVOID)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqhxpzqp, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qqhxpzqp,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCFinalizersEnd
//
#ifndef CoTemplate_q_def
#define CoTemplate_q_def
ETW_INLINE
ULONG
CoTemplate_q(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0
    )
{
#define ARGUMENT_COUNT_q 1
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_q];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_q, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_q,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : BulkType
//
#ifndef CoTemplate_qhNR0_def
#define CoTemplate_qhNR0_def
ETW_INLINE
ULONG
CoTemplate_qhNR0(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned short  _Arg1,
    _In_ ULONG _Arg2_Len_,
    _In_ const PVOID  _Arg2
    )
{
#define ARGUMENT_COUNT_qhNR0 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qhNR0];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[2], _Arg2, _Arg0 * _Arg2_Len_);

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qhNR0, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qhNR0,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCBulkRootEdge
//
#ifndef CoTemplate_qqhNR1_def
#define CoTemplate_qqhNR1_def
ETW_INLINE
ULONG
CoTemplate_qqhNR1(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned short  _Arg2,
    _In_ ULONG _Arg3_Len_,
    _In_ const PVOID  _Arg3
    )
{
#define ARGUMENT_COUNT_qqhNR1 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqhNR1];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[3], _Arg3, _Arg1 * _Arg3_Len_);

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqhNR1, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qqhNR1,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCSampledObjectAllocation
//
#ifndef CoTemplate_ppqxh_def
#define CoTemplate_ppqxh_def
ETW_INLINE
ULONG
CoTemplate_ppqxh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const void *  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ const unsigned short  _Arg4
    )
{
#define ARGUMENT_COUNT_ppqxh 5
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ppqxh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ppqxh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_ppqxh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCGenerationRange
//
#ifndef CoTemplate_cpxxh_def
#define CoTemplate_cpxxh_def
ETW_INLINE
ULONG
CoTemplate_cpxxh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const UCHAR  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ const unsigned short  _Arg4
    )
{
#define ARGUMENT_COUNT_cpxxh 5
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_cpxxh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const UCHAR)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_cpxxh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_cpxxh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : FinalizeObject
//
#ifndef CoTemplate_pph_def
#define CoTemplate_pph_def
ETW_INLINE
ULONG
CoTemplate_pph(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const void *  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_ const unsigned short  _Arg2
    )
{
#define ARGUMENT_COUNT_pph 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_pph];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_pph, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_pph,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : SetGCHandle
//
#ifndef CoTemplate_ppqqxh_def
#define CoTemplate_ppqqxh_def
ETW_INLINE
ULONG
CoTemplate_ppqqxh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const void *  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ unsigned __int64  _Arg4,
    _In_ const unsigned short  _Arg5
    )
{
#define ARGUMENT_COUNT_ppqqxh 6
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ppqqxh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ppqqxh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_ppqqxh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : DestroyGCHandle
//
#ifndef CoTemplate_ph_def
#define CoTemplate_ph_def
ETW_INLINE
ULONG
CoTemplate_ph(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const void *  _Arg0,
    _In_ const unsigned short  _Arg1
    )
{
#define ARGUMENT_COUNT_ph 2
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ph];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ph, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_ph,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : PinObjectAtGCTime
//
#ifndef CoTemplate_ppxzh_def
#define CoTemplate_ppxzh_def
ETW_INLINE
ULONG
CoTemplate_ppxzh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const void *  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_ const unsigned short  _Arg4
    )
{
#define ARGUMENT_COUNT_ppxzh 5
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ppxzh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ppxzh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_ppxzh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCBulkRootStaticVar
//
#ifndef CoTemplate_qxhNR0_def
#define CoTemplate_qxhNR0_def
ETW_INLINE
ULONG
CoTemplate_qxhNR0(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned short  _Arg2,
    _In_ ULONG _Arg3_Len_,
    _In_ const PVOID  _Arg3
    )
{
#define ARGUMENT_COUNT_qxhNR0 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qxhNR0];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[3], _Arg3, _Arg0 * _Arg3_Len_);

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qxhNR0, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qxhNR0,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ThreadPoolWorkerThreadAdjustmentSample
//
#ifndef CoTemplate_gh_def
#define CoTemplate_gh_def
ETW_INLINE
ULONG
CoTemplate_gh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const double  _Arg0,
    _In_ const unsigned short  _Arg1
    )
{
#define ARGUMENT_COUNT_gh 2
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_gh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const double)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_gh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_gh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ThreadPoolWorkerThreadAdjustmentAdjustment
//
#ifndef CoTemplate_gqqh_def
#define CoTemplate_gqqh_def
ETW_INLINE
ULONG
CoTemplate_gqqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const double  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned short  _Arg3
    )
{
#define ARGUMENT_COUNT_gqqh 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_gqqh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const double)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_gqqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_gqqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ThreadPoolWorkerThreadAdjustmentStats
//
#ifndef CoTemplate_ggggggggghh_def
#define CoTemplate_ggggggggghh_def
ETW_INLINE
ULONG
CoTemplate_ggggggggghh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const double  _Arg0,
    _In_ const double  _Arg1,
    _In_ const double  _Arg2,
    _In_ const double  _Arg3,
    _In_ const double  _Arg4,
    _In_ const double  _Arg5,
    _In_ const double  _Arg6,
    _In_ const double  _Arg7,
    _In_ const double  _Arg8,
    _In_ const unsigned short  _Arg9,
    _In_ const unsigned short  _Arg10
    )
{
#define ARGUMENT_COUNT_ggggggggghh 11
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ggggggggghh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const double)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const double)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const double)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const double)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const double)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const double)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const double)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(const double)  );

    EventDataDescCreate(&EventData[8], &_Arg8, sizeof(const double)  );

    EventDataDescCreate(&EventData[9], &_Arg9, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[10], &_Arg10, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ggggggggghh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_ggggggggghh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ThreadPoolIOWorkEnqueue
//
#ifndef CoTemplate_ppth_def
#define CoTemplate_ppth_def
ETW_INLINE
ULONG
CoTemplate_ppth(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const void *  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_ const BOOL  _Arg2,
    _In_ const unsigned short  _Arg3
    )
{
#define ARGUMENT_COUNT_ppth 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ppth];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ppth, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_ppth,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : Exception
//
#ifndef CoTemplate_zzpqhh_def
#define CoTemplate_zzpqhh_def
ETW_INLINE
ULONG
CoTemplate_zzpqhh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ const void *  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned short  _Arg4,
    _In_ const unsigned short  _Arg5
    )
{
#define ARGUMENT_COUNT_zzpqhh 6
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzpqhh];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzpqhh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zzpqhh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : Contention
//
#ifndef CoTemplate_ch_def
#define CoTemplate_ch_def
ETW_INLINE
ULONG
CoTemplate_ch(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const UCHAR  _Arg0,
    _In_ const unsigned short  _Arg1
    )
{
#define ARGUMENT_COUNT_ch 2
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ch];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const UCHAR)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ch, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_ch,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ClrStackWalk
//
#ifndef CoTemplate_hccqP2_def
#define CoTemplate_hccqP2_def
ETW_INLINE
ULONG
CoTemplate_hccqP2(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0,
    _In_ const UCHAR  _Arg1,
    _In_ const UCHAR  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_reads_(2) const void * *_Arg4
    )
{
#define ARGUMENT_COUNT_hccqP2 5
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_hccqP2];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const UCHAR)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const UCHAR)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4],  _Arg4, sizeof(PVOID)*2);

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_hccqP2, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_hccqP2,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : AppDomainMemAllocated
//
#ifndef CoTemplate_xxh_def
#define CoTemplate_xxh_def
ETW_INLINE
ULONG
CoTemplate_xxh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned short  _Arg2
    )
{
#define ARGUMENT_COUNT_xxh 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : AppDomainMemSurvived
//
#ifndef CoTemplate_xxxh_def
#define CoTemplate_xxxh_def
ETW_INLINE
ULONG
CoTemplate_xxxh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned short  _Arg3
    )
{
#define ARGUMENT_COUNT_xxxh 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ThreadCreated
//
#ifndef CoTemplate_xxqqqh_def
#define CoTemplate_xxqqqh_def
ETW_INLINE
ULONG
CoTemplate_xxqqqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const unsigned short  _Arg5
    )
{
#define ARGUMENT_COUNT_xxqqqh 6
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxqqqh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxqqqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxqqqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ILStubGenerated
//
#ifndef CoTemplate_hxxqqzzzzzz_def
#define CoTemplate_hxxqqzzzzzz_def
ETW_INLINE
ULONG
CoTemplate_hxxqqzzzzzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_opt_ PCWSTR  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_opt_ PCWSTR  _Arg9,
    _In_opt_ PCWSTR  _Arg10
    )
{
#define ARGUMENT_COUNT_hxxqqzzzzzz 11
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_hxxqqzzzzzz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7], 
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[8], 
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9], 
                        (_Arg9 != NULL) ? _Arg9 : L"NULL",
                        (_Arg9 != NULL) ? (ULONG)((wcslen(_Arg9) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[10], 
                        (_Arg10 != NULL) ? _Arg10 : L"NULL",
                        (_Arg10 != NULL) ? (ULONG)((wcslen(_Arg10) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_hxxqqzzzzzz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_hxxqqzzzzzz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ILStubCacheHit
//
#ifndef CoTemplate_hxxqzzz_def
#define CoTemplate_hxxqzzz_def
ETW_INLINE
ULONG
CoTemplate_hxxqzzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_opt_ PCWSTR  _Arg6
    )
{
#define ARGUMENT_COUNT_hxxqzzz 7
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_hxxqzzz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_hxxqzzz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_hxxqzzz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodLoadUnload
//
#ifndef CoTemplate_xxxqqq_def
#define CoTemplate_xxxqqq_def
ETW_INLINE
ULONG
CoTemplate_xxxqqq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const unsigned int  _Arg5
    )
{
#define ARGUMENT_COUNT_xxxqqq 6
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxqqq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned int)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxqqq, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxqqq,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodLoadUnloadVerbose
//
#ifndef CoTemplate_xxxqqqzzz_def
#define CoTemplate_xxxqqqzzz_def
ETW_INLINE
ULONG
CoTemplate_xxxqqqzzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_opt_ PCWSTR  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_opt_ PCWSTR  _Arg8
    )
{
#define ARGUMENT_COUNT_xxxqqqzzz 9
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxqqqzzz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7], 
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[8], 
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxqqqzzz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxqqqzzz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodLoadUnload_V1
//
#ifndef CoTemplate_xxxqqqh_def
#define CoTemplate_xxxqqqh_def
ETW_INLINE
ULONG
CoTemplate_xxxqqqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_ const unsigned short  _Arg6
    )
{
#define ARGUMENT_COUNT_xxxqqqh 7
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxqqqh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxqqqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxqqqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodLoadUnload_V2
//
#ifndef CoTemplate_xxxqqqhx_def
#define CoTemplate_xxxqqqhx_def
ETW_INLINE
ULONG
CoTemplate_xxxqqqhx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_ const unsigned short  _Arg6,
    _In_ unsigned __int64  _Arg7
    )
{
#define ARGUMENT_COUNT_xxxqqqhx 8
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxqqqhx];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(unsigned __int64)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxqqqhx, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxqqqhx,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodLoadUnloadVerbose_V1
//
#ifndef CoTemplate_xxxqqqzzzh_def
#define CoTemplate_xxxqqqzzzh_def
ETW_INLINE
ULONG
CoTemplate_xxxqqqzzzh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_opt_ PCWSTR  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const unsigned short  _Arg9
    )
{
#define ARGUMENT_COUNT_xxxqqqzzzh 10
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxqqqzzzh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7], 
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[8], 
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9], &_Arg9, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxqqqzzzh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxqqqzzzh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodLoadUnloadVerbose_V2
//
#ifndef CoTemplate_xxxqqqzzzhx_def
#define CoTemplate_xxxqqqzzzhx_def
ETW_INLINE
ULONG
CoTemplate_xxxqqqzzzhx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_opt_ PCWSTR  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const unsigned short  _Arg9,
    _In_ unsigned __int64  _Arg10
    )
{
#define ARGUMENT_COUNT_xxxqqqzzzhx 11
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxqqqzzzhx];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7], 
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[8], 
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9], &_Arg9, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[10], &_Arg10, sizeof(unsigned __int64)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxqqqzzzhx, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxqqqzzzhx,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodJittingStarted
//
#ifndef CoTemplate_xxqqzzz_def
#define CoTemplate_xxqqzzz_def
ETW_INLINE
ULONG
CoTemplate_xxqqzzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_opt_ PCWSTR  _Arg6
    )
{
#define ARGUMENT_COUNT_xxqqzzz 7
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxqqzzz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxqqzzz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxqqzzz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodJittingStarted_V1
//
#ifndef CoTemplate_xxqqzzzh_def
#define CoTemplate_xxqqzzzh_def
ETW_INLINE
ULONG
CoTemplate_xxqqzzzh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_opt_ PCWSTR  _Arg6,
    _In_ const unsigned short  _Arg7
    )
{
#define ARGUMENT_COUNT_xxqqzzzh 8
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxqqzzzh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxqqzzzh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxqqzzzh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodJitInliningSucceeded
//
#ifndef CoTemplate_zzzzzzzzzh_def
#define CoTemplate_zzzzzzzzzh_def
ETW_INLINE
ULONG
CoTemplate_zzzzzzzzzh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_opt_ PCWSTR  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const unsigned short  _Arg9
    )
{
#define ARGUMENT_COUNT_zzzzzzzzzh 10
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzzzzzzzzh];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7], 
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[8], 
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9], &_Arg9, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzzzzzzzzh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zzzzzzzzzh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodJitInliningFailed
//
#ifndef CoTemplate_zzzzzzzzztsh_def
#define CoTemplate_zzzzzzzzztsh_def
ETW_INLINE
ULONG
CoTemplate_zzzzzzzzztsh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_opt_ PCWSTR  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const BOOL  _Arg9,
    _In_opt_ LPCSTR  _Arg10,
    _In_ const unsigned short  _Arg11
    )
{
#define ARGUMENT_COUNT_zzzzzzzzztsh 12
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzzzzzzzztsh];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7], 
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[8], 
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9], &_Arg9, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[10], 
                        (_Arg10 != NULL) ? _Arg10 : "NULL",
                        (_Arg10 != NULL) ? (ULONG)((strlen(_Arg10) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[11], &_Arg11, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzzzzzzzztsh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zzzzzzzzztsh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodJitTailCallSucceeded
//
#ifndef CoTemplate_zzzzzzzzztqh_def
#define CoTemplate_zzzzzzzzztqh_def
ETW_INLINE
ULONG
CoTemplate_zzzzzzzzztqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_opt_ PCWSTR  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const BOOL  _Arg9,
    _In_ const unsigned int  _Arg10,
    _In_ const unsigned short  _Arg11
    )
{
#define ARGUMENT_COUNT_zzzzzzzzztqh 12
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzzzzzzzztqh];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7], 
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[8], 
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9], &_Arg9, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[10], &_Arg10, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11], &_Arg11, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzzzzzzzztqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zzzzzzzzztqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodILToNativeMap
//
#ifndef CoTemplate_xxchQR3QR3h_def
#define CoTemplate_xxchQR3QR3h_def
ETW_INLINE
ULONG
CoTemplate_xxchQR3QR3h(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const UCHAR  _Arg2,
    _In_ const unsigned short  _Arg3,
    _In_reads_(_Arg3) const unsigned int *_Arg4,
    _In_reads_(_Arg3) const unsigned int *_Arg5,
    _In_ const unsigned short  _Arg6
    )
{
#define ARGUMENT_COUNT_xxchQR3QR3h 7
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxchQR3QR3h];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const UCHAR)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[4],  _Arg4, sizeof(const unsigned int)*_Arg3);

    EventDataDescCreate(&EventData[5],  _Arg5, sizeof(const unsigned int)*_Arg3);

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxchQR3QR3h, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxchQR3QR3h,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ModuleLoadUnload
//
#ifndef CoTemplate_xxqqzz_def
#define CoTemplate_xxqqzz_def
ETW_INLINE
ULONG
CoTemplate_xxqqzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_opt_ PCWSTR  _Arg5
    )
{
#define ARGUMENT_COUNT_xxqqzz 6
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxqqzz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxqqzz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxqqzz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : DomainModuleLoadUnload
//
#ifndef CoTemplate_xxxqqzz_def
#define CoTemplate_xxxqqzz_def
ETW_INLINE
ULONG
CoTemplate_xxxqqzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_opt_ PCWSTR  _Arg6
    )
{
#define ARGUMENT_COUNT_xxxqqzz 7
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxqqzz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxqqzz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxqqzz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : DomainModuleLoadUnload_V1
//
#ifndef CoTemplate_xxxqqzzh_def
#define CoTemplate_xxxqqzzh_def
ETW_INLINE
ULONG
CoTemplate_xxxqqzzh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_opt_ PCWSTR  _Arg6,
    _In_ const unsigned short  _Arg7
    )
{
#define ARGUMENT_COUNT_xxxqqzzh 8
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxqqzzh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxqqzzh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxqqzzh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ModuleLoadUnload_V1
//
#ifndef CoTemplate_xxqqzzh_def
#define CoTemplate_xxqqzzh_def
ETW_INLINE
ULONG
CoTemplate_xxqqzzh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned short  _Arg6
    )
{
#define ARGUMENT_COUNT_xxqqzzh 7
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxqqzzh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxqqzzh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxqqzzh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ModuleLoadUnload_V2
//
#ifndef CoTemplate_xxqqzzhjqzjqz_def
#define CoTemplate_xxqqzzhjqzjqz_def
ETW_INLINE
ULONG
CoTemplate_xxqqzzhjqzjqz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned short  _Arg6,
    _In_ LPCGUID  _Arg7,
    _In_ const unsigned int  _Arg8,
    _In_opt_ PCWSTR  _Arg9,
    _In_ LPCGUID  _Arg10,
    _In_ const unsigned int  _Arg11,
    _In_opt_ PCWSTR  _Arg12
    )
{
#define ARGUMENT_COUNT_xxqqzzhjqzjqz 13
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxqqzzhjqzjqz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[7], _Arg7, sizeof(GUID)  );

    EventDataDescCreate(&EventData[8], &_Arg8, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[9], 
                        (_Arg9 != NULL) ? _Arg9 : L"NULL",
                        (_Arg9 != NULL) ? (ULONG)((wcslen(_Arg9) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[10], _Arg10, sizeof(GUID)  );

    EventDataDescCreate(&EventData[11], &_Arg11, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[12], 
                        (_Arg12 != NULL) ? _Arg12 : L"NULL",
                        (_Arg12 != NULL) ? (ULONG)((wcslen(_Arg12) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxqqzzhjqzjqz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxqqzzhjqzjqz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : AssemblyLoadUnload
//
#ifndef CoTemplate_xxqz_def
#define CoTemplate_xxqz_def
ETW_INLINE
ULONG
CoTemplate_xxqz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_opt_ PCWSTR  _Arg3
    )
{
#define ARGUMENT_COUNT_xxqz 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxqz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxqz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxqz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : AssemblyLoadUnload_V1
//
#ifndef CoTemplate_xxxqzh_def
#define CoTemplate_xxxqzh_def
ETW_INLINE
ULONG
CoTemplate_xxxqzh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_ const unsigned short  _Arg5
    )
{
#define ARGUMENT_COUNT_xxxqzh 6
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxqzh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxqzh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxqzh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : AppDomainLoadUnload
//
#ifndef CoTemplate_xqz_def
#define CoTemplate_xqz_def
ETW_INLINE
ULONG
CoTemplate_xqz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_opt_ PCWSTR  _Arg2
    )
{
#define ARGUMENT_COUNT_xqz 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xqz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xqz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xqz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : AppDomainLoadUnload_V1
//
#ifndef CoTemplate_xqzqh_def
#define CoTemplate_xqzqh_def
ETW_INLINE
ULONG
CoTemplate_xqzqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned short  _Arg4
    )
{
#define ARGUMENT_COUNT_xqzqh 5
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xqzqh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xqzqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xqzqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ModuleRange
//
#ifndef CoTemplate_hxqqc_def
#define CoTemplate_hxqqc_def
ETW_INLINE
ULONG
CoTemplate_hxqqc(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const UCHAR  _Arg4
    )
{
#define ARGUMENT_COUNT_hxqqc 5
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_hxqqc];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const UCHAR)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_hxqqc, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_hxqqc,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : StrongNameVerification
//
#ifndef CoTemplate_qqz_def
#define CoTemplate_qqz_def
ETW_INLINE
ULONG
CoTemplate_qqz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_opt_ PCWSTR  _Arg2
    )
{
#define ARGUMENT_COUNT_qqz 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qqz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : StrongNameVerification_V1
//
#ifndef CoTemplate_qqzh_def
#define CoTemplate_qqzh_def
ETW_INLINE
ULONG
CoTemplate_qqzh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_ const unsigned short  _Arg3
    )
{
#define ARGUMENT_COUNT_qqzh 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqzh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqzh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qqzh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : RuntimeInformation
//
#ifndef CoTemplate_hhhhhhhhhhqczjz_def
#define CoTemplate_hhhhhhhhhhqczjz_def
ETW_INLINE
ULONG
CoTemplate_hhhhhhhhhhqczjz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0,
    _In_ const unsigned short  _Arg1,
    _In_ const unsigned short  _Arg2,
    _In_ const unsigned short  _Arg3,
    _In_ const unsigned short  _Arg4,
    _In_ const unsigned short  _Arg5,
    _In_ const unsigned short  _Arg6,
    _In_ const unsigned short  _Arg7,
    _In_ const unsigned short  _Arg8,
    _In_ const unsigned short  _Arg9,
    _In_ const unsigned int  _Arg10,
    _In_ const UCHAR  _Arg11,
    _In_opt_ PCWSTR  _Arg12,
    _In_ LPCGUID  _Arg13,
    _In_opt_ PCWSTR  _Arg14
    )
{
#define ARGUMENT_COUNT_hhhhhhhhhhqczjz 15
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_hhhhhhhhhhqczjz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[8], &_Arg8, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[9], &_Arg9, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[10], &_Arg10, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11], &_Arg11, sizeof(const UCHAR)  );

    EventDataDescCreate(&EventData[12], 
                        (_Arg12 != NULL) ? _Arg12 : L"NULL",
                        (_Arg12 != NULL) ? (ULONG)((wcslen(_Arg12) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[13], _Arg13, sizeof(GUID)  );

    EventDataDescCreate(&EventData[14], 
                        (_Arg14 != NULL) ? _Arg14 : L"NULL",
                        (_Arg14 != NULL) ? (ULONG)((wcslen(_Arg14) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_hhhhhhhhhhqczjz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_hhhhhhhhhhqczjz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCMarkWithType
//
#ifndef CoTemplate_qhqx_def
#define CoTemplate_qhqx_def
ETW_INLINE
ULONG
CoTemplate_qhqx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned short  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3
    )
{
#define ARGUMENT_COUNT_qhqx 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qhqx];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qhqx, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qhqx,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCJoin_V2
//
#ifndef CoTemplate_qqqhq_def
#define CoTemplate_qqqhq_def
ETW_INLINE
ULONG
CoTemplate_qqqhq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned short  _Arg3,
    _In_ const unsigned int  _Arg4
    )
{
#define ARGUMENT_COUNT_qqqhq 5
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqqhq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqqhq, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qqqhq,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCPerHeapHistory_V3
//
#ifndef CoTemplate_hppppppqqqqqqpqNR14_def
#define CoTemplate_hppppppqqqqqqpqNR14_def
ETW_INLINE
ULONG
CoTemplate_hppppppqqqqqqpqNR14(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_opt_ const void *  _Arg2,
    _In_opt_ const void *  _Arg3,
    _In_opt_ const void *  _Arg4,
    _In_opt_ const void *  _Arg5,
    _In_opt_ const void *  _Arg6,
    _In_ const unsigned int  _Arg7,
    _In_ const unsigned int  _Arg8,
    _In_ const unsigned int  _Arg9,
    _In_ const unsigned int  _Arg10,
    _In_ const unsigned int  _Arg11,
    _In_ const unsigned int  _Arg12,
    _In_opt_ const void *  _Arg13,
    _In_ const unsigned int  _Arg14,
    _In_ ULONG _Arg15_Len_,
    _In_ const PVOID  _Arg15
    )
{
#define ARGUMENT_COUNT_hppppppqqqqqqpqNR14 16
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_hppppppqqqqqqpqNR14];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8], &_Arg8, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[9], &_Arg9, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[10], &_Arg10, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11], &_Arg11, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[12], &_Arg12, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[13], &_Arg13, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[14], &_Arg14, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[15], _Arg15, _Arg14 * _Arg15_Len_);

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_hppppppqqqqqqpqNR14, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_hppppppqqqqqqpqNR14,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCGlobalHeap_V2
//
#ifndef CoTemplate_xdqqqqhqq_def
#define CoTemplate_xdqqqqhqq_def
ETW_INLINE
ULONG
CoTemplate_xdqqqqhqq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ const signed int  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_ const unsigned short  _Arg6,
    _In_ const unsigned int  _Arg7,
    _In_ const unsigned int  _Arg8
    )
{
#define ARGUMENT_COUNT_xdqqqqhqq 9
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xdqqqqhqq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8], &_Arg8, sizeof(const unsigned int)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xdqqqqhqq, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xdqqqqhqq,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : StressLog
//
#ifndef CoTemplate_qcs_def
#define CoTemplate_qcs_def
ETW_INLINE
ULONG
CoTemplate_qcs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const UCHAR  _Arg1,
    _In_opt_ LPCSTR  _Arg2
    )
{
#define ARGUMENT_COUNT_qcs 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qcs];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const UCHAR)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qcs, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qcs,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : StressLog_V1
//
#ifndef CoTemplate_qcsh_def
#define CoTemplate_qcsh_def
ETW_INLINE
ULONG
CoTemplate_qcsh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const UCHAR  _Arg1,
    _In_opt_ LPCSTR  _Arg2,
    _In_ const unsigned short  _Arg3
    )
{
#define ARGUMENT_COUNT_qcsh 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qcsh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const UCHAR)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qcsh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qcsh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCDecision
//
#ifndef CoTemplate_t_def
#define CoTemplate_t_def
ETW_INLINE
ULONG
CoTemplate_t(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const BOOL  _Arg0
    )
{
#define ARGUMENT_COUNT_t 1
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_t];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const BOOL)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_t, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_t,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCDecision_V1
//
#ifndef CoTemplate_th_def
#define CoTemplate_th_def
ETW_INLINE
ULONG
CoTemplate_th(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const BOOL  _Arg0,
    _In_ const unsigned short  _Arg1
    )
{
#define ARGUMENT_COUNT_th 2
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_th];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_th, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_th,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCSettings
//
#ifndef CoTemplate_xxt_def
#define CoTemplate_xxt_def
ETW_INLINE
ULONG
CoTemplate_xxt(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const BOOL  _Arg2
    )
{
#define ARGUMENT_COUNT_xxt 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxt];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const BOOL)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxt, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxt,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCSettings_V1
//
#ifndef CoTemplate_xxth_def
#define CoTemplate_xxth_def
ETW_INLINE
ULONG
CoTemplate_xxth(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const BOOL  _Arg2,
    _In_ const unsigned short  _Arg3
    )
{
#define ARGUMENT_COUNT_xxth 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxth];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxth, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxth,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCGlobalHeap
//
#ifndef CoTemplate_xdqqqq_def
#define CoTemplate_xdqqqq_def
ETW_INLINE
ULONG
CoTemplate_xdqqqq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ const signed int  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const unsigned int  _Arg5
    )
{
#define ARGUMENT_COUNT_xdqqqq 6
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xdqqqq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned int)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xdqqqq, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xdqqqq,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCGlobalHeap_V1
//
#ifndef CoTemplate_xdqqqqh_def
#define CoTemplate_xdqqqqh_def
ETW_INLINE
ULONG
CoTemplate_xdqqqqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ const signed int  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_ const unsigned short  _Arg6
    )
{
#define ARGUMENT_COUNT_xdqqqqh 7
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xdqqqqh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xdqqqqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xdqqqqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCJoin
//
#ifndef CoTemplate_qqq_def
#define CoTemplate_qqq_def
ETW_INLINE
ULONG
CoTemplate_qqq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned int  _Arg2
    )
{
#define ARGUMENT_COUNT_qqq 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqq, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qqq,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : GCJoin_V1
//
#ifndef CoTemplate_qqqh_def
#define CoTemplate_qqqh_def
ETW_INLINE
ULONG
CoTemplate_qqqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned short  _Arg3
    )
{
#define ARGUMENT_COUNT_qqqh 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqqh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qqqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : BGCOverflow
//
#ifndef CoTemplate_xxxqh_def
#define CoTemplate_xxxqh_def
ETW_INLINE
ULONG
CoTemplate_xxxqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ unsigned __int64  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned short  _Arg4
    )
{
#define ARGUMENT_COUNT_xxxqh 5
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xxxqh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xxxqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_xxxqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ModuleRangePrivate
//
#ifndef CoTemplate_hxqqcch_def
#define CoTemplate_hxqqcch_def
ETW_INLINE
ULONG
CoTemplate_hxqqcch(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const UCHAR  _Arg4,
    _In_ const UCHAR  _Arg5,
    _In_ const unsigned short  _Arg6
    )
{
#define ARGUMENT_COUNT_hxqqcch 7
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_hxqqcch];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const UCHAR)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const UCHAR)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_hxqqcch, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_hxqqcch,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : Binding
//
#ifndef CoTemplate_qqqqzzh_def
#define CoTemplate_qqqqzzh_def
ETW_INLINE
ULONG
CoTemplate_qqqqzzh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned short  _Arg6
    )
{
#define ARGUMENT_COUNT_qqqqzzh 7
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqqqzzh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqqqzzh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qqqqzzh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ModuleTransparencyCalculation
//
#ifndef CoTemplate_zqh_def
#define CoTemplate_zqh_def
ETW_INLINE
ULONG
CoTemplate_zqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned short  _Arg2
    )
{
#define ARGUMENT_COUNT_zqh 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zqh];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : ModuleTransparencyCalculationResult
//
#ifndef CoTemplate_zqttttqh_def
#define CoTemplate_zqttttqh_def
ETW_INLINE
ULONG
CoTemplate_zqttttqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const BOOL  _Arg2,
    _In_ const BOOL  _Arg3,
    _In_ const BOOL  _Arg4,
    _In_ const BOOL  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_ const unsigned short  _Arg7
    )
{
#define ARGUMENT_COUNT_zqttttqh 8
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zqttttqh];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zqttttqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zqttttqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : TypeTransparencyCalculation
//
#ifndef CoTemplate_zzqh_def
#define CoTemplate_zzqh_def
ETW_INLINE
ULONG
CoTemplate_zzqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned short  _Arg3
    )
{
#define ARGUMENT_COUNT_zzqh 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzqh];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zzqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : TypeTransparencyCalculationResult
//
#ifndef CoTemplate_zzqtttth_def
#define CoTemplate_zzqtttth_def
ETW_INLINE
ULONG
CoTemplate_zzqtttth(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const BOOL  _Arg3,
    _In_ const BOOL  _Arg4,
    _In_ const BOOL  _Arg5,
    _In_ const BOOL  _Arg6,
    _In_ const unsigned short  _Arg7
    )
{
#define ARGUMENT_COUNT_zzqtttth 8
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzqtttth];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzqtttth, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zzqtttth,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MethodTransparencyCalculationResult
//
#ifndef CoTemplate_zzqtth_def
#define CoTemplate_zzqtth_def
ETW_INLINE
ULONG
CoTemplate_zzqtth(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const BOOL  _Arg3,
    _In_ const BOOL  _Arg4,
    _In_ const unsigned short  _Arg5
    )
{
#define ARGUMENT_COUNT_zzqtth 6
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzqtth];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzqtth, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zzqtth,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : TokenTransparencyCalculation
//
#ifndef CoTemplate_qzqh_def
#define CoTemplate_qzqh_def
ETW_INLINE
ULONG
CoTemplate_qzqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned short  _Arg3
    )
{
#define ARGUMENT_COUNT_qzqh 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qzqh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qzqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qzqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : TokenTransparencyCalculationResult
//
#ifndef CoTemplate_qzqtth_def
#define CoTemplate_qzqtth_def
ETW_INLINE
ULONG
CoTemplate_qzqtth(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const BOOL  _Arg3,
    _In_ const BOOL  _Arg4,
    _In_ const unsigned short  _Arg5
    )
{
#define ARGUMENT_COUNT_qzqtth 6
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qzqtth];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qzqtth, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_qzqtth,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : NgenBindEvent
//
#ifndef CoTemplate_hxqz_def
#define CoTemplate_hxqz_def
ETW_INLINE
ULONG
CoTemplate_hxqz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_opt_ PCWSTR  _Arg3
    )
{
#define ARGUMENT_COUNT_hxqz 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_hxqz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_hxqz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_hxqz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : FailFast
//
#ifndef CoTemplate_zpqqh_def
#define CoTemplate_zpqqh_def
ETW_INLINE
ULONG
CoTemplate_zpqqh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned short  _Arg4
    )
{
#define ARGUMENT_COUNT_zpqqh 5
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zpqqh];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zpqqh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zpqqh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : PrvFinalizeObject
//
#ifndef CoTemplate_pphz_def
#define CoTemplate_pphz_def
ETW_INLINE
ULONG
CoTemplate_pphz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const void *  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_ const unsigned short  _Arg2,
    _In_opt_ PCWSTR  _Arg3
    )
{
#define ARGUMENT_COUNT_pphz 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_pphz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_pphz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_pphz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : CCWRefCountChange
//
#ifndef CoTemplate_pppqxsszh_def
#define CoTemplate_pppqxsszh_def
ETW_INLINE
ULONG
CoTemplate_pppqxsszh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const void *  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_opt_ const void *  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ unsigned __int64  _Arg4,
    _In_opt_ LPCSTR  _Arg5,
    _In_opt_ LPCSTR  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_ const unsigned short  _Arg8
    )
{
#define ARGUMENT_COUNT_pppqxsszh 9
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_pppqxsszh];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : "NULL",
                        (_Arg5 != NULL) ? (ULONG)((strlen(_Arg5) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[6], 
                        (_Arg6 != NULL) ? _Arg6 : "NULL",
                        (_Arg6 != NULL) ? (ULONG)((strlen(_Arg6) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[7], 
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[8], &_Arg8, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_pppqxsszh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_pppqxsszh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : FusionMessage
//
#ifndef CoTemplate_htz_def
#define CoTemplate_htz_def
ETW_INLINE
ULONG
CoTemplate_htz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0,
    _In_ const BOOL  _Arg1,
    _In_opt_ PCWSTR  _Arg2
    )
{
#define ARGUMENT_COUNT_htz 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_htz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_htz, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_htz,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : FusionErrorCode
//
#ifndef CoTemplate_hqq_def
#define CoTemplate_hqq_def
ETW_INLINE
ULONG
CoTemplate_hqq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned int  _Arg2
    )
{
#define ARGUMENT_COUNT_hqq 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_hqq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_hqq, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_hqq,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : PinPlugAtGCTime
//
#ifndef CoTemplate_ppph_def
#define CoTemplate_ppph_def
ETW_INLINE
ULONG
CoTemplate_ppph(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const void *  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_opt_ const void *  _Arg2,
    _In_ const unsigned short  _Arg3
    )
{
#define ARGUMENT_COUNT_ppph 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ppph];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ppph, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_ppph,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MulticoreJitPrivate
//
#ifndef CoTemplate_hzzddd_def
#define CoTemplate_hzzddd_def
ETW_INLINE
ULONG
CoTemplate_hzzddd(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_ const signed int  _Arg3,
    _In_ const signed int  _Arg4,
    _In_ const signed int  _Arg5
    )
{
#define ARGUMENT_COUNT_hzzddd 6
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_hzzddd];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const signed int)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_hzzddd, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_hzzddd,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : MulticoreJitMethodCodeReturnedPrivate
//
#ifndef CoTemplate_hxx_def
#define CoTemplate_hxx_def
ETW_INLINE
ULONG
CoTemplate_hxx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2
    )
{
#define ARGUMENT_COUNT_hxx 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_hxx];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_hxx, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_hxx,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : DynamicTypeUsePrivate
//
#ifndef CoTemplate_zh_def
#define CoTemplate_zh_def
ETW_INLINE
ULONG
CoTemplate_zh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_ const unsigned short  _Arg1
    )
{
#define ARGUMENT_COUNT_zh 2
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zh];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : DynamicTypeUseTwoParametersPrivate
//
#ifndef CoTemplate_zzh_def
#define CoTemplate_zzh_def
ETW_INLINE
ULONG
CoTemplate_zzh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const unsigned short  _Arg2
    )
{
#define ARGUMENT_COUNT_zzh 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzh];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zzh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : DynamicTypeUsePrivateVariance
//
#ifndef CoTemplate_zzzh_def
#define CoTemplate_zzzh_def
ETW_INLINE
ULONG
CoTemplate_zzzh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_ const unsigned short  _Arg3
    )
{
#define ARGUMENT_COUNT_zzzh 4
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzzh];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzzh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zzzh,
              EventData);
#endif

    return Error;
}
#endif

//
//Template from manifest : DynamicTypeUseStringAndIntPrivate
//
#ifndef CoTemplate_zdh_def
#define CoTemplate_zdh_def
ETW_INLINE
ULONG
CoTemplate_zdh(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_ const signed int  _Arg1,
    _In_ const unsigned short  _Arg2
    )
{
#define ARGUMENT_COUNT_zdh 3
    ULONG Error = ERROR_SUCCESS;

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zdh];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned short)  );

    Error = EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zdh, EventData);

#ifdef MCGEN_CALLOUT
MCGEN_CALLOUT(RegHandle,
              Descriptor,
              ARGUMENT_COUNT_zdh,
              EventData);
#endif

    return Error;
}
#endif

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
};
#endif

#define MSG_RuntimePublisher_GCKeywordMessage 0x10000001L
#define MSG_RuntimePublisher_GCHandleKeywordMessage 0x10000002L
#define MSG_RuntimePublisher_FusionKeywordMessage 0x10000003L
#define MSG_RuntimePublisher_LoaderKeywordMessage 0x10000004L
#define MSG_RuntimePublisher_JitKeywordMessage 0x10000005L
#define MSG_RuntimePublisher_NGenKeywordMessage 0x10000006L
#define MSG_RuntimePublisher_StartEnumerationKeywordMessage 0x10000007L
#define MSG_RuntimePublisher_EndEnumerationKeywordMessage 0x10000008L
#define MSG_RuntimePublisher_SecurityKeywordMessage 0x1000000BL
#define MSG_RuntimePublisher_AppDomainResourceManagementKeywordMessage 0x1000000CL
#define MSG_RuntimePublisher_JitTracingKeywordMessage 0x1000000DL
#define MSG_RuntimePublisher_InteropKeywordMessage 0x1000000EL
#define MSG_RuntimePublisher_ContentionKeywordMessage 0x1000000FL
#define MSG_RuntimePublisher_ExceptionKeywordMessage 0x10000010L
#define MSG_RuntimePublisher_ThreadingKeywordMessage 0x10000011L
#define MSG_RuntimePublisher_JittedMethodILToNativeMapKeywordMessage 0x10000012L
#define MSG_RuntimePublisher_OverrideAndSuppressNGenEventsKeywordMessage 0x10000013L
#define MSG_RuntimePublisher_TypeKeywordMessage 0x10000014L
#define MSG_RuntimePublisher_GCHeapDumpKeywordMessage 0x10000015L
#define MSG_RuntimePublisher_GCSampledObjectAllocationHighKeywordMessage 0x10000016L
#define MSG_RuntimePublisher_GCHeapSurvivalAndMovementKeywordMessage 0x10000017L
#define MSG_RuntimePublisher_GCHeapCollectKeyword 0x10000018L
#define MSG_RuntimePublisher_GCHeapAndTypeNamesKeyword 0x10000019L
#define MSG_RuntimePublisher_GCSampledObjectAllocationLowKeywordMessage 0x1000001AL
#define MSG_RuntimePublisher_PerfTrackKeywordMessage 0x1000001EL
#define MSG_RuntimePublisher_StackKeywordMessage 0x1000001FL
#define MSG_RuntimePublisher_ThreadTransferKeywordMessage 0x10000020L
#define MSG_RuntimePublisher_DebuggerKeywordMessage 0x10000021L
#define MSG_RundownPublisher_LoaderKeywordMessage 0x11000004L
#define MSG_RundownPublisher_JitKeywordMessage 0x11000005L
#define MSG_RundownPublisher_NGenKeywordMessage 0x11000006L
#define MSG_RundownPublisher_StartRundownKeywordMessage 0x11000007L
#define MSG_RundownPublisher_EndRundownKeywordMessage 0x11000009L
#define MSG_RuntimePublisher_AppDomainResourceManagementRundownKeywordMessage 0x1100000CL
#define MSG_RundownPublisher_ThreadingKeywordMessage 0x11000011L
#define MSG_RundownPublisher_JittedMethodILToNativeMapRundownKeywordMessage 0x11000012L
#define MSG_RundownPublisher_OverrideAndSuppressNGenEventsRundownKeywordMessage 0x11000013L
#define MSG_RundownPublisher_PerfTrackRundownKeywordMessage 0x1100001EL
#define MSG_RundownPublisher_StackKeywordMessage 0x1100001FL
#define MSG_StressPublisher_StackKeywordMessage 0x1200001FL
#define MSG_PrivatePublisher_GCPrivateKeywordMessage 0x13000001L
#define MSG_PrivatePublisher_BindingKeywordMessage 0x13000002L
#define MSG_PrivatePublisher_NGenForceRestoreKeywordMessage 0x13000003L
#define MSG_PrivatePublisher_PrivateFusionKeywordMessage 0x13000004L
#define MSG_PrivatePublisher_LoaderHeapPrivateKeywordMessage 0x13000005L
#define MSG_PrivatePublisher_DynamicTypeUsageMessage 0x13000006L
#define MSG_PrivatePublisher_SecurityPrivateKeywordMessage 0x1300000BL
#define MSG_PrivatePublisher_InteropPrivateKeywordMessage 0x1300000EL
#define MSG_PrivatePublisher_GCHandlePrivateKeywordMessage 0x1300000FL
#define MSG_PrivatePublisher_MulticoreJitPrivateKeywordMessage 0x13000012L
#define MSG_PrivatePublisher_PerfTrackKeywordMessage 0x1300001EL
#define MSG_PrivatePublisher_StackKeywordMessage 0x1300001FL
#define MSG_PrivatePublisher_StartupKeywordMessage 0x13000020L
#define MSG_RuntimePublisher_GCSuspendEEBeginOpcodeMessage 0x3001000AL
#define MSG_RuntimePublisher_GCAllocationTickOpcodeMessage 0x3001000BL
#define MSG_RuntimePublisher_GCCreateConcurrentThreadOpcodeMessage 0x3001000CL
#define MSG_RuntimePublisher_GCTerminateConcurrentThreadOpcodeMessage 0x3001000DL
#define MSG_RuntimePublisher_GCFinalizersEndOpcodeMessage 0x3001000FL
#define MSG_RuntimePublisher_GCFinalizersBeginOpcodeMessage 0x30010013L
#define MSG_RuntimePublisher_GCBulkRootEdgeOpcodeMessage 0x30010014L
#define MSG_RuntimePublisher_GCBulkRootConditionalWeakTableElementEdgeOpcodeMessage 0x30010015L
#define MSG_RuntimePublisher_GCBulkNodeOpcodeMessage 0x30010016L
#define MSG_RuntimePublisher_GCBulkEdgeOpcodeMessage 0x30010017L
#define MSG_RuntimePublisher_GCSampledObjectAllocationOpcodeMessage 0x30010018L
#define MSG_RuntimePublisher_GCBulkSurvivingObjectRangesOpcodeMessage 0x30010019L
#define MSG_RuntimePublisher_GCBulkMovedObjectRangesOpcodeMessage 0x3001001AL
#define MSG_RuntimePublisher_GCGenerationRangeOpcodeMessage 0x3001001BL
#define MSG_RuntimePublisher_GCMarkStackRootsOpcodeMessage 0x3001001CL
#define MSG_RuntimePublisher_GCMarkFinalizeQueueRootsOpcodeMessage 0x3001001DL
#define MSG_RuntimePublisher_GCMarkHandlesOpcodeMessage 0x3001001EL
#define MSG_RuntimePublisher_GCMarkOlderGenerationRootsOpcodeMessage 0x3001001FL
#define MSG_RuntimePublisher_FinalizeObjectOpcodeMessage 0x30010020L
#define MSG_RuntimePublisher_SetGCHandleOpcodeMessage 0x30010021L
#define MSG_RuntimePublisher_DestroyGCHandleOpcodeMessage 0x30010022L
#define MSG_RuntimePublisher_TriggeredOpcodeMessage 0x30010023L
#define MSG_RuntimePublisher_PinObjectAtGCTimeOpcodeMessage 0x30010024L
#define MSG_RuntimePublisher_GCBulkRootCCWOpcodeMessage 0x30010026L
#define MSG_RuntimePublisher_GCBulkRCWOpcodeMessage 0x30010027L
#define MSG_RuntimePublisher_GCBulkRootStaticVarOpcodeMessage 0x30010028L
#define MSG_RuntimePublisher_GCRestartEEEndOpcodeMessage 0x30010084L
#define MSG_RuntimePublisher_GCHeapStatsOpcodeMessage 0x30010085L
#define MSG_RuntimePublisher_GCCreateSegmentOpcodeMessage 0x30010086L
#define MSG_RuntimePublisher_GCFreeSegmentOpcodeMessage 0x30010087L
#define MSG_RuntimePublisher_GCRestartEEBeginOpcodeMessage 0x30010088L
#define MSG_RuntimePublisher_GCSuspendEEEndOpcodeMessage 0x30010089L
#define MSG_RuntimePublisher_IncreaseMemoryPressureOpcodeMessage 0x300100C8L
#define MSG_RuntimePublisher_DecreaseMemoryPressureOpcodeMessage 0x300100C9L
#define MSG_RuntimePublisher_GCMarkOpcodeMessage 0x300100CAL
#define MSG_RuntimePublisher_GCJoinOpcodeMessage 0x300100CBL
#define MSG_RuntimePublisher_GCPerHeapHistoryOpcodeMessage 0x300100CCL
#define MSG_RuntimePublisher_GCGlobalHeapHistoryOpcodeMessage 0x300100CDL
#define MSG_RuntimePublisher_DCStartCompleteOpcodeMessage 0x3009000EL
#define MSG_RuntimePublisher_DCEndCompleteOpcodeMessage 0x3009000FL
#define MSG_RuntimePublisher_MethodLoadOpcodeMessage 0x30090021L
#define MSG_RuntimePublisher_MethodUnloadOpcodeMessage 0x30090022L
#define MSG_RuntimePublisher_MethodDCStartOpcodeMessage 0x30090023L
#define MSG_RuntimePublisher_MethodDCEndOpcodeMessage 0x30090024L
#define MSG_RuntimePublisher_MethodLoadVerboseOpcodeMessage 0x30090025L
#define MSG_RuntimePublisher_MethodUnloadVerboseOpcodeMessage 0x30090026L
#define MSG_RuntimePublisher_MethodDCStartVerboseOpcodeMessage 0x30090027L
#define MSG_RuntimePublisher_MethodDCEndVerboseOpcodeMessage 0x30090028L
#define MSG_RuntimePublisher_MethodJittingStartedOpcodeMessage 0x3009002AL
#define MSG_RuntimePublisher_JitInliningSucceededOpcodeMessage 0x30090053L
#define MSG_RuntimePublisher_JitInliningFailedOpcodeMessage 0x30090054L
#define MSG_RuntimePublisher_JitTailCallSucceededOpcodeMessage 0x30090055L
#define MSG_RuntimePublisher_JitTailCallFailedOpcodeMessage 0x30090056L
#define MSG_RuntimePublisher_MethodILToNativeMapOpcodeMessage 0x30090057L
#define MSG_RuntimePublisher_ModuleLoadOpcodeMessage 0x300A0021L
#define MSG_RuntimePublisher_ModuleUnloadOpcodeMessage 0x300A0022L
#define MSG_RuntimePublisher_ModuleDCStartOpcodeMessage 0x300A0023L
#define MSG_RuntimePublisher_ModuleDCEndOpcodeMessage 0x300A0024L
#define MSG_RuntimePublisher_AssemblyLoadOpcodeMessage 0x300A0025L
#define MSG_RuntimePublisher_AssemblyUnloadOpcodeMessage 0x300A0026L
#define MSG_RuntimePublisher_AppDomainLoadOpcodeMessage 0x300A0029L
#define MSG_RuntimePublisher_AppDomainUnloadOpcodeMessage 0x300A002AL
#define MSG_RuntimePublisher_DomainModuleLoadOpcodeMessage 0x300A002DL
#define MSG_RuntimePublisher_CLRStackWalkOpcodeMessage 0x300B0052L
#define MSG_RuntimePublisher_AppDomainMemAllocatedOpcodeMessage 0x300E0030L
#define MSG_RuntimePublisher_AppDomainMemSurvivedOpcodeMessage 0x300E0031L
#define MSG_RuntimePublisher_ThreadCreatedOpcodeMessage 0x300E0032L
#define MSG_RuntimePublisher_ThreadTerminatedOpcodeMessage 0x300E0033L
#define MSG_RuntimePublisher_ThreadDomainEnterOpcodeMessage 0x300E0034L
#define MSG_RuntimePublisher_ILStubGeneratedOpcodeMessage 0x300F0058L
#define MSG_RuntimePublisher_ILStubCacheHitOpcodeMessage 0x300F0059L
#define MSG_RuntimePublisher_WaitOpcodeMessage 0x3010005AL
#define MSG_RuntimePublisher_SampleOpcodeMessage 0x30120064L
#define MSG_RuntimePublisher_AdjustmentOpcodeMessage 0x30120065L
#define MSG_RuntimePublisher_StatsOpcodeMessage 0x30120066L
#define MSG_RuntimePublisher_ModuleRangeLoadOpcodeMessage 0x3014000AL
#define MSG_RuntimePublisher_BulkTypeOpcodeMessage 0x3015000AL
#define MSG_RuntimePublisher_EnqueueOpcodeMessage 0x3017000BL
#define MSG_RuntimePublisher_DequeueOpcodeMessage 0x3017000CL
#define MSG_RuntimePublisher_IOEnqueueOpcodeMessage 0x3017000DL
#define MSG_RuntimePublisher_IODequeueOpcodeMessage 0x3017000EL
#define MSG_RuntimePublisher_IOPackOpcodeMessage 0x3017000FL
#define MSG_RuntimePublisher_ThreadCreatingOpcodeMessage 0x3018000BL
#define MSG_RuntimePublisher_ThreadRunningOpcodeMessage 0x3018000CL
#define MSG_RundownPublisher_DCStartCompleteOpcodeMessage 0x3101000EL
#define MSG_RundownPublisher_DCEndCompleteOpcodeMessage 0x3101000FL
#define MSG_RundownPublisher_DCStartInitOpcodeMessage 0x31010010L
#define MSG_RundownPublisher_DCEndInitOpcodeMessage 0x31010011L
#define MSG_RundownPublisher_MethodDCStartOpcodeMessage 0x31010023L
#define MSG_RundownPublisher_MethodDCEndOpcodeMessage 0x31010024L
#define MSG_RundownPublisher_MethodDCStartVerboseOpcodeMessage 0x31010027L
#define MSG_RundownPublisher_MethodDCEndVerboseOpcodeMessage 0x31010028L
#define MSG_RundownPublisher_MethodDCStartILToNativeMapOpcodeMessage 0x31010029L
#define MSG_RundownPublisher_MethodDCEndILToNativeMapOpcodeMessage 0x3101002AL
#define MSG_RundownPublisher_ModuleDCStartOpcodeMessage 0x31020023L
#define MSG_RundownPublisher_ModuleDCEndOpcodeMessage 0x31020024L
#define MSG_RundownPublisher_AssemblyDCStartOpcodeMessage 0x31020027L
#define MSG_RundownPublisher_AssemblyDCEndOpcodeMessage 0x31020028L
#define MSG_RundownPublisher_AppDomainDCStartOpcodeMessage 0x3102002BL
#define MSG_RundownPublisher_AppDomainDCEndOpcodeMessage 0x3102002CL
#define MSG_RundownPublisher_DomainModuleDCStartOpcodeMessage 0x3102002EL
#define MSG_RundownPublisher_DomainModuleDCEndOpcodeMessage 0x3102002FL
#define MSG_RundownPublisher_ThreadDCOpcodeMessage 0x31020030L
#define MSG_RundownPublisher_CLRStackWalkOpcodeMessage 0x310B0052L
#define MSG_RundownPublisher_ModuleRangeDCStartOpcodeMessage 0x3114000AL
#define MSG_RundownPublisher_ModuleRangeDCEndOpcodeMessage 0x3114000BL
#define MSG_StressPublisher_CLRStackWalkOpcodeMessage 0x320B0052L
#define MSG_PrivatePublisher_GCSettingsOpcodeMessage 0x3301000EL
#define MSG_PrivatePublisher_GCOptimizedOpcodeMessage 0x33010010L
#define MSG_PrivatePublisher_GCPerHeapHistoryOpcodeMessage 0x33010011L
#define MSG_PrivatePublisher_GCGlobalHeapHistoryOpcodeMessage 0x33010012L
#define MSG_PrivatePublisher_GCFullNotifyOpcodeMessage 0x33010013L
#define MSG_PrivatePublisher_GCJoinOpcodeMessage 0x33010014L
#define MSG_PrivatePublisher_GCMarkStackRootsOpcodeMessage 0x33010015L
#define MSG_PrivatePublisher_GCMarkFinalizeQueueRootsOpcodeMessage 0x33010016L
#define MSG_PrivatePublisher_GCMarkHandlesOpcodeMessage 0x33010017L
#define MSG_PrivatePublisher_GCMarkCardsOpcodeMessage 0x33010018L
#define MSG_PrivatePublisher_BGCBeginOpcodeMessage 0x33010019L
#define MSG_PrivatePublisher_BGC1stNonCondEndOpcodeMessage 0x3301001AL
#define MSG_PrivatePublisher_BGC1stConEndOpcodeMessage 0x3301001BL
#define MSG_PrivatePublisher_BGC2ndNonConBeginOpcodeMessage 0x3301001CL
#define MSG_PrivatePublisher_BGC2ndNonConEndOpcodeMessage 0x3301001DL
#define MSG_PrivatePublisher_BGC2ndConBeginOpcodeMessage 0x3301001EL
#define MSG_PrivatePublisher_BGC2ndConEndOpcodeMessage 0x3301001FL
#define MSG_PrivatePublisher_BGCPlanEndOpcodeMessage 0x33010020L
#define MSG_PrivatePublisher_BGCSweepEndOpcodeMessage 0x33010021L
#define MSG_PrivatePublisher_BGCDrainMarkOpcodeMessage 0x33010022L
#define MSG_PrivatePublisher_BGCRevisitOpcodeMessage 0x33010023L
#define MSG_PrivatePublisher_BGCOverflowOpcodeMessage 0x33010024L
#define MSG_PrivatePublisher_BGCAllocWaitBeginOpcodeMessage 0x33010025L
#define MSG_PrivatePublisher_BGCAllocWaitEndOpcodeMessage 0x33010026L
#define MSG_PrivatePublisher_FinalizeObjectOpcodeMessage 0x33010027L
#define MSG_PrivatePublisher_CCWRefCountChangeOpcodeMessage 0x33010028L
#define MSG_PrivatePublisher_SetGCHandleOpcodeMessage 0x3301002AL
#define MSG_PrivatePublisher_DestroyGCHandleOpcodeMessage 0x3301002BL
#define MSG_PrivatePublisher_PinPlugAtGCTimeOpcodeMessage 0x3301002CL
#define MSG_PrivatePublisher_GCDecisionOpcodeMessage 0x33010084L
#define MSG_PrivatePublisher_FailFastOpcodeMessage 0x33020034L
#define MSG_PrivatePublisher_ApplyPolicyStartOpcodeMessage 0x3309000AL
#define MSG_PrivatePublisher_ApplyPolicyEndOpcodeMessage 0x3309000BL
#define MSG_PrivatePublisher_LdLibShFolderOpcodeMessage 0x3309000CL
#define MSG_PrivatePublisher_LdLibShFolderEndOpcodeMessage 0x3309000DL
#define MSG_PrivatePublisher_PrestubWorkerOpcodeMessage 0x3309000EL
#define MSG_PrivatePublisher_PrestubWorkerEndOpcodeMessage 0x3309000FL
#define MSG_PrivatePublisher_GetInstallationStartOpcodeMessage 0x33090010L
#define MSG_PrivatePublisher_GetInstallationEndOpcodeMessage 0x33090011L
#define MSG_PrivatePublisher_OpenHModuleOpcodeMessage 0x33090012L
#define MSG_PrivatePublisher_OpenHModuleEndOpcodeMessage 0x33090013L
#define MSG_PrivatePublisher_ExplicitBindStartOpcodeMessage 0x33090014L
#define MSG_PrivatePublisher_ExplicitBindEndOpcodeMessage 0x33090015L
#define MSG_PrivatePublisher_ParseXmlOpcodeMessage 0x33090016L
#define MSG_PrivatePublisher_ParseXmlEndOpcodeMessage 0x33090017L
#define MSG_PrivatePublisher_InitDefaultDomainOpcodeMessage 0x33090018L
#define MSG_PrivatePublisher_InitDefaultDomainEndOpcodeMessage 0x33090019L
#define MSG_PrivatePublisher_InitSecurityOpcodeMessage 0x3309001AL
#define MSG_PrivatePublisher_InitSecurityEndOpcodeMessage 0x3309001BL
#define MSG_PrivatePublisher_AllowBindingRedirsOpcodeMessage 0x3309001CL
#define MSG_PrivatePublisher_AllowBindingRedirsEndOpcodeMessage 0x3309001DL
#define MSG_PrivatePublisher_EEConfigSyncOpcodeMessage 0x3309001EL
#define MSG_PrivatePublisher_EEConfigSyncEndOpcodeMessage 0x3309001FL
#define MSG_PrivatePublisher_FusionBindingOpcodeMessage 0x33090020L
#define MSG_PrivatePublisher_FusionBindingEndOpcodeMessage 0x33090021L
#define MSG_PrivatePublisher_LoaderCatchCallOpcodeMessage 0x33090022L
#define MSG_PrivatePublisher_LoaderCatchCallEndOpcodeMessage 0x33090023L
#define MSG_PrivatePublisher_FusionInitOpcodeMessage 0x33090024L
#define MSG_PrivatePublisher_FusionInitEndOpcodeMessage 0x33090025L
#define MSG_PrivatePublisher_FusionAppCtxOpcodeMessage 0x33090026L
#define MSG_PrivatePublisher_FusionAppCtxEndOpcodeMessage 0x33090027L
#define MSG_PrivatePublisher_Fusion2EEOpcodeMessage 0x33090028L
#define MSG_PrivatePublisher_Fusion2EEEndOpcodeMessage 0x33090029L
#define MSG_PrivatePublisher_SecurityCatchCallOpcodeMessage 0x3309002AL
#define MSG_PrivatePublisher_SecurityCatchCallEndOpcodeMessage 0x3309002BL
#define MSG_PrivatePublisher_EEStartupStartOpcodeMessage 0x33090080L
#define MSG_PrivatePublisher_EEStartupEndOpcodeMessage 0x33090081L
#define MSG_PrivatePublisher_EEConfigSetupOpcodeMessage 0x33090082L
#define MSG_PrivatePublisher_EEConfigSetupEndOpcodeMessage 0x33090083L
#define MSG_PrivatePublisher_LoadSystemBasesOpcodeMessage 0x33090084L
#define MSG_PrivatePublisher_LoadSystemBasesEndOpcodeMessage 0x33090085L
#define MSG_PrivatePublisher_ExecExeOpcodeMessage 0x33090086L
#define MSG_PrivatePublisher_ExecExeEndOpcodeMessage 0x33090087L
#define MSG_PrivatePublisher_MainOpcodeMessage 0x33090088L
#define MSG_PrivatePublisher_MainEndOpcodeMessage 0x33090089L
#define MSG_PrivatePublisher_BindingPolicyPhaseStartOpcodeMessage 0x330A0033L
#define MSG_PrivatePublisher_BindingPolicyPhaseEndOpcodeMessage 0x330A0034L
#define MSG_PrivatePublisher_BindingNgenPhaseStartOpcodeMessage 0x330A0035L
#define MSG_PrivatePublisher_BindingNgenPhaseEndOpcodeMessage 0x330A0036L
#define MSG_PrivatePublisher_BindingLoopupAndProbingPhaseStartOpcodeMessage 0x330A0037L
#define MSG_PrivatePublisher_BindingLookupAndProbingPhaseEndOpcodeMessage 0x330A0038L
#define MSG_PrivatePublisher_LoaderPhaseStartOpcodeMessage 0x330A0039L
#define MSG_PrivatePublisher_LoaderPhaseEndOpcodeMessage 0x330A003AL
#define MSG_PrivatePublisher_BindingPhaseStartOpcodeMessage 0x330A003BL
#define MSG_PrivatePublisher_BindingPhaseEndOpcodeMessage 0x330A003CL
#define MSG_PrivatePublisher_BindingDownloadPhaseStartOpcodeMessage 0x330A003DL
#define MSG_PrivatePublisher_BindingDownloadPhaseEndOpcodeMessage 0x330A003EL
#define MSG_PrivatePublisher_LoaderAssemblyInitPhaseStartOpcodeMessage 0x330A003FL
#define MSG_PrivatePublisher_LoaderAssemblyInitPhaseEndOpcodeMessage 0x330A0040L
#define MSG_PrivatePublisher_LoaderMappingPhaseStartOpcodeMessage 0x330A0041L
#define MSG_PrivatePublisher_LoaderMappingPhaseEndOpcodeMessage 0x330A0042L
#define MSG_PrivatePublisher_LoaderDeliverEventPhaseStartOpcodeMessage 0x330A0043L
#define MSG_PrivatePublisher_LoaderDeliverEventsPhaseEndOpcodeMessage 0x330A0044L
#define MSG_PrivatePublisher_FusionMessageOpcodeMessage 0x330A0046L
#define MSG_PrivatePublisher_FusionErrorCodeOpcodeMessage 0x330A0047L
#define MSG_PrivatePublisher_CLRStackWalkOpcodeMessage 0x330B0052L
#define MSG_PrivatePublisher_EvidenceGeneratedMessage 0x330C000AL
#define MSG_PrivatePublisher_NgenBindOpcodeMessage 0x330D0045L
#define MSG_PrivatePublisher_ModuleTransparencyComputationStartMessage 0x330E0053L
#define MSG_PrivatePublisher_ModuleTransparencyComputationEndMessage 0x330E0054L
#define MSG_PrivatePublisher_TypeTransparencyComputationStartMessage 0x330E0055L
#define MSG_PrivatePublisher_TypeTransparencyComputationEndMessage 0x330E0056L
#define MSG_PrivatePublisher_MethodTransparencyComputationStartMessage 0x330E0057L
#define MSG_PrivatePublisher_MethodTransparencyComputationEndMessage 0x330E0058L
#define MSG_PrivatePublisher_FieldTransparencyComputationStartMessage 0x330E0059L
#define MSG_PrivatePublisher_FieldTransparencyComputationEndMessage 0x330E005AL
#define MSG_PrivatePublisher_TokenTransparencyComputationStartMessage 0x330E005BL
#define MSG_PrivatePublisher_TokenTransparencyComputationEndMessage 0x330E005CL
#define MSG_PrivatePublisher_LoaderHeapPrivateAllocRequestMessage 0x33100061L
#define MSG_PrivatePublisher_MulticoreJitOpcodeMessage 0x3311000AL
#define MSG_PrivatePublisher_MulticoreJitOpcodeMethodCodeReturnedMessage 0x3311000BL
#define MSG_PrivatePublisher_ModuleRangeLoadOpcodeMessage 0x3314000AL
#define MSG_PrivatePublisher_IInspectableRuntimeClassNameOpcodeMessage 0x3316000BL
#define MSG_PrivatePublisher_WinRTUnboxOpcodeMessage 0x3316000CL
#define MSG_PrivatePublisher_CreateRCWOpcodeMessage 0x3316000DL
#define MSG_PrivatePublisher_RCWVarianceOpcodeMessage 0x3316000EL
#define MSG_PrivatePublisher_RCWIEnumerableCastingOpcodeMessage 0x3316000FL
#define MSG_PrivatePublisher_CreateCCWOpcodeMessage 0x33160010L
#define MSG_PrivatePublisher_CCWVarianceOpcodeMessage 0x33160011L
#define MSG_PrivatePublisher_ObjectVariantMarshallingToNativeOpcodeMessage 0x33160012L
#define MSG_PrivatePublisher_GetTypeFromGUIDOpcodeMessage 0x33160013L
#define MSG_PrivatePublisher_GetTypeFromProgIDOpcodeMessage 0x33160014L
#define MSG_PrivatePublisher_ConvertToCallbackEtwOpcodeMessage 0x33160015L
#define MSG_PrivatePublisher_BeginCreateManagedReferenceOpcodeMessage 0x33160016L
#define MSG_PrivatePublisher_EndCreateManagedReferenceOpcodeMessage 0x33160017L
#define MSG_PrivatePublisher_ObjectVariantMarshallingToManagedOpcodeMessage 0x33160018L
#define MSG_RuntimePublisher_GarbageCollectionTaskMessage 0x70000001L
#define MSG_RuntimePublisher_WorkerThreadCreationTaskMessage 0x70000002L
#define MSG_RuntimePublisher_IOThreadCreationTaskMessage 0x70000003L
#define MSG_RuntimePublisher_WorkerThreadRetirementTaskMessage 0x70000004L
#define MSG_RuntimePublisher_IOThreadRetirementTaskMessage 0x70000005L
#define MSG_RuntimePublisher_ThreadpoolSuspensionTaskMessage 0x70000006L
#define MSG_RuntimePublisher_ExceptionTaskMessage 0x70000007L
#define MSG_RuntimePublisher_ContentionTaskMessage 0x70000008L
#define MSG_RuntimePublisher_MethodTaskMessage 0x70000009L
#define MSG_RuntimePublisher_LoaderTaskMessage 0x7000000AL
#define MSG_RuntimePublisher_StackTaskMessage 0x7000000BL
#define MSG_RuntimePublisher_StrongNameVerificationTaskMessage 0x7000000CL
#define MSG_RuntimePublisher_AuthenticodeVerificationTaskMessage 0x7000000DL
#define MSG_RuntimePublisher_AppDomainResourceManagementTaskMessage 0x7000000EL
#define MSG_RuntimePublisher_ILStubTaskMessage 0x7000000FL
#define MSG_RuntimePublisher_ThreadPoolWorkerThreadTaskMessage 0x70000010L
#define MSG_RuntimePublisher_ThreadPoolWorkerThreadRetirementTaskMessage 0x70000011L
#define MSG_RuntimePublisher_ThreadPoolWorkerThreadAdjustmentTaskMessage 0x70000012L
#define MSG_RuntimePublisher_EEStartupTaskMessage 0x70000013L
#define MSG_RuntimePublisher_PerfTrackTaskMessage 0x70000014L
#define MSG_RuntimePublisher_TypeTaskMessage 0x70000015L
#define MSG_RuntimePublisher_ThreadPoolWorkingThreadCountTaskMessage 0x70000016L
#define MSG_RuntimePublisher_ThreadPoolTaskMessage 0x70000017L
#define MSG_RuntimePublisher_ThreadTaskMessage 0x70000018L
#define MSG_RuntimePublisher_DebugIPCEventTaskMessage 0x70000019L
#define MSG_RuntimePublisher_DebugExceptionProcessingTaskMessage 0x7000001AL
#define MSG_RundownPublisher_MethodTaskMessage 0x71000001L
#define MSG_RundownPublisher_LoaderTaskMessage 0x71000002L
#define MSG_RundownPublisher_StackTaskMessage 0x7100000BL
#define MSG_RundownPublisher_EEStartupTaskMessage 0x71000013L
#define MSG_RundownPublisher_PerfTrackTaskMessage 0x71000014L
#define MSG_StressPublisher_StressTaskMessage 0x72000001L
#define MSG_StressPublisher_StackTaskMessage 0x7200000BL
#define MSG_PrivatePublisher_GarbageCollectionTaskMessage 0x73000001L
#define MSG_PrivatePublisher_FailFastTaskMessage 0x73000002L
#define MSG_PrivatePublisher_StartupTaskMessage 0x73000009L
#define MSG_PrivatePublisher_BindingTaskMessage 0x7300000AL
#define MSG_PrivatePublisher_StackTaskMessage 0x7300000BL
#define MSG_PrivatePublisher_EvidenceGeneratedTaskMessage 0x7300000CL
#define MSG_PrivatePublisher_NgenBinderTaskMessage 0x7300000DL
#define MSG_PrivatePublisher_TransparencyComputationMessage 0x7300000EL
#define MSG_PrivatePublisher_LoaderHeapAllocationPrivateTaskMessage 0x73000010L
#define MSG_PrivatePublisher_MulticoreJitTaskMessage 0x73000011L
#define MSG_PrivatePublisher_PerfTrackTaskMessage 0x73000014L
#define MSG_PrivatePublisher_DynamicTypeUsageTaskMessage 0x73000016L
#define MSG_RuntimePublisher_GCStartEventMessage 0xB0000001L
#define MSG_RuntimePublisher_GCEndEventMessage 0xB0000002L
#define MSG_RuntimePublisher_GCRestartEEEndEventMessage 0xB0000003L
#define MSG_RuntimePublisher_GCHeapStatsEventMessage 0xB0000004L
#define MSG_RuntimePublisher_GCCreateSegmentEventMessage 0xB0000005L
#define MSG_RuntimePublisher_GCFreeSegmentEventMessage 0xB0000006L
#define MSG_RuntimePublisher_GCRestartEEBeginEventMessage 0xB0000007L
#define MSG_RuntimePublisher_GCSuspendEEEndEventMessage 0xB0000008L
#define MSG_RuntimePublisher_GCSuspendEEEventMessage 0xB0000009L
#define MSG_RuntimePublisher_GCAllocationTickEventMessage 0xB000000AL
#define MSG_RuntimePublisher_GCCreateConcurrentThreadEventMessage 0xB000000BL
#define MSG_RuntimePublisher_GCTerminateConcurrentThreadEventMessage 0xB000000CL
#define MSG_RuntimePublisher_GCFinalizersEndEventMessage 0xB000000DL
#define MSG_RuntimePublisher_GCFinalizersBeginEventMessage 0xB000000EL
#define MSG_RuntimePublisher_BulkTypeEventMessage 0xB000000FL
#define MSG_RuntimePublisher_GCBulkRootEdgeEventMessage 0xB0000010L
#define MSG_RuntimePublisher_GCBulkRootConditionalWeakTableElementEdgeEventMessage 0xB0000011L
#define MSG_RuntimePublisher_GCBulkNodeEventMessage 0xB0000012L
#define MSG_RuntimePublisher_GCBulkEdgeEventMessage 0xB0000013L
#define MSG_RuntimePublisher_GCSampledObjectAllocationHighEventMessage 0xB0000014L
#define MSG_RuntimePublisher_GCBulkSurvivingObjectRangesEventMessage 0xB0000015L
#define MSG_RuntimePublisher_GCBulkMovedObjectRangesEventMessage 0xB0000016L
#define MSG_RuntimePublisher_GCGenerationRangeEventMessage 0xB0000017L
#define MSG_RuntimePublisher_GCMarkStackRootsEventMessage 0xB0000019L
#define MSG_RuntimePublisher_GCMarkFinalizeQueueRootsEventMessage 0xB000001AL
#define MSG_RuntimePublisher_GCMarkHandlesEventMessage 0xB000001BL
#define MSG_RuntimePublisher_GCMarkOlderGenerationRootsEventMessage 0xB000001CL
#define MSG_RuntimePublisher_FinalizeObjectEventMessage 0xB000001DL
#define MSG_RuntimePublisher_SetGCHandleEventMessage 0xB000001EL
#define MSG_RuntimePublisher_DestroyGCHandleEventMessage 0xB000001FL
#define MSG_RuntimePublisher_GCSampledObjectAllocationLowEventMessage 0xB0000020L
#define MSG_RuntimePublisher_PinObjectAtGCTimeEventMessage 0xB0000021L
#define MSG_RuntimePublisher_GCTriggeredEventMessage 0xB0000023L
#define MSG_RuntimePublisher_GCBulkRootCCWEventMessage 0xB0000024L
#define MSG_RuntimePublisher_GCBulkRCWEventMessage 0xB0000025L
#define MSG_RuntimePublisher_GCBulkRootStaticVarEventMessage 0xB0000026L
#define MSG_RuntimePublisher_WorkerThreadCreateEventMessage 0xB0000028L
#define MSG_RuntimePublisher_WorkerThreadTerminateEventMessage 0xB0000029L
#define MSG_RuntimePublisher_WorkerThreadRetirementRetireThreadEventMessage 0xB000002AL
#define MSG_RuntimePublisher_WorkerThreadRetirementUnretireThreadEventMessage 0xB000002BL
#define MSG_RuntimePublisher_IOThreadCreateEventMessage 0xB000002CL
#define MSG_RuntimePublisher_IOThreadTerminateEventMessage 0xB000002DL
#define MSG_RuntimePublisher_IOThreadRetirementRetireThreadEventMessage 0xB000002EL
#define MSG_RuntimePublisher_IOThreadRetirementUnretireThreadEventMessage 0xB000002FL
#define MSG_RuntimePublisher_ThreadPoolSuspendSuspendThreadEventMessage 0xB0000030L
#define MSG_RuntimePublisher_ThreadPoolSuspendResumeThreadEventMessage 0xB0000031L
#define MSG_RuntimePublisher_ThreadPoolWorkerThreadEventMessage 0xB0000032L
#define MSG_RuntimePublisher_ThreadPoolWorkerThreadAdjustmentSampleEventMessage 0xB0000036L
#define MSG_RuntimePublisher_ThreadPoolWorkerThreadAdjustmentAdjustmentEventMessage 0xB0000037L
#define MSG_RuntimePublisher_ThreadPoolWorkerThreadAdjustmentStatsEventMessage 0xB0000038L
#define MSG_RuntimePublisher_ThreadPoolWorkingThreadCountEventMessage 0xB000003CL
#define MSG_RuntimePublisher_ThreadPoolEnqueueEventMessage 0xB000003DL
#define MSG_RuntimePublisher_ThreadPoolDequeueEventMessage 0xB000003EL
#define MSG_RuntimePublisher_ThreadPoolIOEnqueueEventMessage 0xB000003FL
#define MSG_RuntimePublisher_ThreadPoolIODequeueEventMessage 0xB0000040L
#define MSG_RuntimePublisher_ThreadPoolIOPackEventMessage 0xB0000041L
#define MSG_RuntimePublisher_ThreadCreatingEventMessage 0xB0000046L
#define MSG_RuntimePublisher_ThreadRunningEventMessage 0xB0000047L
#define MSG_RuntimePublisher_ExceptionExceptionThrownEventMessage 0xB0000050L
#define MSG_RuntimePublisher_ContentionStartEventMessage 0xB0000051L
#define MSG_RuntimePublisher_StackEventMessage 0xB0000052L
#define MSG_RuntimePublisher_AppDomainMemAllocatedEventMessage 0xB0000053L
#define MSG_RuntimePublisher_AppDomainMemSurvivedEventMessage 0xB0000054L
#define MSG_RuntimePublisher_ThreadCreatedEventMessage 0xB0000055L
#define MSG_RuntimePublisher_ThreadTerminatedEventMessage 0xB0000056L
#define MSG_RuntimePublisher_ThreadDomainEnterEventMessage 0xB0000057L
#define MSG_RuntimePublisher_ILStubGeneratedEventMessage 0xB0000058L
#define MSG_RuntimePublisher_ILStubCacheHitEventMessage 0xB0000059L
#define MSG_RuntimePublisher_ContentionStopEventMessage 0xB000005BL
#define MSG_RuntimePublisher_DCStartCompleteEventMessage 0xB0000087L
#define MSG_RuntimePublisher_DCEndCompleteEventMessage 0xB0000088L
#define MSG_RuntimePublisher_MethodDCStartEventMessage 0xB0000089L
#define MSG_RuntimePublisher_MethodDCEndEventMessage 0xB000008AL
#define MSG_RuntimePublisher_MethodDCEndVerboseEventMessage 0xB000008CL
#define MSG_RuntimePublisher_MethodLoadEventMessage 0xB000008DL
#define MSG_RuntimePublisher_MethodUnloadEventMessage 0xB000008EL
#define MSG_RuntimePublisher_MethodLoadVerboseEventMessage 0xB000008FL
#define MSG_RuntimePublisher_MethodUnloadVerboseEventMessage 0xB0000090L
#define MSG_RuntimePublisher_MethodJittingStartedEventMessage 0xB0000091L
#define MSG_RuntimePublisher_ModuleDCStartEventMessage 0xB0000095L
#define MSG_RuntimePublisher_ModuleDCEndEventMessage 0xB0000096L
#define MSG_RuntimePublisher_DomainModuleLoadEventMessage 0xB0000097L
#define MSG_RuntimePublisher_ModuleLoadEventMessage 0xB0000098L
#define MSG_RuntimePublisher_ModuleUnloadEventMessage 0xB0000099L
#define MSG_RuntimePublisher_AssemblyLoadEventMessage 0xB000009AL
#define MSG_RuntimePublisher_AssemblyUnloadEventMessage 0xB000009BL
#define MSG_RuntimePublisher_AppDomainLoadEventMessage 0xB000009CL
#define MSG_RuntimePublisher_AppDomainUnloadEventMessage 0xB000009DL
#define MSG_RuntimePublisher_ModuleRangeLoadEventMessage 0xB000009EL
#define MSG_RuntimePublisher_StrongNameVerificationStartEventMessage 0xB00000B5L
#define MSG_RuntimePublisher_StrongNameVerificationEndEventMessage 0xB00000B6L
#define MSG_RuntimePublisher_AuthenticodeVerificationStartEventMessage 0xB00000B7L
#define MSG_RuntimePublisher_AuthenticodeVerificationEndEventMessage 0xB00000B8L
#define MSG_RuntimePublisher_MethodJitInliningSucceededEventMessage 0xB00000B9L
#define MSG_RuntimePublisher_MethodJitInliningFailedEventMessage 0xB00000BAL
#define MSG_RuntimePublisher_RuntimeInformationEventMessage 0xB00000BBL
#define MSG_RuntimePublisher_MethodJitTailCallSucceededEventMessage 0xB00000BCL
#define MSG_RuntimePublisher_MethodJitTailCallFailedEventMessage 0xB00000BDL
#define MSG_RuntimePublisher_MethodILToNativeMapEventMessage 0xB00000BEL
#define MSG_RuntimePublisher_IncreaseMemoryPressureEventMessage 0xB00000C8L
#define MSG_RuntimePublisher_DecreaseMemoryPressureEventMessage 0xB00000C9L
#define MSG_RuntimePublisher_GCMarkWithTypeEventMessage 0xB00000CAL
#define MSG_RuntimePublisher_GCStart_V1EventMessage 0xB0010001L
#define MSG_RuntimePublisher_GCEnd_V1EventMessage 0xB0010002L
#define MSG_RuntimePublisher_GCRestartEEEnd_V1EventMessage 0xB0010003L
#define MSG_RuntimePublisher_GCHeapStats_V1EventMessage 0xB0010004L
#define MSG_RuntimePublisher_GCCreateSegment_V1EventMessage 0xB0010005L
#define MSG_RuntimePublisher_GCFreeSegment_V1EventMessage 0xB0010006L
#define MSG_RuntimePublisher_GCRestartEEBegin_V1EventMessage 0xB0010007L
#define MSG_RuntimePublisher_GCSuspendEEEnd_V1EventMessage 0xB0010008L
#define MSG_RuntimePublisher_GCSuspendEE_V1EventMessage 0xB0010009L
#define MSG_RuntimePublisher_GCAllocationTick_V1EventMessage 0xB001000AL
#define MSG_RuntimePublisher_GCCreateConcurrentThread_V1EventMessage 0xB001000BL
#define MSG_RuntimePublisher_GCTerminateConcurrentThread_V1EventMessage 0xB001000CL
#define MSG_RuntimePublisher_GCFinalizersEnd_V1EventMessage 0xB001000DL
#define MSG_RuntimePublisher_GCFinalizersBegin_V1EventMessage 0xB001000EL
#define MSG_RuntimePublisher_IOThreadCreate_V1EventMessage 0xB001002CL
#define MSG_RuntimePublisher_IOThreadTerminate_V1EventMessage 0xB001002DL
#define MSG_RuntimePublisher_IOThreadRetirementRetireThread_V1EventMessage 0xB001002EL
#define MSG_RuntimePublisher_IOThreadRetirementUnretireThread_V1EventMessage 0xB001002FL
#define MSG_RuntimePublisher_ExceptionExceptionThrown_V1EventMessage 0xB0010050L
#define MSG_RuntimePublisher_ContentionStart_V1EventMessage 0xB0010051L
#define MSG_RuntimePublisher_MethodLoad_V1EventMessage 0xB001008DL
#define MSG_RuntimePublisher_MethodUnload_V1EventMessage 0xB001008EL
#define MSG_RuntimePublisher_MethodLoadVerbose_V1EventMessage 0xB001008FL
#define MSG_RuntimePublisher_MethodUnloadVerbose_V1EventMessage 0xB0010090L
#define MSG_RuntimePublisher_MethodJittingStarted_V1EventMessage 0xB0010091L
#define MSG_RuntimePublisher_DomainModuleLoad_V1EventMessage 0xB0010097L
#define MSG_RuntimePublisher_ModuleLoad_V1EventMessage 0xB0010098L
#define MSG_RuntimePublisher_ModuleUnload_V1EventMessage 0xB0010099L
#define MSG_RuntimePublisher_AssemblyLoad_V1EventMessage 0xB001009AL
#define MSG_RuntimePublisher_AssemblyUnload_V1EventMessage 0xB001009BL
#define MSG_RuntimePublisher_AppDomainLoad_V1EventMessage 0xB001009CL
#define MSG_RuntimePublisher_AppDomainUnload_V1EventMessage 0xB001009DL
#define MSG_RuntimePublisher_StrongNameVerificationStart_V1EventMessage 0xB00100B5L
#define MSG_RuntimePublisher_StrongNameVerificationEnd_V1EventMessage 0xB00100B6L
#define MSG_RuntimePublisher_AuthenticodeVerificationStart_V1EventMessage 0xB00100B7L
#define MSG_RuntimePublisher_AuthenticodeVerificationEnd_V1EventMessage 0xB00100B8L
#define MSG_RuntimePublisher_GCStart_V2EventMessage 0xB0020001L
#define MSG_RuntimePublisher_GCAllocationTick_V2EventMessage 0xB002000AL
#define MSG_RuntimePublisher_MethodLoad_V2EventMessage 0xB002008DL
#define MSG_RuntimePublisher_MethodUnload_V2EventMessage 0xB002008EL
#define MSG_RuntimePublisher_MethodLoadVerbose_V2EventMessage 0xB002008FL
#define MSG_RuntimePublisher_MethodUnloadVerbose_V2EventMessage 0xB0020090L
#define MSG_RuntimePublisher_ModuleLoad_V2EventMessage 0xB0020098L
#define MSG_RuntimePublisher_ModuleUnload_V2EventMessage 0xB0020099L
#define MSG_RuntimePublisher_GCJoin_V2EventMessage 0xB00200CBL
#define MSG_RuntimePublisher_GCGlobalHeap_V2EventMessage 0xB00200CDL
#define MSG_RuntimePublisher_GCAllocationTick_V3EventMessage 0xB003000AL
#define MSG_RuntimePublisher_GCPerHeapHistory_V3EventMessage 0xB00300CCL
#define MSG_RundownPublisher_StackEventMessage 0xB1000000L
#define MSG_RundownPublisher_MethodDCStartEventMessage 0xB100008DL
#define MSG_RundownPublisher_MethodDCEndEventMessage 0xB100008EL
#define MSG_RundownPublisher_MethodDCStartVerboseEventMessage 0xB100008FL
#define MSG_RundownPublisher_MethodDCEndVerboseEventMessage 0xB1000090L
#define MSG_RundownPublisher_MethodDCStartILToNativeMapEventMessage 0xB1000095L
#define MSG_RundownPublisher_MethodDCEndILToNativeMapEventMessage 0xB1000096L
#define MSG_RundownPublisher_DomainModuleDCStartEventMessage 0xB1000097L
#define MSG_RundownPublisher_DomainModuleDCEndEventMessage 0xB1000098L
#define MSG_RundownPublisher_ModuleDCStartEventMessage 0xB1000099L
#define MSG_RundownPublisher_ModuleDCEndEventMessage 0xB100009AL
#define MSG_RundownPublisher_AssemblyDCStartEventMessage 0xB100009BL
#define MSG_RundownPublisher_AssemblyDCEndEventMessage 0xB100009CL
#define MSG_RundownPublisher_AppDomainDCStartEventMessage 0xB100009DL
#define MSG_RundownPublisher_AppDomainDCEndEventMessage 0xB100009EL
#define MSG_RundownPublisher_ThreadCreatedEventMessage 0xB100009FL
#define MSG_RundownPublisher_ModuleRangeDCStartEventMessage 0xB10000A0L
#define MSG_RundownPublisher_ModuleRangeDCEndEventMessage 0xB10000A1L
#define MSG_RundownPublisher_RuntimeInformationEventMessage 0xB10000BBL
#define MSG_RundownPublisher_MethodDCStart_V1EventMessage 0xB101008DL
#define MSG_RundownPublisher_MethodDCEnd_V1EventMessage 0xB101008EL
#define MSG_RundownPublisher_MethodDCStartVerbose_V1EventMessage 0xB101008FL
#define MSG_RundownPublisher_MethodDCEndVerbose_V1EventMessage 0xB1010090L
#define MSG_RundownPublisher_DCStartCompleteEventMessage 0xB1010091L
#define MSG_RundownPublisher_DCEndCompleteEventMessage 0xB1010092L
#define MSG_RundownPublisher_DCStartInitEventMessage 0xB1010093L
#define MSG_RundownPublisher_DCEndInitEventMessage 0xB1010094L
#define MSG_RundownPublisher_DomainModuleDCStart_V1EventMessage 0xB1010097L
#define MSG_RundownPublisher_DomainModuleDCEnd_V1EventMessage 0xB1010098L
#define MSG_RundownPublisher_ModuleDCStart_V1EventMessage 0xB1010099L
#define MSG_RundownPublisher_ModuleDCEnd_V1EventMessage 0xB101009AL
#define MSG_RundownPublisher_AssemblyDCStart_V1EventMessage 0xB101009BL
#define MSG_RundownPublisher_AssemblyDCEnd_V1EventMessage 0xB101009CL
#define MSG_RundownPublisher_AppDomainDCStart_V1EventMessage 0xB101009DL
#define MSG_RundownPublisher_AppDomainDCEnd_V1EventMessage 0xB101009EL
#define MSG_RundownPublisher_MethodDCStart_V2EventMessage 0xB102008DL
#define MSG_RundownPublisher_MethodDCEnd_V2EventMessage 0xB102008EL
#define MSG_RundownPublisher_MethodDCStartVerbose_V2EventMessage 0xB102008FL
#define MSG_RundownPublisher_MethodDCEndVerbose_V2EventMessage 0xB1020090L
#define MSG_RundownPublisher_ModuleDCStart_V2EventMessage 0xB1020099L
#define MSG_RundownPublisher_ModuleDCEnd_V2EventMessage 0xB102009AL
#define MSG_StressPublisher_StressLogEventMessage 0xB2000000L
#define MSG_StressPublisher_StackEventMessage 0xB2000001L
#define MSG_StressPublisher_StressLog_V1EventMessage 0xB2010000L
#define MSG_PrivatePublisher_GCDecisionEventMessage 0xB3000001L
#define MSG_PrivatePublisher_GCSettingsEventMessage 0xB3000002L
#define MSG_PrivatePublisher_GCOptimizedEventMessage 0xB3000003L
#define MSG_PrivatePublisher_GCGlobalHeapEventMessage 0xB3000005L
#define MSG_PrivatePublisher_GCJoinEventMessage 0xB3000006L
#define MSG_PrivatePublisher_GCMarkStackRootsEventMessage 0xB3000007L
#define MSG_PrivatePublisher_GCMarkFinalizeQueueRootsEventMessage 0xB3000008L
#define MSG_PrivatePublisher_GCMarkHandlesEventMessage 0xB3000009L
#define MSG_PrivatePublisher_GCMarkCardsEventMessage 0xB300000AL
#define MSG_PrivatePublisher_BGCBeginEventMessage 0xB300000BL
#define MSG_PrivatePublisher_BGC1stNonConEndEventMessage 0xB300000CL
#define MSG_PrivatePublisher_BGC1stConEndEventMessage 0xB300000DL
#define MSG_PrivatePublisher_BGC2ndNonConBeginEventMessage 0xB300000EL
#define MSG_PrivatePublisher_BGC2ndNonConEndEventMessage 0xB300000FL
#define MSG_PrivatePublisher_BGC2ndConBeginEventMessage 0xB3000010L
#define MSG_PrivatePublisher_BGC2ndConEndEventMessage 0xB3000011L
#define MSG_PrivatePublisher_BGCPlanEndEventMessage 0xB3000012L
#define MSG_PrivatePublisher_BGCSweepEndEventMessage 0xB3000013L
#define MSG_PrivatePublisher_BGCDrainMarkEventMessage 0xB3000014L
#define MSG_PrivatePublisher_BGCRevisitEventMessage 0xB3000015L
#define MSG_PrivatePublisher_BGCOverflowEventMessage 0xB3000016L
#define MSG_PrivatePublisher_BGCAllocWaitEventMessage 0xB3000017L
#define MSG_PrivatePublisher_GCFullNotifyEventMessage 0xB3000019L
#define MSG_PrivatePublisher_StartupEventMessage 0xB3000050L
#define MSG_PrivatePublisher_StackEventMessage 0xB3000097L
#define MSG_PrivatePublisher_ModuleRangeLoadEventMessage 0xB300009EL
#define MSG_PrivatePublisher_BindingEventMessage 0xB300009FL
#define MSG_PrivatePublisher_EvidenceGeneratedEventMessage 0xB30000B1L
#define MSG_PrivatePublisher_ModuleTransparencyComputationStartEventMessage 0xB30000B2L
#define MSG_PrivatePublisher_ModuleTransparencyComputationEndEventMessage 0xB30000B3L
#define MSG_PrivatePublisher_TypeTransparencyComputationStartEventMessage 0xB30000B4L
#define MSG_PrivatePublisher_TypeTransparencyComputationEndEventMessage 0xB30000B5L
#define MSG_PrivatePublisher_MethodTransparencyComputationStartEventMessage 0xB30000B6L
#define MSG_PrivatePublisher_MethodTransparencyComputationEndEventMessage 0xB30000B7L
#define MSG_PrivatePublisher_FieldTransparencyComputationStartEventMessage 0xB30000B8L
#define MSG_PrivatePublisher_FieldTransparencyComputationEndEventMessage 0xB30000B9L
#define MSG_PrivatePublisher_TokenTransparencyComputationStartEventMessage 0xB30000BAL
#define MSG_PrivatePublisher_TokenTransparencyComputationEndEventMessage 0xB30000BBL
#define MSG_PrivatePublisher_NgenBinderMessage 0xB30000BCL
#define MSG_PrivatePublisher_FailFastEventMessage 0xB30000BFL
#define MSG_PrivatePublisher_FinalizeObjectEventMessage 0xB30000C0L
#define MSG_PrivatePublisher_CCWRefCountChangeEventMessage 0xB30000C1L
#define MSG_PrivatePublisher_SetGCHandleEventMessage 0xB30000C2L
#define MSG_PrivatePublisher_DestroyGCHandleEventMessage 0xB30000C3L
#define MSG_PrivatePublisher_FusionMessageEventMessage 0xB30000C4L
#define MSG_PrivatePublisher_FusionErrorCodeEventMessage 0xB30000C5L
#define MSG_PrivatePublisher_PinPlugAtGCTimeEventMessage 0xB30000C7L
#define MSG_PrivatePublisher_MulticoreJitCommonEventMessage 0xB30000C9L
#define MSG_PrivatePublisher_MulticoreJitMethodCodeReturnedMessage 0xB30000CAL
#define MSG_PrivatePublisher_AllocRequestEventMessage 0xB3000136L
#define MSG_PrivatePublisher_IInspectableRuntimeClassNameMessage 0xB3000190L
#define MSG_PrivatePublisher_WinRTUnboxMessage 0xB3000191L
#define MSG_PrivatePublisher_CreateRcwMessage 0xB3000192L
#define MSG_PrivatePublisher_RcwVarianceMessage 0xB3000193L
#define MSG_PrivatePublisher_RCWIEnumerableCastingMessage 0xB3000194L
#define MSG_PrivatePublisher_CreateCCWMessage 0xB3000195L
#define MSG_PrivatePublisher_CCWVarianceMessage 0xB3000196L
#define MSG_PrivatePublisher_ObjectVariantMarshallingMessage 0xB3000197L
#define MSG_PrivatePublisher_GetTypeFromGUIDMessage 0xB3000198L
#define MSG_PrivatePublisher_GetTypeFromProgIDMessage 0xB3000199L
#define MSG_PrivatePublisher_ConvertToCallbackMessage 0xB300019AL
#define MSG_PrivatePublisher_BeginCreateManagedReferenceMessage 0xB300019BL
#define MSG_PrivatePublisher_EndCreateManagedReferenceMessage 0xB300019CL
#define MSG_PrivatePublisher_GCDecision_V1EventMessage 0xB3010001L
#define MSG_PrivatePublisher_GCSettings_V1EventMessage 0xB3010002L
#define MSG_PrivatePublisher_GCOptimized_V1EventMessage 0xB3010003L
#define MSG_PrivatePublisher_GCPerHeapHistory_V1EventMessage 0xB3010004L
#define MSG_PrivatePublisher_GCGlobalHeap_V1EventMessage 0xB3010005L
#define MSG_PrivatePublisher_GCJoin_V1EventMessage 0xB3010006L
#define MSG_PrivatePublisher_GCMarkStackRoots_V1EventMessage 0xB3010007L
#define MSG_PrivatePublisher_GCMarkFinalizeQueueRoots_V1EventMessage 0xB3010008L
#define MSG_PrivatePublisher_GCMarkHandles_V1EventMessage 0xB3010009L
#define MSG_PrivatePublisher_GCMarkCards_V1EventMessage 0xB301000AL
#define MSG_PrivatePublisher_GCFullNotify_V1EventMessage 0xB3010019L
#define MSG_PrivatePublisher_Startup_V1EventMessage 0xB3010050L
#define MSG_PrivatePublisher_GCPerHeapHistoryEventMessage 0xB3020004L
#define MSG_RuntimePublisher_GCSegment_SmallObjectHeapMapMessage 0xD0000001L
#define MSG_RuntimePublisher_GCSegment_LargeObjectHeapMapMessage 0xD0000002L
#define MSG_RuntimePublisher_GCSegment_ReadOnlyHeapMapMessage 0xD0000003L
#define MSG_RuntimePublisher_GCAllocation_SmallMapMessage 0xD0000004L
#define MSG_RuntimePublisher_GCAllocation_LargeMapMessage 0xD0000005L
#define MSG_RuntimePublisher_GCType_NonConcurrentGCMapMessage 0xD0000006L
#define MSG_RuntimePublisher_GCType_BackgroundGCMapMessage 0xD0000007L
#define MSG_RuntimePublisher_GCType_ForegroundGCMapMessage 0xD0000008L
#define MSG_RuntimePublisher_GCReason_AllocSmallMapMessage 0xD0000009L
#define MSG_RuntimePublisher_GCReason_InducedMapMessage 0xD000000AL
#define MSG_RuntimePublisher_GCReason_LowMemoryMapMessage 0xD000000BL
#define MSG_RuntimePublisher_GCReason_EmptyMapMessage 0xD000000CL
#define MSG_RuntimePublisher_GCReason_AllocLargeMapMessage 0xD000000DL
#define MSG_RuntimePublisher_GCReason_OutOfSpaceSmallObjectHeapMapMessage 0xD000000EL
#define MSG_RuntimePublisher_GCReason_OutOfSpaceLargeObjectHeapMapMessage 0xD000000FL
#define MSG_RuntimePublisher_GCReason_InducedNoForceMapMessage 0xD0000010L
#define MSG_RuntimePublisher_GCReason_StressMapMessage 0xD0000011L
#define MSG_RuntimePublisher_GCReason_InducedLowMemoryMapMessage 0xD0000012L
#define MSG_RuntimePublisher_GCSuspendEEReason_SuspendOtherMapMessage 0xD0000013L
#define MSG_RuntimePublisher_GCSuspendEEReason_SuspendForGCMapMessage 0xD0000014L
#define MSG_RuntimePublisher_GCSuspendEEReason_SuspendForAppDomainShutdownMapMessage 0xD0000015L
#define MSG_RuntimePublisher_GCSuspendEEReason_SuspendForCodePitchingMapMessage 0xD0000016L
#define MSG_RuntimePublisher_GCSuspendEEReason_SuspendForShutdownMapMessage 0xD0000017L
#define MSG_RuntimePublisher_GCSuspendEEReason_SuspendForDebuggerMapMessage 0xD0000018L
#define MSG_RuntimePublisher_GCSuspendEEReason_SuspendForGCPrepMapMessage 0xD0000019L
#define MSG_RuntimePublisher_GCSuspendEEReason_SuspendForDebuggerSweepMapMessage 0xD000001AL
#define MSG_RuntimePublisher_Contention_ManagedMapMessage 0xD000001BL
#define MSG_RuntimePublisher_Contention_NativeMapMessage 0xD000001CL
#define MSG_RuntimePublisher_TailCallType_OptimizedMapMessage 0xD000001DL
#define MSG_RuntimePublisher_TailCallType_RecursiveMapMessage 0xD000001EL
#define MSG_RuntimePublisher_TailCallType_HelperMapMessage 0xD000001FL
#define MSG_RuntimePublisher_ThreadAdjustmentReason_WarmupMapMessage 0xD0000020L
#define MSG_RuntimePublisher_ThreadAdjustmentReason_InitializingMapMessage 0xD0000021L
#define MSG_RuntimePublisher_ThreadAdjustmentReason_RandomMoveMapMessage 0xD0000022L
#define MSG_RuntimePublisher_ThreadAdjustmentReason_ClimbingMoveMapMessage 0xD0000023L
#define MSG_RuntimePublisher_ThreadAdjustmentReason_ChangePointMapMessage 0xD0000024L
#define MSG_RuntimePublisher_ThreadAdjustmentReason_StabilizingMapMessage 0xD0000025L
#define MSG_RuntimePublisher_ThreadAdjustmentReason_StarvationMapMessage 0xD0000026L
#define MSG_RuntimePublisher_ThreadAdjustmentReason_ThreadTimedOutMapMessage 0xD0000027L
#define MSG_RuntimePublisher_GCRootKind_Stack 0xD0000028L
#define MSG_RuntimePublisher_GCRootKind_Finalizer 0xD0000029L
#define MSG_RuntimePublisher_GCRootKind_Handle 0xD000002AL
#define MSG_RuntimePublisher_GCRootKind_Older 0xD000002BL
#define MSG_RuntimePublisher_GCRootKind_SizedRef 0xD000002CL
#define MSG_RuntimePublisher_GCRootKind_Overflow 0xD000002DL
#define MSG_RuntimePublisher_GCHandleKind_WeakShortMessage 0xD000002EL
#define MSG_RuntimePublisher_GCHandleKind_WeakLongMessage 0xD000002FL
#define MSG_RuntimePublisher_GCHandleKind_StrongMessage 0xD0000030L
#define MSG_RuntimePublisher_GCHandleKind_PinnedMessage 0xD0000031L
#define MSG_RuntimePublisher_GCHandleKind_VariableMessage 0xD0000032L
#define MSG_RuntimePublisher_GCHandleKind_RefCountedMessage 0xD0000033L
#define MSG_RuntimePublisher_GCHandleKind_DependentMessage 0xD0000034L
#define MSG_RuntimePublisher_GCHandleKind_AsyncPinnedMessage 0xD0000035L
#define MSG_RuntimePublisher_GCHandleKind_SizedRefMessage 0xD0000036L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_ModuleSection 0xD3000001L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_EETableSection 0xD3000002L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_WriteDataSection 0xD3000003L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_WriteableDataSection 0xD3000004L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_DataSection 0xD3000005L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_RVAStaticsSection 0xD3000006L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_EEDataSection 0xD3000007L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_DelayLoadInfoTableEagerSection 0xD3000008L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_DelayLoadInfoTableSection 0xD3000009L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_EEReadonlyData 0xD300000AL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_ReadonlyData 0xD300000BL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_ClassSection 0xD300000CL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_CrossDomainInfoSection 0xD300000DL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_MethodDescSection 0xD300000EL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_MethodDescWriteableSection 0xD300000FL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_ExceptionSection 0xD3000010L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_InstrumentSection 0xD3000011L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_VirtualImportThunkSection 0xD3000012L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_ExternalMethodThunkSection 0xD3000013L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_HelperTableSection 0xD3000014L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_MethodPrecodeWriteableSection 0xD3000015L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_MethodPrecodeWriteSection 0xD3000016L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_MethodPrecodeSection 0xD3000017L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_Win32ResourcesSection 0xD3000018L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_HeaderSection 0xD3000019L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_MetadataSection 0xD300001AL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_DelayLoadInfoSection 0xD300001BL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_ImportTableSection 0xD300001CL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_CodeSection 0xD300001DL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_CodeHeaderSection 0xD300001EL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_CodeManagerSection 0xD300001FL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_UnwindDataSection 0xD3000020L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_RuntimeFunctionSection 0xD3000021L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_StubsSection 0xD3000022L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_StubDispatchDataSection 0xD3000023L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_ExternalMethodDataSection 0xD3000024L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_DelayLoadInfoDelayListSection 0xD3000025L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_ReadonlySharedSection 0xD3000026L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_ReadonlySection 0xD3000027L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_ILSection 0xD3000028L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_GCInfoSection 0xD3000029L
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_ILMetadataSection 0xD300002AL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_ResourcesSection 0xD300002BL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_CompressedMapsSection 0xD300002CL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_DebugSection 0xD300002DL
#define MSG_PrivatePublisher_ModuleRangeSectionTypeMap_BaseRelocsSection 0xD300002EL
#define MSG_PrivatePublisher_GCHandleKind_WeakShortMessage 0xD300002FL
#define MSG_PrivatePublisher_GCHandleKind_WeakLongMessage 0xD3000030L
#define MSG_PrivatePublisher_GCHandleKind_StrongMessage 0xD3000031L
#define MSG_PrivatePublisher_GCHandleKind_PinnedMessage 0xD3000032L
#define MSG_PrivatePublisher_GCHandleKind_VariableMessage 0xD3000033L
#define MSG_PrivatePublisher_GCHandleKind_RefCountedMessage 0xD3000034L
#define MSG_PrivatePublisher_GCHandleKind_DependentMessage 0xD3000035L
#define MSG_PrivatePublisher_GCHandleKind_AsyncPinnedMessage 0xD3000036L
#define MSG_PrivatePublisher_GCHandleKind_SizedRefMessage 0xD3000037L
#define MSG_RuntimePublisher_ModuleRangeTypeMap_ColdRangeMessage 0xF0000001L
#define MSG_RuntimePublisher_AppDomain_DefaultMapMessage 0xF0000002L
#define MSG_RuntimePublisher_AppDomain_ExecutableMapMessage 0xF0000003L
#define MSG_RuntimePublisher_AppDomain_SharedMapMessage 0xF0000004L
#define MSG_RuntimePublisher_Assembly_DomainNeutralMapMessage 0xF0000005L
#define MSG_RuntimePublisher_Assembly_DynamicMapMessage 0xF0000006L
#define MSG_RuntimePublisher_Assembly_NativeMapMessage 0xF0000007L
#define MSG_RuntimePublisher_Assembly_CollectibleMapMessage 0xF0000008L
#define MSG_RuntimePublisher_Module_DomainNeutralMapMessage 0xF0000009L
#define MSG_RuntimePublisher_Module_NativeMapMessage 0xF000000AL
#define MSG_RuntimePublisher_Module_DynamicMapMessage 0xF000000BL
#define MSG_RuntimePublisher_Module_ManifestMapMessage 0xF000000CL
#define MSG_RuntimePublisher_Method_DynamicMapMessage 0xF000000DL
#define MSG_RuntimePublisher_Method_GenericMapMessage 0xF000000EL
#define MSG_RuntimePublisher_Method_HasSharedGenericCodeMapMessage 0xF000000FL
#define MSG_RuntimePublisher_Method_JittedMapMessage 0xF0000010L
#define MSG_RuntimePublisher_StartupMode_ManagedExeMapMessage 0xF0000011L
#define MSG_RuntimePublisher_StartupMode_HostedCLRMapMessage 0xF0000012L
#define MSG_RuntimePublisher_StartupMode_IjwDllMapMessage 0xF0000013L
#define MSG_RuntimePublisher_StartupMode_ComActivatedMapMessage 0xF0000014L
#define MSG_RuntimePublisher_StartupMode_OtherMapMessage 0xF0000015L
#define MSG_RuntimePublisher_RuntimeSku_DesktopCLRMapMessage 0xF0000016L
#define MSG_RuntimePublisher_RuntimeSku_CoreCLRMapMessage 0xF0000017L
#define MSG_RuntimePublisher_ExceptionThrown_HasInnerExceptionMapMessage 0xF0000018L
#define MSG_RuntimePublisher_ExceptionThrown_NestedMapMessage 0xF0000019L
#define MSG_RuntimePublisher_ExceptionThrown_ReThrownMapMessage 0xF000001AL
#define MSG_RuntimePublisher_ExceptionThrown_CorruptedStateMapMessage 0xF000001BL
#define MSG_RuntimePublisher_ExceptionThrown_CLSCompliantMapMessage 0xF000001CL
#define MSG_RuntimePublisher_ILStubGenerated_ReverseInteropMapMessage 0xF000001DL
#define MSG_RuntimePublisher_ILStubGenerated_COMInteropMapMessage 0xF000001EL
#define MSG_RuntimePublisher_ILStubGenerated_NGenedStubMapMessage 0xF000001FL
#define MSG_RuntimePublisher_ILStubGenerated_DelegateMapMessage 0xF0000020L
#define MSG_RuntimePublisher_ILStubGenerated_VarArgMapMessage 0xF0000021L
#define MSG_RuntimePublisher_ILStubGenerated_UnmanagedCalleeMapMessage 0xF0000022L
#define MSG_RuntimePublisher_Startup_CONCURRENT_GCMapMessage 0xF0000023L
#define MSG_RuntimePublisher_Startup_LOADER_OPTIMIZATION_SINGLE_DOMAINMapMessage 0xF0000024L
#define MSG_RuntimePublisher_Startup_LOADER_OPTIMIZATION_MULTI_DOMAINMapMessage 0xF0000025L
#define MSG_RuntimePublisher_Startup_LOADER_SAFEMODEMapMessage 0xF0000026L
#define MSG_RuntimePublisher_Startup_LOADER_SETPREFERENCEMapMessage 0xF0000027L
#define MSG_RuntimePublisher_Startup_SERVER_GCMapMessage 0xF0000028L
#define MSG_RuntimePublisher_Startup_HOARD_GC_VMMapMessage 0xF0000029L
#define MSG_RuntimePublisher_Startup_SINGLE_VERSION_HOSTING_INTERFACEMapMessage 0xF000002AL
#define MSG_RuntimePublisher_Startup_LEGACY_IMPERSONATIONMapMessage 0xF000002BL
#define MSG_RuntimePublisher_Startup_DISABLE_COMMITTHREADSTACKMapMessage 0xF000002CL
#define MSG_RuntimePublisher_Startup_ALWAYSFLOW_IMPERSONATIONMapMessage 0xF000002DL
#define MSG_RuntimePublisher_Startup_TRIM_GC_COMMITMapMessage 0xF000002EL
#define MSG_RuntimePublisher_Startup_ETWMapMessage 0xF000002FL
#define MSG_RuntimePublisher_Startup_SERVER_BUILDMapMessage 0xF0000030L
#define MSG_RuntimePublisher_Startup_ARMMapMessage 0xF0000031L
#define MSG_RuntimePublisher_TypeFlags_Delegate 0xF0000032L
#define MSG_RuntimePublisher_TypeFlags_Finalizable 0xF0000033L
#define MSG_RuntimePublisher_TypeFlags_ExternallyImplementedCOMObject 0xF0000034L
#define MSG_RuntimePublisher_TypeFlags_Array 0xF0000035L
#define MSG_RuntimePublisher_GCRootFlags_Pinning 0xF0000036L
#define MSG_RuntimePublisher_GCRootFlags_WeakRef 0xF0000037L
#define MSG_RuntimePublisher_GCRootFlags_Interior 0xF0000038L
#define MSG_RuntimePublisher_GCRootFlags_RefCounted 0xF0000039L
#define MSG_RuntimePublisher_GCRootStaticVarFlags_ThreadLocal 0xF000003AL
#define MSG_RuntimePublisher_GCRootCCWFlags_Strong 0xF000003BL
#define MSG_RuntimePublisher_GCRootCCWFlags_Pegged 0xF000003CL
#define MSG_RuntimePublisher_ThreadFlags_GCSpecial 0xF000003DL
#define MSG_RuntimePublisher_ThreadFlags_Finalizer 0xF000003EL
#define MSG_RuntimePublisher_ThreadFlags_ThreadPoolWorker 0xF000003FL
#define MSG_RundownPublisher_ModuleRangeTypeMap_ColdRangeMessage 0xF1000001L
#define MSG_RundownPublisher_AppDomain_DefaultMapMessage 0xF1000002L
#define MSG_RundownPublisher_AppDomain_ExecutableMapMessage 0xF1000003L
#define MSG_RundownPublisher_AppDomain_SharedMapMessage 0xF1000004L
#define MSG_RundownPublisher_Assembly_DomainNeutralMapMessage 0xF1000005L
#define MSG_RundownPublisher_Assembly_DynamicMapMessage 0xF1000006L
#define MSG_RundownPublisher_Assembly_NativeMapMessage 0xF1000007L
#define MSG_RundownPublisher_Assembly_CollectibleMapMessage 0xF1000008L
#define MSG_RundownPublisher_Module_DomainNeutralMapMessage 0xF1000009L
#define MSG_RundownPublisher_Module_NativeMapMessage 0xF100000AL
#define MSG_RundownPublisher_Module_DynamicMapMessage 0xF100000BL
#define MSG_RundownPublisher_Module_ManifestMapMessage 0xF100000CL
#define MSG_RundownPublisher_Method_DynamicMapMessage 0xF100000DL
#define MSG_RundownPublisher_Method_GenericMapMessage 0xF100000EL
#define MSG_RundownPublisher_Method_HasSharedGenericCodeMapMessage 0xF100000FL
#define MSG_RundownPublisher_Method_JittedMapMessage 0xF1000010L
#define MSG_RundownPublisher_StartupMode_ManagedExeMapMessage 0xF1000011L
#define MSG_RundownPublisher_StartupMode_HostedCLRMapMessage 0xF1000012L
#define MSG_RundownPublisher_StartupMode_IjwDllMapMessage 0xF1000013L
#define MSG_RundownPublisher_StartupMode_ComActivatedMapMessage 0xF1000014L
#define MSG_RundownPublisher_StartupMode_OtherMapMessage 0xF1000015L
#define MSG_RundownPublisher_RuntimeSku_DesktopCLRMapMessage 0xF1000016L
#define MSG_RundownPublisher_RuntimeSku_CoreCLRMapMessage 0xF1000017L
#define MSG_RundownPublisher_Startup_CONCURRENT_GCMapMessage 0xF1000018L
#define MSG_RundownPublisher_Startup_LOADER_OPTIMIZATION_SINGLE_DOMAINMapMessage 0xF1000019L
#define MSG_RundownPublisher_Startup_LOADER_OPTIMIZATION_MULTI_DOMAINMapMessage 0xF100001AL
#define MSG_RundownPublisher_Startup_LOADER_SAFEMODEMapMessage 0xF100001BL
#define MSG_RundownPublisher_Startup_LOADER_SETPREFERENCEMapMessage 0xF100001CL
#define MSG_RundownPublisher_Startup_SERVER_GCMapMessage 0xF100001DL
#define MSG_RundownPublisher_Startup_HOARD_GC_VMMapMessage 0xF100001EL
#define MSG_RundownPublisher_Startup_SINGLE_VERSION_HOSTING_INTERFACEMapMessage 0xF100001FL
#define MSG_RundownPublisher_Startup_LEGACY_IMPERSONATIONMapMessage 0xF1000020L
#define MSG_RundownPublisher_Startup_DISABLE_COMMITTHREADSTACKMapMessage 0xF1000021L
#define MSG_RundownPublisher_Startup_ALWAYSFLOW_IMPERSONATIONMapMessage 0xF1000022L
#define MSG_RundownPublisher_Startup_TRIM_GC_COMMITMapMessage 0xF1000023L
#define MSG_RundownPublisher_Startup_ETWMapMessage 0xF1000024L
#define MSG_RundownPublisher_Startup_SERVER_BUILDMapMessage 0xF1000025L
#define MSG_RundownPublisher_Startup_ARMMapMessage 0xF1000026L
#define MSG_RundownPublisher_ThreadFlags_GCSpecial 0xF1000027L
#define MSG_RundownPublisher_ThreadFlags_Finalizer 0xF1000028L
#define MSG_RundownPublisher_ThreadFlags_ThreadPoolWorker 0xF1000029L
#define MSG_PrivatePublisher_ModuleRangeIBCTypeMap_IBCUnprofiledSectionMessage 0xF3000001L
#define MSG_PrivatePublisher_ModuleRangeIBCTypeMap_IBCProfiledSectionMessage 0xF3000002L
#define MSG_PrivatePublisher_ModuleRangeTypeMap_HotRangeMessage 0xF3000003L
#define MSG_PrivatePublisher_ModuleRangeTypeMap_WarmRangeMessage 0xF3000004L
#define MSG_PrivatePublisher_ModuleRangeTypeMap_ColdRangeMessage 0xF3000005L
#define MSG_PrivatePublisher_ModuleRangeTypeMap_HotColdRangeMessage 0xF3000006L
