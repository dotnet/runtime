<?xml version="1.0" encoding="utf-8"?>
<Project>

  <!-- Packaging projects (.pkgproj) are non-SDK-style, so they need to directly import Directory.Build.props -->
  <Import Project="../Directory.Build.props" />

  <Import Project="$(NuGetPackageRoot)\microsoft.dotnet.build.tasks.packaging\$(MicrosoftDotNetBuildTasksPackagingVersion)\build\Microsoft.DotNet.Build.Tasks.Packaging.props" />

  <Import Project="packaging.props" />

  <PropertyGroup>
    <!-- defined in Packaging.targets, but we need this before targets are imported -->
    <PackagePlatform>AnyCPU</PackagePlatform>

    <!-- build the transport package which includes product and symbols in addition to standard packages
    This is a legacy setting as we tend to use symbol packages for symbol indexing and we don't use
    transport packages to flow dependencies anymore -->
    <CreatePackedPackage Condition="'$(CreatePackedPackage)' == ''">false</CreatePackedPackage>

    <!-- indicates that lib prefix is not added to library names for Unix-like operating systems -->
    <SkipLibraryPrefixFromUnix>true</SkipLibraryPrefixFromUnix>

    <SupportedPackageOSGroups Condition="'$(SupportedPackageOSGroups)' == ''">windows;OSX;Android;Linux;FreeBSD;NetBSD;illumos;Solaris</SupportedPackageOSGroups>
    <SupportedPackageOSGroups>;$(SupportedPackageOSGroups);</SupportedPackageOSGroups>

    <_isSupportedOSGroup>true</_isSupportedOSGroup>
  </PropertyGroup>

  <!-- derive an OS Group based on the OS Family -->
  <PropertyGroup>
    <_derivedPackageTargetOSGroup Condition="'$(_derivedPackageTargetOSGroup)' == '' and '$(TargetOS)' != ''">$(TargetOS)</_derivedPackageTargetOSGroup>
    <_derivedPackageTargetOSGroup Condition="'$(_derivedPackageTargetOSGroup)' == ''">Linux</_derivedPackageTargetOSGroup>

    <_isSupportedOSGroup Condition="!$(SupportedPackageOSGroups.Contains(';$(_derivedPackageTargetOSGroup);'))">false</_isSupportedOSGroup>
  </PropertyGroup>

  <!-- _packageTargetOSGroup is used to control the runtime package imports, don't import runtime package targets for
       an unsupported OS Group -->
  <PropertyGroup Condition="'$(PackageTargetRuntime)' != '' and '$(_isSupportedOSGroup)' == 'true'">
    <!-- Android will use Linux package definitions -->
    <_packageTargetOSGroup>$(_derivedPackageTargetOSGroup)</_packageTargetOSGroup>
    <_packageTargetOSGroup Condition="'$(_derivedPackageTargetOSGroup)' == 'Android'">Linux</_packageTargetOSGroup>
  </PropertyGroup>
  <PropertyGroup>
    <SkipPackageFileCheck>true</SkipPackageFileCheck>
    <OutputPath>$(PackageOutputPath)</OutputPath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsLineupPackage)' == 'true'">
    <SkipValidatePackage>true</SkipValidatePackage>
    <IncludeRuntimeJson>true</IncludeRuntimeJson>
  </PropertyGroup>

  <ItemGroup Condition="$(SupportedPackageOSGroups.Contains(';Linux;'))">
    <OfficialBuildRID Include="linux-x64" />
    <OfficialBuildRID Include="linux-musl-x64" />
    <OfficialBuildRID Include="rhel.6-x64" />
    <OfficialBuildRID Include="linux-arm">
      <Platform>arm</Platform>
    </OfficialBuildRID>
    <OfficialBuildRID Include="linux-musl-arm">
      <Platform>arm</Platform>
    </OfficialBuildRID>
    <OfficialBuildRID Include="linux-arm64">
      <Platform>arm64</Platform>
    </OfficialBuildRID>
    <OfficialBuildRID Include="linux-musl-arm64">
      <Platform>arm64</Platform>
    </OfficialBuildRID>
    <OfficialBuildRID Include="tizen.4.0.0-armel">
      <Platform>armel</Platform>
    </OfficialBuildRID>
    <OfficialBuildRID Include="tizen.5.0.0-armel">
      <Platform>armel</Platform>
    </OfficialBuildRID>
  </ItemGroup>
  <ItemGroup Condition="$(SupportedPackageOSGroups.Contains(';OSX;'))">
    <OfficialBuildRID Include="osx-x64" />
  </ItemGroup>
  <ItemGroup Condition="$(SupportedPackageOSGroups.Contains(';FreeBSD;'))">
    <OfficialBuildRID Include="freebsd-x64" />
  </ItemGroup>
  <ItemGroup Condition="$(SupportedPackageOSGroups.Contains(';NetBSD;'))">
    <OfficialBuildRID Include="netbsd-x64" />
  </ItemGroup>
  <ItemGroup Condition="$(SupportedPackageOSGroups.Contains(';illumos;'))">
    <OfficialBuildRID Include="illumos-x64" />
  </ItemGroup>
  <ItemGroup Condition="$(SupportedPackageOSGroups.Contains(';Solaris;'))">
    <OfficialBuildRID Include="solaris-x64" />
  </ItemGroup>
  <ItemGroup Condition="$(SupportedPackageOSGroups.Contains(';windows;'))">
    <OfficialBuildRID Include="win-x86">
      <Platform>x86</Platform>
    </OfficialBuildRID>
    <OfficialBuildRID Include="win-x64" />
    <OfficialBuildRID Include="win-arm">
      <Platform>arm</Platform>
    </OfficialBuildRID>
    <OfficialBuildRID Include="win-arm64">
      <Platform>arm64</Platform>
    </OfficialBuildRID>
  </ItemGroup>
  <ItemGroup>
    <!-- Ensure we have a RID-specific package for the current build, even if it isn't in our official set, but
         don't build the RID-specific package if we're in an unsupported os family -->
    <BuildRID Include="@(OfficialBuildRID)" Exclude="$(PackageRID)"/>
    <BuildRID Include="$(PackageRID)"
              Condition="'$(_isSupportedOSGroup)' == 'true'">
      <Platform Condition="'$(TargetArchitecture)' == 'x64'">amd64</Platform>
      <Platform Condition="'$(TargetArchitecture)' != 'x64'">$(TargetArchitecture)</Platform>
    </BuildRID>
  </ItemGroup>

  <ItemGroup>
    <_project Include="@(BuildRID)">
      <Platform Condition="'%(Platform)' == ''">amd64</Platform>
      <PackageTargetRuntime>%(Identity)</PackageTargetRuntime>
      <AdditionalProperties>PackageTargetRuntime=%(Identity);Platform=%(Platform)</AdditionalProperties>
    </_project>

    <_buildRidProjects Include="@(_project->'$(MSBuildProjectName).pkgproj')" />
    <!-- Only include rid projects for a builds file, not for a lineup package -->
    <Project Condition="'$(IsLineupPackage)' != 'true'" Include="@(_buildRidProjects)" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsLineupPackage)' == 'true'">
    <!-- Include project references for a lineup package to generate the runtime.json file -->
    <ProjectReference Include="@(_buildRidProjects)" />
  </ItemGroup>
</Project>
