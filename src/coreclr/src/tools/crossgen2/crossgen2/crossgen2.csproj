<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <AssemblyName>crossgen2</AssemblyName>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <OutputType>Exe</OutputType>
    <TargetFramework>$(NetCoreAppCurrent)</TargetFramework>
    <NoWarn>8002,NU1701</NoWarn>
    <Platforms>x64;x86</Platforms>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <AppendTargetFrameworkToOutputPath Condition="'$(BuildingInsideVisualStudio)' == 'true'">true</AppendTargetFrameworkToOutputPath>
    <OutputPath>$(BinDir)/crossgen2</OutputPath>
    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
    <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
    <RuntimeIdentifiers>linux-x64;linux-musl-x64;win-x64</RuntimeIdentifiers>
    <Configurations>Debug;Release;Checked</Configurations>
  </PropertyGroup>

  <ItemGroup Label="Embedded Resources">
    <EmbeddedResource Include="Properties\Resources.resx">
      <GenerateSource>true</GenerateSource>
      <ClassName>System.SR</ClassName>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\ILCompiler.DependencyAnalysisFramework\ILCompiler.DependencyAnalysisFramework.csproj" />
    <ProjectReference Include="..\ILCompiler.TypeSystem.ReadyToRun\ILCompiler.TypeSystem.ReadyToRun.csproj" />
    <ProjectReference Include="..\ILCompiler.ReadyToRun\ILCompiler.ReadyToRun.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="..\..\Common\CommandLine\CommandLineException.cs" />
    <Compile Include="..\..\Common\CommandLine\CommandLineHelpers.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.CommandLine">
      <Version>$(SystemCommandLineVersion)</Version>
    </PackageReference>
  </ItemGroup>

  <PropertyGroup>
    <HostOSComponent Condition="$([MSBuild]::IsOsPlatform('WINDOWS'))">win</HostOSComponent>
    <HostOSComponent Condition="$([MSBuild]::IsOsPlatform('LINUX'))">lnx</HostOSComponent>
    <HostOSComponent Condition="$([MSBuild]::IsOsPlatform('OSX'))">osx</HostOSComponent>
    <HostSpec>host-$(HostOSComponent)-$(TargetArchitecture)</HostSpec>

    <CrossHostArch></CrossHostArch>
    <CrossHostArch Condition="'$(TargetArchitecture)' == 'arm64'">x64</CrossHostArch>
    <CrossHostSpec Condition="'$(CrossHostArch)' != ''">host-$(HostOSComponent)-$(CrossHostArch)</CrossHostSpec>

    <TargetOSComponent Condition="'$(TargetOS)' == 'Windows_NT'">win</TargetOSComponent>
    <TargetOSComponent Condition="'$(TargetOS)' == 'Linux'">lnx</TargetOSComponent>
    <TargetOSComponent Condition="'$(TargetOS)' == 'OSX'">osx</TargetOSComponent>
    <TargetSpec>target-$(TargetOSComponent)-$(TargetArchitecture)</TargetSpec>

    <LibraryNamePrefix>lib</LibraryNamePrefix>
    <LibraryNamePrefix Condition="'$(HostOSComponent)' == 'win'"></LibraryNamePrefix>
    <LibraryNameExtension Condition="'$(HostOSComponent)' == 'win'">.dll</LibraryNameExtension>
    <LibraryNameExtension Condition="'$(HostOSComponent)' == 'lnx'">.so</LibraryNameExtension>
    <LibraryNameExtension Condition="'$(HostOSComponent)' == 'osx'">.dylib</LibraryNameExtension>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="$(BinDir)\$(LibraryNamePrefix)jitinterface$(LibraryNameExtension)"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="PreserveNewest"
      Link="$(HostSpec)\%(FileName)%(Extension)"
     />

    <Content Include="$(BinDir)\$(NativeArchFolder)$(LibraryNamePrefix)clrjit$(LibraryNameExtension)"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="PreserveNewest"
      Link="$(HostSpec)\$(TargetSpec)\$(LibraryNamePrefix)clrjitilc$(LibraryNameExtension)"
     />
  </ItemGroup>

  <ItemGroup Condition="'$(CrossHostArch)' != ''">
    <Content Include="$(BinDir)\$(CrossHostArch)\jitinterface$(LibraryNameExtension)"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="PreserveNewest"
      Link="$(CrossHostSpec)\%(FileName)%(Extension)"
     />

    <Content Include="$(BinDir)\$(CrossHostArch)\$(LibraryNamePrefix)clrjit$(LibraryNameExtension)"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="PreserveNewest"
      Link="$(CrossHostSpec)\$(TargetSpec)\$(LibraryNamePrefix)clrjitilc$(LibraryNameExtension)"
     />
  </ItemGroup>

  <Target Name="ValidateHostAndTarget" BeforeTargets="Build">
    <Error Condition="'$(HostOSComponent)' == ''" Text="Hosting OS not identified" />
    <Error Condition="'$(TargetOSComponent)' == ''" Text="Target OS not identified" />
  </Target>

  <Target Name="GenerateDepsJsonFile" Returns="$(ProjectDepsFilePath)" DependsOnTargets="GenerateBuildDependencyFile" />

  <Target Name="RemoveLongNameDacFromDepsJson" AfterTargets="ResolveRuntimePackAssets" BeforeTargets="GenerateBuildDependencyFile" Condition="'$(RemoveLongNameDac)' == 'true'">
    <ItemGroup>
      <RuntimePackAsset Remove="@(RuntimePackAsset)" Condition="$([System.String]::new('%(FileName)').StartsWith('mscordaccore_'))" />
    </ItemGroup>
  </Target>
</Project>
