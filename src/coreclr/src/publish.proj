<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />

  <Import Project="$(PackagesDir)/$(FeedTasksPackage.ToLower())/$(FeedTasksPackageVersion)/build/$(FeedTasksPackage).targets" />
  <Import Project="$(PackagesDir)/$(PublishSymbolsPackage.ToLower())/$(PublishSymbolsPackageVersion)/build/PublishSymbols.targets" />

  <UsingTask TaskName="CreateAzureContainer" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.CloudTestTasks.dll"/>
  <UsingTask TaskName="UploadToAzure" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.CloudTestTasks.dll"/>

  <PropertyGroup>
    <PackagesPatternDir Condition="'$(PackagesPatternDir)' == ''">$(PackagesBinDir)</PackagesPatternDir>
    <PackagesPattern Condition="'$(PackagesPattern)' == ''">$(PackagesPatternDir)pkg\*.nupkg</PackagesPattern>
    <TestNativeBinariesPattern Condition="'$(TestNativeBinariesPattern)' == ''">$(OutputPath)\bin\**</TestNativeBinariesPattern>
    <SymbolsPackagesPattern Condition="'$(SymbolPackagesPattern)' == ''">$(PackagesPatternDir)symbolpkg\*.nupkg</SymbolsPackagesPattern>
    <PublishFlatContainer Condition="'$(PublishFlatContainer)' == ''">true</PublishFlatContainer>
    <RelativePathWithSlash>$(RelativePath)</RelativePathWithSlash>
    <RelativePathWithSlash Condition="'$(RelativePathWithSlash)' != '' and !HasTrailingSlash('$(RelativePathWithSlash)')">$(RelativePathWithSlash)/</RelativePathWithSlash>
  </PropertyGroup>

  <PropertyGroup>
    <ContainerName>$(ContainerName.Replace(".","-"))</ContainerName>
    <AccountName>$(CloudDropAccountName)</AccountName>
    <AccountKey>$(CloudDropAccessToken)</AccountKey>
  </PropertyGroup>

  <Target Name="PublishPackages" Condition="'$(__PublishPackages)' == 'true' and ('$(OfficialPublish)' != 'true' or '$(__BuildType)' == 'Release')">
    <PropertyGroup>
      <ExpectedFeedUrl Condition="'$(ExpectedFeedUrl)' == ''">https://$(AccountName).blob.core.windows.net/$(ContainerName)/$(RelativePathWithSlash)index.json</ExpectedFeedUrl>
    </PropertyGroup>
    <ItemGroup>
      <ItemsToPush Remove="*.nupkg" />
      <ItemsToPush Include="$(PackagesPattern)" Exclude="$(SymbolsPackagesPattern)">
        <ManifestArtifactData>NonShipping=true</ManifestArtifactData>
      </ItemsToPush>
      <ItemsToPush>
        <RelativeBlobPath>$(RelativePathWithSlash)$([System.String]::Copy('%(RecursiveDir)%(Filename)%(Extension)').Replace('\' ,'/'))</RelativeBlobPath>
      </ItemsToPush>
    </ItemGroup>

    <!-- create the container if it doesn't exist -->
    <CreateAzureContainer AccountKey="$(AccountKey)"
                          AccountName="$(AccountName)"
                          ContainerName="$(ContainerName)"
                          IsPublic="true" />

    <PushToBlobFeed Condition="'$(PublishFlatContainer)' == 'false'"
                    ExpectedFeedUrl="$(ExpectedFeedUrl)"
                    AccountKey="$(AccountKey)"
                    ItemsToPush="@(ItemsToPush)"
                    Overwrite="$(OverwriteOnPublish)"
                    ManifestName="$(GitHubRepositoryName)"
                    ManifestBuildId="$(ManifestBuildId)"
                    ManifestBranch="$(ManifestBranch)"
                    ManifestCommit="$(ManifestCommit)" />

    <!-- now upload the items -->
    <UploadToAzure  Condition="'$(PublishFlatContainer)' == 'true'"
                    AccountKey="$(AccountKey)"
                    AccountName="$(AccountName)"
                    ContainerName="$(ContainerName)"
                    Items="@(ItemsToPush)"
                    Overwrite="$(OverwriteOnPublish)" />
  </Target>

  <Target Name="PublishSymbolPackages" Condition="'$(__PublishSymbols)' == 'true' and ('$(OfficialPublish)' != 'true' or '$(__BuildType)' == 'Release')">
    <PropertyGroup>
      <ExpectedFeedUrl Condition="'$(ExpectedFeedUrl)' == ''">https://$(AccountName).blob.core.windows.net/$(ContainerName)/$(RelativePathWithSlash)index.json</ExpectedFeedUrl>
    </PropertyGroup>
    <ItemGroup>
      <ItemsToPush Remove="*.nupkg" />
      <ItemsToPush Include="$(SymbolsPackagesPattern)"/>
      <ItemsToPush>
        <RelativeBlobPath>$(RelativePathWithSlash)$([System.String]::Copy('%(RecursiveDir)%(Filename)%(Extension)').Replace('\' ,'/'))</RelativeBlobPath>
      </ItemsToPush>
    </ItemGroup>

   <!-- create the container if it doesn't exist -->
    <CreateAzureContainer AccountKey="$(AccountKey)"
                          AccountName="$(AccountName)"
                          ContainerName="$(ContainerName)"
                          IsPublic="true" />

    <PushToBlobFeed Condition="'$(PublishFlatContainer)' == 'false'"
                    ExpectedFeedUrl="$(ExpectedFeedUrl)"
                    AccountKey="$(AccountKey)"
                    ItemsToPush="@(ItemsToPush)"
                    Overwrite="$(OverwriteOnPublish)"
                    ManifestName="$(GitHubRepositoryName)"
                    ManifestBuildId="$(ManifestBuildId)"
                    ManifestBranch="$(ManifestBranch)"
                    ManifestCommit="$(ManifestCommit)" />

    <!-- now upload the items -->
    <UploadToAzure  Condition="'$(PublishFlatContainer)' == 'true'"
                    AccountKey="$(AccountKey)"
                    AccountName="$(AccountName)"
                    ContainerName="$(ContainerName)"
                    Items="@(ItemsToPush)"
                    Overwrite="$(OverwriteOnPublish)" />
  </Target>

  <Target Name="PublishTestNativeBinaries" Condition="'$(PublishTestNativeBins)' == 'true' and '$(OfficialPublish)' != 'true'">
    <PropertyGroup>
      <RelativePath Condition="'$(RelativePath)' == ''">$(__BuildType)/TestNativeBins</RelativePath>
      <ExpectedFeedUrl Condition="'$(ExpectedFeedUrl)' == ''">https://$(AccountName).blob.core.windows.net/$(ContainerName)/$(RelativePath)/index.json</ExpectedFeedUrl>
    </PropertyGroup>
    <ItemGroup>
      <ItemsToPush Remove="*.nupkg" />
      <ItemsToPush Include="$(TestNativeBinariesPattern)" />
      <ItemsToPush>
        <RelativeBlobPath>$(RelativePath)/$([System.String]::Copy('%(RecursiveDir)%(Filename)%(Extension)').Replace('\' ,'/'))</RelativeBlobPath>
      </ItemsToPush>
    </ItemGroup>

    <!-- create the container if it doesn't exist -->
    <CreateAzureContainer AccountKey="$(AccountKey)"
                          AccountName="$(AccountName)"
                          ContainerName="$(ContainerName)"
                          IsPublic="true" />

    <PushToBlobFeed Condition="'$(PublishFlatContainer)' == 'false'"
                    ExpectedFeedUrl="$(ExpectedFeedUrl)"
                    AccountKey="$(AccountKey)"
                    ItemsToPush="@(ItemsToPush)"
                    Overwrite="$(OverwriteOnPublish)" />

    <!-- now upload the items -->
    <UploadToAzure  Condition="'$(PublishFlatContainer)' == 'true'"
                    AccountKey="$(AccountKey)"
                    AccountName="$(AccountName)"
                    ContainerName="$(ContainerName)"
                    Items="@(ItemsToPush)"
                    Overwrite="$(OverwriteOnPublish)" />
  </Target>

  <Target Name="PublishAllSymbols" 
          DependsOnTargets="SetupPublishSymbols;PublishSymbols" />

  <Target Name="SetupPublishSymbols">
    <PropertyGroup>
      <ConvertPortablePdbsToWindowsPdbs Condition="'$(ConvertPortablePdbsToWindowsPdbs)'==''">true</ConvertPortablePdbsToWindowsPdbs>
      <SymbolVerboseLogging>true</SymbolVerboseLogging>
    </PropertyGroup>
    <ItemGroup>
      <SymbolPackagesToPublish Include="$(SymbolsPackagesPattern)" />
    </ItemGroup>
    <Error Condition="'$(SymbolServerPath)'==''" Text="Missing property SymbolServerPath" />
    <Error Condition="'$(SymbolServerPAT)'==''" Text="Missing property SymbolServerPAT" />
    <Message Importance="High" Text="Publishing @(SymbolPackagesToPublish) to $(SymbolServerPath)"/>
  </Target>

  <Target Name="Build" DependsOnTargets="PublishPackages;PublishSymbolPackages;PublishTestNativeBinaries"/>
</Project>
