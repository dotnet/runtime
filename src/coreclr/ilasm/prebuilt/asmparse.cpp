#line 8 "btyaccpa.ske"

/*
** @(#)btyaccpar, based on byacc 1.8 (Berkeley)
*/
#define YYBTYACC 1

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 2 "asmparse.y"

/* Licensed to the .NET Foundation under one or more agreements.*/
/* The .NET Foundation licenses this file to you under the MIT license.*/

/**/
/* File asmparse.y*/
/**/
#include "ilasmpch.h"

#include "grammar_before.cpp"


#line 15 "asmparse.y"
typedef union {
        CorRegTypeAttr classAttr;
        CorMethodAttr methAttr;
        CorFieldAttr fieldAttr;
        CorMethodImpl implAttr;
        CorEventAttr  eventAttr;
        CorPropertyAttr propAttr;
        CorPinvokeMap pinvAttr;
        CorDeclSecurity secAct;
        CorFileFlags fileAttr;
        CorAssemblyFlags asmAttr;
        CorAssemblyFlags asmRefAttr;
        CorTypeAttr exptAttr;
        CorManifestResourceFlags manresAttr;
        double*  float64;
        __int64* int64;
        __int32  int32;
        char*    string;
        BinStr*  binstr;
        Labels*  labels;
        Instr*   instr;         /* instruction opcode*/
        NVPair*  pair;
        pTyParList typarlist;
        mdToken token;
        TypeDefDescr* tdd;
        CustomDescr*  cad;
        unsigned short opcode;
} YYSTYPE;
#define YYSTYPE YYSTYPE
#line 59 "asmparse.cpp.tab.c"
#define ERROR_ 257
#define BAD_COMMENT_ 258
#define BAD_LITERAL_ 259
#define ID 260
#define DOTTEDNAME 261
#define QSTRING 262
#define SQSTRING 263
#define INT32 264
#define INT64 265
#define FLOAT64 266
#define HEXBYTE 267
#define TYPEDEF_T 268
#define TYPEDEF_M 269
#define TYPEDEF_F 270
#define TYPEDEF_TS 271
#define TYPEDEF_MR 272
#define TYPEDEF_CA 273
#define DCOLON 274
#define ELLIPSIS 275
#define VOID_ 276
#define BOOL_ 277
#define CHAR_ 278
#define UNSIGNED_ 279
#define INT_ 280
#define INT8_ 281
#define INT16_ 282
#define INT32_ 283
#define INT64_ 284
#define FLOAT_ 285
#define FLOAT32_ 286
#define FLOAT64_ 287
#define BYTEARRAY_ 288
#define UINT_ 289
#define UINT8_ 290
#define UINT16_ 291
#define UINT32_ 292
#define UINT64_ 293
#define FLAGS_ 294
#define CALLCONV_ 295
#define MDTOKEN_ 296
#define OBJECT_ 297
#define STRING_ 298
#define NULLREF_ 299
#define DEFAULT_ 300
#define CDECL_ 301
#define VARARG_ 302
#define STDCALL_ 303
#define THISCALL_ 304
#define FASTCALL_ 305
#define CLASS_ 306
#define BYREFLIKE_ 307
#define TYPEDREF_ 308
#define UNMANAGED_ 309
#define FINALLY_ 310
#define HANDLER_ 311
#define CATCH_ 312
#define FILTER_ 313
#define FAULT_ 314
#define EXTENDS_ 315
#define IMPLEMENTS_ 316
#define TO_ 317
#define AT_ 318
#define TLS_ 319
#define TRUE_ 320
#define FALSE_ 321
#define _INTERFACEIMPL 322
#define VALUE_ 323
#define VALUETYPE_ 324
#define NATIVE_ 325
#define INSTANCE_ 326
#define SPECIALNAME_ 327
#define FORWARDER_ 328
#define STATIC_ 329
#define PUBLIC_ 330
#define PRIVATE_ 331
#define FAMILY_ 332
#define FINAL_ 333
#define SYNCHRONIZED_ 334
#define INTERFACE_ 335
#define SEALED_ 336
#define NESTED_ 337
#define ABSTRACT_ 338
#define AUTO_ 339
#define SEQUENTIAL_ 340
#define EXPLICIT_ 341
#define ANSI_ 342
#define UNICODE_ 343
#define AUTOCHAR_ 344
#define IMPORT_ 345
#define ENUM_ 346
#define VIRTUAL_ 347
#define NOINLINING_ 348
#define AGGRESSIVEINLINING_ 349
#define NOOPTIMIZATION_ 350
#define AGGRESSIVEOPTIMIZATION_ 351
#define UNMANAGEDEXP_ 352
#define BEFOREFIELDINIT_ 353
#define STRICT_ 354
#define RETARGETABLE_ 355
#define WINDOWSRUNTIME_ 356
#define NOPLATFORM_ 357
#define METHOD_ 358
#define FIELD_ 359
#define PINNED_ 360
#define MODREQ_ 361
#define MODOPT_ 362
#define SERIALIZABLE_ 363
#define PROPERTY_ 364
#define TYPE_ 365
#define ASSEMBLY_ 366
#define FAMANDASSEM_ 367
#define FAMORASSEM_ 368
#define PRIVATESCOPE_ 369
#define HIDEBYSIG_ 370
#define NEWSLOT_ 371
#define RTSPECIALNAME_ 372
#define PINVOKEIMPL_ 373
#define _CTOR 374
#define _CCTOR 375
#define LITERAL_ 376
#define NOTSERIALIZED_ 377
#define INITONLY_ 378
#define REQSECOBJ_ 379
#define CIL_ 380
#define OPTIL_ 381
#define MANAGED_ 382
#define FORWARDREF_ 383
#define PRESERVESIG_ 384
#define RUNTIME_ 385
#define INTERNALCALL_ 386
#define _IMPORT 387
#define NOMANGLE_ 388
#define LASTERR_ 389
#define WINAPI_ 390
#define AS_ 391
#define BESTFIT_ 392
#define ON_ 393
#define OFF_ 394
#define CHARMAPERROR_ 395
#define INSTR_NONE 396
#define INSTR_VAR 397
#define INSTR_I 398
#define INSTR_I8 399
#define INSTR_R 400
#define INSTR_BRTARGET 401
#define INSTR_METHOD 402
#define INSTR_FIELD 403
#define INSTR_TYPE 404
#define INSTR_STRING 405
#define INSTR_SIG 406
#define INSTR_TOK 407
#define INSTR_SWITCH 408
#define _CLASS 409
#define _NAMESPACE 410
#define _METHOD 411
#define _FIELD 412
#define _DATA 413
#define _THIS 414
#define _BASE 415
#define _NESTER 416
#define _EMITBYTE 417
#define _TRY 418
#define _MAXSTACK 419
#define _LOCALS 420
#define _ENTRYPOINT 421
#define _ZEROINIT 422
#define _EVENT 423
#define _ADDON 424
#define _REMOVEON 425
#define _FIRE 426
#define _OTHER 427
#define _PROPERTY 428
#define _SET 429
#define _GET 430
#define _PERMISSION 431
#define _PERMISSIONSET 432
#define REQUEST_ 433
#define DEMAND_ 434
#define ASSERT_ 435
#define DENY_ 436
#define PERMITONLY_ 437
#define LINKCHECK_ 438
#define INHERITCHECK_ 439
#define REQMIN_ 440
#define REQOPT_ 441
#define REQREFUSE_ 442
#define PREJITGRANT_ 443
#define PREJITDENY_ 444
#define NONCASDEMAND_ 445
#define NONCASLINKDEMAND_ 446
#define NONCASINHERITANCE_ 447
#define _LINE 448
#define P_LINE 449
#define _LANGUAGE 450
#define _CUSTOM 451
#define INIT_ 452
#define _SIZE 453
#define _PACK 454
#define _VTABLE 455
#define _VTFIXUP 456
#define FROMUNMANAGED_ 457
#define CALLMOSTDERIVED_ 458
#define _VTENTRY 459
#define RETAINAPPDOMAIN_ 460
#define _FILE 461
#define NOMETADATA_ 462
#define _HASH 463
#define _ASSEMBLY 464
#define _PUBLICKEY 465
#define _PUBLICKEYTOKEN 466
#define ALGORITHM_ 467
#define _VER 468
#define _LOCALE 469
#define EXTERN_ 470
#define _MRESOURCE 471
#define _MODULE 472
#define _EXPORT 473
#define LEGACY_ 474
#define LIBRARY_ 475
#define X86_ 476
#define AMD64_ 477
#define ARM_ 478
#define ARM64_ 479
#define MARSHAL_ 480
#define CUSTOM_ 481
#define SYSSTRING_ 482
#define FIXED_ 483
#define VARIANT_ 484
#define CURRENCY_ 485
#define SYSCHAR_ 486
#define DECIMAL_ 487
#define DATE_ 488
#define BSTR_ 489
#define TBSTR_ 490
#define LPSTR_ 491
#define LPWSTR_ 492
#define LPTSTR_ 493
#define OBJECTREF_ 494
#define IUNKNOWN_ 495
#define IDISPATCH_ 496
#define STRUCT_ 497
#define SAFEARRAY_ 498
#define BYVALSTR_ 499
#define LPVOID_ 500
#define ANY_ 501
#define ARRAY_ 502
#define LPSTRUCT_ 503
#define IIDPARAM_ 504
#define IN_ 505
#define OUT_ 506
#define OPT_ 507
#define _PARAM 508
#define _OVERRIDE 509
#define WITH_ 510
#define NULL_ 511
#define HRESULT_ 512
#define CARRAY_ 513
#define USERDEFINED_ 514
#define RECORD_ 515
#define FILETIME_ 516
#define BLOB_ 517
#define STREAM_ 518
#define STORAGE_ 519
#define STREAMED_OBJECT_ 520
#define STORED_OBJECT_ 521
#define BLOB_OBJECT_ 522
#define CF_ 523
#define CLSID_ 524
#define VECTOR_ 525
#define _SUBSYSTEM 526
#define _CORFLAGS 527
#define ALIGNMENT_ 528
#define _IMAGEBASE 529
#define _STACKRESERVE 530
#define _TYPEDEF 531
#define _TEMPLATE 532
#define _TYPELIST 533
#define _MSCORLIB 534
#define P_DEFINE 535
#define P_UNDEF 536
#define P_IFDEF 537
#define P_IFNDEF 538
#define P_ELSE 539
#define P_ENDIF 540
#define P_INCLUDE 541
#define CONSTRAINT_ 542
#define CONST_ 543
#define YYERRCODE 256
static int yylhs[] = {                                        -1,
    0,    0,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  137,  137,
   38,   38,  134,  134,  134,    2,    2,    1,    1,    1,
    9,   26,   26,   25,   25,   25,  135,  135,  135,  135,
  135,  136,  136,  136,  136,  136,  136,  136,  136,  136,
   95,   95,   95,   95,   96,   96,   96,   96,   10,   11,
   75,   74,   74,   61,   63,   63,   63,   64,   64,   64,
   67,   67,  133,  133,  133,   62,   62,   62,   62,   62,
   62,  131,  131,  131,  120,   12,   12,   12,   12,   12,
   12,  119,  138,  114,  139,  140,  112,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,  141,  141,  142,  142,  113,  113,
  143,  143,   58,   58,   59,   59,   71,   71,   18,   18,
   18,   18,   18,   18,   18,   19,   19,   20,   21,   21,
   70,   70,   70,   69,   69,   60,   23,   23,   24,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  117,   81,   81,   81,   81,   81,   81,   81,   81,   81,
   81,   81,   81,   81,   81,   81,   81,    4,    4,   37,
   37,   16,   16,   77,   77,   77,   77,   77,   77,   77,
    7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
    8,    8,   78,   76,   76,   76,   76,   76,   76,  145,
  145,   83,   83,   83,  146,  146,  151,  151,  151,  151,
  151,  151,  151,  151,  147,   84,   84,   84,  148,  148,
  152,  152,  152,  152,  152,  152,  152,  153,   40,   40,
   36,   36,  154,  115,   80,   80,   80,   80,   80,   80,
   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
   80,   80,   80,   80,   80,   80,   80,   85,   85,   85,
   85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
   85,   85,   85,    3,    3,    3,   13,   13,   13,   13,
   13,   82,   82,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   82,  155,  116,  116,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  159,  160,  157,  162,
  162,  161,  161,  161,  164,  163,  163,  163,  163,  167,
  167,  167,  170,  165,  168,  169,  166,  166,  166,  118,
  171,  171,  173,  173,  173,  172,  172,  174,  174,   14,
   14,  175,  175,  175,  175,  175,  175,  175,  175,  175,
  175,  175,  175,  175,  175,  175,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,  176,   33,   33,   34,   34,
   41,   41,   41,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   44,
   44,   44,   45,   45,   45,   49,   49,   48,   48,   47,
   47,   46,   46,   50,   50,   51,   51,   51,   52,   52,
   52,   52,   53,   53,  150,   97,   98,   99,  100,  101,
  102,  103,  104,  105,  106,  107,  108,  109,  110,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,    6,    6,    6,    6,    6,   55,   55,   56,
   56,   57,   57,   27,   27,   28,   28,   29,   29,   29,
   72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
    5,    5,   73,   73,   73,   73,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   22,   22,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   32,   32,   31,   31,   31,   31,
   31,  132,  132,  132,  132,  132,  132,   66,   66,   66,
   65,   65,   89,   89,   86,   86,   87,   17,   17,   39,
   39,   39,   39,   39,   39,   39,   39,   88,   88,   88,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   88,  177,  177,  121,  121,  121,  121,  121,  121,
  121,  121,  121,  121,  121,  122,  122,   90,   90,   91,
   91,  178,  123,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,  124,  124,  179,  179,  179,   68,   68,
  180,  180,  180,  180,  180,  180,  181,  183,  182,  125,
  125,  126,  126,  184,  184,  184,  184,  127,  149,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,  128,
  128,  185,  185,  185,  185,  185,  185,  185,  129,  129,
   94,   94,   94,  130,  130,  186,  186,  186,  186,
};
static int yylen[] = {                                         2,
    0,    2,    4,    4,    3,    1,    1,    1,    1,    1,
    1,    4,    4,    4,    4,    1,    1,    1,    2,    2,
    3,    2,    2,    1,    1,    1,    4,    1,    0,    2,
    1,    3,    2,    4,    6,    1,    1,    1,    1,    3,
    1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
    4,    2,    3,    2,    2,    2,    1,    1,    2,    1,
    2,    4,    6,    3,    5,    7,    9,    3,    4,    7,
    1,    1,    1,    2,    0,    2,    2,    0,    6,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    2,
    3,    1,    2,    3,    7,    0,    2,    2,    2,    2,
    2,    3,    3,    2,    1,    4,    3,    0,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
    2,    2,    2,    5,    0,    2,    0,    2,    0,    2,
    3,    1,    0,    1,    1,    3,    0,    3,    1,    1,
    1,    1,    1,    1,    4,    0,    2,    4,    0,    2,
    5,    4,    3,    0,    2,    3,    0,    1,    5,    3,
    4,    4,    4,    1,    1,    1,    1,    1,    2,    2,
    4,   13,   22,    1,    1,    5,    3,    7,    5,    4,
    7,    0,    2,    2,    2,    2,    2,    2,    2,    5,
    2,    2,    2,    2,    2,    2,    5,    0,    2,    0,
    2,    0,    3,    9,    9,    7,    7,    1,    1,    1,
    2,    2,    1,    4,    0,    1,    1,    2,    2,    2,
    2,    1,    4,    2,    5,    3,    2,    2,    1,    4,
    3,    0,    2,    2,    0,    2,    2,    2,    2,    2,
    1,    1,    1,    1,    9,    0,    2,    2,    0,    2,
    2,    2,    2,    1,    1,    1,    1,    1,    0,    4,
    1,    3,    1,   13,    0,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    5,    8,    6,    5,    0,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    4,    4,
    4,    4,    5,    1,    1,    1,    0,    4,    4,    4,
    4,    0,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    5,    1,    0,    2,
    2,    1,    2,    4,    5,    1,    1,    1,    1,    2,
    1,    1,    1,    1,    1,    4,    6,    4,    4,   11,
    1,    5,    3,    7,    5,    5,    3,    1,    2,    2,
    1,    2,    4,    4,    1,    2,    2,    2,    2,    2,
    2,    2,    1,    2,    1,    1,    1,    4,    4,    2,
    4,    2,    0,    1,    1,    3,    1,    3,    1,    0,
    3,    5,    4,    3,    5,    5,    5,    5,    5,    5,
    2,    2,    2,    2,    2,    2,    4,    4,    4,    4,
    4,    4,    4,    4,    5,    5,    5,    5,    4,    4,
    4,    4,    4,    4,    3,    2,    0,    1,    1,    2,
    1,    1,    1,    1,    4,    4,    5,    4,    4,    4,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    8,    8,    8,    8,    7,    7,    7,    7,    7,    0,
    2,    2,    0,    2,    2,    0,    2,    0,    2,    0,
    2,    0,    2,    0,    2,    0,    2,    2,    0,    2,
    3,    2,    0,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
    5,    3,    2,    2,    2,    2,    2,    5,    4,    6,
    2,    4,    0,    3,    3,    1,    1,    0,    3,    0,
    1,    1,    3,    0,    1,    1,    3,    1,    3,    4,
    4,    4,    4,    5,    1,    1,    1,    1,    1,    1,
    1,    3,    1,    3,    4,    1,    0,   10,    6,    5,
    6,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    2,    2,    1,    1,    1,
    1,    2,    3,    4,    6,    5,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    1,    2,    2,    4,    1,
    2,    1,    2,    1,    2,    1,    2,    1,    2,    1,
    1,    0,    5,    0,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    2,    2,    1,
    1,    1,    1,    1,    3,    2,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    1,    3,    2,    3,    4,    2,    2,
    2,    5,    5,    7,    4,    3,    2,    3,    2,    1,
    1,    2,    3,    2,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    2,    2,    1,
    1,    1,    1,    1,    1,    3,    0,    1,    1,    3,
    2,    6,    7,    3,    3,    3,    6,    0,    1,    3,
    5,    6,    4,    4,    1,    3,    3,    1,    1,    1,
    1,    4,    1,    6,    6,    6,    4,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    3,    2,    5,    4,    7,    6,
    7,    6,    9,    8,    3,    8,    4,    0,    2,    0,
    1,    3,    3,    0,    2,    2,    2,    3,    2,    2,
    2,    2,    2,    0,    2,    3,    1,    1,    1,    1,
    3,    8,    2,    3,    1,    1,    3,    3,    3,    4,
    6,    0,    2,    3,    1,    3,    1,    4,    3,    0,
    2,    2,    2,    3,    3,    3,    3,    3,    3,    0,
    2,    2,    3,    3,    4,    2,    1,    1,    3,    5,
    0,    2,    2,    0,    2,    4,    3,    1,    1,
};
static int yydefred[] = {                                      1,
    0,   85,    0,    0,  268,    0,    0,    0,    0,  763,
  764,    0,    0,    0,    0,    0,    0,  841,    0,    0,
    0,    0,    0,    0,    0,   28,    0,    0,    0,    0,
   57,   58,    0,   60,    0,    0,    0,   83,   84,    2,
    0,    0,  339,    6,    7,    8,    9,   10,   11,    0,
    0,    0,    0,   16,   17,   18,   24,   25,   26,    0,
  108,    0,  275,    0,    0,  820,   36,   39,   37,    0,
   38,    0,  192,  394,  395,    0,  748,  749,  750,  751,
  752,  753,  754,  755,  756,  757,  758,  759,  760,  761,
  762,    0,    0,    0,  219,  220,    0,    0,  226,  227,
    0,    0,    0,    0,    0,  223,    0,   71,  218,    0,
    0,    0,    0,  784,    0,    0,    0,    0,   41,   19,
   20,   43,   42,   22,   23,  557,  714,    0,  691,  699,
  697,    0,  700,  701,  702,  703,  704,  705,  710,  711,
  712,  713,  674,  698,    0,  690,    0,    0,    0,  495,
    0,  558,  559,  560,    0,    0,    0,    0,    0,  695,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   59,  439,    0,    0,    0,    0,  139,    1,    0,
  794,  812,  830,  844,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  390,
  397,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  563,    0,  556,    0,   31,    0,    0,    0,    0,    0,
    0,  228,  229,  230,  231,  221,  222,   72,    0,   73,
    0,    0,  103,    0,   21,  779,    0,    0,  785,  786,
  787,  789,    0,  790,  791,  792,  793,    0,  842,  843,
    0,    0,    0,  706,  707,  708,  709,  673,    0,  676,
    0,  692,  694,  237,  238,    0,    0,    0,    0,    0,
    0,    0,  687,    0,  681,    0,    0,    0,    0,    0,
  680,  679,    0,    0,    0,    0,    0,  234,    0,    0,
    0,   64,  440,   68,  725,    0,    0,  496,  497,  498,
  499,  500,  501,  502,  503,  504,  505,  506,  507,  508,
    0,  375,    0,  338,  346,  347,    0,    0,    0,    0,
  368,    5,    0,  510,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  348,  352,  351,
  354,  353,  355,    0,  340,  342,  349,  361,  339,    0,
    0,    0,    0,    0,    0,  102,    0,  111,  132,  109,
  110,  113,  114,    0,  115,  116,  117,  118,  119,  120,
  121,  122,  112,  131,  124,  123,  133,    0,  136,    0,
  107,    0,  281,  276,  277,  278,  279,  280,  284,  282,
  292,  283,  285,  286,  287,  288,  289,  290,  291,    0,
  293,  317,    0,    0,    0,  416,    0,  415,    0,  414,
    0,  413,    0,  411,    0,  412,  436,    0,    0,    0,
    0,  775,  765,    0,    0,  823,  822,  821,    0,    0,
    0,  213,    0,  199,  193,  194,  195,  196,  201,  202,
  203,  204,  198,  205,  206,  197,    0,    0,  391,    0,
    0,    0,    0,    0,  734,    0,  733,    0,    0,    0,
    0,    0,  314,  315,    0,    0,    0,    0,   75,   69,
    0,   96,  781,    0,    0,  788,    0,  675,  693,    0,
    0,    0,    0,    0,    0,    0,  686,    0,    0,    0,
    0,  718,  677,    0,  715,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   30,   27,    0,  105,  242,  256,
    0,    0,  820,    0,    0,    3,    0,  339,  174,  175,
  177,  176,  178,  184,  185,  140,    0,    0,    0,    4,
  341,  343,    0,    0,    0,    0,    0,    0,    0,  350,
  512,  511,  513,  514,   44,    0,    0,  509,  515,  516,
  519,  518,  520,  524,  525,    0,  523,  526,    0,    0,
    0,    0,  531,    0,    0,    0,    0,    0,  385,    0,
  383,  386,  369,    0,    0,    0,    0,    0,    0,    0,
    0,  372,    0,    0,    0,    0,   12,  797,  805,  806,
  795,  798,    0,    0,  817,    0,    0,   13,    0,  815,
    0,  813,    0,    0,    0,    0,   14,  837,  838,  831,
    0,    0,   15,  848,  849,  845,    0,  125,  126,  127,
  128,  129,  130,    0,  106,  142,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  396,    0,
    0,  404,    0,    0,  824,  825,  826,  827,  828,  829,
    0,    0,    0,    0,    0,    0,    0,    0,   75,    0,
    0,    0,    0,    0,   32,    0,  224,  233,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  678,  685,
    0,    0,    0,    0,    0,  179,  180,    0,    0,    0,
    0,    0,  139,    0,  245,  259,  830,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  517,    0,  548,    0,
    0,    0,  546,  367,  384,  370,    0,  387,  376,  377,
  378,  379,  381,  382,  380,    0,    0,    0,    0,  800,
  799,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  836,    0,    0,    0,    0,    0,    0,  151,
  153,  152,  154,    0,  149,  150,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  401,    0,    0,
    0,    0,    0,  398,  403,    0,  767,    0,    0,  583,
  621,  575,  576,    0,  610,  577,  578,  579,  580,  581,
  582,  612,  588,  589,  590,  591,    0,    0,    0,  618,
    0,    0,    0,    0,  573,  574,  597,  598,  599,  616,
  600,  601,  602,  603,    0,    0,  606,    0,  614,  620,
  273,    0,    0,    0,    0,    0,    0,    0,  722,    0,
    0,    0,    0,  727,    0,   35,    0,    0,    0,    0,
    0,    0,    0,   63,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   76,  444,    0,   77,    0,   97,   98,    0,   99,  100,
  101,    0,    0,    0,    0,  682,  683,  720,  716,    0,
    0,    0,  244,  243,    0,    0,  258,  257,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  170,    0,    0,
    0,  358,    0,    0,    0,    0,    0,    0,  359,    0,
    0,    0,    0,  529,    0,    0,  532,    0,    0,    0,
  344,    0,    0,    0,  373,  374,  796,  807,    0,  809,
  801,  804,  782,  808,  814,  816,    0,    0,    0,    0,
    0,  134,    0,    0,    0,    0,  157,    0,    0,    0,
  148,  141,  294,    0,    0,    0,  305,  306,  307,  308,
  300,  301,  302,  299,  303,  304,    0,    0,  297,    0,
    0,    0,    0,    0,    0,  402,  410,  409,  408,  407,
  405,  406,    0,    0,  207,  611,  584,  585,  586,  587,
    0,  607,  613,  615,  619,    0,    0,    0,  617,  604,
  605,  659,  628,  629,    0,  656,  630,  631,  632,  633,
  634,  635,  658,  640,  641,  642,  643,  626,  627,  648,
  649,  650,  651,  652,  653,  654,  655,  625,  660,  661,
  662,  663,  664,  665,  666,  667,  668,  669,  670,  671,
  672,  644,    0,    0,  592,  200,    0,  209,    0,  191,
    0,  738,  739,  741,  740,    0,  737,    0,  736,  723,
    0,  730,   78,   75,   70,    0,    0,  539,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   81,   82,    0,   80,
    0,   95,    0,    0,    0,  190,    0,    0,    0,    0,
    0,    0,    0,  171,    0,    0,    0,    0,  172,  251,
  252,  253,  254,  246,    0,    0,    0,  173,  265,  264,
  266,  267,  260,  181,    0,  362,    0,  365,  366,    0,
   45,   46,    0,  528,    0,  534,  535,  345,    0,  547,
    0,    0,    0,  835,  846,    0,    0,  160,    0,    0,
    0,  145,    0,  163,    0,    0,  296,    0,    0,    0,
  318,  319,  320,  321,    0,    0,  771,    0,  769,    0,
    0,    0,    0,  657,  636,  637,  638,  639,  646,    0,
    0,  647,    0,  593,    0,  272,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  443,
    0,  211,  441,    0,    0,   78,    0,    0,    0,  217,
  216,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   88,    0,   87,   86,
    0,  435,  776,  684,    0,  186,    0,  189,    0,    0,
  247,  248,  249,  250,  263,  261,  262,  357,    0,    0,
  530,  550,  388,  389,    0,  155,    0,    0,  166,    0,
  165,  162,    0,    0,  309,  310,  311,  312,    0,    0,
    0,    0,    0,    0,    0,    0,  645,    0,    0,  594,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  731,   67,  169,    0,    0,  434,    0,  433,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  424,    0,  423,
    0,  422,    0,  421,    0,  419,  417,    0,  418,  420,
    0,  432,    0,  431,    0,  430,    0,  429,    0,  450,
    0,  446,  445,    0,  449,    0,  448,    0,    0,   90,
    0,    0,    0,    0,    0,    0,  364,    0,    0,  158,
  161,  146,  295,  313,  270,    0,  773,    0,    0,  570,
    0,  596,    0,  742,    0,    0,    0,  747,  732,  215,
  214,  484,  480,  428,    0,  427,    0,  426,    0,  425,
    0,  482,  480,  478,  476,  470,  473,  482,  480,  478,
  476,  493,  486,  447,  489,   89,   91,    0,    0,  188,
    0,    0,    0,    0,  168,    0,    0,  623,    0,  569,
    0,  595,    0,    0,    0,    0,    0,  482,  480,  478,
  476,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   79,    0,    0,    0,    0,  802,
  322,    0,  744,  745,  746,  466,  485,  465,  481,    0,
    0,    0,    0,  456,  483,  455,  454,  479,  453,  477,
  451,  472,  471,  452,  474,  475,  460,  459,  458,  457,
  469,  494,  488,  487,  467,  490,    0,  468,  492,  255,
    0,    0,    0,    0,    0,  464,  463,  462,  461,  491,
    0,    0,  360,    0,  327,  323,  332,  333,  334,  335,
  336,  324,  325,  326,  328,  329,  330,  331,  274,    0,
    0,    0,    0,  568,    0,    0,    0,    0,  182,  337,
    0,    0,    0,    0,    0,    0,    0,    0,  183,
};
static int yydgoto[] = {                                       1,
  157,   71,  467,  846,  158,  725,  105,  106,  751,   35,
   36,  676,  730,  406, 1063,   73, 1075,  777,  778,  965,
  966, 1012, 1474, 1475,  549, 1530,  731,  732,  733,  210,
  495,  496,  174,  175,  842,  843, 1070,  656, 1077,  995,
 1242,  881,  882, 1496, 1497, 1492, 1487, 1494, 1495, 1486,
 1503, 1504, 1502,  160,  672,  498,  499, 1190, 1191,  970,
  674, 1301,  675,  883,  662,  663, 1129,  752, 1194,  779,
  625,  211,  228,  229,  107,  230,  108,  213,  186,  189,
  207, 1554,  694,  695,  783,  657,  658,   92,   37,  113,
  474,  115,  204,  116,   38,   39,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
   40,   41,  296,   42,   43,  180,   44,  338,   46,   47,
  339,   49,   50,  352,   51,  353,   52,  354,   53,  355,
   54,  340,  341,  342,   58,  343,  290,   60,   61,   62,
  188,  381,  627,  526,  527,  919,  528,  920,  529,  214,
 1154, 1163,   63,  844,  344,  345,  346,  347,  738,  349,
  350,  573,  574,  351,  575,  739,  576,  577,  578,  579,
   64,  200,   76,  418,  419,  885,   65,  599,  591,  592,
  593,  594,  601,  602,  610,  616,
};
static int yysindex[] = {                                      0,
 1078,    0, -348,  648,    0,  174, -232, 1890, 1890,    0,
    0,  113, 1269,  211,  302, -113,  -46,    0, -127,  227,
  227, -176, -176, 9519,  305,    0,  648,  648,  648,  648,
    0,    0,  250,    0,  276,  276,  276,    0,    0,    0,
  441,  480,    0,    0,    0,    0,    0,    0,    0,  509,
  516,  548,  564,    0,    0,    0,    0,    0,    0,  276,
    0,  268,    0,  427,  227,    0,    0,    0,    0,  609,
    0,  227,    0,    0,    0,  536,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,13805,    9,  655,    0,    0,  680,  749,    0,    0,
  660,  812,  812,13705, 5359,    0,  767,    0,    0,  799,
  227,  227,  -24,    0, 1463,  266,  648,  609,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 5359,    0,    0,
    0,  742,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  813,    0,  543,  813,  525,    0,
 5197,    0,    0,    0,   -8,  215,  609,  819,  738,    0,
  455,  468,    0,  479,  485, 1623,  813,   57,  609,  609,
  609,    0,    0,  848,  654,  856,  885,    0,    0, 1606,
    0,    0,    0,    0,  889, 5073,13805,  631, 7966,  908,
   76,   85,  101,  115,  123,  144,  928, 1430,  938,    0,
    0,  276,   28, 1216,  648,  899,12904,  921,   26,  902,
    0,  179,    0,  812,    0,  959,   65,  957,  740,  227,
  227,    0,    0,    0,    0,    0,    0,    0,  971,    0,
13166,  177,    0,  925,    0,    0,    2, 1463,    0,    0,
    0,    0,  541,    0,    0,    0,    0,  609,    0,    0,
   16,  609,    0,    0,    0,    0,    0,    0,  813,    0,
  766,    0,    0,    0,    0,13524,  648,  936,  104,  955,
  833,  609,    0,  648,    0, 1011, 1012,  648, -147, 5359,
    0,    0,  648,  648,  648,  648, 5359,    0,  813,  934,
  957,    0,    0,    0,    0, 6340,  924,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  227,    0,  227,    0,    0,    0,  227,  977,  -55,13864,
    0,    0, 1009,    0,  600,  227, -176,  170,  600, 1623,
 4887,13805, -143,  812,13705, 1032,  276,    0,    0,    0,
    0,    0,    0,   10,    0,    0,    0,    0,    0,  853,
  273,  316,  504,  -19,   83,    0, 1037,    0,    0,    0,
    0,    0,    0,  961,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  643,    0,13805,
    0, 1038,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1039,
    0,    0, 1049,  227,  227,    0,  227,    0,  227,    0,
 -176,    0,  520,    0,  520,    0,    0,  981, 1064,  536,
 1072,    0,    0,  227,  227,    0,    0,    0, 1164,  609,
    0,    0, 1080,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1083,  827,    0,  648,
  140,  862,  995, 5359,    0,13967,    0,  866, 1086, 1094,
 1095, 1623,    0,    0,   87,  609, 1098,  888,    0,    0,
  957,    0,    0,  706,   17,    0,  648,    0,    0,  609,
  897,  521,  648,  648,  648,  609,    0,  609,13805,13805,
  609,    0,    0,  932,    0,   51,  902, 1110, 1167,  609,
  609,  609,  609,13315,    0,    0,  858,    0,    0,    0,
  227,  227,    0, -292,14026,    0, 1102,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1107, 1109, 1111,    0,
    0,    0, 1163,  227,  499,  534,  227,    0,  966,    0,
    0,    0,    0,    0,    0, 1193, 1201,    0,    0,    0,
    0,    0,    0,    0,    0,13524,    0,    0, 1206,  957,
  276, 5359,    0,  600, 1209, 1217,    0,11729,    0,13805,
    0,    0,    0,  853,  -47,  -47,  -47,  -47,  273,  944,
  948,    0,  800, 1205,   43,   21,    0,    0,    0,    0,
    0,    0,  276,  276,    0, 1208, 1211,    0,  276,    0,
  276,    0, 1230, -186,  648,  804,    0,    0,    0,    0,
  648,  805,    0,    0,    0,    0,  227,    0,    0,    0,
    0,    0,    0,   -1,    0,    0, 1232,  227,  862, 5507,
  862, 1237, 1188, 1244, 1245, 1247, 1248, 1258,    0, 1430,
 1261,    0, 1252, 1259,    0,    0,    0,    0,    0,    0,
  227,14175,   31,  540,    0,  532, 1265, 1267,    0, 1280,
 1210, 1271, 1194, 1260,    0, 1057,    0,    0, 1263, 5817,
 1285, 1290, -159, 1214, 2627,  414,  276,  648,  609,  648,
  648,  819,  819,  819, 1297, 1300,  227, -147,    0,    0,
 5359, 1302,13805,13627, 1005,    0,    0, 1216,  659,  754,
    0, 1069,    0,11812,    0,    0,    0,  227, 1254,  227,
  609,  227,  141, 1255, 5359, -159,  227, -176,  609, 1075,
  862, 1311,  771, 1309, 1313, 1320,    0,    0,    0, 5507,
 1316, 1326,    0,    0,    0,    0,  600,    0,    0,    0,
    0,    0,    0,    0,    0,  536,  227,  227, 1338,    0,
    0, 1323, 1342,  957, 1345, 1346, 1343, 1353, 1356, 1360,
  227,  648,    0,  609,  648,   34,  648, 1366, 1354,    0,
    0,    0,    0, 1114,    0,    0,  164,  128, 1348,13805,
 1371,    8,  727,  -85,  135,  442, 1322,    0, 1322, 1322,
 1322, 1322, 1322,    0,    0,  227,    0,  227, 1374,    0,
    0,    0,    0,  802,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1379,  931,  933,    0,
  920, 1389, -251, 1154,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1379, 1379,    0, 7243,    0,    0,
    0,   73, 1391,  276,  536, 1372,    0,  975,    0,  862,
 1314,    0,13967,    0, 1317,    0,  251,  227, 1381,    0,
    0,  609, 1098,    0,  150,  151,  909,  158,  184,  372,
  393,  415,  432,  437,  501,  545,  547,  630,  678,  684,
    0,    0,   41,    0,  276,    0,    0,  536,    0,    0,
    0, 1393,  609,  609,  819,    0,    0,    0,    0,  902,
    0,  990,    0,    0,  609,  648,    0,    0, 5359,  609,
  227,  609,  227,  527, 5359, -159,12516,    0,  217,  976,
  449,    0, 1053, 1352, 1355,13805, 1372,13524,    0, 1405,
 1406,  648,  604,    0,    0,  600,    0,  600, 1411,  135,
    0,    0, 1139, 1149,    0,    0,    0,    0,   43,    0,
    0,    0,    0,    0,    0,    0, 1433,  819,  609,  227,
  609,    0,  227, 1435, 1114,13805,    0,13805,  757,  648,
    0,    0,    0,  862, 1586, 1444,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1428, 1434,    0, 1400,
 1407, 1409, 1410, 1465, -159,    0,    0,    0,    0,    0,
    0,    0, 1464,    0,    0,    0,    0,    0,    0,    0,
 1003,    0,    0,    0,    0,  862, 1427, 1429,    0,    0,
    0,    0,    0,    0,  860,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   14,   96,    0,    0,  -44,    0, 2925,    0,
 1479,    0,    0,    0,    0,  957,    0, 1482,    0,    0,
 1401,    0,    0,    0,    0,  957, 1432,    0, 1499, 1502,
 1483, 1505,  -61,  227,  227,  227,  687,  724,  750,  751,
  227,  227,  227,  227,  227,  227, -176,  227,  506,  227,
  861,  227,  227,  227,  227,  227,  227,  227, -176,  227,
 2627,  227, -103,  227,  984,  227,    0,    0, 2322,    0,
 1510,    0, 1131, 1513, 1623,    0,  609,  827, 1462, 1470,
13805,13524, 1056,    0, 1623, 1623, 1623, 1623,    0,    0,
    0,    0,    0,    0, 1623, 1623, 1623,    0,    0,    0,
    0,    0,    0,    0,  536,    0, 1523,    0,    0, 1294,
    0,    0,  609,    0, 1529,    0,    0,    0,  536,    0,
  536,  227, 1514,    0,    0, 1535,  227,    0,  648, 1538,
 1536,    0,   -1,    0,  757,  957,    0,  227,  234,  336,
    0,    0,    0,    0,14175, 1521,    0,  227,    0, 1522,
  839,  227,  227,    0,    0,    0,    0,    0,    0,  862,
 1489,    0,  227,    0,  132,    0, 1544, 1545, 1085, 1546,
 1548, 1549, 1551, 1557, 1561, 1562, 1563, 1566, 1583,    0,
  957,    0,    0,  227,  624,    0,  122, 1503, 1567,    0,
    0,    0,    0, 1589, 1539, 1590, 1540,  227,  227,  227,
  227,  227,  227, -176,  227, 1594, 1550, 1604, 1553, 1607,
 1568, 1615, 1577, 1630, 1636, 1585, 1638, 1639, 1588, 1644,
 1595, 1649, 1602, 1655, 1609, 1656, 1610, 1663, 1612, 1665,
 1666, 1616, 1669, 1456, 1679, 1628,    0,  741,    0,    0,
  801,    0,    0,    0,  116,    0, 1678,    0, 1451,  812,
    0,    0,    0,    0,    0,    0,    0,    0,13805, -159,
    0,    0,    0,    0,   43,    0, 1686,  757,    0,13805,
    0,    0, 1652, 1687,    0,    0,    0,    0, 1689, 1692,
    0,  227,  862, 1640, 1646,  957,    0, 1651,  227,    0,
 1702, 1706, 1707, 1708, 1704, 1691, 1694, 1695, 1713,  202,
    0,    0,    0, 1714, 1715,    0, 1717,    0, 1718, 1727,
 1676, 1729, 1716, 1730, 1719, 1769, 1721,    0, 1771,    0,
 1775,    0, 1776,    0, 1777,    0,    0, 1781,    0,    0,
 1782,    0, 1783,    0, 1793,    0, 1794,    0, 1796,    0,
 1798,    0,    0, 1810,    0, 1811,    0, 1818, 1496,    0,
 1766,  428,    0,13805, -159, 5359,    0, 1801, 1804,    0,
    0,    0,    0,    0,    0,    0,    0, 1822,  850,    0,
14266,    0, 1772,    0,  227,  227,  227,    0,    0,    0,
    0,    0,    0,    0, 1824,    0, 1827,    0, 1828,    0,
 1830,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2627, 1835,    0,
 1801,13524, 1780, 1837,    0,   43, 1842,    0,  862,    0,
    0,    0, 1847, 1852, 1853,   25,   38,    0,    0,    0,
    0,   49,   69,   77,   66,   91,  228,   94,   97,   99,
   89, 2017,   33,  759,    0, 1372, 1841, 1622,    0,    0,
    0,  873,    0,    0,    0,    0,    0,    0,    0,  106,
  130,  133,  117,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1634,    0,    0,    0,
    0, -159, 1857, 2587,  862,    0,    0,    0,    0,    0,
 1858, 1861,    0, 1868,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  913,
 1412,    0,  227,    0, 1569, 1879, 1880,  812,    0,    0,
 5359,13524, 1650, -159, 1801, 1886,    0, 1892,    0,
};
static int yyrindex[] = {                                      0,
    0,    0, 6003,    0,    0,13014, 1705,    0,    0,    0,
    0,    0, 5669,    0,    0,  309, 1891,    0, 9953,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1893, 1893, 1893,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1893,
    0,  -31,    0,    0,    0,    0,    0,    0,    0, 1812,
    0,    0,    0,    0,    0,  693,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 7750,    0,    0,    0,    0,    0,    0,
 6127, 6995, 6995,    0,    0,    0, 6269,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,10065,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1813, 2421,    0,    0,
    0,    0,    0,    0,    0, 5669, 1819, 4850, 5160, 5470,
 5780,    0,    0,    0, 1902,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1825, 6995,    0,
 9453, 9453, 9453, 9453, 9453, 9453,    0,    0,    0,    0,
    0, 1893, 8125,    0,    0,    0,    0,    0,    0, 7142,
    0, 9060,    0, 5669,    0,    0,    0, 9233,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 8340,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1829,    0,    0,
 1831,10198, 4549,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3941,    0,    0,    0,    0,    0,    0, 1901, 1885,
    0,    0,    0,    0,    0,    0,    0,    0, 1819,    0,
 6090,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 5669,
    0,    0,    0, 5669,    0,    0, 1893,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  134,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1826,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1836,
 1376,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1833,    0,    0, 7952,    0,
    0, 5669,    0,    0, 1901,   24, 1910,    0,    0,    0,
 6524,    0,    0,10309, 1838,    0,    0,    0,    0,11176,
    0,    0,    0,    0,    0, 4245,    0, 2117,    0,    0,
10340,    0,    0,  185,    0,    0,  555,    0, 1898,10495,
10636,10667,10778,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,11963,
 1893,    0,    0, 1921,    0,    0,14296,    0,    0,    0,
    0,    0,    0,12130,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1893, 1893,    0,    0,    0,    0, 1893,    0,
 1893,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  143,    0,    0, 1843,    0, 4594,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 8309,    0,    0,    0,    0,    0,    0,
    0,  460, 9761,    0, 7393,    0,    0, 1922,    0,    0,
    0, 1844,    0,    0,    0,    0,    0,    0, 6703, 1885,
    0,    0,    0,    0,  -65,    0, 1893,    0, 1848,    0,
    0, 2725, 3029, 3333,    0,    0,  387,  410,    0,    0,
    0,13465,    0,    0, 5669,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
12213,    0,    0,    0,    0,    0,    0,    0,11646,    0,
    0,    0,    0, 1926,    0, 1929,    0,14296,    0,    0,
    0, 1931,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2325,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  641,    0,    0,    0,    0,    0,    0,
    0,    0,    0,14125,    0,    0,  143,    0,    0,    0,
    0, 4594,    0,    0,  682,    0, 9453,    0, 9453, 9453,
 9453, 9453, 9453,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  692,    0,    0,    0,
    0,    0,    0,  777,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  692,  692,    0,    5,    0,    0,
    0, 1932,    0,    0,    0, 9922, 7577,    0,    0,    0,
    0, 1213, 1833,    0,    0,    0,    0,    0,    0,14296,
14296,11012, 1910,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1854,    0, 1893,    0,    0,    0,    0,    0,
    0,    0, 1859,11328, 3637,    0,    0,    0,    0,  569,
14296,    0,    0,    0,  412,    0,    0,    0,    0, 1862,
    0,12684,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,12296,    0,    0,    0,12447,    0,    0,    0,
    0,    0,    0,    0,14296, 1921,    0, 1921,    0,  328,
    0,11526,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1021, 1225,    0,
  285,    0,    0,    0,14125,    0,    0, 1936, 1918,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 8501, 8685,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  893,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  647,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 6958,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,10809,    0, 5669,    0, 1867,    0,    0,    0,
    0,    0,    0,    0, 5669, 5669, 5669, 5669,    0,    0,
    0,    0,    0,    0, 5669, 5669, 5669,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,12614,    0,    0,    0,    0,    0,  789,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1943,    0,  143,    0, 1918, 4594,    0,    0,    0,    0,
    0,    0,    0,    0,  460, 1957,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 9620,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,14296,14296,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 5669,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1918,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 8858,    0,    0,    0,    0,  794,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,14296,    0,    0,    0,    0, 1958,    0,    0,
    0,    0,    0,    0,    0,14296,    0,    0,    0,    0,
  460,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1958,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1959,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1876,    0,    0,14296,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
14296,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,14296,    0,    0,    0,    0,    0, 5669,    0,    0,
    0,    0,    0,    0, 1958,    0,14296,    0,    0,
};
static int yycindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,11495,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1738,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1840,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1923,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1969,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1924,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,11080,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1743,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1757,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  923,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  145,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
11205,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1746,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1980,    0,    0,
    0,    0,    0,    0,    0,    0,  993,    0,    0,    0,
    0, 1968,    0,    0,    0,    0,    0,    0,    0, 1755,
 1756,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1758,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1759,    0,    0,    0,    0,    0,
    0, 1760,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1773, 1785,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1941,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1764, 1768,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1786,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1770,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1778,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  518,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1784,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1787,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1788,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1789,    0,    0,
};
static int yygindex[] = {                                   1871,
   -4,  -11, -671,    0, -263,   72,  -91,    0,  100,    0,
    0,    0, 1658, -139,    0,    0,-1034,    0, 1274,    0,
 1081,  198,-1377, -420, -386,  -16, -707,    0, 1119,  -14,
 1364,    0,    1, 1222,  636,  863, -908,  -75,    0, 1129,
    0,-1054, 1001,    0,    0,-1327, -586,-1023, -951,    0,
    0,    0,    0,  942, 1212, 1402,    0,    0,    0,    0,
 -624,    0,    0,-1000,    0, 1224,    0, -927,-1098,  887,
  872,  -21,  -88, 1747, 1621, 2061, -150,    4,    0,    0,
    0,    0,    0,    0, -743, 1243,    0, 2089,    0,    0,
  968, 1988, 1600,    0,  -23, 2083,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -291, 1413,    0, -287, -223, -282,   29,    0,    0,
   19,    0,    0,    0,    0,    0,    0, 1415,    0,    0,
    0,    7,   12,   40,    0,   32, 1834,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0, -149,    0,
    0, 1534,    0,    0,    0,  622,    0,    0,    0,    0,
    0,    0,    0, 1478, 2056,  -32,    0, 1653,    0, 1779,
    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 14769
static int yytable[] = {                                      70,
  164,  863,  161,  212,  517,  124,  125,   55,  518,  159,
  226,  227,   56,  519,  118,  288,  109,  218, 1169,   48,
  939, 1183,  168,  169,  170,  171,  637,  163,  638,   45,
  348,  202,   59,  268,  851,  537,  176,  177,  975,   34,
   57,  775,  624,  776,  929,  624,  671,  205,  624,  567,
  458, 1222,  408,  410,  412,  414,  416, 1220, 1254,   78,
  185,  205,  205,  316,  208, 1516, 1288,  268,  166,  217,
  561,  424,  699, 1545,  287,  321,  205,  119, 1518,  205,
 1226,  753, 1247,  316,  750,  425,   74,  122,  123, 1524,
  231,  135,  291, 1507,  688,  624, 1332,  402,  379,   34,
   67,   68,  205,   69,  457,  607, 1529,  163,  237, 1526,
  248,  251,  252,  253, 1065,  404,  119, 1527,  215,  120,
  121,   66,  454,  258,  407,  568,  260,  492,  268, 1540,
 1498, 1531,   67,   68, 1537,   69,  266, 1538, 1223, 1539,
  409,   34,  468,  689,  197,  289, 1556,   75,  166,  205,
  269,  272, 1089, 1090,  411, 1413,  471, 1559,  270, 1290,
 1520,  205,  413, 1064,  203,  202,  405,  968,  323,  109,
 1557,  206,  282, 1558, 1349,  405,  281,  481,  119,  553,
   34,  378,  156,  415,  926,  205,  205,  456, 1224, 1093,
 1095,  405,  448, 1134,  280, 1291,  484, 1101,  559,  430,
  431,  582,  421,   91,  451,  405,  775,  613,  776,  548,
  234,  235,  270,  405,  463,  464,  470, 1596,  452,  682,
  683,  684,  293, 1103, 1350,  279,  466, 1175,  719, 1421,
 1017,  539,  655,  475,  405,   67,   68,  478,   69,  453,
 1094, 1096,  562,  558, 1143, 1360, 1361,  271, 1102,  700,
 1018,   67,   68,    2,   69,  273,  147,  560, 1072, 1073,
   34,  480,  482,  737,   72,  497,  486,  289, 1534,  488,
  215,  110,  504,  491, 1104,   34,  603,  719,  500,  501,
  502,  503,  215,  762,  135,   67,   68,   98,   69,  422,
 1085,  626,  769,   78,  704, 1543,  216,  561,   78,  469,
  561,  119,  522,   55,  770,  771,  119,  523,   56,  535,
  544,  550,  119,  541,  521,   48,  556,  551,  215,  460,
  461,   98,  772, 1206,  520,   45, 1439,  525,   59,  122,
  123, 1544,  119,  109,  557,  524,   57,  565,  163,  580,
  119, 1149,  117,  847, 1072, 1073,   67,   68,  845,   69,
  119,  960,  122,  123,  119,    2,  545,  119,  588,  119,
  119,  492,  119,  589,  589,  608,  614,  664,  269,  119,
  487,  269,  773, 1084,   34,   94,  546,  547,  494,  166,
  122,  123,   98,  590,  590,  609,  615,   67,   68,  604,
   69,  683,  111,  119,  636,  321,  119, 1419,  974, 1127,
  685,  686,  156,  156, 1128,  156,  477,  678,  641,  847,
  531, 1105,  532, 1505,  112,  468,  533,  895,  348,  990,
  991,  992,  473,  114,  542,  543,  702,  167,  552,  745,
  721,   13, 1107,  122,  123,  545, 1500,  236,  215,  660,
  587,  605, 1091,  653,  606,  654,  715, 1542,  147,  147,
  581, 1517, 1333,  717, 1109,  546,  547,  769,  561, 1248,
  451,  566, 1106,  267,  199,  109, 1522,  720,  270,  770,
  771, 1111,  679,  205,   67,   68, 1113,   69,  119,  721,
 1127,  735,  996, 1108,  458, 1128,  536,  772, 1468,    2,
  119,  122,  123,  545,  275,  276,  277,  450,  958,  466,
  567,  567,  717,  632,  633, 1110,  634,   34,  635, 1501,
  754,  172,  215,  546,  547,   27,   28,   29,   30,   31,
   32,   33, 1112,  643,  644,   67,   68, 1114,   69,  624,
  711,  713,   67,   13,  241,   69,  119,  773, 1219, 1523,
 1115,  774,  173,  611, 1364, 1365,  612,  723, 1510,  198,
  567,  719,  724,  782,  348,  786,  323,  847,  450,  124,
 1127,  722,   34,  178,  494, 1128,  205,  743,  778,  778,
 1141,  778,  205, 1164,  458,   27,   28,   29,   30,   31,
   32,   33,  187,  895, 1117,  205, 1119,  269,    2,  710,
  269, 1116,  848,  755,  756,  249,  250, 1550,  542,  759,
  764,  760,  179,  909,  902,  906,  766,  202,  121,  915,
  696,  697,  543,  681,  994,  785,  542,   27,   28,   29,
   30,   31,   32,   33,  712,  517, 1335, 1336,  598,  518,
  543,  181,  847,  709,  519, 1118,  714, 1120,  182,  258,
 1145, 1146, 1147, 1148, 1174,  933,  458,  997, 1418,  998,
  999, 1000, 1001, 1002,  205,  497,   27,   28,   29,   30,
   31,   32,   33,  726,   10,   11,   12,   13,  862, 1121,
  183,  561,  561,  893,  561,  894,  900,  892,  744,   70,
   73,   76,   79,   82,   85,   88,  184,  743,  205,  905,
  743,  972,  323,  910,  912,  914,  886,  887,  219,  832,
  928,  931,  624,  763,  190, 1469,  884,  191,  192,  193,
  194,  862,  195,  196,  197,  940,  768, 1123, 1477,  220,
 1122,    2, 1275, 1125, 1277,  943, 1258,  781, 1337, 1338,
  392,  888,  622,  622,  945,  847,   27,   28,   29,   30,
   31,   32,   33, 1471,  603,  847,    8,    9,  847,  911,
  799,   27,   28,   29,   30,   31,   32,   33,   67,   68,
  959,   69,  961, 1260,  664,  832,   13,  989, 1124,  119,
  778,  545, 1076,  969, 1126,  282,    2, 1259,  583,  281,
  584, 1086,  622,  585,  586,  545,  898,  494,  221, 1262,
 1264,  546,  547,   67,   68,   67,   69,  280,   69, 1548,
 1193, 1553,  205,  261,  262,  546,  547,  922,  282,  924,
  935,  925,  281,  263, 1261,  392,  930,  572,  572,  847,
  847,  847,  847,  847,  847,  847, 1078,  232,  279,  549,
  280,  155,  549, 1068,  609,  609,  944, 1168,  233, 1170,
 1263, 1265,  595, 1561,  913,  283,  946,  947,  259,  155,
   27,   28,   29,   30,   31,   32,   33,  604,  284,   67,
  957,  279,   69,  119,  282,  274, 1493,  572,  281,  285,
  889,  890, 1499,  891, 1586,  286, 1132, 1189, 1136, 1192,
 1562,  458, 1343,  993,  609, 1131,  280,  119,  292, 1598,
 1480, 1411,  458, 1479, 1138, 1003,  294, 1004, 1196,   13,
 1142, 1137, 1521,  155, 1356, 1357, 1358,   67,   68,  605,
   69,  862,  606,  832, 1130,  458, 1555,  279,   67,   68,
  293,   69, 1595,  522,  724,  295,  724, 1173,  523,  356,
 1151, 1160,  608,  608,  608,  521,  832, 1150, 1159,  282,
 1211,  269,  269,  281,  269,  520,  380, 1074,  525,  403,
 1153, 1162,  609, 1584,   13,  458,  524, 1087, 1152, 1161,
  222,  280,  223,  224,  225, 1195,  596,  417,  584,  597,
  392,  585,  586,  392,  392,  392,  392,  420,  392,  392,
  392,  449,   34,   27,   28,   29,   30,   31,   32,   33,
  862,  432,  279, 1241, 1311, 1312, 1313, 1314,  455,  458,
   67,   68,  459,   69, 1315, 1316, 1317, 1176,  126, 1177,
 1139,  462, 1140,   67,   68,  476,   69,  472,   67,   68,
  976,   69,  254,  255,  256,  257,  126,  977,  483,  978,
  979,  980, 1020, 1021,   34,  726,   98,  726,   27,   28,
   29,   30,   31,   32,   33,  479, 1409,  485,  530,  832,
  489,  490, 1308, 1309,   98,  269,  269, 1546,  506, 1185,
   67,   68, 1186,   69, 1547,  155,  540,  534,  981,  982,
  983,  564,   67,   68,  155,   69,  617,  628,  629,  833,
  126, 1006, 1007, 1008, 1009, 1010,   67,   68,  631,   69,
 1272,  832,   67,   68, 1278,   69,  119,  275,  276,  277,
 1158,  832, 1286, 1295,  832,  639,   97,  640,   98, 1533,
 1535,   99,  642,  100,  984,  985,  986,  659,  987,  651,
  101,  988,  652,  215,  122,  123,  545,  665,  278,  666,
  275,  276,  277, 1305,  667,  668,   34,  102,  109, 1214,
 1215, 1216, 1217, 1218, 1346,  833,  546,  547,  109,  109,
  109,  109,  103, 1318,  152,  153,  154,  670,  109,  109,
  109,  673,  569, 1225,  570,  571,  572, 1322,  596, 1323,
  680,  690,  152,  153,  154,  832,  832,  832,  832,  832,
  832,  832,   61,   64, 1328,   67,  275,  276,  277, 1097,
 1098, 1099, 1100, 1255, 1256, 1257,    2,  740,  741,  742,
 1266, 1267, 1268, 1269, 1270, 1271,  687, 1273, 1274, 1276,
  691, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1416, 1287,
  708, 1289,  693, 1292,  703, 1296,  152,  153,  154,  705,
 1417,  706,  717,  707,   67,   68,  215,   69,  119,  716,
  718, 1422,  126,   67,   68,  721,   69, 1376,    2,  727,
   37,  126,   97,  100,   37,  103,  728, 1071,   37,   37,
  746,  275,  276,  277,  747,  749,  748, 1429,  757,  761,
   98,  758,   37,  765,  767,  780, 1410,  787, 1130,   98,
  788, 1324, 1293,  834,  789,  790, 1327,  791,  792, 1294,
  618,  619,  620,  833, 1072, 1073, 1412, 1334,  793,   97,
  155,  795,  798,   37,   99,  849,  100, 1341,  104,  796,
  850, 1344, 1345,  101,  853,  862,  833,  282,  854,  856,
  855,  692, 1348,  857,  860, 1470,  621,  622,  623,  861,
  102,  907,    3,    4,    5,    6,    7,  896,  864,  280,
  897,  901,  916, 1355, 1359,  103,  923,  927,  932,  834,
    2,  934,  936,  937,    8,    9,  941, 1370, 1371, 1372,
 1373, 1374, 1375,  938, 1377, 1351, 1352, 1353, 1354,  942,
  279,   10,   11,   12,   13,   40,  908,  948,   14,   15,
  949,  950,  953, 1508,   16,  951,  952,   17,  152,  153,
  154, 1130,  954,  963,   18,   19,  955,  152,  153,  154,
  956, 1472, 1155, 1512, 1156, 1157,  962,  964,   40,  971,
  862,  973,  405,   40, 1005,   40,   40,   40, 1011,   40,
 1015, 1014,   40,   10,   11,   12,   13, 1013, 1016,  833,
 1019, 1066, 1069, 1133,   40,   40,   40,   40, 1080, 1083,
 1135, 1428, 1088, 1165, 1166, 1171, 1172, 1167, 1433,   20,
   21, 1178,   22,   23,   24, 1181,   25,   26,   27,   28,
   29,   30,   31,   32,   33, 1182,   40,  199,   40,   67,
   68,  833,  852, 1184, 1187,   67,   68,  126,   69, 1580,
 1536,  833, 1549, 1198,  833, 1199,    3,    4,    5,    6,
    7, 1200, 1201,  645,  646,  647, 1591,  834,   40, 1202,
   40, 1203, 1204, 1593, 1205,   98, 1210, 1208,    8,    9,
   27,   28,   29,   30,   31,   32,   33, 1212, 1244, 1213,
  834, 1245, 1252, 1246, 1249,   10,   11,   12,   13,  648,
  649,  650,   14,   15, 1483, 1484, 1485,   95,   16, 1250,
   96,   17, 1251,  426, 1253,  427,  428,  862,   18,   19,
 1302,  473,  429, 1304, 1306,  833,  833,  833,  833,  833,
  833,  833, 1307,   97,   98, 1310, 1319, 1320,   99, 1321,
  100, 1325,   37,   37,   37, 1326, 1592,  101, 1329, 1330,
  624, 1347, 1342, 1093, 1095, 1101, 1519, 1103, 1105,  862,
 1107, 1525, 1519, 1528,  102, 1532, 1109, 1525, 1519, 1528,
 1111, 1113, 1115,   20,   21, 1117,   22,   23,   24,  103,
   25,   26,   27,   28,   29,   30,   31,   32,   33, 1525,
 1519, 1528, 1119,  152,  153,  154, 1197, 1362, 1363, 1366,
 1368, 1367, 1369,  834, 1378,   40,   40,   40,   40,  275,
  276,  277, 1379,   40, 1380, 1381,   40, 1382,   40,   40,
   40,   40,   40,   40,   40, 1384,   40,   40,   40,   40,
 1383,   40,   40,   40,   34,   40,   40,   40,   40, 1385,
 1386,   40,   40,   40,   40,  834, 1387, 1388, 1389, 1390,
 1391,   40, 1587,   40, 1392,  834,   40, 1393,  834, 1394,
   40,   40, 1423,   40, 1395, 1396, 1398,   40,   40,   40,
   40, 1397, 1399, 1400, 1401, 1402, 1403,  190, 1404, 1405,
  191,  192,  193,  194,   40,  195,  196,  197, 1406, 1407,
 1408, 1414,   67,   68, 1415,   69, 1420, 1424,  321, 1425,
  322, 1426, 1430,   40,   40,   40,   40,   40, 1431,   40,
   40, 1258,  393, 1432, 1434, 1260, 1262, 1264, 1435,   40,
   40, 1436, 1437, 1438, 1440, 1441, 1442, 1443, 1466,  834,
  834,  834,  834,  834,  834,  834,   40, 1444, 1445, 1446,
 1448,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40, 1447, 1450,
 1452, 1449,  561, 1451, 1453, 1454, 1455,  239,  240,  241,
 1456, 1457, 1458,   40,   40,   40,   40,  393,   40,   40,
   40,   40, 1459, 1460,   40, 1461,   40, 1462,   40,   40,
   40,   40,  242,   40,   40,  561,   40,   40,   40, 1463,
  561, 1464,  561,  561,  561,   40,  561, 1465, 1467,  561,
 1473, 1476, 1478, 1488, 1482,   67, 1489, 1490,   69, 1491,
  858,  561,  561,  561,  561, 1506, 1509,   25,    2,  976,
 1551,   22, 1511,   40,   40,   40,  977, 1513,  978,  979,
  980,   95, 1514, 1515,   96, 1552, 1560, 1563, 1581,   19,
 1582,   40,   40,  561,   40,   40,   40, 1583,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   97,   98, 1589,
 1590, 1585,   99, 1594,  100, 1597, 1588,  981,  982,  983,
   16,  101, 1599,  437,  104,  561,  243,  561,  244,  245,
  246,  247,  438,   29,  717,  976,  540,  137,  102,  538,
  399,  783,  977,  839,  978,  979,  980,  728,  818,  541,
  810,  533,  735,  103,  393,  138,  536,  393,  729,  537,
  840,  545,  271,  984,  985,  986,  143,  987,   74,  164,
  988,  811,  393,  144,  819,  393,  393,  393,  393,  240,
  393,  393,  393,  981,  982,  983,  147,  167,  210,  571,
    4,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,   31,   28,   28,   55,    7,   58,
   55,   94,  311,  312,  313,  314,  315,  316,  106,   55,
   55,  115,   55,   55,   55,  109,    8,    9,   55,  984,
  985,  986,   55,  987,   55, 1188,  988,  112,  118,  297,
  967,  899,   55,   10,   11,   12,   13, 1541,   55,  630,
 1180,   55,   55,   55,  317, 1067, 1481, 1339, 1179, 1243,
 1300,  859,  561,  561, 1092,  561, 1082, 1340,  318, 1331,
  561,  563,  669,  561,  162,  561,  561,  561,  561,  561,
  561,  561, 1079,  561,  561,  561,  561,   93,  561,  561,
 1303,  238,  561,  561,  561,  561,  165,  736,  561,  561,
  561,  561,  698,  319,  320,  917,  562,  794,  561,  201,
  561,  921,  505,  561,    0,    0,  677,    0,  561,    0,
    0,  600,    0,    0,  561,  561,  561,  561,    0,    0,
   27,   28,   29,   30,   31,   32,   33,    0,    0,  562,
  784,  784,    0,  784,  562,    0,  562,  562,  562,    0,
  562,    0,    0,  562,    0,    0,    0,    0,    0,    0,
  561,    0,  561,  561,  561,  562,  562,  562,  562,    0,
    0,    0,    0,    0,    0,    0,  561,  561,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
   10,   13,    0,  561,    0,    0,    0,  562,  561,  561,
  561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
  561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
  561,  561,  561,  561,  561,  561,    0,    0,    0,  562,
  561,  562,    0,  561,  561,  784,  784,  784,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  561,  561,  561,  561,    0,  561,  561,  561,  561,    0,
  784,  561,    0,  561,    0,  561,  561,  561,    0,    0,
  561,  561,    0,  561,  561,  561,    0,    0,    0,    0,
    0,    0,  561,  865,  866,  867,    0,  868,  869,  870,
  871,    0,  872,  873,  197,    0,  874,  875,  876,  877,
    0,    0,    0,  878,  879,    0,    0,    0,    0,    0,
  561,  561,   77,   78,   79,   80,   81,   82,   83,   84,
   85,   86,   87,   88,   89,   90,   91,    0,  561,  561,
    0,  561,  561,  561,    0,  561,  561,  561,  561,  561,
  561,  561,  561,  561,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  784,    0,  784,  784,  784,  784,
    0,    0,    0,    0,    0,    0,  562,  562,    0,  562,
    0,  880,    0,  803,  562,    0,    0,  562,    0,  562,
  562,  562,  562,  562,  562,  562,    0,  562,  562,  562,
  562,    0,  562,  562,    0,    0,  562,  562,  562,  562,
    0,    0,  562,  562,  562,  562,    0,    0,    0,    0,
  555,    0,  562,    0,  562,    0,    0,  562,    0,    0,
    0,    0,  562,    0,    0,    0,    0,    0,  562,  562,
  562,  562,    0,    0,    0,    0,    0,    0,    0,  803,
    0,    0,    0,  555,    0,    0,    0,    0,  555,    0,
  555,  555,  555,    0,  555,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  562,    0,  562,  562,  562,  555,
  555,  555,  555,    0,    0,    0,    0,    0,    0,    0,
  562,  562,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  562,    0,    0,
    0,  555,  562,  562,  562,  562,  562,  562,  562,  562,
  562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
  562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
    0,    0,    0,  555,  562,  555,    0,  562,  562,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  562,  562,  562,  562,    0,  562,
  562,  562,  562,    0,    0,  562,    0,  562,    0,  562,
  562,  562,    0,    0,  562,  562,    0,  562,  562,  562,
    0,    0,  127,    0,    0,    0,  562,  803,  130,  131,
  132,    0,  133,  134,  135,  136,    0,  137,  138,    0,
    0,  139,  140,  141,  142,    0,    0,    0, 1297,  144,
    0,    0,    0,    0,  562,  562,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  562,  562,    0,  562,  562,  562,    0,  562,
  562,  562,  562,  562,  562,  562,  562,  562,    0,    0,
    0,    0,    0,  803,    0,    0,    0, 1298,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  555,  555,    0,  555,    0,    0, 1299,    0,  555,    0,
    0,  555,    0,  555,  555,  555,  555,  555,  555,  555,
    0,  555,  555,  555,  555,    0,  555,  555,    0, 1579,
  555,  555,  555,  555,    0,    0,  555,  555,  555,  555,
    0,    0,    0,    0,  553,    0,  555,    0,  555,    0,
    0,  555,    0,    0,    0,    0,  555,    0,    0,    0,
    0,    0,  555,  555,  555,  555,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  803,  803,  553,    0,    0,
    0,    0,  553,    0,  553,  553,  553,    0,  553,    0,
    0,    0,    0,    0,    0,  803,    0,    0,  555,    0,
  555,  555,  555,  553,  553,  553,  553,  803,    0,  803,
  803,    0,  803,  803,  555,  555,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  555,    0,    0,    0,  553,  555,  555,  555,  555,
  555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
  555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
  555,  555,  555,  555,    0,    0,    0,  553,  555,  553,
    0,  555,  555,    0,    0,    0,    0,    0,    0,  803,
  803,  803,  803,  803,  803,  803,    0,    0,  555,  555,
  555,  555,    0,  555,  555,  555,  555,    0,    0,  555,
 1564,  555,    0,  555,  555,  555,    0,    0,  555,  555,
    0,  555,  555,  555,    0, 1565,    0,    0,    0,    0,
  555,    0,    0,  865,  866,  867,    0,  868,  869,  870,
  871, 1566,  872,  873,  197,    0,  874,  875,  876,  877,
 1567,    0,    0,  878,  879,    0,    0,    0,  555,  555,
    0,    0,    0,    0, 1568, 1569, 1570, 1571,    0,    0,
    0,    0,    0,    0,    0,    0,  555,  555,    0,  555,
  555,  555,    0,  555,  555,  555,  555,  555,  555,  555,
  555,  555,    0,    0,    0,    0, 1572, 1573, 1574, 1575,
 1576, 1577, 1578,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  553,  553,    0,  553,    0,    0,
    0,  880,  553,    0,    0,  553,    0,  553,  553,  553,
  553,  553,  553,  553,    0,  553,  553,  553,  553,    0,
  553,  553,    0,    0,  553,  553,  553,  553,    0,    0,
  553,  553,  553,  553,    0,    0,    0,    0,  551,    0,
  553,    0,  553,    0,    0,  553,    0,    0,    0,    0,
  553,    0,    0,    0,    0,    0,  553,  553,  553,  553,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  551,    0,    0,    0,    0,  551,    0,  551,  551,
  551,    0,  551,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  553,    0,  553,  553,  553,  551,  551,  551,
  551,    0,    0,    0,    0,    0,    0,    0,  553,  553,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  553,    0,    0,    0,  551,
  553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
  553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
  553,  553,  553,  553,  553,  553,  553,  553,    0,    0,
    0,  551,  553,  551,    0,  553,  553,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  553,  553,  553,  553,    0,  553,  553,  553,
  553,    0,    0,  553,    0,  553,  215,  553,  553,  553,
    0,    0,  553,  553,    0,  553,  553,  553,    0,    0,
    0, 1227, 1228, 1229,  553, 1230, 1231, 1232, 1233,    0,
 1234, 1235,  197,    0, 1236, 1237, 1238, 1239,    0,    0,
    0,    0,    0, 1240,    0,    0,    0,    0,    0,    0,
    0,    0,  553,  553,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  553,  553,    0,  553,  553,  553,    0,  553,  553,  553,
  553,  553,  553,  553,  553,  553,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  551,  551,
    0,  551,    0,    0,    0,    0,  551,    0,    0,  551,
    0,  551,  551,  551,  551,  551,  551,  551,    0,  551,
  551,  551,  551,    0,  551,  551,    0,    0,  551,  551,
  551,  551,    0,    0,  551,  551,  551,  551,    0,    0,
    0,    0,  552,    0,  551,    0,  551,    0,    0,  551,
    0,    0,    0,    0,  551,    0,    0,    0,    0,    0,
  551,  551,  551,  551,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  552,    0,    0,    0,    0,
  552,    0,  552,  552,  552,    0,  552,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  551,    0,  551,  551,
  551,  552,  552,  552,  552,    0,    0,    0,    0,    0,
    0,    0,  551,  551,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  551,
    0,    0,    0,  552,  551,  551,  551,  551,  551,  551,
  551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
  551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
  551,  551,    0,    0,    0,  552,  551,  552,    0,  551,
  551,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  551,  551,  551,  551,
    0,  551,  551,  551,  551,    0,    0,  551,    0,  551,
    0,  551,  551,  551,    0,    0,  551,  551,    0,  551,
  551,  551,    0,    0,    0,    0,    0,    0,  551,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  551,  551,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  551,  551,    0,  551,  551,  551,
    0,  551,  551,  551,  551,  551,  551,  551,  551,  551,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  552,  552,    0,  552,    0,    0,    0,    0,
  552,    0,    0,  552,    0,  552,  552,  552,  552,  552,
  552,  552,    0,  552,  552,  552,  552,    0,  552,  552,
    0,    0,  552,  552,  552,  552,    0,    0,  552,  552,
  552,  552,    0,    0,    0,    0,  554,    0,  552,    0,
  552,    0,    0,  552,    0,    0,    0,    0,  552,    0,
    0,    0,    0,    0,  552,  552,  552,  552,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  554,
    0,    0,    0,    0,  554,    0,  554,  554,  554,    0,
  554,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  552,    0,  552,  552,  552,  554,  554,  554,  554,    0,
    0,    0,    0,    0,    0,    0,  552,  552,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  552,    0,    0,    0,  554,  552,  552,
  552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
  552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
  552,  552,  552,  552,  552,  552,    0,    0,    0,  554,
  552,  554,    0,  552,  552,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  552,  552,  552,  552,    0,  552,  552,  552,  552,    0,
    0,  552,    0,  552,    0,  552,  552,  552,    0,    0,
  552,  552,    0,  552,  552,  552,    0,    0,    0,    0,
    0,    0,  552,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  552,  552,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  552,  552,
    0,  552,  552,  552,    0,  552,  552,  552,  552,  552,
  552,  552,  552,  552,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  554,  554,    0,  554,
    0,    0,    0,    0,  554,    0,    0,  554,    0,  554,
  554,  554,  554,  554,  554,  554,    0,  554,  554,  554,
  554,    0,  554,  554,    0,    0,  554,  554,  554,  554,
    0,    0,  554,  554,  554,  554,    0,    0,    0,    0,
  689,    0,  554,    0,  554,    0,    0,  554,    0,    0,
    0,    0,  554,    0,    0,    0,    0,    0,  554,  554,
  554,  554,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  689,    0,    0,    0,    0,  689,    0,
  689,  689,  689,    0,  689,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  554,    0,  554,  554,  554,  689,
  689,  689,  689,    0,    0,    0,    0,    0,    0,    0,
  554,  554,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  554,    0,    0,
    0,  689,  554,  554,  554,  554,  554,  554,  554,  554,
  554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
  554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
    0,    0,    0,  689,  554,  689,    0,  554,  554,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  554,  554,  554,  554,    0,  554,
  554,  554,  554,    0,    0,  554,    0,  554,    0,  554,
  554,  554,    0,    0,  554,  554,    0,  554,  554,  554,
    0,    0,    0,    0,    0,    0,  554,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  554,  554,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  554,  554,    0,  554,  554,  554,    0,  554,
  554,  554,  554,  554,  554,  554,  554,  554,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  689,  689,    0,  689,    0,    0,    0,    0,  689,    0,
    0,  689,    0,  689,  689,  689,  689,  689,  689,  689,
    0,  689,  689,  689,  689,    0,  689,  689,    0,    0,
  689,  689,  689,  689,    0,    0,  689,  689,  689,    0,
    0,    0,    0,    0,  688,    0,  689,    0,  689,    0,
    0,  689,    0,    0,    0,    0,  689,    0,    0,    0,
    0,    0,  689,  689,  689,  689,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  688,    0,    0,
    0,    0,  688,    0,  688,  688,  688,    0,  688,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  689,    0,
  689,  689,  689,  688,  688,  688,  688,    0,    0,    0,
    0,    0,    0,    0,  689,  689,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  689,    0,    0,    0,  688,  689,  689,  689,  689,
  689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
  689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
  689,  689,  689,  689,    0,    0,    0,  688,  689,  688,
    0,  689,  689,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  689,  689,
  689,  689,    0,  689,  689,  689,  689,    0,    0,  689,
    0,  689,    0,  689,  689,  689,    0,    0,  689,  689,
    0,  689,  689,  689,    0,    0,    0,    0,    0,    0,
  689,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  689,  689,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  689,  689,    0,  689,
  689,  689,    0,  689,  689,  689,  689,  689,  689,  689,
  689,  689,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  688,  688,    0,  688,    0,    0,
    0,    0,  688,    0,    0,  688,    0,  688,  688,  688,
  688,  688,  688,  688,    0,  688,  688,  688,  688,    0,
  688,  688,    0,    0,  688,  688,  688,  688,    0,    0,
  688,  688,  688,    0,    0,    0,    0,    0,  696,    0,
  688,    0,  688,    0,    0,  688,    0,    0,    0,    0,
  688,    0,    0,    0,    0,    0,  688,  688,  688,  688,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  696,    0,    0,    0,    0,    0,    0,  696,  696,
    0,    0,  696,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  688,    0,  688,  688,  688,  696,    0,  696,
  696,    0,    0,    0,    0,    0,    0,    0,  688,  688,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  298,  688,    0,    0,    0,    0,
  688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
  688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
  688,  688,  688,  688,  688,  688,  688,  688,    0,    0,
    0,  696,  688,  696,    0,  688,  688,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  688,  688,  688,  688,    0,  688,  688,  688,
  688,    0,    0,  688,    0,  688,    0,  688,  688,  688,
    0,    0,  688,  688,    0,  688,  688,  688,    0,    0,
    0,    0,    0,    0,  688,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  688,  688,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  688,  688,    0,  688,  688,  688,    0,  688,  688,  688,
  688,  688,  688,  688,  688,  688,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  696,  696,
    0,  696,    0,    0,    0,    0,  696,    0,    0,  696,
    0,  696,  696,  696,  696,  696,  696,  696,    0,  696,
  696,  696,  696,    0,  696,  696,    0,    0,  696,  696,
  696,  696,    0,    0,  696,  696,  696,    0,    0,   52,
    0,    0,    0,    0,  696,    0,  696,    0,    0,  696,
    0,    0,    0,    0,  696,    0,    0,    0,    0,    0,
  696,  696,  696,  696,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  298,    0,    0,
    0,    0,    0,    0,  298,    0,  298,  298,  298,    0,
    0,    0,    0,    0,    0,    0,  696,    0,   52,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
    0,    0,  696,  696,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  298,  298,  298,    0,  696,
    0,    0,    0,    0,  696,  696,  696,  696,  696,  696,
  696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
  696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
  696,  696,   52,    0,   52,    0,  696,    0,    0,  696,
  696,  298,  298,  298,    0,  298,    0,    0,  298,    0,
    0,    0,    0,    0,    0,    0,  696,  696,  696,  696,
    0,  696,  696,  696,  696,    0,    0,  696,    0,  696,
    0,  696,  696,  696,    0,    0,  696,  696,    0,  696,
  696,  696,    0,    0,    0,    0,    0,    0,  696,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  696,  696,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  696,  696,    0,  696,  696,  696,
    0,  696,  696,  696,  696,  696,  696,  696,  696,  696,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   52,
    0,    0,   52,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   52,    0,    0,    0,   52,   52,   52,    0,
   52,   52,   52,   52,    0,   52,   52,   52,    0,   52,
   52,   52,   52,    0,    0,   52,   52,   52,    0,    0,
    0,    0,    0,    0,    0,    0,  554,  127,  555,   54,
    0,  128,  129,  130,  131,  132,    0,  133,  134,  135,
  136,   52,  137,  138,    0,    0,  139,  140,  141,  142,
    0,    0,   98,  143,  144,    0,    0,    0,   52,    0,
    0,    0,  145,    0,  146,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   52,  147,
  148,  149,    0,   52,   52,    0,    0,    0,   54,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  150,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,    0,    0,    0,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   54,    0,   54,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   52,   52,   52,
   52,    0,   52,   52,   52,   52,    0,    0,   52,    0,
   52,    0,   52,   52,   52,   52,    0,   52,   52,    0,
   52,   52,   52,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   67,   68,    0,   69,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   52,   52,    0,
    0,    0,    0,    0,    0,    0,  357,    0,    0,    0,
    0,    0,    0,    0,    0,   52,   52,    0,   52,   52,
   52,    0,   52,   52,   52,   52,   52,   52,   52,   52,
   52,  156,    0,    0,    0,  358,    0,    0,    0,  359,
    0,    0,  360,  361,    0,    0,    0,  362,  363,  364,
  365,  366,  367,  368,  369,  370,  371,  372,  373,   54,
    0,    0,   54,    0,    0,  374,    0,    0,  375,    0,
    0,    0,   54,    0,    0,  376,   54,   54,   54,    0,
   54,   54,   54,   54,  377,   54,   54,   54,    0,   54,
   54,   54,   54,    0,    0,   54,   54,   54,    0,    0,
    0,    0,    0,    0,    0,    0,  264,  127,  265,   55,
    0,  128,  129,  130,  131,  132,    0,  133,  134,  135,
  136,   54,  137,  138,    0,    0,  139,  140,  141,  142,
    0,    0,    0,  143,  144,    0,    0,    0,   54,    0,
    0,    0,  145,    0,  146,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   54,  147,
  148,  149,    0,   54,   54,    0,    0,    0,   55,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  150,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,    0,    0,    0,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   55,    0,   55,    0,    0,  784,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   54,   54,   54,
   54,    0,   54,   54,   54,   54,    0,    0,   54,    0,
   54,    0,   54,   54,   54,   54,    0,   54,   54,  127,
   54,   54,   54,  128,  129,  130,  131,  132,    0,  133,
  134,  135,  136,    0,  137,  138,    0,    0,  139,  140,
  141,  142,    0,    0,    0,  143,  144,    0,    0,    0,
    0,    0,    0,    0,  145,    0,  146,   54,   54,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  147,  148,  149,    0,   54,   54,    0,   54,   54,
   54,    0,   54,   54,   54,   54,   54,   54,   54,   54,
   54,  225,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  150,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   55,
    0,    0,   55,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   55,    0,    0,    0,   55,   55,   55,    0,
   55,   55,   55,   55,    0,   55,   55,   55,    0,   55,
   55,   55,   55,    0,    0,   55,   55,   55,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  127,    0,   56,
    0,  128,  129,  130,  131,  132,    0,  133,  134,  135,
  136,   55,  137,  138,    0,    0,  139,  140,  141,  142,
    0,    0,    0,  143,  144,    0,    0,    0,   55,    0,
    0,    0,  145,    0,  146,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   55,  147,
  148,  149,    0,   55,   55,    0,    0,    0,   56,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  150,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,    0,    0,    0,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   56,    0,   56,    0,    0,  858,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   55,   55,   55,
   55,    0,   55,   55,   55,   55,    0,    0,   55,    0,
   55,    0,   55,   55,   55,   55,    0,   55,   55,  225,
   55,   55,   55,  225,  225,  225,  225,  225,    0,  225,
  225,  225,  225,    0,  225,  225,    0,    0,  225,  225,
  225,  225,    0,    0,    0,  225,  225,    0,    0,    0,
    0,    0,    0,    0,  225,    0,  225,   55,   55,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  225,  225,  225,    0,   55,   55,    0,   55,   55,
   55,    0,   55,   55,   55,   55,   55,   55,   55,   55,
   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  225,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   56,
    0,    0,   56,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   56,    0,    0,    0,   56,   56,   56,    0,
   56,   56,   56,   56,    0,   56,   56,   56,    0,   56,
   56,   56,   56,    0,    0,   56,   56,   56,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  127,    0,   53,
    0,  128,  129,  130,  131,  132,    0,  133,  134,  135,
  136,   56,  137,  138,    0,    0,  139,  140,  141,  142,
    0,    0,    0,  143,  144,    0,    0,    0,   56,    0,
    0,    0,  145,    0,  146,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   56,  147,
  148,  149,    0,   56,   56,    0,    0,    0,   53,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  232,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  150,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,    0,    0,    0,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   53,    0,   53,    0,    0,  232,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   56,   56,   56,
   56,    0,   56,   56,   56,   56,    0,    0,   56,    0,
   56,    0,   56,   56,   56,   56,    0,   56,   56,    0,
   56,   56,   56,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  105,  105,    0,  105,    0,    0,   61,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   56,   56,    0,
    0,    0,    0,    0,    0,    0,  105,    0,    0,    0,
    0,    0,    0,    0,    0,   56,   56,    0,   56,   56,
   56,    0,   56,   56,   56,   56,   56,   56,   56,   56,
   56,    0,    0,    0,    0,  105,    0,   61,    0,  105,
    0,    0,  105,  105,    0,    0,    0,  105,  105,  105,
  105,  105,  105,  105,  105,  105,  105,  105,  105,   53,
    0,    0,   53,    0,    0,  105,    0,    0,  105,    0,
    0,    0,   53,    0,    0,  105,   53,   53,   53,    0,
   53,   53,   53,   53,  105,   53,   53,   53,    0,   53,
   53,   53,   53,    0,    0,   53,   53,   53,    0,    0,
    0,   61,    0,   61,    0,    0,    0,  232,   34,    0,
    0,  232,  232,  232,  232,  232,    0,  232,  232,  232,
  232,   53,  232,  232,    0,    0,  232,  232,  232,  232,
    0,    0,    0,  232,  232,    0,    0,    0,   53,    0,
    0,    0,  232,    0,  232,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   53,  232,
  232,  232,    0,   53,   53,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  516,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  232,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,    0,    0,    0,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,    0,   62,    0,    0,    0,    0,   61,    0,
    0,   61,    0,    0,    0,    0,    0,   53,   53,   53,
   53,   61,   53,   53,   53,   53,    0,    0,   53,    0,
   53,    0,   53,   53,   53,   53,    0,   53,   53,    0,
   53,   53,   53,    0,   61,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   62,    0,    0,    0,    0,    0,    0,    0,
   61,    0,    0,    0,    0,    0,    0,   53,   53,    0,
    0,    0,    0,    0,    0,    0,    0,   61,    0,    0,
    0,    0,    2,    0,    0,   53,   53,    0,   53,   53,
   53,    0,   53,   53,   53,   53,   53,   53,   53,   53,
   53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   62,    0,   62,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   61,
    0,  507,    0,    0,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,    0,    0,    0,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,    0,   65,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   61,   61,   61,   61,
    0,   61,   61,   61,   61,    0,    0,   61,    0,   61,
    0,   61,   61,   61,   61,    0,   61,   61,    0,   61,
   61,   61,    0,    0,    0,    0,    0,    0,  508,    0,
    5,    6,    7,    0,    0,    0,    0,    0,    0,    0,
    0,   65,  509,    0,    0,    0,    0,  510,    0,    0,
    8,    9,    0,    0,    0,    0,   61,   61,    0,    0,
    0,    0,    0,   62,    0,    0,   62,   10,   11,   12,
   13,    0,  511,  512,   61,   61,   62,   61,   61,   61,
    0,   61,   61,   61,   61,   61,   61,   61,   61,   61,
    0,    0,  513,    0,    0,    0,    0,    0,    0,   62,
    0,    0,    0,    0,    0,   65,    0,   65,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   62,    0,  514,  515,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   62,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   62,    0,    0,    0,    0,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,    0,    0,    0,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,    0,   66,    0,    0,
    0,    0,   65,    0,    0,   65,    0,    0,    0,    0,
    0,   62,   62,   62,   62,   65,   62,   62,   62,   62,
    0,    0,   62,    0,   62,    0,   62,   62,   62,   62,
    0,   62,   62,    0,   62,   62,   62,    0,   65,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   66,    0,    0,    0,
    0,    0,    0,    0,   65,    0,    0,  225,    0,    0,
    0,   62,   62,    0,    0,    0,    0,    0,    0,    0,
    0,   65,    0,    0,    0,    0,    0,    0,    0,   62,
   62,    0,   62,   62,   62,    0,   62,   62,   62,   62,
   62,   62,   62,   62,   62,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   66,    0,   66,    0,    0,  225,    0,    0,    0,    0,
    0,    0,    0,   65,    0,    0,    0,    0,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,    0,    0,    0,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,    0,    0,    0,    0,    0,
    0,  566,    0,    0,    0,    0,    0,    0,    0,    0,
   65,   65,   65,   65,    0,   65,   65,   65,   65,    0,
    0,   65,    0,   65,    0,   65,   65,   65,   65,    0,
   65,   65,    0,   65,   65,   65,    0,    0,    0,    0,
    0,  566,  566,    0,    0,  566,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  566,    0,  566,    0,    0,    0,    0,    0,    0,    0,
   65,   65,    0,    0,    0,    0,    0,   66,    0,    0,
   66,    0,    0,    0,    0,    0,    0,    0,   65,   65,
   66,   65,   65,   65,    0,   65,   65,   65,   65,   65,
   65,   65,   65,   65,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   66,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  566,  225,  566,    0,    0,  225,
  225,  225,  225,  225,    0,  225,  225,  225,  225,   66,
  225,  225,    0,    0,  225,  225,  225,  225,    0,    0,
    0,  225,  225,    0,    0,    0,   66,    0,    0,    0,
  225,    0,  225,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  225,  225,  225,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,    0,
    0,    0,  225,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,    0,    0,    0,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
    0,    0,  564,    0,    0,    0,    0,    0,    0,    0,
    0,  566,  566,    0,  566,   66,   66,   66,   66,    0,
   66,   66,   66,   66,  566,  566,   66,    0,   66,    0,
   66,   66,   66,   66,    0,   66,   66,    0,   66,   66,
   66,    0,  564,  564,    0,    0,  564,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  564,  566,  564,    0,    0,    0,  566,    0,    0,
    0,    0,    0,  566,    0,   66,   66,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   66,   66,    0,   66,   66,   66,    0,
   66,   66,   66,   66,   66,   66,   66,   66,   66, 1022,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  564,    0,  564, 1023, 1024,
    0, 1025, 1026, 1027, 1028, 1029, 1030,    0, 1031, 1032,
    0, 1033, 1034, 1035, 1036, 1037,    0,  566,  566,  566,
  566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
  566,  566,  566,  566,  566,    0,    0,    0,  566,  566,
  566,  566,  566,  566,  566,    0,    0,    0,    0,  566,
    0,    0,  566,  566,    0,    0,  565,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  566,
  566,  566,  566,    0,  566,  566,  566,  566,    0,    0,
  566,    0,  566,    0,  566,  566,  566,    0,    0,  566,
  566,    0,  566,  566,  566,    0,  565,  565,    0,    0,
  565,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  565,    0,  565,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  566,
  566,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  564,  564,  566,  566,    0,
  566,  566,  566,    0,  566,  566,  566,  566,  566,  566,
  566,  566,  566,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  565,
    0,  565,    0,  564,    0,    0,    0,    0,  564,    0,
    0,    0,    0,    0,  564,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1038, 1039,    0, 1040,
 1041, 1042,    0, 1043, 1044,    0,    0, 1045, 1046,    0,
 1047,    0,    0,    0,    0,    0,    0,    0,    0,   33,
    0,    0,    0, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
 1055, 1056, 1057, 1058, 1059, 1060, 1061,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  564,  564,
  564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
  564,  564,  564,  564,  564,  564,    0,    0,   33,  564,
  564,  564,  564,  564,  564,  564,    0,    0,    0,    0,
  564,    0,    0,  564,  564,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  564,  564,  564,  564,    0,  564,  564,  564,  564,  565,
  565,  564,    0,  564,    0,  564,  564,  564,    0,    0,
  564,  564,    0,  564,  564,  564,    0,    0,    0,    0,
    0,    0,   33,    0,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  565,    0,    0,
    0,    0,  565,    0,    0,    0,    0,    0,  565,    0,
  564,  564,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  564,  564,
    0,  564,  564,  564,    0,  564,  564,  564,  564,  564,
  564,  564,  564,  564,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  565,  565,  565,  565,  565,  565,  565,  565,
  565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
    0,    0,    0,  565,  565,  565,  565,  565,  565,  565,
    0,    0,    0,    0,  565,    0,    0,  565,  565,   33,
   34,    0,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   33,    0,  565,  565,  565,  565,    0,  565,
  565,  565,  565,    0,    0,  565,    0,  565,    0,  565,
  565,  565,    0,    0,  565,  565,    0,  565,  565,  565,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   33,    0,    0,   34,    0,   34,    0,    0,    0,
    0,    0,    0,    0,  565,  565,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  565,  565,    0,  565,  565,  565,    0,  565,
  565,  565,  565,  565,  565,  565,  565,  565,    0,    0,
    0,    0,    0,    0,  766,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,    0,    0,    0,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,    0,  766,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   33,   33,   33,
   33,    0,   33,   33,   33,   33,    0,    0,   33,    0,
   33,   34,    0,   33,   34,    0,    0,    0,    0,    0,
   33,   33,   33,    0,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  766,    0,  766,
    0,    0,    0,    0,    0,    0,    0,   33,   33,  382,
   97,    0,    0,    0,    0,   99,    0,  100,    0,    0,
    0,    0,    0,   34,  101,   33,   33,    0,   33,   33,
   33,    0,   33,   33,   33,   33,   33,   33,   33,   33,
   33,  102,  383,    0,  384,  385,  386,  387,  388,    0,
    0,    0,    0,  389,    0,    0,  103,    0,  768,    0,
    0,    0,  390,    0,    0,    0,    0,  391,    0,  392,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  393,  394,  395,  396,  397,  398,  399,  400,  780,
    0,    0,    0,    0,  401,    0,    0,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,    0,    0,  768,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,  766,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  766,  780,   34,
   34,   34,   34,    0,   34,   34,   34,   34,    0,    0,
   34,    0,   34,    0,    0,   34,    0,    0,    0,    0,
    0,    0,   34,   34,   34,    0,    0,    0,    0,    0,
    0,  768,    0,  768,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  766,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   34,
   34,    0,    0,    0,  780,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   34,   34,    0,
   34,   34,   34,    0,   34,   34,   34,   34,   34,   34,
   34,   34,   34,    0,    0,    0,    0,    0,    0,    0,
  772,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
  766,  766,  766,  766,  766,  766,  766,  766,    0,    0,
    0,  766,  766,  766,  766,  766,  766,  766,  766,  766,
  766,  766,  766,  766,  766,  766,  766,    0,    0,  772,
    0,    0,    0,    0,    0,    0,    0,    0,  768,    0,
    0,    0,  766,  766,  766,  766,    0,  766,  766,  766,
  766,  768,    0,  766,    0,  766,    0,    0,  766,    0,
    0,    0,    0,    0,    0,  766,  766,  766,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  780,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  772,    0,  772,    0,    0,    0,    0,
  768,    0,  766,  766,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  766,  766,    0,  766,  766,  766,    0,  766,  766,  766,
  766,  766,  766,  766,  766,  766,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  770,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  768,  768,  768,  768,  768,  768,
  768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
  768,  768,    0,    0,    0,  768,  768,  768,  768,  768,
  768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
  768,    0,    0,  770,    0,    0,    0,    0,  780,  780,
  780,  780,  780,    0,    0,    0,  768,  768,  768,  768,
  772,  768,  768,  768,  768,    0,    0,  768,    0,  768,
  780,  780,  768,  772,    0,    0,    0,    0,    0,  768,
  768,  768,    0,    0,    0,    0,    0,  780,  780,  780,
  780,    0,    0,    0,  780,  780,    0,    0,    0,    0,
  780,    0,  780,  780,    0,    0,    0,  770,    0,  770,
  780,  780,    0,    0,    0,    0,  768,  768,    0,    0,
    0,    0,  772,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  768,  768,    0,  768,  768,  768,
    0,  768,  768,  768,  768,  768,  768,  768,  768,  768,
    0,    0,    0,    0,    0,    0,    0,  774,    0,    0,
    0,    0,    0,    0,    0,  780,  780,    0,  780,  780,
  780,    0,  780,  780,  780,  780,  780,  780,  780,  780,
  780,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  772,  772,  772,  772,
  772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
  772,  772,  772,  772,    0,    0,  774,  772,  772,  772,
  772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
  772,  772,  772,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  770,    0,    0,    0,  772,  772,
  772,  772,    0,  772,  772,  772,  772,  770,    0,  772,
    0,  772,    0,    0,  772,    0,    0,    0,    0,    0,
    0,  772,  772,  772,    0,    0,    0,    0,    0,    0,
  774,    0,  774,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  770,    0,  772,  772,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  772,  772,    0,  772,
  772,  772,    0,  772,  772,  772,  772,  772,  772,  772,
  772,  772,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  724,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
  770,  770,  770,  770,  770,  770,  770,  770,    0,    0,
    0,  770,  770,  770,  770,  770,  770,  770,  770,  770,
  770,  770,  770,  770,  770,  770,  770,  774,  724,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  774,    0,  770,  770,  770,  770,    0,  770,  770,  770,
  770,    0,    0,  770,    0,  770,    0,    0,  770,    0,
    0,    0,    0,    0,    0,  770,  770,  770,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  774,
    0,    0,  724,    0,  724,    0,    0,    0,    0,    0,
    0,    0,  770,  770,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  770,  770,    0,  770,  770,  770,    0,  770,  770,  770,
  770,  770,  770,  770,  770,  770,    0,    0,    0,    0,
    0,    0,  726,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  774,  774,  774,  774,  774,  774,  774,
  774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
  774,    0,    0,    0,  774,  774,  774,  774,  774,  774,
  774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
    0,  726,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  774,  774,  774,  774,    0,
  774,  774,  774,  774,    0,    0,  774,    0,  774,  724,
    0,  774,  724,    0,    0,    0,    0,    0,  774,  774,
  774,    0,  724,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  726,    0,  726,    0,    0,
    0,    0,    0,    0,    0,  774,  774,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  724,    0,  774,  774,    0,  774,  774,  774,    0,
  774,  774,  774,  774,  774,  774,  774,  774,  774,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  400,    0,    0,  724,  724,  724,  724,  724,
  724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
  724,  724,  724,    0,    0,    0,  724,  724,  724,  724,
  724,  724,  724,    0,    0,    0,    0,  724,    0,    0,
  724,  724,  726,    0,    0,  726,  400,    0,    0,    0,
    0,    0,    0,    0,    0,  726,    0,  724,  724,  724,
  724,  400,  724,  724,  724,  724,    0,    0,  724,    0,
  724,    0,  724,  724,  724,    0,    0,  724,  724,    0,
  724,  724,  724,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  156,    0,    0,  726,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  724,  724,    0,
    0,    0,    0,    0,    0,  400,    0,  400,    0,    0,
    0,    0,    0,    0,    0,  724,  724,    0,  724,  724,
  724,    0,  724,  724,  724,  724,  724,  724,  724,  724,
  724,    0,    0,    0,    0,    0,    0,    0,    0,  155,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  442,
    0,    0,    0,    0,    0,    0,    0,    0,  726,  726,
  726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
  726,  726,  726,  726,  726,  726,    0,    0,    0,  726,
  726,  726,  726,  726,  726,  726,    0,    0,    0,    0,
  726,    0,    0,  726,  726,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  442,    0,
  726,  726,  726,  726,    0,  726,  726,  726,  726,    0,
    0,  726,    0,  726,    0,  726,  726,  726,    0,    0,
  726,  726,    0,  726,  726,  726,    0,    0,    0,    0,
    0,    0,  400,    0,    0,  400,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  400,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  726,  726,  442,    0,  442,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  726,  726,
  208,  726,  726,  726,    0,  726,  726,  726,  726,  726,
  726,  726,  726,  726,  400,    0,    0,    0,   67,   68,
    0,   69,    0,    0,    0,    0,  126,    0,    0,  127,
    0,    0,    0,  128,  129,  130,  131,  132,    0,  133,
  134,  135,  136,    0,  137,  138,    0,    0,  139,  140,
  141,  142,    0,    0,   98,  143,  144,    0,    0,  208,
    0,  208,    0,    0,  145,    0,  146,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  147,  148,  149,    0,    0,    0,    0,  400,  400,
  400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
  400,  400,  400,  400,  400,  400,    0,    0,    0,  400,
  400,  400,  400,  400,  400,  400,  150,  151,    0,  442,
  400,    0,  442,  400,  400,  208,    0,    0,    0,    0,
    0,    0,  442,    0,    0,    0,    0,    0,    0,    0,
  400,  400,  400,  400,    0,  400,  400,  400,  400,    0,
    0,  400,    0,  400,    0,    0,  400,    0,    0,    0,
    0,  210,    0,  400,  400,  400,    0,    0,    0,    0,
    0,    0,  152,  153,  154,    0,    0,    0,    0,    0,
    0,  442,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   92,    0,    0,    0,    0,    0,    0,    0,
  400,  400,    0,    0,    0,    0,    0,    0,    0,   13,
    0,    0,    0,    0,    0,    0,    0,    0,  400,  400,
  210,  400,  400,  400,    0,  400,  400,  400,  400,  400,
  400,  400,  400,  400,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   92,    0,    0,    0,  442,  442,  442,  442,  442,
  442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
  442,  442,  442,  208,    0,    0,  442,  442,  442,  442,
  442,  442,  442,    0,    0,    0,  210,  442,    0,    0,
  442,  442,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   93,    0,    0,  442,  442,  442,
  442,    0,  442,  442,  442,  442,    0,   92,  442,    0,
  442,    0,  208,  442,    0,    0,    0,    0,    0,    0,
  442,  442,  442,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   93,    0,    0,    0,  442,  442,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  442,  442,    0,  442,  442,
  442,    0,  442,  442,  442,  442,  442,  442,  442,  442,
  442,    0,    0,    0,    0,    0,    0,    0,    0,  208,
  208,  208,  208,  208,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  208,    0,    0,    0,    0,  208,   93,
    0,  208,  208,    0,  210,    0,    0,   94,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  208,  208,
  208,  208,    0,  208,  208,  208,  208,    0,    0,    0,
    0,  208,    0,    0,  208,   92,    0,    0,    0,    0,
    0,  208,  208,  208,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  210,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   94,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  208,  208,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  208,  208,    0,  208,
  208,  208,    0,  208,  208,  208,  208,  208,  208,  208,
  208,  208,    0,    0,    0,    0,    0,    0,  777,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   94,    0,    0,    0,    0,    0,    0,    0,
  210,  210,  210,  210,  210,    0,    0,   93,    0,   47,
    0,    0,    0,    0,  210,    0,    0,    0,    0,  210,
    0,    0,  210,  210,    0,    0,    0,    0,    0,    0,
    0,   92,   92,   92,   92,   92,    0,  777,    0,  210,
  210,  210,  210,    0,  210,  210,  210,  210,    0,    0,
    0,    0,  210,   92,   92,  210,    0,    0,    0,    0,
    0,    0,  210,  210,  210,    0,    0,    0,   47,    0,
   92,   92,   92,   92,    0,    0,    0,   92,   92,    0,
    0,    0,    0,   92,    0,    0,   92,    0,    0,    0,
    0,    0,    0,   92,   92,    0,    0,    0,    0,  210,
  210,    0,    0,  777,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  210,  210,    0,
  210,  210,  210,    0,  210,  210,  210,  210,  210,  210,
  210,  210,  210,    0,   47,    0,    0,    0,    0,    0,
   94,    0,    0,   93,   93,   93,   93,   93,   92,   92,
    0,   92,   92,   92,    0,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   48,   93,   93,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   93,   93,   93,   93,    0,    0,    0,   93,
   93,    0,    0,    0,    0,   93,    0,    0,   93,    0,
    0,    0,    0,    0,    0,   93,   93,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   48,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  777,    0,    0,    0,    0,    0,    0,    0,    0,
   93,   93,    0,   93,   93,   93,    0,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   94,   94,   94,   94,
   94,    0,   47,    0,    0,    0,    0,    0,    0,   48,
    0,    0,    0,    0,    0,    0,    0,    0,   94,   94,
    0,    0,    0,    0,    0,   49,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   94,   94,   94,   94,    0,
    0,    0,   94,   94,    0,    0,    0,    0,   94,    0,
    0,   94,    0,    0,    0,    0,   50,    0,   94,   94,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   49,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  777,  777,  777,
  777,  777,    0,   94,   94,   50,   94,   94,   94,    0,
   94,   94,   94,   94,   94,   94,   94,   94,   94,  777,
  777,    0,    0,    0,    0,    0,    0,    0,   47,   47,
   47,   47,   47,    0,    0,    0,  777,  777,  777,  777,
   49,    0,    0,  777,  777,    0,    0,   48,    0,  777,
   47,   47,  777,    0,    0,    0,    0,   51,    0,  777,
  777,    0,    0,    0,    0,    0,    0,   47,   47,   47,
   47,   50,    0,    0,   47,   47,    0,    0,    0,    0,
   47,    0,    0,   47,    0,    0,    0,    0,  780,    0,
   47,   47,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  777,  777,   51,  777,  777,  777,
    0,  777,  777,  777,  777,  777,  777,  777,  777,  777,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   47,   47,  780,   47,   47,
   47,    0,   47,   47,   47,   47,   47,   47,   47,   47,
   47,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   51,   48,   48,   48,   48,   48,   49,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   48,   48,    0,    0,    0,
    0,    0,    0,  780,    0,    0,    0,    0,    0,   50,
    0,    0,   48,   48,   48,   48,    0,    0,    0,   48,
   48,    0,    0,    0,    0,   48,    0,    0,   48,    0,
    0,    0,    0,    0,    0,   48,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   48,   48,    0,   48,   48,   48,    0,   48,   48,   48,
   48,   48,   48,   48,   48,   48,    0,    0,    0,    0,
    0,    0,    0,    0,   49,   49,   49,   49,   49,    0,
   51,  316,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   49,   49,    0,    0,
  316,  316,    0,    0,    0,   50,   50,   50,   50,   50,
    0,  780,    0,   49,   49,   49,   49,    0,    0,    0,
   49,   49,    0,    0,    0,    0,   49,   50,   50,   49,
    0,    0,    0,    0,    0,    0,   49,   49,    0,    0,
    0,    0,   33,    0,   50,   50,   50,   50,    0,    0,
    0,   50,   50,    0,    0,    0,    0,   50,    0,    0,
   50,    0,    0,    0,  316,    0,  316,   50,   50,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   49,   49,    0,   49,   49,   49,    0,   49,   49,
   49,   49,   49,   49,   49,   49,   49,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   51,   51,   51,   51,
   51,    0,   50,   50,    0,   50,   50,   50,    0,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   51,   51,
    0,    0,    0,    0,    0,    0,  236,  780,  780,  780,
  780,  780,  561,    0,    0,   51,   51,   51,   51,    0,
    0,    0,   51,   51,  236,    0,    0,   33,   51,  780,
  780,   51,    0,    0,    0,    0,    0,    0,   51,   51,
    0,    0,    0,    0,    0,    0,  780,  780,  780,  780,
    0,    0,    0,  780,  780,    0,    0,    0,    0,  780,
    0,  316,  780,    0,  316,    0,    0,    0,    0,  780,
  780,    0,    0,    0,  316,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  236,    0,
  236,    0,    0,   51,   51,    0,   51,   51,   51,    0,
   51,   51,   51,   51,   51,   51,   51,   51,   51,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  780,  780,    0,  780,  780,  780,
    0,  780,  780,  780,  780,  780,  780,  780,  780,  780,
   33,    0,    0,    0,   33,   33,   33,   33,   33,    0,
   33,   33,   33,   33,    0,   33,   33,    0,  235,   33,
   33,   33,   33,    0,   37,    0,   33,   33,    0,   40,
    0,   43,    0,    0,    0,   33,  235,   33,   46,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   33,   33,   33,   49,    0,  316,  316,  316,
  316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
   52,    0,    0,    0,  316,    0,    0,    0,  316,  316,
  316,  316,  316,  316,    0,  236,    0,   33,  236,    0,
    0,    0,  316,  316,    0,    0,    0,    0,  236,  561,
  235,    0,  235,    0,    0,    0,    0,    0,    0,  316,
  316,  316,  316,    0,    0,    0,    0,    0,    0,    0,
  316,    0,    0,    0,    0,   33,    0,    0,    0,   33,
   33,   33,   33,   33,  316,   33,   33,   33,   33,    0,
   33,   33,    0,    0,   33,   33,   33,   33,    0,   37,
    0,   33,   33,    0,   40,    0,   43,    0,    0,    0,
   33,    0,   33,   46,    0,    0,    0,    0,    0,  316,
  316,  316,    0,    0,    0,    0,    0,   33,   33,   33,
   49,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   52,  316,  316,  316,  316,
  316,  316,  316,    0,    0,    0,    0,    0,  317,    0,
    0,    0,   33,    0,    0,    0,  236,    0,    0,    0,
    0,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,    0,    0,    0,  235,  236,    0,
  235,    0,  236,  236,  236,  236,  236,  236,    0,    0,
  235,    0,    0,    0,    0,    0,  236,  236,    0,    0,
    0,    0,    0,    0,    0,    0,  317,    0,    0,    0,
    0,    0,    0,  236,  236,  236,  236,    0,    0,    0,
    0,    0,    0,    0,  236,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  236,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  236,  236,    0,    0,    0,    0,    0,
    0,    0,  561,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  522,    0,    0,    0,    0,    0,
  236,  236,  236,  236,  236,  236,  236,    0,  235,    0,
    0,    0,    0,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,    0,    0,    0,    0,
  235,    0,    0,    0,  235,  235,  235,  235,  235,  235,
    0,    0,    0,    0,    0,    0,    0,    0,  235,  235,
    0,    0,    0,    0,    0,    0,    0,    0,  522,    0,
  522,    0,    0,    0,    0,  235,  235,  235,  235,    0,
    0,    0,    0,    0,    0,    0,  235,   34,    0,    0,
    0,    0,    0,    0,    0,    0,  317,    0,    0,    0,
  235,  317,  317,  317,  317,    0,  317,  317,  317,  317,
    0,  317,  317,    0,    0,  317,  317,  317,  317,    0,
    0,    0,  317,  317,    0,    0,    0,    0,    0,    0,
    0,  317,    0,  317,    0,  235,  235,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  317,  317,
  317,  321,    0,  734,    0,    0,    0,    0,    0,    0,
    0,    0,  235,  235,  235,  235,  235,  235,  235,    0,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  317,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  522,    0,    0,  522,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  522,  561,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  321,    0,  918,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   67,    0,
    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  527,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  522,  522,  522,  522,  522,  522,  522,  522,  522,
  522,  522,  522,  522,    0,    0,    0,    0,  522,    0,
    0,    0,  522,  522,  522,  522,  522,  522,    0,    0,
    0,   67,    0,    0,   69,    0,  522,  522,    0,    0,
    0,    0,    0,    0,    2,  527,    0,  527,    0,    0,
    0,    0,    0,  522,  522,  522,  522,    0,    0,    0,
    0,    0,    0,    0,  522,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  522,    0,
    0,    0,    0,    0,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,    0,    0,    0,
    0,    7,    0,    0,    0,  311,  312,  313,  314,  315,
  316,    0,    0,  522,  522,    0,    0,    0,    0,    8,
    9,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   10,   11,   12,   13,
  522,  522,  522,  522,  522,  522,  522,  317,  371,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  318,    0,    0,    0,    0,    0,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
    0,    0,  527,    0,    7,  527,    0,    0,  311,  312,
  313,  314,  315,  316,    0,  527,  319,  320,    0,    0,
    0,    0,    8,    9,    0,    0,    0,    0,    0,    0,
    0,    0,  371,    0,  371,    0,    0,    0,    0,   10,
   11,   12,   13,   27,   28,   29,   30,   31,   32,   33,
  317,  363,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  318,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  319,
  320,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  363,    0,  363,    0,    0,
    0,    0,    0,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,    0,  356,    0,    0,    0,  527,  527,
  527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
  527,    0,    0,    0,    0,  527,    0,    0,    0,  527,
  527,  527,  527,  527,  527,    0,    0,    0,    0,  371,
    0,    0,  371,  527,  527,    0,    0,    0,    0,    0,
    0,    0,  371,    0,    0,    0,    0,    0,    0,    0,
  527,  527,  527,  527,    0,    0,    0,    0,  356,    0,
  356,  527,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  527,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  527,  527,  363,    0,    0,  363,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  363,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  527,  527,  527,
  527,  527,  527,  527,    0,  210,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  371,  371,  371,  371,  371,
  371,  371,  371,  371,  371,  371,  371,  371,    0,    0,
    0,    0,  371,    0,    0,    0,  371,  371,  371,  371,
  371,  371,    0,    0,    0,  356,    0,    0,  356,    0,
  371,  371,    0,    0,    0,    0,    0,    0,  356,  210,
    0,  210,    0,    0,   34,    0,    0,  371,  371,  371,
  371,    0,    0,    0,    0,    0,    0,    0,  371,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  371,    0,    0,    0,    0,    0,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,    0,    0,    0,    0,  363,    0,    0,    0,  363,
  363,  363,  363,  363,  363,    0,    0,  371,  371,    0,
 1144,    0,    0,  363,  363,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  363,  363,  363,  363,  371,  371,  371,  371,  371,  371,
  371,  363,  521,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  363,    0,    0,    0,    0,
    0,  356,  356,  356,  356,  356,  356,  356,  356,  356,
  356,  356,  356,  356,    0,    0,  210,    0,  356,  210,
    0,    0,  356,  356,  356,  356,  356,  356,    0,  210,
  363,  363,    0,    0,    0,    0,  356,  356,    0,    0,
    0,    0,    0,    0,    0,    0,  521,    0,  521,    0,
    0,    0,  187,  356,  356,  356,  356,  363,  363,  363,
  363,  363,  363,  363,  356,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  356,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    2,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  356,  356,    0,    0,    0,  187,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  356,  356,  356,  356,  356,  356,  356,  507,    0,    0,
    0,    0,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  210,    0,    0,    0,    0,  210,
    0,    0,    0,  210,  210,  210,  210,  210,  210,    0,
    0,    0,    0,  521,    0,    0,  521,  210,  210,    0,
    0,    0,    0,    0,    0,    0,  521,    0,    0,    0,
    0,    0,    0,    0,  210,  210,  210,  210,    0,    0,
    0,    0,    0,    0,    0,  210,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  210,
    0,    0,    0,    0,  508,    0,    5,    6,    7,    0,
    0,    0,    0,    0,    0,    0,  156,    0,  509,    0,
    0,    0,    0,  510,    0,    0,    8,    9,    0,    0,
    0,    0,    0,    0,  210,  210,  187,    0,    0,    0,
    0,    0,    0,   10,   11,   12,   13,    0,  511,  512,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  210,  210,  210,  210,  210,  210,  210,  513,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  187,    0,    0,    0,  521,
  521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
  521,  521,    0,  514,  515,    0,  521,    0,    0,    0,
  521,  521,  521,  521,  521,  521,    0,    0,    0,    0,
    0,    0,    0,    0,  521,  521,  212,    0,    0,    0,
   27,   28,   29,   30,   31,   32,   33,    0,    0,    0,
    0,  521,  521,  521,  521,    0,    0,    0,    0,    0,
    0,    0,  521,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  521,    0,    0,    0,
    0,    0,  187,    0,  187,  187,  187,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  187,    0,    0,    0,
    0,  187,    0,    0,  187,  187,    0,    0,    0,    0,
    0,  521,  521,    0,    0,    0,    0,    0,    0,    0,
    0,  187,  187,  187,  187,    0,  187,  187,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  521,  521,
  521,  521,  521,  521,  521,    0,  187,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  127,    0,    0,    0,  128,  129,
  130,  131,  132,    0,  133,  134,  135,  136,    0,  137,
  138,  187,  187,  139,  140,  141,  142,  433,  156,    0,
  143,  144,    0,  282,    0,    0,    0,  281,    0,  145,
    0,  146,    0,    0,    0,    0,    0,    0,  187,  187,
  187,  187,  187,  187,  187,  280,  147,  148,  149,    0,
  434,    0,  435,  436,  437,  438,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  465,    0,    0,    0,
    0,  150,    0,    0,    0,    0,    0,    0,    0,  439,
  440,  441,  442,    0,    0,  443,    0,    0,    0,  444,
  445,  446,    0,    0,  212,    0,    0,    0,  212,  212,
  212,  212,  212,    0,  212,  212,  212,  212,    0,  212,
  212,    0,    0,  212,  212,  212,  212,  212,    0,    0,
  212,  212,    0,    0,    0,    0,    0,    0,    0,  212,
    0,  212,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  212,  212,  212,    0,
  212,    0,  212,  212,  212,  212,    0,  156,    0,    0,
    0,    0,  282,    0,    0,    0,  692,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  212,    0,    0,  280,    0,    0,    0,    0,  212,
  212,  212,  212,  447,    0,  212,    0,    0,    0,  212,
  212,  212,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  465,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   67,   68,    0,   69,    0,
    0,    0,    0,  126,    0,    0,  127,    0,    0,    0,
  128,  129,  130,  131,  132,    0,  133,  134,  135,  136,
    0,  137,  138,    0,    0,  139,  140,  141,  142,    0,
    0,   98,  143,  144,    0,    0,    0,    0,    0,    0,
    0,  145,    0,  146,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  147,  148,
  149,    0,    0,  212,    0,    0,    0,  680,    0,    0,
    0,    0,  680,    0,    0,    0,  680,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  150,  680,  275,  276,  277,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  463,
  464,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  680,  156,    0,    0,    0,
    0,  282,    0,    0,    0,  281,    0,    0,    0,    0,
    0,    0,    0,    0,   67,   68,    0,   69,    0,  152,
  153,  154,  126,  280,    0,  127,    0,    0,    0,  128,
  129,  130,  131,  132,    0,  133,  134,  135,  136,    0,
  137,  138,    0,    0,  139,  140,  141,  142,    0,    0,
   98,  143,  144,    0,  465,    0,    0,    0,    0,    0,
  145,    0,  146,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  147,  148,  149,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  150,    0,  275,  276,  277,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  463,  464,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  209,    0,    0,
    0,    0,    0,    0,  680,  680,    0,  680,  152,  153,
  154,    0,  680,    0,    0,  680,    0,  156,    0,  680,
  680,  680,  680,  680,    0,  680,  680,  680,  680,    0,
  680,  680,    0,    0,  680,  680,  680,  680,    0,    0,
  680,  680,  680,    0,    0,    0,    0,    0,    0,    0,
  680,    0,  680,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   67,   68,    0,   69,  680,  680,  680,
    0,  126,    0,    0,  127,  209,    0,    0,  128,  129,
  130,  131,  132,    0,  133,  134,  135,  136,    0,  137,
  138,    0,    0,  139,  140,  141,  142,    0,    0,   98,
  143,  144,  680,    0,  680,  680,  680,    0,    0,  145,
    0,  146,    0,    0,    0,    0,    0,  156,  680,  680,
    0,    0,    0,    0,    0,    0,  147,  148,  149,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  680,  680,
  680,  150,    0,  275,  276,  277,   67,   68,    0,   69,
    0,    0,    0,    0,  126,  209,  156,  127,    0,    0,
    0,  128,  129,  130,  131,  132,    0,  133,  134,  135,
  136,    0,  137,  138,    0,    0,  139,  140,  141,  142,
    0,    0,   98,  143,  144,    0,    0,    0,    0,    0,
    0,    0,  145,    0,  146,    0,    0,  152,  153,  154,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  147,
  148,  149,    0,  903,  209,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   67,   68,    0,   69,    0,    0,
    0,    0,  126,    0,    0,  127,    0,    0,    0,  128,
  129,  130,  131,  132,  150,  133,  134,  135,  136,    0,
  137,  138,    0,    0,  139,  140,  141,  142,  904,  156,
   98,  143,  144,    0,    0,    0,    0,    0,    0,    0,
  145,    0,  146,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  147,  148,  149,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  152,  153,  154,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  209,  156,    0,
    0,    0,  150,  151,   67,   68,    0,   69,    0,    0,
    0,    0,  126,    0,    0,  127,    0,    0,    0,  128,
  129,  130,  131,  132,    0,  133,  134,  135,  136,    0,
  137,  138,    0,    0,  139,  140,  141,  142,    0,    0,
   98,  143,  144,    0,    0,    0,    0,    0,    0,    0,
  145,    0,  146,    0,    0,    0,  209,    0,  152,  153,
  154,    0,    0,   67,   68,    0,   69,  147,  148,  149,
    0,  126,    0,    0,  127,    0,    0,    0,  128,  129,
  130,  131,  132,    0,  133,  134,  135,  136,    0,  137,
  138,    0,    0,  139,  140,  141,  142,  159,    0,   98,
  143,  144,  150,    0,    0,    0,    0,    0,    0,  145,
    0,  146,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  147,  148,  149,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  159,    0,    0,  152,  153,
  154,  538,    0,    0,    0,    0,   67,   68,    0,   69,
    0,    0,    0,    0,  126,    0,    0,  127,    0,    0,
    0,  128,  129,  130,  131,  132,    0,  133,  134,  135,
  136,    0,  137,  138,    0,    0,  139,  140,  141,  142,
    0,    0,   98,  143,  144,    0,    0,    0,    0,    0,
    0,    0,  661,    0,  146,    0,    0,  152,  153,  154,
    0,    0,    0,    0,    0,   67,   68,    0,   69,  147,
  148,  149,    0,  126,    0,    0,  127,  841,    0,    0,
  128,  129,  130,  131,  132,    0,  133,  134,  135,  136,
    0,  137,  138,    0,    0,  139,  140,  141,  142,    0,
    0,   98,  143,  144,  150,    0,    0,    0,  317,    0,
    0,  145,    0,  146,    0,    0,  544,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  147,  148,
  149,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  152,  153,  154,  701,  159,  159,  317,  159,    0,    0,
    0,    0,  159,    0,    0,  159,    0,    0,    0,  159,
  159,  159,  159,  159,    0,  159,  159,  159,  159,    0,
  159,  159,    0,    0,  159,  159,  159,  159,    0,    0,
  159,  159,  159,    0,    0,    0,    0,    0,    0,    0,
  159,  800,  159,    0,    0,    0,    0,    0,    0,  152,
  153,  154,    0,    0,    0,  801,    0,  159,  159,  159,
  802,  803,    0,  804,  805,  806,  807,  808,  809,    0,
  810,  811,    0,  812,  813,  814,  815,  816,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  159,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  817,
    0,  818,    0,    0,    0,    0,  819,    0,    0,    0,
    0,    0,  800,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  820,    0,    0,    0,  801,    0,  159,  159,
  159,  802,  803,    0,  804,  805,  806,  807,  808,  809,
    0,  810,  811,    0,  812,  813,  814,  815,  816,    0,
    0,    0,    0,    0,    0,  821,  317,    0,    0,    0,
    0,  317,  317,  317,  317,    0,  317,  317,  317,  317,
    0,  317,  317,    0,    0,  317,  317,  317,  317,    0,
    0,    0,  317,  317,    0,    0,    0,    0,    0,    0,
  817,  317,  818,  317,    0,    0,    0,  819,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  317,  317,
  317,    0,    0,  820,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  317,    0,  822,  821,  823,  824,  825,
  826,  827,  828,  829,  830,  831,  832,  833,  834,  835,
  836,  837,  838,  839,    0,    0,    0,  840,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  822,    0,  823,  824,
  825,  826,  827,  828,  829,  830,  831,  832,  833,  834,
  835,  836,  837,  838,  839,    0,    0,    0,  840,
};
static int yycheck[] = {                                       4,
   24,  673,   24,   92,  296,   22,   23,    1,  296,   24,
  102,  103,    1,  296,   19,  166,   13,   93,  927,    1,
  728,  949,   27,   28,   29,   30,  413,   24,  415,    1,
  180,   64,    1,   42,  659,   91,   36,   37,  782,   59,
    1,   43,   38,   45,  716,   41,  467,   46,   44,   40,
   43,   38,  192,  193,  194,  195,  196,   44, 1093,  125,
   60,   46,   46,   40,   76,   41, 1121,   42,   24,   61,
   47,   44,  365,   41,  166,  123,   46,  264,   41,   46,
  125,   61, 1083,   60,   42,   58,  319,  264,  265,   41,
  105,  123,  168, 1471,   44,   91, 1195,  189,  187,   59,
  260,  261,   46,  263,   40,  125,   41,  104,  113,   41,
  115,  116,  117,  128,   42,   40,  264,   41,  262,   20,
   21,  470,  214,  145,   40,  349,  148,  275,   42,   41,
 1458,   41,  260,  261,   41,  263,  151,   41,   43,   41,
   40,   59,  231,   93,  288,  167,   41,  380,  104,   46,
  155,  156,  860,  861,   40,   40,  232,   41,  155,  263,
 1488,   46,   40,   91,   65,  198,   91,   40,  180,  166,
   41,   72,   38,   41,   43,   91,   42,  266,  264,  330,
   59,  186,   40,   40,   44,   46,   46,  123,   93,   40,
   40,   91,  207,  901,   60,  299,   93,   40,  342,  204,
  205,  351,  202,   59,  209,   91,   43,  125,   45,   40,
  111,  112,  209,   91,  374,  375,   40, 1595,   40,  483,
  484,  485,  267,   40,   93,   91,  231,  935,   44, 1328,
  482,  320,   93,  238,   91,  260,  261,  259,  263,   61,
   91,   91,  334,  332,  916, 1246,  125,   33,   91,  542,
  502,  260,  261,  273,  263,  156,  123,  333,  320,  321,
   59,  266,  267,  311,   91,  280,  271,  289,   41,  274,
  262,   61,  287,  278,   91,   59,  296,   93,  283,  284,
  285,  286,  262,  470,  316,  260,  261,  296,  263,  262,
   40,  380,  294,  359,  518,  263,  288,  274,  364,  123,
  333,  264,  296,  297,  306,  307,  264,  296,  297,  365,
  327,  328,  264,  325,  296,  297,  331,  329,  262,  220,
  221,  296,  324,  995,  296,  297,  125,  296,  297,  264,
  265,  299,  264,  330,  331,  296,  297,  337,  335,  351,
  264,  125,  470,   59,  320,  321,  260,  261,  318,  263,
  264,  318,  264,  265,  264,  273,  266,  264,  352,  264,
  264,  275,  264,  352,  353,  354,  355,  456,   41,  264,
  271,   44,  374,  123,   59,  263,  286,  287,  279,  335,
  264,  265,  296,  352,  353,  354,  355,  260,  261,  409,
  263,  655,   91,  264,  411,  123,  264, 1325,  391,  359,
  489,  490,  260,  261,  364,  263,  391,  391,  420,  125,
  311,   40,  313, 1468,  528,  504,  317,  681,  568,  505,
  506,  507,  421,  470,  325,  326,  515,  123,  329,  579,
   44,  451,   40,  264,  265,  266, 1460,  462,  262,  454,
  125,  461,  863,  448,  464,  450,  538, 1502,  315,  316,
  351, 1486, 1196,   44,   40,  286,  287,  294,   47, 1084,
  465,  452,   91,  472,   38,  462, 1490,  556,  465,  306,
  307,   40,  477,   46,  260,  261,   40,  263,  264,   93,
  359,  570,   41,   91,   43,  364,  542,  324,   61,  273,
  264,  264,  265,  266,  360,  361,  362,  472,  762,  504,
   41,   42,   93,  404,  405,   91,  407,   59,  409, 1461,
  586,  262,  262,  286,  287,  535,  536,  537,  538,  539,
  540,  541,   91,  424,  425,  260,  261,   91,  263,  525,
  535,  536,  260,  451,  123,  263,  264,  374,  525, 1491,
   40,  543,  267,  461, 1252, 1253,  464,  562, 1476,  123,
   91,  556,  564,  629,  704,  631,  568,  273,  472,   42,
  359,  561,   59,  123,  465,  364,   46,  579,  260,  261,
   44,  263,   46,  125,   43,  535,  536,  537,  538,  539,
  540,  541,  315,  847,   40,   46,   40,  260,  273,   91,
  263,   91,   61,  593,  594,  330,  331, 1506,   44,  599,
  605,  601,  123,  695,  693,  694,  611,  640,   91,  701,
  511,  512,   44,   93,  480,  630,   62,  535,  536,  537,
  538,  539,  540,  541,   91,  917,  393,  394,  125,  917,
   62,  123,   93,  534,  917,   91,  537,   91,  123,  661,
  424,  425,  426,  427,   41,  721,   43,  787, 1320,  789,
  790,  791,  792,  793,   46,  670,  535,  536,  537,  538,
  539,  540,  541,  564,  448,  449,  450,  451,  673,   40,
  123,  260,  261,  678,  263,  680,  691,  677,  579,  535,
  536,  537,  538,  539,  540,  541,  123,   41,   46,  694,
   44,  780,  704,  698,  699,  700,  283,  284,   44,   59,
  715,  718,   60,  604,  278, 1413,  675,  281,  282,  283,
  284,  716,  286,  287,  288,  730,  617,   40, 1426,   40,
   91,  273, 1109,   40, 1111,  737,   40,  628,  393,  394,
   38,  318,   41,   42,  746,  451,  535,  536,  537,  538,
  539,  540,  541, 1415,  296,  461,  431,  432,  464,   91,
  651,  535,  536,  537,  538,  539,  540,  541,  260,  261,
  765,  263,  767,   40,  853,  125,  451,   41,   91,  264,
  462,  266,  848,  778,   91,   38,  273,   91,  463,   42,
  465,  857,   91,  468,  469,  266,  687,  688,   40,   40,
   40,  286,  287,  260,  261,  260,  263,   60,  263,   41,
   44, 1509,   46,  279,  280,  286,  287,  708,   38,  710,
   40,  712,   42,  289,   91,  123,  717,   41,   42,  535,
  536,  537,  538,  539,  540,  541,  848,   61,   91,   41,
   60,   91,   44,  845,   41,   42,  737,  926,   40,  928,
   91,   91,  339, 1551,   91,  391,  747,  748,  306,   91,
  535,  536,  537,  538,  539,  540,  541,  409,  391,  260,
  761,   91,  263,  264,   38,   47, 1453,   91,   42,  391,
  457,  458, 1459,  460, 1582,  391,  888,  966,  902,  968,
 1552,   43,   44,  784,   91,  885,   60,  264,   41, 1597,
   41,   91,   43,   44,  909,  796,   41,  798,  974,  451,
  915,  906, 1489,   91,  281,  282,  283,  260,  261,  461,
  263,  916,  464,  273,  883,   43,   44,   91,  260,  261,
  267,  263, 1594,  917,  936,   41,  938,  932,  917,   41,
  919,  920,  921,   41,   42,  917,  296,  919,  920,   38,
 1016,  260,  261,   42,  263,  917,  316,  848,  917,   42,
  919,  920,  921,   41,  451,   43,  917,  858,  919,  920,
  301,   60,  303,  304,  305,  970,  463,   40,  465,  466,
  278,  468,  469,  281,  282,  283,  284,   40,  286,  287,
  288,   61,   59,  535,  536,  537,  538,  539,  540,  541,
  995,   93,   91, 1069, 1145, 1146, 1147, 1148,   40,   43,
  260,  261,  263,  263, 1155, 1156, 1157,  936,  268,  938,
  911,   41,  913,  260,  261,  475,  263,   93,  260,  261,
  294,  263,  281,  282,  283,  284,  268,  301,   93,  303,
  304,  305,  835,  836,   59,  936,  296,  938,  535,  536,
  537,  538,  539,  540,  541,  280,  306,   93,  125,  409,
   40,   40, 1141, 1142,  296,  374,  375,  299,  125,  960,
  260,  261,  963,  263,  306,   91,   58,   91,  342,  343,
  344,   40,  260,  261,   91,  263,   40,   40,   40,   59,
  268,  280,  281,  282,  283,  284,  260,  261,   40,  263,
 1107,  451,  260,  261, 1111,  263,  264,  360,  361,  362,
  125,  461, 1119, 1125,  464,  125,  295,   44,  296, 1496,
 1497,  300,   41,  302,  388,  389,  390,  123,  392,   40,
  309,  395,   40,  262,  264,  265,  266,  262,  391,   44,
  360,  361,  362, 1138,   41,   41,   59,  326, 1135,  280,
  281,  282,  283,  284, 1220,  125,  286,  287, 1145, 1146,
 1147, 1148,  341, 1165,  414,  415,  416,   60, 1155, 1156,
 1157,  274,  310, 1064,  312,  313,  314, 1179,  463, 1181,
  274,   62,  414,  415,  416,  535,  536,  537,  538,  539,
  540,  541,  260,  261, 1189,  263,  360,  361,  362,  281,
  282,  283,  284, 1094, 1095, 1096,  273,  576,  577,  578,
 1101, 1102, 1103, 1104, 1105, 1106,  275, 1108, 1109, 1110,
   44, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1310, 1120,
   58, 1122,  365, 1124,  123, 1126,  414,  415,  416,  123,
 1319,  123,   40,  123,  260,  261,  262,  263,  264,  274,
   40, 1330,  268,  260,  261,   40,  263, 1264,  273,   41,
   38,  268,  260,  261,   42,  263,   40,  283,   46,   47,
  317,  360,  361,  362,  317,   61,  467, 1343,   61,   40,
  296,   61,   60,  470,  470,   44, 1298,   41, 1247,  296,
   93, 1182,  299,   59,   41,   41, 1187,   41,   41,  306,
  330,  331,  332,  273,  320,  321, 1301, 1198,   41,  295,
   91,   41,   44,   91,  300,   41,  302, 1208,   40,   58,
   44, 1212, 1213,  309,   44, 1320,  296,   38,  125,  263,
   61,   42, 1223,   61,   40, 1414,  366,  367,  368,   40,
  326,  327,  409,  410,  411,  412,  413,   41,  125,   60,
   41,   40,  274, 1244, 1245,  341,   93,   93,  274,  125,
  273,   41,   44,   41,  431,  432,   41, 1258, 1259, 1260,
 1261, 1262, 1263,   44, 1265,  281,  282,  283,  284,   44,
   91,  448,  449,  450,  451,    0,  372,   40,  455,  456,
   58,   40,   40, 1472,  461,   41,   41,  464,  414,  415,
  416, 1360,   40,   40,  471,  472,   41,  414,  415,  416,
   41, 1416,  427, 1479,  429,  430,   41,  294,   33,   62,
 1415,   41,   91,   38,   41,   40,   41,   42,   40,   44,
  501,  489,   47,  448,  449,  450,  451,  497,   40,  409,
  277,   41,   61,   41,   59,   60,   61,   62,  125,  123,
  451, 1342,   62,  391,   93,   41,   41,   93, 1349,  526,
  527,   41,  529,  530,  531,  317,  533,  534,  535,  536,
  537,  538,  539,  540,  541,  317,   91,   38,   93,  260,
  261,  451,  263,   41,   40,  260,  261,  268,  263, 1555,
 1497,  461, 1504,   40,  464,   58,  409,  410,  411,  412,
  413,   58,   93,  330,  331,  332, 1588,  273,  123,   93,
  125,   93,   93, 1592,   40,  296,  504,   44,  431,  432,
  535,  536,  537,  538,  539,  540,  541,   91,   40,   91,
  296,   40,   40,  123,   93,  448,  449,  450,  451,  366,
  367,  368,  455,  456, 1435, 1436, 1437,  269,  461,   41,
  272,  464,   41,  328,   40,  330,  331, 1552,  471,  472,
   41,  421,  337,   41,   93,  535,  536,  537,  538,  539,
  540,  541,   93,  295,  296,  510,   44,  274,  300,   41,
  302,   58,  360,  361,  362,   41, 1591,  309,   41,   44,
   60,   93,   61,   40,   40,   40, 1487,   40,   40, 1594,
   40, 1492, 1493, 1494,  326, 1496,   40, 1498, 1499, 1500,
   40,   40,   40,  526,  527,   40,  529,  530,  531,  341,
  533,  534,  535,  536,  537,  538,  539,  540,  541, 1520,
 1521, 1522,   40,  414,  415,  416,   41,  125,   62,   41,
   41,   93,   93,  409,   41,  260,  261,  262,  263,  360,
  361,  362,   93,  268,   41,   93,  271,   41,  273,  274,
  275,  276,  277,  278,  279,   41,  281,  282,  283,  284,
   93,  286,  287,  288,   59,  290,  291,  292,  293,   93,
   41,  296,  297,  298,  299,  451,   41,   93,   41,   41,
   93,  306, 1583,  308,   41,  461,  311,   93,  464,   41,
  315,  316,   41,  318,   93,   41,   41,  322,  323,  324,
  325,   93,   93,   41,   93,   41,   41,  278,   93,   41,
  281,  282,  283,  284,  339,  286,  287,  288,  263,   41,
   93,   44,  260,  261,  274,  263,   41,   41,  123,   41,
  125,   40,   93,  358,  359,  360,  361,  362,   93,  364,
  365,   40,   38,   93,   41,   40,   40,   40,   58,  374,
  375,   58,   58,   41,   41,   41,   40,   40,  263,  535,
  536,  537,  538,  539,  540,  541,  391,   41,   93,   41,
   41,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  428,  429,  430,  431,  432,   93,   41,
   40,   93,    0,   93,   40,   40,   40,  355,  356,  357,
   40,   40,   40,  448,  449,  450,  451,  123,  453,  454,
  455,  456,   40,   40,  459,   40,  461,   40,  463,  464,
  465,  466,  380,  468,  469,   33,  471,  472,  473,   40,
   38,   41,   40,   41,   42,  480,   44,   40,   93,   47,
   60,   58,   41,   40,   93,  260,   40,   40,  263,   40,
   91,   59,   60,   61,   62,   41,   40,   38,  273,  294,
   40,   42,   41,  508,  509,  510,  301,   41,  303,  304,
  305,  269,   41,   41,  272,  274,  263,   41,   41,   60,
   40,  526,  527,   91,  529,  530,  531,   40,  533,  534,
  535,  536,  537,  538,  539,  540,  541,  295,  296,   41,
   41,  510,  300,  274,  302,   40,  358,  342,  343,  344,
   91,  309,   41,   41,  123,  123,  474,  125,  476,  477,
  478,  479,   41,  125,   44,  294,   62,  123,  326,   40,
  125,  123,  301,  123,  303,  304,  305,  125,  123,   62,
  123,   41,   41,  341,  260,  123,   41,  263,  125,   41,
  123,   41,   41,  388,  389,  390,   41,  392,  125,   62,
  395,  123,  278,   41,  123,  281,  282,  283,  284,  123,
  286,  287,  288,  342,  343,  344,   40,   40,  123,   41,
  263,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,   46,   93,   93,  275,  413,  263,
  275,   42,  417,  418,  419,  420,  421,  422,   61,  275,
  275,   91,  275,  275,  275,  263,  431,  432,  275,  388,
  389,  390,  275,  392,  275,  965,  395,  263,  263,  179,
  777,  688,  275,  448,  449,  450,  451,   41,  275,  402,
  942,  275,  275,  275,  459,  844, 1431, 1205,  940, 1069,
 1129,  670,  260,  261,  863,  263,  853, 1206,  473, 1193,
  268,  335,  462,  271,   24,  273,  274,  275,  276,  277,
  278,  279,  850,  281,  282,  283,  284,    9,  286,  287,
 1133,  114,  290,  291,  292,  293,   24,  574,  296,  297,
  298,  299,  513,  508,  509,  703,    0,  640,  306,   64,
  308,  707,  289,  311,   -1,   -1,  474,   -1,  316,   -1,
   -1,  353,   -1,   -1,  322,  323,  324,  325,   -1,   -1,
  535,  536,  537,  538,  539,  540,  541,   -1,   -1,   33,
  260,  261,   -1,  263,   38,   -1,   40,   41,   42,   -1,
   44,   -1,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,  360,  361,  362,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,  362,   -1,  391,   -1,   -1,   -1,   91,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,  123,
  428,  125,   -1,  431,  432,  355,  356,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,   -1,
  380,  459,   -1,  461,   -1,  463,  464,  465,   -1,   -1,
  468,  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,
   -1,   -1,  480,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,  288,   -1,  290,  291,  292,  293,
   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,   -1,   -1,
  508,  509,  433,  434,  435,  436,  437,  438,  439,  440,
  441,  442,  443,  444,  445,  446,  447,   -1,  526,  527,
   -1,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  474,   -1,  476,  477,  478,  479,
   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,   -1,  263,
   -1,  365,   -1,   59,  268,   -1,   -1,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,  299,   -1,   -1,   -1,   -1,
    0,   -1,  306,   -1,  308,   -1,   -1,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,  323,
  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,   41,   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,   -1,  360,  361,  362,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   91,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,  123,  428,  125,   -1,  431,  432,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  448,  449,  450,  451,   -1,  453,
  454,  455,  456,   -1,   -1,  459,   -1,  461,   -1,  463,
  464,  465,   -1,   -1,  468,  469,   -1,  471,  472,  473,
   -1,   -1,  271,   -1,   -1,   -1,  480,  273,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,
   -1,  290,  291,  292,  293,   -1,   -1,   -1,  297,  298,
   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,  346,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  260,  261,   -1,  263,   -1,   -1,  365,   -1,  268,   -1,
   -1,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,  123,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,  299,
   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,  308,   -1,
   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,
   -1,   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  431,  432,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   41,   42,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,  451,   -1,   -1,  358,   -1,
  360,  361,  362,   59,   60,   61,   62,  463,   -1,  465,
  466,   -1,  468,  469,  374,  375,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,   -1,   -1,   91,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,   -1,   -1,   -1,  123,  428,  125,
   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,  448,  449,
  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,
  294,  461,   -1,  463,  464,  465,   -1,   -1,  468,  469,
   -1,  471,  472,  473,   -1,  309,   -1,   -1,   -1,   -1,
  480,   -1,   -1,  277,  278,  279,   -1,  281,  282,  283,
  284,  325,  286,  287,  288,   -1,  290,  291,  292,  293,
  334,   -1,   -1,  297,  298,   -1,   -1,   -1,  508,  509,
   -1,   -1,   -1,   -1,  348,  349,  350,  351,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,   -1,   -1,  380,  381,  382,  383,
  384,  385,  386,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,
   -1,  365,  268,   -1,   -1,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,  299,   -1,   -1,   -1,   -1,    0,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,
   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  360,  361,  362,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   91,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,   -1,   -1,
   -1,  123,  428,  125,   -1,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,   -1,   -1,  459,   -1,  461,  262,  463,  464,  465,
   -1,   -1,  468,  469,   -1,  471,  472,  473,   -1,   -1,
   -1,  277,  278,  279,  480,  281,  282,  283,  284,   -1,
  286,  287,  288,   -1,  290,  291,  292,  293,   -1,   -1,
   -1,   -1,   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,  299,   -1,   -1,
   -1,   -1,    0,   -1,  306,   -1,  308,   -1,   -1,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
  322,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,   41,   42,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  360,  361,
  362,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,
   -1,   -1,   -1,   91,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
  422,  423,   -1,   -1,   -1,  123,  428,  125,   -1,  431,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,
   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,  461,
   -1,  463,  464,  465,   -1,   -1,  468,  469,   -1,  471,
  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,  480,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,   -1,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,  299,   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,
  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,
   -1,   -1,   -1,   -1,  322,  323,  324,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,  360,  361,  362,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  391,   -1,   -1,   -1,   91,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,  123,
  428,  125,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,   -1,
   -1,  459,   -1,  461,   -1,  463,  464,  465,   -1,   -1,
  468,  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,
   -1,   -1,  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,
   -1,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,  299,   -1,   -1,   -1,   -1,
    0,   -1,  306,   -1,  308,   -1,   -1,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,  323,
  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,   41,   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,   -1,  360,  361,  362,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   91,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,  123,  428,  125,   -1,  431,  432,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  448,  449,  450,  451,   -1,  453,
  454,  455,  456,   -1,   -1,  459,   -1,  461,   -1,  463,
  464,  465,   -1,   -1,  468,  469,   -1,  471,  472,  473,
   -1,   -1,   -1,   -1,   -1,   -1,  480,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,
   -1,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,
   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,  308,   -1,
   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,
   -1,   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   41,   42,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
  360,  361,  362,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,   -1,   -1,   91,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,   -1,   -1,   -1,  123,  428,  125,
   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,
   -1,  461,   -1,  463,  464,  465,   -1,   -1,  468,  469,
   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,
  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   -1,   -1,   -1,   -1,    0,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,   40,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  360,  361,  362,   59,   -1,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,  391,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,   -1,   -1,
   -1,  123,  428,  125,   -1,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,   -1,   -1,  459,   -1,  461,   -1,  463,  464,  465,
   -1,   -1,  468,  469,   -1,  471,  472,  473,   -1,   -1,
   -1,   -1,   -1,   -1,  480,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,    0,
   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
  322,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,
   -1,   -1,   -1,   -1,  301,   -1,  303,  304,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,  391,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
  422,  423,  123,   -1,  125,   -1,  428,   -1,   -1,  431,
  432,  388,  389,  390,   -1,  392,   -1,   -1,  395,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,
   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,  461,
   -1,  463,  464,  465,   -1,   -1,  468,  469,   -1,  471,
  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,  480,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,
   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,   -1,   -1,  277,  278,  279,   -1,
  281,  282,  283,  284,   -1,  286,  287,  288,   -1,  290,
  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  270,  271,  272,    0,
   -1,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,  322,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,   -1,   -1,   -1,  339,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  323,
  324,  325,   -1,  364,  365,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,   -1,   -1,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,
  461,   -1,  463,  464,  465,  466,   -1,  468,  469,   -1,
  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,   33,   -1,   -1,   -1,  323,   -1,   -1,   -1,  327,
   -1,   -1,  330,  331,   -1,   -1,   -1,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  260,
   -1,   -1,  263,   -1,   -1,  353,   -1,   -1,  356,   -1,
   -1,   -1,  273,   -1,   -1,  363,  277,  278,  279,   -1,
  281,  282,  283,  284,  372,  286,  287,  288,   -1,  290,
  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  270,  271,  272,    0,
   -1,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,  322,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,  339,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  323,
  324,  325,   -1,  364,  365,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,   -1,   -1,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  123,   -1,  125,   -1,   -1,   91,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,
  461,   -1,  463,  464,  465,  466,   -1,  468,  469,  271,
  471,  472,  473,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  306,   -1,  308,  508,  509,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,  325,   -1,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,   33,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,
   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,   -1,   -1,  277,  278,  279,   -1,
  281,  282,  283,  284,   -1,  286,  287,  288,   -1,  290,
  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,    0,
   -1,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,  322,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,  339,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  323,
  324,  325,   -1,  364,  365,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,   -1,   -1,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  123,   -1,  125,   -1,   -1,   91,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,
  461,   -1,  463,  464,  465,  466,   -1,  468,  469,  271,
  471,  472,  473,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  306,   -1,  308,  508,  509,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,  325,   -1,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,
   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,   -1,   -1,  277,  278,  279,   -1,
  281,  282,  283,  284,   -1,  286,  287,  288,   -1,  290,
  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,    0,
   -1,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,  322,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,  339,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  323,
  324,  325,   -1,  364,  365,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,   -1,   -1,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  123,   -1,  125,   -1,   -1,   91,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,
  461,   -1,  463,  464,  465,  466,   -1,  468,  469,   -1,
  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,   -1,   -1,   -1,   -1,  323,   -1,   59,   -1,  327,
   -1,   -1,  330,  331,   -1,   -1,   -1,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  260,
   -1,   -1,  263,   -1,   -1,  353,   -1,   -1,  356,   -1,
   -1,   -1,  273,   -1,   -1,  363,  277,  278,  279,   -1,
  281,  282,  283,  284,  372,  286,  287,  288,   -1,  290,
  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,
   -1,  123,   -1,  125,   -1,   -1,   -1,  271,   59,   -1,
   -1,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,  322,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,  339,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  323,
  324,  325,   -1,  364,  365,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,   -1,   -1,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,   -1,    0,   -1,   -1,   -1,   -1,  260,   -1,
   -1,  263,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,  273,  453,  454,  455,  456,   -1,   -1,  459,   -1,
  461,   -1,  463,  464,  465,  466,   -1,  468,  469,   -1,
  471,  472,  473,   -1,  296,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  273,   -1,   -1,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,
   -1,  322,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,   -1,   -1,   -1,  417,  418,  419,  420,  421,
  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
  432,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,
   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,  461,
   -1,  463,  464,  465,  466,   -1,  468,  469,   -1,  471,
  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,  409,   -1,
  411,  412,  413,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,  423,   -1,   -1,   -1,   -1,  428,   -1,   -1,
  431,  432,   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,
   -1,   -1,   -1,  260,   -1,   -1,  263,  448,  449,  450,
  451,   -1,  453,  454,  526,  527,  273,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  322,   -1,  508,  509,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  535,  536,  537,  538,  539,  540,
  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,   -1,   -1,   -1,
  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
  427,  428,  429,  430,  431,  432,   -1,    0,   -1,   -1,
   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,
   -1,  448,  449,  450,  451,  273,  453,  454,  455,  456,
   -1,   -1,  459,   -1,  461,   -1,  463,  464,  465,  466,
   -1,  468,  469,   -1,  471,  472,  473,   -1,  296,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  322,   -1,   -1,   33,   -1,   -1,
   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,
  527,   -1,  529,  530,  531,   -1,  533,  534,  535,  536,
  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   91,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  391,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,   -1,   -1,   -1,  417,
  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
  428,  429,  430,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,   -1,
   -1,  459,   -1,  461,   -1,  463,  464,  465,  466,   -1,
  468,  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,
   -1,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  508,  509,   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,
  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,
  273,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  271,  125,   -1,   -1,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,  322,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
   -1,  297,  298,   -1,   -1,   -1,  339,   -1,   -1,   -1,
  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,
   -1,   -1,  358,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,   -1,   -1,   -1,  417,  418,  419,  420,  421,  422,
  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  260,  261,   -1,  263,  448,  449,  450,  451,   -1,
  453,  454,  455,  456,  273,  274,  459,   -1,  461,   -1,
  463,  464,  465,  466,   -1,  468,  469,   -1,  471,  472,
  473,   -1,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,  311,   61,   -1,   -1,   -1,  316,   -1,   -1,
   -1,   -1,   -1,  322,   -1,  508,  509,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,
  533,  534,  535,  536,  537,  538,  539,  540,  541,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  276,  277,
   -1,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
   -1,  289,  290,  291,  292,  293,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,   -1,  417,  418,
  419,  420,  421,  422,  423,   -1,   -1,   -1,   -1,  428,
   -1,   -1,  431,  432,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,
  449,  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,
  459,   -1,  461,   -1,  463,  464,  465,   -1,   -1,  468,
  469,   -1,  471,  472,  473,   -1,   40,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,  274,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,
   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  484,  485,   -1,  487,
  488,  489,   -1,  491,  492,   -1,   -1,  495,  496,   -1,
  498,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,  511,  512,  513,  514,  515,  516,  517,
  518,  519,  520,  521,  522,  523,  524,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,   -1,   -1,   59,  417,
  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,   -1,
  428,   -1,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,  273,
  274,  459,   -1,  461,   -1,  463,  464,  465,   -1,   -1,
  468,  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,   -1,
  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,
   -1,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
   -1,   -1,   -1,  417,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,   -1,  428,   -1,   -1,  431,  432,  260,
   59,   -1,  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,  448,  449,  450,  451,   -1,  453,
  454,  455,  456,   -1,   -1,  459,   -1,  461,   -1,  463,
  464,  465,   -1,   -1,  468,  469,   -1,  471,  472,  473,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  322,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,   -1,   -1,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,
  461,  260,   -1,  464,  263,   -1,   -1,   -1,   -1,   -1,
  471,  472,  473,   -1,  273,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,  294,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,   -1,   -1,
   -1,   -1,   -1,  322,  309,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,  326,  327,   -1,  329,  330,  331,  332,  333,   -1,
   -1,   -1,   -1,  338,   -1,   -1,  341,   -1,    0,   -1,
   -1,   -1,  347,   -1,   -1,   -1,   -1,  352,   -1,  354,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  366,  367,  368,  369,  370,  371,  372,  373,    0,
   -1,   -1,   -1,   -1,  379,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,   59,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  260,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   59,  448,
  449,  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,
  459,   -1,  461,   -1,   -1,  464,   -1,   -1,   -1,   -1,
   -1,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,
  509,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,   -1,   -1,
   -1,  417,  418,  419,  420,  421,  422,  423,  424,  425,
  426,  427,  428,  429,  430,  431,  432,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,  273,   -1,  459,   -1,  461,   -1,   -1,  464,   -1,
   -1,   -1,   -1,   -1,   -1,  471,  472,  473,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,
  322,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,   -1,   -1,   -1,  417,  418,  419,  420,  421,
  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
  432,   -1,   -1,   59,   -1,   -1,   -1,   -1,  409,  410,
  411,  412,  413,   -1,   -1,   -1,  448,  449,  450,  451,
  260,  453,  454,  455,  456,   -1,   -1,  459,   -1,  461,
  431,  432,  464,  273,   -1,   -1,   -1,   -1,   -1,  471,
  472,  473,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,   -1,   -1,   -1,  455,  456,   -1,   -1,   -1,   -1,
  461,   -1,  463,  464,   -1,   -1,   -1,  123,   -1,  125,
  471,  472,   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,   -1,   -1,   59,  417,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,  453,  454,  455,  456,  273,   -1,  459,
   -1,  461,   -1,   -1,  464,   -1,   -1,   -1,   -1,   -1,
   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,  508,  509,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,   -1,   -1,
   -1,  417,  418,  419,  420,  421,  422,  423,  424,  425,
  426,  427,  428,  429,  430,  431,  432,  260,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  273,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,   -1,   -1,  459,   -1,  461,   -1,   -1,  464,   -1,
   -1,   -1,   -1,   -1,   -1,  471,  472,  473,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,   -1,   -1,   -1,  417,  418,  419,  420,  421,  422,
  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,   -1,
  453,  454,  455,  456,   -1,   -1,  459,   -1,  461,  260,
   -1,  464,  263,   -1,   -1,   -1,   -1,   -1,  471,  472,
  473,   -1,  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  322,   -1,  526,  527,   -1,  529,  530,  531,   -1,
  533,  534,  535,  536,  537,  538,  539,  540,  541,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,   -1,   -1,  417,  418,  419,  420,
  421,  422,  423,   -1,   -1,   -1,   -1,  428,   -1,   -1,
  431,  432,  260,   -1,   -1,  263,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,   -1,  448,  449,  450,
  451,   59,  453,  454,  455,  456,   -1,   -1,  459,   -1,
  461,   -1,  463,  464,  465,   -1,   -1,  468,  469,   -1,
  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,   -1,   -1,   -1,  417,
  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,   -1,
  428,   -1,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,   -1,
   -1,  459,   -1,  461,   -1,  463,  464,  465,   -1,   -1,
  468,  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,
   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  508,  509,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,
    0,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,  322,   -1,   -1,   -1,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,
   -1,   -1,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,   59,
   -1,   61,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,  325,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,   -1,   -1,   -1,  417,
  418,  419,  420,  421,  422,  423,  358,  359,   -1,  260,
  428,   -1,  263,  431,  432,  125,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,   -1,
   -1,  459,   -1,  461,   -1,   -1,  464,   -1,   -1,   -1,
   -1,    0,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,
   -1,   -1,  414,  415,  416,   -1,   -1,   -1,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  451,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,
   59,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  273,   -1,   -1,  417,  418,  419,  420,
  421,  422,  423,   -1,   -1,   -1,  125,  428,   -1,   -1,
  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,  448,  449,  450,
  451,   -1,  453,  454,  455,  456,   -1,  125,  459,   -1,
  461,   -1,  322,  464,   -1,   -1,   -1,   -1,   -1,   -1,
  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,  508,  509,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,
  410,  411,  412,  413,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  423,   -1,   -1,   -1,   -1,  428,  125,
   -1,  431,  432,   -1,  273,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,   -1,
   -1,  461,   -1,   -1,  464,  273,   -1,   -1,   -1,   -1,
   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  409,  410,  411,  412,  413,   -1,   -1,  273,   -1,    0,
   -1,   -1,   -1,   -1,  423,   -1,   -1,   -1,   -1,  428,
   -1,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  409,  410,  411,  412,  413,   -1,   59,   -1,  448,
  449,  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,
   -1,   -1,  461,  431,  432,  464,   -1,   -1,   -1,   -1,
   -1,   -1,  471,  472,  473,   -1,   -1,   -1,   59,   -1,
  448,  449,  450,  451,   -1,   -1,   -1,  455,  456,   -1,
   -1,   -1,   -1,  461,   -1,   -1,  464,   -1,   -1,   -1,
   -1,   -1,   -1,  471,  472,   -1,   -1,   -1,   -1,  508,
  509,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   -1,  125,   -1,   -1,   -1,   -1,   -1,
  273,   -1,   -1,  409,  410,  411,  412,  413,  526,  527,
   -1,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,    0,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,   -1,   -1,  455,
  456,   -1,   -1,   -1,   -1,  461,   -1,   -1,  464,   -1,
   -1,   -1,   -1,   -1,   -1,  471,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,  409,  410,  411,  412,
  413,   -1,  273,   -1,   -1,   -1,   -1,   -1,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  431,  432,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,   -1,
   -1,   -1,  455,  456,   -1,   -1,   -1,   -1,  461,   -1,
   -1,  464,   -1,   -1,   -1,   -1,    0,   -1,  471,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,  410,  411,
  412,  413,   -1,  526,  527,   59,  529,  530,  531,   -1,
  533,  534,  535,  536,  537,  538,  539,  540,  541,  431,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,  410,
  411,  412,  413,   -1,   -1,   -1,  448,  449,  450,  451,
  125,   -1,   -1,  455,  456,   -1,   -1,  273,   -1,  461,
  431,  432,  464,   -1,   -1,   -1,   -1,    0,   -1,  471,
  472,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,  125,   -1,   -1,  455,  456,   -1,   -1,   -1,   -1,
  461,   -1,   -1,  464,   -1,   -1,   -1,   -1,    0,   -1,
  471,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  526,  527,   59,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  526,  527,   59,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  125,  409,  410,  411,  412,  413,  273,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,  273,
   -1,   -1,  448,  449,  450,  451,   -1,   -1,   -1,  455,
  456,   -1,   -1,   -1,   -1,  461,   -1,   -1,  464,   -1,
   -1,   -1,   -1,   -1,   -1,  471,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  409,  410,  411,  412,  413,   -1,
  273,   40,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  431,  432,   -1,   -1,
   59,   60,   -1,   -1,   -1,  409,  410,  411,  412,  413,
   -1,  273,   -1,  448,  449,  450,  451,   -1,   -1,   -1,
  455,  456,   -1,   -1,   -1,   -1,  461,  431,  432,  464,
   -1,   -1,   -1,   -1,   -1,   -1,  471,  472,   -1,   -1,
   -1,   -1,   33,   -1,  448,  449,  450,  451,   -1,   -1,
   -1,  455,  456,   -1,   -1,   -1,   -1,  461,   -1,   -1,
  464,   -1,   -1,   -1,  123,   -1,  125,  471,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,  534,
  535,  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  409,  410,  411,  412,
  413,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,  431,  432,
   -1,   -1,   -1,   -1,   -1,   -1,   41,  409,  410,  411,
  412,  413,   47,   -1,   -1,  448,  449,  450,  451,   -1,
   -1,   -1,  455,  456,   59,   -1,   -1,   33,  461,  431,
  432,  464,   -1,   -1,   -1,   -1,   -1,   -1,  471,  472,
   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,
   -1,   -1,   -1,  455,  456,   -1,   -1,   -1,   -1,  461,
   -1,  260,  464,   -1,  263,   -1,   -1,   -1,   -1,  471,
  472,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,
  533,  534,  535,  536,  537,  538,  539,  540,  541,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,   -1,
  281,  282,  283,  284,   -1,  286,  287,   -1,   41,  290,
  291,  292,  293,   -1,  295,   -1,  297,  298,   -1,  300,
   -1,  302,   -1,   -1,   -1,  306,   59,  308,  309,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  323,  324,  325,  326,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  341,   -1,   -1,   -1,  413,   -1,   -1,   -1,  417,  418,
  419,  420,  421,  422,   -1,  260,   -1,  358,  263,   -1,
   -1,   -1,  431,  432,   -1,   -1,   -1,   -1,  273,  274,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,  448,
  449,  450,  451,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  459,   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  473,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,  295,
   -1,  297,  298,   -1,  300,   -1,  302,   -1,   -1,   -1,
  306,   -1,  308,  309,   -1,   -1,   -1,   -1,   -1,  508,
  509,  510,   -1,   -1,   -1,   -1,   -1,  323,  324,  325,
  326,   -1,   -1,   -1,   -1,   41,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  341,  535,  536,  537,  538,
  539,  540,  541,   59,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,  358,   -1,   -1,   -1,  391,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,   -1,   -1,   -1,  260,  413,   -1,
  263,   -1,  417,  418,  419,  420,  421,  422,   -1,   -1,
  273,   -1,   -1,   -1,   -1,   -1,  431,  432,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,  123,   -1,  125,
   -1,   -1,   -1,  448,  449,  450,  451,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  459,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,
  535,  536,  537,  538,  539,  540,  541,   -1,  391,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,   -1,   -1,   -1,   -1,
  413,   -1,   -1,   -1,  417,  418,  419,  420,  421,  422,
   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,  431,  432,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,  123,   -1,
  125,   -1,   -1,   -1,   -1,  448,  449,  450,  451,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  459,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,
  473,  276,  277,  278,  279,   -1,  281,  282,  283,  284,
   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,
   -1,   -1,  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  306,   -1,  308,   -1,  508,  509,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,
  325,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  535,  536,  537,  538,  539,  540,  541,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,   -1,  391,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,   -1,   -1,  260,   -1,  413,  263,   -1,
   -1,  417,  418,  419,  420,  421,  422,   -1,  273,  274,
   -1,   -1,   -1,   -1,   -1,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  459,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,
   -1,  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  273,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,   -1,   -1,   -1,   -1,  413,   -1,
   -1,   -1,  417,  418,  419,  420,  421,  422,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,  431,  432,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,  448,  449,  450,  451,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  459,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,   -1,   -1,   -1,
   -1,  413,   -1,   -1,   -1,  417,  418,  419,  420,  421,
  422,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,  431,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,
  535,  536,  537,  538,  539,  540,  541,  459,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  473,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
   -1,   -1,  260,   -1,  413,  263,   -1,   -1,  417,  418,
  419,  420,  421,  422,   -1,  273,  508,  509,   -1,   -1,
   -1,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,  448,
  449,  450,  451,  535,  536,  537,  538,  539,  540,  541,
  459,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  535,  536,  537,  538,
  539,  540,  541,   -1,   59,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,   -1,   -1,   -1,   -1,  413,   -1,   -1,   -1,  417,
  418,  419,  420,  421,  422,   -1,   -1,   -1,   -1,  260,
   -1,   -1,  263,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,   -1,   -1,   -1,  123,   -1,
  125,  459,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  508,  509,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  535,  536,  537,
  538,  539,  540,  541,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,   -1,   -1,
   -1,   -1,  413,   -1,   -1,   -1,  417,  418,  419,  420,
  421,  422,   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,
  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,  273,  123,
   -1,  125,   -1,   -1,   59,   -1,   -1,  448,  449,  450,
  451,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  459,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,   -1,   -1,   -1,   -1,  413,   -1,   -1,   -1,  417,
  418,  419,  420,  421,  422,   -1,   -1,  508,  509,   -1,
  125,   -1,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,  535,  536,  537,  538,  539,  540,
  541,  459,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,   -1,   -1,  260,   -1,  413,  263,
   -1,   -1,  417,  418,  419,  420,  421,  422,   -1,  273,
  508,  509,   -1,   -1,   -1,   -1,  431,  432,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
   -1,   -1,   59,  448,  449,  450,  451,  535,  536,  537,
  538,  539,  540,  541,  459,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  535,  536,  537,  538,  539,  540,  541,  322,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,   -1,   -1,   -1,   -1,  413,
   -1,   -1,   -1,  417,  418,  419,  420,  421,  422,   -1,
   -1,   -1,   -1,  260,   -1,   -1,  263,  431,  432,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  448,  449,  450,  451,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  459,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,
   -1,   -1,   -1,   -1,  409,   -1,  411,  412,  413,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,  423,   -1,
   -1,   -1,   -1,  428,   -1,   -1,  431,  432,   -1,   -1,
   -1,   -1,   -1,   -1,  508,  509,  273,   -1,   -1,   -1,
   -1,   -1,   -1,  448,  449,  450,  451,   -1,  453,  454,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  535,  536,  537,  538,  539,  540,  541,  473,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,   -1,  508,  509,   -1,  413,   -1,   -1,   -1,
  417,  418,  419,  420,  421,  422,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  431,  432,   33,   -1,   -1,   -1,
  535,  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,
   -1,  448,  449,  450,  451,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  459,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,
   -1,   -1,  409,   -1,  411,  412,  413,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  423,   -1,   -1,   -1,
   -1,  428,   -1,   -1,  431,  432,   -1,   -1,   -1,   -1,
   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  448,  449,  450,  451,   -1,  453,  454,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  535,  536,
  537,  538,  539,  540,  541,   -1,  473,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,  508,  509,  290,  291,  292,  293,  294,   33,   -1,
  297,  298,   -1,   38,   -1,   -1,   -1,   42,   -1,  306,
   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,  535,  536,
  537,  538,  539,  540,  541,   60,  323,  324,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   -1,  358,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,
  367,  368,  369,   -1,   -1,  372,   -1,   -1,   -1,  376,
  377,  378,   -1,   -1,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,   -1,   -1,  290,  291,  292,  293,  294,   -1,   -1,
  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,
   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   -1,   -1,   42,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,   -1,   -1,   60,   -1,   -1,   -1,   -1,  366,
  367,  368,  369,  480,   -1,  372,   -1,   -1,   -1,  376,
  377,  378,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,   -1,   -1,
  275,  276,  277,  278,  279,   -1,  281,  282,  283,  284,
   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,
   -1,  296,  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,
  325,   -1,   -1,  480,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   -1,   -1,   42,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,   60,  360,  361,  362,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   33,   -1,   -1,   -1,
   -1,   38,   -1,   -1,   -1,   42,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,  414,
  415,  416,  268,   60,   -1,  271,   -1,   -1,   -1,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   91,   -1,   -1,   -1,   -1,   -1,
  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  360,  361,  362,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,  414,  415,
  416,   -1,  268,   -1,   -1,  271,   -1,   33,   -1,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  260,  261,   -1,  263,  323,  324,  325,
   -1,  268,   -1,   -1,  271,   91,   -1,   -1,  275,  276,
  277,  278,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,
  297,  298,  358,   -1,  360,  361,  362,   -1,   -1,  306,
   -1,  308,   -1,   -1,   -1,   -1,   -1,   33,  374,  375,
   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,  415,
  416,  358,   -1,  360,  361,  362,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   91,   33,  271,   -1,   -1,
   -1,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,  414,  415,  416,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,
  324,  325,   -1,  327,   91,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  358,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,  372,   33,
  296,  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  414,  415,  416,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   33,   -1,
   -1,   -1,  358,  359,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,   -1,   -1,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  306,   -1,  308,   -1,   -1,   -1,   91,   -1,  414,  415,
  416,   -1,   -1,  260,  261,   -1,  263,  323,  324,  325,
   -1,  268,   -1,   -1,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,   -1,   -1,  290,  291,  292,  293,   33,   -1,  296,
  297,  298,  358,   -1,   -1,   -1,   -1,   -1,   -1,  306,
   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,  414,  415,
  416,  358,   -1,   -1,   -1,   -1,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,   -1,
   -1,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,  414,  415,  416,
   -1,   -1,   -1,   -1,   -1,  260,  261,   -1,  263,  323,
  324,  325,   -1,  268,   -1,   -1,  271,  123,   -1,   -1,
  275,  276,  277,  278,  279,   -1,  281,  282,  283,  284,
   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,
   -1,  296,  297,  298,  358,   -1,   -1,   -1,   33,   -1,
   -1,  306,   -1,  308,   -1,   -1,   41,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,
  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  414,  415,  416,  358,  260,  261,   91,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,   -1,   -1,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  306,  257,  308,   -1,   -1,   -1,   -1,   -1,   -1,  414,
  415,  416,   -1,   -1,   -1,  271,   -1,  323,  324,  325,
  276,  277,   -1,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,   -1,  289,  290,  291,  292,  293,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,
   -1,  337,   -1,   -1,   -1,   -1,  342,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,   -1,   -1,  271,   -1,  414,  415,
  416,  276,  277,   -1,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,   -1,  289,  290,  291,  292,  293,   -1,
   -1,   -1,   -1,   -1,   -1,  391,  271,   -1,   -1,   -1,
   -1,  276,  277,  278,  279,   -1,  281,  282,  283,  284,
   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,
   -1,   -1,  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,
  335,  306,  337,  308,   -1,   -1,   -1,  342,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,
  325,   -1,   -1,  358,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,   -1,  481,  391,  483,  484,  485,
  486,  487,  488,  489,  490,  491,  492,  493,  494,  495,
  496,  497,  498,  499,   -1,   -1,   -1,  503,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,   -1,  483,  484,
  485,  486,  487,  488,  489,  490,  491,  492,  493,  494,
  495,  496,  497,  498,  499,   -1,   -1,   -1,  503,
};
static int yyctable[] = {                                     -1,
  239,  556,   -1,  423,  766,   -1,  275,  696,   -1,  276,
  696,   -1,  277,  696,   -1,  279,  696,   -1,  280,  696,
   -1,  281,  696,   -1,  282,  696,   -1,  493,  717,   -1,
  205,   40,   -1,  225,  495,   -1,   97,  495,   -1,   99,
  495,   -1,  100,  495,   -1,  101,  495,   -1,  102,  495,
   -1,  103,  495,   -1,  729,  317,   -1,  797,  768,   -1,
   67,  564,   -1,   68,  564,   -1,   69,  564,   -1,   27,
   78,   -1,   28,   78,   -1,   29,   78,   -1,   30,   78,
   -1,   31,   78,   -1,   32,   78,   -1,   33,   78,   -1,
   34,   78,   -1, 1062,  624,   -1,   67,  565,   -1,   68,
  565,   -1,   69,  565,   -1, 1081,   37,   -1, 1207,  772,
   -1, 1209,  770,   -1, 1221,  608,   -1, 1427,  774,   -1,
 1064,  571,   -1, 1065,  571,   -1,
};
#ifdef YYDESTRUCT
static int yyastable[] = {                                      0,
  309,   18,  154,  155,  156,  157,  158,  176,  177,  193,
  194,  195,  196,  200,  201,  206,  209,  216,  217,  271,
  272,  274,  275,  276,  278,  279,  280,  281,  282,  283,
  284,  285,  286,  296,  319,  320,  398,  404,  405,  420,
  421,  423,  424,  426,  427,  428,  429,  430,  431,  432,
  434,  436,  438,  440,  441,  442,  443,  444,  445,  447,
  448,  449,  462,  480,  486,  215,    5,    6,    8,  310,
  311,  298,  325,   64,  125,  482,  178,  179,  180,  181,
  182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
  192,  397,  397,    8,   14,   17,   40,   41,   45,   47,
   54,   71,   86,  294,  316,  317,  384,  386,  387,  297,
  298,  273,  399,  215,  401,  403,  215,  310,    9,  318,
  318,    9,   10,  335,  335,   13,   16,   20,   21,   22,
   23,   24,   26,   27,   28,   29,   31,   32,   35,   36,
   37,   38,   42,   43,   51,   53,   68,   69,   70,  103,
  104,  159,  160,  161,  298,  307,  310,  314,  339,  363,
  381,  385,  387,  404,  405,  459,  289,  310,  310,  310,
  310,    7,   12,  342,  343,  342,  342,  289,  289,  425,
  289,  289,  289,  289,  342,  388,   60,  450,  389,   23,
   26,   27,   28,   29,   31,   32,   33,  289,  305,  481,
  484,  485,  318,  402,  293,  318,  390,  311,  298,  339,
  381,  382,  387,  459,    7,   33,  297,  347,  292,  294,
  294,   46,   48,   49,   50,  316,  316,  382,  383,  385,
  339,  297,  294,  318,  318,  207,  310,  401,  100,  101,
  102,  125,  219,  221,  222,  223,  224,  310,   75,   76,
  310,  310,  339,   26,   27,   28,   29,  381,   51,  381,
   24,   25,   34,   15,   17,  339,  217,  304,  310,  387,
  307,  310,  318,  306,  105,  106,  107,  136,  298,  300,
  304,  305,  136,  136,  136,  136,  316,  386,  381,  446,
  347,  295,   12,  295,  295,  422,  309,  141,  142,  143,
  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
  162,  163,  164,  165,  166,  167,  204,  218,  253,  254,
  289,  290,  311,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,  427,  430,  441,
  442,  443,  445,  464,  465,  466,  467,  468,  469,  470,
  473,  433,  435,  437,  439,  295,   39,   68,   72,   75,
   76,   80,   81,   82,   83,   84,   85,   86,   87,   88,
   89,   90,   91,   98,  101,  108,  117,  310,  382,   61,
  451,   39,   72,   74,   75,   76,   77,   78,   83,   92,
   97,   99,  111,  112,  113,  114,  115,  116,  117,  118,
  124,  316,  304,  294,  298,  323,  294,  323,  294,  323,
  294,  323,  294,  323,  294,  323,  294,  483,  484,  294,
  342,    7,    8,  292,  303,   73,   75,   76,   82,  310,
  310,  299,   39,   72,   74,   75,   76,   77,  111,  112,
  113,  114,  117,  121,  122,  123,  225,  339,  297,  217,
  310,  294,  297,  316,  294,  289,  294,  291,    8,  318,
  318,  295,  119,  120,  298,  310,  312,  382,  289,  294,
  347,  299,  166,  400,  310,  220,  136,  381,   25,  310,
  382,  310,  299,  299,  299,  310,  318,  310,  294,  294,
  310,   20,  299,  318,  340,  341,  339,  365,  366,  310,
  310,  310,  310,  339,  446,  290,   67,  154,  168,  173,
  198,  199,  218,  253,  254,  290,  421,  424,  426,  427,
  430,  441,  442,  443,  445,  453,  454,  456,  458,  290,
  318,  318,  318,  298,  110,  287,  298,  103,  382,  303,
  311,  318,  318,  335,   11,   31,   32,  294,  334,  335,
  311,  318,  386,   15,   17,  339,  387,  382,   87,  347,
  485,  316,  383,  294,  342,  197,  294,  425,   55,   57,
   58,   59,  471,  472,  474,  476,  477,  478,  479,  311,
  318,  468,  208,  210,  213,  214,  290,  441,  442,  445,
  488,  489,  490,  491,   84,  208,  211,  290,  487,  489,
  492,  493,   41,  154,  206,  209,  290,  442,  445,  494,
  206,  209,  290,  442,  445,  495,  294,   75,   76,   77,
  111,  112,  113,  300,  380,  382,  452,  294,  294,  322,
  294,  318,  318,  318,  318,  335,  334,  334,  290,  292,
  311,  295,  318,  318,   75,   76,   77,  111,  112,  113,
  294,  294,  310,  310,  299,  347,  395,  396,  289,  339,
   51,  374,  375,  382,    7,  292,  295,  295,  384,  300,
  333,  364,   19,  370,  372,  321,  487,  136,  310,   19,
  299,  314,  314,  314,  382,  382,   20,  292,  299,  301,
  292,  304,  110,  392,  393,  318,  318,  402,  110,  287,
  103,  382,  289,  425,  289,  289,  289,  303,  318,  298,
  310,  298,  310,  318,  316,   19,  294,  294,  310,  382,
  294,  342,  339,  311,  315,  318,  295,  294,   20,  322,
  336,  337,  338,  290,  382,  471,   56,  468,  475,  475,
  475,  475,  311,  318,  468,   62,   62,  212,  297,  304,
  318,  377,  297,  347,  342,  342,  297,  297,  342,  342,
  294,  215,  318,  310,  215,  310,  215,  318,   39,   51,
   52,   69,  119,  288,  291,  302,  327,  328,  379,  292,
  318,  347,  394,  298,  339,  347,  295,  299,  295,  295,
  295,  295,  295,  483,  295,  303,    8,  292,  318,    2,
   16,   21,   22,   24,   25,   26,   27,   28,   29,   31,
   32,   34,   35,   36,   37,   38,   80,   82,   87,  103,
  136,  226,  228,  229,  230,  231,  232,  233,  234,  235,
  236,  237,  238,  239,  240,  241,  242,  243,  244,  248,
  289,  344,  345,  463,   63,  313,  299,  297,  295,  292,
  370,    8,  292,  290,  297,    8,  297,  298,  365,  294,
  294,  310,  312,  290,   22,   23,   24,   26,   27,   28,
   29,   31,   32,   35,   36,   37,   38,   42,   43,  110,
  351,  352,  373,  445,  485,   28,   29,   63,  202,  203,
  205,  342,  310,  310,  314,  295,  295,  318,  340,  339,
  294,  382,   72,  117,  310,  382,   72,  117,  316,  310,
  298,  310,  298,  310,  316,   19,  422,  290,  455,  457,
  437,  318,  299,  318,  318,  292,  299,  339,  312,  318,
  335,   19,  347,  295,  294,  292,  295,  292,  336,  339,
  295,  292,  311,  318,  311,  318,  318,  294,  303,  294,
  295,  295,  294,  294,  295,  295,  318,  314,  310,   63,
  310,  295,  294,   39,  329,  330,  328,  294,  310,  369,
  301,  382,  295,  136,  394,   39,   46,   48,   49,   50,
   87,   88,   89,  133,  134,  135,  137,  140,  295,  250,
  251,  252,  318,  225,  349,  295,  323,  323,  323,  323,
  323,  323,  318,  318,  295,   25,   26,   27,   28,   29,
  294,  331,  242,  234,  246,  294,  227,  247,   22,  331,
  331,    2,   21,   22,   24,   25,   26,   27,   28,   29,
   31,   32,   34,   35,   36,   37,   38,  229,  230,  232,
  233,  234,  236,  237,  240,  241,  243,  256,  257,  258,
  259,  260,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  304,  324,  298,  304,  295,  343,  311,  297,  346,
   28,   65,   66,  318,  326,  347,  348,  381,  395,  290,
  297,  375,  289,  289,  294,  347,  318,  301,  336,  336,
  333,  364,  294,  298,  294,  298,   26,   27,   28,   29,
  294,  298,  294,  298,  294,  298,  294,  298,  294,  298,
  294,  298,  294,  298,  294,  298,  294,  298,  294,  298,
  294,  298,  294,  298,  294,  298,  104,  109,  376,  445,
  342,  311,  295,  336,  196,  404,  310,  339,  318,  318,
  292,  339,  312,  290,  169,  170,  171,  172,  290,  430,
  442,  443,  445,  460,  172,  174,  175,  290,  430,  442,
  443,  445,  461,  290,  136,  299,  299,  382,  346,  382,
  295,  295,  310,  295,  336,  315,  315,  295,  349,  338,
   62,   62,  377,  295,  318,  318,  294,  330,  382,  367,
  368,  382,  292,  378,  310,  347,  295,  294,  303,  303,
  299,  299,  299,  299,  294,  312,    8,  292,    8,  249,
  347,  298,  298,   25,   26,   27,   28,   29,  270,  292,
  298,  305,  291,  299,  318,  290,   22,   23,   24,   26,
   27,   28,   29,   31,   32,   35,   36,   37,   38,   44,
  347,  350,  352,  294,  294,  289,  373,  370,  299,  295,
  295,  294,  294,  326,  318,  318,  318,  294,  298,  294,
  298,  294,  298,  294,  298,  318,  318,  318,  318,  318,
  318,  335,  318,  318,  334,  318,  334,  335,  318,  318,
  318,  318,  318,  318,  318,  335,  318,  351,  318,    8,
   44,  318,   44,   51,  381,  318,   42,   91,  110,  363,
  371,  295,  400,  295,  310,  299,  299,  382,  382,  255,
  386,  386,  386,  386,  386,  386,  386,  311,  292,   19,
  295,  311,  311,  318,  303,  295,  318,  310,  295,  292,
  379,  378,  394,  318,  138,  139,  138,  139,  345,  380,
  318,  297,  292,  318,  318,  347,  299,  318,  291,  299,
   26,   27,   28,   29,  318,   26,   27,   28,  318,  373,
  290,  290,  301,  336,  336,  295,  299,  295,  299,  318,
  318,  318,  318,  318,  318,  335,  318,  295,  299,  295,
  299,  295,  299,  295,  299,  295,  295,  299,  295,  295,
  299,  295,  299,  295,  299,  295,  299,  295,  299,  295,
  299,  295,  295,  299,  295,    8,  295,  299,   51,  381,
  298,  310,  294,  292,   19,  316,  382,  312,  377,  295,
  378,  382,  295,  295,  295,  294,    8,  318,  347,  299,
  299,  299,  318,  295,  303,  303,  303,  295,  290,  295,
  295,  294,  294,  295,  299,  295,  299,  295,  299,  295,
  299,  294,  294,  294,  294,  294,  294,  294,  294,  294,
  294,  294,  294,  295,  294,    8,  299,  297,  336,  382,
  312,  339,  300,  332,  333,  303,  336,  295,  292,  295,
  344,  299,  318,  318,  318,  359,  356,  294,  294,  294,
  294,  355,  356,  357,  358,  353,  354,  355,  356,  357,
  358,  362,  360,  361,  351,  295,  332,  382,  294,  377,
  295,  347,  295,  295,  295,  295,  326,  295,  318,  355,
  356,  357,  358,  295,  318,  295,  295,  318,  295,  335,
  295,  318,  334,  295,  334,  335,  295,  295,  295,  295,
  295,  351,    8,   44,  295,   44,   51,  295,  381,  346,
  294,   19,  336,  391,  292,  295,  295,  295,  295,    8,
  336,  312,  295,   39,   54,   70,   79,   93,   94,   95,
   96,  125,  126,  127,  128,  129,  130,  131,  289,  347,
  295,  294,  294,  295,  255,  336,  318,  103,  295,  295,
  316,  339,  382,   19,  312,  332,  294,  336,  295,
};
#endif /* YYDESTRUCT */
#define YYFINAL 1
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 543
#if YYDEBUG
static const char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,0,"'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,
0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,"'{'",0,"'}'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ERROR_","BAD_COMMENT_",
"BAD_LITERAL_","ID","DOTTEDNAME","QSTRING","SQSTRING","INT32","INT64","FLOAT64",
"HEXBYTE","TYPEDEF_T","TYPEDEF_M","TYPEDEF_F","TYPEDEF_TS","TYPEDEF_MR",
"TYPEDEF_CA","DCOLON","ELLIPSIS","VOID_","BOOL_","CHAR_","UNSIGNED_","INT_",
"INT8_","INT16_","INT32_","INT64_","FLOAT_","FLOAT32_","FLOAT64_","BYTEARRAY_",
"UINT_","UINT8_","UINT16_","UINT32_","UINT64_","FLAGS_","CALLCONV_","MDTOKEN_",
"OBJECT_","STRING_","NULLREF_","DEFAULT_","CDECL_","VARARG_","STDCALL_",
"THISCALL_","FASTCALL_","CLASS_","BYREFLIKE_","TYPEDREF_","UNMANAGED_",
"FINALLY_","HANDLER_","CATCH_","FILTER_","FAULT_","EXTENDS_","IMPLEMENTS_",
"TO_","AT_","TLS_","TRUE_","FALSE_","_INTERFACEIMPL","VALUE_","VALUETYPE_",
"NATIVE_","INSTANCE_","SPECIALNAME_","FORWARDER_","STATIC_","PUBLIC_",
"PRIVATE_","FAMILY_","FINAL_","SYNCHRONIZED_","INTERFACE_","SEALED_","NESTED_",
"ABSTRACT_","AUTO_","SEQUENTIAL_","EXPLICIT_","ANSI_","UNICODE_","AUTOCHAR_",
"IMPORT_","ENUM_","VIRTUAL_","NOINLINING_","AGGRESSIVEINLINING_",
"NOOPTIMIZATION_","AGGRESSIVEOPTIMIZATION_","UNMANAGEDEXP_","BEFOREFIELDINIT_",
"STRICT_","RETARGETABLE_","WINDOWSRUNTIME_","NOPLATFORM_","METHOD_","FIELD_",
"PINNED_","MODREQ_","MODOPT_","SERIALIZABLE_","PROPERTY_","TYPE_","ASSEMBLY_",
"FAMANDASSEM_","FAMORASSEM_","PRIVATESCOPE_","HIDEBYSIG_","NEWSLOT_",
"RTSPECIALNAME_","PINVOKEIMPL_","_CTOR","_CCTOR","LITERAL_","NOTSERIALIZED_",
"INITONLY_","REQSECOBJ_","CIL_","OPTIL_","MANAGED_","FORWARDREF_",
"PRESERVESIG_","RUNTIME_","INTERNALCALL_","_IMPORT","NOMANGLE_","LASTERR_",
"WINAPI_","AS_","BESTFIT_","ON_","OFF_","CHARMAPERROR_","INSTR_NONE",
"INSTR_VAR","INSTR_I","INSTR_I8","INSTR_R","INSTR_BRTARGET","INSTR_METHOD",
"INSTR_FIELD","INSTR_TYPE","INSTR_STRING","INSTR_SIG","INSTR_TOK",
"INSTR_SWITCH","_CLASS","_NAMESPACE","_METHOD","_FIELD","_DATA","_THIS","_BASE",
"_NESTER","_EMITBYTE","_TRY","_MAXSTACK","_LOCALS","_ENTRYPOINT","_ZEROINIT",
"_EVENT","_ADDON","_REMOVEON","_FIRE","_OTHER","_PROPERTY","_SET","_GET",
"_PERMISSION","_PERMISSIONSET","REQUEST_","DEMAND_","ASSERT_","DENY_",
"PERMITONLY_","LINKCHECK_","INHERITCHECK_","REQMIN_","REQOPT_","REQREFUSE_",
"PREJITGRANT_","PREJITDENY_","NONCASDEMAND_","NONCASLINKDEMAND_",
"NONCASINHERITANCE_","_LINE","P_LINE","_LANGUAGE","_CUSTOM","INIT_","_SIZE",
"_PACK","_VTABLE","_VTFIXUP","FROMUNMANAGED_","CALLMOSTDERIVED_","_VTENTRY",
"RETAINAPPDOMAIN_","_FILE","NOMETADATA_","_HASH","_ASSEMBLY","_PUBLICKEY",
"_PUBLICKEYTOKEN","ALGORITHM_","_VER","_LOCALE","EXTERN_","_MRESOURCE",
"_MODULE","_EXPORT","LEGACY_","LIBRARY_","X86_","AMD64_","ARM_","ARM64_",
"MARSHAL_","CUSTOM_","SYSSTRING_","FIXED_","VARIANT_","CURRENCY_","SYSCHAR_",
"DECIMAL_","DATE_","BSTR_","TBSTR_","LPSTR_","LPWSTR_","LPTSTR_","OBJECTREF_",
"IUNKNOWN_","IDISPATCH_","STRUCT_","SAFEARRAY_","BYVALSTR_","LPVOID_","ANY_",
"ARRAY_","LPSTRUCT_","IIDPARAM_","IN_","OUT_","OPT_","_PARAM","_OVERRIDE",
"WITH_","NULL_","HRESULT_","CARRAY_","USERDEFINED_","RECORD_","FILETIME_",
"BLOB_","STREAM_","STORAGE_","STREAMED_OBJECT_","STORED_OBJECT_","BLOB_OBJECT_",
"CF_","CLSID_","VECTOR_","_SUBSYSTEM","_CORFLAGS","ALIGNMENT_","_IMAGEBASE",
"_STACKRESERVE","_TYPEDEF","_TEMPLATE","_TYPELIST","_MSCORLIB","P_DEFINE",
"P_UNDEF","P_IFDEF","P_IFNDEF","P_ELSE","P_ENDIF","P_INCLUDE","CONSTRAINT_",
"CONST_",
};
static const char *yyrule[] = {
"$accept : decls",
"decls :",
"decls : decls decl",
"decl : classHead '{' classDecls '}'",
"decl : nameSpaceHead '{' decls '}'",
"decl : methodHead methodDecls '}'",
"decl : fieldDecl",
"decl : dataDecl",
"decl : vtableDecl",
"decl : vtfixupDecl",
"decl : extSourceSpec",
"decl : fileDecl",
"decl : assemblyHead '{' assemblyDecls '}'",
"decl : assemblyRefHead '{' assemblyRefDecls '}'",
"decl : exptypeHead '{' exptypeDecls '}'",
"decl : manifestResHead '{' manifestResDecls '}'",
"decl : moduleHead",
"decl : secDecl",
"decl : customAttrDecl",
"decl : _SUBSYSTEM int32",
"decl : _CORFLAGS int32",
"decl : _FILE ALIGNMENT_ int32",
"decl : _IMAGEBASE int64",
"decl : _STACKRESERVE int64",
"decl : languageDecl",
"decl : typedefDecl",
"decl : compControl",
"decl : _TYPELIST '{' classNameSeq '}'",
"decl : _MSCORLIB",
"classNameSeq :",
"classNameSeq : className classNameSeq",
"compQstring : QSTRING",
"compQstring : compQstring '+' QSTRING",
"languageDecl : _LANGUAGE SQSTRING",
"languageDecl : _LANGUAGE SQSTRING ',' SQSTRING",
"languageDecl : _LANGUAGE SQSTRING ',' SQSTRING ',' SQSTRING",
"id : ID",
"id : SQSTRING",
"dottedName : id",
"dottedName : DOTTEDNAME",
"dottedName : dottedName '.' dottedName",
"int32 : INT32",
"int64 : INT64",
"int64 : INT32",
"float64 : FLOAT64",
"float64 : FLOAT32_ '(' int32 ')'",
"float64 : FLOAT64_ '(' int64 ')'",
"typedefDecl : _TYPEDEF type AS_ dottedName",
"typedefDecl : _TYPEDEF className AS_ dottedName",
"typedefDecl : _TYPEDEF memberRef AS_ dottedName",
"typedefDecl : _TYPEDEF customDescr AS_ dottedName",
"typedefDecl : _TYPEDEF customDescrWithOwner AS_ dottedName",
"compControl : P_DEFINE dottedName",
"compControl : P_DEFINE dottedName compQstring",
"compControl : P_UNDEF dottedName",
"compControl : P_IFDEF dottedName",
"compControl : P_IFNDEF dottedName",
"compControl : P_ELSE",
"compControl : P_ENDIF",
"compControl : P_INCLUDE QSTRING",
"compControl : ';'",
"customDescr : _CUSTOM customType",
"customDescr : _CUSTOM customType '=' compQstring",
"customDescr : _CUSTOM customType '=' '{' customBlobDescr '}'",
"customDescr : customHead bytes ')'",
"customDescrWithOwner : _CUSTOM '(' ownerType ')' customType",
"customDescrWithOwner : _CUSTOM '(' ownerType ')' customType '=' compQstring",
"customDescrWithOwner : _CUSTOM '(' ownerType ')' customType '=' '{' customBlobDescr '}'",
"customDescrWithOwner : customHeadWithOwner bytes ')'",
"customHead : _CUSTOM customType '=' '('",
"customHeadWithOwner : _CUSTOM '(' ownerType ')' customType '=' '('",
"customType : methodRef",
"ownerType : typeSpec",
"ownerType : memberRef",
"customBlobDescr : customBlobArgs customBlobNVPairs",
"customBlobArgs :",
"customBlobArgs : customBlobArgs serInit",
"customBlobArgs : customBlobArgs compControl",
"customBlobNVPairs :",
"customBlobNVPairs : customBlobNVPairs fieldOrProp serializType dottedName '=' serInit",
"customBlobNVPairs : customBlobNVPairs compControl",
"fieldOrProp : FIELD_",
"fieldOrProp : PROPERTY_",
"customAttrDecl : customDescr",
"customAttrDecl : customDescrWithOwner",
"customAttrDecl : TYPEDEF_CA",
"serializType : simpleType",
"serializType : TYPE_",
"serializType : OBJECT_",
"serializType : ENUM_ CLASS_ SQSTRING",
"serializType : ENUM_ className",
"serializType : serializType '[' ']'",
"moduleHead : _MODULE",
"moduleHead : _MODULE dottedName",
"moduleHead : _MODULE EXTERN_ dottedName",
"vtfixupDecl : _VTFIXUP '[' int32 ']' vtfixupAttr AT_ id",
"vtfixupAttr :",
"vtfixupAttr : vtfixupAttr INT32_",
"vtfixupAttr : vtfixupAttr INT64_",
"vtfixupAttr : vtfixupAttr FROMUNMANAGED_",
"vtfixupAttr : vtfixupAttr CALLMOSTDERIVED_",
"vtfixupAttr : vtfixupAttr RETAINAPPDOMAIN_",
"vtableDecl : vtableHead bytes ')'",
"vtableHead : _VTABLE '=' '('",
"nameSpaceHead : _NAMESPACE dottedName",
"_class : _CLASS",
"classHeadBegin : _class classAttr dottedName typarsClause",
"classHead : classHeadBegin extendsClause implClause",
"classAttr :",
"classAttr : classAttr PUBLIC_",
"classAttr : classAttr PRIVATE_",
"classAttr : classAttr VALUE_",
"classAttr : classAttr ENUM_",
"classAttr : classAttr INTERFACE_",
"classAttr : classAttr SEALED_",
"classAttr : classAttr ABSTRACT_",
"classAttr : classAttr AUTO_",
"classAttr : classAttr SEQUENTIAL_",
"classAttr : classAttr EXPLICIT_",
"classAttr : classAttr ANSI_",
"classAttr : classAttr UNICODE_",
"classAttr : classAttr AUTOCHAR_",
"classAttr : classAttr IMPORT_",
"classAttr : classAttr SERIALIZABLE_",
"classAttr : classAttr WINDOWSRUNTIME_",
"classAttr : classAttr NESTED_ PUBLIC_",
"classAttr : classAttr NESTED_ PRIVATE_",
"classAttr : classAttr NESTED_ FAMILY_",
"classAttr : classAttr NESTED_ ASSEMBLY_",
"classAttr : classAttr NESTED_ FAMANDASSEM_",
"classAttr : classAttr NESTED_ FAMORASSEM_",
"classAttr : classAttr BEFOREFIELDINIT_",
"classAttr : classAttr SPECIALNAME_",
"classAttr : classAttr RTSPECIALNAME_",
"classAttr : classAttr FLAGS_ '(' int32 ')'",
"extendsClause :",
"extendsClause : EXTENDS_ typeSpec",
"implClause :",
"implClause : IMPLEMENTS_ implList",
"classDecls :",
"classDecls : classDecls classDecl",
"implList : implList ',' typeSpec",
"implList : typeSpec",
"typeList :",
"typeList : typeListNotEmpty",
"typeListNotEmpty : typeSpec",
"typeListNotEmpty : typeListNotEmpty ',' typeSpec",
"typarsClause :",
"typarsClause : '<' typars '>'",
"typarAttrib : '+'",
"typarAttrib : '-'",
"typarAttrib : CLASS_",
"typarAttrib : VALUETYPE_",
"typarAttrib : BYREFLIKE_",
"typarAttrib : _CTOR",
"typarAttrib : FLAGS_ '(' int32 ')'",
"typarAttribs :",
"typarAttribs : typarAttrib typarAttribs",
"conTyparAttrib : FLAGS_ '(' int32 ')'",
"conTyparAttribs :",
"conTyparAttribs : conTyparAttrib conTyparAttribs",
"typars : CONST_ conTyparAttribs typeSpec dottedName typarsRest",
"typars : typarAttribs tyBound dottedName typarsRest",
"typars : typarAttribs dottedName typarsRest",
"typarsRest :",
"typarsRest : ',' typars",
"tyBound : '(' typeList ')'",
"genArity :",
"genArity : genArityNotEmpty",
"genArityNotEmpty : '<' '[' int32 ']' '>'",
"classDecl : methodHead methodDecls '}'",
"classDecl : classHead '{' classDecls '}'",
"classDecl : eventHead '{' eventDecls '}'",
"classDecl : propHead '{' propDecls '}'",
"classDecl : fieldDecl",
"classDecl : dataDecl",
"classDecl : secDecl",
"classDecl : extSourceSpec",
"classDecl : customAttrDecl",
"classDecl : _SIZE int32",
"classDecl : _PACK int32",
"classDecl : exportHead '{' exptypeDecls '}'",
"classDecl : _OVERRIDE typeSpec DCOLON methodName WITH_ callConv type typeSpec DCOLON methodName '(' sigArgs0 ')'",
"classDecl : _OVERRIDE METHOD_ callConv type typeSpec DCOLON methodName genArity '(' sigArgs0 ')' WITH_ METHOD_ callConv type typeSpec DCOLON methodName genArity '(' sigArgs0 ')'",
"classDecl : languageDecl",
"classDecl : compControl",
"classDecl : _PARAM TYPE_ '[' int32 ']'",
"classDecl : _PARAM TYPE_ dottedName",
"classDecl : _PARAM CONSTRAINT_ '[' int32 ']' ',' typeSpec",
"classDecl : _PARAM CONSTRAINT_ dottedName ',' typeSpec",
"classDecl : _INTERFACEIMPL TYPE_ typeSpec customDescr",
"fieldDecl : _FIELD repeatOpt fieldAttr type dottedName atOpt initOpt",
"fieldAttr :",
"fieldAttr : fieldAttr STATIC_",
"fieldAttr : fieldAttr PUBLIC_",
"fieldAttr : fieldAttr PRIVATE_",
"fieldAttr : fieldAttr FAMILY_",
"fieldAttr : fieldAttr INITONLY_",
"fieldAttr : fieldAttr RTSPECIALNAME_",
"fieldAttr : fieldAttr SPECIALNAME_",
"fieldAttr : fieldAttr MARSHAL_ '(' marshalBlob ')'",
"fieldAttr : fieldAttr ASSEMBLY_",
"fieldAttr : fieldAttr FAMANDASSEM_",
"fieldAttr : fieldAttr FAMORASSEM_",
"fieldAttr : fieldAttr PRIVATESCOPE_",
"fieldAttr : fieldAttr LITERAL_",
"fieldAttr : fieldAttr NOTSERIALIZED_",
"fieldAttr : fieldAttr FLAGS_ '(' int32 ')'",
"atOpt :",
"atOpt : AT_ id",
"initOpt :",
"initOpt : '=' fieldInit",
"repeatOpt :",
"repeatOpt : '[' int32 ']'",
"methodRef : callConv type typeSpec DCOLON methodName tyArgs0 '(' sigArgs0 ')'",
"methodRef : callConv type typeSpec DCOLON methodName genArityNotEmpty '(' sigArgs0 ')'",
"methodRef : callConv type methodName tyArgs0 '(' sigArgs0 ')'",
"methodRef : callConv type methodName genArityNotEmpty '(' sigArgs0 ')'",
"methodRef : mdtoken",
"methodRef : TYPEDEF_M",
"methodRef : TYPEDEF_MR",
"callConv : INSTANCE_ callConv",
"callConv : EXPLICIT_ callConv",
"callConv : callKind",
"callConv : CALLCONV_ '(' int32 ')'",
"callKind :",
"callKind : DEFAULT_",
"callKind : VARARG_",
"callKind : UNMANAGED_ CDECL_",
"callKind : UNMANAGED_ STDCALL_",
"callKind : UNMANAGED_ THISCALL_",
"callKind : UNMANAGED_ FASTCALL_",
"callKind : UNMANAGED_",
"mdtoken : MDTOKEN_ '(' int32 ')'",
"memberRef : methodSpec methodRef",
"memberRef : FIELD_ type typeSpec DCOLON dottedName",
"memberRef : FIELD_ type dottedName",
"memberRef : FIELD_ TYPEDEF_F",
"memberRef : FIELD_ TYPEDEF_MR",
"memberRef : mdtoken",
"eventHead : _EVENT eventAttr typeSpec dottedName",
"eventHead : _EVENT eventAttr dottedName",
"eventAttr :",
"eventAttr : eventAttr RTSPECIALNAME_",
"eventAttr : eventAttr SPECIALNAME_",
"eventDecls :",
"eventDecls : eventDecls eventDecl",
"eventDecl : _ADDON methodRef",
"eventDecl : _REMOVEON methodRef",
"eventDecl : _FIRE methodRef",
"eventDecl : _OTHER methodRef",
"eventDecl : extSourceSpec",
"eventDecl : customAttrDecl",
"eventDecl : languageDecl",
"eventDecl : compControl",
"propHead : _PROPERTY propAttr callConv type dottedName '(' sigArgs0 ')' initOpt",
"propAttr :",
"propAttr : propAttr RTSPECIALNAME_",
"propAttr : propAttr SPECIALNAME_",
"propDecls :",
"propDecls : propDecls propDecl",
"propDecl : _SET methodRef",
"propDecl : _GET methodRef",
"propDecl : _OTHER methodRef",
"propDecl : customAttrDecl",
"propDecl : extSourceSpec",
"propDecl : languageDecl",
"propDecl : compControl",
"methodHeadPart1 : _METHOD",
"marshalClause :",
"marshalClause : MARSHAL_ '(' marshalBlob ')'",
"marshalBlob : nativeType",
"marshalBlob : marshalBlobHead hexbytes '}'",
"marshalBlobHead : '{'",
"methodHead : methodHeadPart1 methAttr callConv paramAttr type marshalClause methodName typarsClause '(' sigArgs0 ')' implAttr '{'",
"methAttr :",
"methAttr : methAttr STATIC_",
"methAttr : methAttr PUBLIC_",
"methAttr : methAttr PRIVATE_",
"methAttr : methAttr FAMILY_",
"methAttr : methAttr FINAL_",
"methAttr : methAttr SPECIALNAME_",
"methAttr : methAttr VIRTUAL_",
"methAttr : methAttr STRICT_",
"methAttr : methAttr ABSTRACT_",
"methAttr : methAttr ASSEMBLY_",
"methAttr : methAttr FAMANDASSEM_",
"methAttr : methAttr FAMORASSEM_",
"methAttr : methAttr PRIVATESCOPE_",
"methAttr : methAttr HIDEBYSIG_",
"methAttr : methAttr NEWSLOT_",
"methAttr : methAttr RTSPECIALNAME_",
"methAttr : methAttr UNMANAGEDEXP_",
"methAttr : methAttr REQSECOBJ_",
"methAttr : methAttr FLAGS_ '(' int32 ')'",
"methAttr : methAttr PINVOKEIMPL_ '(' compQstring AS_ compQstring pinvAttr ')'",
"methAttr : methAttr PINVOKEIMPL_ '(' compQstring pinvAttr ')'",
"methAttr : methAttr PINVOKEIMPL_ '(' pinvAttr ')'",
"pinvAttr :",
"pinvAttr : pinvAttr NOMANGLE_",
"pinvAttr : pinvAttr ANSI_",
"pinvAttr : pinvAttr UNICODE_",
"pinvAttr : pinvAttr AUTOCHAR_",
"pinvAttr : pinvAttr LASTERR_",
"pinvAttr : pinvAttr WINAPI_",
"pinvAttr : pinvAttr CDECL_",
"pinvAttr : pinvAttr STDCALL_",
"pinvAttr : pinvAttr THISCALL_",
"pinvAttr : pinvAttr FASTCALL_",
"pinvAttr : pinvAttr BESTFIT_ ':' ON_",
"pinvAttr : pinvAttr BESTFIT_ ':' OFF_",
"pinvAttr : pinvAttr CHARMAPERROR_ ':' ON_",
"pinvAttr : pinvAttr CHARMAPERROR_ ':' OFF_",
"pinvAttr : pinvAttr FLAGS_ '(' int32 ')'",
"methodName : _CTOR",
"methodName : _CCTOR",
"methodName : dottedName",
"paramAttr :",
"paramAttr : paramAttr '[' IN_ ']'",
"paramAttr : paramAttr '[' OUT_ ']'",
"paramAttr : paramAttr '[' OPT_ ']'",
"paramAttr : paramAttr '[' int32 ']'",
"implAttr :",
"implAttr : implAttr NATIVE_",
"implAttr : implAttr CIL_",
"implAttr : implAttr OPTIL_",
"implAttr : implAttr MANAGED_",
"implAttr : implAttr UNMANAGED_",
"implAttr : implAttr FORWARDREF_",
"implAttr : implAttr PRESERVESIG_",
"implAttr : implAttr RUNTIME_",
"implAttr : implAttr INTERNALCALL_",
"implAttr : implAttr SYNCHRONIZED_",
"implAttr : implAttr NOINLINING_",
"implAttr : implAttr AGGRESSIVEINLINING_",
"implAttr : implAttr NOOPTIMIZATION_",
"implAttr : implAttr AGGRESSIVEOPTIMIZATION_",
"implAttr : implAttr FLAGS_ '(' int32 ')'",
"localsHead : _LOCALS",
"methodDecls :",
"methodDecls : methodDecls methodDecl",
"methodDecl : _EMITBYTE int32",
"methodDecl : sehBlock",
"methodDecl : _MAXSTACK int32",
"methodDecl : localsHead '(' sigArgs0 ')'",
"methodDecl : localsHead INIT_ '(' sigArgs0 ')'",
"methodDecl : _ENTRYPOINT",
"methodDecl : _ZEROINIT",
"methodDecl : dataDecl",
"methodDecl : instr",
"methodDecl : id ':'",
"methodDecl : secDecl",
"methodDecl : extSourceSpec",
"methodDecl : languageDecl",
"methodDecl : customAttrDecl",
"methodDecl : compControl",
"methodDecl : _EXPORT '[' int32 ']'",
"methodDecl : _EXPORT '[' int32 ']' AS_ id",
"methodDecl : _VTENTRY int32 ':' int32",
"methodDecl : _OVERRIDE typeSpec DCOLON methodName",
"methodDecl : _OVERRIDE METHOD_ callConv type typeSpec DCOLON methodName genArity '(' sigArgs0 ')'",
"methodDecl : scopeBlock",
"methodDecl : _PARAM TYPE_ '[' int32 ']'",
"methodDecl : _PARAM TYPE_ dottedName",
"methodDecl : _PARAM CONSTRAINT_ '[' int32 ']' ',' typeSpec",
"methodDecl : _PARAM CONSTRAINT_ dottedName ',' typeSpec",
"methodDecl : _PARAM '[' int32 ']' initOpt",
"scopeBlock : scopeOpen methodDecls '}'",
"scopeOpen : '{'",
"sehBlock : tryBlock sehClauses",
"sehClauses : sehClause sehClauses",
"sehClauses : sehClause",
"tryBlock : tryHead scopeBlock",
"tryBlock : tryHead id TO_ id",
"tryBlock : tryHead int32 TO_ int32",
"tryHead : _TRY",
"sehClause : catchClause handlerBlock",
"sehClause : filterClause handlerBlock",
"sehClause : finallyClause handlerBlock",
"sehClause : faultClause handlerBlock",
"filterClause : filterHead scopeBlock",
"filterClause : filterHead id",
"filterClause : filterHead int32",
"filterHead : FILTER_",
"catchClause : CATCH_ typeSpec",
"finallyClause : FINALLY_",
"faultClause : FAULT_",
"handlerBlock : scopeBlock",
"handlerBlock : HANDLER_ id TO_ id",
"handlerBlock : HANDLER_ int32 TO_ int32",
"dataDecl : ddHead ddBody",
"ddHead : _DATA tls id '='",
"ddHead : _DATA tls",
"tls :",
"tls : TLS_",
"tls : CIL_",
"ddBody : '{' ddItemList '}'",
"ddBody : ddItem",
"ddItemList : ddItem ',' ddItemList",
"ddItemList : ddItem",
"ddItemCount :",
"ddItemCount : '[' int32 ']'",
"ddItem : CHAR_ '*' '(' compQstring ')'",
"ddItem : '&' '(' id ')'",
"ddItem : bytearrayhead bytes ')'",
"ddItem : FLOAT32_ '(' float64 ')' ddItemCount",
"ddItem : FLOAT64_ '(' float64 ')' ddItemCount",
"ddItem : INT64_ '(' int64 ')' ddItemCount",
"ddItem : INT32_ '(' int32 ')' ddItemCount",
"ddItem : INT16_ '(' int32 ')' ddItemCount",
"ddItem : INT8_ '(' int32 ')' ddItemCount",
"ddItem : FLOAT32_ ddItemCount",
"ddItem : FLOAT64_ ddItemCount",
"ddItem : INT64_ ddItemCount",
"ddItem : INT32_ ddItemCount",
"ddItem : INT16_ ddItemCount",
"ddItem : INT8_ ddItemCount",
"fieldSerInit : FLOAT32_ '(' float64 ')'",
"fieldSerInit : FLOAT64_ '(' float64 ')'",
"fieldSerInit : FLOAT32_ '(' int32 ')'",
"fieldSerInit : FLOAT64_ '(' int64 ')'",
"fieldSerInit : INT64_ '(' int64 ')'",
"fieldSerInit : INT32_ '(' int32 ')'",
"fieldSerInit : INT16_ '(' int32 ')'",
"fieldSerInit : INT8_ '(' int32 ')'",
"fieldSerInit : UNSIGNED_ INT64_ '(' int64 ')'",
"fieldSerInit : UNSIGNED_ INT32_ '(' int32 ')'",
"fieldSerInit : UNSIGNED_ INT16_ '(' int32 ')'",
"fieldSerInit : UNSIGNED_ INT8_ '(' int32 ')'",
"fieldSerInit : UINT64_ '(' int64 ')'",
"fieldSerInit : UINT32_ '(' int32 ')'",
"fieldSerInit : UINT16_ '(' int32 ')'",
"fieldSerInit : UINT8_ '(' int32 ')'",
"fieldSerInit : CHAR_ '(' int32 ')'",
"fieldSerInit : BOOL_ '(' truefalse ')'",
"fieldSerInit : bytearrayhead bytes ')'",
"bytearrayhead : BYTEARRAY_ '('",
"bytes :",
"bytes : hexbytes",
"hexbytes : HEXBYTE",
"hexbytes : hexbytes HEXBYTE",
"fieldInit : fieldSerInit",
"fieldInit : compQstring",
"fieldInit : NULLREF_",
"serInit : fieldSerInit",
"serInit : STRING_ '(' NULLREF_ ')'",
"serInit : STRING_ '(' SQSTRING ')'",
"serInit : TYPE_ '(' CLASS_ SQSTRING ')'",
"serInit : TYPE_ '(' className ')'",
"serInit : TYPE_ '(' NULLREF_ ')'",
"serInit : OBJECT_ '(' serInit ')'",
"serInit : FLOAT32_ '[' int32 ']' '(' f32seq ')'",
"serInit : FLOAT64_ '[' int32 ']' '(' f64seq ')'",
"serInit : INT64_ '[' int32 ']' '(' i64seq ')'",
"serInit : INT32_ '[' int32 ']' '(' i32seq ')'",
"serInit : INT16_ '[' int32 ']' '(' i16seq ')'",
"serInit : INT8_ '[' int32 ']' '(' i8seq ')'",
"serInit : UINT64_ '[' int32 ']' '(' i64seq ')'",
"serInit : UINT32_ '[' int32 ']' '(' i32seq ')'",
"serInit : UINT16_ '[' int32 ']' '(' i16seq ')'",
"serInit : UINT8_ '[' int32 ']' '(' i8seq ')'",
"serInit : UNSIGNED_ INT64_ '[' int32 ']' '(' i64seq ')'",
"serInit : UNSIGNED_ INT32_ '[' int32 ']' '(' i32seq ')'",
"serInit : UNSIGNED_ INT16_ '[' int32 ']' '(' i16seq ')'",
"serInit : UNSIGNED_ INT8_ '[' int32 ']' '(' i8seq ')'",
"serInit : CHAR_ '[' int32 ']' '(' i16seq ')'",
"serInit : BOOL_ '[' int32 ']' '(' boolSeq ')'",
"serInit : STRING_ '[' int32 ']' '(' sqstringSeq ')'",
"serInit : TYPE_ '[' int32 ']' '(' classSeq ')'",
"serInit : OBJECT_ '[' int32 ']' '(' objSeq ')'",
"f32seq :",
"f32seq : f32seq float64",
"f32seq : f32seq int32",
"f64seq :",
"f64seq : f64seq float64",
"f64seq : f64seq int64",
"i64seq :",
"i64seq : i64seq int64",
"i32seq :",
"i32seq : i32seq int32",
"i16seq :",
"i16seq : i16seq int32",
"i8seq :",
"i8seq : i8seq int32",
"boolSeq :",
"boolSeq : boolSeq truefalse",
"sqstringSeq :",
"sqstringSeq : sqstringSeq NULLREF_",
"sqstringSeq : sqstringSeq SQSTRING",
"classSeq :",
"classSeq : classSeq NULLREF_",
"classSeq : classSeq CLASS_ SQSTRING",
"classSeq : classSeq className",
"objSeq :",
"objSeq : objSeq serInit",
"methodSpec : METHOD_",
"instr_none : INSTR_NONE",
"instr_var : INSTR_VAR",
"instr_i : INSTR_I",
"instr_i8 : INSTR_I8",
"instr_r : INSTR_R",
"instr_brtarget : INSTR_BRTARGET",
"instr_method : INSTR_METHOD",
"instr_field : INSTR_FIELD",
"instr_type : INSTR_TYPE",
"instr_string : INSTR_STRING",
"instr_sig : INSTR_SIG",
"instr_tok : INSTR_TOK",
"instr_switch : INSTR_SWITCH",
"instr_r_head : instr_r '('",
"instr : instr_none",
"instr : instr_var int32",
"instr : instr_var id",
"instr : instr_i int32",
"instr : instr_i8 int64",
"instr : instr_r float64",
"instr : instr_r int64",
"instr : instr_r_head bytes ')'",
"instr : instr_brtarget int32",
"instr : instr_brtarget id",
"instr : instr_method methodRef",
"instr : instr_field type typeSpec DCOLON dottedName",
"instr : instr_field type dottedName",
"instr : instr_field mdtoken",
"instr : instr_field TYPEDEF_F",
"instr : instr_field TYPEDEF_MR",
"instr : instr_type typeSpec",
"instr : instr_string compQstring",
"instr : instr_string ANSI_ '(' compQstring ')'",
"instr : instr_string bytearrayhead bytes ')'",
"instr : instr_sig callConv type '(' sigArgs0 ')'",
"instr : instr_tok ownerType",
"instr : instr_switch '(' labels ')'",
"labels :",
"labels : id ',' labels",
"labels : int32 ',' labels",
"labels : id",
"labels : int32",
"tyArgs0 :",
"tyArgs0 : '<' tyArgs1 '>'",
"tyArgs1 :",
"tyArgs1 : tyArgs2",
"tyArgs2 : type",
"tyArgs2 : tyArgs2 ',' type",
"sigArgs0 :",
"sigArgs0 : sigArgs1",
"sigArgs1 : sigArg",
"sigArgs1 : sigArgs1 ',' sigArg",
"sigArg : ELLIPSIS",
"sigArg : paramAttr type marshalClause",
"sigArg : paramAttr type marshalClause id",
"className : '[' dottedName ']' slashedName",
"className : '[' mdtoken ']' slashedName",
"className : '[' '*' ']' slashedName",
"className : '[' _MODULE dottedName ']' slashedName",
"className : slashedName",
"className : mdtoken",
"className : TYPEDEF_T",
"className : _THIS",
"className : _BASE",
"className : _NESTER",
"slashedName : dottedName",
"slashedName : slashedName '/' dottedName",
"typeSpec : className",
"typeSpec : '[' dottedName ']'",
"typeSpec : '[' _MODULE dottedName ']'",
"typeSpec : type",
"nativeType :",
"nativeType : CUSTOM_ '(' compQstring ',' compQstring ',' compQstring ',' compQstring ')'",
"nativeType : CUSTOM_ '(' compQstring ',' compQstring ')'",
"nativeType : FIXED_ SYSSTRING_ '[' int32 ']'",
"nativeType : FIXED_ ARRAY_ '[' int32 ']' nativeType",
"nativeType : VARIANT_",
"nativeType : CURRENCY_",
"nativeType : SYSCHAR_",
"nativeType : VOID_",
"nativeType : BOOL_",
"nativeType : INT8_",
"nativeType : INT16_",
"nativeType : INT32_",
"nativeType : INT64_",
"nativeType : FLOAT32_",
"nativeType : FLOAT64_",
"nativeType : ERROR_",
"nativeType : UNSIGNED_ INT8_",
"nativeType : UNSIGNED_ INT16_",
"nativeType : UNSIGNED_ INT32_",
"nativeType : UNSIGNED_ INT64_",
"nativeType : UINT8_",
"nativeType : UINT16_",
"nativeType : UINT32_",
"nativeType : UINT64_",
"nativeType : nativeType '*'",
"nativeType : nativeType '[' ']'",
"nativeType : nativeType '[' int32 ']'",
"nativeType : nativeType '[' int32 '+' int32 ']'",
"nativeType : nativeType '[' '+' int32 ']'",
"nativeType : DECIMAL_",
"nativeType : DATE_",
"nativeType : BSTR_",
"nativeType : LPSTR_",
"nativeType : LPWSTR_",
"nativeType : LPTSTR_",
"nativeType : OBJECTREF_",
"nativeType : IUNKNOWN_ iidParamIndex",
"nativeType : IDISPATCH_ iidParamIndex",
"nativeType : STRUCT_",
"nativeType : INTERFACE_ iidParamIndex",
"nativeType : SAFEARRAY_ variantType",
"nativeType : SAFEARRAY_ variantType ',' compQstring",
"nativeType : INT_",
"nativeType : UNSIGNED_ INT_",
"nativeType : UINT_",
"nativeType : NESTED_ STRUCT_",
"nativeType : BYVALSTR_",
"nativeType : ANSI_ BSTR_",
"nativeType : TBSTR_",
"nativeType : VARIANT_ BOOL_",
"nativeType : METHOD_",
"nativeType : AS_ ANY_",
"nativeType : LPSTRUCT_",
"nativeType : TYPEDEF_TS",
"iidParamIndex :",
"iidParamIndex : '(' IIDPARAM_ '=' int32 ')'",
"variantType :",
"variantType : NULL_",
"variantType : VARIANT_",
"variantType : CURRENCY_",
"variantType : VOID_",
"variantType : BOOL_",
"variantType : INT8_",
"variantType : INT16_",
"variantType : INT32_",
"variantType : INT64_",
"variantType : FLOAT32_",
"variantType : FLOAT64_",
"variantType : UNSIGNED_ INT8_",
"variantType : UNSIGNED_ INT16_",
"variantType : UNSIGNED_ INT32_",
"variantType : UNSIGNED_ INT64_",
"variantType : UINT8_",
"variantType : UINT16_",
"variantType : UINT32_",
"variantType : UINT64_",
"variantType : '*'",
"variantType : variantType '[' ']'",
"variantType : variantType VECTOR_",
"variantType : variantType '&'",
"variantType : DECIMAL_",
"variantType : DATE_",
"variantType : BSTR_",
"variantType : LPSTR_",
"variantType : LPWSTR_",
"variantType : IUNKNOWN_",
"variantType : IDISPATCH_",
"variantType : SAFEARRAY_",
"variantType : INT_",
"variantType : UNSIGNED_ INT_",
"variantType : UINT_",
"variantType : ERROR_",
"variantType : HRESULT_",
"variantType : CARRAY_",
"variantType : USERDEFINED_",
"variantType : RECORD_",
"variantType : FILETIME_",
"variantType : BLOB_",
"variantType : STREAM_",
"variantType : STORAGE_",
"variantType : STREAMED_OBJECT_",
"variantType : STORED_OBJECT_",
"variantType : BLOB_OBJECT_",
"variantType : CF_",
"variantType : CLSID_",
"type : CLASS_ className",
"type : OBJECT_",
"type : VALUE_ CLASS_ className",
"type : VALUETYPE_ className",
"type : type '[' ']'",
"type : type '[' bounds1 ']'",
"type : type '&'",
"type : type '*'",
"type : type PINNED_",
"type : type MODREQ_ '(' typeSpec ')'",
"type : type MODOPT_ '(' typeSpec ')'",
"type : methodSpec callConv type '*' '(' sigArgs0 ')'",
"type : type '<' tyArgs1 '>'",
"type : '!' '!' int32",
"type : '!' int32",
"type : '!' '!' dottedName",
"type : '!' dottedName",
"type : TYPEDREF_",
"type : VOID_",
"type : NATIVE_ INT_",
"type : NATIVE_ UNSIGNED_ INT_",
"type : NATIVE_ UINT_",
"type : simpleType",
"type : ELLIPSIS type",
"simpleType : CHAR_",
"simpleType : STRING_",
"simpleType : BOOL_",
"simpleType : INT8_",
"simpleType : INT16_",
"simpleType : INT32_",
"simpleType : INT64_",
"simpleType : FLOAT32_",
"simpleType : FLOAT64_",
"simpleType : UNSIGNED_ INT8_",
"simpleType : UNSIGNED_ INT16_",
"simpleType : UNSIGNED_ INT32_",
"simpleType : UNSIGNED_ INT64_",
"simpleType : UINT8_",
"simpleType : UINT16_",
"simpleType : UINT32_",
"simpleType : UINT64_",
"simpleType : TYPEDEF_TS",
"bounds1 : bound",
"bounds1 : bounds1 ',' bound",
"bound :",
"bound : ELLIPSIS",
"bound : int32",
"bound : int32 ELLIPSIS int32",
"bound : int32 ELLIPSIS",
"secDecl : _PERMISSION secAction typeSpec '(' nameValPairs ')'",
"secDecl : _PERMISSION secAction typeSpec '=' '{' customBlobDescr '}'",
"secDecl : _PERMISSION secAction typeSpec",
"secDecl : psetHead bytes ')'",
"secDecl : _PERMISSIONSET secAction compQstring",
"secDecl : _PERMISSIONSET secAction '=' '{' secAttrSetBlob '}'",
"secAttrSetBlob :",
"secAttrSetBlob : secAttrBlob",
"secAttrSetBlob : secAttrBlob ',' secAttrSetBlob",
"secAttrBlob : typeSpec '=' '{' customBlobNVPairs '}'",
"secAttrBlob : CLASS_ SQSTRING '=' '{' customBlobNVPairs '}'",
"psetHead : _PERMISSIONSET secAction '=' '('",
"psetHead : _PERMISSIONSET secAction BYTEARRAY_ '('",
"nameValPairs : nameValPair",
"nameValPairs : nameValPair ',' nameValPairs",
"nameValPair : compQstring '=' caValue",
"truefalse : TRUE_",
"truefalse : FALSE_",
"caValue : truefalse",
"caValue : int32",
"caValue : INT32_ '(' int32 ')'",
"caValue : compQstring",
"caValue : className '(' INT8_ ':' int32 ')'",
"caValue : className '(' INT16_ ':' int32 ')'",
"caValue : className '(' INT32_ ':' int32 ')'",
"caValue : className '(' int32 ')'",
"secAction : REQUEST_",
"secAction : DEMAND_",
"secAction : ASSERT_",
"secAction : DENY_",
"secAction : PERMITONLY_",
"secAction : LINKCHECK_",
"secAction : INHERITCHECK_",
"secAction : REQMIN_",
"secAction : REQOPT_",
"secAction : REQREFUSE_",
"secAction : PREJITGRANT_",
"secAction : PREJITDENY_",
"secAction : NONCASDEMAND_",
"secAction : NONCASLINKDEMAND_",
"secAction : NONCASINHERITANCE_",
"esHead : _LINE",
"esHead : P_LINE",
"extSourceSpec : esHead int32 SQSTRING",
"extSourceSpec : esHead int32",
"extSourceSpec : esHead int32 ':' int32 SQSTRING",
"extSourceSpec : esHead int32 ':' int32",
"extSourceSpec : esHead int32 ':' int32 ',' int32 SQSTRING",
"extSourceSpec : esHead int32 ':' int32 ',' int32",
"extSourceSpec : esHead int32 ',' int32 ':' int32 SQSTRING",
"extSourceSpec : esHead int32 ',' int32 ':' int32",
"extSourceSpec : esHead int32 ',' int32 ':' int32 ',' int32 SQSTRING",
"extSourceSpec : esHead int32 ',' int32 ':' int32 ',' int32",
"extSourceSpec : esHead int32 QSTRING",
"fileDecl : _FILE fileAttr dottedName fileEntry hashHead bytes ')' fileEntry",
"fileDecl : _FILE fileAttr dottedName fileEntry",
"fileAttr :",
"fileAttr : fileAttr NOMETADATA_",
"fileEntry :",
"fileEntry : _ENTRYPOINT",
"hashHead : _HASH '=' '('",
"assemblyHead : _ASSEMBLY asmAttr dottedName",
"asmAttr :",
"asmAttr : asmAttr RETARGETABLE_",
"asmAttr : asmAttr WINDOWSRUNTIME_",
"asmAttr : asmAttr NOPLATFORM_",
"asmAttr : asmAttr LEGACY_ LIBRARY_",
"asmAttr : asmAttr CIL_",
"asmAttr : asmAttr X86_",
"asmAttr : asmAttr AMD64_",
"asmAttr : asmAttr ARM_",
"asmAttr : asmAttr ARM64_",
"assemblyDecls :",
"assemblyDecls : assemblyDecls assemblyDecl",
"assemblyDecl : _HASH ALGORITHM_ int32",
"assemblyDecl : secDecl",
"assemblyDecl : asmOrRefDecl",
"intOrWildcard : int32",
"intOrWildcard : '*'",
"asmOrRefDecl : publicKeyHead bytes ')'",
"asmOrRefDecl : _VER intOrWildcard ':' intOrWildcard ':' intOrWildcard ':' intOrWildcard",
"asmOrRefDecl : _LOCALE compQstring",
"asmOrRefDecl : localeHead bytes ')'",
"asmOrRefDecl : customAttrDecl",
"asmOrRefDecl : compControl",
"publicKeyHead : _PUBLICKEY '=' '('",
"publicKeyTokenHead : _PUBLICKEYTOKEN '=' '('",
"localeHead : _LOCALE '=' '('",
"assemblyRefHead : _ASSEMBLY EXTERN_ asmAttr dottedName",
"assemblyRefHead : _ASSEMBLY EXTERN_ asmAttr dottedName AS_ dottedName",
"assemblyRefDecls :",
"assemblyRefDecls : assemblyRefDecls assemblyRefDecl",
"assemblyRefDecl : hashHead bytes ')'",
"assemblyRefDecl : asmOrRefDecl",
"assemblyRefDecl : publicKeyTokenHead bytes ')'",
"assemblyRefDecl : AUTO_",
"exptypeHead : _CLASS EXTERN_ exptAttr dottedName",
"exportHead : _EXPORT exptAttr dottedName",
"exptAttr :",
"exptAttr : exptAttr PRIVATE_",
"exptAttr : exptAttr PUBLIC_",
"exptAttr : exptAttr FORWARDER_",
"exptAttr : exptAttr NESTED_ PUBLIC_",
"exptAttr : exptAttr NESTED_ PRIVATE_",
"exptAttr : exptAttr NESTED_ FAMILY_",
"exptAttr : exptAttr NESTED_ ASSEMBLY_",
"exptAttr : exptAttr NESTED_ FAMANDASSEM_",
"exptAttr : exptAttr NESTED_ FAMORASSEM_",
"exptypeDecls :",
"exptypeDecls : exptypeDecls exptypeDecl",
"exptypeDecl : _FILE dottedName",
"exptypeDecl : _CLASS EXTERN_ slashedName",
"exptypeDecl : _ASSEMBLY EXTERN_ dottedName",
"exptypeDecl : MDTOKEN_ '(' int32 ')'",
"exptypeDecl : _CLASS int32",
"exptypeDecl : customAttrDecl",
"exptypeDecl : compControl",
"manifestResHead : _MRESOURCE manresAttr dottedName",
"manifestResHead : _MRESOURCE manresAttr dottedName AS_ dottedName",
"manresAttr :",
"manresAttr : manresAttr PUBLIC_",
"manresAttr : manresAttr PRIVATE_",
"manifestResDecls :",
"manifestResDecls : manifestResDecls manifestResDecl",
"manifestResDecl : _FILE dottedName AT_ int32",
"manifestResDecl : _ASSEMBLY EXTERN_ dottedName",
"manifestResDecl : customAttrDecl",
"manifestResDecl : compControl",
};
#endif
#line 52 "btyaccpa.ske"

/*
** YYPOSN is user-defined text position type.
*/
#ifdef YYPOSN
#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif /* YYREDUCEPOSNFUNC */
#endif /* YYPOSN */

/* If delete function is not defined by the user, do not deletions. */
#ifndef YYDELETEVAL
#define YYDELETEVAL(v, x) 
#endif

/* If delete function is not defined by the user, do not deletions. */
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v, x) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

extern void yyerror(const char *);

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
#ifdef YYPOSN
YYPOSN  yyposn;
#endif /* YYPOSN */

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
#ifdef YYPOSN
YYPOSN  yyretposn;
#endif /* YYPOSN */

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYERROR_QUIET  goto yyerrquiet
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  struct yyparsestate *save;        /* Previously saved parser state */
  int           state;
  int           errflag;
  Yshort       *ss;          /* state stack base */
  Yshort       *ssp;         /* state stack pointer */
  YYSTYPE      *vs;          /* values stack base */
  YYSTYPE      *vsp;         /* value stack pointer */
  YYSTYPE       val;         /* value as returned by actions */
#ifdef YYPOSN
  YYPOSN       *ps;          /* position stack base */
  YYPOSN       *psp;         /* position stack pointer */
  YYPOSN        pos;         /* position as returned by universal action */
#endif /* YYPOSN */
  ptrdiff_t     lexeme;      /* index of the conflict lexeme in the lexical queue */
  size_t        stacksize;   /* current maximum stack size */
  Yshort        ctry;        /* index in yyctable[] for this conflict */
};

/* Current parser state */
static struct yyparsestate *yyps=0;

/* yypath!=NULL: do the full parse, starting at *yypath parser state. */
static struct yyparsestate *yypath=0;

/* Base of the lexical value queue */
static YYSTYPE *yylvals=0;

/* Current posistion at lexical value queue */
static YYSTYPE *yylvp=0;

/* End position of lexical value queue */
static YYSTYPE *yylve=0;

/* The last allocated position at the lexical value queue */
static YYSTYPE *yylvlim=0;

#ifdef YYPOSN
/* Base of the lexical position queue */
static YYPOSN *yylpsns=0;

/* Current posistion at lexical position queue */
static YYPOSN *yylpp=0;

/* End position of lexical position queue */
static YYPOSN *yylpe=0;

/* The last allocated position at the lexical position queue */
static YYPOSN *yylplim=0;
#endif /* YYPOSN */

/* Current position at lexical token queue */
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

/*
** For use in generated program
*/
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yypsp   (yyps->psp)
#define yypos   (yyps->pos)
#define yydepth (yyps->ssp - yyps->ss)


/*
** Local prototypes.
*/
int yyparse(void);
int yylex(void);

static void YYSCopy(YYSTYPE *to, YYSTYPE *from, ptrdiff_t size) {
  ptrdiff_t i;
  for (i = size-1; i >= 0; i--)
    to[i] = from[i];
}

#ifdef YYPOSN
static void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--)
    to[i] = from[i];
}
#endif /* YYPOSN */

static int yyexpand() {
  ptrdiff_t p = yylvp-yylvals;
  ptrdiff_t s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
#ifdef __cplusplus
  Yshort  *tl = yylexemes; 
  yylexemes = new Yshort[s];
  memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
  delete[] tl;
  YYSTYPE *tv = yylvals;
  yylvals = new YYSTYPE[s];
  YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
  delete[] tv;
#ifdef YYPOSN
  YYPOSN  *tp = yylpsns;
  yylpsns = new YYPOSN[s];
  YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
  delete[] tp;
#endif /* YYPOSN */
#else
  yylexemes = realloc(yylexemes, sizeof(Yshort) * s);
  yylvals = realloc(yylvals, sizeof(YYSTYPE) * s);
#ifdef YYPOSN
  yylpsns = realloc(yylpsns, sizeof(YYPOSN) * s);
#endif /* YYPOSN */
#endif
  yylexp = yylexemes + p;
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
#ifdef YYPOSN
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
#endif /* YYPOSN */
  return 0;
}

static int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
#ifdef YYPOSN
    yyposn = *yylpp++;
#endif /* YYPOSN */
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
#ifdef YYPOSN
      *yylpp++ = yyposn;
      yylpe++;
#endif /* YYPOSN */
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

static void YYMoreStack(struct yyparsestate *yyps) {
  ptrdiff_t p = yyps->ssp - yyps->ss;
#ifdef __cplusplus
  Yshort  *tss = yyps->ss;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  delete[] tss;
  YYSTYPE *tvs = yyps->vs;
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  delete[] tvs;
#ifdef YYPOSN
  YYPOSN  *tps = yyps->ps;
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  delete[] tps;
#endif /* YYPOSN */
  yyps->stacksize += YYSTACKGROWTH;                           
#else
  yyps->stacksize += YYSTACKGROWTH;                           
  yyps->ss = realloc(yyps->ss, sizeof(Yshort ) * yyps->stacksize);   
  yyps->vs = realloc(yyps->vs, sizeof(YYSTYPE) * yyps->stacksize);  
#ifdef YYPOSN
  yyps->ps = realloc(yyps->ps, sizeof(YYPOSN ) * yyps->stacksize);  
#endif /* YYPOSN */
#endif
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
#ifdef YYPOSN
  yyps->psp = yyps->ps + p;                                   
#endif /* YYPOSN */
}

static struct yyparsestate *YYNewState(size_t size) {
#ifdef __cplusplus
  yyparsestate *p = new yyparsestate;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
#ifdef YYPOSN
  p->ps = new YYPOSN [size + 4];
#endif /* YYPOSN */
#else
  struct yyparsestate *p = malloc(sizeof(struct yyparsestate));
  p->ss = malloc(sizeof(Yshort ) * (size + 4));
  p->vs = malloc(sizeof(YYSTYPE) * (size + 4));
#ifdef YYPOSN
  p->ps = malloc(sizeof(YYPOSN ) * (size + 4));
#endif /* YYPOSN */
#endif
  p->stacksize = size+4;
#ifndef YYSTYPE_CONSTRUCTOR
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
#endif
#ifdef YYPOSN
#ifndef YYPOSN_CONSTRUCTOR
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
#endif
#endif /* YYPOSN */
  return p;
}

static void YYFreeState(struct yyparsestate *p) {
#ifdef __cplusplus
  delete[] p->ss;
  delete[] p->vs;
#ifdef YYPOSN
  delete[] p->ps;
#endif /* YYPOSN */
  delete p;
#else
  free(p->ss);
  free(p->vs);
#ifdef YYPOSN
  free(p->ps);
#endif /* YYPOSN */
  free(p);
#endif
}

#line 2072 "asmparse.y"


#include "grammar_after.cpp"
#line 5569 "asmparse.cpp.tab.c"
#line 354 "btyaccpa.ske"

/*
** Parser function
*/
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  struct yyparsestate *yyerrctx = NULL;
#ifdef YYREDUCEPOSNFUNC
  int reduce_posn;
#endif /* YYREDUCEPOSNFUNC */

#if YYDEBUG
  const char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yym = 0;
  yyn = 0;
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
#ifdef YYPOSN
  yyps->psp = yyps->ps;
#endif /* YYPOSN */
  *(yyps->ssp) = yystate = 0;
  

  /*
  ** Main parsing loop
  */
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  /*
  ** Read one token
  */
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     (int)yydepth, yytrial!=0, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  /*
  ** Do we have a conflict?
  */
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful "
	       "trial parse\n", (int)yydepth, yytrial!=0, yystate);
      }
#endif
      /* Switch to the next conflict context */
      struct yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       (int)yydepth, yytrial!=0, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      struct yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
#ifdef YYPOSN
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
#endif /* YYPOSN */
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 yytrial!=0);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        /* If this is a first conflict in the stack, start saving lexemes */
        if (!yylexemes) {
#ifdef __cplusplus
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
#ifdef YYPOSN
          yylpsns = new YYPOSN[YYSTACKGROWTH];
#endif /* YYPOSN */
#else
          yylexemes = malloc(sizeof(Yshort) * YYSTACKGROWTH);
          yylvals = malloc(sizeof(YYSTYPE) * YYSTACKGROWTH);
#ifdef YYPOSN
          yylpsns = malloc(sizeof(YYPOSN) * YYSTACKGROWTH);
#endif /* YYPOSN */
#endif
          yylvlim = yylvals + YYSTACKGROWTH; 
#ifdef YYPOSN
          yylplim = yylpsns + YYSTACKGROWTH; 
#endif /* YYPOSN */
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
#ifdef YYPOSN
	  yylpp = yylpe = yylpsns;
#endif /* YYPOSN */
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
#ifdef YYPOSN
            *yylpe++ = yyposn;
#endif /* YYPOSN */
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--;
#ifdef YYPOSN
	yylpp--;
#endif /* YYPOSN */
	yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               (int)yydepth, yytrial!=0, yystate, yyctable[ctry]);
#endif
      if (yychar < 0) {
        yylvp++;
#ifdef YYPOSN
	yylpp++;
#endif /* YYPOSN */
	yylexp++;
      }
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  /*
  ** Is action a shift?
  */
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             (int)yydepth, yytrial!=0, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
#ifdef YYPOSN
    *++(yyps->psp) = yyposn;
#endif /* YYPOSN */
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }
  yym = 0;  /* no reduction to clean up after */

  /*
  ** Action: error
  */
  if (yyps->errflag) goto yyinrecovery;
  else goto yyerrlab;	/* redundant goto to avoid 'unused label' warnings */
yyerrlab:
  /* explicit YYERROR from an action -- pop the rhs of the rule reduced
   * before looking for error recovery */
  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
#ifdef YYPOSN
  yyps->psp -= yym;
#endif /* YYPOSN */

  yynewerrflag = 1;
  goto yyerrhandler;
  goto yyerrquiet; /* redundant goto to avoid 'unused label' warnings */
yyerrquiet:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) {
    int ctry; 
    struct yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to "
	     "state %d, %d tokens\n", (int)yydepth, yytrial!=0, yystate,
	     yyps->save->state, (int)(yylvp - yylvals - yyps->save->lexeme));
#endif
    /* Memorize most forward-looking error state in case
     * it's really an error. */
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      /* Free old saved error context state */
      if(yyerrctx) YYFreeState(yyerrctx);
      /* Create and fill out new saved error context state */
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      memcpy(yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
#ifdef YYPOSN
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
#endif /* YYPOSN */
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yychar = -1;
    yylexp = yylexemes + save->lexeme;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    yylvp = yylvals + save->lexeme;
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
#ifdef YYPOSN
    yylpp  = yylpsns + save->lexeme;
    yyps->psp = yyps->ps + (save->psp - save->ps);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
#endif /* YYPOSN */
    ctry = ++save->ctry;
    yystate = save->state;
    /* We tried shift, try reduce now */
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    /*
    ** Nothing left on the stack -- error
    */
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       yytrial!=0);
      }
#endif
      /* Restore state as it was in the most forward-advanced error */
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      memcpy(yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      yylvp = yylvals   + yyerrctx->lexeme;
      yylval = yylvp[-1];
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
#ifdef YYPOSN
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yyposn = yylpp[-1];
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
#endif /* YYPOSN */
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state "
	         "%d\n", (int)yydepth, yytrial!=0, *(yyps->ssp), yytable[yyn]);
#endif
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 (int)yydepth, yytrial!=0, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
#ifdef YYDESTRUCT
	YYDESTRUCT(yytrial!=0, yyastable[yyps->ssp[0]], yyps->vsp, yyps->psp);
#endif /* YYDESTRUCT */
        --(yyps->ssp);
        --(yyps->vsp);
#ifdef YYPOSN
        --(yyps->psp);
#endif /* YYPOSN */
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d "
	     "(%s)\n", (int)yydepth, yytrial!=0, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
#ifdef YYDESTRUCT
    if (yychar > 0)
      YYDESTRUCT(yytrial!=0, yyastable[yyttable[yychar]], &yylval, &yyposn);
#endif /* YYDESTRUCT */
    yychar = (-1);
    goto yyloop;
  }

  /*
  ** Reduce the rule
  */
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           (int)yydepth, yytrial!=0, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = $1" default action */
  yyval = yyvsp[0];

#ifdef YYPOSN
  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling
     is present */
#ifndef YYPOSN_CONSTRUCTOR
  memset(&yyps->pos, 0, sizeof(yyps->pos));
#endif
#ifdef YYREDUCEPOSNFUNC
  reduce_posn = 1;
#endif /* YYREDUCEPOSNFUNC */
#endif /* YYPOSN */

  switch (yyn) {

case 3:
  if (!yytrial)
#line 194 "asmparse.y"
{ PASM->EndClass(); }
#line 6022 "asmparse.cpp.tab.c"
break;
case 4:
  if (!yytrial)
#line 195 "asmparse.y"
{ PASM->EndNameSpace(); }
#line 6028 "asmparse.cpp.tab.c"
break;
case 5:
  if (!yytrial)
#line 196 "asmparse.y"
{ if(PASM->m_pCurMethod->m_ulLines[1] ==0)
                                                                                  {  PASM->m_pCurMethod->m_ulLines[1] = PASM->m_ulCurLine;
                                                                                     PASM->m_pCurMethod->m_ulColumns[1]=PASM->m_ulCurColumn;}
                                                                                  PASM->EndMethod(); }
#line 6037 "asmparse.cpp.tab.c"
break;
case 12:
  if (!yytrial)
#line 206 "asmparse.y"
{ PASMM->EndAssembly(); }
#line 6043 "asmparse.cpp.tab.c"
break;
case 13:
  if (!yytrial)
#line 207 "asmparse.y"
{ PASMM->EndAssembly(); }
#line 6049 "asmparse.cpp.tab.c"
break;
case 14:
  if (!yytrial)
#line 208 "asmparse.y"
{ PASMM->EndComType(); }
#line 6055 "asmparse.cpp.tab.c"
break;
case 15:
  if (!yytrial)
#line 209 "asmparse.y"
{ PASMM->EndManifestRes(); }
#line 6061 "asmparse.cpp.tab.c"
break;
case 19:
  if (!yytrial)
#line 213 "asmparse.y"
{
#ifdef _PREFAST_
#pragma warning(push)
#pragma warning(disable:22011) /* Suppress PREFast warning about integer overflow/underflow*/
#endif
                                                                                  PASM->m_dwSubsystem = yyvsp[0].int32;
#ifdef _PREFAST_
#pragma warning(pop)
#endif
                                                                                }
#line 6076 "asmparse.cpp.tab.c"
break;
case 20:
  if (!yytrial)
#line 223 "asmparse.y"
{ PASM->m_dwComImageFlags = yyvsp[0].int32; }
#line 6082 "asmparse.cpp.tab.c"
break;
case 21:
  if (!yytrial)
#line 224 "asmparse.y"
{ PASM->m_dwFileAlignment = yyvsp[0].int32;
                                                                                  if((yyvsp[0].int32 & (yyvsp[0].int32 - 1))||(yyvsp[0].int32 < 0x200)||(yyvsp[0].int32 > 0x10000))
                                                                                    PASM->report->error("Invalid file alignment, must be power of 2 from 0x200 to 0x10000\n");}
#line 6090 "asmparse.cpp.tab.c"
break;
case 22:
  if (!yytrial)
#line 227 "asmparse.y"
{ PASM->m_stBaseAddress = (ULONGLONG)(*(yyvsp[0].int64)); delete yyvsp[0].int64;
                                                                                  if(PASM->m_stBaseAddress & 0xFFFF)
                                                                                    PASM->report->error("Invalid image base, must be 0x10000-aligned\n");}
#line 6098 "asmparse.cpp.tab.c"
break;
case 23:
  if (!yytrial)
#line 230 "asmparse.y"
{ PASM->m_stSizeOfStackReserve = (size_t)(*(yyvsp[0].int64)); delete yyvsp[0].int64; }
#line 6104 "asmparse.cpp.tab.c"
break;
case 28:
  if (!yytrial)
#line 235 "asmparse.y"
{ PASM->m_fIsMscorlib = TRUE; }
#line 6110 "asmparse.cpp.tab.c"
break;
case 31:
  if (!yytrial)
#line 242 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 6116 "asmparse.cpp.tab.c"
break;
case 32:
  if (!yytrial)
#line 243 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 6122 "asmparse.cpp.tab.c"
break;
case 33:
  if (!yytrial)
#line 246 "asmparse.y"
{ LPCSTRToGuid(yyvsp[0].string,&(PASM->m_guidLang)); }
#line 6128 "asmparse.cpp.tab.c"
break;
case 34:
  if (!yytrial)
#line 247 "asmparse.y"
{ LPCSTRToGuid(yyvsp[-2].string,&(PASM->m_guidLang));
                                                                                  LPCSTRToGuid(yyvsp[0].string,&(PASM->m_guidLangVendor));}
#line 6135 "asmparse.cpp.tab.c"
break;
case 35:
  if (!yytrial)
#line 249 "asmparse.y"
{ LPCSTRToGuid(yyvsp[-4].string,&(PASM->m_guidLang));
                                                                                  LPCSTRToGuid(yyvsp[-2].string,&(PASM->m_guidLangVendor));
                                                                                  LPCSTRToGuid(yyvsp[-2].string,&(PASM->m_guidDoc));}
#line 6143 "asmparse.cpp.tab.c"
break;
case 36:
  if (!yytrial)
#line 254 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 6149 "asmparse.cpp.tab.c"
break;
case 37:
  if (!yytrial)
#line 255 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 6155 "asmparse.cpp.tab.c"
break;
case 38:
  if (!yytrial)
#line 258 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 6161 "asmparse.cpp.tab.c"
break;
case 39:
  if (!yytrial)
#line 259 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 6167 "asmparse.cpp.tab.c"
break;
case 40:
  if (!yytrial)
#line 260 "asmparse.y"
{ yyval.string = newStringWDel(yyvsp[-2].string, '.', yyvsp[0].string); }
#line 6173 "asmparse.cpp.tab.c"
break;
case 41:
  if (!yytrial)
#line 263 "asmparse.y"
{ yyval.int32 = yyvsp[0].int32; }
#line 6179 "asmparse.cpp.tab.c"
break;
case 42:
  if (!yytrial)
#line 266 "asmparse.y"
{ yyval.int64 = yyvsp[0].int64; }
#line 6185 "asmparse.cpp.tab.c"
break;
case 43:
  if (!yytrial)
#line 267 "asmparse.y"
{ yyval.int64 = neg ? new __int64(yyvsp[0].int32) : new __int64((unsigned)yyvsp[0].int32); }
#line 6191 "asmparse.cpp.tab.c"
break;
case 44:
  if (!yytrial)
#line 270 "asmparse.y"
{ yyval.float64 = yyvsp[0].float64; }
#line 6197 "asmparse.cpp.tab.c"
break;
case 45:
  if (!yytrial)
#line 271 "asmparse.y"
{ float f; *((__int32*) (&f)) = yyvsp[-1].int32; yyval.float64 = new double(f); }
#line 6203 "asmparse.cpp.tab.c"
break;
case 46:
  if (!yytrial)
#line 272 "asmparse.y"
{ yyval.float64 = (double*) yyvsp[-1].int64; }
#line 6209 "asmparse.cpp.tab.c"
break;
case 47:
  if (!yytrial)
#line 276 "asmparse.y"
{ PASM->AddTypeDef(yyvsp[-2].binstr,yyvsp[0].string); }
#line 6215 "asmparse.cpp.tab.c"
break;
case 48:
  if (!yytrial)
#line 277 "asmparse.y"
{ PASM->AddTypeDef(yyvsp[-2].token,yyvsp[0].string); }
#line 6221 "asmparse.cpp.tab.c"
break;
case 49:
  if (!yytrial)
#line 278 "asmparse.y"
{ PASM->AddTypeDef(yyvsp[-2].token,yyvsp[0].string); }
#line 6227 "asmparse.cpp.tab.c"
break;
case 50:
  if (!yytrial)
#line 279 "asmparse.y"
{ yyvsp[-2].cad->tkOwner = 0; PASM->AddTypeDef(yyvsp[-2].cad,yyvsp[0].string); }
#line 6233 "asmparse.cpp.tab.c"
break;
case 51:
  if (!yytrial)
#line 280 "asmparse.y"
{ PASM->AddTypeDef(yyvsp[-2].cad,yyvsp[0].string); }
#line 6239 "asmparse.cpp.tab.c"
break;
case 52:
  if (!yytrial)
#line 285 "asmparse.y"
{ DefineVar(yyvsp[0].string, NULL); }
#line 6245 "asmparse.cpp.tab.c"
break;
case 53:
  if (!yytrial)
#line 286 "asmparse.y"
{ DefineVar(yyvsp[-1].string, yyvsp[0].binstr); }
#line 6251 "asmparse.cpp.tab.c"
break;
case 54:
  if (!yytrial)
#line 287 "asmparse.y"
{ UndefVar(yyvsp[0].string); }
#line 6257 "asmparse.cpp.tab.c"
break;
case 55:
  if (!yytrial)
#line 288 "asmparse.y"
{ SkipToken = !IsVarDefined(yyvsp[0].string);
                                                                                  IfEndif++;
                                                                                }
#line 6265 "asmparse.cpp.tab.c"
break;
case 56:
  if (!yytrial)
#line 291 "asmparse.y"
{ SkipToken = IsVarDefined(yyvsp[0].string);
                                                                                  IfEndif++;
                                                                                }
#line 6273 "asmparse.cpp.tab.c"
break;
case 57:
  if (!yytrial)
#line 294 "asmparse.y"
{ if(IfEndif == 1) SkipToken = !SkipToken;}
#line 6279 "asmparse.cpp.tab.c"
break;
case 58:
  if (!yytrial)
#line 295 "asmparse.y"
{ if(IfEndif == 0)
                                                                                    PASM->report->error("Unmatched #endif\n");
                                                                                  else IfEndif--;
                                                                                }
#line 6288 "asmparse.cpp.tab.c"
break;
case 59:
  if (!yytrial)
#line 299 "asmparse.y"
{ _ASSERTE(!"yylex should have dealt with this"); }
#line 6294 "asmparse.cpp.tab.c"
break;
case 60:
  if (!yytrial)
#line 300 "asmparse.y"
{ }
#line 6300 "asmparse.cpp.tab.c"
break;
case 61:
  if (!yytrial)
#line 304 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[0].token, NULL); }
#line 6306 "asmparse.cpp.tab.c"
break;
case 62:
  if (!yytrial)
#line 305 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[-2].token, yyvsp[0].binstr); }
#line 6312 "asmparse.cpp.tab.c"
break;
case 63:
  if (!yytrial)
#line 306 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[-4].token, yyvsp[-1].binstr); }
#line 6318 "asmparse.cpp.tab.c"
break;
case 64:
  if (!yytrial)
#line 307 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[-2].int32, yyvsp[-1].binstr); }
#line 6324 "asmparse.cpp.tab.c"
break;
case 65:
  if (!yytrial)
#line 310 "asmparse.y"
{ yyval.cad = new CustomDescr(yyvsp[-2].token, yyvsp[0].token, NULL); }
#line 6330 "asmparse.cpp.tab.c"
break;
case 66:
  if (!yytrial)
#line 311 "asmparse.y"
{ yyval.cad = new CustomDescr(yyvsp[-4].token, yyvsp[-2].token, yyvsp[0].binstr); }
#line 6336 "asmparse.cpp.tab.c"
break;
case 67:
  if (!yytrial)
#line 313 "asmparse.y"
{ yyval.cad = new CustomDescr(yyvsp[-6].token, yyvsp[-4].token, yyvsp[-1].binstr); }
#line 6342 "asmparse.cpp.tab.c"
break;
case 68:
  if (!yytrial)
#line 314 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[-2].int32, yyvsp[-1].binstr); }
#line 6348 "asmparse.cpp.tab.c"
break;
case 69:
  if (!yytrial)
#line 317 "asmparse.y"
{ yyval.int32 = yyvsp[-2].token; bParsingByteArray = TRUE; }
#line 6354 "asmparse.cpp.tab.c"
break;
case 70:
  if (!yytrial)
#line 321 "asmparse.y"
{ PASM->m_pCustomDescrList = NULL;
                                                                                  PASM->m_tkCurrentCVOwner = yyvsp[-4].token;
                                                                                  yyval.int32 = yyvsp[-2].token; bParsingByteArray = TRUE; }
#line 6362 "asmparse.cpp.tab.c"
break;
case 71:
  if (!yytrial)
#line 326 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 6368 "asmparse.cpp.tab.c"
break;
case 72:
  if (!yytrial)
#line 329 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 6374 "asmparse.cpp.tab.c"
break;
case 73:
  if (!yytrial)
#line 330 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 6380 "asmparse.cpp.tab.c"
break;
case 74:
  if (!yytrial)
#line 334 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                                                  yyval.binstr->appendInt16(VAL16(nCustomBlobNVPairs));
                                                                                  yyval.binstr->append(yyvsp[0].binstr);
                                                                                  nCustomBlobNVPairs = 0; }
#line 6389 "asmparse.cpp.tab.c"
break;
case 75:
  if (!yytrial)
#line 340 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt16(VAL16(0x0001)); }
#line 6395 "asmparse.cpp.tab.c"
break;
case 76:
  if (!yytrial)
#line 341 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                                                  AppendFieldToCustomBlob(yyval.binstr,yyvsp[0].binstr); }
#line 6402 "asmparse.cpp.tab.c"
break;
case 77:
  if (!yytrial)
#line 343 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 6408 "asmparse.cpp.tab.c"
break;
case 78:
  if (!yytrial)
#line 346 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 6414 "asmparse.cpp.tab.c"
break;
case 79:
  if (!yytrial)
#line 348 "asmparse.y"
{ yyval.binstr = yyvsp[-5].binstr; yyval.binstr->appendInt8(yyvsp[-4].int32);
                                                                                  yyval.binstr->append(yyvsp[-3].binstr);
                                                                                  AppendStringWithLength(yyval.binstr,yyvsp[-2].string);
                                                                                  AppendFieldToCustomBlob(yyval.binstr,yyvsp[0].binstr);
                                                                                  nCustomBlobNVPairs++; }
#line 6424 "asmparse.cpp.tab.c"
break;
case 80:
  if (!yytrial)
#line 353 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 6430 "asmparse.cpp.tab.c"
break;
case 81:
  if (!yytrial)
#line 356 "asmparse.y"
{ yyval.int32 = SERIALIZATION_TYPE_FIELD; }
#line 6436 "asmparse.cpp.tab.c"
break;
case 82:
  if (!yytrial)
#line 357 "asmparse.y"
{ yyval.int32 = SERIALIZATION_TYPE_PROPERTY; }
#line 6442 "asmparse.cpp.tab.c"
break;
case 83:
  if (!yytrial)
#line 360 "asmparse.y"
{ if(yyvsp[0].cad->tkOwner && !yyvsp[0].cad->tkInterfacePair)
                                                                                    PASM->DefineCV(yyvsp[0].cad);
                                                                                  else if(PASM->m_pCustomDescrList)
                                                                                    PASM->m_pCustomDescrList->PUSH(yyvsp[0].cad); }
#line 6451 "asmparse.cpp.tab.c"
break;
case 84:
  if (!yytrial)
#line 364 "asmparse.y"
{ PASM->DefineCV(yyvsp[0].cad); }
#line 6457 "asmparse.cpp.tab.c"
break;
case 85:
  if (!yytrial)
#line 365 "asmparse.y"
{ CustomDescr* pNew = new CustomDescr(yyvsp[0].tdd->m_pCA);
                                                                                  if(pNew->tkOwner == 0) pNew->tkOwner = PASM->m_tkCurrentCVOwner;
                                                                                  if(pNew->tkOwner)
                                                                                    PASM->DefineCV(pNew);
                                                                                  else if(PASM->m_pCustomDescrList)
                                                                                    PASM->m_pCustomDescrList->PUSH(pNew); }
#line 6468 "asmparse.cpp.tab.c"
break;
case 86:
  if (!yytrial)
#line 373 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 6474 "asmparse.cpp.tab.c"
break;
case 87:
  if (!yytrial)
#line 374 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE); }
#line 6480 "asmparse.cpp.tab.c"
break;
case 88:
  if (!yytrial)
#line 375 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TAGGED_OBJECT); }
#line 6486 "asmparse.cpp.tab.c"
break;
case 89:
  if (!yytrial)
#line 376 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                AppendStringWithLength(yyval.binstr,yyvsp[0].string); }
#line 6493 "asmparse.cpp.tab.c"
break;
case 90:
  if (!yytrial)
#line 378 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yyvsp[0].token)); }
#line 6500 "asmparse.cpp.tab.c"
break;
case 91:
  if (!yytrial)
#line 380 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 6506 "asmparse.cpp.tab.c"
break;
case 92:
  if (!yytrial)
#line 385 "asmparse.y"
{ PASMM->SetModuleName(NULL); PASM->m_tkCurrentCVOwner=1; }
#line 6512 "asmparse.cpp.tab.c"
break;
case 93:
  if (!yytrial)
#line 386 "asmparse.y"
{ PASMM->SetModuleName(yyvsp[0].string); PASM->m_tkCurrentCVOwner=1; }
#line 6518 "asmparse.cpp.tab.c"
break;
case 94:
  if (!yytrial)
#line 387 "asmparse.y"
{ BinStr* pbs = new BinStr();
                                                                                  unsigned L = (unsigned)strlen(yyvsp[0].string);
                                                                                  memcpy((char*)(pbs->getBuff(L)),yyvsp[0].string,L);
                                                                                  PASM->EmitImport(pbs); delete pbs;}
#line 6527 "asmparse.cpp.tab.c"
break;
case 95:
  if (!yytrial)
#line 394 "asmparse.y"
{ /*PASM->SetDataSection(); PASM->EmitDataLabel($7);*/
                                                                                  PASM->m_VTFList.PUSH(new VTFEntry((USHORT)yyvsp[-4].int32, (USHORT)yyvsp[-2].int32, yyvsp[0].string)); }
#line 6534 "asmparse.cpp.tab.c"
break;
case 96:
  if (!yytrial)
#line 398 "asmparse.y"
{ yyval.int32 = 0; }
#line 6540 "asmparse.cpp.tab.c"
break;
case 97:
  if (!yytrial)
#line 399 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_32BIT; }
#line 6546 "asmparse.cpp.tab.c"
break;
case 98:
  if (!yytrial)
#line 400 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_64BIT; }
#line 6552 "asmparse.cpp.tab.c"
break;
case 99:
  if (!yytrial)
#line 401 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_FROM_UNMANAGED; }
#line 6558 "asmparse.cpp.tab.c"
break;
case 100:
  if (!yytrial)
#line 402 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_CALL_MOST_DERIVED; }
#line 6564 "asmparse.cpp.tab.c"
break;
case 101:
  if (!yytrial)
#line 403 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN; }
#line 6570 "asmparse.cpp.tab.c"
break;
case 102:
  if (!yytrial)
#line 406 "asmparse.y"
{ PASM->m_pVTable = yyvsp[-1].binstr; }
#line 6576 "asmparse.cpp.tab.c"
break;
case 103:
  if (!yytrial)
#line 409 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 6582 "asmparse.cpp.tab.c"
break;
case 104:
  if (!yytrial)
#line 413 "asmparse.y"
{ PASM->StartNameSpace(yyvsp[0].string); }
#line 6588 "asmparse.cpp.tab.c"
break;
case 105:
  if (!yytrial)
#line 416 "asmparse.y"
{ newclass = TRUE; }
#line 6594 "asmparse.cpp.tab.c"
break;
case 106:
  if (!yytrial)
#line 419 "asmparse.y"
{ if(yyvsp[0].typarlist) FixupConstraints();
                                                                                  PASM->StartClass(yyvsp[-1].string, yyvsp[-2].classAttr, yyvsp[0].typarlist);
                                                                                  TyParFixupList.RESET(false);
                                                                                  newclass = FALSE;
                                                                                }
#line 6604 "asmparse.cpp.tab.c"
break;
case 107:
  if (!yytrial)
#line 425 "asmparse.y"
{ PASM->AddClass(); }
#line 6610 "asmparse.cpp.tab.c"
break;
case 108:
  if (!yytrial)
#line 428 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) 0; }
#line 6616 "asmparse.cpp.tab.c"
break;
case 109:
  if (!yytrial)
#line 429 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdVisibilityMask) | tdPublic); }
#line 6622 "asmparse.cpp.tab.c"
break;
case 110:
  if (!yytrial)
#line 430 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdVisibilityMask) | tdNotPublic); }
#line 6628 "asmparse.cpp.tab.c"
break;
case 111:
  if (!yytrial)
#line 431 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | 0x80000000 | tdSealed); }
#line 6634 "asmparse.cpp.tab.c"
break;
case 112:
  if (!yytrial)
#line 432 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | 0x40000000); }
#line 6640 "asmparse.cpp.tab.c"
break;
case 113:
  if (!yytrial)
#line 433 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdInterface | tdAbstract); }
#line 6646 "asmparse.cpp.tab.c"
break;
case 114:
  if (!yytrial)
#line 434 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdSealed); }
#line 6652 "asmparse.cpp.tab.c"
break;
case 115:
  if (!yytrial)
#line 435 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdAbstract); }
#line 6658 "asmparse.cpp.tab.c"
break;
case 116:
  if (!yytrial)
#line 436 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdLayoutMask) | tdAutoLayout); }
#line 6664 "asmparse.cpp.tab.c"
break;
case 117:
  if (!yytrial)
#line 437 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdLayoutMask) | tdSequentialLayout); }
#line 6670 "asmparse.cpp.tab.c"
break;
case 118:
  if (!yytrial)
#line 438 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdLayoutMask) | tdExplicitLayout); }
#line 6676 "asmparse.cpp.tab.c"
break;
case 119:
  if (!yytrial)
#line 439 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdStringFormatMask) | tdAnsiClass); }
#line 6682 "asmparse.cpp.tab.c"
break;
case 120:
  if (!yytrial)
#line 440 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdStringFormatMask) | tdUnicodeClass); }
#line 6688 "asmparse.cpp.tab.c"
break;
case 121:
  if (!yytrial)
#line 441 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdStringFormatMask) | tdAutoClass); }
#line 6694 "asmparse.cpp.tab.c"
break;
case 122:
  if (!yytrial)
#line 442 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdImport); }
#line 6700 "asmparse.cpp.tab.c"
break;
case 123:
  if (!yytrial)
#line 443 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdSerializable); }
#line 6706 "asmparse.cpp.tab.c"
break;
case 124:
  if (!yytrial)
#line 444 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdWindowsRuntime); }
#line 6712 "asmparse.cpp.tab.c"
break;
case 125:
  if (!yytrial)
#line 445 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedPublic); }
#line 6718 "asmparse.cpp.tab.c"
break;
case 126:
  if (!yytrial)
#line 446 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedPrivate); }
#line 6724 "asmparse.cpp.tab.c"
break;
case 127:
  if (!yytrial)
#line 447 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedFamily); }
#line 6730 "asmparse.cpp.tab.c"
break;
case 128:
  if (!yytrial)
#line 448 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedAssembly); }
#line 6736 "asmparse.cpp.tab.c"
break;
case 129:
  if (!yytrial)
#line 449 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedFamANDAssem); }
#line 6742 "asmparse.cpp.tab.c"
break;
case 130:
  if (!yytrial)
#line 450 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedFamORAssem); }
#line 6748 "asmparse.cpp.tab.c"
break;
case 131:
  if (!yytrial)
#line 451 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdBeforeFieldInit); }
#line 6754 "asmparse.cpp.tab.c"
break;
case 132:
  if (!yytrial)
#line 452 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdSpecialName); }
#line 6760 "asmparse.cpp.tab.c"
break;
case 133:
  if (!yytrial)
#line 453 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr); }
#line 6766 "asmparse.cpp.tab.c"
break;
case 134:
  if (!yytrial)
#line 454 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].int32); }
#line 6772 "asmparse.cpp.tab.c"
break;
case 136:
  if (!yytrial)
#line 458 "asmparse.y"
{ PASM->m_crExtends = yyvsp[0].token; }
#line 6778 "asmparse.cpp.tab.c"
break;
case 141:
  if (!yytrial)
#line 469 "asmparse.y"
{ PASM->AddToImplList(yyvsp[0].token); }
#line 6784 "asmparse.cpp.tab.c"
break;
case 142:
  if (!yytrial)
#line 470 "asmparse.y"
{ PASM->AddToImplList(yyvsp[0].token); }
#line 6790 "asmparse.cpp.tab.c"
break;
case 143:
  if (!yytrial)
#line 474 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 6796 "asmparse.cpp.tab.c"
break;
case 144:
  if (!yytrial)
#line 475 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 6802 "asmparse.cpp.tab.c"
break;
case 145:
  if (!yytrial)
#line 478 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yyvsp[0].token); }
#line 6808 "asmparse.cpp.tab.c"
break;
case 146:
  if (!yytrial)
#line 479 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->appendInt32(yyvsp[0].token); }
#line 6814 "asmparse.cpp.tab.c"
break;
case 147:
  if (!yytrial)
#line 482 "asmparse.y"
{ yyval.typarlist = NULL; PASM->m_TyParList = NULL;}
#line 6820 "asmparse.cpp.tab.c"
break;
case 148:
  if (!yytrial)
#line 483 "asmparse.y"
{ yyval.typarlist = yyvsp[-1].typarlist;   PASM->m_TyParList = yyvsp[-1].typarlist;}
#line 6826 "asmparse.cpp.tab.c"
break;
case 149:
  if (!yytrial)
#line 486 "asmparse.y"
{ yyval.int32 = gpCovariant; }
#line 6832 "asmparse.cpp.tab.c"
break;
case 150:
  if (!yytrial)
#line 487 "asmparse.y"
{ yyval.int32 = gpContravariant; }
#line 6838 "asmparse.cpp.tab.c"
break;
case 151:
  if (!yytrial)
#line 488 "asmparse.y"
{ yyval.int32 = gpReferenceTypeConstraint; }
#line 6844 "asmparse.cpp.tab.c"
break;
case 152:
  if (!yytrial)
#line 489 "asmparse.y"
{ yyval.int32 = gpNotNullableValueTypeConstraint; }
#line 6850 "asmparse.cpp.tab.c"
break;
case 153:
  if (!yytrial)
#line 490 "asmparse.y"
{ yyval.int32 = gpAcceptByRefLike; }
#line 6856 "asmparse.cpp.tab.c"
break;
case 154:
  if (!yytrial)
#line 491 "asmparse.y"
{ yyval.int32 = gpDefaultConstructorConstraint; }
#line 6862 "asmparse.cpp.tab.c"
break;
case 155:
  if (!yytrial)
#line 492 "asmparse.y"
{ yyval.int32 = (CorGenericParamAttr)yyvsp[-1].int32; }
#line 6868 "asmparse.cpp.tab.c"
break;
case 156:
  if (!yytrial)
#line 495 "asmparse.y"
{ yyval.int32 = 0; }
#line 6874 "asmparse.cpp.tab.c"
break;
case 157:
  if (!yytrial)
#line 496 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | yyvsp[0].int32; }
#line 6880 "asmparse.cpp.tab.c"
break;
case 158:
  if (!yytrial)
#line 499 "asmparse.y"
{ yyval.int32 = (CorGenericParamAttr)yyvsp[-1].int32; }
#line 6886 "asmparse.cpp.tab.c"
break;
case 159:
  if (!yytrial)
#line 502 "asmparse.y"
{ yyval.int32 = 0; }
#line 6892 "asmparse.cpp.tab.c"
break;
case 160:
  if (!yytrial)
#line 503 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | yyvsp[0].int32; }
#line 6898 "asmparse.cpp.tab.c"
break;
case 161:
  if (!yytrial)
#line 506 "asmparse.y"
{yyval.typarlist = new TyParList(yyvsp[-3].int32, yyvsp[-2].token, NULL, yyvsp[-1].string, yyvsp[0].typarlist); }
#line 6904 "asmparse.cpp.tab.c"
break;
case 162:
  if (!yytrial)
#line 507 "asmparse.y"
{yyval.typarlist = new TyParList(yyvsp[-3].int32, yyvsp[-2].binstr, yyvsp[-1].string, yyvsp[0].typarlist);}
#line 6910 "asmparse.cpp.tab.c"
break;
case 163:
  if (!yytrial)
#line 508 "asmparse.y"
{yyval.typarlist = new TyParList(yyvsp[-2].int32, NULL, yyvsp[-1].string, yyvsp[0].typarlist);}
#line 6916 "asmparse.cpp.tab.c"
break;
case 164:
  if (!yytrial)
#line 511 "asmparse.y"
{ yyval.typarlist = NULL; }
#line 6922 "asmparse.cpp.tab.c"
break;
case 165:
  if (!yytrial)
#line 512 "asmparse.y"
{ yyval.typarlist = yyvsp[0].typarlist; }
#line 6928 "asmparse.cpp.tab.c"
break;
case 166:
  if (!yytrial)
#line 515 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 6934 "asmparse.cpp.tab.c"
break;
case 167:
  if (!yytrial)
#line 518 "asmparse.y"
{ yyval.int32= 0; }
#line 6940 "asmparse.cpp.tab.c"
break;
case 168:
  if (!yytrial)
#line 519 "asmparse.y"
{ yyval.int32 = yyvsp[0].int32; }
#line 6946 "asmparse.cpp.tab.c"
break;
case 169:
  if (!yytrial)
#line 522 "asmparse.y"
{ yyval.int32 = yyvsp[-2].int32; }
#line 6952 "asmparse.cpp.tab.c"
break;
case 170:
  if (!yytrial)
#line 526 "asmparse.y"
{ if(PASM->m_pCurMethod->m_ulLines[1] ==0)
                                                              {  PASM->m_pCurMethod->m_ulLines[1] = PASM->m_ulCurLine;
                                                                 PASM->m_pCurMethod->m_ulColumns[1]=PASM->m_ulCurColumn;}
                                                              PASM->EndMethod(); }
#line 6961 "asmparse.cpp.tab.c"
break;
case 171:
  if (!yytrial)
#line 530 "asmparse.y"
{ PASM->EndClass(); }
#line 6967 "asmparse.cpp.tab.c"
break;
case 172:
  if (!yytrial)
#line 531 "asmparse.y"
{ PASM->EndEvent(); }
#line 6973 "asmparse.cpp.tab.c"
break;
case 173:
  if (!yytrial)
#line 532 "asmparse.y"
{ PASM->EndProp(); }
#line 6979 "asmparse.cpp.tab.c"
break;
case 179:
  if (!yytrial)
#line 538 "asmparse.y"
{ PASM->m_pCurClass->m_ulSize = yyvsp[0].int32; }
#line 6985 "asmparse.cpp.tab.c"
break;
case 180:
  if (!yytrial)
#line 539 "asmparse.y"
{ PASM->m_pCurClass->m_ulPack = yyvsp[0].int32; }
#line 6991 "asmparse.cpp.tab.c"
break;
case 181:
  if (!yytrial)
#line 540 "asmparse.y"
{ PASMM->EndComType(); }
#line 6997 "asmparse.cpp.tab.c"
break;
case 182:
  if (!yytrial)
#line 542 "asmparse.y"
{ BinStr *sig1 = parser->MakeSig(yyvsp[-7].int32, yyvsp[-6].binstr, yyvsp[-1].binstr);
                                                                  BinStr *sig2 = new BinStr(); sig2->append(sig1);
                                                                  PASM->AddMethodImpl(yyvsp[-11].token,yyvsp[-9].string,sig1,yyvsp[-5].token,yyvsp[-3].string,sig2);
                                                                  PASM->ResetArgNameList();
                                                                }
#line 7007 "asmparse.cpp.tab.c"
break;
case 183:
  if (!yytrial)
#line 548 "asmparse.y"
{ PASM->AddMethodImpl(yyvsp[-17].token,yyvsp[-15].string,
                                                                      (yyvsp[-14].int32==0 ? parser->MakeSig(yyvsp[-19].int32,yyvsp[-18].binstr,yyvsp[-12].binstr) :
                                                                      parser->MakeSig(yyvsp[-19].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yyvsp[-18].binstr,yyvsp[-12].binstr,yyvsp[-14].int32)),
                                                                      yyvsp[-6].token,yyvsp[-4].string,
                                                                      (yyvsp[-3].int32==0 ? parser->MakeSig(yyvsp[-8].int32,yyvsp[-7].binstr,yyvsp[-1].binstr) :
                                                                      parser->MakeSig(yyvsp[-8].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yyvsp[-7].binstr,yyvsp[-1].binstr,yyvsp[-3].int32)));
                                                                   PASM->ResetArgNameList();
                                                                 }
#line 7020 "asmparse.cpp.tab.c"
break;
case 186:
  if (!yytrial)
#line 558 "asmparse.y"
{ if((yyvsp[-1].int32 > 0) && (yyvsp[-1].int32 <= (int)PASM->m_pCurClass->m_NumTyPars))
                                                                PASM->m_pCustomDescrList = PASM->m_pCurClass->m_TyPars[yyvsp[-1].int32-1].CAList();
                                                              else
                                                                PASM->report->error("Type parameter index out of range\n");
                                                            }
#line 7030 "asmparse.cpp.tab.c"
break;
case 187:
  if (!yytrial)
#line 563 "asmparse.y"
{ int n = PASM->m_pCurClass->FindTyPar(yyvsp[0].string);
                                                              if(n >= 0)
                                                                PASM->m_pCustomDescrList = PASM->m_pCurClass->m_TyPars[n].CAList();
                                                              else
                                                                PASM->report->error("Type parameter '%s' undefined\n",yyvsp[0].string);
                                                            }
#line 7041 "asmparse.cpp.tab.c"
break;
case 188:
  if (!yytrial)
#line 569 "asmparse.y"
{ PASM->AddGenericParamConstraint(yyvsp[-3].int32, 0, yyvsp[0].token); }
#line 7047 "asmparse.cpp.tab.c"
break;
case 189:
  if (!yytrial)
#line 570 "asmparse.y"
{ PASM->AddGenericParamConstraint(0, yyvsp[-2].string, yyvsp[0].token); }
#line 7053 "asmparse.cpp.tab.c"
break;
case 190:
  if (!yytrial)
#line 571 "asmparse.y"
{ yyvsp[0].cad->tkInterfacePair = yyvsp[-1].token;
                                                                        if(PASM->m_pCustomDescrList)
                                                                            PASM->m_pCustomDescrList->PUSH(yyvsp[0].cad);
                                                                      }
#line 7062 "asmparse.cpp.tab.c"
break;
case 191:
  if (!yytrial)
#line 579 "asmparse.y"
{ yyvsp[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                              PASM->AddField(yyvsp[-2].string, yyvsp[-3].binstr, yyvsp[-4].fieldAttr, yyvsp[-1].string, yyvsp[0].binstr, yyvsp[-5].int32); }
#line 7069 "asmparse.cpp.tab.c"
break;
case 192:
  if (!yytrial)
#line 583 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) 0; }
#line 7075 "asmparse.cpp.tab.c"
break;
case 193:
  if (!yytrial)
#line 584 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdStatic); }
#line 7081 "asmparse.cpp.tab.c"
break;
case 194:
  if (!yytrial)
#line 585 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdPublic); }
#line 7087 "asmparse.cpp.tab.c"
break;
case 195:
  if (!yytrial)
#line 586 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdPrivate); }
#line 7093 "asmparse.cpp.tab.c"
break;
case 196:
  if (!yytrial)
#line 587 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdFamily); }
#line 7099 "asmparse.cpp.tab.c"
break;
case 197:
  if (!yytrial)
#line 588 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdInitOnly); }
#line 7105 "asmparse.cpp.tab.c"
break;
case 198:
  if (!yytrial)
#line 589 "asmparse.y"
{ yyval.fieldAttr = yyvsp[-1].fieldAttr; }
#line 7111 "asmparse.cpp.tab.c"
break;
case 199:
  if (!yytrial)
#line 590 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdSpecialName); }
#line 7117 "asmparse.cpp.tab.c"
break;
case 200:
  if (!yytrial)
#line 603 "asmparse.y"
{ PASM->m_pMarshal = yyvsp[-1].binstr; }
#line 7123 "asmparse.cpp.tab.c"
break;
case 201:
  if (!yytrial)
#line 604 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdAssembly); }
#line 7129 "asmparse.cpp.tab.c"
break;
case 202:
  if (!yytrial)
#line 605 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdFamANDAssem); }
#line 7135 "asmparse.cpp.tab.c"
break;
case 203:
  if (!yytrial)
#line 606 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdFamORAssem); }
#line 7141 "asmparse.cpp.tab.c"
break;
case 204:
  if (!yytrial)
#line 607 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdPrivateScope); }
#line 7147 "asmparse.cpp.tab.c"
break;
case 205:
  if (!yytrial)
#line 608 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdLiteral); }
#line 7153 "asmparse.cpp.tab.c"
break;
case 206:
  if (!yytrial)
#line 609 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdNotSerialized); }
#line 7159 "asmparse.cpp.tab.c"
break;
case 207:
  if (!yytrial)
#line 610 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].int32); }
#line 7165 "asmparse.cpp.tab.c"
break;
case 208:
  if (!yytrial)
#line 613 "asmparse.y"
{ yyval.string = 0; }
#line 7171 "asmparse.cpp.tab.c"
break;
case 209:
  if (!yytrial)
#line 614 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 7177 "asmparse.cpp.tab.c"
break;
case 210:
  if (!yytrial)
#line 617 "asmparse.y"
{ yyval.binstr = NULL; }
#line 7183 "asmparse.cpp.tab.c"
break;
case 211:
  if (!yytrial)
#line 618 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 7189 "asmparse.cpp.tab.c"
break;
case 212:
  if (!yytrial)
#line 621 "asmparse.y"
{ yyval.int32 = 0xFFFFFFFF; }
#line 7195 "asmparse.cpp.tab.c"
break;
case 213:
  if (!yytrial)
#line 622 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32; }
#line 7201 "asmparse.cpp.tab.c"
break;
case 214:
  if (!yytrial)
#line 627 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if (yyvsp[-3].binstr == NULL)
                                                               {
                                                                 if((iCallConv)&&((yyvsp[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 yyval.token = PASM->MakeMemberRef(yyvsp[-6].token, yyvsp[-4].string, parser->MakeSig(yyvsp[-8].int32|iCallConv, yyvsp[-7].binstr, yyvsp[-1].binstr));
                                                               }
                                                               else
                                                               {
                                                                 mdToken mr;
                                                                 if((iCallConv)&&((yyvsp[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 mr = PASM->MakeMemberRef(yyvsp[-6].token, yyvsp[-4].string,
                                                                   parser->MakeSig(yyvsp[-8].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yyvsp[-7].binstr, yyvsp[-1].binstr, corCountArgs(yyvsp[-3].binstr)));
                                                                 yyval.token = PASM->MakeMethodSpec(mr,
                                                                   parser->MakeSig(IMAGE_CEE_CS_CALLCONV_INSTANTIATION, 0, yyvsp[-3].binstr));
                                                               }
                                                             }
#line 7222 "asmparse.cpp.tab.c"
break;
case 215:
  if (!yytrial)
#line 644 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if((iCallConv)&&((yyvsp[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                               yyval.token = PASM->MakeMemberRef(yyvsp[-6].token, yyvsp[-4].string,
                                                                 parser->MakeSig(yyvsp[-8].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yyvsp[-7].binstr, yyvsp[-1].binstr, yyvsp[-3].int32));
                                                             }
#line 7232 "asmparse.cpp.tab.c"
break;
case 216:
  if (!yytrial)
#line 650 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if (yyvsp[-3].binstr == NULL)
                                                               {
                                                                 if((iCallConv)&&((yyvsp[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 yyval.token = PASM->MakeMemberRef(mdTokenNil, yyvsp[-4].string, parser->MakeSig(yyvsp[-6].int32|iCallConv, yyvsp[-5].binstr, yyvsp[-1].binstr));
                                                               }
                                                               else
                                                               {
                                                                 mdToken mr;
                                                                 if((iCallConv)&&((yyvsp[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 mr = PASM->MakeMemberRef(mdTokenNil, yyvsp[-4].string, parser->MakeSig(yyvsp[-6].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yyvsp[-5].binstr, yyvsp[-1].binstr, corCountArgs(yyvsp[-3].binstr)));
                                                                 yyval.token = PASM->MakeMethodSpec(mr,
                                                                   parser->MakeSig(IMAGE_CEE_CS_CALLCONV_INSTANTIATION, 0, yyvsp[-3].binstr));
                                                               }
                                                             }
#line 7252 "asmparse.cpp.tab.c"
break;
case 217:
  if (!yytrial)
#line 666 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if((iCallConv)&&((yyvsp[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                               yyval.token = PASM->MakeMemberRef(mdTokenNil, yyvsp[-4].string, parser->MakeSig(yyvsp[-6].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yyvsp[-5].binstr, yyvsp[-1].binstr, yyvsp[-3].int32));
                                                             }
#line 7261 "asmparse.cpp.tab.c"
break;
case 218:
  if (!yytrial)
#line 670 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 7267 "asmparse.cpp.tab.c"
break;
case 219:
  if (!yytrial)
#line 671 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec; }
#line 7273 "asmparse.cpp.tab.c"
break;
case 220:
  if (!yytrial)
#line 672 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec; }
#line 7279 "asmparse.cpp.tab.c"
break;
case 221:
  if (!yytrial)
#line 675 "asmparse.y"
{ yyval.int32 = (yyvsp[0].int32 | IMAGE_CEE_CS_CALLCONV_HASTHIS); }
#line 7285 "asmparse.cpp.tab.c"
break;
case 222:
  if (!yytrial)
#line 676 "asmparse.y"
{ yyval.int32 = (yyvsp[0].int32 | IMAGE_CEE_CS_CALLCONV_EXPLICITTHIS); }
#line 7291 "asmparse.cpp.tab.c"
break;
case 223:
  if (!yytrial)
#line 677 "asmparse.y"
{ yyval.int32 = yyvsp[0].int32; }
#line 7297 "asmparse.cpp.tab.c"
break;
case 224:
  if (!yytrial)
#line 678 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32; }
#line 7303 "asmparse.cpp.tab.c"
break;
case 225:
  if (!yytrial)
#line 681 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_DEFAULT; }
#line 7309 "asmparse.cpp.tab.c"
break;
case 226:
  if (!yytrial)
#line 682 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_DEFAULT; }
#line 7315 "asmparse.cpp.tab.c"
break;
case 227:
  if (!yytrial)
#line 683 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_VARARG; }
#line 7321 "asmparse.cpp.tab.c"
break;
case 228:
  if (!yytrial)
#line 684 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_C; }
#line 7327 "asmparse.cpp.tab.c"
break;
case 229:
  if (!yytrial)
#line 685 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_STDCALL; }
#line 7333 "asmparse.cpp.tab.c"
break;
case 230:
  if (!yytrial)
#line 686 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_THISCALL; }
#line 7339 "asmparse.cpp.tab.c"
break;
case 231:
  if (!yytrial)
#line 687 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_FASTCALL; }
#line 7345 "asmparse.cpp.tab.c"
break;
case 232:
  if (!yytrial)
#line 688 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_UNMANAGED; }
#line 7351 "asmparse.cpp.tab.c"
break;
case 233:
  if (!yytrial)
#line 691 "asmparse.y"
{ yyval.token = yyvsp[-1].int32; }
#line 7357 "asmparse.cpp.tab.c"
break;
case 234:
  if (!yytrial)
#line 694 "asmparse.y"
{ yyval.token = yyvsp[0].token;
                                                               PASM->delArgNameList(PASM->m_firstArgName);
                                                               PASM->m_firstArgName = parser->m_ANSFirst.POP();
                                                               PASM->m_lastArgName = parser->m_ANSLast.POP();
                                                               PASM->SetMemberRefFixup(yyvsp[0].token,iOpcodeLen); }
#line 7367 "asmparse.cpp.tab.c"
break;
case 235:
  if (!yytrial)
#line 700 "asmparse.y"
{ yyvsp[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               yyval.token = PASM->MakeMemberRef(yyvsp[-2].token, yyvsp[0].string, yyvsp[-3].binstr);
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7375 "asmparse.cpp.tab.c"
break;
case 236:
  if (!yytrial)
#line 704 "asmparse.y"
{ yyvsp[-1].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               yyval.token = PASM->MakeMemberRef(NULL, yyvsp[0].string, yyvsp[-1].binstr);
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7383 "asmparse.cpp.tab.c"
break;
case 237:
  if (!yytrial)
#line 707 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7390 "asmparse.cpp.tab.c"
break;
case 238:
  if (!yytrial)
#line 709 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7397 "asmparse.cpp.tab.c"
break;
case 239:
  if (!yytrial)
#line 711 "asmparse.y"
{ yyval.token = yyvsp[0].token;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7404 "asmparse.cpp.tab.c"
break;
case 240:
  if (!yytrial)
#line 716 "asmparse.y"
{ PASM->ResetEvent(yyvsp[0].string, yyvsp[-1].token, yyvsp[-2].eventAttr); }
#line 7410 "asmparse.cpp.tab.c"
break;
case 241:
  if (!yytrial)
#line 717 "asmparse.y"
{ PASM->ResetEvent(yyvsp[0].string, mdTypeRefNil, yyvsp[-1].eventAttr); }
#line 7416 "asmparse.cpp.tab.c"
break;
case 242:
  if (!yytrial)
#line 721 "asmparse.y"
{ yyval.eventAttr = (CorEventAttr) 0; }
#line 7422 "asmparse.cpp.tab.c"
break;
case 243:
  if (!yytrial)
#line 722 "asmparse.y"
{ yyval.eventAttr = yyvsp[-1].eventAttr; }
#line 7428 "asmparse.cpp.tab.c"
break;
case 244:
  if (!yytrial)
#line 723 "asmparse.y"
{ yyval.eventAttr = (CorEventAttr) (yyvsp[-1].eventAttr | evSpecialName); }
#line 7434 "asmparse.cpp.tab.c"
break;
case 247:
  if (!yytrial)
#line 730 "asmparse.y"
{ PASM->SetEventMethod(0, yyvsp[0].token); }
#line 7440 "asmparse.cpp.tab.c"
break;
case 248:
  if (!yytrial)
#line 731 "asmparse.y"
{ PASM->SetEventMethod(1, yyvsp[0].token); }
#line 7446 "asmparse.cpp.tab.c"
break;
case 249:
  if (!yytrial)
#line 732 "asmparse.y"
{ PASM->SetEventMethod(2, yyvsp[0].token); }
#line 7452 "asmparse.cpp.tab.c"
break;
case 250:
  if (!yytrial)
#line 733 "asmparse.y"
{ PASM->SetEventMethod(3, yyvsp[0].token); }
#line 7458 "asmparse.cpp.tab.c"
break;
case 255:
  if (!yytrial)
#line 742 "asmparse.y"
{ PASM->ResetProp(yyvsp[-4].string,
                                                              parser->MakeSig((IMAGE_CEE_CS_CALLCONV_PROPERTY |
                                                              (yyvsp[-6].int32 & IMAGE_CEE_CS_CALLCONV_HASTHIS)),yyvsp[-5].binstr,yyvsp[-2].binstr), yyvsp[-7].propAttr, yyvsp[0].binstr);}
#line 7466 "asmparse.cpp.tab.c"
break;
case 256:
  if (!yytrial)
#line 747 "asmparse.y"
{ yyval.propAttr = (CorPropertyAttr) 0; }
#line 7472 "asmparse.cpp.tab.c"
break;
case 257:
  if (!yytrial)
#line 748 "asmparse.y"
{ yyval.propAttr = yyvsp[-1].propAttr; }
#line 7478 "asmparse.cpp.tab.c"
break;
case 258:
  if (!yytrial)
#line 749 "asmparse.y"
{ yyval.propAttr = (CorPropertyAttr) (yyvsp[-1].propAttr | prSpecialName); }
#line 7484 "asmparse.cpp.tab.c"
break;
case 261:
  if (!yytrial)
#line 757 "asmparse.y"
{ PASM->SetPropMethod(0, yyvsp[0].token); }
#line 7490 "asmparse.cpp.tab.c"
break;
case 262:
  if (!yytrial)
#line 758 "asmparse.y"
{ PASM->SetPropMethod(1, yyvsp[0].token); }
#line 7496 "asmparse.cpp.tab.c"
break;
case 263:
  if (!yytrial)
#line 759 "asmparse.y"
{ PASM->SetPropMethod(2, yyvsp[0].token); }
#line 7502 "asmparse.cpp.tab.c"
break;
case 268:
  if (!yytrial)
#line 767 "asmparse.y"
{ PASM->ResetForNextMethod();
                                                              uMethodBeginLine = PASM->m_ulCurLine;
                                                              uMethodBeginColumn=PASM->m_ulCurColumn;
                                                            }
#line 7511 "asmparse.cpp.tab.c"
break;
case 269:
  if (!yytrial)
#line 773 "asmparse.y"
{ yyval.binstr = NULL; }
#line 7517 "asmparse.cpp.tab.c"
break;
case 270:
  if (!yytrial)
#line 774 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 7523 "asmparse.cpp.tab.c"
break;
case 271:
  if (!yytrial)
#line 777 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 7529 "asmparse.cpp.tab.c"
break;
case 272:
  if (!yytrial)
#line 778 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 7535 "asmparse.cpp.tab.c"
break;
case 273:
  if (!yytrial)
#line 781 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 7541 "asmparse.cpp.tab.c"
break;
case 274:
  if (!yytrial)
#line 785 "asmparse.y"
{ BinStr* sig;
                                                              if (yyvsp[-5].typarlist == NULL) sig = parser->MakeSig(yyvsp[-10].int32, yyvsp[-8].binstr, yyvsp[-3].binstr);
                                                              else {
                                                               FixupTyPars(yyvsp[-8].binstr);
                                                               sig = parser->MakeSig(yyvsp[-10].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC, yyvsp[-8].binstr, yyvsp[-3].binstr, yyvsp[-5].typarlist->Count());
                                                               FixupConstraints();
                                                              }
                                                              PASM->StartMethod(yyvsp[-6].string, sig, yyvsp[-11].methAttr, yyvsp[-7].binstr, yyvsp[-9].int32, yyvsp[-5].typarlist);
                                                              TyParFixupList.RESET(false);
                                                              PASM->SetImplAttr((USHORT)yyvsp[-1].implAttr);
                                                              PASM->m_pCurMethod->m_ulLines[0] = uMethodBeginLine;
                                                              PASM->m_pCurMethod->m_ulColumns[0]=uMethodBeginColumn;
                                                            }
#line 7559 "asmparse.cpp.tab.c"
break;
case 275:
  if (!yytrial)
#line 800 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) 0; }
#line 7565 "asmparse.cpp.tab.c"
break;
case 276:
  if (!yytrial)
#line 801 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdStatic); }
#line 7571 "asmparse.cpp.tab.c"
break;
case 277:
  if (!yytrial)
#line 802 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdPublic); }
#line 7577 "asmparse.cpp.tab.c"
break;
case 278:
  if (!yytrial)
#line 803 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdPrivate); }
#line 7583 "asmparse.cpp.tab.c"
break;
case 279:
  if (!yytrial)
#line 804 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdFamily); }
#line 7589 "asmparse.cpp.tab.c"
break;
case 280:
  if (!yytrial)
#line 805 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdFinal); }
#line 7595 "asmparse.cpp.tab.c"
break;
case 281:
  if (!yytrial)
#line 806 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdSpecialName); }
#line 7601 "asmparse.cpp.tab.c"
break;
case 282:
  if (!yytrial)
#line 807 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdVirtual); }
#line 7607 "asmparse.cpp.tab.c"
break;
case 283:
  if (!yytrial)
#line 808 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdCheckAccessOnOverride); }
#line 7613 "asmparse.cpp.tab.c"
break;
case 284:
  if (!yytrial)
#line 809 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdAbstract); }
#line 7619 "asmparse.cpp.tab.c"
break;
case 285:
  if (!yytrial)
#line 810 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdAssem); }
#line 7625 "asmparse.cpp.tab.c"
break;
case 286:
  if (!yytrial)
#line 811 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdFamANDAssem); }
#line 7631 "asmparse.cpp.tab.c"
break;
case 287:
  if (!yytrial)
#line 812 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdFamORAssem); }
#line 7637 "asmparse.cpp.tab.c"
break;
case 288:
  if (!yytrial)
#line 813 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdPrivateScope); }
#line 7643 "asmparse.cpp.tab.c"
break;
case 289:
  if (!yytrial)
#line 814 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdHideBySig); }
#line 7649 "asmparse.cpp.tab.c"
break;
case 290:
  if (!yytrial)
#line 815 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdNewSlot); }
#line 7655 "asmparse.cpp.tab.c"
break;
case 291:
  if (!yytrial)
#line 816 "asmparse.y"
{ yyval.methAttr = yyvsp[-1].methAttr; }
#line 7661 "asmparse.cpp.tab.c"
break;
case 292:
  if (!yytrial)
#line 817 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdUnmanagedExport); }
#line 7667 "asmparse.cpp.tab.c"
break;
case 293:
  if (!yytrial)
#line 818 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdRequireSecObject); }
#line 7673 "asmparse.cpp.tab.c"
break;
case 294:
  if (!yytrial)
#line 819 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].int32); }
#line 7679 "asmparse.cpp.tab.c"
break;
case 295:
  if (!yytrial)
#line 821 "asmparse.y"
{ PASM->SetPinvoke(yyvsp[-4].binstr,0,yyvsp[-2].binstr,yyvsp[-1].pinvAttr);
                                                              yyval.methAttr = (CorMethodAttr) (yyvsp[-7].methAttr | mdPinvokeImpl); }
#line 7686 "asmparse.cpp.tab.c"
break;
case 296:
  if (!yytrial)
#line 824 "asmparse.y"
{ PASM->SetPinvoke(yyvsp[-2].binstr,0,NULL,yyvsp[-1].pinvAttr);
                                                              yyval.methAttr = (CorMethodAttr) (yyvsp[-5].methAttr | mdPinvokeImpl); }
#line 7693 "asmparse.cpp.tab.c"
break;
case 297:
  if (!yytrial)
#line 827 "asmparse.y"
{ PASM->SetPinvoke(new BinStr(),0,NULL,yyvsp[-1].pinvAttr);
                                                              yyval.methAttr = (CorMethodAttr) (yyvsp[-4].methAttr | mdPinvokeImpl); }
#line 7700 "asmparse.cpp.tab.c"
break;
case 298:
  if (!yytrial)
#line 831 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) 0; }
#line 7706 "asmparse.cpp.tab.c"
break;
case 299:
  if (!yytrial)
#line 832 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmNoMangle); }
#line 7712 "asmparse.cpp.tab.c"
break;
case 300:
  if (!yytrial)
#line 833 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCharSetAnsi); }
#line 7718 "asmparse.cpp.tab.c"
break;
case 301:
  if (!yytrial)
#line 834 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCharSetUnicode); }
#line 7724 "asmparse.cpp.tab.c"
break;
case 302:
  if (!yytrial)
#line 835 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCharSetAuto); }
#line 7730 "asmparse.cpp.tab.c"
break;
case 303:
  if (!yytrial)
#line 836 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmSupportsLastError); }
#line 7736 "asmparse.cpp.tab.c"
break;
case 304:
  if (!yytrial)
#line 837 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvWinapi); }
#line 7742 "asmparse.cpp.tab.c"
break;
case 305:
  if (!yytrial)
#line 838 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvCdecl); }
#line 7748 "asmparse.cpp.tab.c"
break;
case 306:
  if (!yytrial)
#line 839 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvStdcall); }
#line 7754 "asmparse.cpp.tab.c"
break;
case 307:
  if (!yytrial)
#line 840 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvThiscall); }
#line 7760 "asmparse.cpp.tab.c"
break;
case 308:
  if (!yytrial)
#line 841 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvFastcall); }
#line 7766 "asmparse.cpp.tab.c"
break;
case 309:
  if (!yytrial)
#line 842 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-3].pinvAttr | pmBestFitEnabled); }
#line 7772 "asmparse.cpp.tab.c"
break;
case 310:
  if (!yytrial)
#line 843 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-3].pinvAttr | pmBestFitDisabled); }
#line 7778 "asmparse.cpp.tab.c"
break;
case 311:
  if (!yytrial)
#line 844 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-3].pinvAttr | pmThrowOnUnmappableCharEnabled); }
#line 7784 "asmparse.cpp.tab.c"
break;
case 312:
  if (!yytrial)
#line 845 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-3].pinvAttr | pmThrowOnUnmappableCharDisabled); }
#line 7790 "asmparse.cpp.tab.c"
break;
case 313:
  if (!yytrial)
#line 846 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].int32); }
#line 7796 "asmparse.cpp.tab.c"
break;
case 314:
  if (!yytrial)
#line 849 "asmparse.y"
{ yyval.string = newString(COR_CTOR_METHOD_NAME); }
#line 7802 "asmparse.cpp.tab.c"
break;
case 315:
  if (!yytrial)
#line 850 "asmparse.y"
{ yyval.string = newString(COR_CCTOR_METHOD_NAME); }
#line 7808 "asmparse.cpp.tab.c"
break;
case 316:
  if (!yytrial)
#line 851 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 7814 "asmparse.cpp.tab.c"
break;
case 317:
  if (!yytrial)
#line 854 "asmparse.y"
{ yyval.int32 = 0; }
#line 7820 "asmparse.cpp.tab.c"
break;
case 318:
  if (!yytrial)
#line 855 "asmparse.y"
{ yyval.int32 = yyvsp[-3].int32 | pdIn; }
#line 7826 "asmparse.cpp.tab.c"
break;
case 319:
  if (!yytrial)
#line 856 "asmparse.y"
{ yyval.int32 = yyvsp[-3].int32 | pdOut; }
#line 7832 "asmparse.cpp.tab.c"
break;
case 320:
  if (!yytrial)
#line 857 "asmparse.y"
{ yyval.int32 = yyvsp[-3].int32 | pdOptional; }
#line 7838 "asmparse.cpp.tab.c"
break;
case 321:
  if (!yytrial)
#line 858 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 + 1; }
#line 7844 "asmparse.cpp.tab.c"
break;
case 322:
  if (!yytrial)
#line 861 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (miIL | miManaged); }
#line 7850 "asmparse.cpp.tab.c"
break;
case 323:
  if (!yytrial)
#line 862 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFF4) | miNative); }
#line 7856 "asmparse.cpp.tab.c"
break;
case 324:
  if (!yytrial)
#line 863 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFF4) | miIL); }
#line 7862 "asmparse.cpp.tab.c"
break;
case 325:
  if (!yytrial)
#line 864 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFF4) | miOPTIL); }
#line 7868 "asmparse.cpp.tab.c"
break;
case 326:
  if (!yytrial)
#line 865 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFFB) | miManaged); }
#line 7874 "asmparse.cpp.tab.c"
break;
case 327:
  if (!yytrial)
#line 866 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFFB) | miUnmanaged); }
#line 7880 "asmparse.cpp.tab.c"
break;
case 328:
  if (!yytrial)
#line 867 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miForwardRef); }
#line 7886 "asmparse.cpp.tab.c"
break;
case 329:
  if (!yytrial)
#line 868 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miPreserveSig); }
#line 7892 "asmparse.cpp.tab.c"
break;
case 330:
  if (!yytrial)
#line 869 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miRuntime); }
#line 7898 "asmparse.cpp.tab.c"
break;
case 331:
  if (!yytrial)
#line 870 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miInternalCall); }
#line 7904 "asmparse.cpp.tab.c"
break;
case 332:
  if (!yytrial)
#line 871 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miSynchronized); }
#line 7910 "asmparse.cpp.tab.c"
break;
case 333:
  if (!yytrial)
#line 872 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miNoInlining); }
#line 7916 "asmparse.cpp.tab.c"
break;
case 334:
  if (!yytrial)
#line 873 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miAggressiveInlining); }
#line 7922 "asmparse.cpp.tab.c"
break;
case 335:
  if (!yytrial)
#line 874 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miNoOptimization); }
#line 7928 "asmparse.cpp.tab.c"
break;
case 336:
  if (!yytrial)
#line 875 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miAggressiveOptimization); }
#line 7934 "asmparse.cpp.tab.c"
break;
case 337:
  if (!yytrial)
#line 876 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].int32); }
#line 7940 "asmparse.cpp.tab.c"
break;
case 338:
  if (!yytrial)
#line 879 "asmparse.y"
{ PASM->delArgNameList(PASM->m_firstArgName); PASM->m_firstArgName = NULL;PASM->m_lastArgName = NULL;
                                                            }
#line 7947 "asmparse.cpp.tab.c"
break;
case 341:
  if (!yytrial)
#line 887 "asmparse.y"
{ PASM->EmitByte(yyvsp[0].int32); }
#line 7953 "asmparse.cpp.tab.c"
break;
case 342:
  if (!yytrial)
#line 888 "asmparse.y"
{ delete PASM->m_SEHD; PASM->m_SEHD = PASM->m_SEHDstack.POP(); }
#line 7959 "asmparse.cpp.tab.c"
break;
case 343:
  if (!yytrial)
#line 889 "asmparse.y"
{ PASM->EmitMaxStack(yyvsp[0].int32); }
#line 7965 "asmparse.cpp.tab.c"
break;
case 344:
  if (!yytrial)
#line 890 "asmparse.y"
{ PASM->EmitLocals(parser->MakeSig(IMAGE_CEE_CS_CALLCONV_LOCAL_SIG, 0, yyvsp[-1].binstr));
                                                            }
#line 7972 "asmparse.cpp.tab.c"
break;
case 345:
  if (!yytrial)
#line 892 "asmparse.y"
{ PASM->EmitZeroInit();
                                                              PASM->EmitLocals(parser->MakeSig(IMAGE_CEE_CS_CALLCONV_LOCAL_SIG, 0, yyvsp[-1].binstr));
                                                            }
#line 7980 "asmparse.cpp.tab.c"
break;
case 346:
  if (!yytrial)
#line 895 "asmparse.y"
{ PASM->EmitEntryPoint(); }
#line 7986 "asmparse.cpp.tab.c"
break;
case 347:
  if (!yytrial)
#line 896 "asmparse.y"
{ PASM->EmitZeroInit(); }
#line 7992 "asmparse.cpp.tab.c"
break;
case 350:
  if (!yytrial)
#line 899 "asmparse.y"
{ PASM->AddLabel(PASM->m_CurPC,yyvsp[-1].string); /*PASM->EmitLabel($1);*/ }
#line 7998 "asmparse.cpp.tab.c"
break;
case 356:
  if (!yytrial)
#line 905 "asmparse.y"
{ if(PASM->m_pCurMethod->m_dwExportOrdinal == 0xFFFFFFFF)
                                                              {
                                                                PASM->m_pCurMethod->m_dwExportOrdinal = yyvsp[-1].int32;
                                                                PASM->m_pCurMethod->m_szExportAlias = NULL;
                                                                if(PASM->m_pCurMethod->m_wVTEntry == 0) PASM->m_pCurMethod->m_wVTEntry = 1;
                                                                if(PASM->m_pCurMethod->m_wVTSlot  == 0) PASM->m_pCurMethod->m_wVTSlot = (WORD)(yyvsp[-1].int32 + 0x8000);
                                                              }
                                                              else
                                                                PASM->report->warn("Duplicate .export directive, ignored\n");
                                                            }
#line 8013 "asmparse.cpp.tab.c"
break;
case 357:
  if (!yytrial)
#line 915 "asmparse.y"
{ if(PASM->m_pCurMethod->m_dwExportOrdinal == 0xFFFFFFFF)
                                                              {
                                                                PASM->m_pCurMethod->m_dwExportOrdinal = yyvsp[-3].int32;
                                                                PASM->m_pCurMethod->m_szExportAlias = yyvsp[0].string;
                                                                if(PASM->m_pCurMethod->m_wVTEntry == 0) PASM->m_pCurMethod->m_wVTEntry = 1;
                                                                if(PASM->m_pCurMethod->m_wVTSlot  == 0) PASM->m_pCurMethod->m_wVTSlot = (WORD)(yyvsp[-3].int32 + 0x8000);
                                                              }
                                                              else
                                                                PASM->report->warn("Duplicate .export directive, ignored\n");
                                                            }
#line 8028 "asmparse.cpp.tab.c"
break;
case 358:
  if (!yytrial)
#line 925 "asmparse.y"
{ PASM->m_pCurMethod->m_wVTEntry = (WORD)yyvsp[-2].int32;
                                                              PASM->m_pCurMethod->m_wVTSlot = (WORD)yyvsp[0].int32; }
#line 8035 "asmparse.cpp.tab.c"
break;
case 359:
  if (!yytrial)
#line 928 "asmparse.y"
{ PASM->AddMethodImpl(yyvsp[-2].token,yyvsp[0].string,NULL,NULL,NULL,NULL); }
#line 8041 "asmparse.cpp.tab.c"
break;
case 360:
  if (!yytrial)
#line 931 "asmparse.y"
{ PASM->AddMethodImpl(yyvsp[-6].token,yyvsp[-4].string,
                                                              (yyvsp[-3].int32==0 ? parser->MakeSig(yyvsp[-8].int32,yyvsp[-7].binstr,yyvsp[-1].binstr) :
                                                              parser->MakeSig(yyvsp[-8].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yyvsp[-7].binstr,yyvsp[-1].binstr,yyvsp[-3].int32))
                                                              ,NULL,NULL,NULL);
                                                              PASM->ResetArgNameList();
                                                            }
#line 8052 "asmparse.cpp.tab.c"
break;
case 362:
  if (!yytrial)
#line 938 "asmparse.y"
{ if((yyvsp[-1].int32 > 0) && (yyvsp[-1].int32 <= (int)PASM->m_pCurMethod->m_NumTyPars))
                                                                PASM->m_pCustomDescrList = PASM->m_pCurMethod->m_TyPars[yyvsp[-1].int32-1].CAList();
                                                              else
                                                                PASM->report->error("Type parameter index out of range\n");
                                                            }
#line 8062 "asmparse.cpp.tab.c"
break;
case 363:
  if (!yytrial)
#line 943 "asmparse.y"
{ int n = PASM->m_pCurMethod->FindTyPar(yyvsp[0].string);
                                                              if(n >= 0)
                                                                PASM->m_pCustomDescrList = PASM->m_pCurMethod->m_TyPars[n].CAList();
                                                              else
                                                                PASM->report->error("Type parameter '%s' undefined\n",yyvsp[0].string);
                                                            }
#line 8073 "asmparse.cpp.tab.c"
break;
case 364:
  if (!yytrial)
#line 949 "asmparse.y"
{ PASM->m_pCurMethod->AddGenericParamConstraint(yyvsp[-3].int32, 0, yyvsp[0].token); }
#line 8079 "asmparse.cpp.tab.c"
break;
case 365:
  if (!yytrial)
#line 950 "asmparse.y"
{ PASM->m_pCurMethod->AddGenericParamConstraint(0, yyvsp[-2].string, yyvsp[0].token); }
#line 8085 "asmparse.cpp.tab.c"
break;
case 366:
  if (!yytrial)
#line 953 "asmparse.y"
{ if( yyvsp[-2].int32 ) {
                                                                ARG_NAME_LIST* pAN=PASM->findArg(PASM->m_pCurMethod->m_firstArgName, yyvsp[-2].int32 - 1);
                                                                if(pAN)
                                                                {
                                                                    PASM->m_pCustomDescrList = &(pAN->CustDList);
                                                                    pAN->pValue = yyvsp[0].binstr;
                                                                }
                                                                else
                                                                {
                                                                    PASM->m_pCustomDescrList = NULL;
                                                                    if(yyvsp[0].binstr) delete yyvsp[0].binstr;
                                                                }
                                                              } else {
                                                                PASM->m_pCustomDescrList = &(PASM->m_pCurMethod->m_RetCustDList);
                                                                PASM->m_pCurMethod->m_pRetValue = yyvsp[0].binstr;
                                                              }
                                                              PASM->m_tkCurrentCVOwner = 0;
                                                            }
#line 8108 "asmparse.cpp.tab.c"
break;
case 367:
  if (!yytrial)
#line 973 "asmparse.y"
{ PASM->m_pCurMethod->CloseScope(); }
#line 8114 "asmparse.cpp.tab.c"
break;
case 368:
  if (!yytrial)
#line 976 "asmparse.y"
{ PASM->m_pCurMethod->OpenScope(); }
#line 8120 "asmparse.cpp.tab.c"
break;
case 372:
  if (!yytrial)
#line 987 "asmparse.y"
{ PASM->m_SEHD->tryTo = PASM->m_CurPC; }
#line 8126 "asmparse.cpp.tab.c"
break;
case 373:
  if (!yytrial)
#line 988 "asmparse.y"
{ PASM->SetTryLabels(yyvsp[-2].string, yyvsp[0].string); }
#line 8132 "asmparse.cpp.tab.c"
break;
case 374:
  if (!yytrial)
#line 989 "asmparse.y"
{ if(PASM->m_SEHD) {PASM->m_SEHD->tryFrom = yyvsp[-2].int32;
                                                              PASM->m_SEHD->tryTo = yyvsp[0].int32;} }
#line 8139 "asmparse.cpp.tab.c"
break;
case 375:
  if (!yytrial)
#line 993 "asmparse.y"
{ PASM->NewSEHDescriptor();
                                                              PASM->m_SEHD->tryFrom = PASM->m_CurPC; }
#line 8146 "asmparse.cpp.tab.c"
break;
case 376:
  if (!yytrial)
#line 998 "asmparse.y"
{ PASM->EmitTry(); }
#line 8152 "asmparse.cpp.tab.c"
break;
case 377:
  if (!yytrial)
#line 999 "asmparse.y"
{ PASM->EmitTry(); }
#line 8158 "asmparse.cpp.tab.c"
break;
case 378:
  if (!yytrial)
#line 1000 "asmparse.y"
{ PASM->EmitTry(); }
#line 8164 "asmparse.cpp.tab.c"
break;
case 379:
  if (!yytrial)
#line 1001 "asmparse.y"
{ PASM->EmitTry(); }
#line 8170 "asmparse.cpp.tab.c"
break;
case 380:
  if (!yytrial)
#line 1005 "asmparse.y"
{ PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8176 "asmparse.cpp.tab.c"
break;
case 381:
  if (!yytrial)
#line 1006 "asmparse.y"
{ PASM->SetFilterLabel(yyvsp[0].string);
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8183 "asmparse.cpp.tab.c"
break;
case 382:
  if (!yytrial)
#line 1008 "asmparse.y"
{ PASM->m_SEHD->sehFilter = yyvsp[0].int32;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8190 "asmparse.cpp.tab.c"
break;
case 383:
  if (!yytrial)
#line 1012 "asmparse.y"
{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FILTER;
                                                               PASM->m_SEHD->sehFilter = PASM->m_CurPC; }
#line 8197 "asmparse.cpp.tab.c"
break;
case 384:
  if (!yytrial)
#line 1016 "asmparse.y"
{  PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_NONE;
                                                               PASM->SetCatchClass(yyvsp[0].token);
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8205 "asmparse.cpp.tab.c"
break;
case 385:
  if (!yytrial)
#line 1021 "asmparse.y"
{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FINALLY;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8212 "asmparse.cpp.tab.c"
break;
case 386:
  if (!yytrial)
#line 1025 "asmparse.y"
{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FAULT;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8219 "asmparse.cpp.tab.c"
break;
case 387:
  if (!yytrial)
#line 1029 "asmparse.y"
{ PASM->m_SEHD->sehHandlerTo = PASM->m_CurPC; }
#line 8225 "asmparse.cpp.tab.c"
break;
case 388:
  if (!yytrial)
#line 1030 "asmparse.y"
{ PASM->SetHandlerLabels(yyvsp[-2].string, yyvsp[0].string); }
#line 8231 "asmparse.cpp.tab.c"
break;
case 389:
  if (!yytrial)
#line 1031 "asmparse.y"
{ PASM->m_SEHD->sehHandler = yyvsp[-2].int32;
                                                               PASM->m_SEHD->sehHandlerTo = yyvsp[0].int32; }
#line 8238 "asmparse.cpp.tab.c"
break;
case 391:
  if (!yytrial)
#line 1039 "asmparse.y"
{ PASM->EmitDataLabel(yyvsp[-1].string); }
#line 8244 "asmparse.cpp.tab.c"
break;
case 393:
  if (!yytrial)
#line 1043 "asmparse.y"
{ PASM->SetDataSection(); }
#line 8250 "asmparse.cpp.tab.c"
break;
case 394:
  if (!yytrial)
#line 1044 "asmparse.y"
{ PASM->SetTLSSection(); }
#line 8256 "asmparse.cpp.tab.c"
break;
case 395:
  if (!yytrial)
#line 1045 "asmparse.y"
{ PASM->SetILSection(); }
#line 8262 "asmparse.cpp.tab.c"
break;
case 400:
  if (!yytrial)
#line 1056 "asmparse.y"
{ yyval.int32 = 1; }
#line 8268 "asmparse.cpp.tab.c"
break;
case 401:
  if (!yytrial)
#line 1057 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32;
                                                               if(yyvsp[-1].int32 <= 0) { PASM->report->error("Illegal item count: %d\n",yyvsp[-1].int32);
                                                                  if(!PASM->OnErrGo) yyval.int32 = 1; }}
#line 8276 "asmparse.cpp.tab.c"
break;
case 402:
  if (!yytrial)
#line 1062 "asmparse.y"
{ PASM->EmitDataString(yyvsp[-1].binstr); }
#line 8282 "asmparse.cpp.tab.c"
break;
case 403:
  if (!yytrial)
#line 1063 "asmparse.y"
{ PASM->EmitDD(yyvsp[-1].string); }
#line 8288 "asmparse.cpp.tab.c"
break;
case 404:
  if (!yytrial)
#line 1064 "asmparse.y"
{ PASM->EmitData(yyvsp[-1].binstr->ptr(),yyvsp[-1].binstr->length()); }
#line 8294 "asmparse.cpp.tab.c"
break;
case 405:
  if (!yytrial)
#line 1066 "asmparse.y"
{ float f = (float) (*yyvsp[-2].float64); float* p = new (nothrow) float[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i < yyvsp[0].int32; i++) p[i] = f;
                                                                 PASM->EmitData(p, sizeof(float)*yyvsp[0].int32); delete yyvsp[-2].float64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(float)*yyvsp[0].int32); }
#line 8305 "asmparse.cpp.tab.c"
break;
case 406:
  if (!yytrial)
#line 1073 "asmparse.y"
{ double* p = new (nothrow) double[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yyvsp[0].int32; i++) p[i] = *(yyvsp[-2].float64);
                                                                 PASM->EmitData(p, sizeof(double)*yyvsp[0].int32); delete yyvsp[-2].float64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(double)*yyvsp[0].int32); }
#line 8316 "asmparse.cpp.tab.c"
break;
case 407:
  if (!yytrial)
#line 1080 "asmparse.y"
{ __int64* p = new (nothrow) __int64[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yyvsp[0].int32; i++) p[i] = *(yyvsp[-2].int64);
                                                                 PASM->EmitData(p, sizeof(__int64)*yyvsp[0].int32); delete yyvsp[-2].int64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int64)*yyvsp[0].int32); }
#line 8327 "asmparse.cpp.tab.c"
break;
case 408:
  if (!yytrial)
#line 1087 "asmparse.y"
{ __int32* p = new (nothrow) __int32[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yyvsp[0].int32; i++) p[i] = yyvsp[-2].int32;
                                                                 PASM->EmitData(p, sizeof(__int32)*yyvsp[0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int32)*yyvsp[0].int32); }
#line 8338 "asmparse.cpp.tab.c"
break;
case 409:
  if (!yytrial)
#line 1094 "asmparse.y"
{ __int16 i = (__int16) yyvsp[-2].int32; FAIL_UNLESS(i == yyvsp[-2].int32, ("Value %d too big\n", yyvsp[-2].int32));
                                                               __int16* p = new (nothrow) __int16[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int j=0; j<yyvsp[0].int32; j++) p[j] = i;
                                                                 PASM->EmitData(p, sizeof(__int16)*yyvsp[0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int16)*yyvsp[0].int32); }
#line 8350 "asmparse.cpp.tab.c"
break;
case 410:
  if (!yytrial)
#line 1102 "asmparse.y"
{ __int8 i = (__int8) yyvsp[-2].int32; FAIL_UNLESS(i == yyvsp[-2].int32, ("Value %d too big\n", yyvsp[-2].int32));
                                                               __int8* p = new (nothrow) __int8[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int j=0; j<yyvsp[0].int32; j++) p[j] = i;
                                                                 PASM->EmitData(p, sizeof(__int8)*yyvsp[0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int8)*yyvsp[0].int32); }
#line 8362 "asmparse.cpp.tab.c"
break;
case 411:
  if (!yytrial)
#line 1109 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(float)*yyvsp[0].int32); }
#line 8368 "asmparse.cpp.tab.c"
break;
case 412:
  if (!yytrial)
#line 1110 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(double)*yyvsp[0].int32); }
#line 8374 "asmparse.cpp.tab.c"
break;
case 413:
  if (!yytrial)
#line 1111 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int64)*yyvsp[0].int32); }
#line 8380 "asmparse.cpp.tab.c"
break;
case 414:
  if (!yytrial)
#line 1112 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int32)*yyvsp[0].int32); }
#line 8386 "asmparse.cpp.tab.c"
break;
case 415:
  if (!yytrial)
#line 1113 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int16)*yyvsp[0].int32); }
#line 8392 "asmparse.cpp.tab.c"
break;
case 416:
  if (!yytrial)
#line 1114 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int8)*yyvsp[0].int32); }
#line 8398 "asmparse.cpp.tab.c"
break;
case 417:
  if (!yytrial)
#line 1118 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               float f = (float)(*yyvsp[-1].float64);
                                                               yyval.binstr->appendInt32(*((__int32*)&f)); delete yyvsp[-1].float64; }
#line 8406 "asmparse.cpp.tab.c"
break;
case 418:
  if (!yytrial)
#line 1121 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].float64); delete yyvsp[-1].float64; }
#line 8413 "asmparse.cpp.tab.c"
break;
case 419:
  if (!yytrial)
#line 1123 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 8420 "asmparse.cpp.tab.c"
break;
case 420:
  if (!yytrial)
#line 1125 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 8427 "asmparse.cpp.tab.c"
break;
case 421:
  if (!yytrial)
#line 1127 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 8434 "asmparse.cpp.tab.c"
break;
case 422:
  if (!yytrial)
#line 1129 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 8441 "asmparse.cpp.tab.c"
break;
case 423:
  if (!yytrial)
#line 1131 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I2);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 8448 "asmparse.cpp.tab.c"
break;
case 424:
  if (!yytrial)
#line 1133 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I1);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32); }
#line 8455 "asmparse.cpp.tab.c"
break;
case 425:
  if (!yytrial)
#line 1135 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 8462 "asmparse.cpp.tab.c"
break;
case 426:
  if (!yytrial)
#line 1137 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 8469 "asmparse.cpp.tab.c"
break;
case 427:
  if (!yytrial)
#line 1139 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 8476 "asmparse.cpp.tab.c"
break;
case 428:
  if (!yytrial)
#line 1141 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32); }
#line 8483 "asmparse.cpp.tab.c"
break;
case 429:
  if (!yytrial)
#line 1143 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 8490 "asmparse.cpp.tab.c"
break;
case 430:
  if (!yytrial)
#line 1145 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 8497 "asmparse.cpp.tab.c"
break;
case 431:
  if (!yytrial)
#line 1147 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 8504 "asmparse.cpp.tab.c"
break;
case 432:
  if (!yytrial)
#line 1149 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32); }
#line 8511 "asmparse.cpp.tab.c"
break;
case 433:
  if (!yytrial)
#line 1151 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CHAR);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 8518 "asmparse.cpp.tab.c"
break;
case 434:
  if (!yytrial)
#line 1153 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_BOOLEAN);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32);}
#line 8525 "asmparse.cpp.tab.c"
break;
case 435:
  if (!yytrial)
#line 1155 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING);
                                                               yyval.binstr->append(yyvsp[-1].binstr); delete yyvsp[-1].binstr;}
#line 8532 "asmparse.cpp.tab.c"
break;
case 436:
  if (!yytrial)
#line 1159 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 8538 "asmparse.cpp.tab.c"
break;
case 437:
  if (!yytrial)
#line 1162 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8544 "asmparse.cpp.tab.c"
break;
case 438:
  if (!yytrial)
#line 1163 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 8550 "asmparse.cpp.tab.c"
break;
case 439:
  if (!yytrial)
#line 1166 "asmparse.y"
{ __int8 i = (__int8) yyvsp[0].int32; yyval.binstr = new BinStr(); yyval.binstr->appendInt8(i); }
#line 8556 "asmparse.cpp.tab.c"
break;
case 440:
  if (!yytrial)
#line 1167 "asmparse.y"
{ __int8 i = (__int8) yyvsp[0].int32; yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt8(i); }
#line 8562 "asmparse.cpp.tab.c"
break;
case 441:
  if (!yytrial)
#line 1171 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 8568 "asmparse.cpp.tab.c"
break;
case 442:
  if (!yytrial)
#line 1172 "asmparse.y"
{ yyval.binstr = BinStrToUnicode(yyvsp[0].binstr,true); yyval.binstr->insertInt8(ELEMENT_TYPE_STRING);}
#line 8574 "asmparse.cpp.tab.c"
break;
case 443:
  if (!yytrial)
#line 1173 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CLASS);
                                                               yyval.binstr->appendInt32(0); }
#line 8581 "asmparse.cpp.tab.c"
break;
case 444:
  if (!yytrial)
#line 1178 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 8587 "asmparse.cpp.tab.c"
break;
case 445:
  if (!yytrial)
#line 1179 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); yyval.binstr->appendInt8(0xFF); }
#line 8593 "asmparse.cpp.tab.c"
break;
case 446:
  if (!yytrial)
#line 1180 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING);
                                                               AppendStringWithLength(yyval.binstr,yyvsp[-1].string); delete [] yyvsp[-1].string;}
#line 8600 "asmparse.cpp.tab.c"
break;
case 447:
  if (!yytrial)
#line 1182 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE);
                                                               AppendStringWithLength(yyval.binstr,yyvsp[-1].string); delete [] yyvsp[-1].string;}
#line 8607 "asmparse.cpp.tab.c"
break;
case 448:
  if (!yytrial)
#line 1184 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE);
                                                               AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yyvsp[-1].token));}
#line 8614 "asmparse.cpp.tab.c"
break;
case 449:
  if (!yytrial)
#line 1186 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE); yyval.binstr->appendInt8(0xFF); }
#line 8620 "asmparse.cpp.tab.c"
break;
case 450:
  if (!yytrial)
#line 1187 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(SERIALIZATION_TYPE_TAGGED_OBJECT);}
#line 8626 "asmparse.cpp.tab.c"
break;
case 451:
  if (!yytrial)
#line 1189 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_R4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8634 "asmparse.cpp.tab.c"
break;
case 452:
  if (!yytrial)
#line 1193 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8642 "asmparse.cpp.tab.c"
break;
case 453:
  if (!yytrial)
#line 1197 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8650 "asmparse.cpp.tab.c"
break;
case 454:
  if (!yytrial)
#line 1201 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8658 "asmparse.cpp.tab.c"
break;
case 455:
  if (!yytrial)
#line 1205 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8666 "asmparse.cpp.tab.c"
break;
case 456:
  if (!yytrial)
#line 1209 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8674 "asmparse.cpp.tab.c"
break;
case 457:
  if (!yytrial)
#line 1213 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8682 "asmparse.cpp.tab.c"
break;
case 458:
  if (!yytrial)
#line 1217 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8690 "asmparse.cpp.tab.c"
break;
case 459:
  if (!yytrial)
#line 1221 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8698 "asmparse.cpp.tab.c"
break;
case 460:
  if (!yytrial)
#line 1225 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8706 "asmparse.cpp.tab.c"
break;
case 461:
  if (!yytrial)
#line 1229 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8714 "asmparse.cpp.tab.c"
break;
case 462:
  if (!yytrial)
#line 1233 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8722 "asmparse.cpp.tab.c"
break;
case 463:
  if (!yytrial)
#line 1237 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8730 "asmparse.cpp.tab.c"
break;
case 464:
  if (!yytrial)
#line 1241 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8738 "asmparse.cpp.tab.c"
break;
case 465:
  if (!yytrial)
#line 1245 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_CHAR);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8746 "asmparse.cpp.tab.c"
break;
case 466:
  if (!yytrial)
#line 1249 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_BOOLEAN);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8754 "asmparse.cpp.tab.c"
break;
case 467:
  if (!yytrial)
#line 1253 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_STRING);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8762 "asmparse.cpp.tab.c"
break;
case 468:
  if (!yytrial)
#line 1257 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(SERIALIZATION_TYPE_TYPE);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8770 "asmparse.cpp.tab.c"
break;
case 469:
  if (!yytrial)
#line 1261 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(SERIALIZATION_TYPE_TAGGED_OBJECT);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 8778 "asmparse.cpp.tab.c"
break;
case 470:
  if (!yytrial)
#line 1267 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8784 "asmparse.cpp.tab.c"
break;
case 471:
  if (!yytrial)
#line 1268 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               float f = (float) (*yyvsp[0].float64); yyval.binstr->appendInt32(*((__int32*)&f)); delete yyvsp[0].float64; }
#line 8791 "asmparse.cpp.tab.c"
break;
case 472:
  if (!yytrial)
#line 1270 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt32(yyvsp[0].int32); }
#line 8798 "asmparse.cpp.tab.c"
break;
case 473:
  if (!yytrial)
#line 1274 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8804 "asmparse.cpp.tab.c"
break;
case 474:
  if (!yytrial)
#line 1275 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[0].float64); delete yyvsp[0].float64; }
#line 8811 "asmparse.cpp.tab.c"
break;
case 475:
  if (!yytrial)
#line 1277 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[0].int64); delete yyvsp[0].int64; }
#line 8818 "asmparse.cpp.tab.c"
break;
case 476:
  if (!yytrial)
#line 1281 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8824 "asmparse.cpp.tab.c"
break;
case 477:
  if (!yytrial)
#line 1282 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[0].int64); delete yyvsp[0].int64; }
#line 8831 "asmparse.cpp.tab.c"
break;
case 478:
  if (!yytrial)
#line 1286 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8837 "asmparse.cpp.tab.c"
break;
case 479:
  if (!yytrial)
#line 1287 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt32(yyvsp[0].int32);}
#line 8843 "asmparse.cpp.tab.c"
break;
case 480:
  if (!yytrial)
#line 1290 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8849 "asmparse.cpp.tab.c"
break;
case 481:
  if (!yytrial)
#line 1291 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt16(yyvsp[0].int32);}
#line 8855 "asmparse.cpp.tab.c"
break;
case 482:
  if (!yytrial)
#line 1294 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8861 "asmparse.cpp.tab.c"
break;
case 483:
  if (!yytrial)
#line 1295 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt8(yyvsp[0].int32); }
#line 8867 "asmparse.cpp.tab.c"
break;
case 484:
  if (!yytrial)
#line 1298 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8873 "asmparse.cpp.tab.c"
break;
case 485:
  if (!yytrial)
#line 1299 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt8(yyvsp[0].int32);}
#line 8880 "asmparse.cpp.tab.c"
break;
case 486:
  if (!yytrial)
#line 1303 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8886 "asmparse.cpp.tab.c"
break;
case 487:
  if (!yytrial)
#line 1304 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt8(0xFF); }
#line 8892 "asmparse.cpp.tab.c"
break;
case 488:
  if (!yytrial)
#line 1305 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               AppendStringWithLength(yyval.binstr,yyvsp[0].string); delete [] yyvsp[0].string;}
#line 8899 "asmparse.cpp.tab.c"
break;
case 489:
  if (!yytrial)
#line 1309 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8905 "asmparse.cpp.tab.c"
break;
case 490:
  if (!yytrial)
#line 1310 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt8(0xFF); }
#line 8911 "asmparse.cpp.tab.c"
break;
case 491:
  if (!yytrial)
#line 1311 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr;
                                                               AppendStringWithLength(yyval.binstr,yyvsp[0].string); delete [] yyvsp[0].string;}
#line 8918 "asmparse.cpp.tab.c"
break;
case 492:
  if (!yytrial)
#line 1313 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yyvsp[0].token));}
#line 8925 "asmparse.cpp.tab.c"
break;
case 493:
  if (!yytrial)
#line 1317 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8931 "asmparse.cpp.tab.c"
break;
case 494:
  if (!yytrial)
#line 1318 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 8937 "asmparse.cpp.tab.c"
break;
case 495:
  if (!yytrial)
#line 1322 "asmparse.y"
{ parser->m_ANSFirst.PUSH(PASM->m_firstArgName);
                                                               parser->m_ANSLast.PUSH(PASM->m_lastArgName);
                                                               PASM->m_firstArgName = NULL;
                                                               PASM->m_lastArgName = NULL; }
#line 8946 "asmparse.cpp.tab.c"
break;
case 496:
  if (!yytrial)
#line 1328 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 8952 "asmparse.cpp.tab.c"
break;
case 497:
  if (!yytrial)
#line 1331 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 8958 "asmparse.cpp.tab.c"
break;
case 498:
  if (!yytrial)
#line 1334 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 8964 "asmparse.cpp.tab.c"
break;
case 499:
  if (!yytrial)
#line 1337 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 8970 "asmparse.cpp.tab.c"
break;
case 500:
  if (!yytrial)
#line 1340 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 8976 "asmparse.cpp.tab.c"
break;
case 501:
  if (!yytrial)
#line 1343 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 8982 "asmparse.cpp.tab.c"
break;
case 502:
  if (!yytrial)
#line 1346 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode);
                                                               if((!PASM->OnErrGo)&&
                                                               ((yyvsp[0].opcode == CEE_NEWOBJ)||
                                                                (yyvsp[0].opcode == CEE_CALLVIRT)))
                                                                  iCallConv = IMAGE_CEE_CS_CALLCONV_HASTHIS;
                                                             }
#line 8993 "asmparse.cpp.tab.c"
break;
case 503:
  if (!yytrial)
#line 1354 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 8999 "asmparse.cpp.tab.c"
break;
case 504:
  if (!yytrial)
#line 1357 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9005 "asmparse.cpp.tab.c"
break;
case 505:
  if (!yytrial)
#line 1360 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9011 "asmparse.cpp.tab.c"
break;
case 506:
  if (!yytrial)
#line 1363 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9017 "asmparse.cpp.tab.c"
break;
case 507:
  if (!yytrial)
#line 1366 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); iOpcodeLen = PASM->OpcodeLen(yyval.instr); }
#line 9023 "asmparse.cpp.tab.c"
break;
case 508:
  if (!yytrial)
#line 1369 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9029 "asmparse.cpp.tab.c"
break;
case 509:
  if (!yytrial)
#line 1372 "asmparse.y"
{ yyval.instr = yyvsp[-1].instr; bParsingByteArray = TRUE; }
#line 9035 "asmparse.cpp.tab.c"
break;
case 510:
  if (!yytrial)
#line 1376 "asmparse.y"
{ PASM->EmitOpcode(yyvsp[0].instr); }
#line 9041 "asmparse.cpp.tab.c"
break;
case 511:
  if (!yytrial)
#line 1377 "asmparse.y"
{ PASM->EmitInstrVar(yyvsp[-1].instr, yyvsp[0].int32); }
#line 9047 "asmparse.cpp.tab.c"
break;
case 512:
  if (!yytrial)
#line 1378 "asmparse.y"
{ PASM->EmitInstrVarByName(yyvsp[-1].instr, yyvsp[0].string); }
#line 9053 "asmparse.cpp.tab.c"
break;
case 513:
  if (!yytrial)
#line 1379 "asmparse.y"
{ PASM->EmitInstrI(yyvsp[-1].instr, yyvsp[0].int32); }
#line 9059 "asmparse.cpp.tab.c"
break;
case 514:
  if (!yytrial)
#line 1380 "asmparse.y"
{ PASM->EmitInstrI8(yyvsp[-1].instr, yyvsp[0].int64); }
#line 9065 "asmparse.cpp.tab.c"
break;
case 515:
  if (!yytrial)
#line 1381 "asmparse.y"
{ PASM->EmitInstrR(yyvsp[-1].instr, yyvsp[0].float64); delete (yyvsp[0].float64);}
#line 9071 "asmparse.cpp.tab.c"
break;
case 516:
  if (!yytrial)
#line 1382 "asmparse.y"
{ double f = (double) (*yyvsp[0].int64); PASM->EmitInstrR(yyvsp[-1].instr, &f); }
#line 9077 "asmparse.cpp.tab.c"
break;
case 517:
  if (!yytrial)
#line 1383 "asmparse.y"
{ unsigned L = yyvsp[-1].binstr->length();
                                                               FAIL_UNLESS(L >= sizeof(float), ("%d hexbytes, must be at least %d\n",
                                                                           L,sizeof(float)));
                                                               if(L < sizeof(float)) {YYERROR; }
                                                               else {
                                                                   double f = (L >= sizeof(double)) ? *((double *)(yyvsp[-1].binstr->ptr()))
                                                                                    : (double)(*(float *)(yyvsp[-1].binstr->ptr()));
                                                                   PASM->EmitInstrR(yyvsp[-2].instr,&f); }
                                                               delete yyvsp[-1].binstr; }
#line 9091 "asmparse.cpp.tab.c"
break;
case 518:
  if (!yytrial)
#line 1392 "asmparse.y"
{ PASM->EmitInstrBrOffset(yyvsp[-1].instr, yyvsp[0].int32); }
#line 9097 "asmparse.cpp.tab.c"
break;
case 519:
  if (!yytrial)
#line 1393 "asmparse.y"
{ PASM->EmitInstrBrTarget(yyvsp[-1].instr, yyvsp[0].string); }
#line 9103 "asmparse.cpp.tab.c"
break;
case 520:
  if (!yytrial)
#line 1395 "asmparse.y"
{ PASM->SetMemberRefFixup(yyvsp[0].token,PASM->OpcodeLen(yyvsp[-1].instr));
                                                               PASM->EmitInstrI(yyvsp[-1].instr,yyvsp[0].token);
                                                               PASM->m_tkCurrentCVOwner = yyvsp[0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                               iCallConv = 0;
                                                             }
#line 9114 "asmparse.cpp.tab.c"
break;
case 521:
  if (!yytrial)
#line 1402 "asmparse.y"
{ yyvsp[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               mdToken mr = PASM->MakeMemberRef(yyvsp[-2].token, yyvsp[0].string, yyvsp[-3].binstr);
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-4].instr));
                                                               PASM->EmitInstrI(yyvsp[-4].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9126 "asmparse.cpp.tab.c"
break;
case 522:
  if (!yytrial)
#line 1410 "asmparse.y"
{ yyvsp[-1].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               mdToken mr = PASM->MakeMemberRef(mdTokenNil, yyvsp[0].string, yyvsp[-1].binstr);
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-2].instr));
                                                               PASM->EmitInstrI(yyvsp[-2].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9138 "asmparse.cpp.tab.c"
break;
case 523:
  if (!yytrial)
#line 1417 "asmparse.y"
{ mdToken mr = yyvsp[0].token;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-1].instr));
                                                               PASM->EmitInstrI(yyvsp[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9149 "asmparse.cpp.tab.c"
break;
case 524:
  if (!yytrial)
#line 1423 "asmparse.y"
{ mdToken mr = yyvsp[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-1].instr));
                                                               PASM->EmitInstrI(yyvsp[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9160 "asmparse.cpp.tab.c"
break;
case 525:
  if (!yytrial)
#line 1429 "asmparse.y"
{ mdToken mr = yyvsp[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-1].instr));
                                                               PASM->EmitInstrI(yyvsp[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9171 "asmparse.cpp.tab.c"
break;
case 526:
  if (!yytrial)
#line 1435 "asmparse.y"
{ PASM->EmitInstrI(yyvsp[-1].instr, yyvsp[0].token);
                                                               PASM->m_tkCurrentCVOwner = yyvsp[0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9180 "asmparse.cpp.tab.c"
break;
case 527:
  if (!yytrial)
#line 1439 "asmparse.y"
{ PASM->EmitInstrStringLiteral(yyvsp[-1].instr, yyvsp[0].binstr,TRUE); }
#line 9186 "asmparse.cpp.tab.c"
break;
case 528:
  if (!yytrial)
#line 1441 "asmparse.y"
{ PASM->EmitInstrStringLiteral(yyvsp[-4].instr, yyvsp[-1].binstr,FALSE); }
#line 9192 "asmparse.cpp.tab.c"
break;
case 529:
  if (!yytrial)
#line 1443 "asmparse.y"
{ PASM->EmitInstrStringLiteral(yyvsp[-3].instr, yyvsp[-1].binstr,FALSE,TRUE); }
#line 9198 "asmparse.cpp.tab.c"
break;
case 530:
  if (!yytrial)
#line 1445 "asmparse.y"
{ PASM->EmitInstrSig(yyvsp[-5].instr, parser->MakeSig(yyvsp[-4].int32, yyvsp[-3].binstr, yyvsp[-1].binstr));
                                                               PASM->ResetArgNameList();
                                                             }
#line 9206 "asmparse.cpp.tab.c"
break;
case 531:
  if (!yytrial)
#line 1449 "asmparse.y"
{ PASM->EmitInstrI(yyvsp[-1].instr,yyvsp[0].token);
                                                               PASM->m_tkCurrentCVOwner = yyvsp[0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                               iOpcodeLen = 0;
                                                             }
#line 9216 "asmparse.cpp.tab.c"
break;
case 532:
  if (!yytrial)
#line 1454 "asmparse.y"
{ PASM->EmitInstrSwitch(yyvsp[-3].instr, yyvsp[-1].labels); }
#line 9222 "asmparse.cpp.tab.c"
break;
case 533:
  if (!yytrial)
#line 1457 "asmparse.y"
{ yyval.labels = 0; }
#line 9228 "asmparse.cpp.tab.c"
break;
case 534:
  if (!yytrial)
#line 1458 "asmparse.y"
{ yyval.labels = new Labels(yyvsp[-2].string, yyvsp[0].labels, TRUE); }
#line 9234 "asmparse.cpp.tab.c"
break;
case 535:
  if (!yytrial)
#line 1459 "asmparse.y"
{ yyval.labels = new Labels((char *)(UINT_PTR)yyvsp[-2].int32, yyvsp[0].labels, FALSE); }
#line 9240 "asmparse.cpp.tab.c"
break;
case 536:
  if (!yytrial)
#line 1460 "asmparse.y"
{ yyval.labels = new Labels(yyvsp[0].string, NULL, TRUE); }
#line 9246 "asmparse.cpp.tab.c"
break;
case 537:
  if (!yytrial)
#line 1461 "asmparse.y"
{ yyval.labels = new Labels((char *)(UINT_PTR)yyvsp[0].int32, NULL, FALSE); }
#line 9252 "asmparse.cpp.tab.c"
break;
case 538:
  if (!yytrial)
#line 1465 "asmparse.y"
{ yyval.binstr = NULL; }
#line 9258 "asmparse.cpp.tab.c"
break;
case 539:
  if (!yytrial)
#line 1466 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 9264 "asmparse.cpp.tab.c"
break;
case 540:
  if (!yytrial)
#line 1469 "asmparse.y"
{ yyval.binstr = NULL; }
#line 9270 "asmparse.cpp.tab.c"
break;
case 541:
  if (!yytrial)
#line 1470 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 9276 "asmparse.cpp.tab.c"
break;
case 542:
  if (!yytrial)
#line 1473 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 9282 "asmparse.cpp.tab.c"
break;
case 543:
  if (!yytrial)
#line 1474 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 9288 "asmparse.cpp.tab.c"
break;
case 544:
  if (!yytrial)
#line 1478 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9294 "asmparse.cpp.tab.c"
break;
case 545:
  if (!yytrial)
#line 1479 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr;}
#line 9300 "asmparse.cpp.tab.c"
break;
case 546:
  if (!yytrial)
#line 1482 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 9306 "asmparse.cpp.tab.c"
break;
case 547:
  if (!yytrial)
#line 1483 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 9312 "asmparse.cpp.tab.c"
break;
case 548:
  if (!yytrial)
#line 1486 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_SENTINEL); }
#line 9318 "asmparse.cpp.tab.c"
break;
case 549:
  if (!yytrial)
#line 1487 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yyvsp[-1].binstr); PASM->addArgName(NULL, yyvsp[-1].binstr, yyvsp[0].binstr, yyvsp[-2].int32); }
#line 9324 "asmparse.cpp.tab.c"
break;
case 550:
  if (!yytrial)
#line 1488 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yyvsp[-2].binstr); PASM->addArgName(yyvsp[0].string, yyvsp[-2].binstr, yyvsp[-1].binstr, yyvsp[-3].int32);}
#line 9330 "asmparse.cpp.tab.c"
break;
case 551:
  if (!yytrial)
#line 1492 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(PASM->GetAsmRef(yyvsp[-2].string), yyvsp[0].string, NULL); delete[] yyvsp[-2].string;}
#line 9336 "asmparse.cpp.tab.c"
break;
case 552:
  if (!yytrial)
#line 1493 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(yyvsp[-2].token, yyvsp[0].string, NULL); }
#line 9342 "asmparse.cpp.tab.c"
break;
case 553:
  if (!yytrial)
#line 1494 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(mdTokenNil, yyvsp[0].string, NULL); }
#line 9348 "asmparse.cpp.tab.c"
break;
case 554:
  if (!yytrial)
#line 1495 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(PASM->GetModRef(yyvsp[-2].string),yyvsp[0].string, NULL); delete[] yyvsp[-2].string;}
#line 9354 "asmparse.cpp.tab.c"
break;
case 555:
  if (!yytrial)
#line 1496 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(1,yyvsp[0].string,NULL); }
#line 9360 "asmparse.cpp.tab.c"
break;
case 556:
  if (!yytrial)
#line 1497 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 9366 "asmparse.cpp.tab.c"
break;
case 557:
  if (!yytrial)
#line 1498 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec; }
#line 9372 "asmparse.cpp.tab.c"
break;
case 558:
  if (!yytrial)
#line 1499 "asmparse.y"
{ if(PASM->m_pCurClass != NULL) yyval.token = PASM->m_pCurClass->m_cl;
                                                                else { yyval.token = 0; PASM->report->error(".this outside class scope\n"); }
                                                              }
#line 9380 "asmparse.cpp.tab.c"
break;
case 559:
  if (!yytrial)
#line 1502 "asmparse.y"
{ if(PASM->m_pCurClass != NULL) {
                                                                  yyval.token = PASM->m_pCurClass->m_crExtends;
                                                                  if(RidFromToken(yyval.token) == 0)
                                                                    PASM->report->error(".base undefined\n");
                                                                } else { yyval.token = 0; PASM->report->error(".base outside class scope\n"); }
                                                              }
#line 9391 "asmparse.cpp.tab.c"
break;
case 560:
  if (!yytrial)
#line 1508 "asmparse.y"
{ if(PASM->m_pCurClass != NULL) {
                                                                  if(PASM->m_pCurClass->m_pEncloser != NULL) yyval.token = PASM->m_pCurClass->m_pEncloser->m_cl;
                                                                  else { yyval.token = 0; PASM->report->error(".nester undefined\n"); }
                                                                } else { yyval.token = 0; PASM->report->error(".nester outside class scope\n"); }
                                                              }
#line 9401 "asmparse.cpp.tab.c"
break;
case 561:
  if (!yytrial)
#line 1515 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 9407 "asmparse.cpp.tab.c"
break;
case 562:
  if (!yytrial)
#line 1516 "asmparse.y"
{ yyval.string = newStringWDel(yyvsp[-2].string, NESTING_SEP, yyvsp[0].string); }
#line 9413 "asmparse.cpp.tab.c"
break;
case 563:
  if (!yytrial)
#line 1519 "asmparse.y"
{ yyval.token = yyvsp[0].token;}
#line 9419 "asmparse.cpp.tab.c"
break;
case 564:
  if (!yytrial)
#line 1520 "asmparse.y"
{ yyval.token = PASM->GetAsmRef(yyvsp[-1].string); delete[] yyvsp[-1].string;}
#line 9425 "asmparse.cpp.tab.c"
break;
case 565:
  if (!yytrial)
#line 1521 "asmparse.y"
{ yyval.token = PASM->GetModRef(yyvsp[-1].string); delete[] yyvsp[-1].string;}
#line 9431 "asmparse.cpp.tab.c"
break;
case 566:
  if (!yytrial)
#line 1522 "asmparse.y"
{ yyval.token = PASM->ResolveTypeSpec(yyvsp[0].binstr); }
#line 9437 "asmparse.cpp.tab.c"
break;
case 567:
  if (!yytrial)
#line 1526 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9443 "asmparse.cpp.tab.c"
break;
case 568:
  if (!yytrial)
#line 1528 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CUSTOMMARSHALER);
                                                                corEmitInt(yyval.binstr,yyvsp[-7].binstr->length()); yyval.binstr->append(yyvsp[-7].binstr);
                                                                corEmitInt(yyval.binstr,yyvsp[-5].binstr->length()); yyval.binstr->append(yyvsp[-5].binstr);
                                                                corEmitInt(yyval.binstr,yyvsp[-3].binstr->length()); yyval.binstr->append(yyvsp[-3].binstr);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].binstr->length()); yyval.binstr->append(yyvsp[-1].binstr);
                                                                PASM->report->warn("Deprecated 4-string form of custom marshaler, first two strings ignored\n");}
#line 9454 "asmparse.cpp.tab.c"
break;
case 569:
  if (!yytrial)
#line 1535 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CUSTOMMARSHALER);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,yyvsp[-3].binstr->length()); yyval.binstr->append(yyvsp[-3].binstr);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].binstr->length()); yyval.binstr->append(yyvsp[-1].binstr); }
#line 9464 "asmparse.cpp.tab.c"
break;
case 570:
  if (!yytrial)
#line 1540 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FIXEDSYSSTRING);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].int32); }
#line 9471 "asmparse.cpp.tab.c"
break;
case 571:
  if (!yytrial)
#line 1543 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FIXEDARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[-2].int32); yyval.binstr->append(yyvsp[0].binstr); }
#line 9478 "asmparse.cpp.tab.c"
break;
case 572:
  if (!yytrial)
#line 1545 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VARIANT);
                                                                PASM->report->warn("Deprecated native type 'variant'\n"); }
#line 9485 "asmparse.cpp.tab.c"
break;
case 573:
  if (!yytrial)
#line 1547 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CURRENCY); }
#line 9491 "asmparse.cpp.tab.c"
break;
case 574:
  if (!yytrial)
#line 1548 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SYSCHAR);
                                                                PASM->report->warn("Deprecated native type 'syschar'\n"); }
#line 9498 "asmparse.cpp.tab.c"
break;
case 575:
  if (!yytrial)
#line 1550 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VOID);
                                                                PASM->report->warn("Deprecated native type 'void'\n"); }
#line 9505 "asmparse.cpp.tab.c"
break;
case 576:
  if (!yytrial)
#line 1552 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BOOLEAN); }
#line 9511 "asmparse.cpp.tab.c"
break;
case 577:
  if (!yytrial)
#line 1553 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I1); }
#line 9517 "asmparse.cpp.tab.c"
break;
case 578:
  if (!yytrial)
#line 1554 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I2); }
#line 9523 "asmparse.cpp.tab.c"
break;
case 579:
  if (!yytrial)
#line 1555 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I4); }
#line 9529 "asmparse.cpp.tab.c"
break;
case 580:
  if (!yytrial)
#line 1556 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I8); }
#line 9535 "asmparse.cpp.tab.c"
break;
case 581:
  if (!yytrial)
#line 1557 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_R4); }
#line 9541 "asmparse.cpp.tab.c"
break;
case 582:
  if (!yytrial)
#line 1558 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_R8); }
#line 9547 "asmparse.cpp.tab.c"
break;
case 583:
  if (!yytrial)
#line 1559 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ERROR); }
#line 9553 "asmparse.cpp.tab.c"
break;
case 584:
  if (!yytrial)
#line 1560 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U1); }
#line 9559 "asmparse.cpp.tab.c"
break;
case 585:
  if (!yytrial)
#line 1561 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U2); }
#line 9565 "asmparse.cpp.tab.c"
break;
case 586:
  if (!yytrial)
#line 1562 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U4); }
#line 9571 "asmparse.cpp.tab.c"
break;
case 587:
  if (!yytrial)
#line 1563 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U8); }
#line 9577 "asmparse.cpp.tab.c"
break;
case 588:
  if (!yytrial)
#line 1564 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U1); }
#line 9583 "asmparse.cpp.tab.c"
break;
case 589:
  if (!yytrial)
#line 1565 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U2); }
#line 9589 "asmparse.cpp.tab.c"
break;
case 590:
  if (!yytrial)
#line 1566 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U4); }
#line 9595 "asmparse.cpp.tab.c"
break;
case 591:
  if (!yytrial)
#line 1567 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U8); }
#line 9601 "asmparse.cpp.tab.c"
break;
case 592:
  if (!yytrial)
#line 1568 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(NATIVE_TYPE_PTR);
                                                                PASM->report->warn("Deprecated native type '*'\n"); }
#line 9608 "asmparse.cpp.tab.c"
break;
case 593:
  if (!yytrial)
#line 1570 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY); }
#line 9615 "asmparse.cpp.tab.c"
break;
case 594:
  if (!yytrial)
#line 1572 "asmparse.y"
{ yyval.binstr = yyvsp[-3].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].int32);
                                                                corEmitInt(yyval.binstr,0); }
#line 9625 "asmparse.cpp.tab.c"
break;
case 595:
  if (!yytrial)
#line 1577 "asmparse.y"
{ yyval.binstr = yyvsp[-5].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].int32);
                                                                corEmitInt(yyval.binstr,yyvsp[-3].int32);
                                                                corEmitInt(yyval.binstr,ntaSizeParamIndexSpecified); }
#line 9635 "asmparse.cpp.tab.c"
break;
case 596:
  if (!yytrial)
#line 1582 "asmparse.y"
{ yyval.binstr = yyvsp[-4].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].int32); }
#line 9643 "asmparse.cpp.tab.c"
break;
case 597:
  if (!yytrial)
#line 1585 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_DECIMAL);
                                                                PASM->report->warn("Deprecated native type 'decimal'\n"); }
#line 9650 "asmparse.cpp.tab.c"
break;
case 598:
  if (!yytrial)
#line 1587 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_DATE);
                                                                PASM->report->warn("Deprecated native type 'date'\n"); }
#line 9657 "asmparse.cpp.tab.c"
break;
case 599:
  if (!yytrial)
#line 1589 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BSTR); }
#line 9663 "asmparse.cpp.tab.c"
break;
case 600:
  if (!yytrial)
#line 1590 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPSTR); }
#line 9669 "asmparse.cpp.tab.c"
break;
case 601:
  if (!yytrial)
#line 1591 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPWSTR); }
#line 9675 "asmparse.cpp.tab.c"
break;
case 602:
  if (!yytrial)
#line 1592 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPTSTR); }
#line 9681 "asmparse.cpp.tab.c"
break;
case 603:
  if (!yytrial)
#line 1593 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_OBJECTREF);
                                                                PASM->report->warn("Deprecated native type 'objectref'\n"); }
#line 9688 "asmparse.cpp.tab.c"
break;
case 604:
  if (!yytrial)
#line 1595 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_IUNKNOWN);
                                                                if(yyvsp[0].int32 != -1) corEmitInt(yyval.binstr,yyvsp[0].int32); }
#line 9695 "asmparse.cpp.tab.c"
break;
case 605:
  if (!yytrial)
#line 1597 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_IDISPATCH);
                                                                if(yyvsp[0].int32 != -1) corEmitInt(yyval.binstr,yyvsp[0].int32); }
#line 9702 "asmparse.cpp.tab.c"
break;
case 606:
  if (!yytrial)
#line 1599 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_STRUCT); }
#line 9708 "asmparse.cpp.tab.c"
break;
case 607:
  if (!yytrial)
#line 1600 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_INTF);
                                                                if(yyvsp[0].int32 != -1) corEmitInt(yyval.binstr,yyvsp[0].int32); }
#line 9715 "asmparse.cpp.tab.c"
break;
case 608:
  if (!yytrial)
#line 1602 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SAFEARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[0].int32);
                                                                corEmitInt(yyval.binstr,0);}
#line 9723 "asmparse.cpp.tab.c"
break;
case 609:
  if (!yytrial)
#line 1605 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SAFEARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[-2].int32);
                                                                corEmitInt(yyval.binstr,yyvsp[0].binstr->length()); yyval.binstr->append(yyvsp[0].binstr); }
#line 9731 "asmparse.cpp.tab.c"
break;
case 610:
  if (!yytrial)
#line 1609 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_INT); }
#line 9737 "asmparse.cpp.tab.c"
break;
case 611:
  if (!yytrial)
#line 1610 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_UINT); }
#line 9743 "asmparse.cpp.tab.c"
break;
case 612:
  if (!yytrial)
#line 1611 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_UINT); }
#line 9749 "asmparse.cpp.tab.c"
break;
case 613:
  if (!yytrial)
#line 1612 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_NESTEDSTRUCT);
                                                                PASM->report->warn("Deprecated native type 'nested struct'\n"); }
#line 9756 "asmparse.cpp.tab.c"
break;
case 614:
  if (!yytrial)
#line 1614 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BYVALSTR); }
#line 9762 "asmparse.cpp.tab.c"
break;
case 615:
  if (!yytrial)
#line 1615 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ANSIBSTR); }
#line 9768 "asmparse.cpp.tab.c"
break;
case 616:
  if (!yytrial)
#line 1616 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_TBSTR); }
#line 9774 "asmparse.cpp.tab.c"
break;
case 617:
  if (!yytrial)
#line 1617 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VARIANTBOOL); }
#line 9780 "asmparse.cpp.tab.c"
break;
case 618:
  if (!yytrial)
#line 1618 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FUNC); }
#line 9786 "asmparse.cpp.tab.c"
break;
case 619:
  if (!yytrial)
#line 1619 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ASANY); }
#line 9792 "asmparse.cpp.tab.c"
break;
case 620:
  if (!yytrial)
#line 1620 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPSTRUCT); }
#line 9798 "asmparse.cpp.tab.c"
break;
case 621:
  if (!yytrial)
#line 1621 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yyvsp[0].tdd->m_pbsTypeSpec); }
#line 9804 "asmparse.cpp.tab.c"
break;
case 622:
  if (!yytrial)
#line 1624 "asmparse.y"
{ yyval.int32 = -1; }
#line 9810 "asmparse.cpp.tab.c"
break;
case 623:
  if (!yytrial)
#line 1625 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32; }
#line 9816 "asmparse.cpp.tab.c"
break;
case 624:
  if (!yytrial)
#line 1628 "asmparse.y"
{ yyval.int32 = VT_EMPTY; }
#line 9822 "asmparse.cpp.tab.c"
break;
case 625:
  if (!yytrial)
#line 1629 "asmparse.y"
{ yyval.int32 = VT_NULL; }
#line 9828 "asmparse.cpp.tab.c"
break;
case 626:
  if (!yytrial)
#line 1630 "asmparse.y"
{ yyval.int32 = VT_VARIANT; }
#line 9834 "asmparse.cpp.tab.c"
break;
case 627:
  if (!yytrial)
#line 1631 "asmparse.y"
{ yyval.int32 = VT_CY; }
#line 9840 "asmparse.cpp.tab.c"
break;
case 628:
  if (!yytrial)
#line 1632 "asmparse.y"
{ yyval.int32 = VT_VOID; }
#line 9846 "asmparse.cpp.tab.c"
break;
case 629:
  if (!yytrial)
#line 1633 "asmparse.y"
{ yyval.int32 = VT_BOOL; }
#line 9852 "asmparse.cpp.tab.c"
break;
case 630:
  if (!yytrial)
#line 1634 "asmparse.y"
{ yyval.int32 = VT_I1; }
#line 9858 "asmparse.cpp.tab.c"
break;
case 631:
  if (!yytrial)
#line 1635 "asmparse.y"
{ yyval.int32 = VT_I2; }
#line 9864 "asmparse.cpp.tab.c"
break;
case 632:
  if (!yytrial)
#line 1636 "asmparse.y"
{ yyval.int32 = VT_I4; }
#line 9870 "asmparse.cpp.tab.c"
break;
case 633:
  if (!yytrial)
#line 1637 "asmparse.y"
{ yyval.int32 = VT_I8; }
#line 9876 "asmparse.cpp.tab.c"
break;
case 634:
  if (!yytrial)
#line 1638 "asmparse.y"
{ yyval.int32 = VT_R4; }
#line 9882 "asmparse.cpp.tab.c"
break;
case 635:
  if (!yytrial)
#line 1639 "asmparse.y"
{ yyval.int32 = VT_R8; }
#line 9888 "asmparse.cpp.tab.c"
break;
case 636:
  if (!yytrial)
#line 1640 "asmparse.y"
{ yyval.int32 = VT_UI1; }
#line 9894 "asmparse.cpp.tab.c"
break;
case 637:
  if (!yytrial)
#line 1641 "asmparse.y"
{ yyval.int32 = VT_UI2; }
#line 9900 "asmparse.cpp.tab.c"
break;
case 638:
  if (!yytrial)
#line 1642 "asmparse.y"
{ yyval.int32 = VT_UI4; }
#line 9906 "asmparse.cpp.tab.c"
break;
case 639:
  if (!yytrial)
#line 1643 "asmparse.y"
{ yyval.int32 = VT_UI8; }
#line 9912 "asmparse.cpp.tab.c"
break;
case 640:
  if (!yytrial)
#line 1644 "asmparse.y"
{ yyval.int32 = VT_UI1; }
#line 9918 "asmparse.cpp.tab.c"
break;
case 641:
  if (!yytrial)
#line 1645 "asmparse.y"
{ yyval.int32 = VT_UI2; }
#line 9924 "asmparse.cpp.tab.c"
break;
case 642:
  if (!yytrial)
#line 1646 "asmparse.y"
{ yyval.int32 = VT_UI4; }
#line 9930 "asmparse.cpp.tab.c"
break;
case 643:
  if (!yytrial)
#line 1647 "asmparse.y"
{ yyval.int32 = VT_UI8; }
#line 9936 "asmparse.cpp.tab.c"
break;
case 644:
  if (!yytrial)
#line 1648 "asmparse.y"
{ yyval.int32 = VT_PTR; }
#line 9942 "asmparse.cpp.tab.c"
break;
case 645:
  if (!yytrial)
#line 1649 "asmparse.y"
{ yyval.int32 = yyvsp[-2].int32 | VT_ARRAY; }
#line 9948 "asmparse.cpp.tab.c"
break;
case 646:
  if (!yytrial)
#line 1650 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | VT_VECTOR; }
#line 9954 "asmparse.cpp.tab.c"
break;
case 647:
  if (!yytrial)
#line 1651 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | VT_BYREF; }
#line 9960 "asmparse.cpp.tab.c"
break;
case 648:
  if (!yytrial)
#line 1652 "asmparse.y"
{ yyval.int32 = VT_DECIMAL; }
#line 9966 "asmparse.cpp.tab.c"
break;
case 649:
  if (!yytrial)
#line 1653 "asmparse.y"
{ yyval.int32 = VT_DATE; }
#line 9972 "asmparse.cpp.tab.c"
break;
case 650:
  if (!yytrial)
#line 1654 "asmparse.y"
{ yyval.int32 = VT_BSTR; }
#line 9978 "asmparse.cpp.tab.c"
break;
case 651:
  if (!yytrial)
#line 1655 "asmparse.y"
{ yyval.int32 = VT_LPSTR; }
#line 9984 "asmparse.cpp.tab.c"
break;
case 652:
  if (!yytrial)
#line 1656 "asmparse.y"
{ yyval.int32 = VT_LPWSTR; }
#line 9990 "asmparse.cpp.tab.c"
break;
case 653:
  if (!yytrial)
#line 1657 "asmparse.y"
{ yyval.int32 = VT_UNKNOWN; }
#line 9996 "asmparse.cpp.tab.c"
break;
case 654:
  if (!yytrial)
#line 1658 "asmparse.y"
{ yyval.int32 = VT_DISPATCH; }
#line 10002 "asmparse.cpp.tab.c"
break;
case 655:
  if (!yytrial)
#line 1659 "asmparse.y"
{ yyval.int32 = VT_SAFEARRAY; }
#line 10008 "asmparse.cpp.tab.c"
break;
case 656:
  if (!yytrial)
#line 1660 "asmparse.y"
{ yyval.int32 = VT_INT; }
#line 10014 "asmparse.cpp.tab.c"
break;
case 657:
  if (!yytrial)
#line 1661 "asmparse.y"
{ yyval.int32 = VT_UINT; }
#line 10020 "asmparse.cpp.tab.c"
break;
case 658:
  if (!yytrial)
#line 1662 "asmparse.y"
{ yyval.int32 = VT_UINT; }
#line 10026 "asmparse.cpp.tab.c"
break;
case 659:
  if (!yytrial)
#line 1663 "asmparse.y"
{ yyval.int32 = VT_ERROR; }
#line 10032 "asmparse.cpp.tab.c"
break;
case 660:
  if (!yytrial)
#line 1664 "asmparse.y"
{ yyval.int32 = VT_HRESULT; }
#line 10038 "asmparse.cpp.tab.c"
break;
case 661:
  if (!yytrial)
#line 1665 "asmparse.y"
{ yyval.int32 = VT_CARRAY; }
#line 10044 "asmparse.cpp.tab.c"
break;
case 662:
  if (!yytrial)
#line 1666 "asmparse.y"
{ yyval.int32 = VT_USERDEFINED; }
#line 10050 "asmparse.cpp.tab.c"
break;
case 663:
  if (!yytrial)
#line 1667 "asmparse.y"
{ yyval.int32 = VT_RECORD; }
#line 10056 "asmparse.cpp.tab.c"
break;
case 664:
  if (!yytrial)
#line 1668 "asmparse.y"
{ yyval.int32 = VT_FILETIME; }
#line 10062 "asmparse.cpp.tab.c"
break;
case 665:
  if (!yytrial)
#line 1669 "asmparse.y"
{ yyval.int32 = VT_BLOB; }
#line 10068 "asmparse.cpp.tab.c"
break;
case 666:
  if (!yytrial)
#line 1670 "asmparse.y"
{ yyval.int32 = VT_STREAM; }
#line 10074 "asmparse.cpp.tab.c"
break;
case 667:
  if (!yytrial)
#line 1671 "asmparse.y"
{ yyval.int32 = VT_STORAGE; }
#line 10080 "asmparse.cpp.tab.c"
break;
case 668:
  if (!yytrial)
#line 1672 "asmparse.y"
{ yyval.int32 = VT_STREAMED_OBJECT; }
#line 10086 "asmparse.cpp.tab.c"
break;
case 669:
  if (!yytrial)
#line 1673 "asmparse.y"
{ yyval.int32 = VT_STORED_OBJECT; }
#line 10092 "asmparse.cpp.tab.c"
break;
case 670:
  if (!yytrial)
#line 1674 "asmparse.y"
{ yyval.int32 = VT_BLOB_OBJECT; }
#line 10098 "asmparse.cpp.tab.c"
break;
case 671:
  if (!yytrial)
#line 1675 "asmparse.y"
{ yyval.int32 = VT_CF; }
#line 10104 "asmparse.cpp.tab.c"
break;
case 672:
  if (!yytrial)
#line 1676 "asmparse.y"
{ yyval.int32 = VT_CLSID; }
#line 10110 "asmparse.cpp.tab.c"
break;
case 673:
  if (!yytrial)
#line 1680 "asmparse.y"
{ if(yyvsp[0].token == PASM->m_tkSysString)
                                                                {     yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); }
                                                                else if(yyvsp[0].token == PASM->m_tkSysObject)
                                                                {     yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_OBJECT); }
                                                                else
                                                                 yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CLASS, yyvsp[0].token); }
#line 10121 "asmparse.cpp.tab.c"
break;
case 674:
  if (!yytrial)
#line 1686 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_OBJECT); }
#line 10127 "asmparse.cpp.tab.c"
break;
case 675:
  if (!yytrial)
#line 1687 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_VALUETYPE, yyvsp[0].token); }
#line 10133 "asmparse.cpp.tab.c"
break;
case 676:
  if (!yytrial)
#line 1688 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_VALUETYPE, yyvsp[0].token); }
#line 10139 "asmparse.cpp.tab.c"
break;
case 677:
  if (!yytrial)
#line 1689 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 10145 "asmparse.cpp.tab.c"
break;
case 678:
  if (!yytrial)
#line 1690 "asmparse.y"
{ yyval.binstr = parser->MakeTypeArray(ELEMENT_TYPE_ARRAY, yyvsp[-3].binstr, yyvsp[-1].binstr); }
#line 10151 "asmparse.cpp.tab.c"
break;
case 679:
  if (!yytrial)
#line 1691 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_BYREF); }
#line 10157 "asmparse.cpp.tab.c"
break;
case 680:
  if (!yytrial)
#line 1692 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_PTR); }
#line 10163 "asmparse.cpp.tab.c"
break;
case 681:
  if (!yytrial)
#line 1693 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_PINNED); }
#line 10169 "asmparse.cpp.tab.c"
break;
case 682:
  if (!yytrial)
#line 1694 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CMOD_REQD, yyvsp[-1].token);
                                                                yyval.binstr->append(yyvsp[-4].binstr); }
#line 10176 "asmparse.cpp.tab.c"
break;
case 683:
  if (!yytrial)
#line 1696 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CMOD_OPT, yyvsp[-1].token);
                                                                yyval.binstr->append(yyvsp[-4].binstr); }
#line 10183 "asmparse.cpp.tab.c"
break;
case 684:
  if (!yytrial)
#line 1699 "asmparse.y"
{ yyval.binstr = parser->MakeSig(yyvsp[-5].int32, yyvsp[-4].binstr, yyvsp[-1].binstr);
                                                                yyval.binstr->insertInt8(ELEMENT_TYPE_FNPTR);
                                                                PASM->delArgNameList(PASM->m_firstArgName);
                                                                PASM->m_firstArgName = parser->m_ANSFirst.POP();
                                                                PASM->m_lastArgName = parser->m_ANSLast.POP();
                                                              }
#line 10194 "asmparse.cpp.tab.c"
break;
case 685:
  if (!yytrial)
#line 1705 "asmparse.y"
{ if(yyvsp[-1].binstr == NULL) yyval.binstr = yyvsp[-3].binstr;
                                                                else {
                                                                  yyval.binstr = new BinStr();
                                                                  yyval.binstr->appendInt8(ELEMENT_TYPE_GENERICINST);
                                                                  yyval.binstr->append(yyvsp[-3].binstr);
                                                                  corEmitInt(yyval.binstr, corCountArgs(yyvsp[-1].binstr));
                                                                  yyval.binstr->append(yyvsp[-1].binstr); delete yyvsp[-3].binstr; delete yyvsp[-1].binstr; }}
#line 10206 "asmparse.cpp.tab.c"
break;
case 686:
  if (!yytrial)
#line 1712 "asmparse.y"
{ /*if(PASM->m_pCurMethod)  {*/
                                                                /*  if(($3 < 0)||((DWORD)$3 >= PASM->m_pCurMethod->m_NumTyPars))*/
                                                                /*    PASM->report->error("Invalid method type parameter '%d'\n",$3);*/
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_MVAR); corEmitInt(yyval.binstr, yyvsp[0].int32);
                                                                /*} else PASM->report->error("Method type parameter '%d' outside method scope\n",$3);*/
                                                              }
#line 10217 "asmparse.cpp.tab.c"
break;
case 687:
  if (!yytrial)
#line 1718 "asmparse.y"
{ /*if(PASM->m_pCurClass)  {*/
                                                                /*  if(($2 < 0)||((DWORD)$2 >= PASM->m_pCurClass->m_NumTyPars))*/
                                                                /*    PASM->report->error("Invalid type parameter '%d'\n",$2);*/
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_VAR); corEmitInt(yyval.binstr, yyvsp[0].int32);
                                                                /*} else PASM->report->error("Type parameter '%d' outside class scope\n",$2);*/
                                                              }
#line 10228 "asmparse.cpp.tab.c"
break;
case 688:
  if (!yytrial)
#line 1724 "asmparse.y"
{ int eltype = ELEMENT_TYPE_MVAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurMethod) n = PASM->m_pCurMethod->FindTyPar(yyvsp[0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yyvsp[0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yyvsp[0].string);
                                                                    eltype = ELEMENT_TYPE_MVARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid method type parameter '%s'\n",yyvsp[0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n);
                                                              }
#line 10248 "asmparse.cpp.tab.c"
break;
case 689:
  if (!yytrial)
#line 1739 "asmparse.y"
{ int eltype = ELEMENT_TYPE_VAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurClass && !newclass) n = PASM->m_pCurClass->FindTyPar(yyvsp[0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yyvsp[0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yyvsp[0].string);
                                                                    eltype = ELEMENT_TYPE_VARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid type parameter '%s'\n",yyvsp[0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n);
                                                              }
#line 10268 "asmparse.cpp.tab.c"
break;
case 690:
  if (!yytrial)
#line 1754 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_TYPEDBYREF); }
#line 10274 "asmparse.cpp.tab.c"
break;
case 691:
  if (!yytrial)
#line 1755 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_VOID); }
#line 10280 "asmparse.cpp.tab.c"
break;
case 692:
  if (!yytrial)
#line 1756 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I); }
#line 10286 "asmparse.cpp.tab.c"
break;
case 693:
  if (!yytrial)
#line 1757 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U); }
#line 10292 "asmparse.cpp.tab.c"
break;
case 694:
  if (!yytrial)
#line 1758 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U); }
#line 10298 "asmparse.cpp.tab.c"
break;
case 695:
  if (!yytrial)
#line 1759 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 10304 "asmparse.cpp.tab.c"
break;
case 696:
  if (!yytrial)
#line 1760 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SENTINEL); }
#line 10310 "asmparse.cpp.tab.c"
break;
case 697:
  if (!yytrial)
#line 1763 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CHAR); }
#line 10316 "asmparse.cpp.tab.c"
break;
case 698:
  if (!yytrial)
#line 1764 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); }
#line 10322 "asmparse.cpp.tab.c"
break;
case 699:
  if (!yytrial)
#line 1765 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_BOOLEAN); }
#line 10328 "asmparse.cpp.tab.c"
break;
case 700:
  if (!yytrial)
#line 1766 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I1); }
#line 10334 "asmparse.cpp.tab.c"
break;
case 701:
  if (!yytrial)
#line 1767 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I2); }
#line 10340 "asmparse.cpp.tab.c"
break;
case 702:
  if (!yytrial)
#line 1768 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I4); }
#line 10346 "asmparse.cpp.tab.c"
break;
case 703:
  if (!yytrial)
#line 1769 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I8); }
#line 10352 "asmparse.cpp.tab.c"
break;
case 704:
  if (!yytrial)
#line 1770 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4); }
#line 10358 "asmparse.cpp.tab.c"
break;
case 705:
  if (!yytrial)
#line 1771 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8); }
#line 10364 "asmparse.cpp.tab.c"
break;
case 706:
  if (!yytrial)
#line 1772 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1); }
#line 10370 "asmparse.cpp.tab.c"
break;
case 707:
  if (!yytrial)
#line 1773 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2); }
#line 10376 "asmparse.cpp.tab.c"
break;
case 708:
  if (!yytrial)
#line 1774 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4); }
#line 10382 "asmparse.cpp.tab.c"
break;
case 709:
  if (!yytrial)
#line 1775 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8); }
#line 10388 "asmparse.cpp.tab.c"
break;
case 710:
  if (!yytrial)
#line 1776 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1); }
#line 10394 "asmparse.cpp.tab.c"
break;
case 711:
  if (!yytrial)
#line 1777 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2); }
#line 10400 "asmparse.cpp.tab.c"
break;
case 712:
  if (!yytrial)
#line 1778 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4); }
#line 10406 "asmparse.cpp.tab.c"
break;
case 713:
  if (!yytrial)
#line 1779 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8); }
#line 10412 "asmparse.cpp.tab.c"
break;
case 714:
  if (!yytrial)
#line 1780 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yyvsp[0].tdd->m_pbsTypeSpec); }
#line 10418 "asmparse.cpp.tab.c"
break;
case 715:
  if (!yytrial)
#line 1783 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 10424 "asmparse.cpp.tab.c"
break;
case 716:
  if (!yytrial)
#line 1784 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyvsp[-2].binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 10430 "asmparse.cpp.tab.c"
break;
case 717:
  if (!yytrial)
#line 1787 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0x7FFFFFFF); yyval.binstr->appendInt32(0x7FFFFFFF);  }
#line 10436 "asmparse.cpp.tab.c"
break;
case 718:
  if (!yytrial)
#line 1788 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0x7FFFFFFF); yyval.binstr->appendInt32(0x7FFFFFFF);  }
#line 10442 "asmparse.cpp.tab.c"
break;
case 719:
  if (!yytrial)
#line 1789 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0); yyval.binstr->appendInt32(yyvsp[0].int32); }
#line 10448 "asmparse.cpp.tab.c"
break;
case 720:
  if (!yytrial)
#line 1790 "asmparse.y"
{ FAIL_UNLESS(yyvsp[-2].int32 <= yyvsp[0].int32, ("lower bound %d must be <= upper bound %d\n", yyvsp[-2].int32, yyvsp[0].int32));
                                                                if (yyvsp[-2].int32 > yyvsp[0].int32) { YYERROR; };
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yyvsp[-2].int32); yyval.binstr->appendInt32(yyvsp[0].int32-yyvsp[-2].int32+1); }
#line 10456 "asmparse.cpp.tab.c"
break;
case 721:
  if (!yytrial)
#line 1793 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yyvsp[-1].int32); yyval.binstr->appendInt32(0x7FFFFFFF); }
#line 10462 "asmparse.cpp.tab.c"
break;
case 722:
  if (!yytrial)
#line 1798 "asmparse.y"
{ PASM->AddPermissionDecl(yyvsp[-4].secAct, yyvsp[-3].token, yyvsp[-1].pair); }
#line 10468 "asmparse.cpp.tab.c"
break;
case 723:
  if (!yytrial)
#line 1800 "asmparse.y"
{ PASM->AddPermissionDecl(yyvsp[-5].secAct, yyvsp[-4].token, yyvsp[-1].binstr); }
#line 10474 "asmparse.cpp.tab.c"
break;
case 724:
  if (!yytrial)
#line 1801 "asmparse.y"
{ PASM->AddPermissionDecl(yyvsp[-1].secAct, yyvsp[0].token, (NVPair *)NULL); }
#line 10480 "asmparse.cpp.tab.c"
break;
case 725:
  if (!yytrial)
#line 1802 "asmparse.y"
{ PASM->AddPermissionSetDecl(yyvsp[-2].secAct, yyvsp[-1].binstr); }
#line 10486 "asmparse.cpp.tab.c"
break;
case 726:
  if (!yytrial)
#line 1804 "asmparse.y"
{ PASM->AddPermissionSetDecl(yyvsp[-1].secAct,BinStrToUnicode(yyvsp[0].binstr,true));}
#line 10492 "asmparse.cpp.tab.c"
break;
case 727:
  if (!yytrial)
#line 1806 "asmparse.y"
{ BinStr* ret = new BinStr();
                                                                ret->insertInt8('.');
                                                                corEmitInt(ret, nSecAttrBlobs);
                                                                ret->append(yyvsp[-1].binstr);
                                                                PASM->AddPermissionSetDecl(yyvsp[-4].secAct,ret);
                                                                nSecAttrBlobs = 0; }
#line 10503 "asmparse.cpp.tab.c"
break;
case 728:
  if (!yytrial)
#line 1814 "asmparse.y"
{ yyval.binstr = new BinStr(); nSecAttrBlobs = 0;}
#line 10509 "asmparse.cpp.tab.c"
break;
case 729:
  if (!yytrial)
#line 1815 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; nSecAttrBlobs = 1; }
#line 10515 "asmparse.cpp.tab.c"
break;
case 730:
  if (!yytrial)
#line 1816 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->append(yyvsp[0].binstr); nSecAttrBlobs++; }
#line 10521 "asmparse.cpp.tab.c"
break;
case 731:
  if (!yytrial)
#line 1820 "asmparse.y"
{ yyval.binstr = PASM->EncodeSecAttr(PASM->ReflectionNotation(yyvsp[-4].token),yyvsp[-1].binstr,nCustomBlobNVPairs);
                                                                nCustomBlobNVPairs = 0; }
#line 10528 "asmparse.cpp.tab.c"
break;
case 732:
  if (!yytrial)
#line 1823 "asmparse.y"
{ yyval.binstr = PASM->EncodeSecAttr(yyvsp[-4].string,yyvsp[-1].binstr,nCustomBlobNVPairs);
                                                                nCustomBlobNVPairs = 0; }
#line 10535 "asmparse.cpp.tab.c"
break;
case 733:
  if (!yytrial)
#line 1827 "asmparse.y"
{ yyval.secAct = yyvsp[-2].secAct; bParsingByteArray = TRUE; }
#line 10541 "asmparse.cpp.tab.c"
break;
case 734:
  if (!yytrial)
#line 1829 "asmparse.y"
{ yyval.secAct = yyvsp[-2].secAct; bParsingByteArray = TRUE; }
#line 10547 "asmparse.cpp.tab.c"
break;
case 735:
  if (!yytrial)
#line 1832 "asmparse.y"
{ yyval.pair = yyvsp[0].pair; }
#line 10553 "asmparse.cpp.tab.c"
break;
case 736:
  if (!yytrial)
#line 1833 "asmparse.y"
{ yyval.pair = yyvsp[-2].pair->Concat(yyvsp[0].pair); }
#line 10559 "asmparse.cpp.tab.c"
break;
case 737:
  if (!yytrial)
#line 1836 "asmparse.y"
{ yyvsp[-2].binstr->appendInt8(0); yyval.pair = new NVPair(yyvsp[-2].binstr, yyvsp[0].binstr); }
#line 10565 "asmparse.cpp.tab.c"
break;
case 738:
  if (!yytrial)
#line 1839 "asmparse.y"
{ yyval.int32 = 1; }
#line 10571 "asmparse.cpp.tab.c"
break;
case 739:
  if (!yytrial)
#line 1840 "asmparse.y"
{ yyval.int32 = 0; }
#line 10577 "asmparse.cpp.tab.c"
break;
case 740:
  if (!yytrial)
#line 1843 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_BOOLEAN);
                                                                yyval.binstr->appendInt8(yyvsp[0].int32); }
#line 10585 "asmparse.cpp.tab.c"
break;
case 741:
  if (!yytrial)
#line 1846 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_I4);
                                                                yyval.binstr->appendInt32(yyvsp[0].int32); }
#line 10593 "asmparse.cpp.tab.c"
break;
case 742:
  if (!yytrial)
#line 1849 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_I4);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 10601 "asmparse.cpp.tab.c"
break;
case 743:
  if (!yytrial)
#line 1852 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_STRING);
                                                                yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr;
                                                                yyval.binstr->appendInt8(0); }
#line 10610 "asmparse.cpp.tab.c"
break;
case 744:
  if (!yytrial)
#line 1856 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yyvsp[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(1);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 10621 "asmparse.cpp.tab.c"
break;
case 745:
  if (!yytrial)
#line 1862 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yyvsp[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(2);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 10632 "asmparse.cpp.tab.c"
break;
case 746:
  if (!yytrial)
#line 1868 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yyvsp[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(4);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 10643 "asmparse.cpp.tab.c"
break;
case 747:
  if (!yytrial)
#line 1874 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yyvsp[-3].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(4);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 10654 "asmparse.cpp.tab.c"
break;
case 748:
  if (!yytrial)
#line 1882 "asmparse.y"
{ yyval.secAct = dclRequest; }
#line 10660 "asmparse.cpp.tab.c"
break;
case 749:
  if (!yytrial)
#line 1883 "asmparse.y"
{ yyval.secAct = dclDemand; }
#line 10666 "asmparse.cpp.tab.c"
break;
case 750:
  if (!yytrial)
#line 1884 "asmparse.y"
{ yyval.secAct = dclAssert; }
#line 10672 "asmparse.cpp.tab.c"
break;
case 751:
  if (!yytrial)
#line 1885 "asmparse.y"
{ yyval.secAct = dclDeny; }
#line 10678 "asmparse.cpp.tab.c"
break;
case 752:
  if (!yytrial)
#line 1886 "asmparse.y"
{ yyval.secAct = dclPermitOnly; }
#line 10684 "asmparse.cpp.tab.c"
break;
case 753:
  if (!yytrial)
#line 1887 "asmparse.y"
{ yyval.secAct = dclLinktimeCheck; }
#line 10690 "asmparse.cpp.tab.c"
break;
case 754:
  if (!yytrial)
#line 1888 "asmparse.y"
{ yyval.secAct = dclInheritanceCheck; }
#line 10696 "asmparse.cpp.tab.c"
break;
case 755:
  if (!yytrial)
#line 1889 "asmparse.y"
{ yyval.secAct = dclRequestMinimum; }
#line 10702 "asmparse.cpp.tab.c"
break;
case 756:
  if (!yytrial)
#line 1890 "asmparse.y"
{ yyval.secAct = dclRequestOptional; }
#line 10708 "asmparse.cpp.tab.c"
break;
case 757:
  if (!yytrial)
#line 1891 "asmparse.y"
{ yyval.secAct = dclRequestRefuse; }
#line 10714 "asmparse.cpp.tab.c"
break;
case 758:
  if (!yytrial)
#line 1892 "asmparse.y"
{ yyval.secAct = dclPrejitGrant; }
#line 10720 "asmparse.cpp.tab.c"
break;
case 759:
  if (!yytrial)
#line 1893 "asmparse.y"
{ yyval.secAct = dclPrejitDenied; }
#line 10726 "asmparse.cpp.tab.c"
break;
case 760:
  if (!yytrial)
#line 1894 "asmparse.y"
{ yyval.secAct = dclNonCasDemand; }
#line 10732 "asmparse.cpp.tab.c"
break;
case 761:
  if (!yytrial)
#line 1895 "asmparse.y"
{ yyval.secAct = dclNonCasLinkDemand; }
#line 10738 "asmparse.cpp.tab.c"
break;
case 762:
  if (!yytrial)
#line 1896 "asmparse.y"
{ yyval.secAct = dclNonCasInheritance; }
#line 10744 "asmparse.cpp.tab.c"
break;
case 763:
  if (!yytrial)
#line 1900 "asmparse.y"
{ PASM->ResetLineNumbers(); nCurrPC = PASM->m_CurPC; PENV->bExternSource = TRUE; PENV->bExternSourceAutoincrement = FALSE; }
#line 10750 "asmparse.cpp.tab.c"
break;
case 764:
  if (!yytrial)
#line 1901 "asmparse.y"
{ PASM->ResetLineNumbers(); nCurrPC = PASM->m_CurPC; PENV->bExternSource = TRUE; PENV->bExternSourceAutoincrement = TRUE; }
#line 10756 "asmparse.cpp.tab.c"
break;
case 765:
  if (!yytrial)
#line 1904 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-1].int32;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd  = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 10764 "asmparse.cpp.tab.c"
break;
case 766:
  if (!yytrial)
#line 1907 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[0].int32;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd  = static_cast<unsigned>(-1); }
#line 10771 "asmparse.cpp.tab.c"
break;
case 767:
  if (!yytrial)
#line 1909 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-3].int32;
                                                                PENV->nExtCol=yyvsp[-1].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 10779 "asmparse.cpp.tab.c"
break;
case 768:
  if (!yytrial)
#line 1912 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-2].int32;
                                                                PENV->nExtCol=yyvsp[0].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);}
#line 10786 "asmparse.cpp.tab.c"
break;
case 769:
  if (!yytrial)
#line 1915 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-5].int32;
                                                                PENV->nExtCol=yyvsp[-3].int32; PENV->nExtColEnd = yyvsp[-1].int32;
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 10794 "asmparse.cpp.tab.c"
break;
case 770:
  if (!yytrial)
#line 1919 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-4].int32;
                                                                PENV->nExtCol=yyvsp[-2].int32; PENV->nExtColEnd = yyvsp[0].int32; }
#line 10801 "asmparse.cpp.tab.c"
break;
case 771:
  if (!yytrial)
#line 1922 "asmparse.y"
{ PENV->nExtLine = yyvsp[-5].int32; PENV->nExtLineEnd = yyvsp[-3].int32;
                                                                PENV->nExtCol=yyvsp[-1].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 10809 "asmparse.cpp.tab.c"
break;
case 772:
  if (!yytrial)
#line 1926 "asmparse.y"
{ PENV->nExtLine = yyvsp[-4].int32; PENV->nExtLineEnd = yyvsp[-2].int32;
                                                                PENV->nExtCol=yyvsp[0].int32; PENV->nExtColEnd = static_cast<unsigned>(-1); }
#line 10816 "asmparse.cpp.tab.c"
break;
case 773:
  if (!yytrial)
#line 1929 "asmparse.y"
{ PENV->nExtLine = yyvsp[-7].int32; PENV->nExtLineEnd = yyvsp[-5].int32;
                                                                PENV->nExtCol=yyvsp[-3].int32; PENV->nExtColEnd = yyvsp[-1].int32;
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 10824 "asmparse.cpp.tab.c"
break;
case 774:
  if (!yytrial)
#line 1933 "asmparse.y"
{ PENV->nExtLine = yyvsp[-6].int32; PENV->nExtLineEnd = yyvsp[-4].int32;
                                                                PENV->nExtCol=yyvsp[-2].int32; PENV->nExtColEnd = yyvsp[0].int32; }
#line 10831 "asmparse.cpp.tab.c"
break;
case 775:
  if (!yytrial)
#line 1935 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-1].int32 - 1;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yyvsp[0].binstr);}
#line 10839 "asmparse.cpp.tab.c"
break;
case 776:
  if (!yytrial)
#line 1942 "asmparse.y"
{ PASMM->AddFile(yyvsp[-5].string, yyvsp[-6].fileAttr|yyvsp[-4].fileAttr|yyvsp[0].fileAttr, yyvsp[-2].binstr); }
#line 10845 "asmparse.cpp.tab.c"
break;
case 777:
  if (!yytrial)
#line 1943 "asmparse.y"
{ PASMM->AddFile(yyvsp[-1].string, yyvsp[-2].fileAttr|yyvsp[0].fileAttr, NULL); }
#line 10851 "asmparse.cpp.tab.c"
break;
case 778:
  if (!yytrial)
#line 1946 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) 0; }
#line 10857 "asmparse.cpp.tab.c"
break;
case 779:
  if (!yytrial)
#line 1947 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) (yyvsp[-1].fileAttr | ffContainsNoMetaData); }
#line 10863 "asmparse.cpp.tab.c"
break;
case 780:
  if (!yytrial)
#line 1950 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) 0; }
#line 10869 "asmparse.cpp.tab.c"
break;
case 781:
  if (!yytrial)
#line 1951 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) 0x80000000; }
#line 10875 "asmparse.cpp.tab.c"
break;
case 782:
  if (!yytrial)
#line 1954 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 10881 "asmparse.cpp.tab.c"
break;
case 783:
  if (!yytrial)
#line 1957 "asmparse.y"
{ PASMM->StartAssembly(yyvsp[0].string, NULL, (DWORD)yyvsp[-1].asmAttr, FALSE); }
#line 10887 "asmparse.cpp.tab.c"
break;
case 784:
  if (!yytrial)
#line 1960 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) 0; }
#line 10893 "asmparse.cpp.tab.c"
break;
case 785:
  if (!yytrial)
#line 1961 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) (yyvsp[-1].asmAttr | afRetargetable); }
#line 10899 "asmparse.cpp.tab.c"
break;
case 786:
  if (!yytrial)
#line 1962 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) (yyvsp[-1].asmAttr | afContentType_WindowsRuntime); }
#line 10905 "asmparse.cpp.tab.c"
break;
case 787:
  if (!yytrial)
#line 1963 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) (yyvsp[-1].asmAttr | afPA_NoPlatform); }
#line 10911 "asmparse.cpp.tab.c"
break;
case 788:
  if (!yytrial)
#line 1964 "asmparse.y"
{ yyval.asmAttr = yyvsp[-2].asmAttr; }
#line 10917 "asmparse.cpp.tab.c"
break;
case 789:
  if (!yytrial)
#line 1965 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_MSIL); }
#line 10923 "asmparse.cpp.tab.c"
break;
case 790:
  if (!yytrial)
#line 1966 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_x86); }
#line 10929 "asmparse.cpp.tab.c"
break;
case 791:
  if (!yytrial)
#line 1967 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_AMD64); }
#line 10935 "asmparse.cpp.tab.c"
break;
case 792:
  if (!yytrial)
#line 1968 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_ARM); }
#line 10941 "asmparse.cpp.tab.c"
break;
case 793:
  if (!yytrial)
#line 1969 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_ARM64); }
#line 10947 "asmparse.cpp.tab.c"
break;
case 796:
  if (!yytrial)
#line 1976 "asmparse.y"
{ PASMM->SetAssemblyHashAlg(yyvsp[0].int32); }
#line 10953 "asmparse.cpp.tab.c"
break;
case 799:
  if (!yytrial)
#line 1981 "asmparse.y"
{ yyval.int32 = yyvsp[0].int32; }
#line 10959 "asmparse.cpp.tab.c"
break;
case 800:
  if (!yytrial)
#line 1982 "asmparse.y"
{ yyval.int32 = 0xFFFF; }
#line 10965 "asmparse.cpp.tab.c"
break;
case 801:
  if (!yytrial)
#line 1985 "asmparse.y"
{ PASMM->SetAssemblyPublicKey(yyvsp[-1].binstr); }
#line 10971 "asmparse.cpp.tab.c"
break;
case 802:
  if (!yytrial)
#line 1987 "asmparse.y"
{ PASMM->SetAssemblyVer((USHORT)yyvsp[-6].int32, (USHORT)yyvsp[-4].int32, (USHORT)yyvsp[-2].int32, (USHORT)yyvsp[0].int32); }
#line 10977 "asmparse.cpp.tab.c"
break;
case 803:
  if (!yytrial)
#line 1988 "asmparse.y"
{ yyvsp[0].binstr->appendInt8(0); PASMM->SetAssemblyLocale(yyvsp[0].binstr,TRUE); }
#line 10983 "asmparse.cpp.tab.c"
break;
case 804:
  if (!yytrial)
#line 1989 "asmparse.y"
{ PASMM->SetAssemblyLocale(yyvsp[-1].binstr,FALSE); }
#line 10989 "asmparse.cpp.tab.c"
break;
case 807:
  if (!yytrial)
#line 1994 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 10995 "asmparse.cpp.tab.c"
break;
case 808:
  if (!yytrial)
#line 1997 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 11001 "asmparse.cpp.tab.c"
break;
case 809:
  if (!yytrial)
#line 2000 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 11007 "asmparse.cpp.tab.c"
break;
case 810:
  if (!yytrial)
#line 2004 "asmparse.y"
{ PASMM->StartAssembly(yyvsp[0].string, NULL, yyvsp[-1].asmAttr, TRUE); }
#line 11013 "asmparse.cpp.tab.c"
break;
case 811:
  if (!yytrial)
#line 2006 "asmparse.y"
{ PASMM->StartAssembly(yyvsp[-2].string, yyvsp[0].string, yyvsp[-3].asmAttr, TRUE); }
#line 11019 "asmparse.cpp.tab.c"
break;
case 814:
  if (!yytrial)
#line 2013 "asmparse.y"
{ PASMM->SetAssemblyHashBlob(yyvsp[-1].binstr); }
#line 11025 "asmparse.cpp.tab.c"
break;
case 816:
  if (!yytrial)
#line 2015 "asmparse.y"
{ PASMM->SetAssemblyPublicKeyToken(yyvsp[-1].binstr); }
#line 11031 "asmparse.cpp.tab.c"
break;
case 817:
  if (!yytrial)
#line 2016 "asmparse.y"
{ PASMM->SetAssemblyAutodetect(); }
#line 11037 "asmparse.cpp.tab.c"
break;
case 818:
  if (!yytrial)
#line 2019 "asmparse.y"
{ PASMM->StartComType(yyvsp[0].string, yyvsp[-1].exptAttr);}
#line 11043 "asmparse.cpp.tab.c"
break;
case 819:
  if (!yytrial)
#line 2022 "asmparse.y"
{ PASMM->StartComType(yyvsp[0].string, yyvsp[-1].exptAttr); }
#line 11049 "asmparse.cpp.tab.c"
break;
case 820:
  if (!yytrial)
#line 2025 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) 0; }
#line 11055 "asmparse.cpp.tab.c"
break;
case 821:
  if (!yytrial)
#line 2026 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-1].exptAttr | tdNotPublic); }
#line 11061 "asmparse.cpp.tab.c"
break;
case 822:
  if (!yytrial)
#line 2027 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-1].exptAttr | tdPublic); }
#line 11067 "asmparse.cpp.tab.c"
break;
case 823:
  if (!yytrial)
#line 2028 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-1].exptAttr | tdForwarder); }
#line 11073 "asmparse.cpp.tab.c"
break;
case 824:
  if (!yytrial)
#line 2029 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedPublic); }
#line 11079 "asmparse.cpp.tab.c"
break;
case 825:
  if (!yytrial)
#line 2030 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedPrivate); }
#line 11085 "asmparse.cpp.tab.c"
break;
case 826:
  if (!yytrial)
#line 2031 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedFamily); }
#line 11091 "asmparse.cpp.tab.c"
break;
case 827:
  if (!yytrial)
#line 2032 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedAssembly); }
#line 11097 "asmparse.cpp.tab.c"
break;
case 828:
  if (!yytrial)
#line 2033 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedFamANDAssem); }
#line 11103 "asmparse.cpp.tab.c"
break;
case 829:
  if (!yytrial)
#line 2034 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedFamORAssem); }
#line 11109 "asmparse.cpp.tab.c"
break;
case 832:
  if (!yytrial)
#line 2041 "asmparse.y"
{ PASMM->SetComTypeFile(yyvsp[0].string); }
#line 11115 "asmparse.cpp.tab.c"
break;
case 833:
  if (!yytrial)
#line 2042 "asmparse.y"
{ PASMM->SetComTypeComType(yyvsp[0].string); }
#line 11121 "asmparse.cpp.tab.c"
break;
case 834:
  if (!yytrial)
#line 2043 "asmparse.y"
{ PASMM->SetComTypeAsmRef(yyvsp[0].string); }
#line 11127 "asmparse.cpp.tab.c"
break;
case 835:
  if (!yytrial)
#line 2044 "asmparse.y"
{ if(!PASMM->SetComTypeImplementationTok(yyvsp[-1].int32))
                                                                  PASM->report->error("Invalid implementation of exported type\n"); }
#line 11134 "asmparse.cpp.tab.c"
break;
case 836:
  if (!yytrial)
#line 2046 "asmparse.y"
{ if(!PASMM->SetComTypeClassTok(yyvsp[0].int32))
                                                                  PASM->report->error("Invalid TypeDefID of exported type\n"); }
#line 11141 "asmparse.cpp.tab.c"
break;
case 839:
  if (!yytrial)
#line 2052 "asmparse.y"
{ PASMM->StartManifestRes(yyvsp[0].string, yyvsp[0].string, yyvsp[-1].manresAttr); }
#line 11147 "asmparse.cpp.tab.c"
break;
case 840:
  if (!yytrial)
#line 2054 "asmparse.y"
{ PASMM->StartManifestRes(yyvsp[-2].string, yyvsp[0].string, yyvsp[-3].manresAttr); }
#line 11153 "asmparse.cpp.tab.c"
break;
case 841:
  if (!yytrial)
#line 2057 "asmparse.y"
{ yyval.manresAttr = (CorManifestResourceFlags) 0; }
#line 11159 "asmparse.cpp.tab.c"
break;
case 842:
  if (!yytrial)
#line 2058 "asmparse.y"
{ yyval.manresAttr = (CorManifestResourceFlags) (yyvsp[-1].manresAttr | mrPublic); }
#line 11165 "asmparse.cpp.tab.c"
break;
case 843:
  if (!yytrial)
#line 2059 "asmparse.y"
{ yyval.manresAttr = (CorManifestResourceFlags) (yyvsp[-1].manresAttr | mrPrivate); }
#line 11171 "asmparse.cpp.tab.c"
break;
case 846:
  if (!yytrial)
#line 2066 "asmparse.y"
{ PASMM->SetManifestResFile(yyvsp[-2].string, (ULONG)yyvsp[0].int32); }
#line 11177 "asmparse.cpp.tab.c"
break;
case 847:
  if (!yytrial)
#line 2067 "asmparse.y"
{ PASMM->SetManifestResAsmRef(yyvsp[0].string); }
#line 11183 "asmparse.cpp.tab.c"
break;
#line 11185 "asmparse.cpp.tab.c"
#line 802 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial!=0);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

#ifdef YYPOSN
  /* Perform user-defined position reduction */
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif
#endif /* YYPOSN */

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
#ifdef YYPOSN
  yyps->psp -= yym;
#endif /* YYPOSN */

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state "
	     "%d\n", (int)yydepth, yytrial!=0, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;  /* return value of root non-terminal to yylval */
#ifdef YYPOSN
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;  /* return value of root position to yyposn */
#endif /* YYPOSN */
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       (int)yydepth, yytrial!=0, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state "
	   "%d\n", (int)yydepth, yytrial!=0, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
#ifdef YYPOSN
  *++(yyps->psp) = yyps->pos;
#endif /* YYPOSN */
  goto yyloop;


  /*
  ** Reduction declares that this path is valid.
  ** Set yypath and do a full parse
  */
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    struct yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state "
	   "%d, %d tokens\n", (int)yydepth, yytrial!=0, yypath->state,
	   (int)(yylvp - yylvals - yypath->lexeme));
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  yylexp = yylexemes + yypath->lexeme;
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  yylvp = yylvals + yypath->lexeme;
#ifdef YYPOSN
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylpp = yylpsns + yypath->lexeme;
#endif /* YYPOSN */
  yystate = yypath->state;
  goto yyloop;

yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  {
    YYSTYPE *pv;
#ifdef YYPOSN
    YYPOSN *pp = yyps->ps;
#endif
#ifdef YYDESTRUCT
    Yshort *ps = yyps->ss;
#endif
    for(pv=yyps->vs; pv<yyps->vsp; pv++) {
      YYDELETEVAL(*pv,2);
#if defined(YYDESTRUCT)
      YYDESTRUCT(yytrial!=0, yyastable[*ps++], pv, pp++);
#endif /* YYDESTRUCT */
    }
#ifdef YYPOSN
    for(pp=yyps->ps; pp<yyps->psp; pp++) {
      YYDELETEPOSN(*pp,2);
    }
#endif /* YYPOSN */
  }

  while (yyps) {
    struct yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    struct yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    struct yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    struct yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}
