#line 8 "btyaccpa.ske"

/*
** @(#)btyaccpar, based on byacc 1.8 (Berkeley)
*/
#define YYBTYACC 1

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 2 "asmparse.y"

/* Licensed to the .NET Foundation under one or more agreements.*/
/* The .NET Foundation licenses this file to you under the MIT license.*/

/**/
/* File asmparse.y*/
/**/
#include "ilasmpch.h"

#include "grammar_before.cpp"


#line 15 "asmparse.y"
typedef union {
        CorRegTypeAttr classAttr;
        CorMethodAttr methAttr;
        CorFieldAttr fieldAttr;
        CorMethodImpl implAttr;
        CorEventAttr  eventAttr;
        CorPropertyAttr propAttr;
        CorPinvokeMap pinvAttr;
        CorDeclSecurity secAct;
        CorFileFlags fileAttr;
        CorAssemblyFlags asmAttr;
        CorAssemblyFlags asmRefAttr;
        CorTypeAttr exptAttr;
        CorManifestResourceFlags manresAttr;
        double*  float64;
        __int64* int64;
        __int32  int32;
        char*    string;
        BinStr*  binstr;
        Labels*  labels;
        Instr*   instr;         /* instruction opcode*/
        NVPair*  pair;
        pTyParList typarlist;
        mdToken token;
        TypeDefDescr* tdd;
        CustomDescr*  cad;
        unsigned short opcode;
} YYSTYPE;
#define YYSTYPE YYSTYPE
#line 59 "asmparse.cpp.tab.c"
#define ERROR_ 257
#define BAD_COMMENT_ 258
#define BAD_LITERAL_ 259
#define ID 260
#define DOTTEDNAME 261
#define QSTRING 262
#define SQSTRING 263
#define INT32 264
#define INT64 265
#define FLOAT64 266
#define HEXBYTE 267
#define TYPEDEF_T 268
#define TYPEDEF_M 269
#define TYPEDEF_F 270
#define TYPEDEF_TS 271
#define TYPEDEF_MR 272
#define TYPEDEF_CA 273
#define DCOLON 274
#define ELLIPSIS 275
#define VOID_ 276
#define BOOL_ 277
#define CHAR_ 278
#define UNSIGNED_ 279
#define INT_ 280
#define INT8_ 281
#define INT16_ 282
#define INT32_ 283
#define INT64_ 284
#define FLOAT_ 285
#define FLOAT32_ 286
#define FLOAT64_ 287
#define BYTEARRAY_ 288
#define UINT_ 289
#define UINT8_ 290
#define UINT16_ 291
#define UINT32_ 292
#define UINT64_ 293
#define FLAGS_ 294
#define CALLCONV_ 295
#define MDTOKEN_ 296
#define OBJECT_ 297
#define STRING_ 298
#define NULLREF_ 299
#define DEFAULT_ 300
#define CDECL_ 301
#define VARARG_ 302
#define STDCALL_ 303
#define THISCALL_ 304
#define FASTCALL_ 305
#define CLASS_ 306
#define BYREFLIKE_ 307
#define TYPEDREF_ 308
#define UNMANAGED_ 309
#define FINALLY_ 310
#define HANDLER_ 311
#define CATCH_ 312
#define FILTER_ 313
#define FAULT_ 314
#define EXTENDS_ 315
#define IMPLEMENTS_ 316
#define TO_ 317
#define AT_ 318
#define TLS_ 319
#define TRUE_ 320
#define FALSE_ 321
#define _INTERFACEIMPL 322
#define VALUE_ 323
#define VALUETYPE_ 324
#define NATIVE_ 325
#define INSTANCE_ 326
#define SPECIALNAME_ 327
#define FORWARDER_ 328
#define STATIC_ 329
#define PUBLIC_ 330
#define PRIVATE_ 331
#define FAMILY_ 332
#define FINAL_ 333
#define SYNCHRONIZED_ 334
#define INTERFACE_ 335
#define SEALED_ 336
#define NESTED_ 337
#define ABSTRACT_ 338
#define AUTO_ 339
#define SEQUENTIAL_ 340
#define EXPLICIT_ 341
#define ANSI_ 342
#define UNICODE_ 343
#define AUTOCHAR_ 344
#define IMPORT_ 345
#define ENUM_ 346
#define VIRTUAL_ 347
#define NOINLINING_ 348
#define AGGRESSIVEINLINING_ 349
#define NOOPTIMIZATION_ 350
#define AGGRESSIVEOPTIMIZATION_ 351
#define UNMANAGEDEXP_ 352
#define BEFOREFIELDINIT_ 353
#define STRICT_ 354
#define RETARGETABLE_ 355
#define WINDOWSRUNTIME_ 356
#define NOPLATFORM_ 357
#define METHOD_ 358
#define FIELD_ 359
#define PINNED_ 360
#define MODREQ_ 361
#define MODOPT_ 362
#define SERIALIZABLE_ 363
#define PROPERTY_ 364
#define TYPE_ 365
#define ASSEMBLY_ 366
#define FAMANDASSEM_ 367
#define FAMORASSEM_ 368
#define PRIVATESCOPE_ 369
#define HIDEBYSIG_ 370
#define NEWSLOT_ 371
#define RTSPECIALNAME_ 372
#define PINVOKEIMPL_ 373
#define _CTOR 374
#define _CCTOR 375
#define LITERAL_ 376
#define NOTSERIALIZED_ 377
#define INITONLY_ 378
#define REQSECOBJ_ 379
#define CIL_ 380
#define OPTIL_ 381
#define MANAGED_ 382
#define FORWARDREF_ 383
#define PRESERVESIG_ 384
#define RUNTIME_ 385
#define INTERNALCALL_ 386
#define _IMPORT 387
#define NOMANGLE_ 388
#define LASTERR_ 389
#define WINAPI_ 390
#define AS_ 391
#define BESTFIT_ 392
#define ON_ 393
#define OFF_ 394
#define CHARMAPERROR_ 395
#define INSTR_NONE 396
#define INSTR_VAR 397
#define INSTR_I 398
#define INSTR_I8 399
#define INSTR_R 400
#define INSTR_BRTARGET 401
#define INSTR_METHOD 402
#define INSTR_FIELD 403
#define INSTR_TVAR 404
#define INSTR_TYPE 405
#define INSTR_STRING 406
#define INSTR_SIG 407
#define INSTR_TOK 408
#define INSTR_SWITCH 409
#define _CLASS 410
#define _NAMESPACE 411
#define _METHOD 412
#define _FIELD 413
#define _DATA 414
#define _THIS 415
#define _BASE 416
#define _NESTER 417
#define _EMITBYTE 418
#define _TRY 419
#define _MAXSTACK 420
#define _LOCALS 421
#define _ENTRYPOINT 422
#define _ZEROINIT 423
#define _EVENT 424
#define _ADDON 425
#define _REMOVEON 426
#define _FIRE 427
#define _OTHER 428
#define _PROPERTY 429
#define _SET 430
#define _GET 431
#define _PERMISSION 432
#define _PERMISSIONSET 433
#define REQUEST_ 434
#define DEMAND_ 435
#define ASSERT_ 436
#define DENY_ 437
#define PERMITONLY_ 438
#define LINKCHECK_ 439
#define INHERITCHECK_ 440
#define REQMIN_ 441
#define REQOPT_ 442
#define REQREFUSE_ 443
#define PREJITGRANT_ 444
#define PREJITDENY_ 445
#define NONCASDEMAND_ 446
#define NONCASLINKDEMAND_ 447
#define NONCASINHERITANCE_ 448
#define _LINE 449
#define P_LINE 450
#define _LANGUAGE 451
#define _CUSTOM 452
#define INIT_ 453
#define _SIZE 454
#define _PACK 455
#define _VTABLE 456
#define _VTFIXUP 457
#define FROMUNMANAGED_ 458
#define CALLMOSTDERIVED_ 459
#define _VTENTRY 460
#define RETAINAPPDOMAIN_ 461
#define _FILE 462
#define NOMETADATA_ 463
#define _HASH 464
#define _ASSEMBLY 465
#define _PUBLICKEY 466
#define _PUBLICKEYTOKEN 467
#define ALGORITHM_ 468
#define _VER 469
#define _LOCALE 470
#define EXTERN_ 471
#define _MRESOURCE 472
#define _MODULE 473
#define _EXPORT 474
#define LEGACY_ 475
#define LIBRARY_ 476
#define X86_ 477
#define AMD64_ 478
#define ARM_ 479
#define ARM64_ 480
#define MARSHAL_ 481
#define CUSTOM_ 482
#define SYSSTRING_ 483
#define FIXED_ 484
#define VARIANT_ 485
#define CURRENCY_ 486
#define SYSCHAR_ 487
#define DECIMAL_ 488
#define DATE_ 489
#define BSTR_ 490
#define TBSTR_ 491
#define LPSTR_ 492
#define LPWSTR_ 493
#define LPTSTR_ 494
#define OBJECTREF_ 495
#define IUNKNOWN_ 496
#define IDISPATCH_ 497
#define STRUCT_ 498
#define SAFEARRAY_ 499
#define BYVALSTR_ 500
#define LPVOID_ 501
#define ANY_ 502
#define ARRAY_ 503
#define LPSTRUCT_ 504
#define IIDPARAM_ 505
#define IN_ 506
#define OUT_ 507
#define OPT_ 508
#define _PARAM 509
#define _OVERRIDE 510
#define WITH_ 511
#define NULL_ 512
#define HRESULT_ 513
#define CARRAY_ 514
#define USERDEFINED_ 515
#define RECORD_ 516
#define FILETIME_ 517
#define BLOB_ 518
#define STREAM_ 519
#define STORAGE_ 520
#define STREAMED_OBJECT_ 521
#define STORED_OBJECT_ 522
#define BLOB_OBJECT_ 523
#define CF_ 524
#define CLSID_ 525
#define VECTOR_ 526
#define _SUBSYSTEM 527
#define _CORFLAGS 528
#define ALIGNMENT_ 529
#define _IMAGEBASE 530
#define _STACKRESERVE 531
#define _TYPEDEF 532
#define _TEMPLATE 533
#define _TYPELIST 534
#define _MSCORLIB 535
#define P_DEFINE 536
#define P_UNDEF 537
#define P_IFDEF 538
#define P_IFNDEF 539
#define P_ELSE 540
#define P_ENDIF 541
#define P_INCLUDE 542
#define CONSTRAINT_ 543
#define CONST_ 544
#define YYERRCODE 256
static int yylhs[] = {                                        -1,
    0,    0,  113,  113,  113,  113,  113,  113,  113,  113,
  113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
  113,  113,  113,  113,  113,  113,  113,  113,  139,  139,
   38,   38,  136,  136,  136,    2,    2,    1,    1,    1,
    9,   26,   26,   25,   25,   25,  137,  137,  137,  137,
  137,  138,  138,  138,  138,  138,  138,  138,  138,  138,
   96,   96,   96,   96,   97,   97,   97,   97,   10,   11,
   76,   75,   75,   62,   64,   64,   64,   65,   65,   65,
   68,   68,  135,  135,  135,   63,   63,   63,   63,   63,
   63,  133,  133,  133,  122,   12,   12,   12,   12,   12,
   12,  121,  140,  116,  141,  142,  114,   80,   80,   80,
   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
   80,   80,   80,   80,  143,  143,  144,  144,  115,  115,
  145,  145,   59,   59,   60,   60,   72,   72,   18,   18,
   18,   18,   18,   18,   18,   19,   19,   20,   21,   21,
   71,   71,   71,   70,   70,   61,   23,   23,   24,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  119,   82,   82,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   82,    4,    4,   37,
   37,   16,   16,   78,   78,   78,   78,   78,   78,   78,
    7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
    8,    8,   79,   77,   77,   77,   77,   77,   77,  147,
  147,   84,   84,   84,  148,  148,  153,  153,  153,  153,
  153,  153,  153,  153,  149,   85,   85,   85,  150,  150,
  154,  154,  154,  154,  154,  154,  154,  155,   40,   40,
   36,   36,  156,  117,   81,   81,   81,   81,   81,   81,
   81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
   81,   81,   81,   81,   81,   81,   81,   86,   86,   86,
   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
   86,   86,   86,    3,    3,    3,   13,   13,   13,   13,
   13,   83,   83,   83,   83,   83,   83,   83,   83,   83,
   83,   83,   83,   83,   83,   83,   83,  157,  118,  118,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  161,  162,  159,  164,
  164,  163,  163,  163,  166,  165,  165,  165,  165,  169,
  169,  169,  172,  167,  170,  171,  168,  168,  168,  120,
  173,  173,  175,  175,  175,  174,  174,  176,  176,   14,
   14,  177,  177,  177,  177,  177,  177,  177,  177,  177,
  177,  177,  177,  177,  177,  177,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,  178,   33,   33,   34,   34,
   41,   41,   41,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   45,
   45,   45,   46,   46,   46,   50,   50,   49,   49,   48,
   48,   47,   47,   51,   51,   52,   52,   52,   53,   53,
   53,   53,   54,   54,  152,   98,   99,  106,  100,  101,
  102,  103,  104,  105,  107,  108,  109,  110,  111,  112,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,    6,    6,    6,
    6,    6,   56,   56,   57,   57,   58,   58,   27,   27,
   28,   28,   29,   29,   29,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,    5,    5,   74,   74,   74,
   74,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   22,   22,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   44,   44,   44,
   44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
   44,   44,   44,   44,   44,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   32,   32,   31,   31,   31,   31,   31,  134,
  134,  134,  134,  134,  134,   67,   67,   67,   66,   66,
   90,   90,   87,   87,   88,   17,   17,   39,   39,   39,
   39,   39,   39,   39,   39,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
  179,  179,  123,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  124,  124,   91,   91,   92,   92,  180,
  125,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,  126,  126,  181,  181,  181,   69,   69,  182,  182,
  182,  182,  182,  182,  183,  185,  184,  127,  127,  128,
  128,  186,  186,  186,  186,  129,  151,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,  130,  130,  187,
  187,  187,  187,  187,  187,  187,  131,  131,   95,   95,
   95,  132,  132,  188,  188,  188,  188,
};
static int yylen[] = {                                         2,
    0,    2,    4,    4,    3,    1,    1,    1,    1,    1,
    1,    4,    4,    4,    4,    1,    1,    1,    2,    2,
    3,    2,    2,    1,    1,    1,    4,    1,    0,    2,
    1,    3,    2,    4,    6,    1,    1,    1,    1,    3,
    1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
    4,    2,    3,    2,    2,    2,    1,    1,    2,    1,
    2,    4,    6,    3,    5,    7,    9,    3,    4,    7,
    1,    1,    1,    2,    0,    2,    2,    0,    6,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    2,
    3,    1,    2,    3,    7,    0,    2,    2,    2,    2,
    2,    3,    3,    2,    1,    4,    3,    0,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
    2,    2,    2,    5,    0,    2,    0,    2,    0,    2,
    3,    1,    0,    1,    1,    3,    0,    3,    1,    1,
    1,    1,    1,    1,    4,    0,    2,    4,    0,    2,
    5,    4,    3,    0,    2,    3,    0,    1,    5,    3,
    4,    4,    4,    1,    1,    1,    1,    1,    2,    2,
    4,   13,   22,    1,    1,    5,    3,    7,    5,    4,
    7,    0,    2,    2,    2,    2,    2,    2,    2,    5,
    2,    2,    2,    2,    2,    2,    5,    0,    2,    0,
    2,    0,    3,    9,    9,    7,    7,    1,    1,    1,
    2,    2,    1,    4,    0,    1,    1,    2,    2,    2,
    2,    1,    4,    2,    5,    3,    2,    2,    1,    4,
    3,    0,    2,    2,    0,    2,    2,    2,    2,    2,
    1,    1,    1,    1,    9,    0,    2,    2,    0,    2,
    2,    2,    2,    1,    1,    1,    1,    1,    0,    4,
    1,    3,    1,   13,    0,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    5,    8,    6,    5,    0,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    4,    4,
    4,    4,    5,    1,    1,    1,    0,    4,    4,    4,
    4,    0,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    5,    1,    0,    2,
    2,    1,    2,    4,    5,    1,    1,    1,    1,    2,
    1,    1,    1,    1,    1,    4,    6,    4,    4,   11,
    1,    5,    3,    7,    5,    5,    3,    1,    2,    2,
    1,    2,    4,    4,    1,    2,    2,    2,    2,    2,
    2,    2,    1,    2,    1,    1,    1,    4,    4,    2,
    4,    2,    0,    1,    1,    3,    1,    3,    1,    0,
    3,    5,    4,    3,    5,    5,    5,    5,    5,    5,
    2,    2,    2,    2,    2,    2,    4,    4,    4,    4,
    4,    4,    4,    4,    5,    5,    5,    5,    4,    4,
    4,    4,    4,    4,    3,    2,    0,    1,    1,    2,
    1,    1,    1,    1,    4,    4,    5,    4,    4,    4,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    8,    8,    8,    8,    7,    7,    7,    7,    7,    0,
    2,    2,    0,    2,    2,    0,    2,    0,    2,    0,
    2,    0,    2,    0,    2,    0,    2,    2,    0,    2,
    3,    2,    0,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    2,    3,    3,    4,    4,    2,    2,    2,
    2,    3,    2,    2,    2,    5,    3,    2,    2,    2,
    2,    2,    5,    4,    6,    2,    4,    0,    3,    3,
    1,    1,    0,    3,    0,    1,    1,    3,    0,    1,
    1,    3,    1,    3,    4,    4,    4,    4,    5,    1,
    1,    1,    1,    1,    1,    1,    3,    1,    3,    4,
    1,    0,   10,    6,    5,    6,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    2,    2,    1,    1,    1,    1,    2,    3,    4,    6,
    5,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    1,    2,    2,    4,    1,    2,    1,    2,    1,    2,
    1,    2,    1,    2,    1,    1,    0,    5,    0,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    2,    1,    1,    1,    1,    1,    3,
    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    4,    4,    4,
    4,    4,    4,    4,    4,    5,    5,    5,    5,    4,
    4,    4,    4,    4,    4,    2,    1,    3,    2,    2,
    3,    4,    2,    2,    2,    5,    5,    7,    4,    4,
    3,    3,    2,    4,    3,    3,    2,    1,    1,    2,
    3,    2,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    2,    2,    1,    1,    1,
    1,    1,    1,    3,    0,    1,    1,    3,    2,    6,
    7,    3,    3,    3,    6,    0,    1,    3,    5,    6,
    4,    4,    1,    3,    3,    1,    1,    1,    1,    4,
    1,    6,    6,    6,    4,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    3,    2,    5,    4,    7,    6,    7,    6,
    9,    8,    3,    8,    4,    0,    2,    0,    1,    3,
    3,    0,    2,    2,    2,    3,    2,    2,    2,    2,
    2,    0,    2,    3,    1,    1,    1,    1,    3,    8,
    2,    3,    1,    1,    3,    3,    3,    4,    6,    0,
    2,    3,    1,    3,    1,    4,    3,    0,    2,    2,
    2,    3,    3,    3,    3,    3,    3,    0,    2,    2,
    3,    3,    4,    2,    1,    1,    3,    5,    0,    2,
    2,    0,    2,    4,    3,    1,    1,
};
static int yydefred[] = {                                      1,
    0,   85,    0,    0,  268,    0,    0,    0,    0,  791,
  792,    0,    0,    0,    0,    0,    0,  869,    0,    0,
    0,    0,    0,    0,    0,   28,    0,    0,    0,    0,
   57,   58,    0,   60,    0,    0,    0,   83,   84,    2,
    0,    0,  339,    6,    7,    8,    9,   10,   11,    0,
    0,    0,    0,   16,   17,   18,   24,   25,   26,    0,
  108,    0,  275,    0,    0,  848,   36,   39,   37,    0,
   38,    0,  192,  394,  395,    0,  776,  777,  778,  779,
  780,  781,  782,  783,  784,  785,  786,  787,  788,  789,
  790,    0,    0,    0,  219,  220,    0,    0,  226,  227,
    0,    0,    0,    0,    0,  223,    0,   71,  218,    0,
    0,    0,    0,  812,    0,    0,    0,    0,   41,   19,
   20,   43,   42,   22,   23,  562,  742,    0,  719,  727,
  725,    0,  728,  729,  730,  731,  732,  733,  738,  739,
  740,  741,  697,  726,    0,  718,    0,    0,    0,  495,
    0,  563,  564,  565,    0,    0,    0,    0,    0,    0,
  723,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   59,  439,    0,    0,    0,    0,  139,    1,
    0,  822,  840,  858,  872,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  390,  397,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  568,    0,  561,    0,   31,    0,    0,    0,    0,
    0,    0,  228,  229,  230,  231,  221,  222,   72,    0,
   73,    0,    0,  103,    0,   21,  807,    0,    0,  813,
  814,  815,  817,    0,  818,  819,  820,  821,    0,  870,
  871,    0,    0,    0,  734,  735,  736,  737,  696,    0,
  699,    0,  720,  722,  237,  238,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  700,    0,    0,    0,    0,    0,    0,  713,    0,
  705,    0,    0,    0,    0,    0,  704,  703,    0,    0,
    0,    0,    0,  234,    0,    0,    0,   64,  440,   68,
  753,    0,    0,  496,  497,  499,  500,  501,  502,  503,
  504,  498,  505,  506,  507,  508,  509,    0,  375,    0,
  338,  346,  347,    0,    0,    0,    0,  368,    5,    0,
  511,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  348,  352,  351,  354,  353,
  355,    0,  340,  342,  349,  361,  339,    0,    0,    0,
    0,    0,    0,  102,    0,  111,  132,  109,  110,  113,
  114,    0,  115,  116,  117,  118,  119,  120,  121,  122,
  112,  131,  124,  123,  133,    0,  136,    0,  107,    0,
  281,  276,  277,  278,  279,  280,  284,  282,  292,  283,
  285,  286,  287,  288,  289,  290,  291,    0,  293,  317,
    0,    0,    0,  416,    0,  415,    0,  414,    0,  413,
    0,  411,    0,  412,  436,    0,    0,    0,    0,  803,
  793,    0,    0,  851,  850,  849,    0,    0,    0,  213,
    0,  199,  193,  194,  195,  196,  201,  202,  203,  204,
  198,  205,  206,  197,    0,    0,  391,    0,    0,    0,
    0,    0,  762,    0,  761,    0,    0,    0,    0,    0,
  314,  315,    0,    0,    0,    0,   75,   69,    0,   96,
  809,    0,    0,  816,    0,  698,  721,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  712,    0,    0,
    0,    0,    0,  711,    0,    0,    0,    0,  746,  701,
    0,  743,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   30,   27,    0,  105,  242,  256,    0,    0,  848,
    0,    0,    3,    0,  339,  174,  175,  177,  176,  178,
  184,  185,  140,    0,    0,    0,    4,  341,  343,    0,
    0,    0,    0,    0,    0,    0,  350,  513,  512,  518,
  519,   44,    0,    0,  510,  520,  521,  524,  523,  525,
  529,  530,    0,  528,    0,  531,    0,    0,    0,    0,
  536,    0,    0,    0,    0,    0,  385,    0,  383,  386,
  369,    0,    0,    0,    0,    0,    0,    0,    0,  372,
    0,    0,    0,    0,   12,  825,  833,  834,  823,  826,
    0,    0,  845,    0,    0,   13,    0,  843,    0,  841,
    0,    0,    0,    0,   14,  865,  866,  859,    0,    0,
   15,  876,  877,  873,    0,  125,  126,  127,  128,  129,
  130,    0,  106,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  396,    0,    0,  404,
    0,    0,  852,  853,  854,  855,  856,  857,    0,    0,
    0,    0,    0,    0,    0,    0,   75,    0,    0,    0,
    0,    0,   32,    0,  224,  233,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  766,  767,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  710,
    0,    0,    0,    0,    0,    0,    0,    0,  702,  709,
    0,    0,    0,    0,    0,  179,  180,    0,    0,    0,
    0,    0,  139,    0,  245,  259,  858,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  515,  514,    0,    0,    0,    0,    0,    0,  522,
    0,  553,    0,    0,    0,  551,  367,  384,  370,    0,
  387,  376,  377,  378,  379,  381,  382,  380,    0,    0,
    0,    0,  828,  827,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  864,    0,    0,    0,    0,
    0,    0,  151,  153,  152,  154,    0,  149,  150,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  401,    0,    0,    0,    0,    0,  398,  403,    0,  795,
    0,    0,  588,  626,  580,  581,    0,  615,  582,  583,
  584,  585,  586,  587,  617,  593,  594,  595,  596,    0,
    0,    0,  623,    0,    0,    0,    0,  578,  579,  602,
  603,  604,  621,  605,  606,  607,  608,    0,    0,  611,
    0,  619,  625,  273,    0,    0,    0,    0,    0,    0,
    0,  750,    0,    0,    0,    0,  755,    0,   35,    0,
    0,    0,    0,    0,    0,    0,   63,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   76,  444,    0,   77,    0,   97,   98,
    0,   99,  100,  101,    0,    0,    0,  695,  694,    0,
    0,    0,    0,  685,  684,  683,  682,  680,  678,  679,
  681,  693,  692,  691,  690,    0,  706,  707,  748,  744,
    0,    0,    0,  244,  243,    0,    0,  258,  257,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  170,    0,
    0,    0,  358,    0,    0,    0,    0,    0,    0,  359,
    0,    0,    0,  517,  516,    0,  534,    0,    0,  537,
    0,    0,    0,  344,    0,    0,    0,  373,  374,  824,
  835,    0,  837,  829,  832,  810,  836,  842,  844,    0,
    0,    0,    0,    0,  134,    0,    0,    0,    0,  157,
    0,    0,    0,  148,  141,  294,    0,    0,    0,  305,
  306,  307,  308,  300,  301,  302,  299,  303,  304,    0,
    0,  297,    0,    0,    0,    0,    0,    0,  402,  410,
  409,  408,  407,  405,  406,    0,    0,  207,  616,  589,
  590,  591,  592,    0,  612,  618,  620,  624,    0,    0,
    0,  622,  609,  610,  664,  633,  634,    0,  661,  635,
  636,  637,  638,  639,  640,  663,  645,  646,  647,  648,
  631,  632,  653,  654,  655,  656,  657,  658,  659,  660,
  630,  665,  666,  667,  668,  669,  670,  671,  672,  673,
  674,  675,  676,  677,  649,    0,    0,  597,  200,    0,
  209,    0,  191,    0,  769,  768,    0,  765,    0,  764,
  751,    0,  758,   78,   75,   70,    0,    0,  544,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   81,   82,    0,
   80,    0,   95,    0,  689,  688,  687,  686,    0,    0,
  190,    0,    0,    0,    0,    0,    0,    0,  171,    0,
    0,    0,    0,  172,  251,  252,  253,  254,  246,    0,
    0,    0,  173,  265,  264,  266,  267,  260,  181,    0,
  362,    0,  365,  366,    0,   45,   46,    0,  533,    0,
  539,  540,  345,    0,  552,    0,    0,    0,  863,  874,
    0,    0,  160,    0,    0,    0,  145,    0,  163,    0,
    0,  296,    0,    0,    0,  318,  319,  320,  321,    0,
    0,  799,    0,  797,    0,    0,    0,    0,  662,  641,
  642,  643,  644,  651,    0,    0,  652,    0,  598,    0,
  272,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  443,    0,  211,  441,    0,    0,
   78,    0,    0,    0,  217,  216,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   88,    0,   87,   86,    0,  435,  804,  708,    0,
  186,    0,  189,    0,    0,  247,  248,  249,  250,  263,
  261,  262,  357,    0,    0,  535,  555,  388,  389,    0,
  155,    0,    0,  166,    0,  165,  162,    0,    0,  309,
  310,  311,  312,    0,    0,    0,    0,    0,    0,    0,
    0,  650,    0,    0,  599,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  759,   67,  169,    0,    0,
  434,    0,  433,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  424,    0,  423,    0,  422,    0,  421,    0,
  419,  417,    0,  418,  420,    0,  432,    0,  431,    0,
  430,    0,  429,    0,  450,    0,  446,  445,    0,  449,
    0,  448,    0,    0,   90,    0,    0,    0,    0,    0,
    0,  364,    0,    0,  158,  161,  146,  295,  313,  270,
    0,  801,    0,    0,  575,    0,  601,    0,  770,    0,
    0,    0,  775,  760,  215,  214,  484,  480,  428,    0,
  427,    0,  426,    0,  425,    0,  482,  480,  478,  476,
  470,  473,  482,  480,  478,  476,  493,  486,  447,  489,
   89,   91,    0,    0,  188,    0,    0,    0,    0,  168,
    0,    0,  628,    0,  574,    0,  600,    0,    0,    0,
    0,    0,  482,  480,  478,  476,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   79,
    0,    0,    0,    0,  830,  322,    0,  772,  773,  774,
  466,  485,  465,  481,    0,    0,    0,    0,  456,  483,
  455,  454,  479,  453,  477,  451,  472,  471,  452,  474,
  475,  460,  459,  458,  457,  469,  494,  488,  487,  467,
  490,    0,  468,  492,  255,    0,    0,    0,    0,    0,
  464,  463,  462,  461,  491,    0,    0,  360,    0,  327,
  323,  332,  333,  334,  335,  336,  324,  325,  326,  328,
  329,  330,  331,  274,    0,    0,    0,    0,  573,    0,
    0,    0,    0,  182,  337,    0,    0,    0,    0,    0,
    0,    0,    0,  183,
};
static int yydgoto[] = {                                       1,
  158,   71,  485,  909,  159,  788,  105,  106,  814,   35,
   36,  714,  793,  424, 1146,   73,  721,  840,  841, 1048,
 1049, 1095, 1559, 1560,  586, 1615,  794,  795,  796,  211,
  532,  533,  175,  176,  905,  906, 1153,  694, 1158, 1078,
 1327,  944,  945,  282, 1581, 1582, 1577, 1572, 1579, 1580,
 1571, 1588, 1589, 1587,  161,  710,  535,  536, 1275, 1276,
 1053,  712, 1386,  713,  946,  700,  701, 1210,  815, 1279,
  842,  663,  212,  229,  230,  107,  231,  108,  214,  187,
  190,  208, 1639,  754,  755,  846,  695,  696,   92,   37,
  113,  492,  115,  205,  116,   38,   39,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,   40,   41,  312,   42,   43,  181,   44,  356,
   46,   47,  357,   49,   50,  370,   51,  371,   52,  372,
   53,  373,   54,  358,  359,  360,   58,  361,  306,   60,
   61,   62,  189,  399,  665,  563,  564, 1000,  565, 1001,
  566,  215, 1239, 1248,   63,  907,  362,  363,  364,  365,
  801,  367,  368,  611,  612,  369,  613,  802,  614,  615,
  616,  617,   64,  201,   76,  436,  437,  948,   65,  637,
  629,  630,  631,  632,  639,  640,  648,  654,
};
static int yysindex[] = {                                      0,
15526,    0, -334,  796,    0,   50, -224, 2192, 2192,    0,
    0,  -56, 1584,  154,  149, -285, -202,    0,  -95,   61,
   61,  288,  288,13017,  240,    0,  796,  796,  796,  796,
    0,    0,  223,    0,  314,  314,  314,    0,    0,    0,
  387,  477,    0,    0,    0,    0,    0,    0,    0,  497,
  510,  518,  535,    0,    0,    0,    0,    0,    0,  314,
    0,  332,    0, 1444,   61,    0,    0,    0,    0,  234,
    0,   61,    0,    0,    0,  480,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2029,  102,  622,    0,    0,  690,  708,    0,    0,
  866, 1682, 1682,13199,  238,    0,  632,    0,    0,  723,
   61,   61,  346,    0, 1234,  421,  796,  234,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  238,    0,    0,
    0,  862,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  677,    0,  475,  677,  592,    0,
 7139,    0,    0,    0, 1974,   77,   51,  234,  710,  451,
    0,  412,  431,    0,  468,  482,  -77,  677,   47,  234,
  234,  234,    0,    0,  792,  637,  869,  871,    0,    0,
14539,    0,    0,    0,    0,  874, 4162, 2029,  604, 6810,
  881,   78,   86,   93,   99,  103,  133,  887,  968,  890,
    0,    0,  314,   27,  524,  796,  840,12628,  889,  107,
  496,    0,  177,    0, 1682,    0,  895,   58,  909,  692,
   61,   61,    0,    0,    0,    0,    0,    0,    0,  916,
    0,12230,  139,    0,  878,    0,    0,   14, 1234,    0,
    0,    0,    0,  483,    0,    0,    0,    0,  234,    0,
    0,   13,  234,    0,    0,    0,    0,    0,    0,  677,
    0,  687,    0,    0,    0,    0,12795,  936,  954,  876,
  967,  973,  975,  977,  984,  988,  992,  996,  998, 1018,
  243,    0,  796,  979,   64,  990,  917,  234,    0,  796,
    0, 1037, 1059,  796,  209,  238,    0,    0,  796,  796,
  796,  796,  238,    0,  677,  983,  909,    0,    0,    0,
    0,15668,11548,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   61,    0,   61,
    0,    0,    0,   61, 1011,  -55,13302,    0,    0, 1058,
    0,  717,   61,  288,   88,  717,  -77,  147, 1088, 2029,
 -154, 1682,13199, 1091,  314,    0,    0,    0,    0,    0,
    0,    8,    0,    0,    0,    0,    0,  515,  437,  833,
  338,  966,   35,    0, 1100,    0,    0,    0,    0,    0,
    0,  941,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   84,    0, 2029,    0, 1109,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1123,    0,    0,
 1124,   61,   61,    0,   61,    0,   61,    0,  288,    0,
  549,    0,  549,    0,    0, 1003, 1121,  480, 1132,    0,
    0,   61,   61,    0,    0,    0, 1031,  234,    0,    0,
 1136,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1148, 1130,    0,  796,   81,  945,
 1085,  238,    0,13403,    0,  955, 1162, 1175, 1177,  -77,
    0,    0,  653,  234, 1167,  948,    0,    0,  909,    0,
    0,  764,   17,    0,  796,    0,    0,  234,  963,  382,
   61, 1189, 1198, 1200, 1201,   61,   61,   61,  288,  596,
  824,   61,   61,   61,  288,  917,  234,    0,  129,  796,
  796,  796,  234,    0,  234, 2029, 2029,  234,    0,    0,
  978,    0,  118,  496, 1180, 1213,  234,  234,  234,  234,
12373,    0,    0,  894,    0,    0,    0,   61,   61,    0,
 -172,13473,    0, 1137,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1141, 1144, 1145,    0,    0,    0, 1211,
   61,  448,  506,   61,    0, 1000,    0,    0,    0,    0,
    0,    0, 1235, 1239,    0,    0,    0,    0,    0,    0,
    0,    0,12795,    0,  322,    0, 1241,  909,  314,  238,
    0,  717, 1243, 1242,    0,14691,    0, 2029,    0,    0,
    0,  515,  -41,  -41,  -41,  -41,  437,  981, 1001,    0,
  827, 1240,    4,  185,    0,    0,    0,    0,    0,    0,
  314,  314,    0, 1259, 1260,    0,  314,    0,  314,    0,
 1283, -215,  796,  829,    0,    0,    0,    0,  796,  853,
    0,    0,    0,    0,   61,    0,    0,    0,    0,    0,
    0,   11,    0,    0, 1282,   61,  945, 1129,  945, 1286,
 1244, 1287, 1293, 1299, 1304, 1306,    0,  968, 1307,    0,
 1280, 1315,    0,    0,    0,    0,    0,    0,   61,15954,
   12,  150,    0,  551, 1309, 1334,    0,  686, 1083, 1337,
 1261, 1316,    0, 1122,    0,    0, 1323, 7450, 1347, 1349,
  400, 1270, 3284,  283,  314,  796,  234,  796,    0,    0,
 1355, 1361,   61,   61,   61,  288, 1362, 1368, 1376, 1383,
 1384, 1388, 1389, 1391, 1392, 1393, 1395, 1397,  234,    0,
  796,  710,  710,  710, 1399, 1408,   61,  209,    0,    0,
  238, 1410, 2029,13129, 1901,    0,    0,  524,  630,  658,
    0, 1182,    0,14790,    0,    0,    0,   61, 1358,   61,
  234,   61,  628, 1366,  238,  400,   61,  288,  234, 1194,
  717,    0,    0,  945, 1416, 1250, 1419, 1436, 1434,    0,
    0,    0, 1129, 1442, 1449,    0,    0,    0,    0,  717,
    0,    0,    0,    0,    0,    0,    0,    0,  480,   61,
   61, 1446,    0,    0, 1430, 1461,  909, 1468, 1469, 1471,
 1475, 1476, 1477,   61,  796,    0,  234,  796,   18,  796,
 1484, 1489,    0,    0,    0,    0, 1222,    0,    0,  316,
  191, 1479, 2029, 1496,    9,  888, -207,   98,  552, 1448,
    0, 1448, 1448, 1448, 1448, 1448,    0,    0,   61,    0,
   61, 1502,    0,    0,    0,    0, 1164,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1505,
 1049, 1060,    0, 1047, 1511, -262, 1275,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1505, 1505,    0,
 3489,    0,    0,    0,  184, 1513,  314,  480, 1497,    0,
 1749,    0,  945, 1435,    0,13403,    0, 1439,    0,  170,
   61, 1501,    0,    0,  234, 1167,    0,  151,  160, 1071,
  176,  187,  193,  435,  442,  452,  500,  507,  517,  530,
  543,  573,  598,    0,    0,  328,    0,  314,    0,    0,
  480,    0,    0,    0, 1518,  234,  234,    0,    0, 1523,
 1524, 1527, 1529,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  710,    0,    0,    0,    0,
  496,    0, 1119,    0,    0,  234,  796,    0,    0,  238,
  234,   61,  234,   61,  672,  238,  400,15719,    0,  614,
  673, 1708,    0, 1181, 1480, 1482, 2029, 1497,12795,    0,
 1545, 1546,  796,    0,    0,  748,    0,    0,  717,    0,
  717, 1547,   98,    0,    0, 1276, 1285,    0,    0,    0,
    0,    4,    0,    0,    0,    0,    0,    0,    0, 1556,
  710,  234,   61,  234,    0,   61, 1560, 1222, 2029,    0,
 2029,  755,  796,    0,    0,    0,  945, 1252, 1565,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1549,
 1550,    0, 1510, 1520, 1526, 1528, 1585,  400,    0,    0,
    0,    0,    0,    0,    0, 1582,    0,    0,    0,    0,
    0,    0,    0, 1127,    0,    0,    0,    0,  945, 1536,
 1538,    0,    0,    0,    0,    0,    0, 1301,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    1,   38,    0,    0,  -38,
    0, 2608,    0, 1596,    0,    0,  909,    0, 1603,    0,
    0, 1525,    0,    0,    0,    0,  909, 1553,    0, 1608,
 1609, 1611, 1612,  382,   61,   61,   61,  619,  654,  656,
  679,   61,   61,   61,   61,   61,   61,  288,   61,  596,
   61,  824,   61,   61,   61,   61,   61,   61,   61,  288,
   61, 3284,   61, -167,   61,  635,   61,    0,    0, 2933,
    0, 1615,    0, 1231,    0,    0,    0,    0, 1619,  -77,
    0,  234, 1130, 1568, 1569, 2029,12795, 1152,    0,  -77,
  -77,  -77,  -77,    0,    0,    0,    0,    0,    0,  -77,
  -77,  -77,    0,    0,    0,    0,    0,    0,    0,  480,
    0, 1620,    0,    0, 1394,    0,    0,  234,    0, 1624,
    0,    0,    0,  480,    0,  480,   61, 1613,    0,    0,
 1628,   61,    0,  796, 1629, 1630,    0,   11,    0,  755,
  909,    0,   61,  591,  688,    0,    0,    0,    0,15954,
 1616,    0,   61,    0, 1617,  899,   61,   61,    0,    0,
    0,    0,    0,    0,  945, 1579,    0,   61,    0,   74,
    0, 1639, 1648, 1084, 1649, 1650, 1651, 1652, 1655, 1659,
 1676, 1680, 1683, 1689,    0,  909,    0,    0,   61,  680,
    0,  459, 1610, 1671,    0,    0,    0,    0, 1693, 1647,
 1700, 1656,   61,   61,   61,   61,   61,   61,  288,   61,
 1701, 1657, 1707, 1658, 1711, 1660, 1713, 1662, 1715, 1717,
 1666, 1719, 1720, 1670, 1728, 1679, 1732, 1686, 1739, 1698,
 1745, 1699, 1752, 1706, 1753, 1760, 1710, 1763, 1548, 1767,
 1716,    0,   -2,    0,    0,  709,    0,    0,    0,  159,
    0, 1766,    0, 1543, 1682,    0,    0,    0,    0,    0,
    0,    0,    0, 2029,  400,    0,    0,    0,    0,    4,
    0, 1771,  755,    0, 2029,    0,    0, 1888, 1777,    0,
    0,    0,    0, 1778, 1782,    0,   61,  945, 1730, 1731,
  909,    0, 1734,   61,    0, 1785, 1790, 1791, 1792, 1793,
 1780, 1781, 1794, 1807,  775,    0,    0,    0, 1813, 1814,
    0, 1795,    0, 1822, 1835, 1784, 1837, 1788, 1841, 1796,
 1842, 1797,    0, 1845,    0, 1847,    0, 1848,    0, 1857,
    0,    0, 1867,    0,    0, 1868,    0, 1871,    0, 1872,
    0, 1873,    0, 1877,    0, 1879,    0,    0, 1883,    0,
 1885,    0, 1884, 1664,    0, 1838,  624,    0, 2029,  400,
  238,    0, 1870, 1874,    0,    0,    0,    0,    0,    0,
    0,    0, 1887,  773,    0,16040,    0, 1840,    0,   61,
   61,   61,    0,    0,    0,    0,    0,    0,    0, 1894,
    0, 1895,    0, 1896,    0, 1906,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3284, 1900,    0, 1870,12795, 1856, 1909,    0,
    4, 1916,    0,  945,    0,    0,    0, 1921, 1925, 1930,
   28,   39,    0,    0,    0,    0,   63,   80,   83,  114,
  120,  789,  101,  105,  135,  131, 1183,   25, 1026,    0,
 1497, 1932, 1704,    0,    0,    0, 1043,    0,    0,    0,
    0,    0,    0,    0,  156,  157,  163,  146,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1723,    0,    0,    0,    0,  400, 1938, 2554,  945,
    0,    0,    0,    0,    0, 1939, 1947,    0, 1949,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  805, 1483,    0,   61,    0, 1632,
 1955, 1956, 1682,    0,    0,  238,12795, 1724,  400, 1870,
 1975,    0, 1973,    0,
};
static int yyrindex[] = {                                      0,
    0,    0, 4600,    0,    0,12898, 1743,    0,    0,    0,
    0,    0,11830,    0,    0,  356, 1976,    0, 1166,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1977, 1977, 1977,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1977,
    0,  -68,    0,    0,    0,    0,    0,    0,    0, 1897,
    0,    0,    0,    0,    0, 1563,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,10010,    0,    0,    0,    0,    0,    0,
 7761, 8072, 8072,    0,    0,    0, 8526,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2708,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2115, 2991,    0,
    0,    0,    0,    0,    0,    0,11830, 1903, 7102, 7413,
 7724, 8035,    0,    0,    0, 1978,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1899, 8072,
    0,11773,11773,11773,11773,11773,11773,    0,    0,    0,
    0,    0, 1977,10388,    0,    0,    0,    0,    0,    0,
 9403,    0,11342,    0,11830,    0,    0,    0,11522,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1364,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1910,    0,
    0, 1911, 3146, 6800,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 5181,    0,    0,
    0,    0,    0,    0, 1996, 1981,    0,    0,    0,    0,
    0,    0,    0,    0, 1903,    0, 8346,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,11830,    0,    0,    0,
    0,11830,    0,    0, 1977,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -61,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1919,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1923, 1677,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1922,    0,    0,10208,    0,    0,11830,
    0,    0, 1996,   32, 2008,    0,    0,    0, 8782,    0,
    0, 3584, 1926,    0,    0,    0,    0,14034,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5619,    0,    0,    0,
    0,    0, 6057,    0, 2553,    0,    0, 4022,    0,    0,
  192,    0,    0,   76,    0, 1988, 4460, 4898, 5336, 5774,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,14942, 1977,    0,
    0, 2012,    0,    0,13850,    0,    0,    0,    0,    0,
    0,15025,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1977, 1977,    0,    0,    0,    0, 1977,    0, 1977,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  217,    0,    0, 1931,    0, 2076,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,10586,    0,    0,    0,    0,    0,    0,    0,  798,
 1333,    0, 9654,    0,    0, 2014,    0,    0,    0, 1933,
    0,    0,    0,    0,    0,    0, 8962, 1981,    0,    0,
    0,    0,  -72,    0, 1977,    0, 1934,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 6495,    0,
    0, 3429, 3867, 4305,    0,    0,  455,  611,    0,    0,
    0,12523,    0,    0,11830,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
15122,    0,    0,    0,    0,    0,    0,    0,14456,    0,
    0,    0,    0,    0,    0,    0, 2015,    0, 2018,    0,
13850,    0,    0,    0, 2019,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  663,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2209,    0,    0,    0,
    0,    0,    0,    0,    0,    0,13574,    0,    0,  217,
    0,    0,    0,    0, 2076,    0,    0,  532,    0,11773,
    0,11773,11773,11773,11773,11773,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  860,
    0,    0,    0,    0,    0,    0,  884,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  860,  860,    0,
    6,    0,    0,    0, 2020,    0,    0,    0, 2270, 9839,
    0,    0,    0,    0,  944, 1922,    0,    0,    0,    0,
    0,    0,13850,13850,13835, 2008,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1940,    0, 1977,    0,    0,
    0,    0,    0,    0,    0, 1941,14205,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4743,    0,    0,    0,    0,
  613,13850,    0,    0,    0,  837,    0,    0,    0,    0,
 1943,    0,15854,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,15317,    0,    0,    0,15414,    0,    0,
    0,    0,    0,    0,    0,    0,    0,13850, 2012,    0,
 2012,    0,  206,    0,13905,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2646, 3084,    0,   89,    0,    0,    0,13574,    0,    0,
 2022, 2005,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,10766,10964,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1078,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  732,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 9218,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 6212,    0,    0,    0,    0,    0,11830,
    0, 1948,    0,    0,    0,    0,    0,    0,    0,11830,
11830,11830,11830,    0,    0,    0,    0,    0,    0,11830,
11830,11830,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,15497,    0,    0,
    0,    0,    0,  742,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2031,    0,  217,    0, 2005,
 2076,    0,    0,    0,    0,    0,    0,    0,    0,  798,
 2071,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,11947,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,13850,13850,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,11830,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2005,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,11144,    0,    0,    0,    0,
  946,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,13850,    0,    0,
    0,    0, 2072,    0,    0,    0,    0,    0,    0,    0,
13850,    0,    0,    0,    0,  798,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2072,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2073,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1990,    0,    0,13850,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,13850,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,13850,    0,    0,    0,
    0,    0,11830,    0,    0,    0,    0,    0,    0, 2072,
    0,13850,    0,    0,
};
static int yycindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,14357,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1853,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1297,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2026,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2075,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2030,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,13625,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1849,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1859,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  875,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  112,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
13729,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1850,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2088,    0,    0,    0,    0,    0,    0,    0,    0,  934,
    0,    0,    0,    0, 2074,    0,    0,    0,    0,    0,
    0,    0, 1861, 1863,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1865,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1886,    0,    0,
    0,    0,    0,    0, 1892,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1882, 1889,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2063,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1893, 1904,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1908,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1905,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1915,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  636,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1920,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1924,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1927,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1945,    0,    0,
};
static int yygindex[] = {                                   1983,
   -4,   -3, -690,    0, -420, -122,  -99,    0,  337,    0,
    0,    0, 1758, -119,    0,    0, -883,    0, 1329,    0,
 1133,  214,-1468, -445, -396,  -13, -773,    0, 1147,  -22,
 1437,    0,    5, 1277,  667,  904, -989,  -79,    0, 1174,
    0,-1141, 1046,    0,    0,    0,-1313,-1439,-1080, -941,
    0,    0,    0,    0, 1012, 1274, 1515,    0,    0,    0,
    0, -664,    0,    0,-1097,    0, 1308,    0,-1012,-1210,
  947,  935,  -23,  -85, 1876, 1754, 2211, -162,    3,    0,
    0,    0,    0,    0,    0, -807, 1320,    0, 2232,    0,
    0, 1029, 2140, 1709,    0,  -18, 2238,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -300, 1500,    0, -299, -316, -281,   16,
    0,    0,   29,    0,    0,    0,    0,    0,    0, 1504,
    0,    0,    0,    7,   21,   33,    0,   10, 1964,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   19,    0,    0,    0,    0,    0,    0,    0,    0,
 -149,    0,    0, 1663,    0,    0,    0,  429,    0,    0,
    0,    0,    0,    0,    0, 1594, 2210,  -35,    0, 1787,
    0, 1913,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 16544
static int yytable[] = {                                      70,
  162,  160,  227,  228,  304,  165,  213,   55,  124,  125,
   59,  554,  555,  219,  118,  109,   45, 1022, 1254, 1268,
  926,   56,  169,  170,  171,  172,  164, 1156,  203,   48,
  556,  366,  914,   57,  675,  574,  676, 1058, 1307,  709,
  177,  178,  167,  629, 1305,  813,  629,  605,  119,  629,
  606,  476,   78,  838,  135,  839,  119,  206,  206,  206,
 1373,  147,  206,  206,  186, 1630, 1332,  303, 1601, 1417,
  442,  316,  209,  426,  428,  430,  432,  434,  566, 1603,
 1308,  338,  232,  287,  443, 1010, 1311, 1592,  156,  307,
  420,  316,  206,   34,   74, 1375,  629,  475, 1578,  742,
  743,  744,  397, 1609, 1584,  254,  164,  216,  238,  206,
  249,  252,  253,  732,  733,  472, 1434,  422,  284,  547,
 1611,  259,  167, 1612,  261,  425,  206,  585,  267,  206,
 1309, 1376,  427,  198, 1606,  298,   66,  547,  429,  297,
   72, 1622,  431,  662,  305, 1623,  486,  875,  284, 1170,
 1171,  285,  288,  489, 1614,   75,  521,  296,  286,  651,
 1616,  748,  218,  203,   67,   68, 1435,   69,  423,  109,
   91, 1625,  433,  693,  206, 1624,  423,  340,  488,  157,
  474,  499,  396,  423,  590,  466, 1644,  597,  295,  423,
 1174,   95,  759,  423,   96,  206, 1641, 1642, 1498, 1176,
  448,  449, 1506, 1643,  206,  469,   94,  439, 1219, 1166,
  749, 1681,  286,  875,  110, 1182,  470,   97,   98,  620,
 1100,  741,   99,  423,  100, 1148, 1184,  484,  309, 1583,
 1051,  101, 1186, 1445,  493,  747,  496,  471,  764,  111,
 1101, 1175,  910,  112, 1260,  816,  269,  135,  102,  269,
 1177,  576,  600,  147,  147,  825,  156,   67,   68, 1605,
   69,  487,  498,  103,  596,  126, 1183,  119,  114,  800,
  157,  598,  743,  534, 1147,  516,  517, 1185,  519,  206,
  541,  305,  523, 1187,  747,  525,   78, 1628,  440,  528,
 1339,   78, 1165,   98,  537,  538,  539,  540, 1073, 1074,
 1075,  119,  119, 1494,  832,  566, 1228,    2,  216,  572,
   67,   68,  664,   69,  119,  599,  833,  834,  559,   55,
  976,  562,   59, 1629,  119,  593,  119,  557,   45,  908,
  581,  587,  560,   56,  835, 1043,   67,   68,  578,   69,
  558,   48,  588,  119,  561,   57,  119,  719,  720,  109,
  594,  122,  123,  582,  781,  164,  120,  121,  838,  603,
  839,  875,  168,  216,  119,  618,   67,   68,  119,   69,
  760,  167,   98,  583,  584,  117,  626,  122,  123,  628,
  628,  647,  653,  119,  836,  582,   34, 1291,  702,  217,
  627,  627,  646,  652,  122,  123,   34, 1504,  119, 1057,
  216,  204,   98,  495, 1041,  583,  584,  716,  207,  122,
  123, 1590,  152,  153,  154,  674,  591,  127,  592,  119,
  119,  128,  129,  130,  131,  132,  119,  133,  134,  135,
  136,  216,  137,  138,  679,  491,  139,  140,  141,  142,
  745,  746,   98,  143,  144, 1627,  216,  235,  236,  698,
   67,   68,  145,   69,  146,  486,  366,  291,  292,  293,
  604,  691,  636,  692, 1585,  269,  762,  808,  269,  147,
  148,  149,  119, 1418, 1188,  775,  156,  156,  469,  156,
 1172, 1190,  109,  529,  173,  286,   13,  573,  298,  976,
  717, 1192,  297,  289, 1607,  730,  649,  734,  749,  650,
 1333,  738,   67,   68,  150,   69,  119,  780,  127,  179,
  296,  739,  128,  129,  130,  131,  132,   34,  133,  134,
  135,  136,  798,  137,  138, 1189, 1304,  139,  140,  141,
  142,  629, 1191,  298,  143,  144,  484,  297,  770, 1194,
  875,  295, 1193,  145,  817,  146, 1196,  749, 1595,  283,
  875,  122,  123,  875,  837,  296, 1198,  478,  479,  338,
  147,  148,  149, 1449, 1450,  949,  950,  771,  773, 1200,
   27,   28,   29,   30,   31,   32,   33,  786, 1077,  468,
  174,   67, 1202, 1446,   69,  119,  295,  845,  779,  849,
 1195,  782, 1079,  476,  476,  150,  772, 1197,  787,  180,
  951, 1635,  340,  785, 1586,   67,   68, 1199,   69,  832,
    2,  911, 1204,  806,  366,  806,  806,  518,  806,  182,
 1201,  833,  834,  524,  875,  875,  875,  875,  875,  875,
  875,  531,  183, 1203, 1608,  818,  819, 1206,  827,  835,
  184,  822,  203,  823,  829,  848,  188,   70,   73,   76,
   79,   82,   85,   88,  745,  990,  548,  185, 1343,   67,
   68,  996,   69, 1205,  568,  220,  569,  983,  987,  206,
  570, 1007,   34,  206,  548,  259,  633,  124,  579,  580,
   67,   68,  589,   69, 1553,  534, 1208, 1602, 1207,  836,
  155, 1209,  233, 1345,  284, 1347,   67,  554,  555,   69,
  119,  719,  720,  745, 1016,  619,  925,   67,   68, 1344,
   69,  956,  963,  957, 1503, 1226,  556,  206, 1349,  955,
  992,  831,  947,  298, 1554,  156,  121,  752,  981,  221,
 1080,   34, 1081, 1082, 1083, 1084, 1085, 1562, 1234,   67,
  952,  953,   69,  954, 1346,  296, 1348,  222,  994,  986,
  250,  251, 1009,  991,  993,  995,  290, 1055,  670,  671,
  340,  672,  234,  673, 1012,   67,   68,  156,   69, 1350,
 1023,  925,  771,  481,  482,  771,  295, 1014,  681,  682,
  260,  155,  554,   67,   68,  554,   69,  831, 1259,   13,
  476,  269,  269, 1360,  269, 1362, 1026, 1243, 1278, 1496,
  206,  634,  299,  622,  635, 1028,  623,  624,  237, 1556,
  291,  292,  293, 1565,  582,  476, 1564, 1208,  806,  531,
 1638,  300, 1209, 1042,  607, 1044,  608,  609,  610, 1619,
  702, 1157,  308,   34,  583,  584, 1052,  722,  572,  572,
 1167,  294,  727,  728,  729, 1669,  731,  476,  735,  736,
  737,  444,  740,  445,  446,  291,  292,  293,  301,  119,
  447,  582, 1646,   27,   28,   29,   30,   31,   32,   33,
  262,  263,  302,   27,   28,   29,   30,   31,   32,   33,
  264,  583,  584,  566,  756,  757,    2, 1159,  572,   67,
   68,   34,   69, 1671,   67,   68, 1261,   69, 1262, 1524,
  627,  627,  126,  309, 1151,  269,  269,  769, 1683,  310,
  774,  311,   67,   68,  374,   69,  119,   67,   68,  398,
   69, 1253,  421, 1255,  577,  577,  435,  529, 1072,  438,
   98,  783,  450, 1378,  473,  831,   67,   68,  789,   69,
 1379,  476, 1428,  119,  126,    2, 1647, 1213,   98,  467,
  627,  476, 1212,  807,  477, 1211,  480,  625,  494,  241,
 1441, 1442, 1443, 1274, 1221, 1277,  497, 1223,   67,   68,
  490,   69,   98, 1227,  577,  500,   67, 1281,  826,   69,
  119,   37, 1222, 1420, 1421,   37,  614,  614, 1680,   37,
   37,  831,  925,  501,   27,   28,   29,   30,   31,   32,
   33,  831,  844,   37,  559,  200,  506,  562, 1258, 1238,
 1247,  647,  507,  557,  508,  787,  509,  787,  560, 1296,
 1236, 1245,  646,  510,   34,  862,  558,  511, 1235, 1244,
  561,  512, 1237, 1246,   37,  513,  614,  514, 1230, 1231,
 1232, 1233,  803,  804,  805,  291,  292,  293, 1280,  152,
  153,  154,  122,  123,  582,   67,   68,  515,   69,  960,
  961,  962,   10,   11,   12,   13, 1633, 1396, 1397, 1398,
 1399,  520, 1326,  925,  583,  584,  526, 1400, 1401, 1402,
 1422, 1423,  522,  979,  531,  476, 1640,  122,  123,  582,
  645,  152,  153,  154,  831,  831,  566,  566,  527,  566,
 1240,  571, 1241, 1242, 1003,    2, 1005,  543, 1006,  583,
  584, 1103, 1104, 1011,  831,  577,  156, 1015,  613,  613,
  595,   10,   11,   12,   13,  468,  831,  677,  831,  831,
  602,  831,  831, 1208,   61,   64, 1027,   67, 1209,  655,
 1393, 1394,  255,  256,  257,  258, 1029, 1030,  666,   27,
   28,   29,   30,   31,   32,   33,  502,  503,  504,  505,
 1040,  157,  667,  669,  678,   92,  223,  298,  224,  225,
  226,  297,  680,  156, 1357,  689,   67,   68, 1363,   69,
  119, 1059, 1380, 1076, 1618, 1620, 1371,  690, 1060,  296,
 1061, 1062, 1063,   97,  100, 1086,  103, 1087,  831,  831,
  831,  831,  831,  831,  831,  704,  216,  697,   27,   28,
   29,   30,   31,   32,   33,  705,  703,  706, 1390,  847,
  295,  711,  109, 1626,   92, 1431,  708,  634,  723, 1064,
 1065, 1066,  109,  109,  109,  109,  718,  724,    2,  725,
  726,  750,  109,  109,  109,  191, 1403, 1155,  192,  193,
  194,  195,  747,  196,  197,  198,  751, 1168,  753,  763,
 1407,  641, 1408,  765,    8,    9,  766,  767,  768, 1413,
  656,  657,  658,  776,  777, 1067, 1068, 1069,  778, 1070,
  784,  791, 1071,  790,   13,   67,   68,  298,   69, 1018,
   92,  297, 1282,  126,  811, 1501,  621,  809,  622,  828,
  812,  623,  624,   37,   37,   37,  659,  660,  661,  296,
   27,   28,   29,   30,   31,   32,   33,  810, 1502,  820,
  821,   98,  824,  830, 1631,  843,  850,  852, 1224, 1507,
 1225, 1632,  208,  853,   25, 1461,  851,  859,   22,  854,
  295, 1211,   67,   68,  855,  915,  856,  858, 1514,  912,
  126, 1178, 1179, 1180, 1181,  789,   19,  789,  861, 1495,
  683,  684,  685,  808, 1436, 1437, 1438, 1439,   27,   28,
   29,   30,   31,   32,   33,  642,  918,  913,   98, 1270,
  916, 1497, 1271,  920,  919,  917,  923,   16,  924,   67,
   68,  208,   69,  208,  927,  958,  686,  687,  688,  127,
  925,  959,  964,  128,  129,  130,  131,  132,  965,  133,
  134,  135,  136, 1555,  137,  138,  966,   13,  139,  140,
  141,  142,  808,  967,  968,  143,  144,  643,  969,  970,
  644,  971,  972,  973,  145,  974,  146,  975,   92,  977,
  152,  153,  154, 1089, 1090, 1091, 1092, 1093,  978,  982,
 1004,  147,  148,  149, 1211,  997, 1017,  208, 1008,  928,
  929,  930, 1019,  931,  932,  933,  934, 1013,  935,  936,
  198, 1593,  937,  938,  939,  940, 1020, 1021, 1557,  941,
  942,  200, 1024, 1310, 1597, 1031,  150, 1032,  808,  291,
  292,  293, 1025,   67,   68,  925,   69,  152,  153,  154,
 1033,   27,   28,   29,   30,   31,   32,   33, 1034, 1035,
 1036, 1340, 1341, 1342, 1037, 1047, 1038, 1039, 1351, 1352,
 1353, 1354, 1355, 1356, 1045, 1358, 1359, 1361, 1046, 1364,
 1365, 1366, 1367, 1368, 1369, 1370, 1056, 1372,  423, 1374,
 1054, 1377, 1088, 1381, 1094, 1059, 1096,  943, 1098, 1097,
 1099, 1102, 1060, 1149, 1061, 1062, 1063, 1152, 1214, 1161,
 1665, 1164, 1169, 1215, 1216, 1634,  199, 1217, 1621, 1218,
 1220, 1250, 1251, 1676, 1252,   92,   92,   92,   92,   92,
 1299, 1300, 1301, 1302, 1303, 1256, 1257, 1263,  240,  241,
  242, 1678, 1266, 1064, 1065, 1066, 1269,   92,   92, 1272,
  392, 1267, 1286, 1409, 1283,  208, 1284, 1285, 1412,  291,
  292,  293, 1287,  243,   92,   92,   92,   92, 1288, 1419,
 1289,   92,   92,  104, 1290, 1293, 1297,   92, 1298, 1426,
   92, 1295,  925, 1429, 1430, 1329,  808,   92,   92, 1067,
 1068, 1069, 1330, 1070, 1433, 1334, 1071, 1331, 1335, 1336,
 1337, 1338,  491, 1677,  208, 1387,    7,   10,   13, 1389,
 1391, 1392, 1395, 1404, 1406, 1440, 1444, 1405, 1411, 1414,
 1410, 1432,  155, 1415,  925,  662,   40, 1427, 1174, 1455,
 1456, 1457, 1458, 1459, 1460,  392, 1462, 1176, 1182, 1184,
 1186, 1188,   92,   92, 1190,   92,   92,   92, 1192,   92,
   92,   92,   92,   92,   92,   92,   92,   92,  244,   40,
  245,  246,  247,  248,   40, 1194,   40,   40,   40, 1196,
   40,  191, 1198,   40,  192,  193,  194,  195, 1200,  196,
  197,  198, 1448, 1451, 1447,   40,   40,   40,   40, 1452,
 1453, 1463,  208,  208,  208,  208,  208, 1465, 1454, 1464,
 1466, 1467, 1468, 1469, 1470, 1471,  208, 1472, 1473, 1474,
 1475,  208, 1476, 1513,  208,  208,   34,   40, 1477,   40,
 1518, 1478, 1479,  808,  808,  808,  808,  808, 1480, 1481,
  393,  208,  208,  208,  208, 1483,  208,  208,  208,  208,
 1482, 1484, 1485, 1487,  208,  808,  808,  208, 1486,   40,
 1488,   40, 1489, 1490,  208,  208,  208, 1492, 1493, 1499,
 1491, 1505,  808,  808,  808,  808, 1500, 1509, 1510,  808,
  808, 1511, 1515, 1516, 1343,  808, 1517,  808,  808, 1345,
 1347, 1349, 1249, 1519, 1527,  808,  808, 1520, 1521,  156,
  392,  208,  208,  392,  392,  392,  392, 1523,  392,  392,
  392, 1522,   95, 1525, 1526,   96, 1568, 1569, 1570,  208,
  208, 1528,  208,  208,  208,  393,  208,  208,  208,  208,
  208,  208,  208,  208,  208, 1529, 1530, 1531,   97,   98,
 1532, 1533, 1535,   99, 1537,  100, 1538, 1539, 1534, 1536,
  808,  808,  101,  808,  808,  808, 1540,  808,  808,  808,
  808,  808,  808,  808,  808,  808, 1541, 1542, 1604,  102,
 1543, 1544, 1545, 1610, 1604, 1613, 1546, 1617, 1547, 1610,
 1604, 1613, 1548, 1550,  103, 1549, 1551, 1563, 1508, 1558,
 1552, 1561, 1567, 1573, 1574, 1575,   40,   40,   40,   40,
 1591, 1610, 1604, 1613,   40, 1576,  921,   40, 1594,   40,
   40,   40,   40,   40,   40,   40, 1596,   40,   40,   40,
   40, 1598,   40,   40,   40, 1599,   40,   40,   40,   40,
 1600, 1636,   40,   40,   40,   40,   97, 1637, 1648, 1666,
    2,   99,   40,  100,   40, 1645, 1667,   40, 1668, 1673,
  101,   40,   40, 1670,   40, 1674, 1675, 1679,   40,   40,
   40,   40,  393,  641, 1672,  393,  281,  102,   67,   68,
  216,   69,  119, 1684, 1682,   40,  126,  437,  438,  104,
  393,  137,  103,  393,  393,  393,  393,   29,  393,  393,
  393, 1154,  811,  867,   40,   40,   40,   40,   40,  745,
   40,   40,  545,  399,   98,  846,  756,  543,  838,  546,
   40,   40,  538,  138,  763,  541,  868,  757,  542,  550,
  271,  157,  143,  839,   74,  847,  164,   40,  719,  720,
  240,  144,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
  147,  167,  210,  576,  566,    4,  298,  642,   28,  210,
   31,   58,   28,   55,   55,   40,   40,   40,   40,   94,
   40,   40,   40,   40,  106,   55,   40,   55,   40,   55,
   40,   40,   40,   40,  109,   40,   40,  566,   40,   40,
   40,  112,  566,  115,  566,  566,  566,   40,  566,   13,
   55,  566,  313,  152,  153,  154,   55,   55, 1050,  643,
  118, 1265,  644,  566,  566,  566,  566,  668,   55,   55,
 1273, 1059, 1566, 1150,  980,   40,   40,   40, 1060,   55,
 1061, 1062, 1063, 1424,   55,   97, 1264, 1328,   55, 1173,
   99,   55,  100,   40,   40,  566,   40,   40,   40,  101,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   55,
   40, 1385,  922, 1163, 1416, 1425,  102,  988,  601, 1064,
 1065, 1066, 1160,  707,  163,  812,  812,  566,  812,  566,
   93,  103, 1388,   27,   28,   29,   30,   31,   32,   33,
  268,  269,  270,  239,  271,  272,  273,  274,  758,  275,
  276,  166,  998,  277,  278,  279,  280,  860,  542,  210,
 1002,  857,  989,  202,  799, 1067, 1068, 1069,  715, 1070,
    0,    0, 1071,  638,    0,    0,    0,    0,   67,   68,
    0,   69,    0,    0,    0,    0,  126,    0,    0,  127,
    0,    0,    0,  128,  129,  130,  131,  132,    0,  133,
  134,  135,  136,    0,  137,  138,    0,    0,  139,  140,
  141,  142,    0,    0,   98,  143,  144,    0,  210,    0,
  812,  812,  812,  860,  145,    0,  146,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  147,  148,  149,    0,  812,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  298,
    0,    0,    0,    0,  566,  566,  298,  566,  298,  298,
  298,    0,  566,    0,    0,  566,  150,  566,  566,  566,
  566,  566,  566,  566,  210,  566,  566,  566,  566,    0,
  566,  566,    0,    0,  566,  566,  566,  566,    0,    0,
  566,  566,  566,  566,    0,    0,    0,  298,  298,  298,
  566,    0,  566,    0,    0,  566,    0,    0,    0,    0,
  566,    0,    0,    0,    0,    0,  566,  566,  566,  566,
    0,    0,    0,  152,  153,  154,    0,    0,    0,    0,
  812,    0,  812,  812,  812,  812,    0,    0,    0,    0,
    0,    0,    0,  298,  298,  298,    0,  298,    0,    0,
  298,    0,  566,    0,  566,  566,  566,    0,    0,    0,
    0,  860,    0,    0,    0,    0,    0,    0,  566,  566,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  860,  566,    0,    0,    0,    0,
  566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
  566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
  566,  566,  566,  566,  566,  566,  566,  566,  566,    0,
    0,    0,  210,  566,    0,    0,  566,  566,    0,    0,
    0,    0,  567,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  566,  566,  566,  566,    0,  566,  566,
  566,  566,  155,    0,  566,    0,  566,    0,  566,  566,
  566,    0,    0,  566,  566,  567,  566,  566,  566,    0,
  567,  210,  567,  567,  567,  566,  567,    0,    0,  567,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  567,  567,  567,  567,    0,    0,    0,  860,    0,
    0,    0,    0,  566,  566,   77,   78,   79,   80,   81,
   82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
    0,  566,  566,  567,  566,  566,  566,    0,  566,  566,
  566,  566,  566,  566,  566,  566,  566,    0,  566,    0,
  860,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  860,    0,    0,  860,    0,  567, 1664,  567,    0,  210,
  210,  210,  210,  210,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  210,    0,    0,    0,    0,  210,    0,
    0,  210,  210,    0,  861,    0,    0,   93,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  210,  210,
  210,  210,    0,  210,  210,  210,  210,    0,    0,    0,
    0,  210,    0,    0,  210,    0,    0,    0,    0,    0,
    0,  210,  210,  210,  860,  860,  860,  860,  860,  860,
  860,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
  861,    0,    0,    0,    0,    0,    0,    0,  210,  210,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  210,  210,    0,  210,
  210,  210,    0,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  567,  567,    0,  567,    0,    0,    0,    0,
  567,    0,    0,  567,    0,  567,  567,  567,  567,  567,
  567,  567,   93,  567,  567,  567,  567,    0,  567,  567,
    0,    0,  567,  567,  567,  567,    0, 1649,  567,  567,
  567,  567,    0,    0,    0,    0,    0,    0,  567,    0,
  567,    0, 1650,  567,    0,    0,    0,    0,  567,  216,
    0,    0,    0,    0,  567,  567,  567,  567, 1651,    0,
    0,    0,    0,    0, 1312, 1313, 1314, 1652, 1315, 1316,
 1317, 1318,    0, 1319, 1320,  198,    0, 1321, 1322, 1323,
 1324, 1653, 1654, 1655, 1656,    0, 1325,    0,    0,    0,
  567,    0,  567,  567,  567,    0,    0,    0,  861,    0,
    0,    0,    0,    0,    0,    0,  567,  567,    0,    0,
    0,    0,    0, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
    0,  861,    0,  567,    0,    0,    0,    0,  567,  567,
  567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
  567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
  567,  567,  567,  567,  567,  567,  567,    0,    0,    0,
   93,  567,    0,    0,  567,  567,    0,    0,    0,    0,
  560,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  567,  567,  567,  567,    0,  567,  567,  567,  567,
    0,    0,  567,    0,  567,    0,  567,  567,  567,    0,
    0,  567,  567,  560,  567,  567,  567,    0,  560,    0,
  560,  560,  560,  567,  560,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  560,
  560,  560,  560,    0,    0,  861,    0,    0,    0,    0,
    0,  567,  567,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  567,
  567,  560,  567,  567,  567,    0,  567,  567,  567,  567,
  567,  567,  567,  567,  567,    0,  567,  861,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  861,    0,    0,
  861,    0,    0,  560,    0,  560,    0,   93,   93,   93,
   93,   93,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
   93,    0,  862,    0,    0,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   93,   93,   93,   93,
    0,    0,    0,   93,   93,    0,    0,    0,    0,   93,
    0,    0,   93,    0,    0,    0,    0,    0,    0,   93,
   93,  861,  861,  861,  861,  861,  861,  861,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  127,   94,    0,    0,    0,  862,  130,
  131,  132,    0,  133,  134,  135,  136,    0,  137,  138,
    0,    0,  139,  140,  141,  142,    0,    0,    0, 1382,
  144,    0,    0,    0,   93,   93,    0,   93,   93,   93,
    0,   93,   93,   93,   93,   93,   93,   93,   93,   93,
  560,  560,    0,  560,    0,    0,    0,    0,  560,    0,
    0,  560,    0,  560,  560,  560,  560,  560,  560,  560,
   94,  560,  560,  560,  560,    0,  560,  560, 1383,    0,
  560,  560,  560,  560,    0,    0,  560,  560,  560,  560,
    0,    0,    0,    0,    0,    0,  560, 1384,  560,    0,
    0,  560,    0,    0,    0,    0,  560,    0,    0,    0,
    0,    0,  560,  560,  560,  560,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  560,    0,
  560,  560,  560,    0,    0,    0,  862,    0,    0,    0,
    0,    0,    0,    0,  560,  560,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  862,
    0,  560,    0,    0,    0,    0,  560,  560,  560,  560,
  560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
  560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
  560,  560,  560,  560,  560,    0,    0,    0,   94,  560,
    0,    0,  560,  560,    0,    0,    0,    0,  558,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  560,
  560,  560,  560,    0,  560,  560,  560,  560,    0,    0,
  560,    0,  560,    0,  560,  560,  560,    0,    0,  560,
  560,  558,  560,  560,  560,    0,  558,    0,  558,  558,
  558,  560,  558,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  558,  558,  558,
  558,    0,    0,  862,    0,    0,    0,    0,    0,  560,
  560,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  560,  560,  558,
  560,  560,  560,    0,  560,  560,  560,  560,  560,  560,
  560,  560,  560,    0,  560,  862,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  862,    0,    0,  862,    0,
    0,  558,    0,  558,    0,   94,   94,   94,   94,   94,
  928,  929,  930,    0,  931,  932,  933,  934,    0,  935,
  936,  198,    0,  937,  938,  939,  940,   94,   94,    0,
  941,  942,    0,  805,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   94,   94,   94,   94,    0,    0,
    0,   94,   94,    0,    0,    0,    0,   94,    0,    0,
   94,    0,    0,    0,    0,    0,    0,   94,   94,  862,
  862,  862,  862,  862,  862,  862,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  805,    0,    0,    0,    0,    0,  943,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   94,   94,    0,   94,   94,   94,    0,   94,
   94,   94,   94,   94,   94,   94,   94,   94,  558,  558,
    0,  558,    0,    0,    0,    0,  558,    0,    0,  558,
    0,  558,  558,  558,  558,  558,  558,  558,  805,  558,
  558,  558,  558,    0,  558,  558,    0,    0,  558,  558,
  558,  558,    0,    0,  558,  558,  558,  558,    0,    0,
    0,    0,    0,    0,  558,    0,  558,    0,    0,  558,
    0,    0,    0,    0,  558, 1105,    0,    0,    0,    0,
  558,  558,  558,  558,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1106, 1107,    0, 1108, 1109, 1110,
 1111, 1112, 1113,    0, 1114, 1115,    0, 1116, 1117, 1118,
 1119, 1120,    0,    0,    0,    0,  558,    0,  558,  558,
  558,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  558,  558,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  558,
    0,    0,    0,    0,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,    0,    0,    0,  805,  558,    0,    0,
  558,  558,    0,    0,    0,    0,  556,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  558,  558,  558,
  558,    0,  558,  558,  558,  558,    0,    0,  558,    0,
  558,    0,  558,  558,  558,    0,    0,  558,  558,  556,
  558,  558,  558,    0,  556,    0,  556,  556,  556,  558,
  556,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  556,  556,  556,  556,    0,
    0,    0,    0,    0,    0,    0,    0,  558,  558,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  558,  558,  556,  558,  558,
  558,    0,  558,  558,  558,  558,  558,  558,  558,  558,
  558,    0,  558, 1121, 1122,    0, 1123, 1124, 1125,    0,
 1126, 1127,    0,    0, 1128, 1129,    0, 1130,    0,  556,
    0,  556,    0,  805,  805,  805,  805,  805,    0,    0,
 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
 1141, 1142, 1143, 1144,    0,  805,  805,    0,    0,    0,
    0,   47,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  805,  805,  805,  805,    0,    0,    0,  805,
  805,    0,    0,    0,    0,  805,    0,    0,  805,    0,
    0,    0,    0,    0,    0,  805,  805,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   47,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  805,  805,    0,  805,  805,  805,    0,  805,  805,  805,
  805,  805,  805,  805,  805,  805,  556,  556,    0,  556,
    0,    0,    0,    0,  556,    0,    0,  556,    0,  556,
  556,  556,  556,  556,  556,  556,   47,  556,  556,  556,
  556,    0,  556,  556,    0,    0,  556,  556,  556,  556,
    0,    0,  556,  556,  556,  556,    0,    0,    0,    0,
    0,    0,  556,    0,  556,    0,    0,  556,    0,    0,
    0,    0,  556,    0,    0,    0,    0,    0,  556,  556,
  556,  556,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  556,    0,  556,  556,  556,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  556,  556,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  556,    0,    0,
    0,    0,  556,  556,  556,  556,  556,  556,  556,  556,
  556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
  556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
  556,    0,    0,    0,   47,  556,    0,    0,  556,  556,
    0,    0,    0,    0,  557,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  556,  556,  556,  556,    0,
  556,  556,  556,  556,    0,    0,  556,    0,  556,    0,
  556,  556,  556,    0,    0,  556,  556,  557,  556,  556,
  556,    0,  557,    0,  557,  557,  557,  556,  557,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  557,  557,  557,  557,    0,    0,    0,
    0,    0,    0,    0,    0,  556,  556,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  556,  556,  557,  556,  556,  556,    0,
  556,  556,  556,  556,  556,  556,  556,  556,  556,    0,
  556,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   67,   68,    0,   69,    0,    0,  557,    0,  557,
    0,   47,   47,   47,   47,   47,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   47,   47,  375,    0,    0,    0,   48,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   47,   47,   47,   47,    0,    0,    0,   47,   47,    0,
    0,    0,    0,   47,  376,    0,   47,    0,  377,    0,
    0,  378,  379,   47,   47,    0,  380,  381,  382,  383,
  384,  385,  386,  387,  388,  389,  390,  391,    0,    0,
    0,    0,    0,    0,  392,    0,    0,  393,   48,    0,
    0,    0,    0,    0,  394,    0,    0,    0,    0,    0,
    0,    0,    0,  395,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   47,   47,
    0,   47,   47,   47,    0,   47,   47,   47,   47,   47,
   47,   47,   47,   47,  557,  557,    0,  557,    0,    0,
    0,    0,  557,    0,    0,  557,    0,  557,  557,  557,
  557,  557,  557,  557,   48,  557,  557,  557,  557,    0,
  557,  557,    0,    0,  557,  557,  557,  557,    0,    0,
  557,  557,  557,  557,    0,    0,    0,    0,    0,    0,
  557,    0,  557,    0,    0,  557,    0,    0,    0,    0,
  557,    0,    0,    0,    0,    0,  557,  557,  557,  557,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  557,    0,  557,  557,  557,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  557,  557,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  557,    0,    0,    0,    0,
  557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
  557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
  557,  557,  557,  557,  557,  557,  557,  557,  557,    0,
    0,    0,   48,  557,    0,    0,  557,  557,    0,    0,
    0,    0,  559,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  557,  557,  557,  557,    0,  557,  557,
  557,  557,    0,    0,  557,    0,  557,    0,  557,  557,
  557,    0,    0,  557,  557,  559,  557,  557,  557,    0,
  559,    0,  559,  559,  559,  557,  559,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  559,  559,  559,  559,    0,    0,    0,    0,    0,
    0,    0,    0,  557,  557,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  557,  557,  559,  557,  557,  557,    0,  557,  557,
  557,  557,  557,  557,  557,  557,  557,    0,  557,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  105,
  105,    0,  105,    0,    0,  559,    0,  559,    0,   48,
   48,   48,   48,   48,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   48,   48,  105,    0,    0,    0,   49,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   48,   48,
   48,   48,    0,    0,    0,   48,   48,    0,    0,    0,
    0,   48,  105,    0,   48,    0,  105,    0,    0,  105,
  105,   48,   48,    0,  105,  105,  105,  105,  105,  105,
  105,  105,  105,  105,  105,  105,    0,    0,    0,    0,
    0,    0,  105,    0,    0,  105,   49,    0,    0,    0,
    0,    0,  105,    0,    0,    0,    0,    0,    0,    0,
    0,  105,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   48,   48,    0,   48,
   48,   48,    0,   48,   48,   48,   48,   48,   48,   48,
   48,   48,  559,  559,    0,  559,    0,    0,    0,    0,
  559,    0,    0,  559,    0,  559,  559,  559,  559,  559,
  559,  559,   49,  559,  559,  559,  559,    0,  559,  559,
    0,    0,  559,  559,  559,  559,    0,    0,  559,  559,
  559,  559,    0,    0,    0,    0,    0,    0,  559,    0,
  559,    0,    0,  559,    0,    0,    0,    0,  559,    0,
    0,    0,    0,    0,  559,  559,  559,  559,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  559,    0,  559,  559,  559,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  559,  559,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  559,    0,    0,    0,    0,  559,  559,
  559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
  559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
  559,  559,  559,  559,  559,  559,  559,    0,    0,    0,
   49,  559,    0,    0,  559,  559,    0,    0,    0,    0,
  717,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  559,  559,  559,  559,    0,  559,  559,  559,  559,
    0,    0,  559,    0,  559,    0,  559,  559,  559,    0,
    0,  559,  559,  717,  559,  559,  559,    0,  717,    0,
  717,  717,  717,  559,  717,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  717,
  717,  717,  717,    0,    0,    0,    0,    0,    0,    0,
    0,  559,  559,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  559,
  559,  717,  559,  559,  559,    0,  559,  559,  559,  559,
  559,  559,  559,  559,  559,    0,  559,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  717,    0,  717,    0,   49,   49,   49,
   49,   49,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   49,
   49,    0,    0,    0,    0,   50,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   49,   49,   49,   49,
    0,    0,    0,   49,   49,    0,    0,    0,    0,   49,
    0,    0,   49,    0,    0,    0,    0,    0,    0,   49,
   49,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   50,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   49,   49,    0,   49,   49,   49,
    0,   49,   49,   49,   49,   49,   49,   49,   49,   49,
  717,  717,    0,  717,    0,    0,    0,    0,  717,    0,
    0,  717,    0,  717,  717,  717,  717,  717,  717,  717,
   50,  717,  717,  717,  717,    0,  717,  717,    0,    0,
  717,  717,  717,  717,    0,    0,  717,  717,  717,    0,
    0,    0,    0,    0,    0,    0,  717,    0,  717,    0,
    0,  717,    0,    0,    0,    0,  717,    0,    0,    0,
    0,    0,  717,  717,  717,  717,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  717,    0,
  717,  717,  717,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  717,  717,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  717,    0,    0,    0,    0,  717,  717,  717,  717,
  717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
  717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
  717,  717,  717,  717,  717,    0,    0,    0,   50,  717,
    0,    0,  717,  717,    0,    0,    0,    0,  716,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  717,
  717,  717,  717,    0,  717,  717,  717,  717,    0,    0,
  717,    0,  717,    0,  717,  717,  717,    0,    0,  717,
  717,  716,  717,  717,  717,    0,  716,    0,  716,  716,
  716,  717,  716,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  716,  716,  716,
  716,    0,    0,    0,    0,    0,    0,    0,    0,  717,
  717,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  717,  717,  716,
  717,  717,  717,    0,  717,  717,  717,  717,  717,  717,
  717,  717,  717,    0,  717,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  716,    0,  716,    0,   50,   50,   50,   50,   50,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   50,   50,    0,
    0,    0,    0,   51,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   50,   50,   50,   50,    0,    0,
    0,   50,   50,    0,    0,    0,    0,   50,    0,    0,
   50,    0,    0,    0,    0,    0,    0,   50,   50,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   51,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   50,   50,    0,   50,   50,   50,    0,   50,
   50,   50,   50,   50,   50,   50,   50,   50,  716,  716,
    0,  716,    0,    0,    0,    0,  716,    0,    0,  716,
    0,  716,  716,  716,  716,  716,  716,  716,   51,  716,
  716,  716,  716,    0,  716,  716,    0,    0,  716,  716,
  716,  716,    0,    0,  716,  716,  716,    0,    0,    0,
    0,    0,    0,    0,  716,    0,  716,    0,    0,  716,
    0,    0,    0,    0,  716,    0,    0,    0,    0,    0,
  716,  716,  716,  716,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  716,    0,  716,  716,
  716,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  716,  716,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  716,
    0,    0,    0,    0,  716,  716,  716,  716,  716,  716,
  716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
  716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
  716,  716,  716,    0,    0,    0,   51,  716,    0,    0,
  716,  716,    0,    0,    0,    0,  715,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  716,  716,  716,
  716,    0,  716,  716,  716,  716,    0,    0,  716,    0,
  716,    0,  716,  716,  716,    0,    0,  716,  716,  715,
  716,  716,  716,    0,  715,    0,  715,  715,  715,  716,
  715,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  715,  715,  715,  715,    0,
    0,    0,    0,    0,    0,    0,    0,  716,  716,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  716,  716,  715,  716,  716,
  716,    0,  716,  716,  716,  716,  716,  716,  716,  716,
  716,    0,  716,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  715,
    0,  715,    0,   51,   51,   51,   51,   51,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   51,   51,    0,    0,    0,
    0,  808,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   51,   51,   51,   51,    0,    0,    0,   51,
   51,    0,    0,    0,    0,   51,    0,    0,   51,    0,
    0,    0,    0,    0,    0,   51,   51,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  808,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   51,   51,    0,   51,   51,   51,    0,   51,   51,   51,
   51,   51,   51,   51,   51,   51,  715,  715,    0,  715,
    0,    0,    0,    0,  715,    0,    0,  715,    0,  715,
  715,  715,  715,  715,  715,  715,  808,  715,  715,  715,
  715,    0,  715,  715,    0,    0,  715,  715,  715,  715,
    0,    0,  715,  715,  715,    0,    0,    0,    0,    0,
    0,    0,  715,    0,  715,    0,    0,  715,    0,    0,
    0,    0,  715,    0,    0,    0,    0,    0,  715,  715,
  715,  715,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  715,    0,  715,  715,  715,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  715,  715,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  715,    0,    0,
    0,    0,  715,  715,  715,  715,  715,  715,  715,  715,
  715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
  715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
  715,    0,    0,    0,  808,  715,    0,    0,  715,  715,
    0,    0,    0,    0,  714,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  715,  715,  715,  715,    0,
  715,  715,  715,  715,    0,    0,  715,    0,  715,    0,
  715,  715,  715,    0,    0,  715,  715,  714,  715,  715,
  715,    0,  714,    0,  714,  714,  714,  715,  714,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  714,  714,  714,  714,    0,    0,    0,
    0,    0,    0,    0,    0,  715,  715,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  715,  715,  714,  715,  715,  715,    0,
  715,  715,  715,  715,  715,  715,  715,  715,  715,    0,
  715,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  714,    0,  714,
    0,  808,  808,  808,  808,  808,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  808,  808,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  808,  808,  808,  808,    0,    0,    0,  808,  808,    0,
    0,    0,    0,  808,    0,    0,  808,    0,    0,    0,
    0,    0,    0,  808,  808,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  808,  808,
    0,  808,  808,  808,    0,  808,  808,  808,  808,  808,
  808,  808,  808,  808,  714,  714,    0,  714,    0,    0,
    0,    0,  714,    0,    0,  714,    0,  714,  714,  714,
  714,  714,  714,  714,    0,  714,  714,  714,  714,    0,
  714,  714,    0,    0,  714,  714,  714,  714,    0,    0,
  714,  714,  714,    0,    0,    0,    0,    0,    0,  724,
  714,    0,  714,    0,    0,  714,    0,    0,    0,    0,
  714,    0,    0,    0,    0,    0,  714,  714,  714,  714,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  724,    0,    0,    0,    0,    0,    0,  724,
  724,    0,    0,  724,    0,    0,    0,    0,    0,    0,
    0,    0,  714,    0,  714,  714,  714,    0,  724,    0,
  724,  724,    0,    0,    0,    0,    0,    0,  714,  714,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  714,    0,    0,    0,    0,
  714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
  714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
  714,  714,  714,  714,  714,  714,  714,  714,  714,    0,
    0,    0,  724,  714,  724,    0,  714,  714,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  714,  714,  714,  714,    0,  714,  714,
  714,  714,    0,    0,  714,    0,  714,    0,  714,  714,
  714,    0,    0,  714,  714,    0,  714,  714,  714,    0,
    0,    0,    0,    0,    0,  714,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  714,  714,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  714,  714,    0,  714,  714,  714,    0,  714,  714,
  714,  714,  714,  714,  714,  714,  714,    0,  714,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  724,
  724,    0,  724,    0,    0,    0,    0,  724,    0,    0,
  724,    0,  724,  724,  724,  724,  724,  724,  724,    0,
  724,  724,  724,  724,    0,  724,  724,    0,    0,  724,
  724,  724,  724,    0,    0,  724,  724,  724,    0,    0,
    0,   52,    0,  400,   97,  724,    0,  724,    0,   99,
  724,  100,    0,    0,    0,  724,    0,    0,  101,    0,
    0,  724,  724,  724,  724,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  102,  401,    0,  402,  403,
  404,  405,  406,    0,    0,    0,    0,  407,    0,    0,
  103,    0,    0,    0,    0,    0,  408,  724,    0,    0,
   52,  409,    0,  410,    0,    0,    0,    0,    0,    0,
    0,  157,    0,  724,  724,  411,  412,  413,  414,  415,
  416,  417,  418,    0,    0,    0,    0,    0,  419,    0,
  724,    0,    0,    0,    0,  724,  724,  724,  724,  724,
  724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
  724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
  724,  724,  724,  724,   52,    0,   52,    0,  724,    0,
    0,  724,  724,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  724,  724,
  724,  724,    0,  724,  724,  724,  724,    0,    0,  724,
    0,  724,    0,  724,  724,  724,    0,    0,  724,  724,
    0,  724,  724,  724,    0,    0,    0,    0,    0,    0,
  724,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  724,  724,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  724,  724,    0,  724,
  724,  724,    0,  724,  724,  724,  724,  724,  724,  724,
  724,  724,    0,  724,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   52,    0,    0,   52,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   52,    0,    0,    0,   52,   52,
   52,    0,   52,   52,   52,   52,    0,   52,   52,   52,
    0,   52,   52,   52,   52,    0,    0,   52,   52,   52,
    0,    0,    0,    0,    0,    0,    0,    0,  265,  127,
  266,    0,   54,  128,  129,  130,  131,  132,    0,  133,
  134,  135,  136,   52,  137,  138,    0,    0,  139,  140,
  141,  142,    0,    0,    0,  143,  144,    0,    0,    0,
   52,    0,    0,    0,  145,    0,  146,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   52,  147,  148,  149,    0,   52,   52,    0,    0,    0,
    0,   54,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  157,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  150,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,    0,    0,    0,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   54,    0,   54,    0,    0,
  921,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   52,   52,   52,   52,    0,   52,   52,   52,   52,    0,
    0,   52,    0,   52,    0,   52,   52,   52,   52,    0,
   52,   52,    0,   52,   52,   52,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   52,   52,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   52,   52,
    0,   52,   52,   52,    0,   52,   52,   52,   52,   52,
   52,   52,   52,   52,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   54,    0,    0,   54,    0,    0,    0,    0,
    0,    0,  155,    0,    0,   54,    0,    0,    0,   54,
   54,   54,    0,   54,   54,   54,   54,    0,   54,   54,
   54,    0,   54,   54,   54,   54,    0,    0,   54,   54,
   54,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  127,    0,    0,   55,  128,  129,  130,  131,  132,    0,
  133,  134,  135,  136,   54,  137,  138,    0,    0,  139,
  140,  141,  142,    0,    0,    0,  143,  144,    0,    0,
    0,   54,    0,    0,    0,  145,    0,  146,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   54,  147,  148,  149,    0,   54,   54,    0,    0,
    0,    0,   55,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  232,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  150,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,    0,    0,    0,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   55,    0,   55,    0,
    0,  232,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   54,   54,   54,   54,    0,   54,   54,   54,   54,
    0,    0,   54,    0,   54,    0,   54,   54,   54,   54,
    0,   54,   54,    0,   54,   54,   54,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   54,   54,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
   54,    0,   54,   54,   54,    0,   54,   54,   54,   54,
   54,   54,   54,   54,   54,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   55,    0,    0,   55,    0,    0,    0,
    0,    0,    0,  155,    0,    0,   55,    0,    0,    0,
   55,   55,   55,    0,   55,   55,   55,   55,    0,   55,
   55,   55,    0,   55,   55,   55,   55,    0,    0,   55,
   55,   55,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  232,    0,    0,   56,  232,  232,  232,  232,  232,
    0,  232,  232,  232,  232,   55,  232,  232,    0,    0,
  232,  232,  232,  232,    0,    0,    0,  232,  232,    0,
    0,    0,   55,    0,    0,    0,  232,    0,  232,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   55,  232,  232,  232,    0,   55,   55,    0,
    0,    0,    0,   56,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  225,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  232,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,    0,    0,
    0,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   56,    0,   56,
    0,    0,  225,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   55,   55,   55,   55,    0,   55,   55,   55,
   55,    0,    0,   55,    0,   55,    0,   55,   55,   55,
   55,    0,   55,   55,    0,   55,   55,   55,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   55,   55,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   55,   55,    0,   55,   55,   55,    0,   55,   55,   55,
   55,   55,   55,   55,   55,   55,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   56,    0,    0,   56,    0,    0,
    0,    0,    0,    0,  232,    0,    0,   56,    0,    0,
    0,   56,   56,   56,    0,   56,   56,   56,   56,    0,
   56,   56,   56,    0,   56,   56,   56,   56,    0,    0,
   56,   56,   56,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  225,    0,    0,   53,  225,  225,  225,  225,
  225,    0,  225,  225,  225,  225,   56,  225,  225,    0,
    0,  225,  225,  225,  225,    0,    0,    0,  225,  225,
    0,    0,    0,   56,    0,    0,    0,  225,    0,  225,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   56,  225,  225,  225,    0,   56,   56,
    0,    0,    0,    0,   53,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  225,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,    0,
    0,    0,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   53,    0,
   53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   56,   56,   56,   56,    0,   56,   56,
   56,   56,    0,    0,   56,    0,   56,    0,   56,   56,
   56,   56,    0,   56,   56,    0,   56,   56,   56,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   61,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   56,   56,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   56,   56,    0,   56,   56,   56,    0,   56,   56,
   56,   56,   56,   56,   56,   56,   56,    0,    0,    0,
    0,    0,    0,    0,   61,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   53,    0,    0,   53,    0,
    0,    0,    0,    0,    0,  225,    0,    0,   53,    0,
    0,    0,   53,   53,   53,    0,   53,   53,   53,   53,
    0,   53,   53,   53,    0,   53,   53,   53,   53,    0,
    0,   53,   53,   53,    0,    0,    0,    0,   61,    0,
   61,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   53,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   53,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   53,    0,    0,    0,    0,   53,
   53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
    0,    0,    0,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,    0,
    0,   62,    0,    0,    0,   61,    0,    0,   61,    0,
    0,    0,    0,    0,   53,   53,   53,   53,   61,   53,
   53,   53,   53,    0,    0,   53,    0,   53,    0,   53,
   53,   53,   53,    0,   53,   53,    0,   53,   53,   53,
    0,   61,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   62,    0,    0,    0,    0,    0,    0,   61,    0,    0,
    0,    0,    0,    0,   53,   53,    0,    0,    0,    0,
    0,    0,    0,    0,   61,    0,    0,    0,    0,    0,
    0,    0,   53,   53,    0,   53,   53,   53,    0,   53,
   53,   53,   53,   53,   53,   53,   53,   53,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   62,    0,   62,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   61,    0,    0,    0,
    0,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
    0,    0,    0,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,    0,
    0,   65,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   61,   61,   61,   61,    0,   61,
   61,   61,   61,    0,    0,   61,    0,   61,    0,   61,
   61,   61,   61,    0,   61,   61,    0,   61,   61,   61,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   65,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   61,   61,    0,    0,    0,    0,
    0,   62,    0,    0,   62,    0,    0,    0,    0,    0,
    0,    0,   61,   61,   62,   61,   61,   61,    0,   61,
   61,   61,   61,   61,   61,   61,   61,   61,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   62,    0,    0,
    0,    0,    0,    0,   65,    0,   65,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   62,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   62,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   62,    0,    0,    0,    0,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,    0,    0,    0,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,    0,    0,   66,    0,    0,
    0,   65,    0,    0,   65,    0,    0,    0,    0,    0,
   62,   62,   62,   62,   65,   62,   62,   62,   62,    0,
    0,   62,    0,   62,    0,   62,   62,   62,   62,    0,
   62,   62,    0,   62,   62,   62,    0,   65,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   66,    0,    0,    0,
    0,    0,    0,   65,    0,    0,    0,    0,    0,    0,
   62,   62,    0,    0,    0,    0,    0,    0,    0,    0,
   65,    0,    0,    0,    0,    0,    0,    0,   62,   62,
    0,   62,   62,   62,    0,   62,   62,   62,   62,   62,
   62,   62,   62,   62,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   66,    0,   66,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   65,    0,    0,    0,    0,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,    0,    0,    0,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,    0,    0,    0,    0,    0,
    0,    0,  571,    0,    0,    0,    0,    0,    0,    0,
   65,   65,   65,   65,    0,   65,   65,   65,   65,    0,
    0,   65,    0,   65,    0,   65,   65,   65,   65,    0,
   65,   65,    0,   65,   65,   65,    0,    0,    0,    0,
    0,    0,  571,  571,    0,    0,  571,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  571,    0,  571,    0,    0,    0,    0,    0,    0,
   65,   65,    0,    0,    0,    0,    0,   66,    0,    0,
   66,    0,    0,    0,    0,    0,    0,    0,   65,   65,
   66,   65,   65,   65,    0,   65,   65,   65,   65,   65,
   65,   65,   65,   65,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   66,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  571,    0,  571,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   66,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,    0,
    0,    0,    0,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,    0,    0,    0,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,    0,    0,  569,    0,    0,    0,    0,    0,    0,
    0,    0,  571,  571,    0,  571,   66,   66,   66,   66,
    0,   66,   66,   66,   66,  571,  571,   66,    0,   66,
    0,   66,   66,   66,   66,    0,   66,   66,    0,   66,
   66,   66,    0,  569,  569,    0,    0,  569,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  569,  571,  569,    0,    0,    0,  571,    0,
    0,    0,    0,    0,  571,    0,   66,   66,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   66,   66,    0,   66,   66,   66,
    0,   66,   66,   66,   66,   66,   66,   66,   66,   66,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  569,    0,  569,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  571,  571,
  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
  571,  571,  571,  571,  571,  571,  571,    0,    0,    0,
  571,  571,  571,  571,  571,  571,  571,    0,    0,    0,
    0,  571,    0,    0,  571,  571,    0,    0,  570,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  571,  571,  571,  571,    0,  571,  571,  571,  571,
    0,    0,  571,    0,  571,    0,  571,  571,  571,    0,
    0,  571,  571,    0,  571,  571,  571,    0,  570,  570,
    0,    0,  570,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  570,    0,  570,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  571,  571,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  569,  569,    0,  571,
  571,    0,  571,  571,  571,    0,  571,  571,  571,  571,
  571,  571,  571,  571,  571,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  570,    0,  570,  569,    0,    0,    0,    0,  569,
    0,    0,    0,    0,    0,  569,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   33,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  569,
  569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
  569,  569,  569,  569,  569,  569,  569,  569,   33,    0,
    0,  569,  569,  569,  569,  569,  569,  569,    0,    0,
    0,    0,  569,    0,    0,  569,  569,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  569,  569,  569,  569,    0,  569,  569,  569,
  569,  570,  570,  569,    0,  569,    0,  569,  569,  569,
    0,    0,  569,  569,    0,  569,  569,  569,    0,    0,
    0,    0,   33,    0,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  570,
    0,    0,    0,    0,  570,    0,    0,    0,    0,    0,
  570,    0,  569,  569,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  569,  569,    0,  569,  569,  569,    0,  569,  569,  569,
  569,  569,  569,  569,  569,  569,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  570,  570,  570,  570,  570,  570,
  570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
  570,  570,  570,    0,    0,    0,  570,  570,  570,  570,
  570,  570,  570,    0,    0,    0,   34,  570,    0,   33,
  570,  570,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,  570,  570,  570,
  570,    0,  570,  570,  570,  570,    0,    0,  570,    0,
  570,    0,  570,  570,  570,    0,    0,  570,  570,    0,
  570,  570,  570,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   34,   33,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  570,  570,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  570,  570,    0,  570,  570,
  570,    0,  570,  570,  570,  570,  570,  570,  570,  570,
  570,    0,    0,    0,    0,    0,    0,  794,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,    0,    0,    0,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,    0,    0,    0,  794,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   33,   33,
   33,   33,    0,   33,   33,   33,   33,   34,    0,   33,
   34,   33,    0,    0,   33,    0,    0,    0,    0,    0,
   34,   33,   33,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  794,    0,  794,    0,    0,    0,    0,    0,   33,   33,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   34,
    0,    0,    0,    0,    0,    0,   33,   33,    0,   33,
   33,   33,    0,   33,   33,   33,   33,   33,   33,   33,
   33,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  796,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,    0,    0,    0,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,    0,    0,    0,  796,    0,    0,  794,    0,    0,
    0,    0,    0,    0,    0,    0,   34,   34,   34,   34,
  794,   34,   34,   34,   34,    0,    0,   34,    0,   34,
    0,    0,   34,    0,    0,    0,    0,    0,    0,   34,
   34,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  796,  794,
  796,    0,    0,    0,    0,    0,   34,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   34,   34,    0,   34,   34,   34,
    0,   34,   34,   34,   34,   34,   34,   34,   34,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  800,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  794,  794,  794,  794,  794,  794,  794,
  794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
  794,  794,    0,    0,    0,  794,  794,  794,  794,  794,
  794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
  794,    0,    0,    0,  800,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  794,  794,  794,  794,
    0,  794,  794,  794,  794,  796,    0,  794,    0,  794,
    0,    0,  794,    0,    0,    0,    0,    0,  796,  794,
  794,  794,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  800,    0,
  800,    0,    0,    0,    0,    0,  794,  794,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  796,    0,    0,
    0,    0,    0,    0,  794,  794,    0,  794,  794,  794,
    0,  794,  794,  794,  794,  794,  794,  794,  794,  794,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  798,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  796,  796,  796,  796,  796,  796,  796,  796,  796,
  796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
    0,    0,    0,  796,  796,  796,  796,  796,  796,  796,
  796,  796,  796,  796,  796,  796,  796,  796,  796,    0,
    0,    0,  798,    0,    0,  800,    0,    0,    0,    0,
    0,    0,    0,    0,  796,  796,  796,  796,  800,  796,
  796,  796,  796,    0,    0,  796,    0,  796,    0,    0,
  796,    0,    0,    0,    0,    0,    0,  796,  796,  796,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  798,  800,  798,    0,
    0,    0,    0,    0,  796,  796,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  796,  796,    0,  796,  796,  796,    0,  796,
  796,  796,  796,  796,  796,  796,  796,  796,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  802,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  800,  800,  800,  800,  800,  800,  800,  800,  800,
  800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
    0,    0,    0,  800,  800,  800,  800,  800,  800,  800,
  800,  800,  800,  800,  800,  800,  800,  800,  800,    0,
    0,    0,  802,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  800,  800,  800,  800,    0,  800,
  800,  800,  800,  798,    0,  800,    0,  800,    0,    0,
  800,    0,    0,    0,    0,    0,  798,  800,  800,  800,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  802,    0,  802,    0,
    0,    0,    0,    0,  800,  800,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  798,    0,    0,    0,    0,
    0,    0,  800,  800,    0,  800,  800,  800,    0,  800,
  800,  800,  800,  800,  800,  800,  800,  800,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  752,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  798,
  798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
  798,  798,  798,  798,  798,  798,  798,  798,    0,    0,
    0,  798,  798,  798,  798,  798,  798,  798,  798,  798,
  798,  798,  798,  798,  798,  798,  798,    0,    0,    0,
  752,    0,    0,  802,    0,    0,    0,    0,    0,    0,
    0,    0,  798,  798,  798,  798,  802,  798,  798,  798,
  798,    0,    0,  798,    0,  798,    0,    0,  798,    0,
    0,    0,    0,    0,    0,  798,  798,  798,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  752,  802,  752,    0,    0,    0,
    0,    0,  798,  798,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  798,  798,    0,  798,  798,  798,    0,  798,  798,  798,
  798,  798,  798,  798,  798,  798,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  754,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  802,
  802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
  802,  802,  802,  802,  802,  802,  802,  802,    0,    0,
    0,  802,  802,  802,  802,  802,  802,  802,  802,  802,
  802,  802,  802,  802,  802,  802,  802,    0,    0,    0,
  754,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  802,  802,  802,  802,    0,  802,  802,  802,
  802,  752,    0,  802,  752,  802,   34,    0,  802,    0,
    0,    0,    0,    0,  752,  802,  802,  802,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  754,    0,  754,    0,    0,    0,
    0,    0,  802,  802,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  752,    0,    0,    0,    0,    0,    0,
  802,  802,  567,  802,  802,  802,    0,  802,  802,  802,
  802,  802,  802,  802,  802,  802,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  752,  752,  752,
  752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
  752,  752,  752,  752,  752,  752,    0,    0,    0,  752,
  752,  752,  752,  752,  752,  752,    0,    0,    0,    0,
  752,    0,  400,  752,  752,    0,    0,    0,    0,    0,
    0,  754,    0,    0,  754,    0,    0,    0,    0,    0,
  752,  752,  752,  752,  754,  752,  752,  752,  752,    0,
    0,  752,    0,  752,    0,  752,  752,  752,    0,    0,
  752,  752,    0,  752,  752,  752,  400,    0,    0,    0,
    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  400,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  754,    0,    0,    0,    0,    0,    0,
  752,  752,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  225,    0,    0,    0,    0,    0,  752,  752,
    0,  752,  752,  752,    0,  752,  752,  752,  752,  752,
  752,  752,  752,  752,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  400,    0,  400,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  754,  754,  754,
  754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
  754,  754,  754,  754,  754,  754,    0,    0,    0,  754,
  754,  754,  754,  754,  754,  754,  442,    0,    0,    0,
  754,    0,    0,  754,  754,    0,    0,    3,    4,    5,
    6,    7,    0,    0,    0,    0,    0,    0,    0,    0,
  754,  754,  754,  754,    0,  754,  754,  754,  754,    8,
    9,  754,    0,  754,    0,  754,  754,  754,    0,    0,
  754,  754,    0,  754,  754,  754,   10,   11,   12,   13,
    0,    0,    0,   14,   15,  442,    0,    0,    0,   16,
    0,    0,   17,    0,    0,    0,    0,    0,    0,   18,
   19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  754,  754,  400,    0,    0,  400,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  400,    0,    0,  754,  754,
    0,  754,  754,  754,    0,  754,  754,  754,  754,  754,
  754,  754,  754,  754,    0,    0,    0,    0,    0,  442,
    0,  442,    0,    0,   20,   21,    0,   22,   23,   24,
    0,   25,   26,   27,   28,   29,   30,   31,   32,   33,
    0,    0,    0,    0,  400,    0,    0,    0,    0,    0,
  225,    0,    0,    0,  225,  225,  225,  225,  225,    0,
  225,  225,  225,  225,    0,  225,  225,    0,    0,  225,
  225,  225,  225,    0,    0,    0,  225,  225,    0,    0,
    0,    0,    0,    0,    0,  225,    0,  225,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  225,  225,  225,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  400,  400,
  400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
  400,  400,  400,  400,  400,  400,  400,  225,    0,    0,
  400,  400,  400,  400,  400,  400,  400,    0,    0,    0,
    0,  400,    0,    0,  400,  400,  442,    0,    0,  442,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  442,
    0,  400,  400,  400,  400,    0,  400,  400,  400,  400,
    0,    0,  400,    0,  400,    0,    0,  400,    0,    0,
    0,    0,    0,    0,  400,  400,  400,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  157,    0,    0,    0,    0,  298,  442,    0,
    0,  297,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  400,  400,    0,    0,    0,    0,    0,    0,  296,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  400,
  400,    0,  400,  400,  400,    0,  400,  400,  400,  400,
  400,  400,  400,  400,  400,    0,    0,    0,    0,    0,
  483,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  442,  442,  442,  442,  442,  442,  442,  442,
  442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
  442,    0,    0,    0,  442,  442,  442,  442,  442,  442,
  442,    0,    0,  225,    0,  442,    0,    0,  442,  442,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  442,  442,  442,  442,    0,
  442,  442,  442,  442,    0,  157,  442,    0,  442,    0,
  298,  442,    0,    0,  752,    0,    0,    0,  442,  442,
  442,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  296,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  442,  442,    0,    0,    0,
    0,    0,    0,  483,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  442,  442,    0,  442,  442,  442,    0,
  442,  442,  442,  442,  442,  442,  442,  442,  442,   67,
   68,    0,   69,    0,    0,    0,    0,  126,    0,    0,
  127,    0,    0,    0,  128,  129,  130,  131,  132,    0,
  133,  134,  135,  136,    0,  137,  138,    0,    0,  139,
  140,  141,  142,    0,    0,   98,  143,  144,    0,    0,
    0,    0,    0,    0,    0,  145,    0,  146,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  147,  148,  149,  704,    0,    0,    0,    0,
  704,    0,    0,    0,  704,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  704,    0,    0,    0,    0,  150,    0,  291,
  292,  293,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  481,  482,    0,    0,    0,    0,    0,
    0,    0,    0,  704,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   67,   68,    0,   69,    0,    0,    0,    0,
  126,    0,    0,  127,  152,  153,  154,  128,  129,  130,
  131,  132,    0,  133,  134,  135,  136,    0,  137,  138,
  157,    0,  139,  140,  141,  142,    0,    0,   98,  143,
  144,    0,    0,    0,    0,    0,    0,    0,  145,    0,
  146,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  147,  148,  149,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  150,    0,  291,  292,  293,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  481,  482,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  155,    0,    0,    0,    0,    0,    0,
    0,    0,  704,  704,    0,  704,    0,  152,  153,  154,
  704,    0,    0,  704,    0,    0,    0,  704,  704,  704,
  704,  704,    0,  704,  704,  704,  704,    0,  704,  704,
    0,    0,  704,  704,  704,  704,    0,    0,  704,  704,
  704,    0,    0,    0,    0,    0,    0,  157,  704,    0,
  704,    0,  298,    0,    0,    0,  297,    0,    0,    0,
    0,    0,    0,    0,    0,  704,  704,  704,    0,    0,
    0,    0,    0,    0,  296,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  704,    0,  704,  704,  704,  483,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  704,  704,  127,    0,
    0,    0,  128,  129,  130,  131,  132,    0,  133,  134,
  135,  136,    0,  137,  138,    0,  155,  139,  140,  141,
  142,  451,    0,    0,  143,  144,    0,    0,    0,    0,
  212,    0,    0,  145,    0,  146,    0,  704,  704,  704,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  147,  148,  149,    0,  452,    0,  453,  454,  455,  456,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  150,    0,    0,    0,    0,
    0,    0,    0,  457,  458,  459,  460,    0,    0,  461,
    0,    0,    0,  462,  463,  464,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  157,
    0,    0,    0,    0,   67,   68,    0,   69,    0,    0,
    0,    0,  126,    0,    0,  127,  704,    0,    0,  128,
  129,  130,  131,  132,    0,  133,  134,  135,  136,    0,
  137,  138,    0,    0,  139,  140,  141,  142,    0,    0,
   98,  143,  144,    0,    0,    0,    0,    0,    0,    0,
  145,    0,  146,    0,    0,    0,    0,  156,  465,    0,
    0,    0,    0,    0,    0,    0,    0,  147,  148,  149,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  150,    0,  291,  292,  293,    0,    0,    0,
    0,  157,    0,    0,    0,    0,    0,    0,  212,    0,
    0,  155,  212,  212,  212,  212,  212,    0,  212,  212,
  212,  212,    0,  212,  212,    0,    0,  212,  212,  212,
  212,  212,    0,    0,  212,  212,    0,    0,    0,    0,
    0,    0,    0,  212,    0,  212,    0,    0,    0,  152,
  153,  154,    0,    0,    0,    0,    0,    0,    0,  210,
  212,  212,  212,    0,  212,    0,  212,  212,  212,  212,
    0,  157,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  212,    0,    0,    0,    0,
    0,    0,    0,  212,  212,  212,  212,    0,    0,  212,
    0,    0,    0,  212,  212,  212,   67,   68,    0,   69,
    0,    0,    0,    0,  126,    0,    0,  127,    0,  210,
    0,  128,  129,  130,  131,  132,    0,  133,  134,  135,
  136,    0,  137,  138,    0,    0,  139,  140,  141,  142,
    0,    0,   98,  143,  144,    0,    0,    0,    0,    0,
    0,    0,  145,    0,  146,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  157,    0,    0,    0,  155,  147,
  148,  149,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  150,  151,    0,    0,  212,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   67,   68,
    0,   69,  210,    0,    0,    0,  126,    0,    0,  127,
    0,    0,    0,  128,  129,  130,  131,  132,    0,  133,
  134,  135,  136,    0,  137,  138,    0,    0,  139,  140,
  141,  142,    0,    0,   98,  143,  144,    0,    0,    0,
    0,  152,  153,  154,  145,  157,  146,    0,    0,    0,
    0,  212,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  147,  148,  149,    0,  984,    0,    0,   67,   68,
    0,   69,    0,    0,    0,    0,  126,    0,   13,  127,
    0,    0,    0,  128,  129,  130,  131,  132,    0,  133,
  134,  135,  136,    0,  137,  138,  150,    0,  139,  140,
  141,  142,    0,  210,   98,  143,  144,    0,    0,    0,
  985,    0,    0,    0,  145,  157,  146,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  147,  148,  149,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  152,  153,  154,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  150,  151,    0,    0,
  155,   67,   68,  210,   69,    0,    0,    0,    0,  126,
    0,    0,  127,    0,    0,    0,  128,  129,  130,  131,
  132,    0,  133,  134,  135,  136,    0,  137,  138,    0,
    0,  139,  140,  141,  142,    0,    0,   98,  143,  144,
    0,    0,    0,    0,    0,    0,  159,  145,    0,  146,
    0,    0,    0,  152,  153,  154,    0,    0,    0,    0,
    0,    0,    0,    0,  147,  148,  149,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   33,    0,  575,
    0,    0,   67,   68,  159,   69,    0,    0,    0,    0,
  126,    0,  155,  127,    0,    0,    0,  128,  129,  130,
  131,  132,    0,  133,  134,  135,  136,    0,  137,  138,
    0,    0,  139,  140,  141,  142,    0,    0,   98,  143,
  144,    0,    0,    0,    0,    0,    0,    0,  699,    0,
  146,    0,    0,    0,    0,    0,  152,  153,  154,    0,
    0,    0,    0,    0,    0,  147,  148,  149,    0,    0,
    0,    0,   67,   68,    0,   69,    0,    0,    0,    0,
  126,    0,  155,  127,    0,    0,    0,  128,  129,  130,
  131,  132,    0,  133,  134,  135,  136,    0,  137,  138,
  150,   33,  139,  140,  141,  142,    0,    0,   98,  143,
  144,    0,    0,    0,    0,    0,    0,    0,  145,    0,
  146,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  147,  148,  149,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  152,  153,  154,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  761,    0,    0,  159,  159,    0,  159,    0,    0,    0,
    0,  159,    0,    0,  159,  155,    0,    0,  159,  159,
  159,  159,  159,    0,  159,  159,  159,  159,    0,  159,
  159,    0,    0,  159,  159,  159,  159,    0,    0,  159,
  159,  159,    0,    0,  316,    0,    0,    0,    0,  159,
    0,  159,  317,    0,    0,    0,    0,  152,  153,  154,
  549,    0,    0,  316,  316,   33,  159,  159,  159,   33,
   33,   33,   33,   33,    0,   33,   33,   33,   33,    0,
   33,   33,    0,    0,   33,   33,   33,   33,    0,   37,
    0,   33,   33,    0,   40,    0,   43,    0,    0,    0,
   33,  159,   33,   46,    0,    0,    0,  317,    0,    0,
  317,    0,    0,    0,    0,    0,  155,   33,   33,   33,
   49,    0,    0,    0,    0,    0,    0,  316,    0,  316,
    0,    0,    0,    0,    0,   52,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,    0,  159,  159,
  159,    0,    0,    0,    0,  317,    0,    0,    0,   33,
    0,    0,    0,   33,   33,   33,   33,   33,    0,   33,
   33,   33,   33,    0,   33,   33,  155,    0,   33,   33,
   33,   33,    0,   37,    0,   33,   33,    0,   40,    0,
   43,    0,    0,    0,   33,    0,   33,   46,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   33,   33,   33,   49,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   52,
    0,    0,    0,    0,  236,    0,    0,    0,    0,    0,
  566,    0,    0,    0,    0,    0,   33,    0,    0,    0,
    0,    0,  236,    0,  316,    0,    0,  316,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  316,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  159,    0,    0,
  317,    0,    0,    0,    0,  317,  317,  317,  317,    0,
  317,  317,  317,  317,    0,  317,  317,    0,    0,  317,
  317,  317,  317,    0,    0,    0,  317,  317,    0,    0,
    0,    0,    0,    0,    0,  317,  236,  317,  236,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   33,    0,
    0,    0,  317,  317,  317,  317,    0,    0,    0,    0,
  317,  317,  317,  317,    0,  317,  317,  317,  317,    0,
  317,  317,    0,    0,  317,  317,  317,  317,    0,    0,
    0,  317,  317,    0,    0,    0,    0,  317,    0,    0,
  317,    0,  317,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  317,  317,  317,
  316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
  316,  316,  316,  316,    0,  235,    0,    0,  316,    0,
    0,    0,  316,  316,  316,  316,  316,  316,    0,    0,
    0,    0,  317,  235,    0,    0,  316,  316,    0,    0,
    0,    0,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  316,  316,  316,  316,    0,    0,    0,
    0,    0,    0,  236,  316,    0,  236,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  236,  566,  316,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  235,    0,  235,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  316,  316,  316,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  316,  316,  316,  316,  316,  316,  316,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  317,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  236,    0,    0,    0,    0,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,    0,    0,    0,    0,  236,  317,    0,
    0,  236,  236,  236,  236,  236,  236,    0,    0,    0,
    0,    0,    0,    0,  235,  236,  236,  235,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  235,    0,    0,
    0,    0,  236,  236,  236,  236,    0,    0,    0,    0,
    0,    0,    0,  236,    0,    0,    0,    0,    0,    0,
    0,    0,  566,    0,    0,    0,    0,  236,    0,    0,
    0,    0,    0,    0,  527,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  236,  236,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  236,
  236,  236,  236,  236,  236,  236,    0,    0,  527,    0,
  527,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  235,    0,   34,    0,    0,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,    0,    0,    0,    0,  235,    0,
    0,    0,  235,  235,  235,  235,  235,  235,    0,    0,
    0,    0,    0,    0,    0,    0,  235,  235,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  235,  235,  235,  235,    0,    0,    0,
    0,  338,    0,  339,  235,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  235,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  235,  235,  527,    0,    0,  527,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  527,  566,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  235,  235,  235,  235,  235,  235,  235,    0,    0,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   67,    0,
    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    2,    0,  338,    0,  797,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   34,    0,
    0,  527,  527,  527,  527,  527,  527,  527,  527,  527,
  527,  527,  527,  527,  527,    0,    0,    0,    0,  527,
    0,    0,    0,  527,  527,  527,  527,  527,  527,    0,
    0,    0,    0,    0,    0,    0,    0,  527,  527,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  527,  527,  527,  527,    0,    0,
    0,    0,  338,    0,  999,  527,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  527,
    0,    0,    0,    0,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,    0,    0,
   67,    0,    7,   69,    0,    0,  328,  329,  330,  331,
  332,  333,    0,    2,  527,  527,    0,    0,    0,    0,
    8,    9,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   10,   11,   12,
   13,  527,  527,  527,  527,  527,  527,  527,  334,    0,
  532,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  335,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  336,  337,   67,
    0,    0,   69,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    2,    0,  532,    0,  532,    0,    0,    0,
    0,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,    0,    0,  371,    0,    0,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
    0,    0,    0,    0,    7,    0,    0,    0,  328,  329,
  330,  331,  332,  333,    0,    0,    0,    0,    0,    0,
    0,    0,    8,    9,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   10,
   11,   12,   13,    0,    0,    0,    0,  371,    0,  371,
  334,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  335,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  363,    0,    0,    0,    0,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  336,
  337,  532,    0,    7,  532,    0,    0,  328,  329,  330,
  331,  332,  333,    0,  532,    0,    0,    0,    0,    0,
    0,    8,    9,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,    0,    0,    0,    0,    0,   10,   11,
   12,   13,    0,    0,  363,    0,  363,    0,    0,  334,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  335,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  371,    0,    0,  371,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  371,  336,  337,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   27,   28,   29,   30,   31,
   32,   33,    0,    0,    0,    0,    0,  532,  532,  532,
  532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
  532,    0,    0,    0,    0,  532,    0,    0,    0,  532,
  532,  532,  532,  532,  532,    0,    0,    0,    0,    0,
    0,    0,    0,  532,  532,  356,    0,    0,    0,    0,
    0,  363,    0,    0,  363,    0,    0,    0,    0,    0,
  532,  532,  532,  532,  363,    0,    0,    0,    0,    0,
    0,  532,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  532,    0,    0,    0,    0,
  371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
  371,  371,  371,  371,    0,    0,    0,    0,  371,  356,
    0,  356,  371,  371,  371,  371,  371,  371,    0,    0,
  532,  532,    0,    0,    0,    0,  371,  371,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  210,  371,  371,  371,  371,  532,  532,  532,
  532,  532,  532,  532,  371,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  371,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,    0,    0,  371,  371,  363,  210,    0,  210,  363,
  363,  363,  363,  363,  363,    0,    0,    0,    0,    0,
    0,    0,    0,  363,  363,  526,    0,    0,    0,    0,
  371,  371,  371,  371,  371,  371,  371,    0,    0,    0,
  363,  363,  363,  363,    0,    0,  356,    0,    0,  356,
    0,  363,    0,    0,   34,    0,    0,    0,    0,  356,
    0,    0,    0,    0,    0,  363,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  526,
    0,  526,    0,    0,    0,    0,    0,    0,    0,    0,
  363,  363,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  363,  363,  363,
  363,  363,  363,  363,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  210,    0,    0,  210,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  210,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  356,  356,  356,  356,  356,  356,  356,  356,
  356,  356,  356,  356,  356,  356,   34,    0,    0,    0,
  356,    0,    0,    0,  356,  356,  356,  356,  356,  356,
    0,    0,    0,    0,    0,    0,    0,    0,  356,  356,
    0,    0,    0,    0,    0,    0,  526,    0,    0,  526,
    0,    0,    0,    0,    0,  356,  356,  356,  356,  526,
    0,    0,    0,    0,    0,    0,  356,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  356,    0,  553,    0,    0,    0,    0,    0,    2,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,    0,    0,  356,  356,  210,    0,    0,
    0,  210,  210,  210,  210,  210,  210,    0,    0,    0,
    0,    0,    0, 1229,    0,  210,  210,    0,    0,    0,
    0,    0,  356,  356,  356,  356,  356,  356,  356,    0,
    0,    0,  210,  210,  210,  210,    0,    0,    0,    0,
    0,    0,    0,  210,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  210,    0,    0,
    0,    0,  526,  526,  526,  526,  526,  526,  526,  526,
  526,  526,  526,  526,  526,  526,    0,    0,    0,    0,
  526,    0,  187,    0,  526,  526,  526,  526,  526,  526,
    0,    0,  210,  210,    0,    0,    0,    0,  526,  526,
    0,    0,    0,    0,    0,    3,    4,    5,    6,    7,
    2,    0,    0,    0,    0,  526,  526,  526,  526,  210,
  210,  210,  210,  210,  210,  210,  526,    8,    9,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  526,    0,    0,    0,   10,   11,   12,   13,  187,    0,
    0,   14,   15,    0,    0,    0,    0,   16,    0,  544,
   17,    2,    0,    0,    0,    0,    0,   18,   19,    0,
    0,    0,    0,    0,    0,  526,  526,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  526,  526,  526,  526,  526,  526,  526,    0,
  544,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   20,   21,    0,   22,   23,   24,    0,   25,
   26,   27,   28,   29,   30,   31,   32,   33,    0,    0,
    0,    0,    0,    0,    0,    0,  904,  545,    0,    5,
    6,    7,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  546,    0,    0,    0,    0,  547,    0,    0,    8,
    9,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   10,   11,   12,   13,
    0,  548,  549,    0,    0,    0,  187,    0,  545,    0,
    5,    6,    7,    0,    0,    0,    0,    0,    0,    0,
    0,  550,  546,    0,    0,    0,    0,  547,    0,    0,
    8,    9,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   10,   11,   12,
   13,    0,  548,  549,    0,  187,  551,  552,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  550,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   27,   28,   29,   30,   31,   32,   33,
  863,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  864,    0,    0,  551,  552,  865,
  866,    0,  867,  868,  869,  870,  871,  872,    0,  873,
  874,    0,  875,  876,  877,  878,  879,    0,    0,    0,
    0,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,    0,    0,  187,    0,  187,  187,  187,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  187,    0,    0,
    0,    0,  187,    0,    0,  187,  187,    0,  880,    0,
  881,    0,    0,    0,    0,  882,  863,    0,    0,    0,
    0,    0,  187,  187,  187,  187,    0,  187,  187,    0,
  864,  883,    0,    0,    0,  865,  866,    0,  867,  868,
  869,  870,  871,  872,    0,  873,  874,  187,  875,  876,
  877,  878,  879,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  884,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  187,  187,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  880,    0,  881,    0,    0,    0,
    0,  882,    0,    0,    0,    0,    0,    0,    0,  187,
  187,  187,  187,  187,  187,  187,    0,  883,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  884,    0,    0,    0,    0,  885,    0,  886,  887,  888,
  889,  890,  891,  892,  893,  894,  895,  896,  897,  898,
  899,  900,  901,  902,    0,    0,    0,  903,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  885,    0,  886,  887,  888,  889,  890,  891,  892,
  893,  894,  895,  896,  897,  898,  899,  900,  901,  902,
    0,    0,    0,  903,
};
static int yycheck[] = {                                       4,
   24,   24,  102,  103,  167,   24,   92,    1,   22,   23,
    1,  312,  312,   93,   19,   13,    1,  791, 1008, 1032,
  711,    1,   27,   28,   29,   30,   24,  911,   64,    1,
  312,  181,  697,    1,  431,   91,  433,  845,   38,  485,
   36,   37,   24,   38,   44,   42,   41,   40,  264,   44,
  367,   43,  125,   43,  123,   45,  264,   46,   46,   46,
 1202,  123,   46,   46,   60,   41, 1164,  167,   41, 1280,
   44,   40,   76,  193,  194,  195,  196,  197,   47,   41,
   43,  123,  105,   33,   58,  776,  125, 1556,   91,  169,
  190,   60,   46,   59,  319,  263,   91,   40, 1538,  520,
  521,  522,  188,   41, 1544,  128,  104,  262,  113,   46,
  115,  116,  117,  510,  511,  215,   43,   40,   42,   44,
   41,  145,  104,   41,  148,   40,   46,   40,  151,   46,
   93,  299,   40,  288, 1574,   38,  471,   62,   40,   42,
   91,   41,   40,   60,  168,   41,  232,   59,   42,  923,
  924,  156,  157,  233,   41,  380,   93,   60,  156,  125,
   41,   44,   61,  199,  260,  261,   93,  263,   91,  167,
   59,   41,   40,   93,   46,   41,   91,  181,   40,   33,
  123,  267,  187,   91,  347,  208,   41,  342,   91,   91,
   40,  269,  365,   91,  272,   46,   41,   41,   40,   40,
  205,  206, 1413,   41,   46,  210,  263,  203,  982,   40,
   93, 1680,  210,  125,   61,   40,   40,  295,  296,  369,
  483,   93,  300,   91,  302,   42,   40,  232,  267, 1543,
   40,  309,   40, 1331,  239,   44,  260,   61,  555,   91,
  503,   91,   93,  529, 1018,   61,   41,  316,  326,   44,
   91,  337,  352,  315,  316,  471,   40,  260,  261, 1573,
  263,  123,  267,  341,  350,  268,   91,  264,  471,  311,
   33,  351,  693,  296,   91,   33,  281,   91,  283,   46,
  303,  305,  287,   91,   93,  290,  359,  263,  262,  294,
 1174,  364,  123,  296,  299,  300,  301,  302,  506,  507,
  508,  264,  264,  306,  294,  274,  997,  273,  262,  365,
  260,  261,  398,  263,  264,  351,  306,  307,  312,  313,
  741,  312,  313,  299,  264,  348,  264,  312,  313,  318,
  344,  345,  312,  313,  324,  318,  260,  261,  342,  263,
  312,  313,  346,  264,  312,  313,  264,  320,  321,  347,
  348,  264,  265,  266,   33,  353,   20,   21,   43,  355,
   45,  273,  123,  262,  264,  369,  260,  261,  264,  263,
  543,  353,  296,  286,  287,  471,  370,  264,  265,  370,
  371,  372,  373,  264,  374,  266,   59, 1078,  474,  288,
  370,  371,  372,  373,  264,  265,   59, 1410,  264,  391,
  262,   65,  296,  391,  825,  286,  287,  391,   72,  264,
  265, 1553,  415,  416,  417,  429,  270,  271,  272,  264,
  264,  275,  276,  277,  278,  279,  264,  281,  282,  283,
  284,  262,  286,  287,  438,  422,  290,  291,  292,  293,
  526,  527,  296,  297,  298, 1587,  262,  111,  112,  472,
  260,  261,  306,  263,  308,  541,  606,  360,  361,  362,
  453,  466,  125,  468, 1545,  260,  552,  617,  263,  323,
  324,  325,  264, 1281,   40,  575,  260,  261,  483,  263,
  926,   40,  480,  275,  262,  483,  452,  543,   38,  910,
  495,   40,   42,  157, 1575,  509,  462,  511,   44,  465,
 1165,  515,  260,  261,  358,  263,  264,  593,  271,  123,
   60,  516,  275,  276,  277,  278,  279,   59,  281,  282,
  283,  284,  608,  286,  287,   91,  526,  290,  291,  292,
  293,  526,   91,   38,  297,  298,  541,   42,   91,   40,
  452,   91,   91,  306,  624,  308,   40,   93, 1561,  473,
  462,  264,  265,  465,  544,   60,   40,  221,  222,  123,
  323,  324,  325, 1337, 1338,  283,  284,  572,  573,   40,
  536,  537,  538,  539,  540,  541,  542,  600,  481,  473,
  267,  260,   40,  125,  263,  264,   91,  667,  593,  669,
   91,  595,   41,   43,   43,  358,   91,   91,  602,  123,
  318, 1591,  606,  599, 1546,  260,  261,   91,  263,  294,
  273,   61,   40,  617,  764,  260,  261,  281,  263,  123,
   91,  306,  307,  287,  536,  537,  538,  539,  540,  541,
  542,  295,  123,   91, 1576,  631,  632,   40,  643,  324,
  123,  637,  678,  639,  649,  668,  315,  536,  537,  538,
  539,  540,  541,  542,   44,  755,   44,  123,   40,  260,
  261,  761,  263,   91,  328,   44,  330,  753,  754,   46,
  334,   44,   59,   46,   62,  699,  339,   42,  342,  343,
  260,  261,  346,  263,   61,  708,  359, 1571,   91,  374,
  544,  364,   61,   40,   42,   40,  260,  998,  998,  263,
  264,  320,  321,   93,  784,  369,  711,  260,  261,   91,
  263,  716,  726,  718, 1405,   44,  998,   46,   40,  715,
   91,   59,  713,   38, 1498,   91,   91,   42,  751,   40,
  850,   59,  852,  853,  854,  855,  856, 1511,  125,  260,
  458,  459,  263,  461,   91,   60,   91,   40,   91,  754,
  330,  331,  775,  758,  759,  760,   47,  843,  422,  423,
  764,  425,   40,  427,  778,  260,  261,   91,  263,   91,
  793,  776,   41,  374,  375,   44,   91,  781,  442,  443,
  306,  544,   41,  260,  261,   44,  263,  125,   41,  452,
   43,  260,  261, 1190,  263, 1192,  800,  125,   44,   91,
   46,  464,  391,  466,  467,  809,  469,  470,  463, 1500,
  360,  361,  362,   41,  266,   43,   44,  359,  463,  483,
 1594,  391,  364,  828,  310,  830,  312,  313,  314,   41,
  916,  911,   41,   59,  286,  287,  841,  501,   41,   42,
  920,  391,  506,  507,  508,   41,  510,   43,  512,  513,
  514,  328,  516,  330,  331,  360,  361,  362,  391,  264,
  337,  266, 1636,  536,  537,  538,  539,  540,  541,  542,
  279,  280,  391,  536,  537,  538,  539,  540,  541,  542,
  289,  286,  287,   47,  548,  549,  273,  911,   91,  260,
  261,   59,  263, 1667,  260,  261, 1019,  263, 1021,  125,
   41,   42,  268,  267,  908,  374,  375,  571, 1682,   41,
  574,   41,  260,  261,   41,  263,  264,  260,  261,  316,
  263, 1007,   42, 1009,   41,   42,   40,  275,   41,   40,
  296,  595,   93,  299,   40,  273,  260,  261,  602,  263,
  306,   43,   44,  264,  268,  273, 1637,  951,  296,   61,
   91,   43,  948,  617,  263,  946,   41,  125,  476,  123,
  281,  282,  283, 1049,  983, 1051,  280,  990,  260,  261,
   93,  263,  296,  996,   91,   40,  260, 1057,  642,  263,
  264,   38,  987,  393,  394,   42,   41,   42, 1679,   46,
   47,  655,  997,   40,  536,  537,  538,  539,  540,  541,
  542,  339,  666,   60,  998,   38,   40,  998, 1013, 1000,
 1001, 1002,   40,  998,   40, 1019,   40, 1021,  998, 1099,
 1000, 1001, 1002,   40,   59,  689,  998,   40, 1000, 1001,
  998,   40, 1000, 1001,   91,   40,   91,   40,  425,  426,
  427,  428,  614,  615,  616,  360,  361,  362, 1053,  415,
  416,  417,  264,  265,  266,  260,  261,   40,  263,  723,
  724,  725,  449,  450,  451,  452,   41, 1230, 1231, 1232,
 1233,   93, 1152, 1078,  286,  287,   40, 1240, 1241, 1242,
  393,  394,   93,  747,  748,   43,   44,  264,  265,  266,
  125,  415,  416,  417,  432,  433,  260,  261,   40,  263,
  428,   91,  430,  431,  768,  273,  770,  125,  772,  286,
  287,  898,  899,  777,  452,   58,   91,  781,   41,   42,
   33,  449,  450,  451,  452,  473,  464,  125,  466,  467,
   40,  469,  470,  359,  260,  261,  800,  263,  364,   40,
 1226, 1227,  281,  282,  283,  284,  810,  811,   40,  536,
  537,  538,  539,  540,  541,  542,  281,  282,  283,  284,
  824,   33,   40,   40,   44,    0,  301,   38,  303,  304,
  305,   42,   41,   91, 1188,   40,  260,  261, 1192,  263,
  264,  294, 1206,  847, 1581, 1582, 1200,   40,  301,   60,
  303,  304,  305,  260,  261,  859,  263,  861,  536,  537,
  538,  539,  540,  541,  542,   44,  262,  123,  536,  537,
  538,  539,  540,  541,  542,   41,  262,   41, 1223,   91,
   91,  274, 1220,   41,   59, 1305,   60,  464,   40,  342,
  343,  344, 1230, 1231, 1232, 1233,  274,   40,  273,   40,
   40,   62, 1240, 1241, 1242,  278, 1250,  911,  281,  282,
  283,  284,  275,  286,  287,  288,   44,  921,  365,  123,
 1264,  296, 1266,  123,  432,  433,  123,  123,   58, 1274,
  330,  331,  332,  274,   40,  388,  389,  390,   40,  392,
   40,   40,  395,   41,  452,  260,  261,   38,  263,   40,
  125,   42,   41,  268,  468, 1395,  464,  317,  466,  471,
   61,  469,  470,  360,  361,  362,  366,  367,  368,   60,
  536,  537,  538,  539,  540,  541,  542,  317, 1404,   61,
   61,  296,   40,  471,  299,   44,   41,   41,  992, 1415,
  994,  306,    0,   41,   38, 1349,   93,   58,   42,   41,
   91, 1332,  260,  261,   41,  263,   41,   41, 1428,   41,
  268,  281,  282,  283,  284, 1019,   60, 1021,   44, 1383,
  330,  331,  332,    0,  281,  282,  283,  284,  536,  537,
  538,  539,  540,  541,  542,  410,   61,   44,  296, 1043,
   44, 1386, 1046,   61,  263,  125,   40,   91,   40,  260,
  261,   59,  263,   61,  125,   41,  366,  367,  368,  271,
 1405,   41,   41,  275,  276,  277,  278,  279,   41,  281,
  282,  283,  284, 1499,  286,  287,   41,  452,  290,  291,
  292,  293,   59,   41,   41,  297,  298,  462,   41,   41,
  465,   41,   41,   41,  306,   41,  308,   41,  273,   41,
  415,  416,  417,  280,  281,  282,  283,  284,   41,   40,
   93,  323,  324,  325, 1445,  274,   41,  125,   93,  277,
  278,  279,   44,  281,  282,  283,  284,  274,  286,  287,
  288, 1557,  290,  291,  292,  293,   41,   44, 1501,  297,
  298,   38,   41, 1147, 1564,   40,  358,   58,  125,  360,
  361,  362,   44,  260,  261, 1500,  263,  415,  416,  417,
   40,  536,  537,  538,  539,  540,  541,  542,   41,   41,
   40, 1175, 1176, 1177,   40,  294,   41,   41, 1182, 1183,
 1184, 1185, 1186, 1187,   41, 1189, 1190, 1191,   40, 1193,
 1194, 1195, 1196, 1197, 1198, 1199,   41, 1201,   91, 1203,
   62, 1205,   41, 1207,   40,  294,  498,  365,  502,  490,
   40,  277,  301,   41,  303,  304,  305,   61,   41,  125,
 1640,  123,   62,   41,   41, 1589,  123,   41, 1582,   41,
  452,  391,   93, 1673,   93,  410,  411,  412,  413,  414,
  280,  281,  282,  283,  284,   41,   41,   41,  355,  356,
  357, 1677,  317,  342,  343,  344,   41,  432,  433,   40,
   38,  317,   93, 1267,   40,  273,   58,   58, 1272,  360,
  361,  362,   93,  380,  449,  450,  451,  452,   93, 1283,
   93,  456,  457,   40,   40,   44,   91,  462,   91, 1293,
  465,  505, 1637, 1297, 1298,   40,  273,  472,  473,  388,
  389,  390,   40,  392, 1308,   93,  395,  123,   41,   41,
   40,   40,  422, 1676,  322,   41,  360,  361,  362,   41,
   93,   93,  511,   44,   41, 1329, 1330,  274,   41,   41,
   58,   93,  544,   44, 1679,   60,    0,   61,   40, 1343,
 1344, 1345, 1346, 1347, 1348,  123, 1350,   40,   40,   40,
   40,   40,  527,  528,   40,  530,  531,  532,   40,  534,
  535,  536,  537,  538,  539,  540,  541,  542,  475,   33,
  477,  478,  479,  480,   38,   40,   40,   41,   42,   40,
   44,  278,   40,   47,  281,  282,  283,  284,   40,  286,
  287,  288,   62,   41,  125,   59,   60,   61,   62,   93,
   41,   41,  410,  411,  412,  413,  414,   41,   93,   93,
   93,   41,   93,   41,   93,   41,  424,   41,   93,   41,
   41,  429,   93, 1427,  432,  433,   59,   91,   41,   93,
 1434,   93,   41,  410,  411,  412,  413,  414,   93,   41,
   38,  449,  450,  451,  452,   41,  454,  455,  456,  457,
   93,   93,   41,   41,  462,  432,  433,  465,   93,  123,
   41,  125,   93,   41,  472,  473,  474,   41,   93,   44,
  263,   41,  449,  450,  451,  452,  274,   41,   41,  456,
  457,   40,   93,   93,   40,  462,   93,  464,  465,   40,
   40,   40,  125,   41,   40,  472,  473,   58,   58,   91,
  278,  509,  510,  281,  282,  283,  284,   41,  286,  287,
  288,   58,  269,   41,   41,  272, 1520, 1521, 1522,  527,
  528,   40,  530,  531,  532,  123,  534,  535,  536,  537,
  538,  539,  540,  541,  542,   41,   93,   41,  295,  296,
   93,   41,   41,  300,   40,  302,   40,   40,   93,   93,
  527,  528,  309,  530,  531,  532,   40,  534,  535,  536,
  537,  538,  539,  540,  541,  542,   40,   40, 1572,  326,
   40,   40,   40, 1577, 1578, 1579,   40, 1581,   40, 1583,
 1584, 1585,   40,   40,  341,   41,  263,   41,   41,   60,
   93,   58,   93,   40,   40,   40,  260,  261,  262,  263,
   41, 1605, 1606, 1607,  268,   40,   91,  271,   40,  273,
  274,  275,  276,  277,  278,  279,   41,  281,  282,  283,
  284,   41,  286,  287,  288,   41,  290,  291,  292,  293,
   41,   40,  296,  297,  298,  299,  295,  274,   41,   41,
  273,  300,  306,  302,  308,  263,   40,  311,   40,  358,
  309,  315,  316,  511,  318,   41,   41,  274,  322,  323,
  324,  325,  260,  296, 1668,  263,   33,  326,  260,  261,
  262,  263,  264,   41,   40,  339,  268,   41,   41,  123,
  278,  123,  341,  281,  282,  283,  284,  125,  286,  287,
  288,  283,  123,  123,  358,  359,  360,  361,  362,   44,
  364,  365,   62,  125,  296,  123,  125,   40,  123,   62,
  374,  375,   41,  123,   41,   41,  123,  125,   41,   41,
   41,   33,   41,  123,  125,  123,   62,  391,  320,  321,
  123,   41,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
   40,   40,  123,   41,    0,  263,   41,  410,   93,   91,
   46,  263,   93,  275,  275,  449,  450,  451,  452,   42,
  454,  455,  456,  457,   61,  275,  460,  275,  462,  275,
  464,  465,  466,  467,  263,  469,  470,   33,  472,  473,
  474,  263,   38,   91,   40,   41,   42,  481,   44,  452,
  275,   47,  180,  415,  416,  417,  275,  275,  840,  462,
  263, 1025,  465,   59,   60,   61,   62,  420,  275,  275,
 1048,  294, 1516,  907,  748,  509,  510,  511,  301,  275,
  303,  304,  305, 1290,  275,  295, 1023, 1152,  275,  926,
  300,  275,  302,  527,  528,   91,  530,  531,  532,  309,
  534,  535,  536,  537,  538,  539,  540,  541,  542,  275,
  544, 1210,  708,  916, 1278, 1291,  326,  327,  353,  342,
  343,  344,  913,  480,   24,  260,  261,  123,  263,  125,
    9,  341, 1214,  536,  537,  538,  539,  540,  541,  542,
  277,  278,  279,  114,  281,  282,  283,  284,  550,  286,
  287,   24,  763,  290,  291,  292,  293,   59,  305,    0,
  767,  678,  372,   64,  612,  388,  389,  390,  492,  392,
   -1,   -1,  395,  371,   -1,   -1,   -1,   -1,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,
   -1,   -1,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   59,   -1,
  355,  356,  357,  125,  306,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,  325,   -1,  380,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,
   -1,   -1,   -1,   -1,  260,  261,  301,  263,  303,  304,
  305,   -1,  268,   -1,   -1,  271,  358,  273,  274,  275,
  276,  277,  278,  279,  125,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,  299,   -1,   -1,   -1,  342,  343,  344,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,  415,  416,  417,   -1,   -1,   -1,   -1,
  475,   -1,  477,  478,  479,  480,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  389,  390,   -1,  392,   -1,   -1,
  395,   -1,  358,   -1,  360,  361,  362,   -1,   -1,   -1,
   -1,  273,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  391,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,  424,   -1,
   -1,   -1,  273,  429,   -1,   -1,  432,  433,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,
  456,  457,  544,   -1,  460,   -1,  462,   -1,  464,  465,
  466,   -1,   -1,  469,  470,   33,  472,  473,  474,   -1,
   38,  322,   40,   41,   42,  481,   44,   -1,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,  410,   -1,
   -1,   -1,   -1,  509,  510,  434,  435,  436,  437,  438,
  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,
   -1,  527,  528,   91,  530,  531,  532,   -1,  534,  535,
  536,  537,  538,  539,  540,  541,  542,   -1,  544,   -1,
  452,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  462,   -1,   -1,  465,   -1,  123,  123,  125,   -1,  410,
  411,  412,  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,  429,   -1,
   -1,  432,  433,   -1,   59,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,   -1,  454,  455,  456,  457,   -1,   -1,   -1,
   -1,  462,   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,
   -1,  472,  473,  474,  536,  537,  538,  539,  540,  541,
  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,
  531,  532,   -1,  534,  535,  536,  537,  538,  539,  540,
  541,  542,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,   -1,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,  125,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,  294,  296,  297,
  298,  299,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,
  308,   -1,  309,  311,   -1,   -1,   -1,   -1,  316,  262,
   -1,   -1,   -1,   -1,  322,  323,  324,  325,  325,   -1,
   -1,   -1,   -1,   -1,  277,  278,  279,  334,  281,  282,
  283,  284,   -1,  286,  287,  288,   -1,  290,  291,  292,
  293,  348,  349,  350,  351,   -1,  299,   -1,   -1,   -1,
  358,   -1,  360,  361,  362,   -1,   -1,   -1,  273,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,
   -1,   -1,   -1,  380,  381,  382,  383,  384,  385,  386,
   -1,  296,   -1,  391,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,   -1,   -1,   -1,
  273,  429,   -1,   -1,  432,  433,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,   -1,  454,  455,  456,  457,
   -1,   -1,  460,   -1,  462,   -1,  464,  465,  466,   -1,
   -1,  469,  470,   33,  472,  473,  474,   -1,   38,   -1,
   40,   41,   42,  481,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,   -1,   -1,  410,   -1,   -1,   -1,   -1,
   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,
  528,   91,  530,  531,  532,   -1,  534,  535,  536,  537,
  538,  539,  540,  541,  542,   -1,  544,  452,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  462,   -1,   -1,
  465,   -1,   -1,  123,   -1,  125,   -1,  410,  411,  412,
  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,
  433,   -1,   59,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,
   -1,   -1,   -1,  456,  457,   -1,   -1,   -1,   -1,  462,
   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,   -1,  472,
  473,  536,  537,  538,  539,  540,  541,  542,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  271,   59,   -1,   -1,   -1,  125,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,   -1,  297,
  298,   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,
   -1,  534,  535,  536,  537,  538,  539,  540,  541,  542,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,
   -1,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
  125,  281,  282,  283,  284,   -1,  286,  287,  346,   -1,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,  299,
   -1,   -1,   -1,   -1,   -1,   -1,  306,  365,  308,   -1,
   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,
   -1,   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
  360,  361,  362,   -1,   -1,   -1,  273,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
   -1,  391,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,  424,   -1,   -1,   -1,  273,  429,
   -1,   -1,  432,  433,   -1,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,   -1,  454,  455,  456,  457,   -1,   -1,
  460,   -1,  462,   -1,  464,  465,  466,   -1,   -1,  469,
  470,   33,  472,  473,  474,   -1,   38,   -1,   40,   41,
   42,  481,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   61,
   62,   -1,   -1,  410,   -1,   -1,   -1,   -1,   -1,  509,
  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   91,
  530,  531,  532,   -1,  534,  535,  536,  537,  538,  539,
  540,  541,  542,   -1,  544,  452,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  462,   -1,   -1,  465,   -1,
   -1,  123,   -1,  125,   -1,  410,  411,  412,  413,  414,
  277,  278,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,  288,   -1,  290,  291,  292,  293,  432,  433,   -1,
  297,  298,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,   -1,
   -1,  456,  457,   -1,   -1,   -1,   -1,  462,   -1,   -1,
  465,   -1,   -1,   -1,   -1,   -1,   -1,  472,  473,  536,
  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,
  535,  536,  537,  538,  539,  540,  541,  542,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,  125,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,  299,   -1,   -1,
   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,  311,
   -1,   -1,   -1,   -1,  316,  257,   -1,   -1,   -1,   -1,
  322,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,   -1,  289,  290,  291,
  292,  293,   -1,   -1,   -1,   -1,  358,   -1,  360,  361,
  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
  422,  423,  424,   -1,   -1,   -1,  273,  429,   -1,   -1,
  432,  433,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,   -1,  454,  455,  456,  457,   -1,   -1,  460,   -1,
  462,   -1,  464,  465,  466,   -1,   -1,  469,  470,   33,
  472,  473,  474,   -1,   38,   -1,   40,   41,   42,  481,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  527,  528,   91,  530,  531,
  532,   -1,  534,  535,  536,  537,  538,  539,  540,  541,
  542,   -1,  544,  485,  486,   -1,  488,  489,  490,   -1,
  492,  493,   -1,   -1,  496,  497,   -1,  499,   -1,  123,
   -1,  125,   -1,  410,  411,  412,  413,  414,   -1,   -1,
  512,  513,  514,  515,  516,  517,  518,  519,  520,  521,
  522,  523,  524,  525,   -1,  432,  433,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,   -1,   -1,   -1,  456,
  457,   -1,   -1,   -1,   -1,  462,   -1,   -1,  465,   -1,
   -1,   -1,   -1,   -1,   -1,  472,  473,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  527,  528,   -1,  530,  531,  532,   -1,  534,  535,  536,
  537,  538,  539,  540,  541,  542,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,  125,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,  299,   -1,   -1,   -1,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,  323,
  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,   -1,  360,  361,  362,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
  424,   -1,   -1,   -1,  273,  429,   -1,   -1,  432,  433,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,
  454,  455,  456,  457,   -1,   -1,  460,   -1,  462,   -1,
  464,  465,  466,   -1,   -1,  469,  470,   33,  472,  473,
  474,   -1,   38,   -1,   40,   41,   42,  481,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  527,  528,   91,  530,  531,  532,   -1,
  534,  535,  536,  537,  538,  539,  540,  541,  542,   -1,
  544,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  260,  261,   -1,  263,   -1,   -1,  123,   -1,  125,
   -1,  410,  411,  412,  413,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  432,  433,  294,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,   -1,   -1,   -1,  456,  457,   -1,
   -1,   -1,   -1,  462,  323,   -1,  465,   -1,  327,   -1,
   -1,  330,  331,  472,  473,   -1,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,   -1,   -1,
   -1,   -1,   -1,   -1,  353,   -1,   -1,  356,   59,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,
   -1,  530,  531,  532,   -1,  534,  535,  536,  537,  538,
  539,  540,  541,  542,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,  125,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,  299,   -1,   -1,   -1,   -1,   -1,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  360,  361,  362,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,  424,   -1,
   -1,   -1,  273,  429,   -1,   -1,  432,  433,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,
  456,  457,   -1,   -1,  460,   -1,  462,   -1,  464,  465,
  466,   -1,   -1,  469,  470,   33,  472,  473,  474,   -1,
   38,   -1,   40,   41,   42,  481,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  527,  528,   91,  530,  531,  532,   -1,  534,  535,
  536,  537,  538,  539,  540,  541,  542,   -1,  544,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,
  261,   -1,  263,   -1,   -1,  123,   -1,  125,   -1,  410,
  411,  412,  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  432,  433,  294,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,   -1,   -1,   -1,  456,  457,   -1,   -1,   -1,
   -1,  462,  323,   -1,  465,   -1,  327,   -1,   -1,  330,
  331,  472,  473,   -1,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,   -1,   -1,   -1,   -1,
   -1,   -1,  353,   -1,   -1,  356,   59,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,
  531,  532,   -1,  534,  535,  536,  537,  538,  539,  540,
  541,  542,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,   -1,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,  125,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,  299,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,
  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,
   -1,   -1,   -1,   -1,  322,  323,  324,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,  360,  361,  362,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  391,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,   -1,   -1,   -1,
  273,  429,   -1,   -1,  432,  433,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,   -1,  454,  455,  456,  457,
   -1,   -1,  460,   -1,  462,   -1,  464,  465,  466,   -1,
   -1,  469,  470,   33,  472,  473,  474,   -1,   38,   -1,
   40,   41,   42,  481,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,
  528,   91,  530,  531,  532,   -1,  534,  535,  536,  537,
  538,  539,  540,  541,  542,   -1,  544,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,   -1,  410,  411,  412,
  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,
  433,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,
   -1,   -1,   -1,  456,  457,   -1,   -1,   -1,   -1,  462,
   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,   -1,  472,
  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,
   -1,  534,  535,  536,  537,  538,  539,  540,  541,  542,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,
   -1,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
  125,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,
   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,
   -1,   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
  360,  361,  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,  424,   -1,   -1,   -1,  273,  429,
   -1,   -1,  432,  433,   -1,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,   -1,  454,  455,  456,  457,   -1,   -1,
  460,   -1,  462,   -1,  464,  465,  466,   -1,   -1,  469,
  470,   33,  472,  473,  474,   -1,   38,   -1,   40,   41,
   42,  481,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,
  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   91,
  530,  531,  532,   -1,  534,  535,  536,  537,  538,  539,
  540,  541,  542,   -1,  544,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,   -1,  410,  411,  412,  413,  414,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,  433,   -1,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,   -1,
   -1,  456,  457,   -1,   -1,   -1,   -1,  462,   -1,   -1,
  465,   -1,   -1,   -1,   -1,   -1,   -1,  472,  473,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,
  535,  536,  537,  538,  539,  540,  541,  542,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,  125,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
  322,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  360,  361,
  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
  422,  423,  424,   -1,   -1,   -1,  273,  429,   -1,   -1,
  432,  433,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,   -1,  454,  455,  456,  457,   -1,   -1,  460,   -1,
  462,   -1,  464,  465,  466,   -1,   -1,  469,  470,   33,
  472,  473,  474,   -1,   38,   -1,   40,   41,   42,  481,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  527,  528,   91,  530,  531,
  532,   -1,  534,  535,  536,  537,  538,  539,  540,  541,
  542,   -1,  544,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,  410,  411,  412,  413,  414,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  432,  433,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,   -1,   -1,   -1,  456,
  457,   -1,   -1,   -1,   -1,  462,   -1,   -1,  465,   -1,
   -1,   -1,   -1,   -1,   -1,  472,  473,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  527,  528,   -1,  530,  531,  532,   -1,  534,  535,  536,
  537,  538,  539,  540,  541,  542,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,  125,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,  323,
  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,   -1,  360,  361,  362,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
  424,   -1,   -1,   -1,  273,  429,   -1,   -1,  432,  433,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,
  454,  455,  456,  457,   -1,   -1,  460,   -1,  462,   -1,
  464,  465,  466,   -1,   -1,  469,  470,   33,  472,  473,
  474,   -1,   38,   -1,   40,   41,   42,  481,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  527,  528,   91,  530,  531,  532,   -1,
  534,  535,  536,  537,  538,  539,  540,  541,  542,   -1,
  544,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,  410,  411,  412,  413,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  432,  433,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,   -1,   -1,   -1,  456,  457,   -1,
   -1,   -1,   -1,  462,   -1,   -1,  465,   -1,   -1,   -1,
   -1,   -1,   -1,  472,  473,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,
   -1,  530,  531,  532,   -1,  534,  535,  536,  537,  538,
  539,  540,  541,  542,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,    0,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,   40,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  360,  361,  362,   -1,   59,   -1,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,  424,   -1,
   -1,   -1,  123,  429,  125,   -1,  432,  433,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,
  456,  457,   -1,   -1,  460,   -1,  462,   -1,  464,  465,
  466,   -1,   -1,  469,  470,   -1,  472,  473,  474,   -1,
   -1,   -1,   -1,   -1,   -1,  481,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,  535,
  536,  537,  538,  539,  540,  541,  542,   -1,  544,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,
  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,   -1,
  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,
  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,
   -1,    0,   -1,  294,  295,  306,   -1,  308,   -1,  300,
  311,  302,   -1,   -1,   -1,  316,   -1,   -1,  309,   -1,
   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  326,  327,   -1,  329,  330,
  331,  332,  333,   -1,   -1,   -1,   -1,  338,   -1,   -1,
  341,   -1,   -1,   -1,   -1,   -1,  347,  358,   -1,   -1,
   59,  352,   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,  374,  375,  366,  367,  368,  369,  370,
  371,  372,  373,   -1,   -1,   -1,   -1,   -1,  379,   -1,
  391,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  123,   -1,  125,   -1,  429,   -1,
   -1,  432,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,   -1,  454,  455,  456,  457,   -1,   -1,  460,
   -1,  462,   -1,  464,  465,  466,   -1,   -1,  469,  470,
   -1,  472,  473,  474,   -1,   -1,   -1,   -1,   -1,   -1,
  481,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,
  531,  532,   -1,  534,  535,  536,  537,  538,  539,  540,
  541,  542,   -1,  544,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,  288,
   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  270,  271,
  272,   -1,    0,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,  322,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,
  339,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  323,  324,  325,   -1,  364,  365,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,  123,   -1,  125,   -1,   -1,
   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,   -1,  454,  455,  456,  457,   -1,
   -1,  460,   -1,  462,   -1,  464,  465,  466,  467,   -1,
  469,  470,   -1,  472,  473,  474,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,
   -1,  530,  531,  532,   -1,  534,  535,  536,  537,  538,
  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,
   -1,   -1,  544,   -1,   -1,  273,   -1,   -1,   -1,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
  288,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  271,   -1,   -1,    0,  275,  276,  277,  278,  279,   -1,
  281,  282,  283,  284,  322,  286,  287,   -1,   -1,  290,
  291,  292,  293,   -1,   -1,   -1,  297,  298,   -1,   -1,
   -1,  339,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  323,  324,  325,   -1,  364,  365,   -1,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,
  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,  123,   -1,  125,   -1,
   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,   -1,  454,  455,  456,  457,
   -1,   -1,  460,   -1,  462,   -1,  464,  465,  466,  467,
   -1,  469,  470,   -1,  472,  473,  474,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,
  528,   -1,  530,  531,  532,   -1,  534,  535,  536,  537,
  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,
   -1,   -1,   -1,  544,   -1,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,  288,   -1,  290,  291,  292,  293,   -1,   -1,  296,
  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  271,   -1,   -1,    0,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,  322,  286,  287,   -1,   -1,
  290,  291,  292,  293,   -1,   -1,   -1,  297,  298,   -1,
   -1,   -1,  339,   -1,   -1,   -1,  306,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  323,  324,  325,   -1,  364,  365,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,   -1,   -1,
   -1,  418,  419,  420,  421,  422,  423,  424,  425,  426,
  427,  428,  429,  430,  431,  432,  433,  123,   -1,  125,
   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,  456,
  457,   -1,   -1,  460,   -1,  462,   -1,  464,  465,  466,
  467,   -1,  469,  470,   -1,  472,  473,  474,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  527,  528,   -1,  530,  531,  532,   -1,  534,  535,  536,
  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,   -1,   -1,   -1,  544,   -1,   -1,  273,   -1,   -1,
   -1,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,  288,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,   -1,   -1,    0,  275,  276,  277,  278,
  279,   -1,  281,  282,  283,  284,  322,  286,  287,   -1,
   -1,  290,  291,  292,  293,   -1,   -1,   -1,  297,  298,
   -1,   -1,   -1,  339,   -1,   -1,   -1,  306,   -1,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  323,  324,  325,   -1,  364,  365,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,   -1,
   -1,   -1,  418,  419,  420,  421,  422,  423,  424,  425,
  426,  427,  428,  429,  430,  431,  432,  433,  123,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,
  456,  457,   -1,   -1,  460,   -1,  462,   -1,  464,  465,
  466,  467,   -1,  469,  470,   -1,  472,  473,  474,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,  535,
  536,  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,
   -1,   -1,   -1,   -1,   -1,  544,   -1,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,   -1,  281,  282,  283,  284,
   -1,  286,  287,  288,   -1,  290,  291,  292,  293,   -1,
   -1,  296,  297,  298,   -1,   -1,   -1,   -1,  123,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,   -1,   -1,   -1,   -1,  364,
  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  428,  429,  430,  431,  432,  433,   -1,
   -1,    0,   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,  273,  454,
  455,  456,  457,   -1,   -1,  460,   -1,  462,   -1,  464,
  465,  466,  467,   -1,  469,  470,   -1,  472,  473,  474,
   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,
  535,  536,  537,  538,  539,  540,  541,  542,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  428,  429,  430,  431,  432,  433,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,  454,
  455,  456,  457,   -1,   -1,  460,   -1,  462,   -1,  464,
  465,  466,  467,   -1,  469,  470,   -1,  472,  473,  474,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  527,  528,  273,  530,  531,  532,   -1,  534,
  535,  536,  537,  538,  539,  540,  541,  542,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  391,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,   -1,   -1,    0,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,  273,  454,  455,  456,  457,   -1,
   -1,  460,   -1,  462,   -1,  464,  465,  466,  467,   -1,
  469,  470,   -1,  472,  473,  474,   -1,  296,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,
   -1,  530,  531,  532,   -1,  534,  535,  536,  537,  538,
  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  391,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,   -1,  454,  455,  456,  457,   -1,
   -1,  460,   -1,  462,   -1,  464,  465,  466,  467,   -1,
  469,  470,   -1,  472,  473,  474,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,
  509,  510,   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,
  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,
  273,  530,  531,  532,   -1,  534,  535,  536,  537,  538,
  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,
  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
  433,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,  449,  450,  451,  452,
   -1,  454,  455,  456,  457,  273,  274,  460,   -1,  462,
   -1,  464,  465,  466,  467,   -1,  469,  470,   -1,  472,
  473,  474,   -1,   40,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,  311,   61,   -1,   -1,   -1,  316,   -1,
   -1,   -1,   -1,   -1,  322,   -1,  509,  510,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,
   -1,  534,  535,  536,  537,  538,  539,  540,  541,  542,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,
  418,  419,  420,  421,  422,  423,  424,   -1,   -1,   -1,
   -1,  429,   -1,   -1,  432,  433,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,   -1,  454,  455,  456,  457,
   -1,   -1,  460,   -1,  462,   -1,  464,  465,  466,   -1,
   -1,  469,  470,   -1,  472,  473,  474,   -1,   40,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  527,
  528,   -1,  530,  531,  532,   -1,  534,  535,  536,  537,
  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,  311,   -1,   -1,   -1,   -1,  316,
   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,   59,   -1,
   -1,  418,  419,  420,  421,  422,  423,  424,   -1,   -1,
   -1,   -1,  429,   -1,   -1,  432,  433,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,  456,
  457,  273,  274,  460,   -1,  462,   -1,  464,  465,  466,
   -1,   -1,  469,  470,   -1,  472,  473,  474,   -1,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
  322,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  527,  528,   -1,  530,  531,  532,   -1,  534,  535,  536,
  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,   -1,   -1,   -1,  418,  419,  420,  421,
  422,  423,  424,   -1,   -1,   -1,   59,  429,   -1,  260,
  432,  433,  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,   -1,  454,  455,  456,  457,   -1,   -1,  460,   -1,
  462,   -1,  464,  465,  466,   -1,   -1,  469,  470,   -1,
  472,  473,  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,  322,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,
  532,   -1,  534,  535,  536,  537,  538,  539,  540,  541,
  542,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,   -1,   -1,   -1,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  433,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,   -1,  454,  455,  456,  457,  260,   -1,  460,
  263,  462,   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,
  273,  472,  473,  474,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,  509,  510,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,
  531,  532,   -1,  534,  535,  536,  537,  538,  539,  540,
  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,
  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
  433,   -1,   -1,   -1,   59,   -1,   -1,  260,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,
  273,  454,  455,  456,  457,   -1,   -1,  460,   -1,  462,
   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,   -1,  472,
  473,  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  322,
  125,   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,
   -1,  534,  535,  536,  537,  538,  539,  540,  541,  542,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,
  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
  433,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,
   -1,  454,  455,  456,  457,  260,   -1,  460,   -1,  462,
   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,  273,  472,
  473,  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,
   -1,  534,  535,  536,  537,  538,  539,  540,  541,  542,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  428,  429,  430,  431,  432,  433,   -1,
   -1,   -1,   59,   -1,   -1,  260,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,  273,  454,
  455,  456,  457,   -1,   -1,  460,   -1,  462,   -1,   -1,
  465,   -1,   -1,   -1,   -1,   -1,   -1,  472,  473,  474,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  322,  125,   -1,
   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,
  535,  536,  537,  538,  539,  540,  541,  542,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  428,  429,  430,  431,  432,  433,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,  454,
  455,  456,  457,  260,   -1,  460,   -1,  462,   -1,   -1,
  465,   -1,   -1,   -1,   -1,   -1,  273,  472,  473,  474,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,
  535,  536,  537,  538,  539,  540,  541,  542,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,   -1,   -1,
   -1,  418,  419,  420,  421,  422,  423,  424,  425,  426,
  427,  428,  429,  430,  431,  432,  433,   -1,   -1,   -1,
   59,   -1,   -1,  260,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,  273,  454,  455,  456,
  457,   -1,   -1,  460,   -1,  462,   -1,   -1,  465,   -1,
   -1,   -1,   -1,   -1,   -1,  472,  473,  474,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  322,  125,   -1,   -1,   -1,
   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  527,  528,   -1,  530,  531,  532,   -1,  534,  535,  536,
  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,   -1,   -1,
   -1,  418,  419,  420,  421,  422,  423,  424,  425,  426,
  427,  428,  429,  430,  431,  432,  433,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,  456,
  457,  260,   -1,  460,  263,  462,   59,   -1,  465,   -1,
   -1,   -1,   -1,   -1,  273,  472,  473,  474,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
  527,  528,  125,  530,  531,  532,   -1,  534,  535,  536,
  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,  418,
  419,  420,  421,  422,  423,  424,   -1,   -1,   -1,   -1,
  429,   -1,    0,  432,  433,   -1,   -1,   -1,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,  273,  454,  455,  456,  457,   -1,
   -1,  460,   -1,  462,   -1,  464,  465,  466,   -1,   -1,
  469,  470,   -1,  472,  473,  474,   44,   -1,   -1,   -1,
  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,  527,  528,
   -1,  530,  531,  532,   -1,  534,  535,  536,  537,  538,
  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,  418,
  419,  420,  421,  422,  423,  424,    0,   -1,   -1,   -1,
  429,   -1,   -1,  432,  433,   -1,   -1,  410,  411,  412,
  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,   -1,  454,  455,  456,  457,  432,
  433,  460,   -1,  462,   -1,  464,  465,  466,   -1,   -1,
  469,  470,   -1,  472,  473,  474,  449,  450,  451,  452,
   -1,   -1,   -1,  456,  457,   59,   -1,   -1,   -1,  462,
   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,   -1,  472,
  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  509,  510,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,  527,  528,
   -1,  530,  531,  532,   -1,  534,  535,  536,  537,  538,
  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,   -1,  527,  528,   -1,  530,  531,  532,
   -1,  534,  535,  536,  537,  538,  539,  540,  541,  542,
   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,   -1,
  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,
  291,  292,  293,   -1,   -1,   -1,  297,  298,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  358,   -1,   -1,
  418,  419,  420,  421,  422,  423,  424,   -1,   -1,   -1,
   -1,  429,   -1,   -1,  432,  433,  260,   -1,   -1,  263,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
   -1,  449,  450,  451,  452,   -1,  454,  455,  456,  457,
   -1,   -1,  460,   -1,  462,   -1,   -1,  465,   -1,   -1,
   -1,   -1,   -1,   -1,  472,  473,  474,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,  322,   -1,
   -1,   42,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,
  528,   -1,  530,  531,  532,   -1,  534,  535,  536,  537,
  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,
  424,   -1,   -1,  544,   -1,  429,   -1,   -1,  432,  433,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,
  454,  455,  456,  457,   -1,   33,  460,   -1,  462,   -1,
   38,  465,   -1,   -1,   42,   -1,   -1,   -1,  472,  473,
  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,
  534,  535,  536,  537,  538,  539,  540,  541,  542,  260,
  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,   -1,
  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,
  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  323,  324,  325,   33,   -1,   -1,   -1,   -1,
   38,   -1,   -1,   -1,   42,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   -1,   -1,   -1,  358,   -1,  360,
  361,  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,   -1,  271,  415,  416,  417,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   33,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,
  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,  360,  361,  362,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  544,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,  415,  416,  417,
  268,   -1,   -1,  271,   -1,   -1,   -1,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   33,  306,   -1,
  308,   -1,   38,   -1,   -1,   -1,   42,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,  360,  361,  362,   91,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  271,   -1,
   -1,   -1,  275,  276,  277,  278,  279,   -1,  281,  282,
  283,  284,   -1,  286,  287,   -1,  544,  290,  291,  292,
  293,  294,   -1,   -1,  297,  298,   -1,   -1,   -1,   -1,
   33,   -1,   -1,  306,   -1,  308,   -1,  415,  416,  417,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  323,  324,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  358,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,  367,  368,  369,   -1,   -1,  372,
   -1,   -1,   -1,  376,  377,  378,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,  271,  544,   -1,   -1,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  306,   -1,  308,   -1,   -1,   -1,   -1,   91,  481,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  360,  361,  362,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,
   -1,  544,  275,  276,  277,  278,  279,   -1,  281,  282,
  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,
  293,  294,   -1,   -1,  297,  298,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,  415,
  416,  417,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
  323,  324,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  358,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,  367,  368,  369,   -1,   -1,  372,
   -1,   -1,   -1,  376,  377,  378,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,   91,
   -1,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,  544,  323,
  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,  481,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,
   -1,  263,   91,   -1,   -1,   -1,  268,   -1,   -1,  271,
   -1,   -1,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,   -1,
   -1,  415,  416,  417,  306,   33,  308,   -1,   -1,   -1,
   -1,  544,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,  325,   -1,  327,   -1,   -1,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,  452,  271,
   -1,   -1,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,  358,   -1,  290,  291,
  292,  293,   -1,   91,  296,  297,  298,   -1,   -1,   -1,
  372,   -1,   -1,   -1,  306,   33,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  415,  416,  417,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,
  544,  260,  261,   91,  263,   -1,   -1,   -1,   -1,  268,
   -1,   -1,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,
   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   33,  306,   -1,  308,
   -1,   -1,   -1,  415,  416,  417,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,  358,
   -1,   -1,  260,  261,   91,  263,   -1,   -1,   -1,   -1,
  268,   -1,  544,  271,   -1,   -1,   -1,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,
  308,   -1,   -1,   -1,   -1,   -1,  415,  416,  417,   -1,
   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,  544,  271,   -1,   -1,   -1,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
  358,   33,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,
  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  415,  416,  417,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,   -1,   -1,  271,  544,   -1,   -1,  275,  276,
  277,  278,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,
  297,  298,   -1,   -1,   40,   -1,   -1,   -1,   -1,  306,
   -1,  308,   33,   -1,   -1,   -1,   -1,  415,  416,  417,
   41,   -1,   -1,   59,   60,  271,  323,  324,  325,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,  295,
   -1,  297,  298,   -1,  300,   -1,  302,   -1,   -1,   -1,
  306,  358,  308,  309,   -1,   -1,   -1,   33,   -1,   -1,
   91,   -1,   -1,   -1,   -1,   -1,  544,  323,  324,  325,
  326,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,   -1,   -1,   -1,   -1,  415,  416,
  417,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,  271,
   -1,   -1,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,  544,   -1,  290,  291,
  292,  293,   -1,  295,   -1,  297,  298,   -1,  300,   -1,
  302,   -1,   -1,   -1,  306,   -1,  308,  309,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,  325,  326,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   -1,   -1,   -1,
   47,   -1,   -1,   -1,   -1,   -1,  358,   -1,   -1,   -1,
   -1,   -1,   59,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  544,   -1,   -1,
  271,   -1,   -1,   -1,   -1,  276,  277,  278,  279,   -1,
  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,
  291,  292,  293,   -1,   -1,   -1,  297,  298,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  306,  123,  308,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  544,   -1,
   -1,   -1,  323,  324,  325,  271,   -1,   -1,   -1,   -1,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
   -1,  297,  298,   -1,   -1,   -1,   -1,  358,   -1,   -1,
  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,  325,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,   -1,   41,   -1,   -1,  414,   -1,
   -1,   -1,  418,  419,  420,  421,  422,  423,   -1,   -1,
   -1,   -1,  358,   59,   -1,   -1,  432,  433,   -1,   -1,
   -1,   -1,  544,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,   -1,   -1,   -1,
   -1,   -1,   -1,  260,  460,   -1,  263,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,  474,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  509,  510,  511,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  536,  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  544,   -1,   -1,   -1,   41,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,   -1,   -1,   -1,  414,  544,   -1,
   -1,  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  432,  433,  263,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,  123,
   -1,  125,  449,  450,  451,  452,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  460,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   47,   -1,   -1,   -1,   -1,  474,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  536,
  537,  538,  539,  540,  541,  542,   -1,   -1,  123,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  391,   -1,   59,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,   -1,   -1,  260,   -1,  414,  263,
   -1,   -1,  418,  419,  420,  421,  422,  423,   -1,  273,
   -1,   -1,   -1,   -1,   -1,   -1,  432,  433,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,   -1,   -1,   -1,
   -1,  123,   -1,  125,  460,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  474,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  509,  510,  260,   -1,   -1,  263,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  536,  537,  538,  539,  540,  541,  542,  391,   -1,   59,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,   -1,   -1,   -1,   -1,
  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,  433,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,
   -1,  263,   -1,   -1,   -1,  449,  450,  451,  452,   -1,
   -1,  273,   -1,  123,   -1,  125,  460,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  509,  510,   -1,   -1,  414,
   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,  433,   -1,
   -1,   -1,  536,  537,  538,  539,  540,  541,  542,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,   -1,
   -1,   -1,  123,   -1,  125,  460,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  474,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,   -1,   -1,
  260,   -1,  414,  263,   -1,   -1,  418,  419,  420,  421,
  422,  423,   -1,  273,  509,  510,   -1,   -1,   -1,   -1,
  432,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,  536,  537,  538,  539,  540,  541,  542,  460,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,  260,
   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  536,  537,  538,  539,  540,  541,
  542,   -1,   -1,   59,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,  418,  419,
  420,  421,  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  432,  433,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,   -1,   -1,   -1,   -1,  123,   -1,  125,
  460,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  474,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  509,
  510,  260,   -1,  414,  263,   -1,   -1,  418,  419,  420,
  421,  422,  423,   -1,  273,   -1,   -1,   -1,   -1,   -1,
   -1,  432,  433,   -1,   -1,   -1,  536,  537,  538,  539,
  540,  541,  542,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,   -1,   -1,  123,   -1,  125,   -1,   -1,  460,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  474,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,  509,  510,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  536,  537,  538,  539,  540,
  541,  542,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,  418,
  419,  420,  421,  422,  423,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  432,  433,   59,   -1,   -1,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,  273,   -1,   -1,   -1,   -1,   -1,
   -1,  460,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  474,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,   -1,   -1,   -1,   -1,  414,  123,
   -1,  125,  418,  419,  420,  421,  422,  423,   -1,   -1,
  509,  510,   -1,   -1,   -1,   -1,  432,  433,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,  449,  450,  451,  452,  536,  537,  538,
  539,  540,  541,  542,  460,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  474,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,   -1,   -1,  509,  510,  414,  123,   -1,  125,  418,
  419,  420,  421,  422,  423,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  432,  433,   59,   -1,   -1,   -1,   -1,
  536,  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,
  449,  450,  451,  452,   -1,   -1,  260,   -1,   -1,  263,
   -1,  460,   -1,   -1,   59,   -1,   -1,   -1,   -1,  273,
   -1,   -1,   -1,   -1,   -1,  474,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  536,  537,  538,
  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,   59,   -1,   -1,   -1,
  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,  433,
   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,  273,
   -1,   -1,   -1,   -1,   -1,   -1,  460,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  474,   -1,  125,   -1,   -1,   -1,   -1,   -1,  273,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,   -1,  509,  510,  414,   -1,   -1,
   -1,  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,
   -1,   -1,   -1,  125,   -1,  432,  433,   -1,   -1,   -1,
   -1,   -1,  536,  537,  538,  539,  540,  541,  542,   -1,
   -1,   -1,  449,  450,  451,  452,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  460,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  474,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,   -1,   -1,   -1,   -1,
  414,   -1,   59,   -1,  418,  419,  420,  421,  422,  423,
   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,  432,  433,
   -1,   -1,   -1,   -1,   -1,  410,  411,  412,  413,  414,
  273,   -1,   -1,   -1,   -1,  449,  450,  451,  452,  536,
  537,  538,  539,  540,  541,  542,  460,  432,  433,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  474,   -1,   -1,   -1,  449,  450,  451,  452,  125,   -1,
   -1,  456,  457,   -1,   -1,   -1,   -1,  462,   -1,  322,
  465,  273,   -1,   -1,   -1,   -1,   -1,  472,  473,   -1,
   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  536,  537,  538,  539,  540,  541,  542,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,
  535,  536,  537,  538,  539,  540,  541,  542,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  410,   -1,  412,
  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  424,   -1,   -1,   -1,   -1,  429,   -1,   -1,  432,
  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,
   -1,  454,  455,   -1,   -1,   -1,  273,   -1,  410,   -1,
  412,  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  474,  424,   -1,   -1,   -1,   -1,  429,   -1,   -1,
  432,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,   -1,  454,  455,   -1,  322,  509,  510,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  536,  537,  538,  539,  540,  541,  542,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  271,   -1,   -1,  509,  510,  276,
  277,   -1,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,   -1,  289,  290,  291,  292,  293,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  536,  537,  538,  539,  540,  541,
  542,   -1,   -1,  410,   -1,  412,  413,  414,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,   -1,
   -1,   -1,  429,   -1,   -1,  432,  433,   -1,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  257,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,   -1,
  271,  358,   -1,   -1,   -1,  276,  277,   -1,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  474,  289,  290,
  291,  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  335,   -1,  337,   -1,   -1,   -1,
   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  536,
  537,  538,  539,  540,  541,  542,   -1,  358,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  391,   -1,   -1,   -1,   -1,  482,   -1,  484,  485,  486,
  487,  488,  489,  490,  491,  492,  493,  494,  495,  496,
  497,  498,  499,  500,   -1,   -1,   -1,  504,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  482,   -1,  484,  485,  486,  487,  488,  489,  490,
  491,  492,  493,  494,  495,  496,  497,  498,  499,  500,
   -1,   -1,   -1,  504,
};
static int yyctable[] = {                                     -1,
  239,  561,   -1,  441,  794,   -1,  291,  724,   -1,  292,
  724,   -1,  293,  724,   -1,  295,  724,   -1,  296,  724,
   -1,  297,  724,   -1,  298,  724,   -1,  530,  745,   -1,
  206,   40,   -1,  225,  495,   -1,   97,  495,   -1,   99,
  495,   -1,  100,  495,   -1,  101,  495,   -1,  102,  495,
   -1,  103,  495,   -1,  792,  317,   -1,  860,  796,   -1,
   67,  569,   -1,   68,  569,   -1,   69,  569,   -1,   27,
   78,   -1,   28,   78,   -1,   29,   78,   -1,   30,   78,
   -1,   31,   78,   -1,   32,   78,   -1,   33,   78,   -1,
   34,   78,   -1, 1145,  629,   -1,   67,  570,   -1,   68,
  570,   -1,   69,  570,   -1, 1162,   37,   -1, 1292,  800,
   -1, 1294,  798,   -1, 1306,  613,   -1, 1512,  802,   -1,
 1147,  576,   -1, 1148,  576,   -1,
};
#ifdef YYDESTRUCT
static int yyastable[] = {                                      0,
  310,   18,  155,  156,  157,  158,  159,  177,  178,  194,
  195,  196,  197,  201,  202,  207,  210,  217,  218,  272,
  273,  275,  276,  277,  279,  280,  281,  282,  283,  284,
  285,  286,  287,  297,  320,  321,  400,  406,  407,  423,
  424,  426,  427,  429,  430,  431,  432,  433,  434,  435,
  437,  439,  441,  443,  444,  445,  446,  447,  448,  450,
  451,  452,  465,  483,  489,  216,    5,    6,    8,  311,
  312,  299,  326,   64,  125,  485,  179,  180,  181,  182,
  183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
  193,  399,  399,    8,   14,   17,   40,   41,   45,   47,
   54,   71,   86,  295,  317,  318,  386,  388,  389,  298,
  299,  274,  401,  216,  403,  405,  216,  311,    9,  319,
  319,    9,   10,  336,  336,   13,   16,   20,   21,   22,
   23,   24,   26,   27,   28,   29,   31,   32,   35,   36,
   37,   38,   42,   43,   51,   53,   68,   69,   70,  103,
  104,  160,  161,  162,  289,  299,  307,  311,  315,  340,
  365,  383,  387,  389,  406,  407,  462,  290,  311,  311,
  311,  311,    7,   12,  343,  344,  343,  343,  290,  290,
  428,  290,  290,  290,  290,  343,  390,   60,  453,  391,
   23,   26,   27,   28,   29,   31,   32,   33,  290,  306,
  484,  487,  488,  319,  404,  294,  319,  392,  312,  299,
  340,  383,  384,  389,  462,    7,   33,  298,  348,  293,
  295,  295,   46,   48,   49,   50,  317,  317,  384,  385,
  387,  340,  298,  295,  319,  319,  208,  311,  403,  100,
  101,  102,  125,  220,  222,  223,  224,  225,  311,   75,
   76,  311,  311,  340,   26,   27,   28,   29,  383,   51,
  383,   24,   25,   34,   15,   17,  340,   22,   23,   24,
   26,   27,   28,   29,   31,   32,   35,   36,   37,   38,
  307,  354,  218,  305,  311,  389,  307,  311,  319,  308,
  105,  106,  107,  136,  299,  301,  305,  306,  136,  136,
  136,  136,  317,  388,  383,  449,  348,  296,   12,  296,
  296,  425,  310,  141,  142,  143,  144,  145,  146,  147,
  148,  149,  150,  151,  152,  153,  154,  163,  164,  165,
  166,  167,  168,  205,  219,  254,  255,  290,  291,  312,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  430,  433,  444,  445,  446,
  448,  467,  468,  469,  470,  471,  472,  473,  476,  436,
  438,  440,  442,  296,   39,   68,   72,   75,   76,   80,
   81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
   91,   98,  101,  108,  117,  311,  384,   61,  454,   39,
   72,   74,   75,   76,   77,   78,   83,   92,   97,   99,
  111,  112,  113,  114,  115,  116,  117,  118,  124,  317,
  305,  295,  299,  324,  295,  324,  295,  324,  295,  324,
  295,  324,  295,  324,  295,  486,  487,  295,  343,    7,
    8,  293,  304,   73,   75,   76,   82,  311,  311,  300,
   39,   72,   74,   75,   76,   77,  111,  112,  113,  114,
  117,  121,  122,  123,  226,  340,  298,  218,  311,  295,
  298,  317,  295,  290,  295,  292,    8,  319,  319,  296,
  119,  120,  299,  311,  313,  384,  290,  295,  348,  300,
  167,  402,  311,  221,  136,  383,   25,  311,  384,  295,
  295,   26,   27,   28,   29,  295,  295,  295,  295,  295,
  295,  295,  295,  295,  295,  307,  311,  319,  311,  300,
  300,  300,  311,  319,  311,  295,  295,  311,   20,  300,
  319,  341,  342,  340,  367,  368,  311,  311,  311,  311,
  340,  449,  291,   67,  155,  169,  174,  199,  200,  219,
  254,  255,  291,  424,  427,  429,  430,  433,  444,  445,
  446,  448,  456,  457,  459,  461,  291,  319,  319,  319,
  299,  110,  288,  299,  103,  384,  304,  312,  319,  319,
  336,   11,   31,   32,  295,  335,  336,  312,  319,  388,
   15,   17,  340,  389,  307,  384,   87,  348,  488,  317,
  385,  295,  343,  198,  295,  428,   55,   57,   58,   59,
  474,  475,  477,  479,  480,  481,  482,  312,  319,  471,
  209,  211,  214,  215,  291,  444,  445,  448,  491,  492,
  493,  494,   84,  209,  212,  291,  490,  492,  495,  496,
   41,  155,  207,  210,  291,  445,  448,  497,  207,  210,
  291,  445,  448,  498,  295,   75,   76,   77,  111,  112,
  113,  301,  382,  384,  455,  295,  295,  323,  295,  319,
  319,  319,  319,  336,  335,  335,  291,  293,  312,  296,
  319,  319,   75,   76,   77,  111,  112,  113,  295,  295,
  311,  311,  300,  348,  397,  398,  290,  340,   51,  376,
  377,  384,    7,  293,  296,  296,  386,  301,  334,  366,
   19,  372,  374,  322,  490,  136,  311,   19,   65,   66,
  327,  319,  295,  295,  295,  295,  319,  319,  319,  336,
  319,  335,  335,  336,  319,  319,  319,  336,  311,  319,
  300,  315,  315,  315,  384,  384,   20,  293,  300,  302,
  293,  305,  110,  394,  395,  319,  319,  404,  110,  288,
  103,  384,  290,  428,  290,  290,  290,  304,  319,  299,
  311,  299,  311,  319,  317,   19,  295,  295,  311,  384,
  307,  312,  319,  295,  343,  340,  312,  316,  319,  296,
  295,   20,  323,  337,  338,  339,  291,  384,  474,   56,
  471,  478,  478,  478,  478,  312,  319,  471,   62,   62,
  213,  298,  305,  319,  379,  298,  348,  343,  343,  298,
  298,  343,  343,  295,  216,  319,  311,  216,  311,  216,
  319,   39,   51,   52,   69,  119,  289,  292,  303,  328,
  329,  381,  293,  319,  348,  396,  299,  340,  348,  296,
  300,  296,  296,  296,  296,  296,  486,  296,  304,    8,
  293,  319,    2,   16,   21,   22,   24,   25,   26,   27,
   28,   29,   31,   32,   34,   35,   36,   37,   38,   80,
   82,   87,  103,  136,  227,  229,  230,  231,  232,  233,
  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
  244,  245,  249,  290,  345,  346,  466,   63,  314,  300,
  298,  296,  293,  372,    8,  293,  291,  298,    8,  298,
  299,  367,  295,  295,  311,  313,  291,   22,   23,   24,
   26,   27,   28,   29,   31,   32,   35,   36,   37,   38,
   42,   43,  110,  352,  353,  375,  448,  488,   28,   29,
   63,  203,  204,  206,  343,  311,  311,  296,  296,  319,
  319,  319,  336,  296,  296,  296,  296,  296,  296,  296,
  296,  296,  296,  296,  296,  315,  296,  296,  319,  341,
  340,  295,  384,   72,  117,  311,  384,   72,  117,  317,
  311,  299,  311,  299,  311,  317,   19,  425,  291,  458,
  460,  440,  319,  300,  319,  319,  293,  300,  340,  313,
  319,  336,   19,  312,  319,  348,  296,  295,  293,  296,
  293,  337,  340,  296,  293,  312,  319,  312,  319,  319,
  295,  304,  295,  296,  296,  295,  295,  296,  296,  319,
  315,  311,   63,  311,  296,  295,   39,  330,  331,  329,
  295,  311,  371,  302,  384,  296,  136,  396,   39,   46,
   48,   49,   50,   87,   88,   89,  133,  134,  135,  137,
  140,  296,  251,  252,  253,  319,  226,  350,  296,  324,
  324,  324,  324,  324,  324,  319,  319,  296,   25,   26,
   27,   28,   29,  295,  332,  243,  235,  247,  295,  228,
  248,   22,  332,  332,    2,   21,   22,   24,   25,   26,
   27,   28,   29,   31,   32,   34,   35,   36,   37,   38,
  230,  231,  233,  234,  235,  237,  238,  241,  242,  244,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  305,  325,  299,  305,  296,  344,
  312,  298,  347,   28,  319,  327,  348,  349,  383,  397,
  291,  298,  377,  290,  290,  295,  348,  319,  302,  337,
  337,  334,  366,  295,  299,  295,  299,   26,   27,   28,
   29,  295,  299,  295,  299,  295,  299,  295,  299,  295,
  299,  295,  299,  295,  299,  295,  299,  295,  299,  295,
  299,  295,  299,  295,  299,  295,  299,  104,  109,  378,
  448,  343,  312,  296,  296,  296,  296,  296,  337,  197,
  406,  311,  340,  319,  319,  293,  340,  313,  291,  170,
  171,  172,  173,  291,  433,  445,  446,  448,  463,  173,
  175,  176,  291,  433,  445,  446,  448,  464,  291,  136,
  300,  300,  384,  347,  384,  296,  296,  311,  296,  337,
  316,  316,  296,  350,  339,   62,   62,  379,  296,  319,
  319,  295,  331,  384,  369,  370,  384,  293,  380,  311,
  348,  296,  295,  304,  304,  300,  300,  300,  300,  295,
  313,    8,  293,    8,  250,  348,  299,  299,   25,   26,
   27,   28,   29,  271,  293,  299,  306,  292,  300,  319,
  291,   22,   23,   24,   26,   27,   28,   29,   31,   32,
   35,   36,   37,   38,   44,  348,  351,  353,  295,  295,
  290,  375,  372,  300,  296,  296,  295,  295,  327,  319,
  319,  319,  295,  299,  295,  299,  295,  299,  295,  299,
  319,  319,  319,  319,  319,  319,  336,  319,  319,  335,
  319,  335,  336,  319,  319,  319,  319,  319,  319,  319,
  336,  319,  352,  319,    8,   44,  319,   44,   51,  383,
  319,   42,   91,  110,  365,  373,  296,  402,  296,  311,
  300,  300,  384,  384,  256,  388,  388,  388,  388,  388,
  388,  388,  312,  293,   19,  296,  312,  312,  319,  304,
  296,  319,  311,  296,  293,  381,  380,  396,  319,  138,
  139,  138,  139,  346,  382,  319,  298,  293,  319,  319,
  348,  300,  319,  292,  300,   26,   27,   28,   29,  319,
   26,   27,   28,  319,  375,  291,  291,  302,  337,  337,
  296,  300,  296,  300,  319,  319,  319,  319,  319,  319,
  336,  319,  296,  300,  296,  300,  296,  300,  296,  300,
  296,  296,  300,  296,  296,  300,  296,  300,  296,  300,
  296,  300,  296,  300,  296,  300,  296,  296,  300,  296,
    8,  296,  300,   51,  383,  299,  311,  295,  293,   19,
  317,  384,  313,  379,  296,  380,  384,  296,  296,  296,
  295,    8,  319,  348,  300,  300,  300,  319,  296,  304,
  304,  304,  296,  291,  296,  296,  295,  295,  296,  300,
  296,  300,  296,  300,  296,  300,  295,  295,  295,  295,
  295,  295,  295,  295,  295,  295,  295,  295,  296,  295,
    8,  300,  298,  337,  384,  313,  340,  301,  333,  334,
  304,  337,  296,  293,  296,  345,  300,  319,  319,  319,
  361,  358,  295,  295,  295,  295,  357,  358,  359,  360,
  355,  356,  357,  358,  359,  360,  364,  362,  363,  352,
  296,  333,  384,  295,  379,  296,  348,  296,  296,  296,
  296,  327,  296,  319,  357,  358,  359,  360,  296,  319,
  296,  296,  319,  296,  336,  296,  319,  335,  296,  335,
  336,  296,  296,  296,  296,  296,  352,    8,   44,  296,
   44,   51,  296,  383,  347,  295,   19,  337,  393,  293,
  296,  296,  296,  296,    8,  337,  313,  296,   39,   54,
   70,   79,   93,   94,   95,   96,  125,  126,  127,  128,
  129,  130,  131,  290,  348,  296,  295,  295,  296,  256,
  337,  319,  103,  296,  296,  317,  340,  384,   19,  313,
  333,  295,  337,  296,
};
#endif /* YYDESTRUCT */
#define YYFINAL 1
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 544
#if YYDEBUG
static const char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,0,"'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,
0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,"'{'",0,"'}'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ERROR_","BAD_COMMENT_",
"BAD_LITERAL_","ID","DOTTEDNAME","QSTRING","SQSTRING","INT32","INT64","FLOAT64",
"HEXBYTE","TYPEDEF_T","TYPEDEF_M","TYPEDEF_F","TYPEDEF_TS","TYPEDEF_MR",
"TYPEDEF_CA","DCOLON","ELLIPSIS","VOID_","BOOL_","CHAR_","UNSIGNED_","INT_",
"INT8_","INT16_","INT32_","INT64_","FLOAT_","FLOAT32_","FLOAT64_","BYTEARRAY_",
"UINT_","UINT8_","UINT16_","UINT32_","UINT64_","FLAGS_","CALLCONV_","MDTOKEN_",
"OBJECT_","STRING_","NULLREF_","DEFAULT_","CDECL_","VARARG_","STDCALL_",
"THISCALL_","FASTCALL_","CLASS_","BYREFLIKE_","TYPEDREF_","UNMANAGED_",
"FINALLY_","HANDLER_","CATCH_","FILTER_","FAULT_","EXTENDS_","IMPLEMENTS_",
"TO_","AT_","TLS_","TRUE_","FALSE_","_INTERFACEIMPL","VALUE_","VALUETYPE_",
"NATIVE_","INSTANCE_","SPECIALNAME_","FORWARDER_","STATIC_","PUBLIC_",
"PRIVATE_","FAMILY_","FINAL_","SYNCHRONIZED_","INTERFACE_","SEALED_","NESTED_",
"ABSTRACT_","AUTO_","SEQUENTIAL_","EXPLICIT_","ANSI_","UNICODE_","AUTOCHAR_",
"IMPORT_","ENUM_","VIRTUAL_","NOINLINING_","AGGRESSIVEINLINING_",
"NOOPTIMIZATION_","AGGRESSIVEOPTIMIZATION_","UNMANAGEDEXP_","BEFOREFIELDINIT_",
"STRICT_","RETARGETABLE_","WINDOWSRUNTIME_","NOPLATFORM_","METHOD_","FIELD_",
"PINNED_","MODREQ_","MODOPT_","SERIALIZABLE_","PROPERTY_","TYPE_","ASSEMBLY_",
"FAMANDASSEM_","FAMORASSEM_","PRIVATESCOPE_","HIDEBYSIG_","NEWSLOT_",
"RTSPECIALNAME_","PINVOKEIMPL_","_CTOR","_CCTOR","LITERAL_","NOTSERIALIZED_",
"INITONLY_","REQSECOBJ_","CIL_","OPTIL_","MANAGED_","FORWARDREF_",
"PRESERVESIG_","RUNTIME_","INTERNALCALL_","_IMPORT","NOMANGLE_","LASTERR_",
"WINAPI_","AS_","BESTFIT_","ON_","OFF_","CHARMAPERROR_","INSTR_NONE",
"INSTR_VAR","INSTR_I","INSTR_I8","INSTR_R","INSTR_BRTARGET","INSTR_METHOD",
"INSTR_FIELD","INSTR_TVAR","INSTR_TYPE","INSTR_STRING","INSTR_SIG","INSTR_TOK",
"INSTR_SWITCH","_CLASS","_NAMESPACE","_METHOD","_FIELD","_DATA","_THIS","_BASE",
"_NESTER","_EMITBYTE","_TRY","_MAXSTACK","_LOCALS","_ENTRYPOINT","_ZEROINIT",
"_EVENT","_ADDON","_REMOVEON","_FIRE","_OTHER","_PROPERTY","_SET","_GET",
"_PERMISSION","_PERMISSIONSET","REQUEST_","DEMAND_","ASSERT_","DENY_",
"PERMITONLY_","LINKCHECK_","INHERITCHECK_","REQMIN_","REQOPT_","REQREFUSE_",
"PREJITGRANT_","PREJITDENY_","NONCASDEMAND_","NONCASLINKDEMAND_",
"NONCASINHERITANCE_","_LINE","P_LINE","_LANGUAGE","_CUSTOM","INIT_","_SIZE",
"_PACK","_VTABLE","_VTFIXUP","FROMUNMANAGED_","CALLMOSTDERIVED_","_VTENTRY",
"RETAINAPPDOMAIN_","_FILE","NOMETADATA_","_HASH","_ASSEMBLY","_PUBLICKEY",
"_PUBLICKEYTOKEN","ALGORITHM_","_VER","_LOCALE","EXTERN_","_MRESOURCE",
"_MODULE","_EXPORT","LEGACY_","LIBRARY_","X86_","AMD64_","ARM_","ARM64_",
"MARSHAL_","CUSTOM_","SYSSTRING_","FIXED_","VARIANT_","CURRENCY_","SYSCHAR_",
"DECIMAL_","DATE_","BSTR_","TBSTR_","LPSTR_","LPWSTR_","LPTSTR_","OBJECTREF_",
"IUNKNOWN_","IDISPATCH_","STRUCT_","SAFEARRAY_","BYVALSTR_","LPVOID_","ANY_",
"ARRAY_","LPSTRUCT_","IIDPARAM_","IN_","OUT_","OPT_","_PARAM","_OVERRIDE",
"WITH_","NULL_","HRESULT_","CARRAY_","USERDEFINED_","RECORD_","FILETIME_",
"BLOB_","STREAM_","STORAGE_","STREAMED_OBJECT_","STORED_OBJECT_","BLOB_OBJECT_",
"CF_","CLSID_","VECTOR_","_SUBSYSTEM","_CORFLAGS","ALIGNMENT_","_IMAGEBASE",
"_STACKRESERVE","_TYPEDEF","_TEMPLATE","_TYPELIST","_MSCORLIB","P_DEFINE",
"P_UNDEF","P_IFDEF","P_IFNDEF","P_ELSE","P_ENDIF","P_INCLUDE","CONSTRAINT_",
"CONST_",
};
static const char *yyrule[] = {
"$accept : decls",
"decls :",
"decls : decls decl",
"decl : classHead '{' classDecls '}'",
"decl : nameSpaceHead '{' decls '}'",
"decl : methodHead methodDecls '}'",
"decl : fieldDecl",
"decl : dataDecl",
"decl : vtableDecl",
"decl : vtfixupDecl",
"decl : extSourceSpec",
"decl : fileDecl",
"decl : assemblyHead '{' assemblyDecls '}'",
"decl : assemblyRefHead '{' assemblyRefDecls '}'",
"decl : exptypeHead '{' exptypeDecls '}'",
"decl : manifestResHead '{' manifestResDecls '}'",
"decl : moduleHead",
"decl : secDecl",
"decl : customAttrDecl",
"decl : _SUBSYSTEM int32",
"decl : _CORFLAGS int32",
"decl : _FILE ALIGNMENT_ int32",
"decl : _IMAGEBASE int64",
"decl : _STACKRESERVE int64",
"decl : languageDecl",
"decl : typedefDecl",
"decl : compControl",
"decl : _TYPELIST '{' classNameSeq '}'",
"decl : _MSCORLIB",
"classNameSeq :",
"classNameSeq : className classNameSeq",
"compQstring : QSTRING",
"compQstring : compQstring '+' QSTRING",
"languageDecl : _LANGUAGE SQSTRING",
"languageDecl : _LANGUAGE SQSTRING ',' SQSTRING",
"languageDecl : _LANGUAGE SQSTRING ',' SQSTRING ',' SQSTRING",
"id : ID",
"id : SQSTRING",
"dottedName : id",
"dottedName : DOTTEDNAME",
"dottedName : dottedName '.' dottedName",
"int32 : INT32",
"int64 : INT64",
"int64 : INT32",
"float64 : FLOAT64",
"float64 : FLOAT32_ '(' int32 ')'",
"float64 : FLOAT64_ '(' int64 ')'",
"typedefDecl : _TYPEDEF type AS_ dottedName",
"typedefDecl : _TYPEDEF className AS_ dottedName",
"typedefDecl : _TYPEDEF memberRef AS_ dottedName",
"typedefDecl : _TYPEDEF customDescr AS_ dottedName",
"typedefDecl : _TYPEDEF customDescrWithOwner AS_ dottedName",
"compControl : P_DEFINE dottedName",
"compControl : P_DEFINE dottedName compQstring",
"compControl : P_UNDEF dottedName",
"compControl : P_IFDEF dottedName",
"compControl : P_IFNDEF dottedName",
"compControl : P_ELSE",
"compControl : P_ENDIF",
"compControl : P_INCLUDE QSTRING",
"compControl : ';'",
"customDescr : _CUSTOM customType",
"customDescr : _CUSTOM customType '=' compQstring",
"customDescr : _CUSTOM customType '=' '{' customBlobDescr '}'",
"customDescr : customHead bytes ')'",
"customDescrWithOwner : _CUSTOM '(' ownerType ')' customType",
"customDescrWithOwner : _CUSTOM '(' ownerType ')' customType '=' compQstring",
"customDescrWithOwner : _CUSTOM '(' ownerType ')' customType '=' '{' customBlobDescr '}'",
"customDescrWithOwner : customHeadWithOwner bytes ')'",
"customHead : _CUSTOM customType '=' '('",
"customHeadWithOwner : _CUSTOM '(' ownerType ')' customType '=' '('",
"customType : methodRef",
"ownerType : typeSpec",
"ownerType : memberRef",
"customBlobDescr : customBlobArgs customBlobNVPairs",
"customBlobArgs :",
"customBlobArgs : customBlobArgs serInit",
"customBlobArgs : customBlobArgs compControl",
"customBlobNVPairs :",
"customBlobNVPairs : customBlobNVPairs fieldOrProp serializType dottedName '=' serInit",
"customBlobNVPairs : customBlobNVPairs compControl",
"fieldOrProp : FIELD_",
"fieldOrProp : PROPERTY_",
"customAttrDecl : customDescr",
"customAttrDecl : customDescrWithOwner",
"customAttrDecl : TYPEDEF_CA",
"serializType : simpleType",
"serializType : TYPE_",
"serializType : OBJECT_",
"serializType : ENUM_ CLASS_ SQSTRING",
"serializType : ENUM_ className",
"serializType : serializType '[' ']'",
"moduleHead : _MODULE",
"moduleHead : _MODULE dottedName",
"moduleHead : _MODULE EXTERN_ dottedName",
"vtfixupDecl : _VTFIXUP '[' int32 ']' vtfixupAttr AT_ id",
"vtfixupAttr :",
"vtfixupAttr : vtfixupAttr INT32_",
"vtfixupAttr : vtfixupAttr INT64_",
"vtfixupAttr : vtfixupAttr FROMUNMANAGED_",
"vtfixupAttr : vtfixupAttr CALLMOSTDERIVED_",
"vtfixupAttr : vtfixupAttr RETAINAPPDOMAIN_",
"vtableDecl : vtableHead bytes ')'",
"vtableHead : _VTABLE '=' '('",
"nameSpaceHead : _NAMESPACE dottedName",
"_class : _CLASS",
"classHeadBegin : _class classAttr dottedName typarsClause",
"classHead : classHeadBegin extendsClause implClause",
"classAttr :",
"classAttr : classAttr PUBLIC_",
"classAttr : classAttr PRIVATE_",
"classAttr : classAttr VALUE_",
"classAttr : classAttr ENUM_",
"classAttr : classAttr INTERFACE_",
"classAttr : classAttr SEALED_",
"classAttr : classAttr ABSTRACT_",
"classAttr : classAttr AUTO_",
"classAttr : classAttr SEQUENTIAL_",
"classAttr : classAttr EXPLICIT_",
"classAttr : classAttr ANSI_",
"classAttr : classAttr UNICODE_",
"classAttr : classAttr AUTOCHAR_",
"classAttr : classAttr IMPORT_",
"classAttr : classAttr SERIALIZABLE_",
"classAttr : classAttr WINDOWSRUNTIME_",
"classAttr : classAttr NESTED_ PUBLIC_",
"classAttr : classAttr NESTED_ PRIVATE_",
"classAttr : classAttr NESTED_ FAMILY_",
"classAttr : classAttr NESTED_ ASSEMBLY_",
"classAttr : classAttr NESTED_ FAMANDASSEM_",
"classAttr : classAttr NESTED_ FAMORASSEM_",
"classAttr : classAttr BEFOREFIELDINIT_",
"classAttr : classAttr SPECIALNAME_",
"classAttr : classAttr RTSPECIALNAME_",
"classAttr : classAttr FLAGS_ '(' int32 ')'",
"extendsClause :",
"extendsClause : EXTENDS_ typeSpec",
"implClause :",
"implClause : IMPLEMENTS_ implList",
"classDecls :",
"classDecls : classDecls classDecl",
"implList : implList ',' typeSpec",
"implList : typeSpec",
"typeList :",
"typeList : typeListNotEmpty",
"typeListNotEmpty : typeSpec",
"typeListNotEmpty : typeListNotEmpty ',' typeSpec",
"typarsClause :",
"typarsClause : '<' typars '>'",
"typarAttrib : '+'",
"typarAttrib : '-'",
"typarAttrib : CLASS_",
"typarAttrib : VALUETYPE_",
"typarAttrib : BYREFLIKE_",
"typarAttrib : _CTOR",
"typarAttrib : FLAGS_ '(' int32 ')'",
"typarAttribs :",
"typarAttribs : typarAttrib typarAttribs",
"conTyparAttrib : FLAGS_ '(' int32 ')'",
"conTyparAttribs :",
"conTyparAttribs : conTyparAttrib conTyparAttribs",
"typars : CONST_ conTyparAttribs typeSpec dottedName typarsRest",
"typars : typarAttribs tyBound dottedName typarsRest",
"typars : typarAttribs dottedName typarsRest",
"typarsRest :",
"typarsRest : ',' typars",
"tyBound : '(' typeList ')'",
"genArity :",
"genArity : genArityNotEmpty",
"genArityNotEmpty : '<' '[' int32 ']' '>'",
"classDecl : methodHead methodDecls '}'",
"classDecl : classHead '{' classDecls '}'",
"classDecl : eventHead '{' eventDecls '}'",
"classDecl : propHead '{' propDecls '}'",
"classDecl : fieldDecl",
"classDecl : dataDecl",
"classDecl : secDecl",
"classDecl : extSourceSpec",
"classDecl : customAttrDecl",
"classDecl : _SIZE int32",
"classDecl : _PACK int32",
"classDecl : exportHead '{' exptypeDecls '}'",
"classDecl : _OVERRIDE typeSpec DCOLON methodName WITH_ callConv type typeSpec DCOLON methodName '(' sigArgs0 ')'",
"classDecl : _OVERRIDE METHOD_ callConv type typeSpec DCOLON methodName genArity '(' sigArgs0 ')' WITH_ METHOD_ callConv type typeSpec DCOLON methodName genArity '(' sigArgs0 ')'",
"classDecl : languageDecl",
"classDecl : compControl",
"classDecl : _PARAM TYPE_ '[' int32 ']'",
"classDecl : _PARAM TYPE_ dottedName",
"classDecl : _PARAM CONSTRAINT_ '[' int32 ']' ',' typeSpec",
"classDecl : _PARAM CONSTRAINT_ dottedName ',' typeSpec",
"classDecl : _INTERFACEIMPL TYPE_ typeSpec customDescr",
"fieldDecl : _FIELD repeatOpt fieldAttr type dottedName atOpt initOpt",
"fieldAttr :",
"fieldAttr : fieldAttr STATIC_",
"fieldAttr : fieldAttr PUBLIC_",
"fieldAttr : fieldAttr PRIVATE_",
"fieldAttr : fieldAttr FAMILY_",
"fieldAttr : fieldAttr INITONLY_",
"fieldAttr : fieldAttr RTSPECIALNAME_",
"fieldAttr : fieldAttr SPECIALNAME_",
"fieldAttr : fieldAttr MARSHAL_ '(' marshalBlob ')'",
"fieldAttr : fieldAttr ASSEMBLY_",
"fieldAttr : fieldAttr FAMANDASSEM_",
"fieldAttr : fieldAttr FAMORASSEM_",
"fieldAttr : fieldAttr PRIVATESCOPE_",
"fieldAttr : fieldAttr LITERAL_",
"fieldAttr : fieldAttr NOTSERIALIZED_",
"fieldAttr : fieldAttr FLAGS_ '(' int32 ')'",
"atOpt :",
"atOpt : AT_ id",
"initOpt :",
"initOpt : '=' fieldInit",
"repeatOpt :",
"repeatOpt : '[' int32 ']'",
"methodRef : callConv type typeSpec DCOLON methodName tyArgs0 '(' sigArgs0 ')'",
"methodRef : callConv type typeSpec DCOLON methodName genArityNotEmpty '(' sigArgs0 ')'",
"methodRef : callConv type methodName tyArgs0 '(' sigArgs0 ')'",
"methodRef : callConv type methodName genArityNotEmpty '(' sigArgs0 ')'",
"methodRef : mdtoken",
"methodRef : TYPEDEF_M",
"methodRef : TYPEDEF_MR",
"callConv : INSTANCE_ callConv",
"callConv : EXPLICIT_ callConv",
"callConv : callKind",
"callConv : CALLCONV_ '(' int32 ')'",
"callKind :",
"callKind : DEFAULT_",
"callKind : VARARG_",
"callKind : UNMANAGED_ CDECL_",
"callKind : UNMANAGED_ STDCALL_",
"callKind : UNMANAGED_ THISCALL_",
"callKind : UNMANAGED_ FASTCALL_",
"callKind : UNMANAGED_",
"mdtoken : MDTOKEN_ '(' int32 ')'",
"memberRef : methodSpec methodRef",
"memberRef : FIELD_ type typeSpec DCOLON dottedName",
"memberRef : FIELD_ type dottedName",
"memberRef : FIELD_ TYPEDEF_F",
"memberRef : FIELD_ TYPEDEF_MR",
"memberRef : mdtoken",
"eventHead : _EVENT eventAttr typeSpec dottedName",
"eventHead : _EVENT eventAttr dottedName",
"eventAttr :",
"eventAttr : eventAttr RTSPECIALNAME_",
"eventAttr : eventAttr SPECIALNAME_",
"eventDecls :",
"eventDecls : eventDecls eventDecl",
"eventDecl : _ADDON methodRef",
"eventDecl : _REMOVEON methodRef",
"eventDecl : _FIRE methodRef",
"eventDecl : _OTHER methodRef",
"eventDecl : extSourceSpec",
"eventDecl : customAttrDecl",
"eventDecl : languageDecl",
"eventDecl : compControl",
"propHead : _PROPERTY propAttr callConv type dottedName '(' sigArgs0 ')' initOpt",
"propAttr :",
"propAttr : propAttr RTSPECIALNAME_",
"propAttr : propAttr SPECIALNAME_",
"propDecls :",
"propDecls : propDecls propDecl",
"propDecl : _SET methodRef",
"propDecl : _GET methodRef",
"propDecl : _OTHER methodRef",
"propDecl : customAttrDecl",
"propDecl : extSourceSpec",
"propDecl : languageDecl",
"propDecl : compControl",
"methodHeadPart1 : _METHOD",
"marshalClause :",
"marshalClause : MARSHAL_ '(' marshalBlob ')'",
"marshalBlob : nativeType",
"marshalBlob : marshalBlobHead hexbytes '}'",
"marshalBlobHead : '{'",
"methodHead : methodHeadPart1 methAttr callConv paramAttr type marshalClause methodName typarsClause '(' sigArgs0 ')' implAttr '{'",
"methAttr :",
"methAttr : methAttr STATIC_",
"methAttr : methAttr PUBLIC_",
"methAttr : methAttr PRIVATE_",
"methAttr : methAttr FAMILY_",
"methAttr : methAttr FINAL_",
"methAttr : methAttr SPECIALNAME_",
"methAttr : methAttr VIRTUAL_",
"methAttr : methAttr STRICT_",
"methAttr : methAttr ABSTRACT_",
"methAttr : methAttr ASSEMBLY_",
"methAttr : methAttr FAMANDASSEM_",
"methAttr : methAttr FAMORASSEM_",
"methAttr : methAttr PRIVATESCOPE_",
"methAttr : methAttr HIDEBYSIG_",
"methAttr : methAttr NEWSLOT_",
"methAttr : methAttr RTSPECIALNAME_",
"methAttr : methAttr UNMANAGEDEXP_",
"methAttr : methAttr REQSECOBJ_",
"methAttr : methAttr FLAGS_ '(' int32 ')'",
"methAttr : methAttr PINVOKEIMPL_ '(' compQstring AS_ compQstring pinvAttr ')'",
"methAttr : methAttr PINVOKEIMPL_ '(' compQstring pinvAttr ')'",
"methAttr : methAttr PINVOKEIMPL_ '(' pinvAttr ')'",
"pinvAttr :",
"pinvAttr : pinvAttr NOMANGLE_",
"pinvAttr : pinvAttr ANSI_",
"pinvAttr : pinvAttr UNICODE_",
"pinvAttr : pinvAttr AUTOCHAR_",
"pinvAttr : pinvAttr LASTERR_",
"pinvAttr : pinvAttr WINAPI_",
"pinvAttr : pinvAttr CDECL_",
"pinvAttr : pinvAttr STDCALL_",
"pinvAttr : pinvAttr THISCALL_",
"pinvAttr : pinvAttr FASTCALL_",
"pinvAttr : pinvAttr BESTFIT_ ':' ON_",
"pinvAttr : pinvAttr BESTFIT_ ':' OFF_",
"pinvAttr : pinvAttr CHARMAPERROR_ ':' ON_",
"pinvAttr : pinvAttr CHARMAPERROR_ ':' OFF_",
"pinvAttr : pinvAttr FLAGS_ '(' int32 ')'",
"methodName : _CTOR",
"methodName : _CCTOR",
"methodName : dottedName",
"paramAttr :",
"paramAttr : paramAttr '[' IN_ ']'",
"paramAttr : paramAttr '[' OUT_ ']'",
"paramAttr : paramAttr '[' OPT_ ']'",
"paramAttr : paramAttr '[' int32 ']'",
"implAttr :",
"implAttr : implAttr NATIVE_",
"implAttr : implAttr CIL_",
"implAttr : implAttr OPTIL_",
"implAttr : implAttr MANAGED_",
"implAttr : implAttr UNMANAGED_",
"implAttr : implAttr FORWARDREF_",
"implAttr : implAttr PRESERVESIG_",
"implAttr : implAttr RUNTIME_",
"implAttr : implAttr INTERNALCALL_",
"implAttr : implAttr SYNCHRONIZED_",
"implAttr : implAttr NOINLINING_",
"implAttr : implAttr AGGRESSIVEINLINING_",
"implAttr : implAttr NOOPTIMIZATION_",
"implAttr : implAttr AGGRESSIVEOPTIMIZATION_",
"implAttr : implAttr FLAGS_ '(' int32 ')'",
"localsHead : _LOCALS",
"methodDecls :",
"methodDecls : methodDecls methodDecl",
"methodDecl : _EMITBYTE int32",
"methodDecl : sehBlock",
"methodDecl : _MAXSTACK int32",
"methodDecl : localsHead '(' sigArgs0 ')'",
"methodDecl : localsHead INIT_ '(' sigArgs0 ')'",
"methodDecl : _ENTRYPOINT",
"methodDecl : _ZEROINIT",
"methodDecl : dataDecl",
"methodDecl : instr",
"methodDecl : id ':'",
"methodDecl : secDecl",
"methodDecl : extSourceSpec",
"methodDecl : languageDecl",
"methodDecl : customAttrDecl",
"methodDecl : compControl",
"methodDecl : _EXPORT '[' int32 ']'",
"methodDecl : _EXPORT '[' int32 ']' AS_ id",
"methodDecl : _VTENTRY int32 ':' int32",
"methodDecl : _OVERRIDE typeSpec DCOLON methodName",
"methodDecl : _OVERRIDE METHOD_ callConv type typeSpec DCOLON methodName genArity '(' sigArgs0 ')'",
"methodDecl : scopeBlock",
"methodDecl : _PARAM TYPE_ '[' int32 ']'",
"methodDecl : _PARAM TYPE_ dottedName",
"methodDecl : _PARAM CONSTRAINT_ '[' int32 ']' ',' typeSpec",
"methodDecl : _PARAM CONSTRAINT_ dottedName ',' typeSpec",
"methodDecl : _PARAM '[' int32 ']' initOpt",
"scopeBlock : scopeOpen methodDecls '}'",
"scopeOpen : '{'",
"sehBlock : tryBlock sehClauses",
"sehClauses : sehClause sehClauses",
"sehClauses : sehClause",
"tryBlock : tryHead scopeBlock",
"tryBlock : tryHead id TO_ id",
"tryBlock : tryHead int32 TO_ int32",
"tryHead : _TRY",
"sehClause : catchClause handlerBlock",
"sehClause : filterClause handlerBlock",
"sehClause : finallyClause handlerBlock",
"sehClause : faultClause handlerBlock",
"filterClause : filterHead scopeBlock",
"filterClause : filterHead id",
"filterClause : filterHead int32",
"filterHead : FILTER_",
"catchClause : CATCH_ typeSpec",
"finallyClause : FINALLY_",
"faultClause : FAULT_",
"handlerBlock : scopeBlock",
"handlerBlock : HANDLER_ id TO_ id",
"handlerBlock : HANDLER_ int32 TO_ int32",
"dataDecl : ddHead ddBody",
"ddHead : _DATA tls id '='",
"ddHead : _DATA tls",
"tls :",
"tls : TLS_",
"tls : CIL_",
"ddBody : '{' ddItemList '}'",
"ddBody : ddItem",
"ddItemList : ddItem ',' ddItemList",
"ddItemList : ddItem",
"ddItemCount :",
"ddItemCount : '[' int32 ']'",
"ddItem : CHAR_ '*' '(' compQstring ')'",
"ddItem : '&' '(' id ')'",
"ddItem : bytearrayhead bytes ')'",
"ddItem : FLOAT32_ '(' float64 ')' ddItemCount",
"ddItem : FLOAT64_ '(' float64 ')' ddItemCount",
"ddItem : INT64_ '(' int64 ')' ddItemCount",
"ddItem : INT32_ '(' int32 ')' ddItemCount",
"ddItem : INT16_ '(' int32 ')' ddItemCount",
"ddItem : INT8_ '(' int32 ')' ddItemCount",
"ddItem : FLOAT32_ ddItemCount",
"ddItem : FLOAT64_ ddItemCount",
"ddItem : INT64_ ddItemCount",
"ddItem : INT32_ ddItemCount",
"ddItem : INT16_ ddItemCount",
"ddItem : INT8_ ddItemCount",
"fieldSerInit : FLOAT32_ '(' float64 ')'",
"fieldSerInit : FLOAT64_ '(' float64 ')'",
"fieldSerInit : FLOAT32_ '(' int32 ')'",
"fieldSerInit : FLOAT64_ '(' int64 ')'",
"fieldSerInit : INT64_ '(' int64 ')'",
"fieldSerInit : INT32_ '(' int32 ')'",
"fieldSerInit : INT16_ '(' int32 ')'",
"fieldSerInit : INT8_ '(' int32 ')'",
"fieldSerInit : UNSIGNED_ INT64_ '(' int64 ')'",
"fieldSerInit : UNSIGNED_ INT32_ '(' int32 ')'",
"fieldSerInit : UNSIGNED_ INT16_ '(' int32 ')'",
"fieldSerInit : UNSIGNED_ INT8_ '(' int32 ')'",
"fieldSerInit : UINT64_ '(' int64 ')'",
"fieldSerInit : UINT32_ '(' int32 ')'",
"fieldSerInit : UINT16_ '(' int32 ')'",
"fieldSerInit : UINT8_ '(' int32 ')'",
"fieldSerInit : CHAR_ '(' int32 ')'",
"fieldSerInit : BOOL_ '(' truefalse ')'",
"fieldSerInit : bytearrayhead bytes ')'",
"bytearrayhead : BYTEARRAY_ '('",
"bytes :",
"bytes : hexbytes",
"hexbytes : HEXBYTE",
"hexbytes : hexbytes HEXBYTE",
"fieldInit : fieldSerInit",
"fieldInit : compQstring",
"fieldInit : NULLREF_",
"serInit : fieldSerInit",
"serInit : STRING_ '(' NULLREF_ ')'",
"serInit : STRING_ '(' SQSTRING ')'",
"serInit : TYPE_ '(' CLASS_ SQSTRING ')'",
"serInit : TYPE_ '(' className ')'",
"serInit : TYPE_ '(' NULLREF_ ')'",
"serInit : OBJECT_ '(' serInit ')'",
"serInit : FLOAT32_ '[' int32 ']' '(' f32seq ')'",
"serInit : FLOAT64_ '[' int32 ']' '(' f64seq ')'",
"serInit : INT64_ '[' int32 ']' '(' i64seq ')'",
"serInit : INT32_ '[' int32 ']' '(' i32seq ')'",
"serInit : INT16_ '[' int32 ']' '(' i16seq ')'",
"serInit : INT8_ '[' int32 ']' '(' i8seq ')'",
"serInit : UINT64_ '[' int32 ']' '(' i64seq ')'",
"serInit : UINT32_ '[' int32 ']' '(' i32seq ')'",
"serInit : UINT16_ '[' int32 ']' '(' i16seq ')'",
"serInit : UINT8_ '[' int32 ']' '(' i8seq ')'",
"serInit : UNSIGNED_ INT64_ '[' int32 ']' '(' i64seq ')'",
"serInit : UNSIGNED_ INT32_ '[' int32 ']' '(' i32seq ')'",
"serInit : UNSIGNED_ INT16_ '[' int32 ']' '(' i16seq ')'",
"serInit : UNSIGNED_ INT8_ '[' int32 ']' '(' i8seq ')'",
"serInit : CHAR_ '[' int32 ']' '(' i16seq ')'",
"serInit : BOOL_ '[' int32 ']' '(' boolSeq ')'",
"serInit : STRING_ '[' int32 ']' '(' sqstringSeq ')'",
"serInit : TYPE_ '[' int32 ']' '(' classSeq ')'",
"serInit : OBJECT_ '[' int32 ']' '(' objSeq ')'",
"f32seq :",
"f32seq : f32seq float64",
"f32seq : f32seq int32",
"f64seq :",
"f64seq : f64seq float64",
"f64seq : f64seq int64",
"i64seq :",
"i64seq : i64seq int64",
"i32seq :",
"i32seq : i32seq int32",
"i16seq :",
"i16seq : i16seq int32",
"i8seq :",
"i8seq : i8seq int32",
"boolSeq :",
"boolSeq : boolSeq truefalse",
"sqstringSeq :",
"sqstringSeq : sqstringSeq NULLREF_",
"sqstringSeq : sqstringSeq SQSTRING",
"classSeq :",
"classSeq : classSeq NULLREF_",
"classSeq : classSeq CLASS_ SQSTRING",
"classSeq : classSeq className",
"objSeq :",
"objSeq : objSeq serInit",
"methodSpec : METHOD_",
"instr_none : INSTR_NONE",
"instr_var : INSTR_VAR",
"instr_tvar : INSTR_TVAR",
"instr_i : INSTR_I",
"instr_i8 : INSTR_I8",
"instr_r : INSTR_R",
"instr_brtarget : INSTR_BRTARGET",
"instr_method : INSTR_METHOD",
"instr_field : INSTR_FIELD",
"instr_type : INSTR_TYPE",
"instr_string : INSTR_STRING",
"instr_sig : INSTR_SIG",
"instr_tok : INSTR_TOK",
"instr_switch : INSTR_SWITCH",
"instr_r_head : instr_r '('",
"instr : instr_none",
"instr : instr_var int32",
"instr : instr_var id",
"instr : instr_tvar '!' int32",
"instr : instr_tvar '!' id",
"instr : instr_tvar '!' '!' int32",
"instr : instr_tvar '!' '!' id",
"instr : instr_i int32",
"instr : instr_i8 int64",
"instr : instr_r float64",
"instr : instr_r int64",
"instr : instr_r_head bytes ')'",
"instr : instr_brtarget int32",
"instr : instr_brtarget id",
"instr : instr_method methodRef",
"instr : instr_field type typeSpec DCOLON dottedName",
"instr : instr_field type dottedName",
"instr : instr_field mdtoken",
"instr : instr_field TYPEDEF_F",
"instr : instr_field TYPEDEF_MR",
"instr : instr_type typeSpec",
"instr : instr_string compQstring",
"instr : instr_string ANSI_ '(' compQstring ')'",
"instr : instr_string bytearrayhead bytes ')'",
"instr : instr_sig callConv type '(' sigArgs0 ')'",
"instr : instr_tok ownerType",
"instr : instr_switch '(' labels ')'",
"labels :",
"labels : id ',' labels",
"labels : int32 ',' labels",
"labels : id",
"labels : int32",
"tyArgs0 :",
"tyArgs0 : '<' tyArgs1 '>'",
"tyArgs1 :",
"tyArgs1 : tyArgs2",
"tyArgs2 : type",
"tyArgs2 : tyArgs2 ',' type",
"sigArgs0 :",
"sigArgs0 : sigArgs1",
"sigArgs1 : sigArg",
"sigArgs1 : sigArgs1 ',' sigArg",
"sigArg : ELLIPSIS",
"sigArg : paramAttr type marshalClause",
"sigArg : paramAttr type marshalClause id",
"className : '[' dottedName ']' slashedName",
"className : '[' mdtoken ']' slashedName",
"className : '[' '*' ']' slashedName",
"className : '[' _MODULE dottedName ']' slashedName",
"className : slashedName",
"className : mdtoken",
"className : TYPEDEF_T",
"className : _THIS",
"className : _BASE",
"className : _NESTER",
"slashedName : dottedName",
"slashedName : slashedName '/' dottedName",
"typeSpec : className",
"typeSpec : '[' dottedName ']'",
"typeSpec : '[' _MODULE dottedName ']'",
"typeSpec : type",
"nativeType :",
"nativeType : CUSTOM_ '(' compQstring ',' compQstring ',' compQstring ',' compQstring ')'",
"nativeType : CUSTOM_ '(' compQstring ',' compQstring ')'",
"nativeType : FIXED_ SYSSTRING_ '[' int32 ']'",
"nativeType : FIXED_ ARRAY_ '[' int32 ']' nativeType",
"nativeType : VARIANT_",
"nativeType : CURRENCY_",
"nativeType : SYSCHAR_",
"nativeType : VOID_",
"nativeType : BOOL_",
"nativeType : INT8_",
"nativeType : INT16_",
"nativeType : INT32_",
"nativeType : INT64_",
"nativeType : FLOAT32_",
"nativeType : FLOAT64_",
"nativeType : ERROR_",
"nativeType : UNSIGNED_ INT8_",
"nativeType : UNSIGNED_ INT16_",
"nativeType : UNSIGNED_ INT32_",
"nativeType : UNSIGNED_ INT64_",
"nativeType : UINT8_",
"nativeType : UINT16_",
"nativeType : UINT32_",
"nativeType : UINT64_",
"nativeType : nativeType '*'",
"nativeType : nativeType '[' ']'",
"nativeType : nativeType '[' int32 ']'",
"nativeType : nativeType '[' int32 '+' int32 ']'",
"nativeType : nativeType '[' '+' int32 ']'",
"nativeType : DECIMAL_",
"nativeType : DATE_",
"nativeType : BSTR_",
"nativeType : LPSTR_",
"nativeType : LPWSTR_",
"nativeType : LPTSTR_",
"nativeType : OBJECTREF_",
"nativeType : IUNKNOWN_ iidParamIndex",
"nativeType : IDISPATCH_ iidParamIndex",
"nativeType : STRUCT_",
"nativeType : INTERFACE_ iidParamIndex",
"nativeType : SAFEARRAY_ variantType",
"nativeType : SAFEARRAY_ variantType ',' compQstring",
"nativeType : INT_",
"nativeType : UNSIGNED_ INT_",
"nativeType : UINT_",
"nativeType : NESTED_ STRUCT_",
"nativeType : BYVALSTR_",
"nativeType : ANSI_ BSTR_",
"nativeType : TBSTR_",
"nativeType : VARIANT_ BOOL_",
"nativeType : METHOD_",
"nativeType : AS_ ANY_",
"nativeType : LPSTRUCT_",
"nativeType : TYPEDEF_TS",
"iidParamIndex :",
"iidParamIndex : '(' IIDPARAM_ '=' int32 ')'",
"variantType :",
"variantType : NULL_",
"variantType : VARIANT_",
"variantType : CURRENCY_",
"variantType : VOID_",
"variantType : BOOL_",
"variantType : INT8_",
"variantType : INT16_",
"variantType : INT32_",
"variantType : INT64_",
"variantType : FLOAT32_",
"variantType : FLOAT64_",
"variantType : UNSIGNED_ INT8_",
"variantType : UNSIGNED_ INT16_",
"variantType : UNSIGNED_ INT32_",
"variantType : UNSIGNED_ INT64_",
"variantType : UINT8_",
"variantType : UINT16_",
"variantType : UINT32_",
"variantType : UINT64_",
"variantType : '*'",
"variantType : variantType '[' ']'",
"variantType : variantType VECTOR_",
"variantType : variantType '&'",
"variantType : DECIMAL_",
"variantType : DATE_",
"variantType : BSTR_",
"variantType : LPSTR_",
"variantType : LPWSTR_",
"variantType : IUNKNOWN_",
"variantType : IDISPATCH_",
"variantType : SAFEARRAY_",
"variantType : INT_",
"variantType : UNSIGNED_ INT_",
"variantType : UINT_",
"variantType : ERROR_",
"variantType : HRESULT_",
"variantType : CARRAY_",
"variantType : USERDEFINED_",
"variantType : RECORD_",
"variantType : FILETIME_",
"variantType : BLOB_",
"variantType : STREAM_",
"variantType : STORAGE_",
"variantType : STREAMED_OBJECT_",
"variantType : STORED_OBJECT_",
"variantType : BLOB_OBJECT_",
"variantType : CF_",
"variantType : CLSID_",
"constTypeArg : FLOAT32_ '(' float64 ')'",
"constTypeArg : FLOAT64_ '(' float64 ')'",
"constTypeArg : FLOAT32_ '(' int32 ')'",
"constTypeArg : FLOAT64_ '(' int64 ')'",
"constTypeArg : INT64_ '(' int64 ')'",
"constTypeArg : INT32_ '(' int32 ')'",
"constTypeArg : INT16_ '(' int32 ')'",
"constTypeArg : INT8_ '(' int32 ')'",
"constTypeArg : UNSIGNED_ INT64_ '(' int64 ')'",
"constTypeArg : UNSIGNED_ INT32_ '(' int32 ')'",
"constTypeArg : UNSIGNED_ INT16_ '(' int32 ')'",
"constTypeArg : UNSIGNED_ INT8_ '(' int32 ')'",
"constTypeArg : UINT64_ '(' int64 ')'",
"constTypeArg : UINT32_ '(' int32 ')'",
"constTypeArg : UINT16_ '(' int32 ')'",
"constTypeArg : UINT8_ '(' int32 ')'",
"constTypeArg : CHAR_ '(' int32 ')'",
"constTypeArg : BOOL_ '(' truefalse ')'",
"type : CLASS_ className",
"type : OBJECT_",
"type : VALUE_ CLASS_ className",
"type : VALUETYPE_ className",
"type : CONST_ constTypeArg",
"type : type '[' ']'",
"type : type '[' bounds1 ']'",
"type : type '&'",
"type : type '*'",
"type : type PINNED_",
"type : type MODREQ_ '(' typeSpec ')'",
"type : type MODOPT_ '(' typeSpec ')'",
"type : methodSpec callConv type '*' '(' sigArgs0 ')'",
"type : type '<' tyArgs1 '>'",
"type : CONST_ '!' '!' int32",
"type : '!' '!' int32",
"type : CONST_ '!' int32",
"type : '!' int32",
"type : CONST_ '!' '!' dottedName",
"type : '!' '!' dottedName",
"type : CONST_ '!' dottedName",
"type : '!' dottedName",
"type : TYPEDREF_",
"type : VOID_",
"type : NATIVE_ INT_",
"type : NATIVE_ UNSIGNED_ INT_",
"type : NATIVE_ UINT_",
"type : simpleType",
"type : ELLIPSIS type",
"simpleType : CHAR_",
"simpleType : STRING_",
"simpleType : BOOL_",
"simpleType : INT8_",
"simpleType : INT16_",
"simpleType : INT32_",
"simpleType : INT64_",
"simpleType : FLOAT32_",
"simpleType : FLOAT64_",
"simpleType : UNSIGNED_ INT8_",
"simpleType : UNSIGNED_ INT16_",
"simpleType : UNSIGNED_ INT32_",
"simpleType : UNSIGNED_ INT64_",
"simpleType : UINT8_",
"simpleType : UINT16_",
"simpleType : UINT32_",
"simpleType : UINT64_",
"simpleType : TYPEDEF_TS",
"bounds1 : bound",
"bounds1 : bounds1 ',' bound",
"bound :",
"bound : ELLIPSIS",
"bound : int32",
"bound : int32 ELLIPSIS int32",
"bound : int32 ELLIPSIS",
"secDecl : _PERMISSION secAction typeSpec '(' nameValPairs ')'",
"secDecl : _PERMISSION secAction typeSpec '=' '{' customBlobDescr '}'",
"secDecl : _PERMISSION secAction typeSpec",
"secDecl : psetHead bytes ')'",
"secDecl : _PERMISSIONSET secAction compQstring",
"secDecl : _PERMISSIONSET secAction '=' '{' secAttrSetBlob '}'",
"secAttrSetBlob :",
"secAttrSetBlob : secAttrBlob",
"secAttrSetBlob : secAttrBlob ',' secAttrSetBlob",
"secAttrBlob : typeSpec '=' '{' customBlobNVPairs '}'",
"secAttrBlob : CLASS_ SQSTRING '=' '{' customBlobNVPairs '}'",
"psetHead : _PERMISSIONSET secAction '=' '('",
"psetHead : _PERMISSIONSET secAction BYTEARRAY_ '('",
"nameValPairs : nameValPair",
"nameValPairs : nameValPair ',' nameValPairs",
"nameValPair : compQstring '=' caValue",
"truefalse : TRUE_",
"truefalse : FALSE_",
"caValue : truefalse",
"caValue : int32",
"caValue : INT32_ '(' int32 ')'",
"caValue : compQstring",
"caValue : className '(' INT8_ ':' int32 ')'",
"caValue : className '(' INT16_ ':' int32 ')'",
"caValue : className '(' INT32_ ':' int32 ')'",
"caValue : className '(' int32 ')'",
"secAction : REQUEST_",
"secAction : DEMAND_",
"secAction : ASSERT_",
"secAction : DENY_",
"secAction : PERMITONLY_",
"secAction : LINKCHECK_",
"secAction : INHERITCHECK_",
"secAction : REQMIN_",
"secAction : REQOPT_",
"secAction : REQREFUSE_",
"secAction : PREJITGRANT_",
"secAction : PREJITDENY_",
"secAction : NONCASDEMAND_",
"secAction : NONCASLINKDEMAND_",
"secAction : NONCASINHERITANCE_",
"esHead : _LINE",
"esHead : P_LINE",
"extSourceSpec : esHead int32 SQSTRING",
"extSourceSpec : esHead int32",
"extSourceSpec : esHead int32 ':' int32 SQSTRING",
"extSourceSpec : esHead int32 ':' int32",
"extSourceSpec : esHead int32 ':' int32 ',' int32 SQSTRING",
"extSourceSpec : esHead int32 ':' int32 ',' int32",
"extSourceSpec : esHead int32 ',' int32 ':' int32 SQSTRING",
"extSourceSpec : esHead int32 ',' int32 ':' int32",
"extSourceSpec : esHead int32 ',' int32 ':' int32 ',' int32 SQSTRING",
"extSourceSpec : esHead int32 ',' int32 ':' int32 ',' int32",
"extSourceSpec : esHead int32 QSTRING",
"fileDecl : _FILE fileAttr dottedName fileEntry hashHead bytes ')' fileEntry",
"fileDecl : _FILE fileAttr dottedName fileEntry",
"fileAttr :",
"fileAttr : fileAttr NOMETADATA_",
"fileEntry :",
"fileEntry : _ENTRYPOINT",
"hashHead : _HASH '=' '('",
"assemblyHead : _ASSEMBLY asmAttr dottedName",
"asmAttr :",
"asmAttr : asmAttr RETARGETABLE_",
"asmAttr : asmAttr WINDOWSRUNTIME_",
"asmAttr : asmAttr NOPLATFORM_",
"asmAttr : asmAttr LEGACY_ LIBRARY_",
"asmAttr : asmAttr CIL_",
"asmAttr : asmAttr X86_",
"asmAttr : asmAttr AMD64_",
"asmAttr : asmAttr ARM_",
"asmAttr : asmAttr ARM64_",
"assemblyDecls :",
"assemblyDecls : assemblyDecls assemblyDecl",
"assemblyDecl : _HASH ALGORITHM_ int32",
"assemblyDecl : secDecl",
"assemblyDecl : asmOrRefDecl",
"intOrWildcard : int32",
"intOrWildcard : '*'",
"asmOrRefDecl : publicKeyHead bytes ')'",
"asmOrRefDecl : _VER intOrWildcard ':' intOrWildcard ':' intOrWildcard ':' intOrWildcard",
"asmOrRefDecl : _LOCALE compQstring",
"asmOrRefDecl : localeHead bytes ')'",
"asmOrRefDecl : customAttrDecl",
"asmOrRefDecl : compControl",
"publicKeyHead : _PUBLICKEY '=' '('",
"publicKeyTokenHead : _PUBLICKEYTOKEN '=' '('",
"localeHead : _LOCALE '=' '('",
"assemblyRefHead : _ASSEMBLY EXTERN_ asmAttr dottedName",
"assemblyRefHead : _ASSEMBLY EXTERN_ asmAttr dottedName AS_ dottedName",
"assemblyRefDecls :",
"assemblyRefDecls : assemblyRefDecls assemblyRefDecl",
"assemblyRefDecl : hashHead bytes ')'",
"assemblyRefDecl : asmOrRefDecl",
"assemblyRefDecl : publicKeyTokenHead bytes ')'",
"assemblyRefDecl : AUTO_",
"exptypeHead : _CLASS EXTERN_ exptAttr dottedName",
"exportHead : _EXPORT exptAttr dottedName",
"exptAttr :",
"exptAttr : exptAttr PRIVATE_",
"exptAttr : exptAttr PUBLIC_",
"exptAttr : exptAttr FORWARDER_",
"exptAttr : exptAttr NESTED_ PUBLIC_",
"exptAttr : exptAttr NESTED_ PRIVATE_",
"exptAttr : exptAttr NESTED_ FAMILY_",
"exptAttr : exptAttr NESTED_ ASSEMBLY_",
"exptAttr : exptAttr NESTED_ FAMANDASSEM_",
"exptAttr : exptAttr NESTED_ FAMORASSEM_",
"exptypeDecls :",
"exptypeDecls : exptypeDecls exptypeDecl",
"exptypeDecl : _FILE dottedName",
"exptypeDecl : _CLASS EXTERN_ slashedName",
"exptypeDecl : _ASSEMBLY EXTERN_ dottedName",
"exptypeDecl : MDTOKEN_ '(' int32 ')'",
"exptypeDecl : _CLASS int32",
"exptypeDecl : customAttrDecl",
"exptypeDecl : compControl",
"manifestResHead : _MRESOURCE manresAttr dottedName",
"manifestResHead : _MRESOURCE manresAttr dottedName AS_ dottedName",
"manresAttr :",
"manresAttr : manresAttr PUBLIC_",
"manresAttr : manresAttr PRIVATE_",
"manifestResDecls :",
"manifestResDecls : manifestResDecls manifestResDecl",
"manifestResDecl : _FILE dottedName AT_ int32",
"manifestResDecl : _ASSEMBLY EXTERN_ dottedName",
"manifestResDecl : customAttrDecl",
"manifestResDecl : compControl",
};
#endif
#line 52 "btyaccpa.ske"

/*
** YYPOSN is user-defined text position type.
*/
#ifdef YYPOSN
#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif /* YYREDUCEPOSNFUNC */
#endif /* YYPOSN */

/* If delete function is not defined by the user, do not deletions. */
#ifndef YYDELETEVAL
#define YYDELETEVAL(v, x) 
#endif

/* If delete function is not defined by the user, do not deletions. */
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v, x) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

extern void yyerror(const char *);

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
#ifdef YYPOSN
YYPOSN  yyposn;
#endif /* YYPOSN */

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
#ifdef YYPOSN
YYPOSN  yyretposn;
#endif /* YYPOSN */

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYERROR_QUIET  goto yyerrquiet
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  struct yyparsestate *save;        /* Previously saved parser state */
  int           state;
  int           errflag;
  Yshort       *ss;          /* state stack base */
  Yshort       *ssp;         /* state stack pointer */
  YYSTYPE      *vs;          /* values stack base */
  YYSTYPE      *vsp;         /* value stack pointer */
  YYSTYPE       val;         /* value as returned by actions */
#ifdef YYPOSN
  YYPOSN       *ps;          /* position stack base */
  YYPOSN       *psp;         /* position stack pointer */
  YYPOSN        pos;         /* position as returned by universal action */
#endif /* YYPOSN */
  ptrdiff_t     lexeme;      /* index of the conflict lexeme in the lexical queue */
  size_t        stacksize;   /* current maximum stack size */
  Yshort        ctry;        /* index in yyctable[] for this conflict */
};

/* Current parser state */
static struct yyparsestate *yyps=0;

/* yypath!=NULL: do the full parse, starting at *yypath parser state. */
static struct yyparsestate *yypath=0;

/* Base of the lexical value queue */
static YYSTYPE *yylvals=0;

/* Current posistion at lexical value queue */
static YYSTYPE *yylvp=0;

/* End position of lexical value queue */
static YYSTYPE *yylve=0;

/* The last allocated position at the lexical value queue */
static YYSTYPE *yylvlim=0;

#ifdef YYPOSN
/* Base of the lexical position queue */
static YYPOSN *yylpsns=0;

/* Current posistion at lexical position queue */
static YYPOSN *yylpp=0;

/* End position of lexical position queue */
static YYPOSN *yylpe=0;

/* The last allocated position at the lexical position queue */
static YYPOSN *yylplim=0;
#endif /* YYPOSN */

/* Current position at lexical token queue */
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

/*
** For use in generated program
*/
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yypsp   (yyps->psp)
#define yypos   (yyps->pos)
#define yydepth (yyps->ssp - yyps->ss)


/*
** Local prototypes.
*/
int yyparse(void);
int yylex(void);

static void YYSCopy(YYSTYPE *to, YYSTYPE *from, ptrdiff_t size) {
  ptrdiff_t i;
  for (i = size-1; i >= 0; i--)
    to[i] = from[i];
}

#ifdef YYPOSN
static void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--)
    to[i] = from[i];
}
#endif /* YYPOSN */

static int yyexpand() {
  ptrdiff_t p = yylvp-yylvals;
  ptrdiff_t s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
#ifdef __cplusplus
  Yshort  *tl = yylexemes; 
  yylexemes = new Yshort[s];
  memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
  delete[] tl;
  YYSTYPE *tv = yylvals;
  yylvals = new YYSTYPE[s];
  YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
  delete[] tv;
#ifdef YYPOSN
  YYPOSN  *tp = yylpsns;
  yylpsns = new YYPOSN[s];
  YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
  delete[] tp;
#endif /* YYPOSN */
#else
  yylexemes = realloc(yylexemes, sizeof(Yshort) * s);
  yylvals = realloc(yylvals, sizeof(YYSTYPE) * s);
#ifdef YYPOSN
  yylpsns = realloc(yylpsns, sizeof(YYPOSN) * s);
#endif /* YYPOSN */
#endif
  yylexp = yylexemes + p;
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
#ifdef YYPOSN
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
#endif /* YYPOSN */
  return 0;
}

static int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
#ifdef YYPOSN
    yyposn = *yylpp++;
#endif /* YYPOSN */
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
#ifdef YYPOSN
      *yylpp++ = yyposn;
      yylpe++;
#endif /* YYPOSN */
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

static void YYMoreStack(struct yyparsestate *yyps) {
  ptrdiff_t p = yyps->ssp - yyps->ss;
#ifdef __cplusplus
  Yshort  *tss = yyps->ss;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  delete[] tss;
  YYSTYPE *tvs = yyps->vs;
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  delete[] tvs;
#ifdef YYPOSN
  YYPOSN  *tps = yyps->ps;
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  delete[] tps;
#endif /* YYPOSN */
  yyps->stacksize += YYSTACKGROWTH;                           
#else
  yyps->stacksize += YYSTACKGROWTH;                           
  yyps->ss = realloc(yyps->ss, sizeof(Yshort ) * yyps->stacksize);   
  yyps->vs = realloc(yyps->vs, sizeof(YYSTYPE) * yyps->stacksize);  
#ifdef YYPOSN
  yyps->ps = realloc(yyps->ps, sizeof(YYPOSN ) * yyps->stacksize);  
#endif /* YYPOSN */
#endif
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
#ifdef YYPOSN
  yyps->psp = yyps->ps + p;                                   
#endif /* YYPOSN */
}

static struct yyparsestate *YYNewState(size_t size) {
#ifdef __cplusplus
  yyparsestate *p = new yyparsestate;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
#ifdef YYPOSN
  p->ps = new YYPOSN [size + 4];
#endif /* YYPOSN */
#else
  struct yyparsestate *p = malloc(sizeof(struct yyparsestate));
  p->ss = malloc(sizeof(Yshort ) * (size + 4));
  p->vs = malloc(sizeof(YYSTYPE) * (size + 4));
#ifdef YYPOSN
  p->ps = malloc(sizeof(YYPOSN ) * (size + 4));
#endif /* YYPOSN */
#endif
  p->stacksize = size+4;
#ifndef YYSTYPE_CONSTRUCTOR
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
#endif
#ifdef YYPOSN
#ifndef YYPOSN_CONSTRUCTOR
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
#endif
#endif /* YYPOSN */
  return p;
}

static void YYFreeState(struct yyparsestate *p) {
#ifdef __cplusplus
  delete[] p->ss;
  delete[] p->vs;
#ifdef YYPOSN
  delete[] p->ps;
#endif /* YYPOSN */
  delete p;
#else
  free(p->ss);
  free(p->vs);
#ifdef YYPOSN
  free(p->ps);
#endif /* YYPOSN */
  free(p);
#endif
}

#line 2155 "asmparse.y"


#include "grammar_after.cpp"
#line 6005 "asmparse.cpp.tab.c"
#line 354 "btyaccpa.ske"

/*
** Parser function
*/
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  struct yyparsestate *yyerrctx = NULL;
#ifdef YYREDUCEPOSNFUNC
  int reduce_posn;
#endif /* YYREDUCEPOSNFUNC */

#if YYDEBUG
  const char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yym = 0;
  yyn = 0;
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
#ifdef YYPOSN
  yyps->psp = yyps->ps;
#endif /* YYPOSN */
  *(yyps->ssp) = yystate = 0;
  

  /*
  ** Main parsing loop
  */
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  /*
  ** Read one token
  */
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     (int)yydepth, yytrial!=0, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  /*
  ** Do we have a conflict?
  */
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful "
	       "trial parse\n", (int)yydepth, yytrial!=0, yystate);
      }
#endif
      /* Switch to the next conflict context */
      struct yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       (int)yydepth, yytrial!=0, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      struct yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
#ifdef YYPOSN
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
#endif /* YYPOSN */
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 yytrial!=0);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        /* If this is a first conflict in the stack, start saving lexemes */
        if (!yylexemes) {
#ifdef __cplusplus
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
#ifdef YYPOSN
          yylpsns = new YYPOSN[YYSTACKGROWTH];
#endif /* YYPOSN */
#else
          yylexemes = malloc(sizeof(Yshort) * YYSTACKGROWTH);
          yylvals = malloc(sizeof(YYSTYPE) * YYSTACKGROWTH);
#ifdef YYPOSN
          yylpsns = malloc(sizeof(YYPOSN) * YYSTACKGROWTH);
#endif /* YYPOSN */
#endif
          yylvlim = yylvals + YYSTACKGROWTH; 
#ifdef YYPOSN
          yylplim = yylpsns + YYSTACKGROWTH; 
#endif /* YYPOSN */
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
#ifdef YYPOSN
	  yylpp = yylpe = yylpsns;
#endif /* YYPOSN */
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
#ifdef YYPOSN
            *yylpe++ = yyposn;
#endif /* YYPOSN */
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--;
#ifdef YYPOSN
	yylpp--;
#endif /* YYPOSN */
	yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               (int)yydepth, yytrial!=0, yystate, yyctable[ctry]);
#endif
      if (yychar < 0) {
        yylvp++;
#ifdef YYPOSN
	yylpp++;
#endif /* YYPOSN */
	yylexp++;
      }
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  /*
  ** Is action a shift?
  */
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             (int)yydepth, yytrial!=0, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
#ifdef YYPOSN
    *++(yyps->psp) = yyposn;
#endif /* YYPOSN */
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }
  yym = 0;  /* no reduction to clean up after */

  /*
  ** Action: error
  */
  if (yyps->errflag) goto yyinrecovery;
  else goto yyerrlab;	/* redundant goto to avoid 'unused label' warnings */
yyerrlab:
  /* explicit YYERROR from an action -- pop the rhs of the rule reduced
   * before looking for error recovery */
  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
#ifdef YYPOSN
  yyps->psp -= yym;
#endif /* YYPOSN */

  yynewerrflag = 1;
  goto yyerrhandler;
  goto yyerrquiet; /* redundant goto to avoid 'unused label' warnings */
yyerrquiet:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) {
    int ctry; 
    struct yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to "
	     "state %d, %d tokens\n", (int)yydepth, yytrial!=0, yystate,
	     yyps->save->state, (int)(yylvp - yylvals - yyps->save->lexeme));
#endif
    /* Memorize most forward-looking error state in case
     * it's really an error. */
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      /* Free old saved error context state */
      if(yyerrctx) YYFreeState(yyerrctx);
      /* Create and fill out new saved error context state */
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      memcpy(yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
#ifdef YYPOSN
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
#endif /* YYPOSN */
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yychar = -1;
    yylexp = yylexemes + save->lexeme;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    yylvp = yylvals + save->lexeme;
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
#ifdef YYPOSN
    yylpp  = yylpsns + save->lexeme;
    yyps->psp = yyps->ps + (save->psp - save->ps);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
#endif /* YYPOSN */
    ctry = ++save->ctry;
    yystate = save->state;
    /* We tried shift, try reduce now */
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    /*
    ** Nothing left on the stack -- error
    */
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       yytrial!=0);
      }
#endif
      /* Restore state as it was in the most forward-advanced error */
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      memcpy(yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      yylvp = yylvals   + yyerrctx->lexeme;
      yylval = yylvp[-1];
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
#ifdef YYPOSN
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yyposn = yylpp[-1];
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
#endif /* YYPOSN */
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state "
	         "%d\n", (int)yydepth, yytrial!=0, *(yyps->ssp), yytable[yyn]);
#endif
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 (int)yydepth, yytrial!=0, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
#ifdef YYDESTRUCT
	YYDESTRUCT(yytrial!=0, yyastable[yyps->ssp[0]], yyps->vsp, yyps->psp);
#endif /* YYDESTRUCT */
        --(yyps->ssp);
        --(yyps->vsp);
#ifdef YYPOSN
        --(yyps->psp);
#endif /* YYPOSN */
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d "
	     "(%s)\n", (int)yydepth, yytrial!=0, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
#ifdef YYDESTRUCT
    if (yychar > 0)
      YYDESTRUCT(yytrial!=0, yyastable[yyttable[yychar]], &yylval, &yyposn);
#endif /* YYDESTRUCT */
    yychar = (-1);
    goto yyloop;
  }

  /*
  ** Reduce the rule
  */
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           (int)yydepth, yytrial!=0, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = $1" default action */
  yyval = yyvsp[0];

#ifdef YYPOSN
  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling
     is present */
#ifndef YYPOSN_CONSTRUCTOR
  memset(&yyps->pos, 0, sizeof(yyps->pos));
#endif
#ifdef YYREDUCEPOSNFUNC
  reduce_posn = 1;
#endif /* YYREDUCEPOSNFUNC */
#endif /* YYPOSN */

  switch (yyn) {

case 3:
  if (!yytrial)
#line 194 "asmparse.y"
{ PASM->EndClass(); }
#line 6458 "asmparse.cpp.tab.c"
break;
case 4:
  if (!yytrial)
#line 195 "asmparse.y"
{ PASM->EndNameSpace(); }
#line 6464 "asmparse.cpp.tab.c"
break;
case 5:
  if (!yytrial)
#line 196 "asmparse.y"
{ if(PASM->m_pCurMethod->m_ulLines[1] ==0)
                                                                                  {  PASM->m_pCurMethod->m_ulLines[1] = PASM->m_ulCurLine;
                                                                                     PASM->m_pCurMethod->m_ulColumns[1]=PASM->m_ulCurColumn;}
                                                                                  PASM->EndMethod(); }
#line 6473 "asmparse.cpp.tab.c"
break;
case 12:
  if (!yytrial)
#line 206 "asmparse.y"
{ PASMM->EndAssembly(); }
#line 6479 "asmparse.cpp.tab.c"
break;
case 13:
  if (!yytrial)
#line 207 "asmparse.y"
{ PASMM->EndAssembly(); }
#line 6485 "asmparse.cpp.tab.c"
break;
case 14:
  if (!yytrial)
#line 208 "asmparse.y"
{ PASMM->EndComType(); }
#line 6491 "asmparse.cpp.tab.c"
break;
case 15:
  if (!yytrial)
#line 209 "asmparse.y"
{ PASMM->EndManifestRes(); }
#line 6497 "asmparse.cpp.tab.c"
break;
case 19:
  if (!yytrial)
#line 213 "asmparse.y"
{
#ifdef _PREFAST_
#pragma warning(push)
#pragma warning(disable:22011) /* Suppress PREFast warning about integer overflow/underflow*/
#endif
                                                                                  PASM->m_dwSubsystem = yyvsp[0].int32;
#ifdef _PREFAST_
#pragma warning(pop)
#endif
                                                                                }
#line 6512 "asmparse.cpp.tab.c"
break;
case 20:
  if (!yytrial)
#line 223 "asmparse.y"
{ PASM->m_dwComImageFlags = yyvsp[0].int32; }
#line 6518 "asmparse.cpp.tab.c"
break;
case 21:
  if (!yytrial)
#line 224 "asmparse.y"
{ PASM->m_dwFileAlignment = yyvsp[0].int32;
                                                                                  if((yyvsp[0].int32 & (yyvsp[0].int32 - 1))||(yyvsp[0].int32 < 0x200)||(yyvsp[0].int32 > 0x10000))
                                                                                    PASM->report->error("Invalid file alignment, must be power of 2 from 0x200 to 0x10000\n");}
#line 6526 "asmparse.cpp.tab.c"
break;
case 22:
  if (!yytrial)
#line 227 "asmparse.y"
{ PASM->m_stBaseAddress = (ULONGLONG)(*(yyvsp[0].int64)); delete yyvsp[0].int64;
                                                                                  if(PASM->m_stBaseAddress & 0xFFFF)
                                                                                    PASM->report->error("Invalid image base, must be 0x10000-aligned\n");}
#line 6534 "asmparse.cpp.tab.c"
break;
case 23:
  if (!yytrial)
#line 230 "asmparse.y"
{ PASM->m_stSizeOfStackReserve = (size_t)(*(yyvsp[0].int64)); delete yyvsp[0].int64; }
#line 6540 "asmparse.cpp.tab.c"
break;
case 28:
  if (!yytrial)
#line 235 "asmparse.y"
{ PASM->m_fIsMscorlib = TRUE; }
#line 6546 "asmparse.cpp.tab.c"
break;
case 31:
  if (!yytrial)
#line 242 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 6552 "asmparse.cpp.tab.c"
break;
case 32:
  if (!yytrial)
#line 243 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 6558 "asmparse.cpp.tab.c"
break;
case 33:
  if (!yytrial)
#line 246 "asmparse.y"
{ LPCSTRToGuid(yyvsp[0].string,&(PASM->m_guidLang)); }
#line 6564 "asmparse.cpp.tab.c"
break;
case 34:
  if (!yytrial)
#line 247 "asmparse.y"
{ LPCSTRToGuid(yyvsp[-2].string,&(PASM->m_guidLang));
                                                                                  LPCSTRToGuid(yyvsp[0].string,&(PASM->m_guidLangVendor));}
#line 6571 "asmparse.cpp.tab.c"
break;
case 35:
  if (!yytrial)
#line 249 "asmparse.y"
{ LPCSTRToGuid(yyvsp[-4].string,&(PASM->m_guidLang));
                                                                                  LPCSTRToGuid(yyvsp[-2].string,&(PASM->m_guidLangVendor));
                                                                                  LPCSTRToGuid(yyvsp[-2].string,&(PASM->m_guidDoc));}
#line 6579 "asmparse.cpp.tab.c"
break;
case 36:
  if (!yytrial)
#line 254 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 6585 "asmparse.cpp.tab.c"
break;
case 37:
  if (!yytrial)
#line 255 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 6591 "asmparse.cpp.tab.c"
break;
case 38:
  if (!yytrial)
#line 258 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 6597 "asmparse.cpp.tab.c"
break;
case 39:
  if (!yytrial)
#line 259 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 6603 "asmparse.cpp.tab.c"
break;
case 40:
  if (!yytrial)
#line 260 "asmparse.y"
{ yyval.string = newStringWDel(yyvsp[-2].string, '.', yyvsp[0].string); }
#line 6609 "asmparse.cpp.tab.c"
break;
case 41:
  if (!yytrial)
#line 263 "asmparse.y"
{ yyval.int32 = yyvsp[0].int32; }
#line 6615 "asmparse.cpp.tab.c"
break;
case 42:
  if (!yytrial)
#line 266 "asmparse.y"
{ yyval.int64 = yyvsp[0].int64; }
#line 6621 "asmparse.cpp.tab.c"
break;
case 43:
  if (!yytrial)
#line 267 "asmparse.y"
{ yyval.int64 = neg ? new __int64(yyvsp[0].int32) : new __int64((unsigned)yyvsp[0].int32); }
#line 6627 "asmparse.cpp.tab.c"
break;
case 44:
  if (!yytrial)
#line 270 "asmparse.y"
{ yyval.float64 = yyvsp[0].float64; }
#line 6633 "asmparse.cpp.tab.c"
break;
case 45:
  if (!yytrial)
#line 271 "asmparse.y"
{ float f; *((__int32*) (&f)) = yyvsp[-1].int32; yyval.float64 = new double(f); }
#line 6639 "asmparse.cpp.tab.c"
break;
case 46:
  if (!yytrial)
#line 272 "asmparse.y"
{ yyval.float64 = (double*) yyvsp[-1].int64; }
#line 6645 "asmparse.cpp.tab.c"
break;
case 47:
  if (!yytrial)
#line 276 "asmparse.y"
{ PASM->AddTypeDef(yyvsp[-2].binstr,yyvsp[0].string); }
#line 6651 "asmparse.cpp.tab.c"
break;
case 48:
  if (!yytrial)
#line 277 "asmparse.y"
{ PASM->AddTypeDef(yyvsp[-2].token,yyvsp[0].string); }
#line 6657 "asmparse.cpp.tab.c"
break;
case 49:
  if (!yytrial)
#line 278 "asmparse.y"
{ PASM->AddTypeDef(yyvsp[-2].token,yyvsp[0].string); }
#line 6663 "asmparse.cpp.tab.c"
break;
case 50:
  if (!yytrial)
#line 279 "asmparse.y"
{ yyvsp[-2].cad->tkOwner = 0; PASM->AddTypeDef(yyvsp[-2].cad,yyvsp[0].string); }
#line 6669 "asmparse.cpp.tab.c"
break;
case 51:
  if (!yytrial)
#line 280 "asmparse.y"
{ PASM->AddTypeDef(yyvsp[-2].cad,yyvsp[0].string); }
#line 6675 "asmparse.cpp.tab.c"
break;
case 52:
  if (!yytrial)
#line 285 "asmparse.y"
{ DefineVar(yyvsp[0].string, NULL); }
#line 6681 "asmparse.cpp.tab.c"
break;
case 53:
  if (!yytrial)
#line 286 "asmparse.y"
{ DefineVar(yyvsp[-1].string, yyvsp[0].binstr); }
#line 6687 "asmparse.cpp.tab.c"
break;
case 54:
  if (!yytrial)
#line 287 "asmparse.y"
{ UndefVar(yyvsp[0].string); }
#line 6693 "asmparse.cpp.tab.c"
break;
case 55:
  if (!yytrial)
#line 288 "asmparse.y"
{ SkipToken = !IsVarDefined(yyvsp[0].string);
                                                                                  IfEndif++;
                                                                                }
#line 6701 "asmparse.cpp.tab.c"
break;
case 56:
  if (!yytrial)
#line 291 "asmparse.y"
{ SkipToken = IsVarDefined(yyvsp[0].string);
                                                                                  IfEndif++;
                                                                                }
#line 6709 "asmparse.cpp.tab.c"
break;
case 57:
  if (!yytrial)
#line 294 "asmparse.y"
{ if(IfEndif == 1) SkipToken = !SkipToken;}
#line 6715 "asmparse.cpp.tab.c"
break;
case 58:
  if (!yytrial)
#line 295 "asmparse.y"
{ if(IfEndif == 0)
                                                                                    PASM->report->error("Unmatched #endif\n");
                                                                                  else IfEndif--;
                                                                                }
#line 6724 "asmparse.cpp.tab.c"
break;
case 59:
  if (!yytrial)
#line 299 "asmparse.y"
{ _ASSERTE(!"yylex should have dealt with this"); }
#line 6730 "asmparse.cpp.tab.c"
break;
case 60:
  if (!yytrial)
#line 300 "asmparse.y"
{ }
#line 6736 "asmparse.cpp.tab.c"
break;
case 61:
  if (!yytrial)
#line 304 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[0].token, NULL); }
#line 6742 "asmparse.cpp.tab.c"
break;
case 62:
  if (!yytrial)
#line 305 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[-2].token, yyvsp[0].binstr); }
#line 6748 "asmparse.cpp.tab.c"
break;
case 63:
  if (!yytrial)
#line 306 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[-4].token, yyvsp[-1].binstr); }
#line 6754 "asmparse.cpp.tab.c"
break;
case 64:
  if (!yytrial)
#line 307 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[-2].int32, yyvsp[-1].binstr); }
#line 6760 "asmparse.cpp.tab.c"
break;
case 65:
  if (!yytrial)
#line 310 "asmparse.y"
{ yyval.cad = new CustomDescr(yyvsp[-2].token, yyvsp[0].token, NULL); }
#line 6766 "asmparse.cpp.tab.c"
break;
case 66:
  if (!yytrial)
#line 311 "asmparse.y"
{ yyval.cad = new CustomDescr(yyvsp[-4].token, yyvsp[-2].token, yyvsp[0].binstr); }
#line 6772 "asmparse.cpp.tab.c"
break;
case 67:
  if (!yytrial)
#line 313 "asmparse.y"
{ yyval.cad = new CustomDescr(yyvsp[-6].token, yyvsp[-4].token, yyvsp[-1].binstr); }
#line 6778 "asmparse.cpp.tab.c"
break;
case 68:
  if (!yytrial)
#line 314 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[-2].int32, yyvsp[-1].binstr); }
#line 6784 "asmparse.cpp.tab.c"
break;
case 69:
  if (!yytrial)
#line 317 "asmparse.y"
{ yyval.int32 = yyvsp[-2].token; bParsingByteArray = TRUE; }
#line 6790 "asmparse.cpp.tab.c"
break;
case 70:
  if (!yytrial)
#line 321 "asmparse.y"
{ PASM->m_pCustomDescrList = NULL;
                                                                                  PASM->m_tkCurrentCVOwner = yyvsp[-4].token;
                                                                                  yyval.int32 = yyvsp[-2].token; bParsingByteArray = TRUE; }
#line 6798 "asmparse.cpp.tab.c"
break;
case 71:
  if (!yytrial)
#line 326 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 6804 "asmparse.cpp.tab.c"
break;
case 72:
  if (!yytrial)
#line 329 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 6810 "asmparse.cpp.tab.c"
break;
case 73:
  if (!yytrial)
#line 330 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 6816 "asmparse.cpp.tab.c"
break;
case 74:
  if (!yytrial)
#line 334 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                                                  yyval.binstr->appendInt16(VAL16(nCustomBlobNVPairs));
                                                                                  yyval.binstr->append(yyvsp[0].binstr);
                                                                                  nCustomBlobNVPairs = 0; }
#line 6825 "asmparse.cpp.tab.c"
break;
case 75:
  if (!yytrial)
#line 340 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt16(VAL16(0x0001)); }
#line 6831 "asmparse.cpp.tab.c"
break;
case 76:
  if (!yytrial)
#line 341 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                                                  AppendFieldToCustomBlob(yyval.binstr,yyvsp[0].binstr); }
#line 6838 "asmparse.cpp.tab.c"
break;
case 77:
  if (!yytrial)
#line 343 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 6844 "asmparse.cpp.tab.c"
break;
case 78:
  if (!yytrial)
#line 346 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 6850 "asmparse.cpp.tab.c"
break;
case 79:
  if (!yytrial)
#line 348 "asmparse.y"
{ yyval.binstr = yyvsp[-5].binstr; yyval.binstr->appendInt8(yyvsp[-4].int32);
                                                                                  yyval.binstr->append(yyvsp[-3].binstr);
                                                                                  AppendStringWithLength(yyval.binstr,yyvsp[-2].string);
                                                                                  AppendFieldToCustomBlob(yyval.binstr,yyvsp[0].binstr);
                                                                                  nCustomBlobNVPairs++; }
#line 6860 "asmparse.cpp.tab.c"
break;
case 80:
  if (!yytrial)
#line 353 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 6866 "asmparse.cpp.tab.c"
break;
case 81:
  if (!yytrial)
#line 356 "asmparse.y"
{ yyval.int32 = SERIALIZATION_TYPE_FIELD; }
#line 6872 "asmparse.cpp.tab.c"
break;
case 82:
  if (!yytrial)
#line 357 "asmparse.y"
{ yyval.int32 = SERIALIZATION_TYPE_PROPERTY; }
#line 6878 "asmparse.cpp.tab.c"
break;
case 83:
  if (!yytrial)
#line 360 "asmparse.y"
{ if(yyvsp[0].cad->tkOwner && !yyvsp[0].cad->tkInterfacePair)
                                                                                    PASM->DefineCV(yyvsp[0].cad);
                                                                                  else if(PASM->m_pCustomDescrList)
                                                                                    PASM->m_pCustomDescrList->PUSH(yyvsp[0].cad); }
#line 6887 "asmparse.cpp.tab.c"
break;
case 84:
  if (!yytrial)
#line 364 "asmparse.y"
{ PASM->DefineCV(yyvsp[0].cad); }
#line 6893 "asmparse.cpp.tab.c"
break;
case 85:
  if (!yytrial)
#line 365 "asmparse.y"
{ CustomDescr* pNew = new CustomDescr(yyvsp[0].tdd->m_pCA);
                                                                                  if(pNew->tkOwner == 0) pNew->tkOwner = PASM->m_tkCurrentCVOwner;
                                                                                  if(pNew->tkOwner)
                                                                                    PASM->DefineCV(pNew);
                                                                                  else if(PASM->m_pCustomDescrList)
                                                                                    PASM->m_pCustomDescrList->PUSH(pNew); }
#line 6904 "asmparse.cpp.tab.c"
break;
case 86:
  if (!yytrial)
#line 373 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 6910 "asmparse.cpp.tab.c"
break;
case 87:
  if (!yytrial)
#line 374 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE); }
#line 6916 "asmparse.cpp.tab.c"
break;
case 88:
  if (!yytrial)
#line 375 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TAGGED_OBJECT); }
#line 6922 "asmparse.cpp.tab.c"
break;
case 89:
  if (!yytrial)
#line 376 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                AppendStringWithLength(yyval.binstr,yyvsp[0].string); }
#line 6929 "asmparse.cpp.tab.c"
break;
case 90:
  if (!yytrial)
#line 378 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yyvsp[0].token)); }
#line 6936 "asmparse.cpp.tab.c"
break;
case 91:
  if (!yytrial)
#line 380 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 6942 "asmparse.cpp.tab.c"
break;
case 92:
  if (!yytrial)
#line 385 "asmparse.y"
{ PASMM->SetModuleName(NULL); PASM->m_tkCurrentCVOwner=1; }
#line 6948 "asmparse.cpp.tab.c"
break;
case 93:
  if (!yytrial)
#line 386 "asmparse.y"
{ PASMM->SetModuleName(yyvsp[0].string); PASM->m_tkCurrentCVOwner=1; }
#line 6954 "asmparse.cpp.tab.c"
break;
case 94:
  if (!yytrial)
#line 387 "asmparse.y"
{ BinStr* pbs = new BinStr();
                                                                                  unsigned L = (unsigned)strlen(yyvsp[0].string);
                                                                                  memcpy((char*)(pbs->getBuff(L)),yyvsp[0].string,L);
                                                                                  PASM->EmitImport(pbs); delete pbs;}
#line 6963 "asmparse.cpp.tab.c"
break;
case 95:
  if (!yytrial)
#line 394 "asmparse.y"
{ /*PASM->SetDataSection(); PASM->EmitDataLabel($7);*/
                                                                                  PASM->m_VTFList.PUSH(new VTFEntry((USHORT)yyvsp[-4].int32, (USHORT)yyvsp[-2].int32, yyvsp[0].string)); }
#line 6970 "asmparse.cpp.tab.c"
break;
case 96:
  if (!yytrial)
#line 398 "asmparse.y"
{ yyval.int32 = 0; }
#line 6976 "asmparse.cpp.tab.c"
break;
case 97:
  if (!yytrial)
#line 399 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_32BIT; }
#line 6982 "asmparse.cpp.tab.c"
break;
case 98:
  if (!yytrial)
#line 400 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_64BIT; }
#line 6988 "asmparse.cpp.tab.c"
break;
case 99:
  if (!yytrial)
#line 401 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_FROM_UNMANAGED; }
#line 6994 "asmparse.cpp.tab.c"
break;
case 100:
  if (!yytrial)
#line 402 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_CALL_MOST_DERIVED; }
#line 7000 "asmparse.cpp.tab.c"
break;
case 101:
  if (!yytrial)
#line 403 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN; }
#line 7006 "asmparse.cpp.tab.c"
break;
case 102:
  if (!yytrial)
#line 406 "asmparse.y"
{ PASM->m_pVTable = yyvsp[-1].binstr; }
#line 7012 "asmparse.cpp.tab.c"
break;
case 103:
  if (!yytrial)
#line 409 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 7018 "asmparse.cpp.tab.c"
break;
case 104:
  if (!yytrial)
#line 413 "asmparse.y"
{ PASM->StartNameSpace(yyvsp[0].string); }
#line 7024 "asmparse.cpp.tab.c"
break;
case 105:
  if (!yytrial)
#line 416 "asmparse.y"
{ newclass = TRUE; }
#line 7030 "asmparse.cpp.tab.c"
break;
case 106:
  if (!yytrial)
#line 419 "asmparse.y"
{ if(yyvsp[0].typarlist) FixupConstraints();
                                                                                  PASM->StartClass(yyvsp[-1].string, yyvsp[-2].classAttr, yyvsp[0].typarlist);
                                                                                  TyParFixupList.RESET(false);
                                                                                  newclass = FALSE;
                                                                                }
#line 7040 "asmparse.cpp.tab.c"
break;
case 107:
  if (!yytrial)
#line 425 "asmparse.y"
{ PASM->AddClass(); }
#line 7046 "asmparse.cpp.tab.c"
break;
case 108:
  if (!yytrial)
#line 428 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) 0; }
#line 7052 "asmparse.cpp.tab.c"
break;
case 109:
  if (!yytrial)
#line 429 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdVisibilityMask) | tdPublic); }
#line 7058 "asmparse.cpp.tab.c"
break;
case 110:
  if (!yytrial)
#line 430 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdVisibilityMask) | tdNotPublic); }
#line 7064 "asmparse.cpp.tab.c"
break;
case 111:
  if (!yytrial)
#line 431 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | 0x80000000 | tdSealed); }
#line 7070 "asmparse.cpp.tab.c"
break;
case 112:
  if (!yytrial)
#line 432 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | 0x40000000); }
#line 7076 "asmparse.cpp.tab.c"
break;
case 113:
  if (!yytrial)
#line 433 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdInterface | tdAbstract); }
#line 7082 "asmparse.cpp.tab.c"
break;
case 114:
  if (!yytrial)
#line 434 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdSealed); }
#line 7088 "asmparse.cpp.tab.c"
break;
case 115:
  if (!yytrial)
#line 435 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdAbstract); }
#line 7094 "asmparse.cpp.tab.c"
break;
case 116:
  if (!yytrial)
#line 436 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdLayoutMask) | tdAutoLayout); }
#line 7100 "asmparse.cpp.tab.c"
break;
case 117:
  if (!yytrial)
#line 437 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdLayoutMask) | tdSequentialLayout); }
#line 7106 "asmparse.cpp.tab.c"
break;
case 118:
  if (!yytrial)
#line 438 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdLayoutMask) | tdExplicitLayout); }
#line 7112 "asmparse.cpp.tab.c"
break;
case 119:
  if (!yytrial)
#line 439 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdStringFormatMask) | tdAnsiClass); }
#line 7118 "asmparse.cpp.tab.c"
break;
case 120:
  if (!yytrial)
#line 440 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdStringFormatMask) | tdUnicodeClass); }
#line 7124 "asmparse.cpp.tab.c"
break;
case 121:
  if (!yytrial)
#line 441 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdStringFormatMask) | tdAutoClass); }
#line 7130 "asmparse.cpp.tab.c"
break;
case 122:
  if (!yytrial)
#line 442 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdImport); }
#line 7136 "asmparse.cpp.tab.c"
break;
case 123:
  if (!yytrial)
#line 443 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdSerializable); }
#line 7142 "asmparse.cpp.tab.c"
break;
case 124:
  if (!yytrial)
#line 444 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdWindowsRuntime); }
#line 7148 "asmparse.cpp.tab.c"
break;
case 125:
  if (!yytrial)
#line 445 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedPublic); }
#line 7154 "asmparse.cpp.tab.c"
break;
case 126:
  if (!yytrial)
#line 446 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedPrivate); }
#line 7160 "asmparse.cpp.tab.c"
break;
case 127:
  if (!yytrial)
#line 447 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedFamily); }
#line 7166 "asmparse.cpp.tab.c"
break;
case 128:
  if (!yytrial)
#line 448 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedAssembly); }
#line 7172 "asmparse.cpp.tab.c"
break;
case 129:
  if (!yytrial)
#line 449 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedFamANDAssem); }
#line 7178 "asmparse.cpp.tab.c"
break;
case 130:
  if (!yytrial)
#line 450 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedFamORAssem); }
#line 7184 "asmparse.cpp.tab.c"
break;
case 131:
  if (!yytrial)
#line 451 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdBeforeFieldInit); }
#line 7190 "asmparse.cpp.tab.c"
break;
case 132:
  if (!yytrial)
#line 452 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdSpecialName); }
#line 7196 "asmparse.cpp.tab.c"
break;
case 133:
  if (!yytrial)
#line 453 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr); }
#line 7202 "asmparse.cpp.tab.c"
break;
case 134:
  if (!yytrial)
#line 454 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].int32); }
#line 7208 "asmparse.cpp.tab.c"
break;
case 136:
  if (!yytrial)
#line 458 "asmparse.y"
{ PASM->m_crExtends = yyvsp[0].token; }
#line 7214 "asmparse.cpp.tab.c"
break;
case 141:
  if (!yytrial)
#line 469 "asmparse.y"
{ PASM->AddToImplList(yyvsp[0].token); }
#line 7220 "asmparse.cpp.tab.c"
break;
case 142:
  if (!yytrial)
#line 470 "asmparse.y"
{ PASM->AddToImplList(yyvsp[0].token); }
#line 7226 "asmparse.cpp.tab.c"
break;
case 143:
  if (!yytrial)
#line 474 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 7232 "asmparse.cpp.tab.c"
break;
case 144:
  if (!yytrial)
#line 475 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 7238 "asmparse.cpp.tab.c"
break;
case 145:
  if (!yytrial)
#line 478 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yyvsp[0].token); }
#line 7244 "asmparse.cpp.tab.c"
break;
case 146:
  if (!yytrial)
#line 479 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->appendInt32(yyvsp[0].token); }
#line 7250 "asmparse.cpp.tab.c"
break;
case 147:
  if (!yytrial)
#line 482 "asmparse.y"
{ yyval.typarlist = NULL; PASM->m_TyParList = NULL;}
#line 7256 "asmparse.cpp.tab.c"
break;
case 148:
  if (!yytrial)
#line 483 "asmparse.y"
{ yyval.typarlist = yyvsp[-1].typarlist;   PASM->m_TyParList = yyvsp[-1].typarlist;}
#line 7262 "asmparse.cpp.tab.c"
break;
case 149:
  if (!yytrial)
#line 486 "asmparse.y"
{ yyval.int32 = gpCovariant; }
#line 7268 "asmparse.cpp.tab.c"
break;
case 150:
  if (!yytrial)
#line 487 "asmparse.y"
{ yyval.int32 = gpContravariant; }
#line 7274 "asmparse.cpp.tab.c"
break;
case 151:
  if (!yytrial)
#line 488 "asmparse.y"
{ yyval.int32 = gpReferenceTypeConstraint; }
#line 7280 "asmparse.cpp.tab.c"
break;
case 152:
  if (!yytrial)
#line 489 "asmparse.y"
{ yyval.int32 = gpNotNullableValueTypeConstraint; }
#line 7286 "asmparse.cpp.tab.c"
break;
case 153:
  if (!yytrial)
#line 490 "asmparse.y"
{ yyval.int32 = gpAcceptByRefLike; }
#line 7292 "asmparse.cpp.tab.c"
break;
case 154:
  if (!yytrial)
#line 491 "asmparse.y"
{ yyval.int32 = gpDefaultConstructorConstraint; }
#line 7298 "asmparse.cpp.tab.c"
break;
case 155:
  if (!yytrial)
#line 492 "asmparse.y"
{ yyval.int32 = (CorGenericParamAttr)yyvsp[-1].int32; }
#line 7304 "asmparse.cpp.tab.c"
break;
case 156:
  if (!yytrial)
#line 495 "asmparse.y"
{ yyval.int32 = 0; }
#line 7310 "asmparse.cpp.tab.c"
break;
case 157:
  if (!yytrial)
#line 496 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | yyvsp[0].int32; }
#line 7316 "asmparse.cpp.tab.c"
break;
case 158:
  if (!yytrial)
#line 499 "asmparse.y"
{ yyval.int32 = (CorGenericParamAttr)yyvsp[-1].int32; }
#line 7322 "asmparse.cpp.tab.c"
break;
case 159:
  if (!yytrial)
#line 502 "asmparse.y"
{ yyval.int32 = 0; }
#line 7328 "asmparse.cpp.tab.c"
break;
case 160:
  if (!yytrial)
#line 503 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | yyvsp[0].int32; }
#line 7334 "asmparse.cpp.tab.c"
break;
case 161:
  if (!yytrial)
#line 506 "asmparse.y"
{yyval.typarlist = new TyParList(yyvsp[-3].int32, yyvsp[-2].token, NULL, yyvsp[-1].string, yyvsp[0].typarlist); }
#line 7340 "asmparse.cpp.tab.c"
break;
case 162:
  if (!yytrial)
#line 507 "asmparse.y"
{yyval.typarlist = new TyParList(yyvsp[-3].int32, yyvsp[-2].binstr, yyvsp[-1].string, yyvsp[0].typarlist);}
#line 7346 "asmparse.cpp.tab.c"
break;
case 163:
  if (!yytrial)
#line 508 "asmparse.y"
{yyval.typarlist = new TyParList(yyvsp[-2].int32, NULL, yyvsp[-1].string, yyvsp[0].typarlist);}
#line 7352 "asmparse.cpp.tab.c"
break;
case 164:
  if (!yytrial)
#line 511 "asmparse.y"
{ yyval.typarlist = NULL; }
#line 7358 "asmparse.cpp.tab.c"
break;
case 165:
  if (!yytrial)
#line 512 "asmparse.y"
{ yyval.typarlist = yyvsp[0].typarlist; }
#line 7364 "asmparse.cpp.tab.c"
break;
case 166:
  if (!yytrial)
#line 515 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 7370 "asmparse.cpp.tab.c"
break;
case 167:
  if (!yytrial)
#line 518 "asmparse.y"
{ yyval.int32= 0; }
#line 7376 "asmparse.cpp.tab.c"
break;
case 168:
  if (!yytrial)
#line 519 "asmparse.y"
{ yyval.int32 = yyvsp[0].int32; }
#line 7382 "asmparse.cpp.tab.c"
break;
case 169:
  if (!yytrial)
#line 522 "asmparse.y"
{ yyval.int32 = yyvsp[-2].int32; }
#line 7388 "asmparse.cpp.tab.c"
break;
case 170:
  if (!yytrial)
#line 526 "asmparse.y"
{ if(PASM->m_pCurMethod->m_ulLines[1] ==0)
                                                              {  PASM->m_pCurMethod->m_ulLines[1] = PASM->m_ulCurLine;
                                                                 PASM->m_pCurMethod->m_ulColumns[1]=PASM->m_ulCurColumn;}
                                                              PASM->EndMethod(); }
#line 7397 "asmparse.cpp.tab.c"
break;
case 171:
  if (!yytrial)
#line 530 "asmparse.y"
{ PASM->EndClass(); }
#line 7403 "asmparse.cpp.tab.c"
break;
case 172:
  if (!yytrial)
#line 531 "asmparse.y"
{ PASM->EndEvent(); }
#line 7409 "asmparse.cpp.tab.c"
break;
case 173:
  if (!yytrial)
#line 532 "asmparse.y"
{ PASM->EndProp(); }
#line 7415 "asmparse.cpp.tab.c"
break;
case 179:
  if (!yytrial)
#line 538 "asmparse.y"
{ PASM->m_pCurClass->m_ulSize = yyvsp[0].int32; }
#line 7421 "asmparse.cpp.tab.c"
break;
case 180:
  if (!yytrial)
#line 539 "asmparse.y"
{ PASM->m_pCurClass->m_ulPack = yyvsp[0].int32; }
#line 7427 "asmparse.cpp.tab.c"
break;
case 181:
  if (!yytrial)
#line 540 "asmparse.y"
{ PASMM->EndComType(); }
#line 7433 "asmparse.cpp.tab.c"
break;
case 182:
  if (!yytrial)
#line 542 "asmparse.y"
{ BinStr *sig1 = parser->MakeSig(yyvsp[-7].int32, yyvsp[-6].binstr, yyvsp[-1].binstr);
                                                                  BinStr *sig2 = new BinStr(); sig2->append(sig1);
                                                                  PASM->AddMethodImpl(yyvsp[-11].token,yyvsp[-9].string,sig1,yyvsp[-5].token,yyvsp[-3].string,sig2);
                                                                  PASM->ResetArgNameList();
                                                                }
#line 7443 "asmparse.cpp.tab.c"
break;
case 183:
  if (!yytrial)
#line 548 "asmparse.y"
{ PASM->AddMethodImpl(yyvsp[-17].token,yyvsp[-15].string,
                                                                      (yyvsp[-14].int32==0 ? parser->MakeSig(yyvsp[-19].int32,yyvsp[-18].binstr,yyvsp[-12].binstr) :
                                                                      parser->MakeSig(yyvsp[-19].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yyvsp[-18].binstr,yyvsp[-12].binstr,yyvsp[-14].int32)),
                                                                      yyvsp[-6].token,yyvsp[-4].string,
                                                                      (yyvsp[-3].int32==0 ? parser->MakeSig(yyvsp[-8].int32,yyvsp[-7].binstr,yyvsp[-1].binstr) :
                                                                      parser->MakeSig(yyvsp[-8].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yyvsp[-7].binstr,yyvsp[-1].binstr,yyvsp[-3].int32)));
                                                                   PASM->ResetArgNameList();
                                                                 }
#line 7456 "asmparse.cpp.tab.c"
break;
case 186:
  if (!yytrial)
#line 558 "asmparse.y"
{ if((yyvsp[-1].int32 > 0) && (yyvsp[-1].int32 <= (int)PASM->m_pCurClass->m_NumTyPars))
                                                                PASM->m_pCustomDescrList = PASM->m_pCurClass->m_TyPars[yyvsp[-1].int32-1].CAList();
                                                              else
                                                                PASM->report->error("Type parameter index out of range\n");
                                                            }
#line 7466 "asmparse.cpp.tab.c"
break;
case 187:
  if (!yytrial)
#line 563 "asmparse.y"
{ int n = PASM->m_pCurClass->FindTyPar(yyvsp[0].string);
                                                              if(n >= 0)
                                                                PASM->m_pCustomDescrList = PASM->m_pCurClass->m_TyPars[n].CAList();
                                                              else
                                                                PASM->report->error("Type parameter '%s' undefined\n",yyvsp[0].string);
                                                            }
#line 7477 "asmparse.cpp.tab.c"
break;
case 188:
  if (!yytrial)
#line 569 "asmparse.y"
{ PASM->AddGenericParamConstraint(yyvsp[-3].int32, 0, yyvsp[0].token); }
#line 7483 "asmparse.cpp.tab.c"
break;
case 189:
  if (!yytrial)
#line 570 "asmparse.y"
{ PASM->AddGenericParamConstraint(0, yyvsp[-2].string, yyvsp[0].token); }
#line 7489 "asmparse.cpp.tab.c"
break;
case 190:
  if (!yytrial)
#line 571 "asmparse.y"
{ yyvsp[0].cad->tkInterfacePair = yyvsp[-1].token;
                                                                        if(PASM->m_pCustomDescrList)
                                                                            PASM->m_pCustomDescrList->PUSH(yyvsp[0].cad);
                                                                      }
#line 7498 "asmparse.cpp.tab.c"
break;
case 191:
  if (!yytrial)
#line 579 "asmparse.y"
{ yyvsp[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                              PASM->AddField(yyvsp[-2].string, yyvsp[-3].binstr, yyvsp[-4].fieldAttr, yyvsp[-1].string, yyvsp[0].binstr, yyvsp[-5].int32); }
#line 7505 "asmparse.cpp.tab.c"
break;
case 192:
  if (!yytrial)
#line 583 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) 0; }
#line 7511 "asmparse.cpp.tab.c"
break;
case 193:
  if (!yytrial)
#line 584 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdStatic); }
#line 7517 "asmparse.cpp.tab.c"
break;
case 194:
  if (!yytrial)
#line 585 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdPublic); }
#line 7523 "asmparse.cpp.tab.c"
break;
case 195:
  if (!yytrial)
#line 586 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdPrivate); }
#line 7529 "asmparse.cpp.tab.c"
break;
case 196:
  if (!yytrial)
#line 587 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdFamily); }
#line 7535 "asmparse.cpp.tab.c"
break;
case 197:
  if (!yytrial)
#line 588 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdInitOnly); }
#line 7541 "asmparse.cpp.tab.c"
break;
case 198:
  if (!yytrial)
#line 589 "asmparse.y"
{ yyval.fieldAttr = yyvsp[-1].fieldAttr; }
#line 7547 "asmparse.cpp.tab.c"
break;
case 199:
  if (!yytrial)
#line 590 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdSpecialName); }
#line 7553 "asmparse.cpp.tab.c"
break;
case 200:
  if (!yytrial)
#line 603 "asmparse.y"
{ PASM->m_pMarshal = yyvsp[-1].binstr; }
#line 7559 "asmparse.cpp.tab.c"
break;
case 201:
  if (!yytrial)
#line 604 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdAssembly); }
#line 7565 "asmparse.cpp.tab.c"
break;
case 202:
  if (!yytrial)
#line 605 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdFamANDAssem); }
#line 7571 "asmparse.cpp.tab.c"
break;
case 203:
  if (!yytrial)
#line 606 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdFamORAssem); }
#line 7577 "asmparse.cpp.tab.c"
break;
case 204:
  if (!yytrial)
#line 607 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdPrivateScope); }
#line 7583 "asmparse.cpp.tab.c"
break;
case 205:
  if (!yytrial)
#line 608 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdLiteral); }
#line 7589 "asmparse.cpp.tab.c"
break;
case 206:
  if (!yytrial)
#line 609 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdNotSerialized); }
#line 7595 "asmparse.cpp.tab.c"
break;
case 207:
  if (!yytrial)
#line 610 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].int32); }
#line 7601 "asmparse.cpp.tab.c"
break;
case 208:
  if (!yytrial)
#line 613 "asmparse.y"
{ yyval.string = 0; }
#line 7607 "asmparse.cpp.tab.c"
break;
case 209:
  if (!yytrial)
#line 614 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 7613 "asmparse.cpp.tab.c"
break;
case 210:
  if (!yytrial)
#line 617 "asmparse.y"
{ yyval.binstr = NULL; }
#line 7619 "asmparse.cpp.tab.c"
break;
case 211:
  if (!yytrial)
#line 618 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 7625 "asmparse.cpp.tab.c"
break;
case 212:
  if (!yytrial)
#line 621 "asmparse.y"
{ yyval.int32 = 0xFFFFFFFF; }
#line 7631 "asmparse.cpp.tab.c"
break;
case 213:
  if (!yytrial)
#line 622 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32; }
#line 7637 "asmparse.cpp.tab.c"
break;
case 214:
  if (!yytrial)
#line 627 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if (yyvsp[-3].binstr == NULL)
                                                               {
                                                                 if((iCallConv)&&((yyvsp[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 yyval.token = PASM->MakeMemberRef(yyvsp[-6].token, yyvsp[-4].string, parser->MakeSig(yyvsp[-8].int32|iCallConv, yyvsp[-7].binstr, yyvsp[-1].binstr));
                                                               }
                                                               else
                                                               {
                                                                 mdToken mr;
                                                                 if((iCallConv)&&((yyvsp[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 mr = PASM->MakeMemberRef(yyvsp[-6].token, yyvsp[-4].string,
                                                                   parser->MakeSig(yyvsp[-8].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yyvsp[-7].binstr, yyvsp[-1].binstr, corCountArgs(yyvsp[-3].binstr)));
                                                                 yyval.token = PASM->MakeMethodSpec(mr,
                                                                   parser->MakeSig(IMAGE_CEE_CS_CALLCONV_INSTANTIATION, 0, yyvsp[-3].binstr));
                                                               }
                                                             }
#line 7658 "asmparse.cpp.tab.c"
break;
case 215:
  if (!yytrial)
#line 644 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if((iCallConv)&&((yyvsp[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                               yyval.token = PASM->MakeMemberRef(yyvsp[-6].token, yyvsp[-4].string,
                                                                 parser->MakeSig(yyvsp[-8].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yyvsp[-7].binstr, yyvsp[-1].binstr, yyvsp[-3].int32));
                                                             }
#line 7668 "asmparse.cpp.tab.c"
break;
case 216:
  if (!yytrial)
#line 650 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if (yyvsp[-3].binstr == NULL)
                                                               {
                                                                 if((iCallConv)&&((yyvsp[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 yyval.token = PASM->MakeMemberRef(mdTokenNil, yyvsp[-4].string, parser->MakeSig(yyvsp[-6].int32|iCallConv, yyvsp[-5].binstr, yyvsp[-1].binstr));
                                                               }
                                                               else
                                                               {
                                                                 mdToken mr;
                                                                 if((iCallConv)&&((yyvsp[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 mr = PASM->MakeMemberRef(mdTokenNil, yyvsp[-4].string, parser->MakeSig(yyvsp[-6].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yyvsp[-5].binstr, yyvsp[-1].binstr, corCountArgs(yyvsp[-3].binstr)));
                                                                 yyval.token = PASM->MakeMethodSpec(mr,
                                                                   parser->MakeSig(IMAGE_CEE_CS_CALLCONV_INSTANTIATION, 0, yyvsp[-3].binstr));
                                                               }
                                                             }
#line 7688 "asmparse.cpp.tab.c"
break;
case 217:
  if (!yytrial)
#line 666 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if((iCallConv)&&((yyvsp[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                               yyval.token = PASM->MakeMemberRef(mdTokenNil, yyvsp[-4].string, parser->MakeSig(yyvsp[-6].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yyvsp[-5].binstr, yyvsp[-1].binstr, yyvsp[-3].int32));
                                                             }
#line 7697 "asmparse.cpp.tab.c"
break;
case 218:
  if (!yytrial)
#line 670 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 7703 "asmparse.cpp.tab.c"
break;
case 219:
  if (!yytrial)
#line 671 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec; }
#line 7709 "asmparse.cpp.tab.c"
break;
case 220:
  if (!yytrial)
#line 672 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec; }
#line 7715 "asmparse.cpp.tab.c"
break;
case 221:
  if (!yytrial)
#line 675 "asmparse.y"
{ yyval.int32 = (yyvsp[0].int32 | IMAGE_CEE_CS_CALLCONV_HASTHIS); }
#line 7721 "asmparse.cpp.tab.c"
break;
case 222:
  if (!yytrial)
#line 676 "asmparse.y"
{ yyval.int32 = (yyvsp[0].int32 | IMAGE_CEE_CS_CALLCONV_EXPLICITTHIS); }
#line 7727 "asmparse.cpp.tab.c"
break;
case 223:
  if (!yytrial)
#line 677 "asmparse.y"
{ yyval.int32 = yyvsp[0].int32; }
#line 7733 "asmparse.cpp.tab.c"
break;
case 224:
  if (!yytrial)
#line 678 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32; }
#line 7739 "asmparse.cpp.tab.c"
break;
case 225:
  if (!yytrial)
#line 681 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_DEFAULT; }
#line 7745 "asmparse.cpp.tab.c"
break;
case 226:
  if (!yytrial)
#line 682 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_DEFAULT; }
#line 7751 "asmparse.cpp.tab.c"
break;
case 227:
  if (!yytrial)
#line 683 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_VARARG; }
#line 7757 "asmparse.cpp.tab.c"
break;
case 228:
  if (!yytrial)
#line 684 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_C; }
#line 7763 "asmparse.cpp.tab.c"
break;
case 229:
  if (!yytrial)
#line 685 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_STDCALL; }
#line 7769 "asmparse.cpp.tab.c"
break;
case 230:
  if (!yytrial)
#line 686 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_THISCALL; }
#line 7775 "asmparse.cpp.tab.c"
break;
case 231:
  if (!yytrial)
#line 687 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_FASTCALL; }
#line 7781 "asmparse.cpp.tab.c"
break;
case 232:
  if (!yytrial)
#line 688 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_UNMANAGED; }
#line 7787 "asmparse.cpp.tab.c"
break;
case 233:
  if (!yytrial)
#line 691 "asmparse.y"
{ yyval.token = yyvsp[-1].int32; }
#line 7793 "asmparse.cpp.tab.c"
break;
case 234:
  if (!yytrial)
#line 694 "asmparse.y"
{ yyval.token = yyvsp[0].token;
                                                               PASM->delArgNameList(PASM->m_firstArgName);
                                                               PASM->m_firstArgName = parser->m_ANSFirst.POP();
                                                               PASM->m_lastArgName = parser->m_ANSLast.POP();
                                                               PASM->SetMemberRefFixup(yyvsp[0].token,iOpcodeLen); }
#line 7803 "asmparse.cpp.tab.c"
break;
case 235:
  if (!yytrial)
#line 700 "asmparse.y"
{ yyvsp[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               yyval.token = PASM->MakeMemberRef(yyvsp[-2].token, yyvsp[0].string, yyvsp[-3].binstr);
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7811 "asmparse.cpp.tab.c"
break;
case 236:
  if (!yytrial)
#line 704 "asmparse.y"
{ yyvsp[-1].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               yyval.token = PASM->MakeMemberRef(NULL, yyvsp[0].string, yyvsp[-1].binstr);
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7819 "asmparse.cpp.tab.c"
break;
case 237:
  if (!yytrial)
#line 707 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7826 "asmparse.cpp.tab.c"
break;
case 238:
  if (!yytrial)
#line 709 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7833 "asmparse.cpp.tab.c"
break;
case 239:
  if (!yytrial)
#line 711 "asmparse.y"
{ yyval.token = yyvsp[0].token;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7840 "asmparse.cpp.tab.c"
break;
case 240:
  if (!yytrial)
#line 716 "asmparse.y"
{ PASM->ResetEvent(yyvsp[0].string, yyvsp[-1].token, yyvsp[-2].eventAttr); }
#line 7846 "asmparse.cpp.tab.c"
break;
case 241:
  if (!yytrial)
#line 717 "asmparse.y"
{ PASM->ResetEvent(yyvsp[0].string, mdTypeRefNil, yyvsp[-1].eventAttr); }
#line 7852 "asmparse.cpp.tab.c"
break;
case 242:
  if (!yytrial)
#line 721 "asmparse.y"
{ yyval.eventAttr = (CorEventAttr) 0; }
#line 7858 "asmparse.cpp.tab.c"
break;
case 243:
  if (!yytrial)
#line 722 "asmparse.y"
{ yyval.eventAttr = yyvsp[-1].eventAttr; }
#line 7864 "asmparse.cpp.tab.c"
break;
case 244:
  if (!yytrial)
#line 723 "asmparse.y"
{ yyval.eventAttr = (CorEventAttr) (yyvsp[-1].eventAttr | evSpecialName); }
#line 7870 "asmparse.cpp.tab.c"
break;
case 247:
  if (!yytrial)
#line 730 "asmparse.y"
{ PASM->SetEventMethod(0, yyvsp[0].token); }
#line 7876 "asmparse.cpp.tab.c"
break;
case 248:
  if (!yytrial)
#line 731 "asmparse.y"
{ PASM->SetEventMethod(1, yyvsp[0].token); }
#line 7882 "asmparse.cpp.tab.c"
break;
case 249:
  if (!yytrial)
#line 732 "asmparse.y"
{ PASM->SetEventMethod(2, yyvsp[0].token); }
#line 7888 "asmparse.cpp.tab.c"
break;
case 250:
  if (!yytrial)
#line 733 "asmparse.y"
{ PASM->SetEventMethod(3, yyvsp[0].token); }
#line 7894 "asmparse.cpp.tab.c"
break;
case 255:
  if (!yytrial)
#line 742 "asmparse.y"
{ PASM->ResetProp(yyvsp[-4].string,
                                                              parser->MakeSig((IMAGE_CEE_CS_CALLCONV_PROPERTY |
                                                              (yyvsp[-6].int32 & IMAGE_CEE_CS_CALLCONV_HASTHIS)),yyvsp[-5].binstr,yyvsp[-2].binstr), yyvsp[-7].propAttr, yyvsp[0].binstr);}
#line 7902 "asmparse.cpp.tab.c"
break;
case 256:
  if (!yytrial)
#line 747 "asmparse.y"
{ yyval.propAttr = (CorPropertyAttr) 0; }
#line 7908 "asmparse.cpp.tab.c"
break;
case 257:
  if (!yytrial)
#line 748 "asmparse.y"
{ yyval.propAttr = yyvsp[-1].propAttr; }
#line 7914 "asmparse.cpp.tab.c"
break;
case 258:
  if (!yytrial)
#line 749 "asmparse.y"
{ yyval.propAttr = (CorPropertyAttr) (yyvsp[-1].propAttr | prSpecialName); }
#line 7920 "asmparse.cpp.tab.c"
break;
case 261:
  if (!yytrial)
#line 757 "asmparse.y"
{ PASM->SetPropMethod(0, yyvsp[0].token); }
#line 7926 "asmparse.cpp.tab.c"
break;
case 262:
  if (!yytrial)
#line 758 "asmparse.y"
{ PASM->SetPropMethod(1, yyvsp[0].token); }
#line 7932 "asmparse.cpp.tab.c"
break;
case 263:
  if (!yytrial)
#line 759 "asmparse.y"
{ PASM->SetPropMethod(2, yyvsp[0].token); }
#line 7938 "asmparse.cpp.tab.c"
break;
case 268:
  if (!yytrial)
#line 767 "asmparse.y"
{ PASM->ResetForNextMethod();
                                                              uMethodBeginLine = PASM->m_ulCurLine;
                                                              uMethodBeginColumn=PASM->m_ulCurColumn;
                                                            }
#line 7947 "asmparse.cpp.tab.c"
break;
case 269:
  if (!yytrial)
#line 773 "asmparse.y"
{ yyval.binstr = NULL; }
#line 7953 "asmparse.cpp.tab.c"
break;
case 270:
  if (!yytrial)
#line 774 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 7959 "asmparse.cpp.tab.c"
break;
case 271:
  if (!yytrial)
#line 777 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 7965 "asmparse.cpp.tab.c"
break;
case 272:
  if (!yytrial)
#line 778 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 7971 "asmparse.cpp.tab.c"
break;
case 273:
  if (!yytrial)
#line 781 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 7977 "asmparse.cpp.tab.c"
break;
case 274:
  if (!yytrial)
#line 785 "asmparse.y"
{ BinStr* sig;
                                                              if (yyvsp[-5].typarlist == NULL) sig = parser->MakeSig(yyvsp[-10].int32, yyvsp[-8].binstr, yyvsp[-3].binstr);
                                                              else {
                                                               FixupTyPars(yyvsp[-8].binstr);
                                                               sig = parser->MakeSig(yyvsp[-10].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC, yyvsp[-8].binstr, yyvsp[-3].binstr, yyvsp[-5].typarlist->Count());
                                                               FixupConstraints();
                                                              }
                                                              PASM->StartMethod(yyvsp[-6].string, sig, yyvsp[-11].methAttr, yyvsp[-7].binstr, yyvsp[-9].int32, yyvsp[-5].typarlist);
                                                              TyParFixupList.RESET(false);
                                                              PASM->SetImplAttr((USHORT)yyvsp[-1].implAttr);
                                                              PASM->m_pCurMethod->m_ulLines[0] = uMethodBeginLine;
                                                              PASM->m_pCurMethod->m_ulColumns[0]=uMethodBeginColumn;
                                                            }
#line 7995 "asmparse.cpp.tab.c"
break;
case 275:
  if (!yytrial)
#line 800 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) 0; }
#line 8001 "asmparse.cpp.tab.c"
break;
case 276:
  if (!yytrial)
#line 801 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdStatic); }
#line 8007 "asmparse.cpp.tab.c"
break;
case 277:
  if (!yytrial)
#line 802 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdPublic); }
#line 8013 "asmparse.cpp.tab.c"
break;
case 278:
  if (!yytrial)
#line 803 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdPrivate); }
#line 8019 "asmparse.cpp.tab.c"
break;
case 279:
  if (!yytrial)
#line 804 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdFamily); }
#line 8025 "asmparse.cpp.tab.c"
break;
case 280:
  if (!yytrial)
#line 805 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdFinal); }
#line 8031 "asmparse.cpp.tab.c"
break;
case 281:
  if (!yytrial)
#line 806 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdSpecialName); }
#line 8037 "asmparse.cpp.tab.c"
break;
case 282:
  if (!yytrial)
#line 807 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdVirtual); }
#line 8043 "asmparse.cpp.tab.c"
break;
case 283:
  if (!yytrial)
#line 808 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdCheckAccessOnOverride); }
#line 8049 "asmparse.cpp.tab.c"
break;
case 284:
  if (!yytrial)
#line 809 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdAbstract); }
#line 8055 "asmparse.cpp.tab.c"
break;
case 285:
  if (!yytrial)
#line 810 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdAssem); }
#line 8061 "asmparse.cpp.tab.c"
break;
case 286:
  if (!yytrial)
#line 811 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdFamANDAssem); }
#line 8067 "asmparse.cpp.tab.c"
break;
case 287:
  if (!yytrial)
#line 812 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdFamORAssem); }
#line 8073 "asmparse.cpp.tab.c"
break;
case 288:
  if (!yytrial)
#line 813 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdPrivateScope); }
#line 8079 "asmparse.cpp.tab.c"
break;
case 289:
  if (!yytrial)
#line 814 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdHideBySig); }
#line 8085 "asmparse.cpp.tab.c"
break;
case 290:
  if (!yytrial)
#line 815 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdNewSlot); }
#line 8091 "asmparse.cpp.tab.c"
break;
case 291:
  if (!yytrial)
#line 816 "asmparse.y"
{ yyval.methAttr = yyvsp[-1].methAttr; }
#line 8097 "asmparse.cpp.tab.c"
break;
case 292:
  if (!yytrial)
#line 817 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdUnmanagedExport); }
#line 8103 "asmparse.cpp.tab.c"
break;
case 293:
  if (!yytrial)
#line 818 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdRequireSecObject); }
#line 8109 "asmparse.cpp.tab.c"
break;
case 294:
  if (!yytrial)
#line 819 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].int32); }
#line 8115 "asmparse.cpp.tab.c"
break;
case 295:
  if (!yytrial)
#line 821 "asmparse.y"
{ PASM->SetPinvoke(yyvsp[-4].binstr,0,yyvsp[-2].binstr,yyvsp[-1].pinvAttr);
                                                              yyval.methAttr = (CorMethodAttr) (yyvsp[-7].methAttr | mdPinvokeImpl); }
#line 8122 "asmparse.cpp.tab.c"
break;
case 296:
  if (!yytrial)
#line 824 "asmparse.y"
{ PASM->SetPinvoke(yyvsp[-2].binstr,0,NULL,yyvsp[-1].pinvAttr);
                                                              yyval.methAttr = (CorMethodAttr) (yyvsp[-5].methAttr | mdPinvokeImpl); }
#line 8129 "asmparse.cpp.tab.c"
break;
case 297:
  if (!yytrial)
#line 827 "asmparse.y"
{ PASM->SetPinvoke(new BinStr(),0,NULL,yyvsp[-1].pinvAttr);
                                                              yyval.methAttr = (CorMethodAttr) (yyvsp[-4].methAttr | mdPinvokeImpl); }
#line 8136 "asmparse.cpp.tab.c"
break;
case 298:
  if (!yytrial)
#line 831 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) 0; }
#line 8142 "asmparse.cpp.tab.c"
break;
case 299:
  if (!yytrial)
#line 832 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmNoMangle); }
#line 8148 "asmparse.cpp.tab.c"
break;
case 300:
  if (!yytrial)
#line 833 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCharSetAnsi); }
#line 8154 "asmparse.cpp.tab.c"
break;
case 301:
  if (!yytrial)
#line 834 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCharSetUnicode); }
#line 8160 "asmparse.cpp.tab.c"
break;
case 302:
  if (!yytrial)
#line 835 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCharSetAuto); }
#line 8166 "asmparse.cpp.tab.c"
break;
case 303:
  if (!yytrial)
#line 836 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmSupportsLastError); }
#line 8172 "asmparse.cpp.tab.c"
break;
case 304:
  if (!yytrial)
#line 837 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvWinapi); }
#line 8178 "asmparse.cpp.tab.c"
break;
case 305:
  if (!yytrial)
#line 838 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvCdecl); }
#line 8184 "asmparse.cpp.tab.c"
break;
case 306:
  if (!yytrial)
#line 839 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvStdcall); }
#line 8190 "asmparse.cpp.tab.c"
break;
case 307:
  if (!yytrial)
#line 840 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvThiscall); }
#line 8196 "asmparse.cpp.tab.c"
break;
case 308:
  if (!yytrial)
#line 841 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvFastcall); }
#line 8202 "asmparse.cpp.tab.c"
break;
case 309:
  if (!yytrial)
#line 842 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-3].pinvAttr | pmBestFitEnabled); }
#line 8208 "asmparse.cpp.tab.c"
break;
case 310:
  if (!yytrial)
#line 843 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-3].pinvAttr | pmBestFitDisabled); }
#line 8214 "asmparse.cpp.tab.c"
break;
case 311:
  if (!yytrial)
#line 844 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-3].pinvAttr | pmThrowOnUnmappableCharEnabled); }
#line 8220 "asmparse.cpp.tab.c"
break;
case 312:
  if (!yytrial)
#line 845 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-3].pinvAttr | pmThrowOnUnmappableCharDisabled); }
#line 8226 "asmparse.cpp.tab.c"
break;
case 313:
  if (!yytrial)
#line 846 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].int32); }
#line 8232 "asmparse.cpp.tab.c"
break;
case 314:
  if (!yytrial)
#line 849 "asmparse.y"
{ yyval.string = newString(COR_CTOR_METHOD_NAME); }
#line 8238 "asmparse.cpp.tab.c"
break;
case 315:
  if (!yytrial)
#line 850 "asmparse.y"
{ yyval.string = newString(COR_CCTOR_METHOD_NAME); }
#line 8244 "asmparse.cpp.tab.c"
break;
case 316:
  if (!yytrial)
#line 851 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 8250 "asmparse.cpp.tab.c"
break;
case 317:
  if (!yytrial)
#line 854 "asmparse.y"
{ yyval.int32 = 0; }
#line 8256 "asmparse.cpp.tab.c"
break;
case 318:
  if (!yytrial)
#line 855 "asmparse.y"
{ yyval.int32 = yyvsp[-3].int32 | pdIn; }
#line 8262 "asmparse.cpp.tab.c"
break;
case 319:
  if (!yytrial)
#line 856 "asmparse.y"
{ yyval.int32 = yyvsp[-3].int32 | pdOut; }
#line 8268 "asmparse.cpp.tab.c"
break;
case 320:
  if (!yytrial)
#line 857 "asmparse.y"
{ yyval.int32 = yyvsp[-3].int32 | pdOptional; }
#line 8274 "asmparse.cpp.tab.c"
break;
case 321:
  if (!yytrial)
#line 858 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 + 1; }
#line 8280 "asmparse.cpp.tab.c"
break;
case 322:
  if (!yytrial)
#line 861 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (miIL | miManaged); }
#line 8286 "asmparse.cpp.tab.c"
break;
case 323:
  if (!yytrial)
#line 862 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFF4) | miNative); }
#line 8292 "asmparse.cpp.tab.c"
break;
case 324:
  if (!yytrial)
#line 863 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFF4) | miIL); }
#line 8298 "asmparse.cpp.tab.c"
break;
case 325:
  if (!yytrial)
#line 864 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFF4) | miOPTIL); }
#line 8304 "asmparse.cpp.tab.c"
break;
case 326:
  if (!yytrial)
#line 865 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFFB) | miManaged); }
#line 8310 "asmparse.cpp.tab.c"
break;
case 327:
  if (!yytrial)
#line 866 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFFB) | miUnmanaged); }
#line 8316 "asmparse.cpp.tab.c"
break;
case 328:
  if (!yytrial)
#line 867 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miForwardRef); }
#line 8322 "asmparse.cpp.tab.c"
break;
case 329:
  if (!yytrial)
#line 868 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miPreserveSig); }
#line 8328 "asmparse.cpp.tab.c"
break;
case 330:
  if (!yytrial)
#line 869 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miRuntime); }
#line 8334 "asmparse.cpp.tab.c"
break;
case 331:
  if (!yytrial)
#line 870 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miInternalCall); }
#line 8340 "asmparse.cpp.tab.c"
break;
case 332:
  if (!yytrial)
#line 871 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miSynchronized); }
#line 8346 "asmparse.cpp.tab.c"
break;
case 333:
  if (!yytrial)
#line 872 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miNoInlining); }
#line 8352 "asmparse.cpp.tab.c"
break;
case 334:
  if (!yytrial)
#line 873 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miAggressiveInlining); }
#line 8358 "asmparse.cpp.tab.c"
break;
case 335:
  if (!yytrial)
#line 874 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miNoOptimization); }
#line 8364 "asmparse.cpp.tab.c"
break;
case 336:
  if (!yytrial)
#line 875 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miAggressiveOptimization); }
#line 8370 "asmparse.cpp.tab.c"
break;
case 337:
  if (!yytrial)
#line 876 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].int32); }
#line 8376 "asmparse.cpp.tab.c"
break;
case 338:
  if (!yytrial)
#line 879 "asmparse.y"
{ PASM->delArgNameList(PASM->m_firstArgName); PASM->m_firstArgName = NULL;PASM->m_lastArgName = NULL;
                                                            }
#line 8383 "asmparse.cpp.tab.c"
break;
case 341:
  if (!yytrial)
#line 887 "asmparse.y"
{ PASM->EmitByte(yyvsp[0].int32); }
#line 8389 "asmparse.cpp.tab.c"
break;
case 342:
  if (!yytrial)
#line 888 "asmparse.y"
{ delete PASM->m_SEHD; PASM->m_SEHD = PASM->m_SEHDstack.POP(); }
#line 8395 "asmparse.cpp.tab.c"
break;
case 343:
  if (!yytrial)
#line 889 "asmparse.y"
{ PASM->EmitMaxStack(yyvsp[0].int32); }
#line 8401 "asmparse.cpp.tab.c"
break;
case 344:
  if (!yytrial)
#line 890 "asmparse.y"
{ PASM->EmitLocals(parser->MakeSig(IMAGE_CEE_CS_CALLCONV_LOCAL_SIG, 0, yyvsp[-1].binstr));
                                                            }
#line 8408 "asmparse.cpp.tab.c"
break;
case 345:
  if (!yytrial)
#line 892 "asmparse.y"
{ PASM->EmitZeroInit();
                                                              PASM->EmitLocals(parser->MakeSig(IMAGE_CEE_CS_CALLCONV_LOCAL_SIG, 0, yyvsp[-1].binstr));
                                                            }
#line 8416 "asmparse.cpp.tab.c"
break;
case 346:
  if (!yytrial)
#line 895 "asmparse.y"
{ PASM->EmitEntryPoint(); }
#line 8422 "asmparse.cpp.tab.c"
break;
case 347:
  if (!yytrial)
#line 896 "asmparse.y"
{ PASM->EmitZeroInit(); }
#line 8428 "asmparse.cpp.tab.c"
break;
case 350:
  if (!yytrial)
#line 899 "asmparse.y"
{ PASM->AddLabel(PASM->m_CurPC,yyvsp[-1].string); /*PASM->EmitLabel($1);*/ }
#line 8434 "asmparse.cpp.tab.c"
break;
case 356:
  if (!yytrial)
#line 905 "asmparse.y"
{ if(PASM->m_pCurMethod->m_dwExportOrdinal == 0xFFFFFFFF)
                                                              {
                                                                PASM->m_pCurMethod->m_dwExportOrdinal = yyvsp[-1].int32;
                                                                PASM->m_pCurMethod->m_szExportAlias = NULL;
                                                                if(PASM->m_pCurMethod->m_wVTEntry == 0) PASM->m_pCurMethod->m_wVTEntry = 1;
                                                                if(PASM->m_pCurMethod->m_wVTSlot  == 0) PASM->m_pCurMethod->m_wVTSlot = (WORD)(yyvsp[-1].int32 + 0x8000);
                                                              }
                                                              else
                                                                PASM->report->warn("Duplicate .export directive, ignored\n");
                                                            }
#line 8449 "asmparse.cpp.tab.c"
break;
case 357:
  if (!yytrial)
#line 915 "asmparse.y"
{ if(PASM->m_pCurMethod->m_dwExportOrdinal == 0xFFFFFFFF)
                                                              {
                                                                PASM->m_pCurMethod->m_dwExportOrdinal = yyvsp[-3].int32;
                                                                PASM->m_pCurMethod->m_szExportAlias = yyvsp[0].string;
                                                                if(PASM->m_pCurMethod->m_wVTEntry == 0) PASM->m_pCurMethod->m_wVTEntry = 1;
                                                                if(PASM->m_pCurMethod->m_wVTSlot  == 0) PASM->m_pCurMethod->m_wVTSlot = (WORD)(yyvsp[-3].int32 + 0x8000);
                                                              }
                                                              else
                                                                PASM->report->warn("Duplicate .export directive, ignored\n");
                                                            }
#line 8464 "asmparse.cpp.tab.c"
break;
case 358:
  if (!yytrial)
#line 925 "asmparse.y"
{ PASM->m_pCurMethod->m_wVTEntry = (WORD)yyvsp[-2].int32;
                                                              PASM->m_pCurMethod->m_wVTSlot = (WORD)yyvsp[0].int32; }
#line 8471 "asmparse.cpp.tab.c"
break;
case 359:
  if (!yytrial)
#line 928 "asmparse.y"
{ PASM->AddMethodImpl(yyvsp[-2].token,yyvsp[0].string,NULL,NULL,NULL,NULL); }
#line 8477 "asmparse.cpp.tab.c"
break;
case 360:
  if (!yytrial)
#line 931 "asmparse.y"
{ PASM->AddMethodImpl(yyvsp[-6].token,yyvsp[-4].string,
                                                              (yyvsp[-3].int32==0 ? parser->MakeSig(yyvsp[-8].int32,yyvsp[-7].binstr,yyvsp[-1].binstr) :
                                                              parser->MakeSig(yyvsp[-8].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yyvsp[-7].binstr,yyvsp[-1].binstr,yyvsp[-3].int32))
                                                              ,NULL,NULL,NULL);
                                                              PASM->ResetArgNameList();
                                                            }
#line 8488 "asmparse.cpp.tab.c"
break;
case 362:
  if (!yytrial)
#line 938 "asmparse.y"
{ if((yyvsp[-1].int32 > 0) && (yyvsp[-1].int32 <= (int)PASM->m_pCurMethod->m_NumTyPars))
                                                                PASM->m_pCustomDescrList = PASM->m_pCurMethod->m_TyPars[yyvsp[-1].int32-1].CAList();
                                                              else
                                                                PASM->report->error("Type parameter index out of range\n");
                                                            }
#line 8498 "asmparse.cpp.tab.c"
break;
case 363:
  if (!yytrial)
#line 943 "asmparse.y"
{ int n = PASM->m_pCurMethod->FindTyPar(yyvsp[0].string);
                                                              if(n >= 0)
                                                                PASM->m_pCustomDescrList = PASM->m_pCurMethod->m_TyPars[n].CAList();
                                                              else
                                                                PASM->report->error("Type parameter '%s' undefined\n",yyvsp[0].string);
                                                            }
#line 8509 "asmparse.cpp.tab.c"
break;
case 364:
  if (!yytrial)
#line 949 "asmparse.y"
{ PASM->m_pCurMethod->AddGenericParamConstraint(yyvsp[-3].int32, 0, yyvsp[0].token); }
#line 8515 "asmparse.cpp.tab.c"
break;
case 365:
  if (!yytrial)
#line 950 "asmparse.y"
{ PASM->m_pCurMethod->AddGenericParamConstraint(0, yyvsp[-2].string, yyvsp[0].token); }
#line 8521 "asmparse.cpp.tab.c"
break;
case 366:
  if (!yytrial)
#line 953 "asmparse.y"
{ if( yyvsp[-2].int32 ) {
                                                                ARG_NAME_LIST* pAN=PASM->findArg(PASM->m_pCurMethod->m_firstArgName, yyvsp[-2].int32 - 1);
                                                                if(pAN)
                                                                {
                                                                    PASM->m_pCustomDescrList = &(pAN->CustDList);
                                                                    pAN->pValue = yyvsp[0].binstr;
                                                                }
                                                                else
                                                                {
                                                                    PASM->m_pCustomDescrList = NULL;
                                                                    if(yyvsp[0].binstr) delete yyvsp[0].binstr;
                                                                }
                                                              } else {
                                                                PASM->m_pCustomDescrList = &(PASM->m_pCurMethod->m_RetCustDList);
                                                                PASM->m_pCurMethod->m_pRetValue = yyvsp[0].binstr;
                                                              }
                                                              PASM->m_tkCurrentCVOwner = 0;
                                                            }
#line 8544 "asmparse.cpp.tab.c"
break;
case 367:
  if (!yytrial)
#line 973 "asmparse.y"
{ PASM->m_pCurMethod->CloseScope(); }
#line 8550 "asmparse.cpp.tab.c"
break;
case 368:
  if (!yytrial)
#line 976 "asmparse.y"
{ PASM->m_pCurMethod->OpenScope(); }
#line 8556 "asmparse.cpp.tab.c"
break;
case 372:
  if (!yytrial)
#line 987 "asmparse.y"
{ PASM->m_SEHD->tryTo = PASM->m_CurPC; }
#line 8562 "asmparse.cpp.tab.c"
break;
case 373:
  if (!yytrial)
#line 988 "asmparse.y"
{ PASM->SetTryLabels(yyvsp[-2].string, yyvsp[0].string); }
#line 8568 "asmparse.cpp.tab.c"
break;
case 374:
  if (!yytrial)
#line 989 "asmparse.y"
{ if(PASM->m_SEHD) {PASM->m_SEHD->tryFrom = yyvsp[-2].int32;
                                                              PASM->m_SEHD->tryTo = yyvsp[0].int32;} }
#line 8575 "asmparse.cpp.tab.c"
break;
case 375:
  if (!yytrial)
#line 993 "asmparse.y"
{ PASM->NewSEHDescriptor();
                                                              PASM->m_SEHD->tryFrom = PASM->m_CurPC; }
#line 8582 "asmparse.cpp.tab.c"
break;
case 376:
  if (!yytrial)
#line 998 "asmparse.y"
{ PASM->EmitTry(); }
#line 8588 "asmparse.cpp.tab.c"
break;
case 377:
  if (!yytrial)
#line 999 "asmparse.y"
{ PASM->EmitTry(); }
#line 8594 "asmparse.cpp.tab.c"
break;
case 378:
  if (!yytrial)
#line 1000 "asmparse.y"
{ PASM->EmitTry(); }
#line 8600 "asmparse.cpp.tab.c"
break;
case 379:
  if (!yytrial)
#line 1001 "asmparse.y"
{ PASM->EmitTry(); }
#line 8606 "asmparse.cpp.tab.c"
break;
case 380:
  if (!yytrial)
#line 1005 "asmparse.y"
{ PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8612 "asmparse.cpp.tab.c"
break;
case 381:
  if (!yytrial)
#line 1006 "asmparse.y"
{ PASM->SetFilterLabel(yyvsp[0].string);
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8619 "asmparse.cpp.tab.c"
break;
case 382:
  if (!yytrial)
#line 1008 "asmparse.y"
{ PASM->m_SEHD->sehFilter = yyvsp[0].int32;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8626 "asmparse.cpp.tab.c"
break;
case 383:
  if (!yytrial)
#line 1012 "asmparse.y"
{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FILTER;
                                                               PASM->m_SEHD->sehFilter = PASM->m_CurPC; }
#line 8633 "asmparse.cpp.tab.c"
break;
case 384:
  if (!yytrial)
#line 1016 "asmparse.y"
{  PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_NONE;
                                                               PASM->SetCatchClass(yyvsp[0].token);
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8641 "asmparse.cpp.tab.c"
break;
case 385:
  if (!yytrial)
#line 1021 "asmparse.y"
{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FINALLY;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8648 "asmparse.cpp.tab.c"
break;
case 386:
  if (!yytrial)
#line 1025 "asmparse.y"
{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FAULT;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8655 "asmparse.cpp.tab.c"
break;
case 387:
  if (!yytrial)
#line 1029 "asmparse.y"
{ PASM->m_SEHD->sehHandlerTo = PASM->m_CurPC; }
#line 8661 "asmparse.cpp.tab.c"
break;
case 388:
  if (!yytrial)
#line 1030 "asmparse.y"
{ PASM->SetHandlerLabels(yyvsp[-2].string, yyvsp[0].string); }
#line 8667 "asmparse.cpp.tab.c"
break;
case 389:
  if (!yytrial)
#line 1031 "asmparse.y"
{ PASM->m_SEHD->sehHandler = yyvsp[-2].int32;
                                                               PASM->m_SEHD->sehHandlerTo = yyvsp[0].int32; }
#line 8674 "asmparse.cpp.tab.c"
break;
case 391:
  if (!yytrial)
#line 1039 "asmparse.y"
{ PASM->EmitDataLabel(yyvsp[-1].string); }
#line 8680 "asmparse.cpp.tab.c"
break;
case 393:
  if (!yytrial)
#line 1043 "asmparse.y"
{ PASM->SetDataSection(); }
#line 8686 "asmparse.cpp.tab.c"
break;
case 394:
  if (!yytrial)
#line 1044 "asmparse.y"
{ PASM->SetTLSSection(); }
#line 8692 "asmparse.cpp.tab.c"
break;
case 395:
  if (!yytrial)
#line 1045 "asmparse.y"
{ PASM->SetILSection(); }
#line 8698 "asmparse.cpp.tab.c"
break;
case 400:
  if (!yytrial)
#line 1056 "asmparse.y"
{ yyval.int32 = 1; }
#line 8704 "asmparse.cpp.tab.c"
break;
case 401:
  if (!yytrial)
#line 1057 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32;
                                                               if(yyvsp[-1].int32 <= 0) { PASM->report->error("Illegal item count: %d\n",yyvsp[-1].int32);
                                                                  if(!PASM->OnErrGo) yyval.int32 = 1; }}
#line 8712 "asmparse.cpp.tab.c"
break;
case 402:
  if (!yytrial)
#line 1062 "asmparse.y"
{ PASM->EmitDataString(yyvsp[-1].binstr); }
#line 8718 "asmparse.cpp.tab.c"
break;
case 403:
  if (!yytrial)
#line 1063 "asmparse.y"
{ PASM->EmitDD(yyvsp[-1].string); }
#line 8724 "asmparse.cpp.tab.c"
break;
case 404:
  if (!yytrial)
#line 1064 "asmparse.y"
{ PASM->EmitData(yyvsp[-1].binstr->ptr(),yyvsp[-1].binstr->length()); }
#line 8730 "asmparse.cpp.tab.c"
break;
case 405:
  if (!yytrial)
#line 1066 "asmparse.y"
{ float f = (float) (*yyvsp[-2].float64); float* p = new (nothrow) float[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i < yyvsp[0].int32; i++) p[i] = f;
                                                                 PASM->EmitData(p, sizeof(float)*yyvsp[0].int32); delete yyvsp[-2].float64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(float)*yyvsp[0].int32); }
#line 8741 "asmparse.cpp.tab.c"
break;
case 406:
  if (!yytrial)
#line 1073 "asmparse.y"
{ double* p = new (nothrow) double[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yyvsp[0].int32; i++) p[i] = *(yyvsp[-2].float64);
                                                                 PASM->EmitData(p, sizeof(double)*yyvsp[0].int32); delete yyvsp[-2].float64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(double)*yyvsp[0].int32); }
#line 8752 "asmparse.cpp.tab.c"
break;
case 407:
  if (!yytrial)
#line 1080 "asmparse.y"
{ __int64* p = new (nothrow) __int64[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yyvsp[0].int32; i++) p[i] = *(yyvsp[-2].int64);
                                                                 PASM->EmitData(p, sizeof(__int64)*yyvsp[0].int32); delete yyvsp[-2].int64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int64)*yyvsp[0].int32); }
#line 8763 "asmparse.cpp.tab.c"
break;
case 408:
  if (!yytrial)
#line 1087 "asmparse.y"
{ __int32* p = new (nothrow) __int32[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yyvsp[0].int32; i++) p[i] = yyvsp[-2].int32;
                                                                 PASM->EmitData(p, sizeof(__int32)*yyvsp[0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int32)*yyvsp[0].int32); }
#line 8774 "asmparse.cpp.tab.c"
break;
case 409:
  if (!yytrial)
#line 1094 "asmparse.y"
{ __int16 i = (__int16) yyvsp[-2].int32; FAIL_UNLESS(i == yyvsp[-2].int32, ("Value %d too big\n", yyvsp[-2].int32));
                                                               __int16* p = new (nothrow) __int16[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int j=0; j<yyvsp[0].int32; j++) p[j] = i;
                                                                 PASM->EmitData(p, sizeof(__int16)*yyvsp[0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int16)*yyvsp[0].int32); }
#line 8786 "asmparse.cpp.tab.c"
break;
case 410:
  if (!yytrial)
#line 1102 "asmparse.y"
{ __int8 i = (__int8) yyvsp[-2].int32; FAIL_UNLESS(i == yyvsp[-2].int32, ("Value %d too big\n", yyvsp[-2].int32));
                                                               __int8* p = new (nothrow) __int8[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int j=0; j<yyvsp[0].int32; j++) p[j] = i;
                                                                 PASM->EmitData(p, sizeof(__int8)*yyvsp[0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int8)*yyvsp[0].int32); }
#line 8798 "asmparse.cpp.tab.c"
break;
case 411:
  if (!yytrial)
#line 1109 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(float)*yyvsp[0].int32); }
#line 8804 "asmparse.cpp.tab.c"
break;
case 412:
  if (!yytrial)
#line 1110 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(double)*yyvsp[0].int32); }
#line 8810 "asmparse.cpp.tab.c"
break;
case 413:
  if (!yytrial)
#line 1111 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int64)*yyvsp[0].int32); }
#line 8816 "asmparse.cpp.tab.c"
break;
case 414:
  if (!yytrial)
#line 1112 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int32)*yyvsp[0].int32); }
#line 8822 "asmparse.cpp.tab.c"
break;
case 415:
  if (!yytrial)
#line 1113 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int16)*yyvsp[0].int32); }
#line 8828 "asmparse.cpp.tab.c"
break;
case 416:
  if (!yytrial)
#line 1114 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int8)*yyvsp[0].int32); }
#line 8834 "asmparse.cpp.tab.c"
break;
case 417:
  if (!yytrial)
#line 1118 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               float f = (float)(*yyvsp[-1].float64);
                                                               yyval.binstr->appendInt32(*((__int32*)&f)); delete yyvsp[-1].float64; }
#line 8842 "asmparse.cpp.tab.c"
break;
case 418:
  if (!yytrial)
#line 1121 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].float64); delete yyvsp[-1].float64; }
#line 8849 "asmparse.cpp.tab.c"
break;
case 419:
  if (!yytrial)
#line 1123 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 8856 "asmparse.cpp.tab.c"
break;
case 420:
  if (!yytrial)
#line 1125 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 8863 "asmparse.cpp.tab.c"
break;
case 421:
  if (!yytrial)
#line 1127 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 8870 "asmparse.cpp.tab.c"
break;
case 422:
  if (!yytrial)
#line 1129 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 8877 "asmparse.cpp.tab.c"
break;
case 423:
  if (!yytrial)
#line 1131 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I2);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 8884 "asmparse.cpp.tab.c"
break;
case 424:
  if (!yytrial)
#line 1133 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I1);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32); }
#line 8891 "asmparse.cpp.tab.c"
break;
case 425:
  if (!yytrial)
#line 1135 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 8898 "asmparse.cpp.tab.c"
break;
case 426:
  if (!yytrial)
#line 1137 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 8905 "asmparse.cpp.tab.c"
break;
case 427:
  if (!yytrial)
#line 1139 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 8912 "asmparse.cpp.tab.c"
break;
case 428:
  if (!yytrial)
#line 1141 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32); }
#line 8919 "asmparse.cpp.tab.c"
break;
case 429:
  if (!yytrial)
#line 1143 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 8926 "asmparse.cpp.tab.c"
break;
case 430:
  if (!yytrial)
#line 1145 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 8933 "asmparse.cpp.tab.c"
break;
case 431:
  if (!yytrial)
#line 1147 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 8940 "asmparse.cpp.tab.c"
break;
case 432:
  if (!yytrial)
#line 1149 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32); }
#line 8947 "asmparse.cpp.tab.c"
break;
case 433:
  if (!yytrial)
#line 1151 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CHAR);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 8954 "asmparse.cpp.tab.c"
break;
case 434:
  if (!yytrial)
#line 1153 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_BOOLEAN);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32);}
#line 8961 "asmparse.cpp.tab.c"
break;
case 435:
  if (!yytrial)
#line 1155 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING);
                                                               yyval.binstr->append(yyvsp[-1].binstr); delete yyvsp[-1].binstr;}
#line 8968 "asmparse.cpp.tab.c"
break;
case 436:
  if (!yytrial)
#line 1159 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 8974 "asmparse.cpp.tab.c"
break;
case 437:
  if (!yytrial)
#line 1162 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8980 "asmparse.cpp.tab.c"
break;
case 438:
  if (!yytrial)
#line 1163 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 8986 "asmparse.cpp.tab.c"
break;
case 439:
  if (!yytrial)
#line 1166 "asmparse.y"
{ __int8 i = (__int8) yyvsp[0].int32; yyval.binstr = new BinStr(); yyval.binstr->appendInt8(i); }
#line 8992 "asmparse.cpp.tab.c"
break;
case 440:
  if (!yytrial)
#line 1167 "asmparse.y"
{ __int8 i = (__int8) yyvsp[0].int32; yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt8(i); }
#line 8998 "asmparse.cpp.tab.c"
break;
case 441:
  if (!yytrial)
#line 1171 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 9004 "asmparse.cpp.tab.c"
break;
case 442:
  if (!yytrial)
#line 1172 "asmparse.y"
{ yyval.binstr = BinStrToUnicode(yyvsp[0].binstr,true); yyval.binstr->insertInt8(ELEMENT_TYPE_STRING);}
#line 9010 "asmparse.cpp.tab.c"
break;
case 443:
  if (!yytrial)
#line 1173 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CLASS);
                                                               yyval.binstr->appendInt32(0); }
#line 9017 "asmparse.cpp.tab.c"
break;
case 444:
  if (!yytrial)
#line 1178 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 9023 "asmparse.cpp.tab.c"
break;
case 445:
  if (!yytrial)
#line 1179 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); yyval.binstr->appendInt8(0xFF); }
#line 9029 "asmparse.cpp.tab.c"
break;
case 446:
  if (!yytrial)
#line 1180 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING);
                                                               AppendStringWithLength(yyval.binstr,yyvsp[-1].string); delete [] yyvsp[-1].string;}
#line 9036 "asmparse.cpp.tab.c"
break;
case 447:
  if (!yytrial)
#line 1182 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE);
                                                               AppendStringWithLength(yyval.binstr,yyvsp[-1].string); delete [] yyvsp[-1].string;}
#line 9043 "asmparse.cpp.tab.c"
break;
case 448:
  if (!yytrial)
#line 1184 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE);
                                                               AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yyvsp[-1].token));}
#line 9050 "asmparse.cpp.tab.c"
break;
case 449:
  if (!yytrial)
#line 1186 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE); yyval.binstr->appendInt8(0xFF); }
#line 9056 "asmparse.cpp.tab.c"
break;
case 450:
  if (!yytrial)
#line 1187 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(SERIALIZATION_TYPE_TAGGED_OBJECT);}
#line 9062 "asmparse.cpp.tab.c"
break;
case 451:
  if (!yytrial)
#line 1189 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_R4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9070 "asmparse.cpp.tab.c"
break;
case 452:
  if (!yytrial)
#line 1193 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9078 "asmparse.cpp.tab.c"
break;
case 453:
  if (!yytrial)
#line 1197 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9086 "asmparse.cpp.tab.c"
break;
case 454:
  if (!yytrial)
#line 1201 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9094 "asmparse.cpp.tab.c"
break;
case 455:
  if (!yytrial)
#line 1205 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9102 "asmparse.cpp.tab.c"
break;
case 456:
  if (!yytrial)
#line 1209 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9110 "asmparse.cpp.tab.c"
break;
case 457:
  if (!yytrial)
#line 1213 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9118 "asmparse.cpp.tab.c"
break;
case 458:
  if (!yytrial)
#line 1217 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9126 "asmparse.cpp.tab.c"
break;
case 459:
  if (!yytrial)
#line 1221 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9134 "asmparse.cpp.tab.c"
break;
case 460:
  if (!yytrial)
#line 1225 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9142 "asmparse.cpp.tab.c"
break;
case 461:
  if (!yytrial)
#line 1229 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9150 "asmparse.cpp.tab.c"
break;
case 462:
  if (!yytrial)
#line 1233 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9158 "asmparse.cpp.tab.c"
break;
case 463:
  if (!yytrial)
#line 1237 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9166 "asmparse.cpp.tab.c"
break;
case 464:
  if (!yytrial)
#line 1241 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9174 "asmparse.cpp.tab.c"
break;
case 465:
  if (!yytrial)
#line 1245 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_CHAR);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9182 "asmparse.cpp.tab.c"
break;
case 466:
  if (!yytrial)
#line 1249 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_BOOLEAN);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9190 "asmparse.cpp.tab.c"
break;
case 467:
  if (!yytrial)
#line 1253 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_STRING);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9198 "asmparse.cpp.tab.c"
break;
case 468:
  if (!yytrial)
#line 1257 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(SERIALIZATION_TYPE_TYPE);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9206 "asmparse.cpp.tab.c"
break;
case 469:
  if (!yytrial)
#line 1261 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(SERIALIZATION_TYPE_TAGGED_OBJECT);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9214 "asmparse.cpp.tab.c"
break;
case 470:
  if (!yytrial)
#line 1267 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9220 "asmparse.cpp.tab.c"
break;
case 471:
  if (!yytrial)
#line 1268 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               float f = (float) (*yyvsp[0].float64); yyval.binstr->appendInt32(*((__int32*)&f)); delete yyvsp[0].float64; }
#line 9227 "asmparse.cpp.tab.c"
break;
case 472:
  if (!yytrial)
#line 1270 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt32(yyvsp[0].int32); }
#line 9234 "asmparse.cpp.tab.c"
break;
case 473:
  if (!yytrial)
#line 1274 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9240 "asmparse.cpp.tab.c"
break;
case 474:
  if (!yytrial)
#line 1275 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[0].float64); delete yyvsp[0].float64; }
#line 9247 "asmparse.cpp.tab.c"
break;
case 475:
  if (!yytrial)
#line 1277 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[0].int64); delete yyvsp[0].int64; }
#line 9254 "asmparse.cpp.tab.c"
break;
case 476:
  if (!yytrial)
#line 1281 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9260 "asmparse.cpp.tab.c"
break;
case 477:
  if (!yytrial)
#line 1282 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[0].int64); delete yyvsp[0].int64; }
#line 9267 "asmparse.cpp.tab.c"
break;
case 478:
  if (!yytrial)
#line 1286 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9273 "asmparse.cpp.tab.c"
break;
case 479:
  if (!yytrial)
#line 1287 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt32(yyvsp[0].int32);}
#line 9279 "asmparse.cpp.tab.c"
break;
case 480:
  if (!yytrial)
#line 1290 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9285 "asmparse.cpp.tab.c"
break;
case 481:
  if (!yytrial)
#line 1291 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt16(yyvsp[0].int32);}
#line 9291 "asmparse.cpp.tab.c"
break;
case 482:
  if (!yytrial)
#line 1294 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9297 "asmparse.cpp.tab.c"
break;
case 483:
  if (!yytrial)
#line 1295 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt8(yyvsp[0].int32); }
#line 9303 "asmparse.cpp.tab.c"
break;
case 484:
  if (!yytrial)
#line 1298 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9309 "asmparse.cpp.tab.c"
break;
case 485:
  if (!yytrial)
#line 1299 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt8(yyvsp[0].int32);}
#line 9316 "asmparse.cpp.tab.c"
break;
case 486:
  if (!yytrial)
#line 1303 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9322 "asmparse.cpp.tab.c"
break;
case 487:
  if (!yytrial)
#line 1304 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt8(0xFF); }
#line 9328 "asmparse.cpp.tab.c"
break;
case 488:
  if (!yytrial)
#line 1305 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               AppendStringWithLength(yyval.binstr,yyvsp[0].string); delete [] yyvsp[0].string;}
#line 9335 "asmparse.cpp.tab.c"
break;
case 489:
  if (!yytrial)
#line 1309 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9341 "asmparse.cpp.tab.c"
break;
case 490:
  if (!yytrial)
#line 1310 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt8(0xFF); }
#line 9347 "asmparse.cpp.tab.c"
break;
case 491:
  if (!yytrial)
#line 1311 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr;
                                                               AppendStringWithLength(yyval.binstr,yyvsp[0].string); delete [] yyvsp[0].string;}
#line 9354 "asmparse.cpp.tab.c"
break;
case 492:
  if (!yytrial)
#line 1313 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yyvsp[0].token));}
#line 9361 "asmparse.cpp.tab.c"
break;
case 493:
  if (!yytrial)
#line 1317 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9367 "asmparse.cpp.tab.c"
break;
case 494:
  if (!yytrial)
#line 1318 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 9373 "asmparse.cpp.tab.c"
break;
case 495:
  if (!yytrial)
#line 1322 "asmparse.y"
{ parser->m_ANSFirst.PUSH(PASM->m_firstArgName);
                                                               parser->m_ANSLast.PUSH(PASM->m_lastArgName);
                                                               PASM->m_firstArgName = NULL;
                                                               PASM->m_lastArgName = NULL; }
#line 9382 "asmparse.cpp.tab.c"
break;
case 496:
  if (!yytrial)
#line 1328 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9388 "asmparse.cpp.tab.c"
break;
case 497:
  if (!yytrial)
#line 1331 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9394 "asmparse.cpp.tab.c"
break;
case 498:
  if (!yytrial)
#line 1334 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9400 "asmparse.cpp.tab.c"
break;
case 499:
  if (!yytrial)
#line 1337 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9406 "asmparse.cpp.tab.c"
break;
case 500:
  if (!yytrial)
#line 1340 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9412 "asmparse.cpp.tab.c"
break;
case 501:
  if (!yytrial)
#line 1343 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9418 "asmparse.cpp.tab.c"
break;
case 502:
  if (!yytrial)
#line 1346 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9424 "asmparse.cpp.tab.c"
break;
case 503:
  if (!yytrial)
#line 1349 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode);
                                                               if((!PASM->OnErrGo)&&
                                                               ((yyvsp[0].opcode == CEE_NEWOBJ)||
                                                                (yyvsp[0].opcode == CEE_CALLVIRT)))
                                                                  iCallConv = IMAGE_CEE_CS_CALLCONV_HASTHIS;
                                                             }
#line 9435 "asmparse.cpp.tab.c"
break;
case 504:
  if (!yytrial)
#line 1357 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9441 "asmparse.cpp.tab.c"
break;
case 505:
  if (!yytrial)
#line 1360 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9447 "asmparse.cpp.tab.c"
break;
case 506:
  if (!yytrial)
#line 1363 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9453 "asmparse.cpp.tab.c"
break;
case 507:
  if (!yytrial)
#line 1366 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9459 "asmparse.cpp.tab.c"
break;
case 508:
  if (!yytrial)
#line 1369 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); iOpcodeLen = PASM->OpcodeLen(yyval.instr); }
#line 9465 "asmparse.cpp.tab.c"
break;
case 509:
  if (!yytrial)
#line 1372 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9471 "asmparse.cpp.tab.c"
break;
case 510:
  if (!yytrial)
#line 1375 "asmparse.y"
{ yyval.instr = yyvsp[-1].instr; bParsingByteArray = TRUE; }
#line 9477 "asmparse.cpp.tab.c"
break;
case 511:
  if (!yytrial)
#line 1379 "asmparse.y"
{ PASM->EmitOpcode(yyvsp[0].instr); }
#line 9483 "asmparse.cpp.tab.c"
break;
case 512:
  if (!yytrial)
#line 1380 "asmparse.y"
{ PASM->EmitInstrVar(yyvsp[-1].instr, yyvsp[0].int32); }
#line 9489 "asmparse.cpp.tab.c"
break;
case 513:
  if (!yytrial)
#line 1381 "asmparse.y"
{ PASM->EmitInstrVarByName(yyvsp[-1].instr, yyvsp[0].string); }
#line 9495 "asmparse.cpp.tab.c"
break;
case 514:
  if (!yytrial)
#line 1382 "asmparse.y"
{ PASM->EmitInstrTypeVar(yyvsp[-2].instr, ELEMENT_TYPE_CVAR, yyvsp[0].int32); }
#line 9501 "asmparse.cpp.tab.c"
break;
case 515:
  if (!yytrial)
#line 1383 "asmparse.y"
{ PASM->EmitInstrTypeVarByName(yyvsp[-2].instr, ELEMENT_TYPE_CVAR, yyvsp[0].string); }
#line 9507 "asmparse.cpp.tab.c"
break;
case 516:
  if (!yytrial)
#line 1384 "asmparse.y"
{ PASM->EmitInstrTypeVar(yyvsp[-3].instr, ELEMENT_TYPE_MCVAR, yyvsp[0].int32); }
#line 9513 "asmparse.cpp.tab.c"
break;
case 517:
  if (!yytrial)
#line 1385 "asmparse.y"
{ PASM->EmitInstrTypeVarByName(yyvsp[-3].instr, ELEMENT_TYPE_MCVAR, yyvsp[0].string); }
#line 9519 "asmparse.cpp.tab.c"
break;
case 518:
  if (!yytrial)
#line 1386 "asmparse.y"
{ PASM->EmitInstrI(yyvsp[-1].instr, yyvsp[0].int32); }
#line 9525 "asmparse.cpp.tab.c"
break;
case 519:
  if (!yytrial)
#line 1387 "asmparse.y"
{ PASM->EmitInstrI8(yyvsp[-1].instr, yyvsp[0].int64); }
#line 9531 "asmparse.cpp.tab.c"
break;
case 520:
  if (!yytrial)
#line 1388 "asmparse.y"
{ PASM->EmitInstrR(yyvsp[-1].instr, yyvsp[0].float64); delete (yyvsp[0].float64);}
#line 9537 "asmparse.cpp.tab.c"
break;
case 521:
  if (!yytrial)
#line 1389 "asmparse.y"
{ double f = (double) (*yyvsp[0].int64); PASM->EmitInstrR(yyvsp[-1].instr, &f); }
#line 9543 "asmparse.cpp.tab.c"
break;
case 522:
  if (!yytrial)
#line 1390 "asmparse.y"
{ unsigned L = yyvsp[-1].binstr->length();
                                                               FAIL_UNLESS(L >= sizeof(float), ("%d hexbytes, must be at least %d\n",
                                                                           L,sizeof(float)));
                                                               if(L < sizeof(float)) {YYERROR; }
                                                               else {
                                                                   double f = (L >= sizeof(double)) ? *((double *)(yyvsp[-1].binstr->ptr()))
                                                                                    : (double)(*(float *)(yyvsp[-1].binstr->ptr()));
                                                                   PASM->EmitInstrR(yyvsp[-2].instr,&f); }
                                                               delete yyvsp[-1].binstr; }
#line 9557 "asmparse.cpp.tab.c"
break;
case 523:
  if (!yytrial)
#line 1399 "asmparse.y"
{ PASM->EmitInstrBrOffset(yyvsp[-1].instr, yyvsp[0].int32); }
#line 9563 "asmparse.cpp.tab.c"
break;
case 524:
  if (!yytrial)
#line 1400 "asmparse.y"
{ PASM->EmitInstrBrTarget(yyvsp[-1].instr, yyvsp[0].string); }
#line 9569 "asmparse.cpp.tab.c"
break;
case 525:
  if (!yytrial)
#line 1402 "asmparse.y"
{ PASM->SetMemberRefFixup(yyvsp[0].token,PASM->OpcodeLen(yyvsp[-1].instr));
                                                               PASM->EmitInstrI(yyvsp[-1].instr,yyvsp[0].token);
                                                               PASM->m_tkCurrentCVOwner = yyvsp[0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                               iCallConv = 0;
                                                             }
#line 9580 "asmparse.cpp.tab.c"
break;
case 526:
  if (!yytrial)
#line 1409 "asmparse.y"
{ yyvsp[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               mdToken mr = PASM->MakeMemberRef(yyvsp[-2].token, yyvsp[0].string, yyvsp[-3].binstr);
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-4].instr));
                                                               PASM->EmitInstrI(yyvsp[-4].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9592 "asmparse.cpp.tab.c"
break;
case 527:
  if (!yytrial)
#line 1417 "asmparse.y"
{ yyvsp[-1].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               mdToken mr = PASM->MakeMemberRef(mdTokenNil, yyvsp[0].string, yyvsp[-1].binstr);
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-2].instr));
                                                               PASM->EmitInstrI(yyvsp[-2].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9604 "asmparse.cpp.tab.c"
break;
case 528:
  if (!yytrial)
#line 1424 "asmparse.y"
{ mdToken mr = yyvsp[0].token;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-1].instr));
                                                               PASM->EmitInstrI(yyvsp[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9615 "asmparse.cpp.tab.c"
break;
case 529:
  if (!yytrial)
#line 1430 "asmparse.y"
{ mdToken mr = yyvsp[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-1].instr));
                                                               PASM->EmitInstrI(yyvsp[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9626 "asmparse.cpp.tab.c"
break;
case 530:
  if (!yytrial)
#line 1436 "asmparse.y"
{ mdToken mr = yyvsp[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-1].instr));
                                                               PASM->EmitInstrI(yyvsp[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9637 "asmparse.cpp.tab.c"
break;
case 531:
  if (!yytrial)
#line 1442 "asmparse.y"
{ PASM->EmitInstrI(yyvsp[-1].instr, yyvsp[0].token);
                                                               PASM->m_tkCurrentCVOwner = yyvsp[0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9646 "asmparse.cpp.tab.c"
break;
case 532:
  if (!yytrial)
#line 1446 "asmparse.y"
{ PASM->EmitInstrStringLiteral(yyvsp[-1].instr, yyvsp[0].binstr,TRUE); }
#line 9652 "asmparse.cpp.tab.c"
break;
case 533:
  if (!yytrial)
#line 1448 "asmparse.y"
{ PASM->EmitInstrStringLiteral(yyvsp[-4].instr, yyvsp[-1].binstr,FALSE); }
#line 9658 "asmparse.cpp.tab.c"
break;
case 534:
  if (!yytrial)
#line 1450 "asmparse.y"
{ PASM->EmitInstrStringLiteral(yyvsp[-3].instr, yyvsp[-1].binstr,FALSE,TRUE); }
#line 9664 "asmparse.cpp.tab.c"
break;
case 535:
  if (!yytrial)
#line 1452 "asmparse.y"
{ PASM->EmitInstrSig(yyvsp[-5].instr, parser->MakeSig(yyvsp[-4].int32, yyvsp[-3].binstr, yyvsp[-1].binstr));
                                                               PASM->ResetArgNameList();
                                                             }
#line 9672 "asmparse.cpp.tab.c"
break;
case 536:
  if (!yytrial)
#line 1456 "asmparse.y"
{ PASM->EmitInstrI(yyvsp[-1].instr,yyvsp[0].token);
                                                               PASM->m_tkCurrentCVOwner = yyvsp[0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                               iOpcodeLen = 0;
                                                             }
#line 9682 "asmparse.cpp.tab.c"
break;
case 537:
  if (!yytrial)
#line 1461 "asmparse.y"
{ PASM->EmitInstrSwitch(yyvsp[-3].instr, yyvsp[-1].labels); }
#line 9688 "asmparse.cpp.tab.c"
break;
case 538:
  if (!yytrial)
#line 1464 "asmparse.y"
{ yyval.labels = 0; }
#line 9694 "asmparse.cpp.tab.c"
break;
case 539:
  if (!yytrial)
#line 1465 "asmparse.y"
{ yyval.labels = new Labels(yyvsp[-2].string, yyvsp[0].labels, TRUE); }
#line 9700 "asmparse.cpp.tab.c"
break;
case 540:
  if (!yytrial)
#line 1466 "asmparse.y"
{ yyval.labels = new Labels((char *)(UINT_PTR)yyvsp[-2].int32, yyvsp[0].labels, FALSE); }
#line 9706 "asmparse.cpp.tab.c"
break;
case 541:
  if (!yytrial)
#line 1467 "asmparse.y"
{ yyval.labels = new Labels(yyvsp[0].string, NULL, TRUE); }
#line 9712 "asmparse.cpp.tab.c"
break;
case 542:
  if (!yytrial)
#line 1468 "asmparse.y"
{ yyval.labels = new Labels((char *)(UINT_PTR)yyvsp[0].int32, NULL, FALSE); }
#line 9718 "asmparse.cpp.tab.c"
break;
case 543:
  if (!yytrial)
#line 1472 "asmparse.y"
{ yyval.binstr = NULL; }
#line 9724 "asmparse.cpp.tab.c"
break;
case 544:
  if (!yytrial)
#line 1473 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 9730 "asmparse.cpp.tab.c"
break;
case 545:
  if (!yytrial)
#line 1476 "asmparse.y"
{ yyval.binstr = NULL; }
#line 9736 "asmparse.cpp.tab.c"
break;
case 546:
  if (!yytrial)
#line 1477 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 9742 "asmparse.cpp.tab.c"
break;
case 547:
  if (!yytrial)
#line 1480 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 9748 "asmparse.cpp.tab.c"
break;
case 548:
  if (!yytrial)
#line 1481 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 9754 "asmparse.cpp.tab.c"
break;
case 549:
  if (!yytrial)
#line 1485 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9760 "asmparse.cpp.tab.c"
break;
case 550:
  if (!yytrial)
#line 1486 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr;}
#line 9766 "asmparse.cpp.tab.c"
break;
case 551:
  if (!yytrial)
#line 1489 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 9772 "asmparse.cpp.tab.c"
break;
case 552:
  if (!yytrial)
#line 1490 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 9778 "asmparse.cpp.tab.c"
break;
case 553:
  if (!yytrial)
#line 1493 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_SENTINEL); }
#line 9784 "asmparse.cpp.tab.c"
break;
case 554:
  if (!yytrial)
#line 1494 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yyvsp[-1].binstr); PASM->addArgName(NULL, yyvsp[-1].binstr, yyvsp[0].binstr, yyvsp[-2].int32); }
#line 9790 "asmparse.cpp.tab.c"
break;
case 555:
  if (!yytrial)
#line 1495 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yyvsp[-2].binstr); PASM->addArgName(yyvsp[0].string, yyvsp[-2].binstr, yyvsp[-1].binstr, yyvsp[-3].int32);}
#line 9796 "asmparse.cpp.tab.c"
break;
case 556:
  if (!yytrial)
#line 1499 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(PASM->GetAsmRef(yyvsp[-2].string), yyvsp[0].string, NULL); delete[] yyvsp[-2].string;}
#line 9802 "asmparse.cpp.tab.c"
break;
case 557:
  if (!yytrial)
#line 1500 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(yyvsp[-2].token, yyvsp[0].string, NULL); }
#line 9808 "asmparse.cpp.tab.c"
break;
case 558:
  if (!yytrial)
#line 1501 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(mdTokenNil, yyvsp[0].string, NULL); }
#line 9814 "asmparse.cpp.tab.c"
break;
case 559:
  if (!yytrial)
#line 1502 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(PASM->GetModRef(yyvsp[-2].string),yyvsp[0].string, NULL); delete[] yyvsp[-2].string;}
#line 9820 "asmparse.cpp.tab.c"
break;
case 560:
  if (!yytrial)
#line 1503 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(1,yyvsp[0].string,NULL); }
#line 9826 "asmparse.cpp.tab.c"
break;
case 561:
  if (!yytrial)
#line 1504 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 9832 "asmparse.cpp.tab.c"
break;
case 562:
  if (!yytrial)
#line 1505 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec; }
#line 9838 "asmparse.cpp.tab.c"
break;
case 563:
  if (!yytrial)
#line 1506 "asmparse.y"
{ if(PASM->m_pCurClass != NULL) yyval.token = PASM->m_pCurClass->m_cl;
                                                                else { yyval.token = 0; PASM->report->error(".this outside class scope\n"); }
                                                              }
#line 9846 "asmparse.cpp.tab.c"
break;
case 564:
  if (!yytrial)
#line 1509 "asmparse.y"
{ if(PASM->m_pCurClass != NULL) {
                                                                  yyval.token = PASM->m_pCurClass->m_crExtends;
                                                                  if(RidFromToken(yyval.token) == 0)
                                                                    PASM->report->error(".base undefined\n");
                                                                } else { yyval.token = 0; PASM->report->error(".base outside class scope\n"); }
                                                              }
#line 9857 "asmparse.cpp.tab.c"
break;
case 565:
  if (!yytrial)
#line 1515 "asmparse.y"
{ if(PASM->m_pCurClass != NULL) {
                                                                  if(PASM->m_pCurClass->m_pEncloser != NULL) yyval.token = PASM->m_pCurClass->m_pEncloser->m_cl;
                                                                  else { yyval.token = 0; PASM->report->error(".nester undefined\n"); }
                                                                } else { yyval.token = 0; PASM->report->error(".nester outside class scope\n"); }
                                                              }
#line 9867 "asmparse.cpp.tab.c"
break;
case 566:
  if (!yytrial)
#line 1522 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 9873 "asmparse.cpp.tab.c"
break;
case 567:
  if (!yytrial)
#line 1523 "asmparse.y"
{ yyval.string = newStringWDel(yyvsp[-2].string, NESTING_SEP, yyvsp[0].string); }
#line 9879 "asmparse.cpp.tab.c"
break;
case 568:
  if (!yytrial)
#line 1526 "asmparse.y"
{ yyval.token = yyvsp[0].token;}
#line 9885 "asmparse.cpp.tab.c"
break;
case 569:
  if (!yytrial)
#line 1527 "asmparse.y"
{ yyval.token = PASM->GetAsmRef(yyvsp[-1].string); delete[] yyvsp[-1].string;}
#line 9891 "asmparse.cpp.tab.c"
break;
case 570:
  if (!yytrial)
#line 1528 "asmparse.y"
{ yyval.token = PASM->GetModRef(yyvsp[-1].string); delete[] yyvsp[-1].string;}
#line 9897 "asmparse.cpp.tab.c"
break;
case 571:
  if (!yytrial)
#line 1529 "asmparse.y"
{ yyval.token = PASM->ResolveTypeSpec(yyvsp[0].binstr); }
#line 9903 "asmparse.cpp.tab.c"
break;
case 572:
  if (!yytrial)
#line 1533 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9909 "asmparse.cpp.tab.c"
break;
case 573:
  if (!yytrial)
#line 1535 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CUSTOMMARSHALER);
                                                                corEmitInt(yyval.binstr,yyvsp[-7].binstr->length()); yyval.binstr->append(yyvsp[-7].binstr);
                                                                corEmitInt(yyval.binstr,yyvsp[-5].binstr->length()); yyval.binstr->append(yyvsp[-5].binstr);
                                                                corEmitInt(yyval.binstr,yyvsp[-3].binstr->length()); yyval.binstr->append(yyvsp[-3].binstr);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].binstr->length()); yyval.binstr->append(yyvsp[-1].binstr);
                                                                PASM->report->warn("Deprecated 4-string form of custom marshaler, first two strings ignored\n");}
#line 9920 "asmparse.cpp.tab.c"
break;
case 574:
  if (!yytrial)
#line 1542 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CUSTOMMARSHALER);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,yyvsp[-3].binstr->length()); yyval.binstr->append(yyvsp[-3].binstr);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].binstr->length()); yyval.binstr->append(yyvsp[-1].binstr); }
#line 9930 "asmparse.cpp.tab.c"
break;
case 575:
  if (!yytrial)
#line 1547 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FIXEDSYSSTRING);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].int32); }
#line 9937 "asmparse.cpp.tab.c"
break;
case 576:
  if (!yytrial)
#line 1550 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FIXEDARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[-2].int32); yyval.binstr->append(yyvsp[0].binstr); }
#line 9944 "asmparse.cpp.tab.c"
break;
case 577:
  if (!yytrial)
#line 1552 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VARIANT);
                                                                PASM->report->warn("Deprecated native type 'variant'\n"); }
#line 9951 "asmparse.cpp.tab.c"
break;
case 578:
  if (!yytrial)
#line 1554 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CURRENCY); }
#line 9957 "asmparse.cpp.tab.c"
break;
case 579:
  if (!yytrial)
#line 1555 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SYSCHAR);
                                                                PASM->report->warn("Deprecated native type 'syschar'\n"); }
#line 9964 "asmparse.cpp.tab.c"
break;
case 580:
  if (!yytrial)
#line 1557 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VOID);
                                                                PASM->report->warn("Deprecated native type 'void'\n"); }
#line 9971 "asmparse.cpp.tab.c"
break;
case 581:
  if (!yytrial)
#line 1559 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BOOLEAN); }
#line 9977 "asmparse.cpp.tab.c"
break;
case 582:
  if (!yytrial)
#line 1560 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I1); }
#line 9983 "asmparse.cpp.tab.c"
break;
case 583:
  if (!yytrial)
#line 1561 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I2); }
#line 9989 "asmparse.cpp.tab.c"
break;
case 584:
  if (!yytrial)
#line 1562 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I4); }
#line 9995 "asmparse.cpp.tab.c"
break;
case 585:
  if (!yytrial)
#line 1563 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I8); }
#line 10001 "asmparse.cpp.tab.c"
break;
case 586:
  if (!yytrial)
#line 1564 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_R4); }
#line 10007 "asmparse.cpp.tab.c"
break;
case 587:
  if (!yytrial)
#line 1565 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_R8); }
#line 10013 "asmparse.cpp.tab.c"
break;
case 588:
  if (!yytrial)
#line 1566 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ERROR); }
#line 10019 "asmparse.cpp.tab.c"
break;
case 589:
  if (!yytrial)
#line 1567 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U1); }
#line 10025 "asmparse.cpp.tab.c"
break;
case 590:
  if (!yytrial)
#line 1568 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U2); }
#line 10031 "asmparse.cpp.tab.c"
break;
case 591:
  if (!yytrial)
#line 1569 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U4); }
#line 10037 "asmparse.cpp.tab.c"
break;
case 592:
  if (!yytrial)
#line 1570 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U8); }
#line 10043 "asmparse.cpp.tab.c"
break;
case 593:
  if (!yytrial)
#line 1571 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U1); }
#line 10049 "asmparse.cpp.tab.c"
break;
case 594:
  if (!yytrial)
#line 1572 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U2); }
#line 10055 "asmparse.cpp.tab.c"
break;
case 595:
  if (!yytrial)
#line 1573 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U4); }
#line 10061 "asmparse.cpp.tab.c"
break;
case 596:
  if (!yytrial)
#line 1574 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U8); }
#line 10067 "asmparse.cpp.tab.c"
break;
case 597:
  if (!yytrial)
#line 1575 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(NATIVE_TYPE_PTR);
                                                                PASM->report->warn("Deprecated native type '*'\n"); }
#line 10074 "asmparse.cpp.tab.c"
break;
case 598:
  if (!yytrial)
#line 1577 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY); }
#line 10081 "asmparse.cpp.tab.c"
break;
case 599:
  if (!yytrial)
#line 1579 "asmparse.y"
{ yyval.binstr = yyvsp[-3].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].int32);
                                                                corEmitInt(yyval.binstr,0); }
#line 10091 "asmparse.cpp.tab.c"
break;
case 600:
  if (!yytrial)
#line 1584 "asmparse.y"
{ yyval.binstr = yyvsp[-5].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].int32);
                                                                corEmitInt(yyval.binstr,yyvsp[-3].int32);
                                                                corEmitInt(yyval.binstr,ntaSizeParamIndexSpecified); }
#line 10101 "asmparse.cpp.tab.c"
break;
case 601:
  if (!yytrial)
#line 1589 "asmparse.y"
{ yyval.binstr = yyvsp[-4].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].int32); }
#line 10109 "asmparse.cpp.tab.c"
break;
case 602:
  if (!yytrial)
#line 1592 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_DECIMAL);
                                                                PASM->report->warn("Deprecated native type 'decimal'\n"); }
#line 10116 "asmparse.cpp.tab.c"
break;
case 603:
  if (!yytrial)
#line 1594 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_DATE);
                                                                PASM->report->warn("Deprecated native type 'date'\n"); }
#line 10123 "asmparse.cpp.tab.c"
break;
case 604:
  if (!yytrial)
#line 1596 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BSTR); }
#line 10129 "asmparse.cpp.tab.c"
break;
case 605:
  if (!yytrial)
#line 1597 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPSTR); }
#line 10135 "asmparse.cpp.tab.c"
break;
case 606:
  if (!yytrial)
#line 1598 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPWSTR); }
#line 10141 "asmparse.cpp.tab.c"
break;
case 607:
  if (!yytrial)
#line 1599 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPTSTR); }
#line 10147 "asmparse.cpp.tab.c"
break;
case 608:
  if (!yytrial)
#line 1600 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_OBJECTREF);
                                                                PASM->report->warn("Deprecated native type 'objectref'\n"); }
#line 10154 "asmparse.cpp.tab.c"
break;
case 609:
  if (!yytrial)
#line 1602 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_IUNKNOWN);
                                                                if(yyvsp[0].int32 != -1) corEmitInt(yyval.binstr,yyvsp[0].int32); }
#line 10161 "asmparse.cpp.tab.c"
break;
case 610:
  if (!yytrial)
#line 1604 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_IDISPATCH);
                                                                if(yyvsp[0].int32 != -1) corEmitInt(yyval.binstr,yyvsp[0].int32); }
#line 10168 "asmparse.cpp.tab.c"
break;
case 611:
  if (!yytrial)
#line 1606 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_STRUCT); }
#line 10174 "asmparse.cpp.tab.c"
break;
case 612:
  if (!yytrial)
#line 1607 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_INTF);
                                                                if(yyvsp[0].int32 != -1) corEmitInt(yyval.binstr,yyvsp[0].int32); }
#line 10181 "asmparse.cpp.tab.c"
break;
case 613:
  if (!yytrial)
#line 1609 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SAFEARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[0].int32);
                                                                corEmitInt(yyval.binstr,0);}
#line 10189 "asmparse.cpp.tab.c"
break;
case 614:
  if (!yytrial)
#line 1612 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SAFEARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[-2].int32);
                                                                corEmitInt(yyval.binstr,yyvsp[0].binstr->length()); yyval.binstr->append(yyvsp[0].binstr); }
#line 10197 "asmparse.cpp.tab.c"
break;
case 615:
  if (!yytrial)
#line 1616 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_INT); }
#line 10203 "asmparse.cpp.tab.c"
break;
case 616:
  if (!yytrial)
#line 1617 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_UINT); }
#line 10209 "asmparse.cpp.tab.c"
break;
case 617:
  if (!yytrial)
#line 1618 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_UINT); }
#line 10215 "asmparse.cpp.tab.c"
break;
case 618:
  if (!yytrial)
#line 1619 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_NESTEDSTRUCT);
                                                                PASM->report->warn("Deprecated native type 'nested struct'\n"); }
#line 10222 "asmparse.cpp.tab.c"
break;
case 619:
  if (!yytrial)
#line 1621 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BYVALSTR); }
#line 10228 "asmparse.cpp.tab.c"
break;
case 620:
  if (!yytrial)
#line 1622 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ANSIBSTR); }
#line 10234 "asmparse.cpp.tab.c"
break;
case 621:
  if (!yytrial)
#line 1623 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_TBSTR); }
#line 10240 "asmparse.cpp.tab.c"
break;
case 622:
  if (!yytrial)
#line 1624 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VARIANTBOOL); }
#line 10246 "asmparse.cpp.tab.c"
break;
case 623:
  if (!yytrial)
#line 1625 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FUNC); }
#line 10252 "asmparse.cpp.tab.c"
break;
case 624:
  if (!yytrial)
#line 1626 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ASANY); }
#line 10258 "asmparse.cpp.tab.c"
break;
case 625:
  if (!yytrial)
#line 1627 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPSTRUCT); }
#line 10264 "asmparse.cpp.tab.c"
break;
case 626:
  if (!yytrial)
#line 1628 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yyvsp[0].tdd->m_pbsTypeSpec); }
#line 10270 "asmparse.cpp.tab.c"
break;
case 627:
  if (!yytrial)
#line 1631 "asmparse.y"
{ yyval.int32 = -1; }
#line 10276 "asmparse.cpp.tab.c"
break;
case 628:
  if (!yytrial)
#line 1632 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32; }
#line 10282 "asmparse.cpp.tab.c"
break;
case 629:
  if (!yytrial)
#line 1635 "asmparse.y"
{ yyval.int32 = VT_EMPTY; }
#line 10288 "asmparse.cpp.tab.c"
break;
case 630:
  if (!yytrial)
#line 1636 "asmparse.y"
{ yyval.int32 = VT_NULL; }
#line 10294 "asmparse.cpp.tab.c"
break;
case 631:
  if (!yytrial)
#line 1637 "asmparse.y"
{ yyval.int32 = VT_VARIANT; }
#line 10300 "asmparse.cpp.tab.c"
break;
case 632:
  if (!yytrial)
#line 1638 "asmparse.y"
{ yyval.int32 = VT_CY; }
#line 10306 "asmparse.cpp.tab.c"
break;
case 633:
  if (!yytrial)
#line 1639 "asmparse.y"
{ yyval.int32 = VT_VOID; }
#line 10312 "asmparse.cpp.tab.c"
break;
case 634:
  if (!yytrial)
#line 1640 "asmparse.y"
{ yyval.int32 = VT_BOOL; }
#line 10318 "asmparse.cpp.tab.c"
break;
case 635:
  if (!yytrial)
#line 1641 "asmparse.y"
{ yyval.int32 = VT_I1; }
#line 10324 "asmparse.cpp.tab.c"
break;
case 636:
  if (!yytrial)
#line 1642 "asmparse.y"
{ yyval.int32 = VT_I2; }
#line 10330 "asmparse.cpp.tab.c"
break;
case 637:
  if (!yytrial)
#line 1643 "asmparse.y"
{ yyval.int32 = VT_I4; }
#line 10336 "asmparse.cpp.tab.c"
break;
case 638:
  if (!yytrial)
#line 1644 "asmparse.y"
{ yyval.int32 = VT_I8; }
#line 10342 "asmparse.cpp.tab.c"
break;
case 639:
  if (!yytrial)
#line 1645 "asmparse.y"
{ yyval.int32 = VT_R4; }
#line 10348 "asmparse.cpp.tab.c"
break;
case 640:
  if (!yytrial)
#line 1646 "asmparse.y"
{ yyval.int32 = VT_R8; }
#line 10354 "asmparse.cpp.tab.c"
break;
case 641:
  if (!yytrial)
#line 1647 "asmparse.y"
{ yyval.int32 = VT_UI1; }
#line 10360 "asmparse.cpp.tab.c"
break;
case 642:
  if (!yytrial)
#line 1648 "asmparse.y"
{ yyval.int32 = VT_UI2; }
#line 10366 "asmparse.cpp.tab.c"
break;
case 643:
  if (!yytrial)
#line 1649 "asmparse.y"
{ yyval.int32 = VT_UI4; }
#line 10372 "asmparse.cpp.tab.c"
break;
case 644:
  if (!yytrial)
#line 1650 "asmparse.y"
{ yyval.int32 = VT_UI8; }
#line 10378 "asmparse.cpp.tab.c"
break;
case 645:
  if (!yytrial)
#line 1651 "asmparse.y"
{ yyval.int32 = VT_UI1; }
#line 10384 "asmparse.cpp.tab.c"
break;
case 646:
  if (!yytrial)
#line 1652 "asmparse.y"
{ yyval.int32 = VT_UI2; }
#line 10390 "asmparse.cpp.tab.c"
break;
case 647:
  if (!yytrial)
#line 1653 "asmparse.y"
{ yyval.int32 = VT_UI4; }
#line 10396 "asmparse.cpp.tab.c"
break;
case 648:
  if (!yytrial)
#line 1654 "asmparse.y"
{ yyval.int32 = VT_UI8; }
#line 10402 "asmparse.cpp.tab.c"
break;
case 649:
  if (!yytrial)
#line 1655 "asmparse.y"
{ yyval.int32 = VT_PTR; }
#line 10408 "asmparse.cpp.tab.c"
break;
case 650:
  if (!yytrial)
#line 1656 "asmparse.y"
{ yyval.int32 = yyvsp[-2].int32 | VT_ARRAY; }
#line 10414 "asmparse.cpp.tab.c"
break;
case 651:
  if (!yytrial)
#line 1657 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | VT_VECTOR; }
#line 10420 "asmparse.cpp.tab.c"
break;
case 652:
  if (!yytrial)
#line 1658 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | VT_BYREF; }
#line 10426 "asmparse.cpp.tab.c"
break;
case 653:
  if (!yytrial)
#line 1659 "asmparse.y"
{ yyval.int32 = VT_DECIMAL; }
#line 10432 "asmparse.cpp.tab.c"
break;
case 654:
  if (!yytrial)
#line 1660 "asmparse.y"
{ yyval.int32 = VT_DATE; }
#line 10438 "asmparse.cpp.tab.c"
break;
case 655:
  if (!yytrial)
#line 1661 "asmparse.y"
{ yyval.int32 = VT_BSTR; }
#line 10444 "asmparse.cpp.tab.c"
break;
case 656:
  if (!yytrial)
#line 1662 "asmparse.y"
{ yyval.int32 = VT_LPSTR; }
#line 10450 "asmparse.cpp.tab.c"
break;
case 657:
  if (!yytrial)
#line 1663 "asmparse.y"
{ yyval.int32 = VT_LPWSTR; }
#line 10456 "asmparse.cpp.tab.c"
break;
case 658:
  if (!yytrial)
#line 1664 "asmparse.y"
{ yyval.int32 = VT_UNKNOWN; }
#line 10462 "asmparse.cpp.tab.c"
break;
case 659:
  if (!yytrial)
#line 1665 "asmparse.y"
{ yyval.int32 = VT_DISPATCH; }
#line 10468 "asmparse.cpp.tab.c"
break;
case 660:
  if (!yytrial)
#line 1666 "asmparse.y"
{ yyval.int32 = VT_SAFEARRAY; }
#line 10474 "asmparse.cpp.tab.c"
break;
case 661:
  if (!yytrial)
#line 1667 "asmparse.y"
{ yyval.int32 = VT_INT; }
#line 10480 "asmparse.cpp.tab.c"
break;
case 662:
  if (!yytrial)
#line 1668 "asmparse.y"
{ yyval.int32 = VT_UINT; }
#line 10486 "asmparse.cpp.tab.c"
break;
case 663:
  if (!yytrial)
#line 1669 "asmparse.y"
{ yyval.int32 = VT_UINT; }
#line 10492 "asmparse.cpp.tab.c"
break;
case 664:
  if (!yytrial)
#line 1670 "asmparse.y"
{ yyval.int32 = VT_ERROR; }
#line 10498 "asmparse.cpp.tab.c"
break;
case 665:
  if (!yytrial)
#line 1671 "asmparse.y"
{ yyval.int32 = VT_HRESULT; }
#line 10504 "asmparse.cpp.tab.c"
break;
case 666:
  if (!yytrial)
#line 1672 "asmparse.y"
{ yyval.int32 = VT_CARRAY; }
#line 10510 "asmparse.cpp.tab.c"
break;
case 667:
  if (!yytrial)
#line 1673 "asmparse.y"
{ yyval.int32 = VT_USERDEFINED; }
#line 10516 "asmparse.cpp.tab.c"
break;
case 668:
  if (!yytrial)
#line 1674 "asmparse.y"
{ yyval.int32 = VT_RECORD; }
#line 10522 "asmparse.cpp.tab.c"
break;
case 669:
  if (!yytrial)
#line 1675 "asmparse.y"
{ yyval.int32 = VT_FILETIME; }
#line 10528 "asmparse.cpp.tab.c"
break;
case 670:
  if (!yytrial)
#line 1676 "asmparse.y"
{ yyval.int32 = VT_BLOB; }
#line 10534 "asmparse.cpp.tab.c"
break;
case 671:
  if (!yytrial)
#line 1677 "asmparse.y"
{ yyval.int32 = VT_STREAM; }
#line 10540 "asmparse.cpp.tab.c"
break;
case 672:
  if (!yytrial)
#line 1678 "asmparse.y"
{ yyval.int32 = VT_STORAGE; }
#line 10546 "asmparse.cpp.tab.c"
break;
case 673:
  if (!yytrial)
#line 1679 "asmparse.y"
{ yyval.int32 = VT_STREAMED_OBJECT; }
#line 10552 "asmparse.cpp.tab.c"
break;
case 674:
  if (!yytrial)
#line 1680 "asmparse.y"
{ yyval.int32 = VT_STORED_OBJECT; }
#line 10558 "asmparse.cpp.tab.c"
break;
case 675:
  if (!yytrial)
#line 1681 "asmparse.y"
{ yyval.int32 = VT_BLOB_OBJECT; }
#line 10564 "asmparse.cpp.tab.c"
break;
case 676:
  if (!yytrial)
#line 1682 "asmparse.y"
{ yyval.int32 = VT_CF; }
#line 10570 "asmparse.cpp.tab.c"
break;
case 677:
  if (!yytrial)
#line 1683 "asmparse.y"
{ yyval.int32 = VT_CLSID; }
#line 10576 "asmparse.cpp.tab.c"
break;
case 678:
  if (!yytrial)
#line 1686 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               float f = (float)(*yyvsp[-1].float64);
                                                               yyval.binstr->appendInt32(*((__int32*)&f)); delete yyvsp[-1].float64; }
#line 10584 "asmparse.cpp.tab.c"
break;
case 679:
  if (!yytrial)
#line 1689 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].float64); delete yyvsp[-1].float64; }
#line 10591 "asmparse.cpp.tab.c"
break;
case 680:
  if (!yytrial)
#line 1691 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 10598 "asmparse.cpp.tab.c"
break;
case 681:
  if (!yytrial)
#line 1693 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 10605 "asmparse.cpp.tab.c"
break;
case 682:
  if (!yytrial)
#line 1695 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 10612 "asmparse.cpp.tab.c"
break;
case 683:
  if (!yytrial)
#line 1697 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 10619 "asmparse.cpp.tab.c"
break;
case 684:
  if (!yytrial)
#line 1699 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I2);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 10626 "asmparse.cpp.tab.c"
break;
case 685:
  if (!yytrial)
#line 1701 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I1);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32); }
#line 10633 "asmparse.cpp.tab.c"
break;
case 686:
  if (!yytrial)
#line 1703 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 10640 "asmparse.cpp.tab.c"
break;
case 687:
  if (!yytrial)
#line 1705 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 10647 "asmparse.cpp.tab.c"
break;
case 688:
  if (!yytrial)
#line 1707 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 10654 "asmparse.cpp.tab.c"
break;
case 689:
  if (!yytrial)
#line 1709 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32); }
#line 10661 "asmparse.cpp.tab.c"
break;
case 690:
  if (!yytrial)
#line 1711 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 10668 "asmparse.cpp.tab.c"
break;
case 691:
  if (!yytrial)
#line 1713 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 10675 "asmparse.cpp.tab.c"
break;
case 692:
  if (!yytrial)
#line 1715 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 10682 "asmparse.cpp.tab.c"
break;
case 693:
  if (!yytrial)
#line 1717 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32); }
#line 10689 "asmparse.cpp.tab.c"
break;
case 694:
  if (!yytrial)
#line 1719 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CHAR);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 10696 "asmparse.cpp.tab.c"
break;
case 695:
  if (!yytrial)
#line 1721 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_BOOLEAN);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32);}
#line 10703 "asmparse.cpp.tab.c"
break;
case 696:
  if (!yytrial)
#line 1726 "asmparse.y"
{ if(yyvsp[0].token == PASM->m_tkSysString)
                                                                {     yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); }
                                                                else if(yyvsp[0].token == PASM->m_tkSysObject)
                                                                {     yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_OBJECT); }
                                                                else
                                                                 yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CLASS, yyvsp[0].token); }
#line 10714 "asmparse.cpp.tab.c"
break;
case 697:
  if (!yytrial)
#line 1732 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_OBJECT); }
#line 10720 "asmparse.cpp.tab.c"
break;
case 698:
  if (!yytrial)
#line 1733 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_VALUETYPE, yyvsp[0].token); }
#line 10726 "asmparse.cpp.tab.c"
break;
case 699:
  if (!yytrial)
#line 1734 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_VALUETYPE, yyvsp[0].token); }
#line 10732 "asmparse.cpp.tab.c"
break;
case 700:
  if (!yytrial)
#line 1735 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_CTARG); }
#line 10738 "asmparse.cpp.tab.c"
break;
case 701:
  if (!yytrial)
#line 1736 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 10744 "asmparse.cpp.tab.c"
break;
case 702:
  if (!yytrial)
#line 1737 "asmparse.y"
{ yyval.binstr = parser->MakeTypeArray(ELEMENT_TYPE_ARRAY, yyvsp[-3].binstr, yyvsp[-1].binstr); }
#line 10750 "asmparse.cpp.tab.c"
break;
case 703:
  if (!yytrial)
#line 1738 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_BYREF); }
#line 10756 "asmparse.cpp.tab.c"
break;
case 704:
  if (!yytrial)
#line 1739 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_PTR); }
#line 10762 "asmparse.cpp.tab.c"
break;
case 705:
  if (!yytrial)
#line 1740 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_PINNED); }
#line 10768 "asmparse.cpp.tab.c"
break;
case 706:
  if (!yytrial)
#line 1741 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CMOD_REQD, yyvsp[-1].token);
                                                                yyval.binstr->append(yyvsp[-4].binstr); }
#line 10775 "asmparse.cpp.tab.c"
break;
case 707:
  if (!yytrial)
#line 1743 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CMOD_OPT, yyvsp[-1].token);
                                                                yyval.binstr->append(yyvsp[-4].binstr); }
#line 10782 "asmparse.cpp.tab.c"
break;
case 708:
  if (!yytrial)
#line 1746 "asmparse.y"
{ yyval.binstr = parser->MakeSig(yyvsp[-5].int32, yyvsp[-4].binstr, yyvsp[-1].binstr);
                                                                yyval.binstr->insertInt8(ELEMENT_TYPE_FNPTR);
                                                                PASM->delArgNameList(PASM->m_firstArgName);
                                                                PASM->m_firstArgName = parser->m_ANSFirst.POP();
                                                                PASM->m_lastArgName = parser->m_ANSLast.POP();
                                                              }
#line 10793 "asmparse.cpp.tab.c"
break;
case 709:
  if (!yytrial)
#line 1752 "asmparse.y"
{ if(yyvsp[-1].binstr == NULL) yyval.binstr = yyvsp[-3].binstr;
                                                                else {
                                                                  yyval.binstr = new BinStr();
                                                                  yyval.binstr->appendInt8(ELEMENT_TYPE_GENERICINST);
                                                                  yyval.binstr->append(yyvsp[-3].binstr);
                                                                  corEmitInt(yyval.binstr, corCountArgs(yyvsp[-1].binstr));
                                                                  yyval.binstr->append(yyvsp[-1].binstr); delete yyvsp[-3].binstr; delete yyvsp[-1].binstr; }}
#line 10805 "asmparse.cpp.tab.c"
break;
case 710:
  if (!yytrial)
#line 1759 "asmparse.y"
{
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_MCVAR); corEmitInt(yyval.binstr, yyvsp[0].int32);
                                                              }
#line 10813 "asmparse.cpp.tab.c"
break;
case 711:
  if (!yytrial)
#line 1762 "asmparse.y"
{ /*if(PASM->m_pCurMethod)  {*/
                                                                /*  if(($3 < 0)||((DWORD)$3 >= PASM->m_pCurMethod->m_NumTyPars))*/
                                                                /*    PASM->report->error("Invalid method type parameter '%d'\n",$3);*/
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_MVAR); corEmitInt(yyval.binstr, yyvsp[0].int32);
                                                                /*} else PASM->report->error("Method type parameter '%d' outside method scope\n",$3);*/
                                                              }
#line 10824 "asmparse.cpp.tab.c"
break;
case 712:
  if (!yytrial)
#line 1768 "asmparse.y"
{
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CVAR); corEmitInt(yyval.binstr, yyvsp[0].int32);
                                                              }
#line 10832 "asmparse.cpp.tab.c"
break;
case 713:
  if (!yytrial)
#line 1771 "asmparse.y"
{ /*if(PASM->m_pCurClass)  {*/
                                                                /*  if(($2 < 0)||((DWORD)$2 >= PASM->m_pCurClass->m_NumTyPars))*/
                                                                /*    PASM->report->error("Invalid type parameter '%d'\n",$2);*/
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_VAR); corEmitInt(yyval.binstr, yyvsp[0].int32);
                                                                /*} else PASM->report->error("Type parameter '%d' outside class scope\n",$2);*/
                                                              }
#line 10843 "asmparse.cpp.tab.c"
break;
case 714:
  if (!yytrial)
#line 1777 "asmparse.y"
{ int eltype = ELEMENT_TYPE_MCVAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurMethod) n = PASM->m_pCurMethod->FindTyPar(yyvsp[0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yyvsp[0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yyvsp[0].string);
                                                                    eltype = ELEMENT_TYPE_MCVARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid method const type parameter '%s'\n",yyvsp[0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n);
                                                              }
#line 10863 "asmparse.cpp.tab.c"
break;
case 715:
  if (!yytrial)
#line 1792 "asmparse.y"
{ int eltype = ELEMENT_TYPE_MVAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurMethod) n = PASM->m_pCurMethod->FindTyPar(yyvsp[0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yyvsp[0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yyvsp[0].string);
                                                                    eltype = ELEMENT_TYPE_MVARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid method type parameter '%s'\n",yyvsp[0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n);
                                                              }
#line 10883 "asmparse.cpp.tab.c"
break;
case 716:
  if (!yytrial)
#line 1807 "asmparse.y"
{ int eltype = ELEMENT_TYPE_CVAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurClass && !newclass) n = PASM->m_pCurClass->FindTyPar(yyvsp[0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yyvsp[0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yyvsp[0].string);
                                                                    eltype = ELEMENT_TYPE_CVARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid const type parameter '%s'\n",yyvsp[0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n);
                                                              }
#line 10903 "asmparse.cpp.tab.c"
break;
case 717:
  if (!yytrial)
#line 1822 "asmparse.y"
{ int eltype = ELEMENT_TYPE_VAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurClass && !newclass) n = PASM->m_pCurClass->FindTyPar(yyvsp[0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yyvsp[0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yyvsp[0].string);
                                                                    eltype = ELEMENT_TYPE_VARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid type parameter '%s'\n",yyvsp[0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n);
                                                              }
#line 10923 "asmparse.cpp.tab.c"
break;
case 718:
  if (!yytrial)
#line 1837 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_TYPEDBYREF); }
#line 10929 "asmparse.cpp.tab.c"
break;
case 719:
  if (!yytrial)
#line 1838 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_VOID); }
#line 10935 "asmparse.cpp.tab.c"
break;
case 720:
  if (!yytrial)
#line 1839 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I); }
#line 10941 "asmparse.cpp.tab.c"
break;
case 721:
  if (!yytrial)
#line 1840 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U); }
#line 10947 "asmparse.cpp.tab.c"
break;
case 722:
  if (!yytrial)
#line 1841 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U); }
#line 10953 "asmparse.cpp.tab.c"
break;
case 723:
  if (!yytrial)
#line 1842 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 10959 "asmparse.cpp.tab.c"
break;
case 724:
  if (!yytrial)
#line 1843 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SENTINEL); }
#line 10965 "asmparse.cpp.tab.c"
break;
case 725:
  if (!yytrial)
#line 1846 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CHAR); }
#line 10971 "asmparse.cpp.tab.c"
break;
case 726:
  if (!yytrial)
#line 1847 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); }
#line 10977 "asmparse.cpp.tab.c"
break;
case 727:
  if (!yytrial)
#line 1848 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_BOOLEAN); }
#line 10983 "asmparse.cpp.tab.c"
break;
case 728:
  if (!yytrial)
#line 1849 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I1); }
#line 10989 "asmparse.cpp.tab.c"
break;
case 729:
  if (!yytrial)
#line 1850 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I2); }
#line 10995 "asmparse.cpp.tab.c"
break;
case 730:
  if (!yytrial)
#line 1851 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I4); }
#line 11001 "asmparse.cpp.tab.c"
break;
case 731:
  if (!yytrial)
#line 1852 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I8); }
#line 11007 "asmparse.cpp.tab.c"
break;
case 732:
  if (!yytrial)
#line 1853 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4); }
#line 11013 "asmparse.cpp.tab.c"
break;
case 733:
  if (!yytrial)
#line 1854 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8); }
#line 11019 "asmparse.cpp.tab.c"
break;
case 734:
  if (!yytrial)
#line 1855 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1); }
#line 11025 "asmparse.cpp.tab.c"
break;
case 735:
  if (!yytrial)
#line 1856 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2); }
#line 11031 "asmparse.cpp.tab.c"
break;
case 736:
  if (!yytrial)
#line 1857 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4); }
#line 11037 "asmparse.cpp.tab.c"
break;
case 737:
  if (!yytrial)
#line 1858 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8); }
#line 11043 "asmparse.cpp.tab.c"
break;
case 738:
  if (!yytrial)
#line 1859 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1); }
#line 11049 "asmparse.cpp.tab.c"
break;
case 739:
  if (!yytrial)
#line 1860 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2); }
#line 11055 "asmparse.cpp.tab.c"
break;
case 740:
  if (!yytrial)
#line 1861 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4); }
#line 11061 "asmparse.cpp.tab.c"
break;
case 741:
  if (!yytrial)
#line 1862 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8); }
#line 11067 "asmparse.cpp.tab.c"
break;
case 742:
  if (!yytrial)
#line 1863 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yyvsp[0].tdd->m_pbsTypeSpec); }
#line 11073 "asmparse.cpp.tab.c"
break;
case 743:
  if (!yytrial)
#line 1866 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 11079 "asmparse.cpp.tab.c"
break;
case 744:
  if (!yytrial)
#line 1867 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyvsp[-2].binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 11085 "asmparse.cpp.tab.c"
break;
case 745:
  if (!yytrial)
#line 1870 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0x7FFFFFFF); yyval.binstr->appendInt32(0x7FFFFFFF);  }
#line 11091 "asmparse.cpp.tab.c"
break;
case 746:
  if (!yytrial)
#line 1871 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0x7FFFFFFF); yyval.binstr->appendInt32(0x7FFFFFFF);  }
#line 11097 "asmparse.cpp.tab.c"
break;
case 747:
  if (!yytrial)
#line 1872 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0); yyval.binstr->appendInt32(yyvsp[0].int32); }
#line 11103 "asmparse.cpp.tab.c"
break;
case 748:
  if (!yytrial)
#line 1873 "asmparse.y"
{ FAIL_UNLESS(yyvsp[-2].int32 <= yyvsp[0].int32, ("lower bound %d must be <= upper bound %d\n", yyvsp[-2].int32, yyvsp[0].int32));
                                                                if (yyvsp[-2].int32 > yyvsp[0].int32) { YYERROR; };
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yyvsp[-2].int32); yyval.binstr->appendInt32(yyvsp[0].int32-yyvsp[-2].int32+1); }
#line 11111 "asmparse.cpp.tab.c"
break;
case 749:
  if (!yytrial)
#line 1876 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yyvsp[-1].int32); yyval.binstr->appendInt32(0x7FFFFFFF); }
#line 11117 "asmparse.cpp.tab.c"
break;
case 750:
  if (!yytrial)
#line 1881 "asmparse.y"
{ PASM->AddPermissionDecl(yyvsp[-4].secAct, yyvsp[-3].token, yyvsp[-1].pair); }
#line 11123 "asmparse.cpp.tab.c"
break;
case 751:
  if (!yytrial)
#line 1883 "asmparse.y"
{ PASM->AddPermissionDecl(yyvsp[-5].secAct, yyvsp[-4].token, yyvsp[-1].binstr); }
#line 11129 "asmparse.cpp.tab.c"
break;
case 752:
  if (!yytrial)
#line 1884 "asmparse.y"
{ PASM->AddPermissionDecl(yyvsp[-1].secAct, yyvsp[0].token, (NVPair *)NULL); }
#line 11135 "asmparse.cpp.tab.c"
break;
case 753:
  if (!yytrial)
#line 1885 "asmparse.y"
{ PASM->AddPermissionSetDecl(yyvsp[-2].secAct, yyvsp[-1].binstr); }
#line 11141 "asmparse.cpp.tab.c"
break;
case 754:
  if (!yytrial)
#line 1887 "asmparse.y"
{ PASM->AddPermissionSetDecl(yyvsp[-1].secAct,BinStrToUnicode(yyvsp[0].binstr,true));}
#line 11147 "asmparse.cpp.tab.c"
break;
case 755:
  if (!yytrial)
#line 1889 "asmparse.y"
{ BinStr* ret = new BinStr();
                                                                ret->insertInt8('.');
                                                                corEmitInt(ret, nSecAttrBlobs);
                                                                ret->append(yyvsp[-1].binstr);
                                                                PASM->AddPermissionSetDecl(yyvsp[-4].secAct,ret);
                                                                nSecAttrBlobs = 0; }
#line 11158 "asmparse.cpp.tab.c"
break;
case 756:
  if (!yytrial)
#line 1897 "asmparse.y"
{ yyval.binstr = new BinStr(); nSecAttrBlobs = 0;}
#line 11164 "asmparse.cpp.tab.c"
break;
case 757:
  if (!yytrial)
#line 1898 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; nSecAttrBlobs = 1; }
#line 11170 "asmparse.cpp.tab.c"
break;
case 758:
  if (!yytrial)
#line 1899 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->append(yyvsp[0].binstr); nSecAttrBlobs++; }
#line 11176 "asmparse.cpp.tab.c"
break;
case 759:
  if (!yytrial)
#line 1903 "asmparse.y"
{ yyval.binstr = PASM->EncodeSecAttr(PASM->ReflectionNotation(yyvsp[-4].token),yyvsp[-1].binstr,nCustomBlobNVPairs);
                                                                nCustomBlobNVPairs = 0; }
#line 11183 "asmparse.cpp.tab.c"
break;
case 760:
  if (!yytrial)
#line 1906 "asmparse.y"
{ yyval.binstr = PASM->EncodeSecAttr(yyvsp[-4].string,yyvsp[-1].binstr,nCustomBlobNVPairs);
                                                                nCustomBlobNVPairs = 0; }
#line 11190 "asmparse.cpp.tab.c"
break;
case 761:
  if (!yytrial)
#line 1910 "asmparse.y"
{ yyval.secAct = yyvsp[-2].secAct; bParsingByteArray = TRUE; }
#line 11196 "asmparse.cpp.tab.c"
break;
case 762:
  if (!yytrial)
#line 1912 "asmparse.y"
{ yyval.secAct = yyvsp[-2].secAct; bParsingByteArray = TRUE; }
#line 11202 "asmparse.cpp.tab.c"
break;
case 763:
  if (!yytrial)
#line 1915 "asmparse.y"
{ yyval.pair = yyvsp[0].pair; }
#line 11208 "asmparse.cpp.tab.c"
break;
case 764:
  if (!yytrial)
#line 1916 "asmparse.y"
{ yyval.pair = yyvsp[-2].pair->Concat(yyvsp[0].pair); }
#line 11214 "asmparse.cpp.tab.c"
break;
case 765:
  if (!yytrial)
#line 1919 "asmparse.y"
{ yyvsp[-2].binstr->appendInt8(0); yyval.pair = new NVPair(yyvsp[-2].binstr, yyvsp[0].binstr); }
#line 11220 "asmparse.cpp.tab.c"
break;
case 766:
  if (!yytrial)
#line 1922 "asmparse.y"
{ yyval.int32 = 1; }
#line 11226 "asmparse.cpp.tab.c"
break;
case 767:
  if (!yytrial)
#line 1923 "asmparse.y"
{ yyval.int32 = 0; }
#line 11232 "asmparse.cpp.tab.c"
break;
case 768:
  if (!yytrial)
#line 1926 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_BOOLEAN);
                                                                yyval.binstr->appendInt8(yyvsp[0].int32); }
#line 11240 "asmparse.cpp.tab.c"
break;
case 769:
  if (!yytrial)
#line 1929 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_I4);
                                                                yyval.binstr->appendInt32(yyvsp[0].int32); }
#line 11248 "asmparse.cpp.tab.c"
break;
case 770:
  if (!yytrial)
#line 1932 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_I4);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 11256 "asmparse.cpp.tab.c"
break;
case 771:
  if (!yytrial)
#line 1935 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_STRING);
                                                                yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr;
                                                                yyval.binstr->appendInt8(0); }
#line 11265 "asmparse.cpp.tab.c"
break;
case 772:
  if (!yytrial)
#line 1939 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yyvsp[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(1);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 11276 "asmparse.cpp.tab.c"
break;
case 773:
  if (!yytrial)
#line 1945 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yyvsp[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(2);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 11287 "asmparse.cpp.tab.c"
break;
case 774:
  if (!yytrial)
#line 1951 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yyvsp[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(4);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 11298 "asmparse.cpp.tab.c"
break;
case 775:
  if (!yytrial)
#line 1957 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yyvsp[-3].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(4);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 11309 "asmparse.cpp.tab.c"
break;
case 776:
  if (!yytrial)
#line 1965 "asmparse.y"
{ yyval.secAct = dclRequest; }
#line 11315 "asmparse.cpp.tab.c"
break;
case 777:
  if (!yytrial)
#line 1966 "asmparse.y"
{ yyval.secAct = dclDemand; }
#line 11321 "asmparse.cpp.tab.c"
break;
case 778:
  if (!yytrial)
#line 1967 "asmparse.y"
{ yyval.secAct = dclAssert; }
#line 11327 "asmparse.cpp.tab.c"
break;
case 779:
  if (!yytrial)
#line 1968 "asmparse.y"
{ yyval.secAct = dclDeny; }
#line 11333 "asmparse.cpp.tab.c"
break;
case 780:
  if (!yytrial)
#line 1969 "asmparse.y"
{ yyval.secAct = dclPermitOnly; }
#line 11339 "asmparse.cpp.tab.c"
break;
case 781:
  if (!yytrial)
#line 1970 "asmparse.y"
{ yyval.secAct = dclLinktimeCheck; }
#line 11345 "asmparse.cpp.tab.c"
break;
case 782:
  if (!yytrial)
#line 1971 "asmparse.y"
{ yyval.secAct = dclInheritanceCheck; }
#line 11351 "asmparse.cpp.tab.c"
break;
case 783:
  if (!yytrial)
#line 1972 "asmparse.y"
{ yyval.secAct = dclRequestMinimum; }
#line 11357 "asmparse.cpp.tab.c"
break;
case 784:
  if (!yytrial)
#line 1973 "asmparse.y"
{ yyval.secAct = dclRequestOptional; }
#line 11363 "asmparse.cpp.tab.c"
break;
case 785:
  if (!yytrial)
#line 1974 "asmparse.y"
{ yyval.secAct = dclRequestRefuse; }
#line 11369 "asmparse.cpp.tab.c"
break;
case 786:
  if (!yytrial)
#line 1975 "asmparse.y"
{ yyval.secAct = dclPrejitGrant; }
#line 11375 "asmparse.cpp.tab.c"
break;
case 787:
  if (!yytrial)
#line 1976 "asmparse.y"
{ yyval.secAct = dclPrejitDenied; }
#line 11381 "asmparse.cpp.tab.c"
break;
case 788:
  if (!yytrial)
#line 1977 "asmparse.y"
{ yyval.secAct = dclNonCasDemand; }
#line 11387 "asmparse.cpp.tab.c"
break;
case 789:
  if (!yytrial)
#line 1978 "asmparse.y"
{ yyval.secAct = dclNonCasLinkDemand; }
#line 11393 "asmparse.cpp.tab.c"
break;
case 790:
  if (!yytrial)
#line 1979 "asmparse.y"
{ yyval.secAct = dclNonCasInheritance; }
#line 11399 "asmparse.cpp.tab.c"
break;
case 791:
  if (!yytrial)
#line 1983 "asmparse.y"
{ PASM->ResetLineNumbers(); nCurrPC = PASM->m_CurPC; PENV->bExternSource = TRUE; PENV->bExternSourceAutoincrement = FALSE; }
#line 11405 "asmparse.cpp.tab.c"
break;
case 792:
  if (!yytrial)
#line 1984 "asmparse.y"
{ PASM->ResetLineNumbers(); nCurrPC = PASM->m_CurPC; PENV->bExternSource = TRUE; PENV->bExternSourceAutoincrement = TRUE; }
#line 11411 "asmparse.cpp.tab.c"
break;
case 793:
  if (!yytrial)
#line 1987 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-1].int32;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd  = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 11419 "asmparse.cpp.tab.c"
break;
case 794:
  if (!yytrial)
#line 1990 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[0].int32;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd  = static_cast<unsigned>(-1); }
#line 11426 "asmparse.cpp.tab.c"
break;
case 795:
  if (!yytrial)
#line 1992 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-3].int32;
                                                                PENV->nExtCol=yyvsp[-1].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 11434 "asmparse.cpp.tab.c"
break;
case 796:
  if (!yytrial)
#line 1995 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-2].int32;
                                                                PENV->nExtCol=yyvsp[0].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);}
#line 11441 "asmparse.cpp.tab.c"
break;
case 797:
  if (!yytrial)
#line 1998 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-5].int32;
                                                                PENV->nExtCol=yyvsp[-3].int32; PENV->nExtColEnd = yyvsp[-1].int32;
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 11449 "asmparse.cpp.tab.c"
break;
case 798:
  if (!yytrial)
#line 2002 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-4].int32;
                                                                PENV->nExtCol=yyvsp[-2].int32; PENV->nExtColEnd = yyvsp[0].int32; }
#line 11456 "asmparse.cpp.tab.c"
break;
case 799:
  if (!yytrial)
#line 2005 "asmparse.y"
{ PENV->nExtLine = yyvsp[-5].int32; PENV->nExtLineEnd = yyvsp[-3].int32;
                                                                PENV->nExtCol=yyvsp[-1].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 11464 "asmparse.cpp.tab.c"
break;
case 800:
  if (!yytrial)
#line 2009 "asmparse.y"
{ PENV->nExtLine = yyvsp[-4].int32; PENV->nExtLineEnd = yyvsp[-2].int32;
                                                                PENV->nExtCol=yyvsp[0].int32; PENV->nExtColEnd = static_cast<unsigned>(-1); }
#line 11471 "asmparse.cpp.tab.c"
break;
case 801:
  if (!yytrial)
#line 2012 "asmparse.y"
{ PENV->nExtLine = yyvsp[-7].int32; PENV->nExtLineEnd = yyvsp[-5].int32;
                                                                PENV->nExtCol=yyvsp[-3].int32; PENV->nExtColEnd = yyvsp[-1].int32;
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 11479 "asmparse.cpp.tab.c"
break;
case 802:
  if (!yytrial)
#line 2016 "asmparse.y"
{ PENV->nExtLine = yyvsp[-6].int32; PENV->nExtLineEnd = yyvsp[-4].int32;
                                                                PENV->nExtCol=yyvsp[-2].int32; PENV->nExtColEnd = yyvsp[0].int32; }
#line 11486 "asmparse.cpp.tab.c"
break;
case 803:
  if (!yytrial)
#line 2018 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-1].int32 - 1;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yyvsp[0].binstr);}
#line 11494 "asmparse.cpp.tab.c"
break;
case 804:
  if (!yytrial)
#line 2025 "asmparse.y"
{ PASMM->AddFile(yyvsp[-5].string, yyvsp[-6].fileAttr|yyvsp[-4].fileAttr|yyvsp[0].fileAttr, yyvsp[-2].binstr); }
#line 11500 "asmparse.cpp.tab.c"
break;
case 805:
  if (!yytrial)
#line 2026 "asmparse.y"
{ PASMM->AddFile(yyvsp[-1].string, yyvsp[-2].fileAttr|yyvsp[0].fileAttr, NULL); }
#line 11506 "asmparse.cpp.tab.c"
break;
case 806:
  if (!yytrial)
#line 2029 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) 0; }
#line 11512 "asmparse.cpp.tab.c"
break;
case 807:
  if (!yytrial)
#line 2030 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) (yyvsp[-1].fileAttr | ffContainsNoMetaData); }
#line 11518 "asmparse.cpp.tab.c"
break;
case 808:
  if (!yytrial)
#line 2033 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) 0; }
#line 11524 "asmparse.cpp.tab.c"
break;
case 809:
  if (!yytrial)
#line 2034 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) 0x80000000; }
#line 11530 "asmparse.cpp.tab.c"
break;
case 810:
  if (!yytrial)
#line 2037 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 11536 "asmparse.cpp.tab.c"
break;
case 811:
  if (!yytrial)
#line 2040 "asmparse.y"
{ PASMM->StartAssembly(yyvsp[0].string, NULL, (DWORD)yyvsp[-1].asmAttr, FALSE); }
#line 11542 "asmparse.cpp.tab.c"
break;
case 812:
  if (!yytrial)
#line 2043 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) 0; }
#line 11548 "asmparse.cpp.tab.c"
break;
case 813:
  if (!yytrial)
#line 2044 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) (yyvsp[-1].asmAttr | afRetargetable); }
#line 11554 "asmparse.cpp.tab.c"
break;
case 814:
  if (!yytrial)
#line 2045 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) (yyvsp[-1].asmAttr | afContentType_WindowsRuntime); }
#line 11560 "asmparse.cpp.tab.c"
break;
case 815:
  if (!yytrial)
#line 2046 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) (yyvsp[-1].asmAttr | afPA_NoPlatform); }
#line 11566 "asmparse.cpp.tab.c"
break;
case 816:
  if (!yytrial)
#line 2047 "asmparse.y"
{ yyval.asmAttr = yyvsp[-2].asmAttr; }
#line 11572 "asmparse.cpp.tab.c"
break;
case 817:
  if (!yytrial)
#line 2048 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_MSIL); }
#line 11578 "asmparse.cpp.tab.c"
break;
case 818:
  if (!yytrial)
#line 2049 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_x86); }
#line 11584 "asmparse.cpp.tab.c"
break;
case 819:
  if (!yytrial)
#line 2050 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_AMD64); }
#line 11590 "asmparse.cpp.tab.c"
break;
case 820:
  if (!yytrial)
#line 2051 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_ARM); }
#line 11596 "asmparse.cpp.tab.c"
break;
case 821:
  if (!yytrial)
#line 2052 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_ARM64); }
#line 11602 "asmparse.cpp.tab.c"
break;
case 824:
  if (!yytrial)
#line 2059 "asmparse.y"
{ PASMM->SetAssemblyHashAlg(yyvsp[0].int32); }
#line 11608 "asmparse.cpp.tab.c"
break;
case 827:
  if (!yytrial)
#line 2064 "asmparse.y"
{ yyval.int32 = yyvsp[0].int32; }
#line 11614 "asmparse.cpp.tab.c"
break;
case 828:
  if (!yytrial)
#line 2065 "asmparse.y"
{ yyval.int32 = 0xFFFF; }
#line 11620 "asmparse.cpp.tab.c"
break;
case 829:
  if (!yytrial)
#line 2068 "asmparse.y"
{ PASMM->SetAssemblyPublicKey(yyvsp[-1].binstr); }
#line 11626 "asmparse.cpp.tab.c"
break;
case 830:
  if (!yytrial)
#line 2070 "asmparse.y"
{ PASMM->SetAssemblyVer((USHORT)yyvsp[-6].int32, (USHORT)yyvsp[-4].int32, (USHORT)yyvsp[-2].int32, (USHORT)yyvsp[0].int32); }
#line 11632 "asmparse.cpp.tab.c"
break;
case 831:
  if (!yytrial)
#line 2071 "asmparse.y"
{ yyvsp[0].binstr->appendInt8(0); PASMM->SetAssemblyLocale(yyvsp[0].binstr,TRUE); }
#line 11638 "asmparse.cpp.tab.c"
break;
case 832:
  if (!yytrial)
#line 2072 "asmparse.y"
{ PASMM->SetAssemblyLocale(yyvsp[-1].binstr,FALSE); }
#line 11644 "asmparse.cpp.tab.c"
break;
case 835:
  if (!yytrial)
#line 2077 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 11650 "asmparse.cpp.tab.c"
break;
case 836:
  if (!yytrial)
#line 2080 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 11656 "asmparse.cpp.tab.c"
break;
case 837:
  if (!yytrial)
#line 2083 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 11662 "asmparse.cpp.tab.c"
break;
case 838:
  if (!yytrial)
#line 2087 "asmparse.y"
{ PASMM->StartAssembly(yyvsp[0].string, NULL, yyvsp[-1].asmAttr, TRUE); }
#line 11668 "asmparse.cpp.tab.c"
break;
case 839:
  if (!yytrial)
#line 2089 "asmparse.y"
{ PASMM->StartAssembly(yyvsp[-2].string, yyvsp[0].string, yyvsp[-3].asmAttr, TRUE); }
#line 11674 "asmparse.cpp.tab.c"
break;
case 842:
  if (!yytrial)
#line 2096 "asmparse.y"
{ PASMM->SetAssemblyHashBlob(yyvsp[-1].binstr); }
#line 11680 "asmparse.cpp.tab.c"
break;
case 844:
  if (!yytrial)
#line 2098 "asmparse.y"
{ PASMM->SetAssemblyPublicKeyToken(yyvsp[-1].binstr); }
#line 11686 "asmparse.cpp.tab.c"
break;
case 845:
  if (!yytrial)
#line 2099 "asmparse.y"
{ PASMM->SetAssemblyAutodetect(); }
#line 11692 "asmparse.cpp.tab.c"
break;
case 846:
  if (!yytrial)
#line 2102 "asmparse.y"
{ PASMM->StartComType(yyvsp[0].string, yyvsp[-1].exptAttr);}
#line 11698 "asmparse.cpp.tab.c"
break;
case 847:
  if (!yytrial)
#line 2105 "asmparse.y"
{ PASMM->StartComType(yyvsp[0].string, yyvsp[-1].exptAttr); }
#line 11704 "asmparse.cpp.tab.c"
break;
case 848:
  if (!yytrial)
#line 2108 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) 0; }
#line 11710 "asmparse.cpp.tab.c"
break;
case 849:
  if (!yytrial)
#line 2109 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-1].exptAttr | tdNotPublic); }
#line 11716 "asmparse.cpp.tab.c"
break;
case 850:
  if (!yytrial)
#line 2110 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-1].exptAttr | tdPublic); }
#line 11722 "asmparse.cpp.tab.c"
break;
case 851:
  if (!yytrial)
#line 2111 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-1].exptAttr | tdForwarder); }
#line 11728 "asmparse.cpp.tab.c"
break;
case 852:
  if (!yytrial)
#line 2112 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedPublic); }
#line 11734 "asmparse.cpp.tab.c"
break;
case 853:
  if (!yytrial)
#line 2113 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedPrivate); }
#line 11740 "asmparse.cpp.tab.c"
break;
case 854:
  if (!yytrial)
#line 2114 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedFamily); }
#line 11746 "asmparse.cpp.tab.c"
break;
case 855:
  if (!yytrial)
#line 2115 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedAssembly); }
#line 11752 "asmparse.cpp.tab.c"
break;
case 856:
  if (!yytrial)
#line 2116 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedFamANDAssem); }
#line 11758 "asmparse.cpp.tab.c"
break;
case 857:
  if (!yytrial)
#line 2117 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedFamORAssem); }
#line 11764 "asmparse.cpp.tab.c"
break;
case 860:
  if (!yytrial)
#line 2124 "asmparse.y"
{ PASMM->SetComTypeFile(yyvsp[0].string); }
#line 11770 "asmparse.cpp.tab.c"
break;
case 861:
  if (!yytrial)
#line 2125 "asmparse.y"
{ PASMM->SetComTypeComType(yyvsp[0].string); }
#line 11776 "asmparse.cpp.tab.c"
break;
case 862:
  if (!yytrial)
#line 2126 "asmparse.y"
{ PASMM->SetComTypeAsmRef(yyvsp[0].string); }
#line 11782 "asmparse.cpp.tab.c"
break;
case 863:
  if (!yytrial)
#line 2127 "asmparse.y"
{ if(!PASMM->SetComTypeImplementationTok(yyvsp[-1].int32))
                                                                  PASM->report->error("Invalid implementation of exported type\n"); }
#line 11789 "asmparse.cpp.tab.c"
break;
case 864:
  if (!yytrial)
#line 2129 "asmparse.y"
{ if(!PASMM->SetComTypeClassTok(yyvsp[0].int32))
                                                                  PASM->report->error("Invalid TypeDefID of exported type\n"); }
#line 11796 "asmparse.cpp.tab.c"
break;
case 867:
  if (!yytrial)
#line 2135 "asmparse.y"
{ PASMM->StartManifestRes(yyvsp[0].string, yyvsp[0].string, yyvsp[-1].manresAttr); }
#line 11802 "asmparse.cpp.tab.c"
break;
case 868:
  if (!yytrial)
#line 2137 "asmparse.y"
{ PASMM->StartManifestRes(yyvsp[-2].string, yyvsp[0].string, yyvsp[-3].manresAttr); }
#line 11808 "asmparse.cpp.tab.c"
break;
case 869:
  if (!yytrial)
#line 2140 "asmparse.y"
{ yyval.manresAttr = (CorManifestResourceFlags) 0; }
#line 11814 "asmparse.cpp.tab.c"
break;
case 870:
  if (!yytrial)
#line 2141 "asmparse.y"
{ yyval.manresAttr = (CorManifestResourceFlags) (yyvsp[-1].manresAttr | mrPublic); }
#line 11820 "asmparse.cpp.tab.c"
break;
case 871:
  if (!yytrial)
#line 2142 "asmparse.y"
{ yyval.manresAttr = (CorManifestResourceFlags) (yyvsp[-1].manresAttr | mrPrivate); }
#line 11826 "asmparse.cpp.tab.c"
break;
case 874:
  if (!yytrial)
#line 2149 "asmparse.y"
{ PASMM->SetManifestResFile(yyvsp[-2].string, (ULONG)yyvsp[0].int32); }
#line 11832 "asmparse.cpp.tab.c"
break;
case 875:
  if (!yytrial)
#line 2150 "asmparse.y"
{ PASMM->SetManifestResAsmRef(yyvsp[0].string); }
#line 11838 "asmparse.cpp.tab.c"
break;
#line 11840 "asmparse.cpp.tab.c"
#line 802 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial!=0);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

#ifdef YYPOSN
  /* Perform user-defined position reduction */
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif
#endif /* YYPOSN */

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
#ifdef YYPOSN
  yyps->psp -= yym;
#endif /* YYPOSN */

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state "
	     "%d\n", (int)yydepth, yytrial!=0, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;  /* return value of root non-terminal to yylval */
#ifdef YYPOSN
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;  /* return value of root position to yyposn */
#endif /* YYPOSN */
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       (int)yydepth, yytrial!=0, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state "
	   "%d\n", (int)yydepth, yytrial!=0, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
#ifdef YYPOSN
  *++(yyps->psp) = yyps->pos;
#endif /* YYPOSN */
  goto yyloop;


  /*
  ** Reduction declares that this path is valid.
  ** Set yypath and do a full parse
  */
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    struct yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state "
	   "%d, %d tokens\n", (int)yydepth, yytrial!=0, yypath->state,
	   (int)(yylvp - yylvals - yypath->lexeme));
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  yylexp = yylexemes + yypath->lexeme;
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  yylvp = yylvals + yypath->lexeme;
#ifdef YYPOSN
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylpp = yylpsns + yypath->lexeme;
#endif /* YYPOSN */
  yystate = yypath->state;
  goto yyloop;

yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  {
    YYSTYPE *pv;
#ifdef YYPOSN
    YYPOSN *pp = yyps->ps;
#endif
#ifdef YYDESTRUCT
    Yshort *ps = yyps->ss;
#endif
    for(pv=yyps->vs; pv<yyps->vsp; pv++) {
      YYDELETEVAL(*pv,2);
#if defined(YYDESTRUCT)
      YYDESTRUCT(yytrial!=0, yyastable[*ps++], pv, pp++);
#endif /* YYDESTRUCT */
    }
#ifdef YYPOSN
    for(pp=yyps->ps; pp<yyps->psp; pp++) {
      YYDELETEPOSN(*pp,2);
    }
#endif /* YYPOSN */
  }

  while (yyps) {
    struct yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    struct yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    struct yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    struct yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}
