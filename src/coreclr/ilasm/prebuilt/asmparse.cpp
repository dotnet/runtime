#line 8 "btyaccpa.ske"

/*
** @(#)btyaccpar, based on byacc 1.8 (Berkeley)
*/
#define YYBTYACC 1

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 2 "asmparse.y"

/* Licensed to the .NET Foundation under one or more agreements.*/
/* The .NET Foundation licenses this file to you under the MIT license.*/

/**/
/* File asmparse.y*/
/**/
#include "ilasmpch.h"

#include "grammar_before.cpp"


#line 15 "asmparse.y"
typedef union {
        CorRegTypeAttr classAttr;
        CorMethodAttr methAttr;
        CorFieldAttr fieldAttr;
        CorMethodImpl implAttr;
        CorEventAttr  eventAttr;
        CorPropertyAttr propAttr;
        CorPinvokeMap pinvAttr;
        CorDeclSecurity secAct;
        CorFileFlags fileAttr;
        CorAssemblyFlags asmAttr;
        CorAssemblyFlags asmRefAttr;
        CorTypeAttr exptAttr;
        CorManifestResourceFlags manresAttr;
        double*  float64;
        __int64* int64;
        __int32  int32;
        char*    string;
        BinStr*  binstr;
        Labels*  labels;
        Instr*   instr;         /* instruction opcode*/
        NVPair*  pair;
        pTyParList typarlist;
        mdToken token;
        TypeDefDescr* tdd;
        CustomDescr*  cad;
        unsigned short opcode;
} YYSTYPE;
#define YYSTYPE YYSTYPE
#line 59 "asmparse.cpp.tab.c"
#define ERROR_ 257
#define BAD_COMMENT_ 258
#define BAD_LITERAL_ 259
#define ID 260
#define DOTTEDNAME 261
#define QSTRING 262
#define SQSTRING 263
#define INT32 264
#define INT64 265
#define FLOAT64 266
#define HEXBYTE 267
#define TYPEDEF_T 268
#define TYPEDEF_M 269
#define TYPEDEF_F 270
#define TYPEDEF_TS 271
#define TYPEDEF_MR 272
#define TYPEDEF_CA 273
#define DCOLON 274
#define ELLIPSIS 275
#define VOID_ 276
#define BOOL_ 277
#define CHAR_ 278
#define UNSIGNED_ 279
#define INT_ 280
#define INT8_ 281
#define INT16_ 282
#define INT32_ 283
#define INT64_ 284
#define FLOAT_ 285
#define FLOAT32_ 286
#define FLOAT64_ 287
#define BYTEARRAY_ 288
#define UINT_ 289
#define UINT8_ 290
#define UINT16_ 291
#define UINT32_ 292
#define UINT64_ 293
#define FLAGS_ 294
#define CALLCONV_ 295
#define MDTOKEN_ 296
#define OBJECT_ 297
#define STRING_ 298
#define NULLREF_ 299
#define DEFAULT_ 300
#define CDECL_ 301
#define VARARG_ 302
#define STDCALL_ 303
#define THISCALL_ 304
#define FASTCALL_ 305
#define CLASS_ 306
#define BYREFLIKE_ 307
#define TYPEDREF_ 308
#define UNMANAGED_ 309
#define FINALLY_ 310
#define HANDLER_ 311
#define CATCH_ 312
#define FILTER_ 313
#define FAULT_ 314
#define EXTENDS_ 315
#define IMPLEMENTS_ 316
#define TO_ 317
#define AT_ 318
#define TLS_ 319
#define TRUE_ 320
#define FALSE_ 321
#define _INTERFACEIMPL 322
#define VALUE_ 323
#define VALUETYPE_ 324
#define NATIVE_ 325
#define INSTANCE_ 326
#define SPECIALNAME_ 327
#define FORWARDER_ 328
#define STATIC_ 329
#define PUBLIC_ 330
#define PRIVATE_ 331
#define FAMILY_ 332
#define FINAL_ 333
#define SYNCHRONIZED_ 334
#define INTERFACE_ 335
#define SEALED_ 336
#define NESTED_ 337
#define ABSTRACT_ 338
#define AUTO_ 339
#define SEQUENTIAL_ 340
#define EXPLICIT_ 341
#define ANSI_ 342
#define UNICODE_ 343
#define AUTOCHAR_ 344
#define IMPORT_ 345
#define ENUM_ 346
#define VIRTUAL_ 347
#define NOINLINING_ 348
#define AGGRESSIVEINLINING_ 349
#define NOOPTIMIZATION_ 350
#define AGGRESSIVEOPTIMIZATION_ 351
#define UNMANAGEDEXP_ 352
#define BEFOREFIELDINIT_ 353
#define STRICT_ 354
#define RETARGETABLE_ 355
#define WINDOWSRUNTIME_ 356
#define NOPLATFORM_ 357
#define METHOD_ 358
#define FIELD_ 359
#define PINNED_ 360
#define MODREQ_ 361
#define MODOPT_ 362
#define SERIALIZABLE_ 363
#define PROPERTY_ 364
#define TYPE_ 365
#define ASSEMBLY_ 366
#define FAMANDASSEM_ 367
#define FAMORASSEM_ 368
#define PRIVATESCOPE_ 369
#define HIDEBYSIG_ 370
#define NEWSLOT_ 371
#define RTSPECIALNAME_ 372
#define PINVOKEIMPL_ 373
#define _CTOR 374
#define _CCTOR 375
#define LITERAL_ 376
#define NOTSERIALIZED_ 377
#define INITONLY_ 378
#define REQSECOBJ_ 379
#define CIL_ 380
#define OPTIL_ 381
#define MANAGED_ 382
#define FORWARDREF_ 383
#define PRESERVESIG_ 384
#define RUNTIME_ 385
#define INTERNALCALL_ 386
#define _IMPORT 387
#define NOMANGLE_ 388
#define LASTERR_ 389
#define WINAPI_ 390
#define AS_ 391
#define BESTFIT_ 392
#define ON_ 393
#define OFF_ 394
#define CHARMAPERROR_ 395
#define INSTR_NONE 396
#define INSTR_VAR 397
#define INSTR_I 398
#define INSTR_I8 399
#define INSTR_R 400
#define INSTR_BRTARGET 401
#define INSTR_METHOD 402
#define INSTR_FIELD 403
#define INSTR_TVAR 404
#define INSTR_TYPE 405
#define INSTR_STRING 406
#define INSTR_SIG 407
#define INSTR_TOK 408
#define INSTR_SWITCH 409
#define _CLASS 410
#define _NAMESPACE 411
#define _METHOD 412
#define _FIELD 413
#define _DATA 414
#define _THIS 415
#define _BASE 416
#define _NESTER 417
#define _EMITBYTE 418
#define _TRY 419
#define _MAXSTACK 420
#define _LOCALS 421
#define _ENTRYPOINT 422
#define _ZEROINIT 423
#define _EVENT 424
#define _ADDON 425
#define _REMOVEON 426
#define _FIRE 427
#define _OTHER 428
#define _PROPERTY 429
#define _SET 430
#define _GET 431
#define _PERMISSION 432
#define _PERMISSIONSET 433
#define REQUEST_ 434
#define DEMAND_ 435
#define ASSERT_ 436
#define DENY_ 437
#define PERMITONLY_ 438
#define LINKCHECK_ 439
#define INHERITCHECK_ 440
#define REQMIN_ 441
#define REQOPT_ 442
#define REQREFUSE_ 443
#define PREJITGRANT_ 444
#define PREJITDENY_ 445
#define NONCASDEMAND_ 446
#define NONCASLINKDEMAND_ 447
#define NONCASINHERITANCE_ 448
#define _LINE 449
#define P_LINE 450
#define _LANGUAGE 451
#define _CUSTOM 452
#define INIT_ 453
#define _SIZE 454
#define _PACK 455
#define _VTABLE 456
#define _VTFIXUP 457
#define FROMUNMANAGED_ 458
#define CALLMOSTDERIVED_ 459
#define _VTENTRY 460
#define RETAINAPPDOMAIN_ 461
#define _FILE 462
#define NOMETADATA_ 463
#define _HASH 464
#define _ASSEMBLY 465
#define _PUBLICKEY 466
#define _PUBLICKEYTOKEN 467
#define ALGORITHM_ 468
#define _VER 469
#define _LOCALE 470
#define EXTERN_ 471
#define _MRESOURCE 472
#define _MODULE 473
#define _EXPORT 474
#define LEGACY_ 475
#define LIBRARY_ 476
#define X86_ 477
#define AMD64_ 478
#define ARM_ 479
#define ARM64_ 480
#define MARSHAL_ 481
#define CUSTOM_ 482
#define SYSSTRING_ 483
#define FIXED_ 484
#define VARIANT_ 485
#define CURRENCY_ 486
#define SYSCHAR_ 487
#define DECIMAL_ 488
#define DATE_ 489
#define BSTR_ 490
#define TBSTR_ 491
#define LPSTR_ 492
#define LPWSTR_ 493
#define LPTSTR_ 494
#define OBJECTREF_ 495
#define IUNKNOWN_ 496
#define IDISPATCH_ 497
#define STRUCT_ 498
#define SAFEARRAY_ 499
#define BYVALSTR_ 500
#define LPVOID_ 501
#define ANY_ 502
#define ARRAY_ 503
#define LPSTRUCT_ 504
#define IIDPARAM_ 505
#define IN_ 506
#define OUT_ 507
#define OPT_ 508
#define _PARAM 509
#define _OVERRIDE 510
#define WITH_ 511
#define NULL_ 512
#define HRESULT_ 513
#define CARRAY_ 514
#define USERDEFINED_ 515
#define RECORD_ 516
#define FILETIME_ 517
#define BLOB_ 518
#define STREAM_ 519
#define STORAGE_ 520
#define STREAMED_OBJECT_ 521
#define STORED_OBJECT_ 522
#define BLOB_OBJECT_ 523
#define CF_ 524
#define CLSID_ 525
#define VECTOR_ 526
#define _SUBSYSTEM 527
#define _CORFLAGS 528
#define ALIGNMENT_ 529
#define _IMAGEBASE 530
#define _STACKRESERVE 531
#define _TYPEDEF 532
#define _TEMPLATE 533
#define _TYPELIST 534
#define _MSCORLIB 535
#define P_DEFINE 536
#define P_UNDEF 537
#define P_IFDEF 538
#define P_IFNDEF 539
#define P_ELSE 540
#define P_ENDIF 541
#define P_INCLUDE 542
#define CONSTRAINT_ 543
#define CONST_ 544
#define YYERRCODE 256
static int yylhs[] = {                                        -1,
    0,    0,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  138,  138,
   38,   38,  135,  135,  135,    2,    2,    1,    1,    1,
    9,   26,   26,   25,   25,   25,  136,  136,  136,  136,
  136,  137,  137,  137,  137,  137,  137,  137,  137,  137,
   95,   95,   95,   95,   96,   96,   96,   96,   10,   11,
   75,   74,   74,   61,   63,   63,   63,   64,   64,   64,
   67,   67,  134,  134,  134,   62,   62,   62,   62,   62,
   62,  132,  132,  132,  121,   12,   12,   12,   12,   12,
   12,  120,  139,  115,  140,  141,  113,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,  142,  142,  143,  143,  114,  114,
  144,  144,   58,   58,   59,   59,   71,   71,   18,   18,
   18,   18,   18,   18,   18,   19,   19,   20,   21,   21,
   70,   70,   70,   69,   69,   60,   23,   23,   24,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  118,   81,   81,   81,   81,   81,   81,   81,   81,   81,
   81,   81,   81,   81,   81,   81,   81,    4,    4,   37,
   37,   16,   16,   77,   77,   77,   77,   77,   77,   77,
    7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
    8,    8,   78,   76,   76,   76,   76,   76,   76,  146,
  146,   83,   83,   83,  147,  147,  152,  152,  152,  152,
  152,  152,  152,  152,  148,   84,   84,   84,  149,  149,
  153,  153,  153,  153,  153,  153,  153,  154,   40,   40,
   36,   36,  155,  116,   80,   80,   80,   80,   80,   80,
   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
   80,   80,   80,   80,   80,   80,   80,   85,   85,   85,
   85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
   85,   85,   85,    3,    3,    3,   13,   13,   13,   13,
   13,   82,   82,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   82,  156,  117,  117,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  160,  161,  158,  163,
  163,  162,  162,  162,  165,  164,  164,  164,  164,  168,
  168,  168,  171,  166,  169,  170,  167,  167,  167,  119,
  172,  172,  174,  174,  174,  173,  173,  175,  175,   14,
   14,  176,  176,  176,  176,  176,  176,  176,  176,  176,
  176,  176,  176,  176,  176,  176,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,  177,   33,   33,   34,   34,
   41,   41,   41,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   44,
   44,   44,   45,   45,   45,   49,   49,   48,   48,   47,
   47,   46,   46,   50,   50,   51,   51,   51,   52,   52,
   52,   52,   53,   53,  151,   97,   98,  105,   99,  100,
  101,  102,  103,  104,  106,  107,  108,  109,  110,  111,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,    6,    6,    6,
    6,    6,   55,   55,   56,   56,   57,   57,   27,   27,
   28,   28,   29,   29,   29,   72,   72,   72,   72,   72,
   72,   72,   72,   72,   72,    5,    5,   73,   73,   73,
   73,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   22,   22,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   32,   32,   31,   31,   31,   31,
   31,  133,  133,  133,  133,  133,  133,   66,   66,   66,
   65,   65,   89,   89,   86,   86,   87,   17,   17,   39,
   39,   39,   39,   39,   39,   39,   39,   88,   88,   88,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   88,  178,  178,  122,  122,  122,  122,  122,  122,
  122,  122,  122,  122,  122,  123,  123,   90,   90,   91,
   91,  179,  124,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,  125,  125,  180,  180,  180,   68,   68,
  181,  181,  181,  181,  181,  181,  182,  184,  183,  126,
  126,  127,  127,  185,  185,  185,  185,  128,  150,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,  129,
  129,  186,  186,  186,  186,  186,  186,  186,  130,  130,
   94,   94,   94,  131,  131,  187,  187,  187,  187,
};
static int yylen[] = {                                         2,
    0,    2,    4,    4,    3,    1,    1,    1,    1,    1,
    1,    4,    4,    4,    4,    1,    1,    1,    2,    2,
    3,    2,    2,    1,    1,    1,    4,    1,    0,    2,
    1,    3,    2,    4,    6,    1,    1,    1,    1,    3,
    1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
    4,    2,    3,    2,    2,    2,    1,    1,    2,    1,
    2,    4,    6,    3,    5,    7,    9,    3,    4,    7,
    1,    1,    1,    2,    0,    2,    2,    0,    6,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    2,
    3,    1,    2,    3,    7,    0,    2,    2,    2,    2,
    2,    3,    3,    2,    1,    4,    3,    0,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
    2,    2,    2,    5,    0,    2,    0,    2,    0,    2,
    3,    1,    0,    1,    1,    3,    0,    3,    1,    1,
    1,    1,    1,    1,    4,    0,    2,    4,    0,    2,
    5,    4,    3,    0,    2,    3,    0,    1,    5,    3,
    4,    4,    4,    1,    1,    1,    1,    1,    2,    2,
    4,   13,   22,    1,    1,    5,    3,    7,    5,    4,
    7,    0,    2,    2,    2,    2,    2,    2,    2,    5,
    2,    2,    2,    2,    2,    2,    5,    0,    2,    0,
    2,    0,    3,    9,    9,    7,    7,    1,    1,    1,
    2,    2,    1,    4,    0,    1,    1,    2,    2,    2,
    2,    1,    4,    2,    5,    3,    2,    2,    1,    4,
    3,    0,    2,    2,    0,    2,    2,    2,    2,    2,
    1,    1,    1,    1,    9,    0,    2,    2,    0,    2,
    2,    2,    2,    1,    1,    1,    1,    1,    0,    4,
    1,    3,    1,   13,    0,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    5,    8,    6,    5,    0,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    4,    4,
    4,    4,    5,    1,    1,    1,    0,    4,    4,    4,
    4,    0,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    5,    1,    0,    2,
    2,    1,    2,    4,    5,    1,    1,    1,    1,    2,
    1,    1,    1,    1,    1,    4,    6,    4,    4,   11,
    1,    5,    3,    7,    5,    5,    3,    1,    2,    2,
    1,    2,    4,    4,    1,    2,    2,    2,    2,    2,
    2,    2,    1,    2,    1,    1,    1,    4,    4,    2,
    4,    2,    0,    1,    1,    3,    1,    3,    1,    0,
    3,    5,    4,    3,    5,    5,    5,    5,    5,    5,
    2,    2,    2,    2,    2,    2,    4,    4,    4,    4,
    4,    4,    4,    4,    5,    5,    5,    5,    4,    4,
    4,    4,    4,    4,    3,    2,    0,    1,    1,    2,
    1,    1,    1,    1,    4,    4,    5,    4,    4,    4,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    8,    8,    8,    8,    7,    7,    7,    7,    7,    0,
    2,    2,    0,    2,    2,    0,    2,    0,    2,    0,
    2,    0,    2,    0,    2,    0,    2,    2,    0,    2,
    3,    2,    0,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    2,    3,    3,    4,    4,    2,    2,    2,
    2,    3,    2,    2,    2,    5,    3,    2,    2,    2,
    2,    2,    5,    4,    6,    2,    4,    0,    3,    3,
    1,    1,    0,    3,    0,    1,    1,    3,    0,    1,
    1,    3,    1,    3,    4,    4,    4,    4,    5,    1,
    1,    1,    1,    1,    1,    1,    3,    1,    3,    4,
    1,    0,   10,    6,    5,    6,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    2,    2,    1,    1,    1,    1,    2,    3,    4,    6,
    5,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    1,    2,    2,    4,    1,    2,    1,    2,    1,    2,
    1,    2,    1,    2,    1,    1,    0,    5,    0,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    2,    1,    1,    1,    1,    1,    3,
    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    3,
    2,    2,    3,    4,    2,    2,    2,    5,    5,    7,
    4,    4,    3,    3,    2,    4,    3,    3,    2,    1,
    1,    2,    3,    2,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    2,    2,    1,
    1,    1,    1,    1,    1,    3,    0,    1,    1,    3,
    2,    6,    7,    3,    3,    3,    6,    0,    1,    3,
    5,    6,    4,    4,    1,    3,    3,    1,    1,    1,
    1,    4,    1,    6,    6,    6,    4,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    3,    2,    5,    4,    7,    6,
    7,    6,    9,    8,    3,    8,    4,    0,    2,    0,
    1,    3,    3,    0,    2,    2,    2,    3,    2,    2,
    2,    2,    2,    0,    2,    3,    1,    1,    1,    1,
    3,    8,    2,    3,    1,    1,    3,    3,    3,    4,
    6,    0,    2,    3,    1,    3,    1,    4,    3,    0,
    2,    2,    2,    3,    3,    3,    3,    3,    3,    0,
    2,    2,    3,    3,    4,    2,    1,    1,    3,    5,
    0,    2,    2,    0,    2,    4,    3,    1,    1,
};
static int yydefred[] = {                                      1,
    0,   85,    0,    0,  268,    0,    0,    0,    0,  773,
  774,    0,    0,    0,    0,    0,    0,  851,    0,    0,
    0,    0,    0,    0,    0,   28,    0,    0,    0,    0,
   57,   58,    0,   60,    0,    0,    0,   83,   84,    2,
    0,    0,  339,    6,    7,    8,    9,   10,   11,    0,
    0,    0,    0,   16,   17,   18,   24,   25,   26,    0,
  108,    0,  275,    0,    0,  830,   36,   39,   37,    0,
   38,    0,  192,  394,  395,    0,  758,  759,  760,  761,
  762,  763,  764,  765,  766,  767,  768,  769,  770,  771,
  772,    0,    0,    0,  219,  220,    0,    0,  226,  227,
    0,    0,    0,    0,    0,  223,    0,   71,  218,    0,
    0,    0,    0,  794,    0,    0,    0,    0,   41,   19,
   20,   43,   42,   22,   23,  562,  724,    0,  701,  709,
  707,    0,  710,  711,  712,  713,  714,  715,  720,  721,
  722,  723,  679,  708,    0,  700,    0,    0,    0,  495,
    0,  563,  564,  565,    0,    0,    0,    0,    0,    0,
  705,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   59,  439,    0,    0,    0,    0,  139,    1,
    0,  804,  822,  840,  854,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  390,  397,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  568,    0,  561,    0,   31,    0,    0,    0,    0,
    0,    0,  228,  229,  230,  231,  221,  222,   72,    0,
   73,    0,    0,  103,    0,   21,  789,    0,    0,  795,
  796,  797,  799,    0,  800,  801,  802,  803,    0,  852,
  853,    0,    0,    0,  716,  717,  718,  719,  678,    0,
  681,    0,  702,  704,  237,  238,    0,    0,  682,    0,
    0,    0,    0,    0,    0,  695,    0,  687,    0,    0,
    0,    0,    0,  686,  685,    0,    0,    0,    0,    0,
  234,    0,    0,    0,   64,  440,   68,  735,    0,    0,
  496,  497,  499,  500,  501,  502,  503,  504,  498,  505,
  506,  507,  508,  509,    0,  375,    0,  338,  346,  347,
    0,    0,    0,    0,  368,    5,    0,  511,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  348,  352,  351,  354,  353,  355,    0,  340,
  342,  349,  361,  339,    0,    0,    0,    0,    0,    0,
  102,    0,  111,  132,  109,  110,  113,  114,    0,  115,
  116,  117,  118,  119,  120,  121,  122,  112,  131,  124,
  123,  133,    0,  136,    0,  107,    0,  281,  276,  277,
  278,  279,  280,  284,  282,  292,  283,  285,  286,  287,
  288,  289,  290,  291,    0,  293,  317,    0,    0,    0,
  416,    0,  415,    0,  414,    0,  413,    0,  411,    0,
  412,  436,    0,    0,    0,    0,  785,  775,    0,    0,
  833,  832,  831,    0,    0,    0,  213,    0,  199,  193,
  194,  195,  196,  201,  202,  203,  204,  198,  205,  206,
  197,    0,    0,  391,    0,    0,    0,    0,    0,  744,
    0,  743,    0,    0,    0,    0,    0,  314,  315,    0,
    0,    0,    0,   75,   69,    0,   96,  791,    0,    0,
  798,    0,  680,  703,    0,    0,    0,    0,  694,    0,
    0,    0,    0,    0,  693,    0,    0,    0,    0,  728,
  683,    0,  725,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   30,   27,    0,  105,  242,  256,    0,    0,
  830,    0,    0,    3,    0,  339,  174,  175,  177,  176,
  178,  184,  185,  140,    0,    0,    0,    4,  341,  343,
    0,    0,    0,    0,    0,    0,    0,  350,  513,  512,
  518,  519,   44,    0,    0,  510,  520,  521,  524,  523,
  525,  529,  530,    0,  528,    0,  531,    0,    0,    0,
    0,  536,    0,    0,    0,    0,    0,  385,    0,  383,
  386,  369,    0,    0,    0,    0,    0,    0,    0,    0,
  372,    0,    0,    0,    0,   12,  807,  815,  816,  805,
  808,    0,    0,  827,    0,    0,   13,    0,  825,    0,
  823,    0,    0,    0,    0,   14,  847,  848,  841,    0,
    0,   15,  858,  859,  855,    0,  125,  126,  127,  128,
  129,  130,    0,  106,  142,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  396,    0,    0,
  404,    0,    0,  834,  835,  836,  837,  838,  839,    0,
    0,    0,    0,    0,    0,    0,    0,   75,    0,    0,
    0,    0,    0,   32,    0,  224,  233,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  692,    0,    0,    0,    0,    0,    0,    0,    0,  684,
  691,    0,    0,    0,    0,    0,  179,  180,    0,    0,
    0,    0,    0,  139,    0,  245,  259,  840,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  515,  514,    0,    0,    0,    0,    0,    0,
  522,    0,  553,    0,    0,    0,  551,  367,  384,  370,
    0,  387,  376,  377,  378,  379,  381,  382,  380,    0,
    0,    0,    0,  810,  809,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  846,    0,    0,    0,
    0,    0,    0,  151,  153,  152,  154,    0,  149,  150,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  401,    0,    0,    0,    0,    0,  398,  403,    0,
  777,    0,    0,  588,  626,  580,  581,    0,  615,  582,
  583,  584,  585,  586,  587,  617,  593,  594,  595,  596,
    0,    0,    0,  623,    0,    0,    0,    0,  578,  579,
  602,  603,  604,  621,  605,  606,  607,  608,    0,    0,
  611,    0,  619,  625,  273,    0,    0,    0,    0,    0,
    0,    0,  732,    0,    0,    0,    0,  737,    0,   35,
    0,    0,    0,    0,    0,    0,    0,   63,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   76,  444,    0,   77,    0,   97,
   98,    0,   99,  100,  101,    0,    0,    0,    0,  688,
  689,  730,  726,    0,    0,    0,  244,  243,    0,    0,
  258,  257,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  170,    0,    0,    0,  358,    0,    0,    0,    0,
    0,    0,  359,    0,    0,    0,  517,  516,    0,  534,
    0,    0,  537,    0,    0,    0,  344,    0,    0,    0,
  373,  374,  806,  817,    0,  819,  811,  814,  792,  818,
  824,  826,    0,    0,    0,    0,    0,  134,    0,    0,
    0,    0,  157,    0,    0,    0,  148,  141,  294,    0,
    0,    0,  305,  306,  307,  308,  300,  301,  302,  299,
  303,  304,    0,    0,  297,    0,    0,    0,    0,    0,
    0,  402,  410,  409,  408,  407,  405,  406,    0,    0,
  207,  616,  589,  590,  591,  592,    0,  612,  618,  620,
  624,    0,    0,    0,  622,  609,  610,  664,  633,  634,
    0,  661,  635,  636,  637,  638,  639,  640,  663,  645,
  646,  647,  648,  631,  632,  653,  654,  655,  656,  657,
  658,  659,  660,  630,  665,  666,  667,  668,  669,  670,
  671,  672,  673,  674,  675,  676,  677,  649,    0,    0,
  597,  200,    0,  209,    0,  191,    0,  748,  749,  751,
  750,    0,  747,    0,  746,  733,    0,  740,   78,   75,
   70,    0,    0,  544,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   81,   82,    0,   80,    0,   95,    0,    0,
    0,  190,    0,    0,    0,    0,    0,    0,    0,  171,
    0,    0,    0,    0,  172,  251,  252,  253,  254,  246,
    0,    0,    0,  173,  265,  264,  266,  267,  260,  181,
    0,  362,    0,  365,  366,    0,   45,   46,    0,  533,
    0,  539,  540,  345,    0,  552,    0,    0,    0,  845,
  856,    0,    0,  160,    0,    0,    0,  145,    0,  163,
    0,    0,  296,    0,    0,    0,  318,  319,  320,  321,
    0,    0,  781,    0,  779,    0,    0,    0,    0,  662,
  641,  642,  643,  644,  651,    0,    0,  652,    0,  598,
    0,  272,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  443,    0,  211,  441,    0,
    0,   78,    0,    0,    0,  217,  216,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   88,    0,   87,   86,    0,  435,  786,  690,
    0,  186,    0,  189,    0,    0,  247,  248,  249,  250,
  263,  261,  262,  357,    0,    0,  535,  555,  388,  389,
    0,  155,    0,    0,  166,    0,  165,  162,    0,    0,
  309,  310,  311,  312,    0,    0,    0,    0,    0,    0,
    0,    0,  650,    0,    0,  599,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  741,   67,  169,    0,
    0,  434,    0,  433,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  424,    0,  423,    0,  422,    0,  421,
    0,  419,  417,    0,  418,  420,    0,  432,    0,  431,
    0,  430,    0,  429,    0,  450,    0,  446,  445,    0,
  449,    0,  448,    0,    0,   90,    0,    0,    0,    0,
    0,    0,  364,    0,    0,  158,  161,  146,  295,  313,
  270,    0,  783,    0,    0,  575,    0,  601,    0,  752,
    0,    0,    0,  757,  742,  215,  214,  484,  480,  428,
    0,  427,    0,  426,    0,  425,    0,  482,  480,  478,
  476,  470,  473,  482,  480,  478,  476,  493,  486,  447,
  489,   89,   91,    0,    0,  188,    0,    0,    0,    0,
  168,    0,    0,  628,    0,  574,    0,  600,    0,    0,
    0,    0,    0,  482,  480,  478,  476,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   79,    0,    0,    0,    0,  812,  322,    0,  754,  755,
  756,  466,  485,  465,  481,    0,    0,    0,    0,  456,
  483,  455,  454,  479,  453,  477,  451,  472,  471,  452,
  474,  475,  460,  459,  458,  457,  469,  494,  488,  487,
  467,  490,    0,  468,  492,  255,    0,    0,    0,    0,
    0,  464,  463,  462,  461,  491,    0,    0,  360,    0,
  327,  323,  332,  333,  334,  335,  336,  324,  325,  326,
  328,  329,  330,  331,  274,    0,    0,    0,    0,  573,
    0,    0,    0,    0,  182,  337,    0,    0,    0,    0,
    0,    0,    0,    0,  183,
};
static int yydgoto[] = {                                       1,
  158,   71,  472,  860,  159,  739,  105,  106,  765,   35,
   36,  685,  744,  411, 1079,   73, 1091,  791,  792,  981,
  982, 1028, 1490, 1491,  557, 1546,  745,  746,  747,  211,
  503,  504,  175,  176,  856,  857, 1086,  665, 1093, 1011,
 1258,  895,  896, 1512, 1513, 1508, 1503, 1510, 1511, 1502,
 1519, 1520, 1518,  161,  681,  506,  507, 1206, 1207,  986,
  683, 1317,  684,  897,  671,  672, 1145,  766, 1210,  793,
  634,  212,  229,  230,  107,  231,  108,  214,  187,  190,
  208, 1570,  705,  706,  797,  666,  667,   92,   37,  113,
  479,  115,  205,  116,   38,   39,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,   40,   41,  299,   42,   43,  181,   44,  343,   46,
   47,  344,   49,   50,  357,   51,  358,   52,  359,   53,
  360,   54,  345,  346,  347,   58,  348,  293,   60,   61,
   62,  189,  386,  636,  534,  535,  933,  536,  934,  537,
  215, 1170, 1179,   63,  858,  349,  350,  351,  352,  752,
  354,  355,  582,  583,  356,  584,  753,  585,  586,  587,
  588,   64,  201,   76,  423,  424,  899,   65,  608,  600,
  601,  602,  603,  610,  611,  619,  625,
};
static int yysindex[] = {                                      0,
15661,    0, -370,  672,    0,   80, -221, 1957, 1957,    0,
    0, -146, 1096,  133,  107, -322, -258,    0,  -37,  -25,
  -25,  253,  253,12978,  125,    0,  672,  672,  672,  672,
    0,    0,   98,    0,  120,  120,  120,    0,    0,    0,
  142,  280,    0,    0,    0,    0,    0,    0,    0,  299,
  356,  364,  410,    0,    0,    0,    0,    0,    0,  120,
    0,   76,    0,  606,  -25,    0,    0,    0,    0,  496,
    0,  -25,    0,    0,    0,   -8,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1794,   19,  519,    0,    0,  545,  560,    0,    0,
  734,  755,  755,13181,11607,    0,  582,    0,    0,  566,
  -25,  -25,  231,    0, 1154,  648,  672,  496,    0,    0,
    0,    0,    0,    0,    0,    0,    0,11607,    0,    0,
    0,  861,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  878,    0,  323,  878,  726,    0,
 7215,    0,    0,    0, 1760,   34,  532,  496,  601,  264,
    0,  285,  288,    0,  309,  321, 1659,  878,   24,  496,
  496,  496,    0,    0,  649,  518,  748,  777,    0,    0,
14541,    0,    0,    0,    0,  833, 4803, 1794,  513, 6575,
  805,   65,   67,   90,   91,  101,  151,  818, 1362,  837,
    0,    0,  120,   74,  853,  672,  807,12604,  825,   96,
  128,    0,  160,    0,  755,    0,  864,   46,  870,  662,
  -25,  -25,    0,    0,    0,    0,    0,    0,    0,  890,
    0,12199,  111,    0,  844,    0,    0,   -2, 1154,    0,
    0,    0,    0,  491,    0,    0,    0,    0,  496,    0,
    0,   -3,  496,    0,    0,    0,    0,    0,    0,  878,
    0,  690,    0,    0,    0,    0,12764,  553,    0,  672,
  896,   82,  898,  739,  496,    0,  672,    0,  956,  989,
  672,   12,11607,    0,    0,  672,  672,  672,  672,11607,
    0,  878,  909,  870,    0,    0,    0,    0,12554,15550,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -25,    0,  -25,    0,    0,    0,
  -25,  953,  -42,13284,    0,    0,  995,    0,  760,  -25,
  253,  293,  760, 1659, 6904, 1023, 1794, -165,  755,13181,
 1026,  120,    0,    0,    0,    0,    0,    0,    1,    0,
    0,    0,    0,    0,  785,  318, 5875,  229, 1974,  268,
    0, 1029,    0,    0,    0,    0,    0,    0,  793,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  393,    0, 1794,    0, 1033,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1035,    0,    0, 1043,  -25,  -25,
    0,  -25,    0,  -25,    0,  253,    0,  711,    0,  711,
    0,    0,  962, 1056,   -8, 1062,    0,    0,  -25,  -25,
    0,    0,    0, 1020,  496,    0,    0, 1075,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1077,  811,    0,  672,  185,  859, 1006,11607,    0,
13384,    0,  871, 1091, 1099, 1106, 1659,    0,    0,  115,
  496, 1089,  877,    0,    0,  870,    0,    0,  698,   14,
    0,  672,    0,    0,  496,  908,  739,  496,    0,  370,
  672,  672,  672,  496,    0,  496, 1794, 1794,  496,    0,
    0,  914,    0,   43,  128, 1130, 1156,  496,  496,  496,
  496,12349,    0,    0,  840,    0,    0,    0,  -25,  -25,
    0, -290,13487,    0, 1079,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1083, 1100, 1114,    0,    0,    0,
 1149,  -25,  367,  596,  -25,    0,  961,    0,    0,    0,
    0,    0,    0, 1199, 1201,    0,    0,    0,    0,    0,
    0,    0,    0,12764,    0,   48,    0, 1205,  870,  120,
11607,    0,  760, 1207, 1206,    0,14640,    0, 1794,    0,
    0,    0,  785,  -62,  -62,  -62,  -62,  318,  933,  939,
    0,  781, 1203,  106,   18,    0,    0,    0,    0,    0,
    0,  120,  120,    0, 1210, 1211,    0,  120,    0,  120,
    0, 1252, -127,  672,  812,    0,    0,    0,    0,  672,
  826,    0,    0,    0,    0,  -25,    0,    0,    0,    0,
    0,    0,   45,    0,    0, 1258,  -25,  859, 1170,  859,
 1255, 1214, 1267, 1268, 1274, 1278, 1281,    0, 1362, 1285,
    0, 1269, 1287,    0,    0,    0,    0,    0,    0,  -25,
16016,   16,  450,    0,  172, 1292, 1293,    0,  176,  895,
 1294, 1215, 1275,    0, 1078,    0,    0, 1282, 7526, 1309,
 1314,  540, 1230, 3561,  497,  120,  672,  496,  672,  496,
    0,  672,  601,  601,  601, 1316, 1317,  -25,   12,    0,
    0,11607, 1319, 1794,13081, 1021,    0,    0,  853,  618,
  636,    0, 1090,    0,14792,    0,    0,    0,  -25, 1276,
  -25,  496,  -25,  428, 1277,11607,  540,  -25,  253,  496,
 1093,  760,    0,    0,  859, 1331,  804, 1329, 1339, 1338,
    0,    0,    0, 1170, 1348, 1346,    0,    0,    0,    0,
  760,    0,    0,    0,    0,    0,    0,    0,    0,   -8,
  -25,  -25, 1354,    0,    0, 1337, 1357,  870, 1360, 1363,
 1366, 1367, 1368, 1371,  -25,  672,    0,  496,  672,   17,
  672, 1372, 1376,    0,    0,    0,    0, 1109,    0,    0,
  452,  341, 1358, 1794, 1378,    3,  156, -208,   35,  534,
 1332,    0, 1332, 1332, 1332, 1332, 1332,    0,    0,  -25,
    0,  -25, 1383,    0,    0,    0,    0,  996,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1385,  910,  936,    0,  926, 1394, -364, 1158,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1385, 1385,
    0, 4130,    0,    0,    0,  524, 1397,  120,   -8, 1379,
    0, 1359,    0,  859, 1318,    0,13384,    0, 1321,    0,
  127,  -25, 1377,    0,    0,  496, 1089,    0,  384,  386,
  932,  440,  441,  473,  481,  521,  550,  565,  568,  581,
  583,  598,  627,  681,    0,    0,  -14,    0,  120,    0,
    0,   -8,    0,    0,    0, 1414,  496,  496,  601,    0,
    0,    0,    0,  128,    0, 1007,    0,    0,  496,  672,
    0,    0,11607,  496,  -25,  496,  -25,  806,11607,  540,
15730,    0, 1145, 1246, 2412,    0, 1073, 1373, 1384, 1794,
 1379,12764,    0, 1428, 1429,  672,    0,    0,  827,    0,
    0,  760,    0,  760, 1430,   35,    0,    0, 1162, 1164,
    0,    0,    0,    0,  106,    0,    0,    0,    0,    0,
    0,    0, 1444,  601,  496,  -25,  496,    0,  -25, 1448,
 1109, 1794,    0, 1794,  901,  672,    0,    0,    0,  859,
  670, 1450,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1433, 1434,    0, 1403, 1406, 1407, 1413, 1467,
  540,    0,    0,    0,    0,    0,    0,    0, 1464,    0,
    0,    0,    0,    0,    0,    0, 1008,    0,    0,    0,
    0,  859, 1421, 1423,    0,    0,    0,    0,    0,    0,
 1261,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   -6,  179,
    0,    0,  -29,    0, 1846,    0, 1475,    0,    0,    0,
    0,  870,    0, 1477,    0,    0, 1395,    0,    0,    0,
    0,  870, 1439,    0, 1481, 1482, 1506, 1507,  411,  -25,
  -25,  -25,  688,  721,  791,  794,  -25,  -25,  -25,  -25,
  -25,  -25,  253,  -25,  663,  -25,  922,  -25,  -25,  -25,
  -25,  -25,  -25,  -25,  253,  -25, 3561,  -25, -123,  -25,
 1057,  -25,    0,    0, 3136,    0, 1508,    0, 1128, 1513,
 1659,    0,  496,  811, 1455, 1462, 1794,12764, 1045,    0,
 1659, 1659, 1659, 1659,    0,    0,    0,    0,    0,    0,
 1659, 1659, 1659,    0,    0,    0,    0,    0,    0,    0,
   -8,    0, 1516,    0,    0, 1283,    0,    0,  496,    0,
 1520,    0,    0,    0,   -8,    0,   -8,  -25, 1504,    0,
    0, 1522,  -25,    0,  672, 1525, 1524,    0,   45,    0,
  901,  870,    0,  -25,  461,  713,    0,    0,    0,    0,
16016, 1509,    0,  -25,    0, 1518, 1067,  -25,  -25,    0,
    0,    0,    0,    0,    0,  859, 1487,    0,  -25,    0,
   49,    0, 1541, 1544, 1004, 1547, 1549, 1552, 1553, 1560,
 1561, 1562, 1564, 1565, 1567,    0,  870,    0,    0,  -25,
  584,    0,  203, 1486, 1551,    0,    0,    0,    0, 1576,
 1531, 1577, 1532,  -25,  -25,  -25,  -25,  -25,  -25,  253,
  -25, 1585, 1535, 1589, 1542, 1598, 1554, 1600, 1558, 1611,
 1618, 1579, 1628, 1629, 1580, 1634, 1595, 1637, 1596, 1649,
 1599, 1650, 1607, 1652, 1608, 1665, 1666, 1615, 1668, 1449,
 1670, 1638,    0,  -17,    0,    0,  720,    0,    0,    0,
   62,    0, 1678,    0, 1453,  755,    0,    0,    0,    0,
    0,    0,    0,    0, 1794,  540,    0,    0,    0,    0,
  106,    0, 1695,  901,    0, 1794,    0,    0,  742, 1696,
    0,    0,    0,    0, 1701, 1703,    0,  -25,  859, 1651,
 1653,  870,    0, 1654,  -25,    0, 1705, 1709, 1711, 1712,
 1713, 1697, 1698, 1704, 1718,  212,    0,    0,    0, 1720,
 1722,    0, 1728,    0, 1729, 1731, 1677, 1732, 1684, 1737,
 1686, 1739, 1699,    0, 1749,    0, 1750,    0, 1751,    0,
 1754,    0,    0, 1755,    0,    0, 1756,    0, 1757,    0,
 1758,    0, 1759,    0, 1765,    0, 1769,    0,    0, 1770,
    0, 1771,    0, 1773, 1555,    0, 1721,   54,    0, 1794,
  540,11607,    0, 1761, 1762,    0,    0,    0,    0,    0,
    0,    0,    0, 1774,  876,    0,16044,    0, 1726,    0,
  -25,  -25,  -25,    0,    0,    0,    0,    0,    0,    0,
 1782,    0, 1783,    0, 1784,    0, 1785,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3561, 1787,    0, 1761,12764, 1746, 1836,
    0,  106, 1837,    0,  859,    0,    0,    0, 1838, 1840,
 1841,   28,   37,    0,    0,    0,    0,   83,   94,  154,
  102,  218,  405,  164,  167,  168,  143, 1730,   30,  577,
    0, 1379, 1843, 1603,    0,    0,    0, 1084,    0,    0,
    0,    0,    0,    0,    0,  184,  188,  200,  148,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1621,    0,    0,    0,    0,  540, 1845, 1881,
  859,    0,    0,    0,    0,    0, 1847, 1849,    0, 1850,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  911, 1389,    0,  -25,    0,
 1529, 1854, 1860,  755,    0,    0,11607,12764, 1631,  540,
 1761, 1863,    0, 1869,    0,
};
static int yyrindex[] = {                                      0,
    0,    0, 5241,    0,    0,12859, 1548,    0,    0,    0,
    0,    0,12018,    0,    0,  373, 1844,    0, 2911,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1876, 1876, 1876,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1876,
    0,  -56,    0,    0,    0,    0,    0,    0,    0, 1796,
    0,    0,    0,    0,    0, 1243,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 9775,    0,    0,    0,    0,    0,    0,
 7837,13783,13783,    0,    0,    0, 8291,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3349,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1880, 2756,    0,
    0,    0,    0,    0,    0,    0,12018, 1800, 6867, 7178,
 7489, 7800,    0,    0,    0, 1885,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1806,13783,
    0,11538,11538,11538,11538,11538,11538,    0,    0,    0,
    0,    0, 1876,10153,    0,    0,    0,    0,    0,    0,
 9168,    0,11107,    0,12018,    0,    0,    0,11287,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1126,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1807,    0,
    0, 1809, 3787, 6565,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4946,    0,    0,    0,    0,    0,
    0, 1889, 1872,    0,    0,    0,    0,    0,    0,    0,
    0, 1800,    0, 8111,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,12018,    0,    0,    0,    0,12018,    0,
    0, 1876,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -24,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1810,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1813, 1442,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1812,    0,    0, 9973,    0,    0,12018,    0,    0, 1889,
   87, 1898,    0,    0,    0, 8547,    0,    0, 4225, 1820,
    0,    0,    0,    0,14055,    0,    0, 5384,    0,    0,
    0,    0,    0, 5822,    0, 2318,    0,    0, 4663,    0,
    0,  591,    0,    0,  578,    0, 1882, 5101, 5539, 5977,
11746,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,14875, 1876,
    0,    0, 1904,    0,    0,  976,    0,    0,    0,    0,
    0,    0,14972,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1876, 1876,    0,    0,    0,    0, 1876,    0, 1876,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  475,    0,    0, 1823,    0, 1041,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,10351,    0,    0,    0,    0,    0,    0,    0,
  119, 2035,    0, 9419,    0,    0, 1906,    0,    0,    0,
 1824,    0,    0,    0,    0,    0,    0, 8727, 1872,    0,
    0,    0,    0,  -21,    0, 1876,    0, 1825,    0, 6260,
    0,    0, 3194, 3632, 4070,    0,    0,  729,  750,    0,
    0,    0,12492,    0,    0,12018,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,15167,    0,    0,    0,    0,    0,    0,    0,14389,
    0,    0,    0,    0,    0,    0,    0, 1909,    0, 1915,
    0,  976,    0,    0,    0, 1916,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  552,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2849,    0,    0,
    0,    0,    0,    0,    0,    0,    0,13573,    0,    0,
  475,    0,    0,    0,    0, 1041,    0,    0,  727,    0,
11538,    0,11538,11538,11538,11538,11538,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  444,    0,    0,    0,    0,    0,    0,  612,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  444,  444,
    0,   -7,    0,    0,    0, 1917,    0,    0,    0, 2473,
 9604,    0,    0,    0,    0,  108, 1812,    0,    0,    0,
    0,    0,    0,  976,  976,13903, 1898,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1835,    0, 1876,    0,
    0,    0,    0,    0,    0,    0, 1839,14207, 4508,    0,
    0,    0,    0,  758,  976,    0,    0,    0,  661,    0,
    0,    0,    0, 1842,    0,15803,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,15264,    0,    0,    0,
15347,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  976, 1904,    0, 1904,    0,  146,    0,13847,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3287, 3725,    0,  657,    0,    0,    0,
13573,    0,    0, 1922, 1902,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,10531,10729,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1112,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  462,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 8983,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,11907,    0,
12018,    0, 1852,    0,    0,    0,    0,    0,    0,    0,
12018,12018,12018,12018,    0,    0,    0,    0,    0,    0,
12018,12018,12018,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,15499,    0,
    0,    0,    0,    0,  509,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1925,    0,  475,    0,
 1902, 1041,    0,    0,    0,    0,    0,    0,    0,    0,
  119, 1927,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,11712,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  976,  976,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,12018,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1902,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,10909,    0,    0,    0,
    0,  683,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  976,    0,
    0,    0,    0, 1947,    0,    0,    0,    0,    0,    0,
    0,  976,    0,    0,    0,    0,  119,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1947,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1948,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1865,    0,    0,  976,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  976,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  976,    0,    0,
    0,    0,    0,12018,    0,    0,    0,    0,    0,    0,
 1947,    0,  976,    0,    0,
};
static int yycindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,14306,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1727,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  402,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1899,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1945,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1900,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,13658,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1719,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1733,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  788,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   55,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,13727,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1723,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1953,    0,    0,    0,    0,    0,    0,    0,    0,
  817,    0,    0,    0,    0, 1936,    0,    0,    0,    0,
    0,    0,    0, 1724, 1735,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1740,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1744,    0,    0,    0,    0,    0,    0, 1781,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1738, 1743,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1911,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1786, 1788,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1763,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1789,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1791,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  744,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1792,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1793,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1799,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1804,    0,    0,
};
static int yygindex[] = {                                   1856,
   -4,  109, -634,    0, -434,   56,  -99,    0,  100,    0,
    0,    0, 1617, -143,    0,    0,-1067,    0, 1234,    0,
 1048,  326,-1415, -432, -408,  -15, -695,    0, 1072,  -22,
 1333,    0,   29, 1176,  593,  824, -919,  -84,    0, 1092,
    0,-1082,  964,    0,    0,-1341, -642,-1302,-1260,    0,
    0,    0,    0, -150, 1182, 1381,    0,    0,    0,    0,
 -633,    0,    0,-1017,    0, 1216,    0, -937,-1117,  873,
  866,  -23,   86, 1753, 1622, 2073, -131,    6,    0,    0,
    0,    0,    0,    0, -757, 1237,    0, 2089,    0,    0,
  954, 1992, 1588,    0,  -11, 2086,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -285, 1398,    0, -282, -251, -279,   20,    0,
    0,   10,    0,    0,    0,    0,    0,    0, 1393,    0,
    0,    0,   15,    5,   32,    0,   26, 1821,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,    0,    0,    0,    0,    0,    0,    0, -163,
    0,    0, 1533,    0,    0,    0,  170,    0,    0,    0,
    0,    0,    0,    0, 1465, 2051,  -35,    0, 1641,    0,
 1764,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 16548
static int yytable[] = {                                      70,
  162,  160,  227,  228,  269,   56,  124,  125,  219,  646,
   48,  647,  165,  525,  118,   55,  526,  353,  109,  527,
   45, 1185,  169,  170,  171,  172,   59, 1199,  203,  164,
  629, 1238,   57,  629,  865,  291,  629, 1236,  991,  680,
  576, 1270,  206,  206,   34,  463,  955,  877,  545,  413,
  415,  417,  419,  421, 1304,  119,  693,  694,  695,  206,
  325,  206,  206,  167,  177,  178,  135,  290, 1532,  206,
 1561, 1523,  285,  156,  710,  271,  284, 1534,  767,  218,
  732, 1263,  232,  629,  294,  462,  699,  789,  186,  790,
  407, 1365,  943, 1348,  283, 1242,  216,   74,  147,  206,
   66, 1429,  577,   78,  409,  254,  412,  206,  238,  164,
  249,  252,  253,   91, 1484,  459,   94,  429, 1033,  120,
  121,  259,  198, 1540,  261,  282,  316,  206,  267,  414,
  416,  430, 1514,  566, 1542,  700,  119,  271, 1034, 1306,
  418, 1366, 1545,  167,  292,   37,  316,  764,  476,   37,
  475,  272,  275,   37,   37,  410,  271,  410,   75,  572,
  572,  273, 1536,  203,  204,  285, 1101,   37,  461,  284,
   72,  207,  109, 1516,  492, 1307,  568,  213, 1105, 1106,
  410,  410,  383, 1556,  209,  453,  269,  283, 1575,  269,
  420,  410,  591,  110, 1543, 1612, 1005,  111,   37,  457,
  435,  436,  561, 1538, 1553,  456,  112, 1554, 1555,  572,
  235,  236,  114,  285,  463,  273, 1517,  703,  282, 1150,
  458, 1239,   67,   68, 1572,   69, 1437,  471, 1573,  694,
  206,  426,  862,  474,  480,  283,  483,  296,  119,  571,
 1574,  410,   67,   68, 1376,   69, 1539,  168,  751, 1100,
  126,   67,  711,  569,   69, 1191,  276,  909, 1547,  135,
  505,   34,  485,  488,  179,  490,  282,  512,  292,  494,
   34, 1240,  496,  384,  715,  119,  499,  664,   98,  216,
  216,  508,  509,  510,  511,  216,  500,   34, 1425,  327,
  147,  147, 1559,   67,   68, 1159,   69, 1006, 1007, 1008,
  119,  285,  570,  531,   56,  284,  217,   67,  529,   48,
   69,  119,  564,  530,   55,  552,  558,  473,  528,   45,
  465,  466,  543,  283,  533,   59,   34, 1377, 1560,   98,
  532,   57,  556,  859,  976,  427, 1455,   78,  783,  109,
  565,  974,   78,  776, 1143,  164,  119, 1088, 1089, 1144,
  784,  785,  486,  607,  282,   67,   68,  119,   69,  173,
  566,  598,  598,  617,  623,  122,  123,  489,  786,  119,
  574,  597,  216,  495,   67,   68, 1222,   69,  119,  167,
  984,  502,  599,  599,  618,  624,  174,  482,  216,  500,
  188,   98,  622,  990,  278,  279,  280,  152,  153,  154,
  645, 1521,  180, 1435,  687,  269,  122,  123,  269,  547,
   98,  122,  123,  353,  539,  206,  540,  119,  787,  478,
  541,  182,  567, 1109,  759, 1111,  909,  119,  550,  551,
  119,  119,  560,  117, 1533, 1558,  669,  549,  206,   25,
  325,  559,  119,   22, 1107, 1550,  726,  119,  662,  992,
  663,  119,  633,  575, 1349,  590,  993,  721,  994,  995,
  996,   19,  692,  119,  589,  456, 1264,   37,   37,   37,
  635,  940,  109,  206, 1110,  273, 1112,  688,  183, 1117,
 1119,  119,  690,  553,  627,  627,  184,  278,  279,  280,
   67,   68,   16,   69,  789,  206,  790,  997,  998,  999,
  544,    2,  753,  554,  555,  753,  270,  471,  641,  642,
  768,  643, 1121,  644,  156, 1010,  122,  123,  629, 1235,
 1123,   27,   28,   29,   30,   31,   32,   33,  652,  653,
 1118, 1120,  185,  650,  627,  278,  279,  280,  722,  724,
    2,  206,  861, 1000, 1001, 1002,  673, 1003,  737,  554,
 1004,  353,  554,  796, 1526,  800,  122,  123,  553,  730,
 1125, 1143,  220, 1122,  274, 1081, 1144,  604,  455,  502,
 1143, 1124, 1380, 1381, 1012, 1144,  463,   67,  554,  555,
   69,  119,  696,  697,  221,  487,  691,  455,  788, 1127,
   70,   73,   76,   79,   82,   85,   88,  473,  736,  222,
   67,   68, 1566,   69, 1129,  234,  923, 1131,  713,  778,
  813, 1126,  929,  203, 1080,  780,  799, 1564,  707,  708,
 1133,  547, 1135,  278,  279,  280,   67,   68,  260,   69,
  769,  770,  788,  788,  729,  788,  773, 1137,  774,  547,
 1128,  720,  233,  200,  725,  525,  259,  277,  526,  731,
  949,  527,  577,  577,  281, 1130,  505, 1013, 1132, 1014,
 1015, 1016, 1017, 1018,  749,  734, 1139,  156,  122,  123,
  553, 1134,  740, 1136,  733,  286,  813,  876,  287,  914,
   13,  738,  907,  729,  908,  327,  723,  758, 1138,  295,
  554,  555,  605,  237,  593,  606,  757,  594,  595,  288,
  919, 1434,  577,  942,  924,  926,  928,  566,  925,  898,
 1213,  289,  777,  945,  906,  857, 1291, 1140, 1293,   13,
 1141,  956,  876,  614,  614,  782,  927, 1274,  199,  620,
 1088, 1089,  621, 1485,  156,  156,  795,  156,   27,   28,
   29,   30,   31,   32,   33,  783, 1493,   27,   28,   29,
   30,   31,   32,   33,  754,  755,  756,  784,  785,  813,
 1276,    7,   10,   13,   27,   28,   29,   30,   31,   32,
   33, 1142,  731,  614,  975,  786,  977, 1092, 1275,  900,
  901,  857, 1439,  241,  296,  124, 1102,  985,  297,  916,
  920,   67,   68,  727,   69,  119, 1487,  912,  502,   67,
   68,  548,   69,   27,   28,   29,   30,   31,   32,   33,
 1427, 1277,   67,   68,  902,   69,  119,  298,  936,  548,
  938,  731,  939,  327,  813,  787, 1509,  944,  385, 1569,
 1278,  948, 1515, 1280,  121,  788,   67,   68, 1094,   69,
  947,  285,  727,  951,  126,  284,  408,  119,  285, 1157,
  960,  206,  284, 1351, 1352,   67,   68,  422,   69,  959,
  962,  963, 1537,  283, 1372, 1373, 1374, 1190,  961,  463,
  283, 1577,   98,  361,  973, 1562,  425,   67,   68,  988,
   69, 1279, 1563,  191, 1281,  454,  192,  193,  194,  195,
  813,  196,  197,  198,  282,   67,   68, 1009,   69,  437,
 1154,  282, 1602,  460, 1152, 1212, 1158,   67,   68, 1019,
   69, 1020,  463,  468,  469, 1153, 1496, 1614,  463, 1495,
  566,  566, 1146,  566,  464,  876,  119, 1147,  553,  857,
  467,   67,   68, 1578,   69,  531,  477, 1167, 1176,  617,
  529, 1189, 1166, 1175, 1209,  530,  206, 1227,  554,  555,
  528, 1600,  673,  463,  903,  904,  533,  905, 1169, 1178,
  618, 1090,  532,  992, 1168, 1177,  481, 1084,  156,  484,
  993, 1103,  994,  995,  996, 1611,  553,  250,  251,   67,
   68, 1211,   69,  813,  813,  156,  269,  269,  491,  269,
  493,  152,  153,  154, 1316,  497,  554,  555,   67,   68,
 1257,   69,  119,  813,  262,  263,  876, 1192,  317, 1193,
 1148,  997,  998,  999,  264,  813,  549,  813,  813,   67,
  813,  813,   69,  119, 1155, 1184, 1156, 1186,  498, 1327,
 1328, 1329, 1330,  514,  223,  992,  224,  225,  226, 1331,
 1332, 1333,  993,  542,  994,  995,  996,   61,   64,   97,
   67,  740,  548,  740,   99,  566,  100, 1000, 1001, 1002,
  738, 1003,  738,  101, 1004,  573,  317, 1205,  626, 1208,
   67,   68,  637,   69,  638, 1201,   97,  100, 1202,  103,
  102,  298,  640,  997,  998,  999,  648,  813,  813,  813,
  813,  813,  813,  813,  578,  103,  579,  580,  581,  649,
  269,  269,  651, 1549, 1551, 1353, 1354, 1288,  857,  463,
 1359, 1294,   67,   68,  660,   69,  661, 1311,  857, 1302,
  216,  857,  627,  628,  629,  790,  463, 1571,  668, 1000,
 1001, 1002,  674, 1003,  675,  104, 1004,   67,   68,  676,
   69,  255,  256,  257,  258,  126,  677,  156,  679, 1321,
  682, 1362,  613,  613,   67,   68,  109,  866,  630,  631,
  632,  605,  126,  278,  279,  280,  109,  109,  109,  109,
  278,  279,  280,   98, 1036, 1037,  109,  109,  109, 1241,
  431,  689,  432,  433,  790,  122,  123,  553,  698,  434,
   98,  701,  857,  857,  857,  857,  857,  857,  857,  702,
 1344,  714,  157,   34,  704,  716,  719,  554,  555, 1271,
 1272, 1273, 1113, 1114, 1115, 1116, 1282, 1283, 1284, 1285,
 1286, 1287,  717, 1289, 1290, 1292, 1432, 1295, 1296, 1297,
 1298, 1299, 1300, 1301,  727, 1303,  718, 1305,  728, 1308,
  729, 1312, 1324, 1325,  735,  742,  317,  741,  762,  760,
  790,  317,  317,  317,  317,  761,  317,  317,  317,  317,
  798,  317,  317,  763, 1392,  317,  317,  317,  317, 1165,
  771,  772,  317,  317, 1445, 1022, 1023, 1024, 1025, 1026,
  392,  317,  779,  317, 1367, 1368, 1369, 1370, 1146, 1334,
 1426,  775,  152,  153,  154,  801,  781, 1340,  317,  317,
  317,  794, 1343, 1338,   34, 1339,  802,  803,  804,  152,
  153,  154, 1428, 1350,  805,   97,   67,   68,  806,   69,
   99,  807,  100, 1357,  126,  809,  810, 1360, 1361,  101,
  812,  876,  863,  317,  298,  869,  864,  867, 1364,  868,
  870,  298,  871,  298,  298,  298,  102,  921,  874,  654,
  655,  656,   98,  875,  878, 1309,  910,  911,  915, 1371,
 1375,  103, 1310,  930,   95,  392,  946,   96,  937,  941,
 1174,  950,  952, 1386, 1387, 1388, 1389, 1390, 1391,  953,
 1393,  954,  298,  298,  298,  657,  658,  659,  957,  958,
   97,   98,  922,  964,  965,   99,  966,  100,  790,  200,
  967, 1146,  980,  968,  101,  969,  970, 1029,  971, 1488,
 1528,  972,  978,   67,   68,  979,   69,    2,  989,  987,
 1433,  102,  410, 1021, 1027, 1030,  876, 1031,  298,  298,
  298, 1438,  298, 1032, 1035,  298,  103, 1082, 1104, 1085,
  127,   40, 1096, 1099,  128,  129,  130,  131,  132,  156,
  133,  134,  135,  136, 1149,  137,  138, 1444, 1151,  139,
  140,  141,  142, 1181, 1449, 1182,  143,  144, 1187, 1188,
 1194,  152,  153,  154,   40,  145, 1183,  146, 1197,   40,
 1198,   40,   40,   40, 1200,   40, 1596, 1203,   40, 1214,
 1215, 1216,  147,  148,  149, 1217, 1565, 1552, 1218, 1219,
   40,   40,   40,   40, 1607, 1220, 1221, 1224,  240,  241,
  242, 1228, 1226, 1229, 1260, 1486, 1261, 1262,    2,  317,
  392, 1266, 1267,  392,  392,  392,  392,  150,  392,  392,
  392, 1265,   40,  243,   40,  790,  790,  790,  790,  790,
 1230, 1231, 1232, 1233, 1234, 1268, 1269, 1322, 1318,  478,
 1499, 1500, 1501, 1320, 1323, 1326, 1336,  790,  790, 1335,
 1337, 1341, 1342,  876,   40, 1345,   40, 1346,  633, 1161,
 1162, 1163, 1164, 1524,  790,  790,  790,  790, 1358, 1363,
 1109,  790,  790, 1111, 1608,  393, 1117,  790, 1119,  790,
  790, 1121, 1123,   10,   11,   12,   13,  790,  790, 1125,
 1127, 1129, 1535, 1131, 1133,  876, 1135, 1541, 1535, 1544,
 1378, 1548, 1379, 1541, 1535, 1544, 1382, 1384,   67,   68,
  216,   69,  119, 1383, 1385, 1394,  126, 1395,  244, 1396,
  245,  246,  247,  248, 1397, 1541, 1535, 1544, 1398,  191,
 1400, 1087,  192,  193,  194,  195, 1399,  196,  197,  198,
 1401, 1402,  790,  790,   98,  790,  790,  790, 1403,  790,
  790,  790,  790,  790,  790,  790,  790,  790, 1405, 1406,
  393, 1404, 1407, 1171, 1408, 1172, 1173, 1410, 1088, 1089,
   27,   28,   29,   30,   31,   32,   33, 1409, 1411, 1412,
 1414, 1413, 1416, 1609,   10,   11,   12,   13, 1603, 1415,
 1417,   40,   40,   40,   40, 1418, 1419, 1420, 1421,   40,
 1423, 1422,   40,  155,   40,   40,   40,   40,   40,   40,
   40, 1430,   40,   40,   40,   40, 1431,   40,   40,   40,
 1424,   40,   40,   40,   40, 1436, 1440,   40,   40,   40,
   40, 1441, 1442, 1446, 1274, 1447, 1448,   40, 1276,   40,
 1278, 1280,   40, 1450, 1451, 1452,   40,   40, 1454,   40,
 1456, 1453, 1457,   40,   40,   40,   40, 1458, 1459, 1461,
 1557, 1460, 1462,  152,  153,  154, 1463, 1464, 1465, 1466,
   40,   27,   28,   29,   30,   31,   32,   33, 1468, 1469,
 1470, 1467,  268, 1471, 1472, 1473, 1474, 1475, 1476,   40,
   40,   40,   40,   40, 1477,   40,   40,  393, 1478, 1479,
  393, 1480, 1481, 1483, 1494,   40,   40, 1482, 1498, 1492,
 1489, 1504, 1505, 1506, 1507,  393,  157, 1522,  393,  393,
  393,  393,   40,  393,  393,  393,  872,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40, 1525, 1568, 1527, 1529,  566,
 1530, 1531, 1567, 1576,  210, 1579, 1604, 1597, 1598, 1599,
   40,   40,   40,   40, 1605,   40,   40,   40,   40, 1601,
 1606,   40, 1613,   40, 1610,   40,   40,   40,   40, 1615,
   40,   40,  566,   40,   40,   40,  437,  566,  104,  566,
  566,  566,   40,  566,   29,  438,  566,   95,  137,  793,
   96,  849,  727,  545,  399,  828,  738,  543,  566,  566,
  566,  566,  820,  546,  538,  138,  745,  850,  739,  541,
   40,   40,   40,   97,   98,  542,  550,  271,   99,   74,
  100,  821,  143,  164,  829,  144,  147,  101,   40,   40,
  566,   40,   40,   40,  240,   40,   40,   40,   40,   40,
   40,   40,   40,   40,  102,   40,  167,  210,  576,    4,
   31,   28,   28,   55,   94,   58,  106,   55,   55,  103,
  109,  115,  566, 1595,  566,  112,  879,  880,  881,   55,
  882,  883,  884,  885,   55,  886,  887,  198,   55,  888,
  889,  890,  891,  639,  983,  118,  892,  893, 1204, 1196,
  127,  913,   34, 1083,  208,  300,  130,  131,  132, 1497,
  133,  134,  135,  136, 1355,  137,  138, 1195, 1259,  139,
  140,  141,  142,   67,   68,   55,   69,  144, 1108,  873,
   55,  126,   55,   55,  127,   55,   55,   55,  128,  129,
  130,  131,  132,   55,  133,  134,  135,  136,   55,  137,
  138, 1347, 1098,  139,  140,  141,  142, 1356,  678,   98,
  143,  144,  572,  208,  894,  208,  163,   93,  616,  145,
 1095,  146, 1319,  794,  794,  239,  794,  216,  709,  166,
  935,  931,  513,  808,  202,  750,  147,  148,  149,  686,
    0,  609, 1243, 1244, 1245,    0, 1246, 1247, 1248, 1249,
    0, 1250, 1251,  198,    0, 1252, 1253, 1254, 1255,  566,
  566,    0,  566,    0, 1256,    0,    0,  566,    0,    0,
  566,  150,  566,  566,  566,  566,  566,  566,  566,  208,
  566,  566,  566,  566,    0,  566,  566,    0,    0,  566,
  566,  566,  566,    0, 1580,  566,  566,  566,  566,    0,
    0,    0,    0,    0,    0,  566,    0,  566,    0, 1581,
  566,    0,    0,    0,    0,  566,    0,    0,  794,  794,
  794,  566,  566,  566,  566, 1582,    0,    0,  152,  153,
  154,    0,    0,    0, 1583,    0,    0,    0,    0,    0,
    0,    0,    0,  794,    0,    0,    0,    0, 1584, 1585,
 1586, 1587,    0,    0,    0,    0,    0,  566,    0,  566,
  566,  566,    0,    0,    0,    0,    2,    0,    0,    0,
    0,    0,    0,  566,  566,    0,    0,    0,    0,    0,
 1588, 1589, 1590, 1591, 1592, 1593, 1594,    0,    0,  612,
  566,    0,    0,    0,    0,  566,  566,  566,  566,  566,
  566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
  566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
  566,  566,  566,  566,    0,    0,    0,  208,  566,    0,
    0,  566,  566,    0,    0,    0,    0,  567,  794,    0,
  794,  794,  794,  794,    0,    0,    0,    0,  566,  566,
  566,  566,    0,  566,  566,  566,  566,  155,    0,  566,
    0,  566,    0,  566,  566,  566,    0,    0,  566,  566,
  567,  566,  566,  566,    0,  567,  208,  567,  567,  567,
  566,  567,    0,    0,  567,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  567,  567,  567,  567,
    0,    0,    0,  613,    0,    0,    0,    0,  566,  566,
   77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
   87,   88,   89,   90,   91,    0,  566,  566,  567,  566,
  566,  566,    0,  566,  566,  566,  566,  566,  566,  566,
  566,  566,    0,  566,    0,   13,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  614,    0,    0,  615,    0,
  567,    0,  567,    0,  208,  208,  208,  208,  208,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  208,    0,
    0,    0,    0,  208,    0,    0,  208,  208,    0,    0,
   34,    0,  210,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  208,  208,  208,  208,    0,  208,  208,
  208,  208,    0,    0,    0,    0,  208,    0,    0,  208,
    0,    0,    0,    0,    0,    0,  208,  208,  208,   27,
   28,   29,   30,   31,   32,   33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  210,    0,    0,    0,    0, 1180,    0,    0,    0,
    0,    0,    0,  208,  208,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  208,  208,    0,  208,  208,  208,    0,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  567,  567,    0,
  567,    0,    0,    0,    0,  567,    0,    0,  567,    0,
  567,  567,  567,  567,  567,  567,  567,  210,  567,  567,
  567,  567,    0,  567,  567,    0,    0,  567,  567,  567,
  567,    0,    0,  567,  567,  567,  567,    0,    0,    0,
    0,    0,    0,  567,    0,  567,    0,    0,  567,    0,
    0,    0,    0,  567,    0,    0,    0,    0,    0,  567,
  567,  567,  567,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  567,    0,  567,  567,  567,
    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,
    0,  567,  567,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  612,  567,    0,
    0,    0,    0,  567,  567,  567,  567,  567,  567,  567,
  567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
  567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
  567,  567,    0,    0,    0,  210,  567,    0,    0,  567,
  567,    0,    0,    0,    0,  560,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  567,  567,  567,  567,
    0,  567,  567,  567,  567,    0,    0,  567,    0,  567,
    0,  567,  567,  567,    0,    0,  567,  567,  560,  567,
  567,  567,    0,  560,  210,  560,  560,  560,  567,  560,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  560,  560,  560,  560,    0,    0,
    0,  613,    0,    0,    0,    0,  567,  567,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  567,  567,  560,  567,  567,  567,
    0,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    0,  567,    0,   13,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  614,    0,    0,  615,    0,  560,    0,
  560,    0,  210,  210,  210,  210,  210,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  210,    0,    0,    0,
    0,  210,    0,    0,  210,  210,    0,  842,    0,    0,
   92,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  210,  210,  210,  210,    0,  210,  210,  210,  210,
    0,    0,    0,    0,  210,    0,    0,  210,    0,    0,
    0,    0,    0,    0,  210,  210,  210,   27,   28,   29,
   30,   31,   32,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
    0,    0,    0,  842,    0,    0,    0,    0,    0,    0,
    0,  210,  210,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  210,
  210,    0,  210,  210,  210,    0,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  560,  560,    0,  560,    0,
    0,    0,    0,  560,    0,    0,  560,    0,  560,  560,
  560,  560,  560,  560,  560,   92,  560,  560,  560,  560,
    0,  560,  560,    0,    0,  560,  560,  560,  560,    0,
    0,  560,  560,  560,  560,    0,    0,    0,    0,    0,
    0,  560,    0,  560,    0,    0,  560,    0,    0,    0,
    0,  560,    0,    0,    0,    0,    0,  560,  560,  560,
  560,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  560,    0,  560,  560,  560,    0,    0,
    0,  842,    0,    0,    0,    0,    0,    0,    0,  560,
  560,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  842,    0,  560,    0,    0,    0,
    0,  560,  560,  560,  560,  560,  560,  560,  560,  560,
  560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
  560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
    0,    0,    0,   92,  560,    0,    0,  560,  560,    0,
    0,    0,    0,  558,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  560,  560,  560,  560,    0,  560,
  560,  560,  560,    0,    0,  560,    0,  560,    0,  560,
  560,  560,    0,    0,  560,  560,  558,  560,  560,  560,
    0,  558,    0,  558,  558,  558,  560,  558,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  558,  558,  558,  558,    0,    0,  842,    0,
    0,    0,    0,    0,  560,  560,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  560,  560,  558,  560,  560,  560,    0,  560,
  560,  560,  560,  560,  560,  560,  560,  560,    0,  560,
  842,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  842,    0,    0,  842,    0,    0,  558,    0,  558,    0,
   92,   92,   92,   92,   92,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   92,   92,    0,  843,    0,    0,   93,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
   92,   92,   92,    0,    0,    0,   92,   92,    0,    0,
    0,    0,   92,    0,    0,   92,    0,    0,    0,    0,
    0,    0,   92,   92,  842,  842,  842,  842,  842,  842,
  842,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  127,   93,    0,    0,
    0,  843,  130,  131,  132,    0,  133,  134,  135,  136,
    0,  137,  138,    0,    0,  139,  140,  141,  142,    0,
    0,    0, 1313,  144,    0,    0,    0,   92,   92,    0,
   92,   92,   92,    0,   92,   92,   92,   92,   92,   92,
   92,   92,   92,  558,  558,    0,  558,    0,    0,    0,
    0,  558,    0,    0,  558,    0,  558,  558,  558,  558,
  558,  558,  558,   93,  558,  558,  558,  558,    0,  558,
  558, 1314,    0,  558,  558,  558,  558,    0,    0,  558,
  558,  558,  558,    0,    0,    0,    0,    0,    0,  558,
 1315,  558,    0,    0,  558,    0,    0,    0,    0,  558,
    0,    0,    0,    0,    0,  558,  558,  558,  558,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  558,    0,  558,  558,  558,    0,    0,    0,  843,
    0,    0,    0,    0,    0,    0,    0,  558,  558,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  843,    0,  558,    0,    0,    0,    0,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,    0,    0,
    0,   93,  558,    0,    0,  558,  558,    0,    0,    0,
    0,  556,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  558,  558,  558,  558,    0,  558,  558,  558,
  558,    0,    0,  558,    0,  558,    0,  558,  558,  558,
    0,    0,  558,  558,  556,  558,  558,  558,    0,  556,
    0,  556,  556,  556,  558,  556,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  556,  556,  556,  556,    0,    0,  843,    0,    0,    0,
    0,    0,  558,  558,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  558,  558,  556,  558,  558,  558,    0,  558,  558,  558,
  558,  558,  558,  558,  558,  558,    0,  558,  843,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  843,    0,
    0,  843,    0,    0,  556,    0,  556,    0,   93,   93,
   93,   93,   93,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   93,   93,    0,  844,    0,    0,   94,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   93,   93,   93,
   93,    0,    0,    0,   93,   93,    0,    0,    0,    0,
   93,    0,    0,   93,    0,    0,    0,    0,    0,    0,
   93,   93,  843,  843,  843,  843,  843,  843,  843,    0,
    0,    0,    0,    0,    0,    0,    0,  879,  880,  881,
    0,  882,  883,  884,  885,   94,  886,  887,  198,  844,
  888,  889,  890,  891,    0,    0,    0,  892,  893,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   93,   93,    0,   93,   93,
   93,    0,   93,   93,   93,   93,   93,   93,   93,   93,
   93,  556,  556,    0,  556,    0,    0,    0,    0,  556,
    0,    0,  556,    0,  556,  556,  556,  556,  556,  556,
  556,   94,  556,  556,  556,  556,    0,  556,  556,    0,
    0,  556,  556,  556,  556,  894,    0,  556,  556,  556,
  556,    0,    0,    0,    0,    0,    0,  556,    0,  556,
    0,    0,  556,    0,    0,    0,    0,  556,    0,    0,
    0,    0,    0,  556,  556,  556,  556,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  556,
    0,  556,  556,  556,    0,    0,    0,  844,    0,    0,
    0,    0,    0,    0,    0,  556,  556,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  844,    0,  556,    0,    0,    0,    0,  556,  556,  556,
  556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
  556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
  556,  556,  556,  556,  556,  556,    0,    0,    0,   94,
  556,    0,    0,  556,  556,    0,    0,    0,    0,  557,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  556,  556,  556,  556,    0,  556,  556,  556,  556,    0,
    0,  556,    0,  556,    0,  556,  556,  556,    0,    0,
  556,  556,  557,  556,  556,  556,    0,  557,    0,  557,
  557,  557,  556,  557,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  557,  557,
  557,  557,    0,    0,  844,    0,    0,    0,    0,    0,
  556,  556,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  556,  556,
  557,  556,  556,  556,    0,  556,  556,  556,  556,  556,
  556,  556,  556,  556,    0,  556,  844,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  844,    0,    0,  844,
    0,    0,  557,    0,  557,    0,   94,   94,   94,   94,
   94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   94,   94,
    0,    0,    0,    0,  787,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   94,   94,   94,   94,    0,
    0,    0,   94,   94,    0,    0,    0,    0,   94,    0,
    0,   94,    0,    0,    0,    0,    0,    0,   94,   94,
  844,  844,  844,  844,  844,  844,  844,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  787,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   94,   94,    0,   94,   94,   94,    0,
   94,   94,   94,   94,   94,   94,   94,   94,   94,  557,
  557,    0,  557,    0,    0,    0,    0,  557,    0,    0,
  557,    0,  557,  557,  557,  557,  557,  557,  557,  787,
  557,  557,  557,  557,    0,  557,  557,    0,    0,  557,
  557,  557,  557,    0,    0,  557,  557,  557,  557,    0,
    0,    0,    0,    0,    0,  557,    0,  557,    0,    0,
  557,    0,    0,    0,    0,  557, 1038,    0,    0,    0,
    0,  557,  557,  557,  557,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1039, 1040,    0, 1041, 1042,
 1043, 1044, 1045, 1046,    0, 1047, 1048,    0, 1049, 1050,
 1051, 1052, 1053,    0,    0,    0,    0,  557,    0,  557,
  557,  557,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  557,  557,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  557,    0,    0,    0,    0,  557,  557,  557,  557,  557,
  557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
  557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
  557,  557,  557,  557,    0,    0,    0,  787,  557,    0,
    0,  557,  557,    0,    0,    0,    0,  559,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  557,  557,
  557,  557,    0,  557,  557,  557,  557,    0,    0,  557,
    0,  557,    0,  557,  557,  557,    0,    0,  557,  557,
  559,  557,  557,  557,    0,  559,    0,  559,  559,  559,
  557,  559,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  559,  559,  559,  559,
    0,    0,    0,    0,    0,    0,    0,    0,  557,  557,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  557,  557,  559,  557,
  557,  557,    0,  557,  557,  557,  557,  557,  557,  557,
  557,  557,    0,  557, 1054, 1055,    0, 1056, 1057, 1058,
    0, 1059, 1060,    0,    0, 1061, 1062,    0, 1063,    0,
  559,    0,  559,    0,  787,  787,  787,  787,  787,    0,
    0, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
 1073, 1074, 1075, 1076, 1077,    0,  787,  787,    0,    0,
    0,    0,   47,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  787,  787,  787,  787,    0,    0,    0,
  787,  787,    0,    0,    0,    0,  787,    0,    0,  787,
    0,    0,    0,    0,    0,    0,  787,  787,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   47,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  787,  787,    0,  787,  787,  787,    0,  787,  787,
  787,  787,  787,  787,  787,  787,  787,  559,  559,    0,
  559,    0,    0,    0,    0,  559,    0,    0,  559,    0,
  559,  559,  559,  559,  559,  559,  559,   47,  559,  559,
  559,  559,    0,  559,  559,    0,    0,  559,  559,  559,
  559,    0,    0,  559,  559,  559,  559,    0,    0,    0,
    0,    0,    0,  559,    0,  559,    0,    0,  559,    0,
    0,    0,    0,  559,    0,    0,    0,    0,    0,  559,
  559,  559,  559,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  559,    0,  559,  559,  559,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  559,  559,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  559,    0,
    0,    0,    0,  559,  559,  559,  559,  559,  559,  559,
  559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
  559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
  559,  559,    0,    0,    0,   47,  559,    0,    0,  559,
  559,    0,    0,    0,    0,  699,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  559,  559,  559,  559,
    0,  559,  559,  559,  559,    0,    0,  559,    0,  559,
    0,  559,  559,  559,    0,    0,  559,  559,  699,  559,
  559,  559,    0,  699,    0,  699,  699,  699,  559,  699,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  699,  699,  699,  699,    0,    0,
    0,    0,    0,    0,    0,    0,  559,  559,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  559,  559,  699,  559,  559,  559,
    0,  559,  559,  559,  559,  559,  559,  559,  559,  559,
    0,  559,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   67,   68,    0,   69,    0,    0,  699,    0,
  699,    0,   47,   47,   47,   47,   47,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   47,   47,  362,    0,    0,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   47,   47,   47,   47,    0,    0,    0,   47,   47,
    0,    0,    0,    0,   47,  363,    0,   47,    0,  364,
    0,    0,  365,  366,   47,   47,    0,  367,  368,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,    0,
    0,    0,    0,    0,    0,  379,    0,    0,  380,   48,
    0,    0,    0,    0,    0,  381,    0,    0,    0,    0,
    0,    0,    0,    0,  382,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   47,
   47,    0,   47,   47,   47,    0,   47,   47,   47,   47,
   47,   47,   47,   47,   47,  699,  699,    0,  699,    0,
    0,    0,    0,  699,    0,    0,  699,    0,  699,  699,
  699,  699,  699,  699,  699,   48,  699,  699,  699,  699,
    0,  699,  699,    0,    0,  699,  699,  699,  699,    0,
    0,  699,  699,  699,    0,    0,    0,    0,    0,    0,
    0,  699,    0,  699,    0,    0,  699,    0,    0,    0,
    0,  699,    0,    0,    0,    0,    0,  699,  699,  699,
  699,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  699,    0,  699,  699,  699,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  699,
  699,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  699,    0,    0,    0,
    0,  699,  699,  699,  699,  699,  699,  699,  699,  699,
  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
    0,    0,    0,   48,  699,    0,    0,  699,  699,    0,
    0,    0,    0,  698,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  699,  699,  699,  699,    0,  699,
  699,  699,  699,    0,    0,  699,    0,  699,    0,  699,
  699,  699,    0,    0,  699,  699,  698,  699,  699,  699,
    0,  698,    0,  698,  698,  698,  699,  698,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  698,  698,  698,  698,    0,    0,    0,    0,
    0,    0,    0,    0,  699,  699,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  699,  699,  698,  699,  699,  699,    0,  699,
  699,  699,  699,  699,  699,  699,  699,  699,    0,  699,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  105,  105,    0,  105,    0,    0,  698,    0,  698,    0,
   48,   48,   48,   48,   48,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   48,   48,  105,    0,    0,    0,   49,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   48,
   48,   48,   48,    0,    0,    0,   48,   48,    0,    0,
    0,    0,   48,  105,    0,   48,    0,  105,    0,    0,
  105,  105,   48,   48,    0,  105,  105,  105,  105,  105,
  105,  105,  105,  105,  105,  105,  105,    0,    0,    0,
    0,    0,    0,  105,    0,    0,  105,   49,    0,    0,
    0,    0,    0,  105,    0,    0,    0,    0,    0,    0,
    0,    0,  105,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   48,   48,    0,
   48,   48,   48,    0,   48,   48,   48,   48,   48,   48,
   48,   48,   48,  698,  698,    0,  698,    0,    0,    0,
    0,  698,    0,    0,  698,    0,  698,  698,  698,  698,
  698,  698,  698,   49,  698,  698,  698,  698,    0,  698,
  698,    0,    0,  698,  698,  698,  698,    0,    0,  698,
  698,  698,    0,    0,    0,    0,    0,    0,    0,  698,
    0,  698,    0,    0,  698,    0,    0,    0,    0,  698,
    0,    0,    0,    0,    0,  698,  698,  698,  698,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  698,    0,  698,  698,  698,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  698,  698,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  698,    0,    0,    0,    0,  698,
  698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
  698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
  698,  698,  698,  698,  698,  698,  698,  698,    0,    0,
    0,   49,  698,    0,    0,  698,  698,    0,    0,    0,
    0,  697,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  698,  698,  698,  698,    0,  698,  698,  698,
  698,    0,    0,  698,    0,  698,    0,  698,  698,  698,
    0,    0,  698,  698,  697,  698,  698,  698,    0,  697,
    0,  697,  697,  697,  698,  697,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  697,  697,  697,  697,    0,    0,    0,    0,    0,    0,
    0,    0,  698,  698,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  698,  698,  697,  698,  698,  698,    0,  698,  698,  698,
  698,  698,  698,  698,  698,  698,    0,  698,    0,    0,
    0,    0,    0,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  697,    0,  697,    0,   49,   49,
   49,   49,   49,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   49,   49,    0,    0,    0,    0,   50,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   49,   49,   49,
   49,    0,    0,    0,   49,   49,    0,    0,    0,  596,
   49,    0,    0,   49,    0,    0,    0,    0,    0,    0,
   49,   49,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   50,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   49,   49,    0,   49,   49,
   49,    0,   49,   49,   49,   49,   49,   49,   49,   49,
   49,  697,  697,    0,  697,    0,    0,    0,    0,  697,
    0,    0,  697,    0,  697,  697,  697,  697,  697,  697,
  697,   50,  697,  697,  697,  697,    0,  697,  697,    0,
    0,  697,  697,  697,  697,    0,    0,  697,  697,  697,
    0,    0,    0,    0,    0,    0,    0,  697,    0,  697,
    0,    0,  697,    0,    0,    0,    0,  697,    0,    0,
    0,    0,    0,  697,  697,  697,  697,    2,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  697,
    0,  697,  697,  697,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  697,  697,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  697,    0,    0,    0,    0,  697,  697,  697,
  697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
  697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
  697,  697,  697,  697,  697,  697,    0,    0,    0,   50,
  697,    0,    0,  697,  697,    0,    0,    0,    0,  696,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  697,  697,  697,  697,    0,  697,  697,  697,  697,    0,
    0,  697,    0,  697,    0,  697,  697,  697,    0,    0,
  697,  697,  696,  697,  697,  697,    0,  696,    0,  696,
  696,  696,  697,  696,    0,    0,    8,    9,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  696,  696,
  696,  696,    0,    0,    0,    0,   13,    0,    0,    0,
  697,  697,    0,    0,    0,    0,    0,    0,  592,    0,
  593,    0,    0,  594,  595,    0,    0,    0,  697,  697,
  696,  697,  697,  697,    0,  697,  697,  697,  697,  697,
  697,  697,  697,  697,    0,  697,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  696,    0,  696,    0,   50,   50,   50,   50,
   50,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   50,   50,
   27,   28,   29,   30,   31,   32,   33,    0,    0,    0,
    0,    0,    0,    0,    0,   50,   50,   50,   50,    0,
    0,    0,   50,   50,    0,    0,    0,    0,   50,    0,
    0,   50,    0,    0,    0,    0,    0,    0,   50,   50,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   50,   50,    0,   50,   50,   50,    0,
   50,   50,   50,   50,   50,   50,   50,   50,   50,  696,
  696,    0,  696,    0,    0,    0,    0,  696,    0,    0,
  696,    0,  696,  696,  696,  696,  696,  696,  696,    0,
  696,  696,  696,  696,    0,  696,  696,    0,    0,  696,
  696,  696,  696,    0,    0,  696,  696,  696,    0,    0,
    0,    0,    0,    0,  706,  696,    0,  696,    0,    0,
  696,    0,    0,    0,    0,  696,    0,    0,    0,    0,
    0,  696,  696,  696,  696,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  706,    0,    0,
    0,    0,    0,    0,  706,  706,    0,    0,  706,    0,
    0,    0,    0,    0,    0,    0,    0,  696,    0,  696,
  696,  696,    0,  706,    0,  706,  706,    0,    0,    0,
    0,    0,    0,  696,  696,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  696,    0,    0,    0,    0,  696,  696,  696,  696,  696,
  696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
  696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
  696,  696,  696,  696,    0,    0,    0,  706,  696,  706,
    0,  696,  696,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  696,  696,
  696,  696,    0,  696,  696,  696,  696,    0,    0,  696,
    0,  696,    0,  696,  696,  696,    0,    0,  696,  696,
    0,  696,  696,  696,    0,    0,    0,    0,    0,    0,
  696,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  696,  696,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  696,  696,    0,  696,
  696,  696,    0,  696,  696,  696,  696,  696,  696,  696,
  696,  696,    0,  696,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  706,  706,    0,  706,    0,    0,
    0,    0,  706,    0,    0,  706,    0,  706,  706,  706,
  706,  706,  706,  706,    0,  706,  706,  706,  706,    0,
  706,  706,    0,    0,  706,  706,  706,  706,    0,    0,
  706,  706,  706,    0,    0,    0,   52,    0,  387,   97,
  706,    0,  706,    0,   99,  706,  100,    0,    0,    0,
  706,    0,    0,  101,    0,    0,  706,  706,  706,  706,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  102,  388,    0,  389,  390,  391,  392,  393,    0,    0,
    0,    0,  394,    0,    0,  103,    0,    0,    0,    0,
    0,  395,  706,    0,    0,   52,  396,    0,  397,    0,
    0,    0,    0,    0,    0,    0,  157,    0,  706,  706,
  398,  399,  400,  401,  402,  403,  404,  405,    0,    0,
    0,    0,    0,  406,    0,  706,    0,    0,    0,    0,
  706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
  706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
  706,  706,  706,  706,  706,  706,  706,  706,  706,   52,
    0,   52,    0,  706,    0,    0,  706,  706,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  706,  706,  706,  706,    0,  706,  706,
  706,  706,    0,    0,  706,    0,  706,    0,  706,  706,
  706,    0,    0,  706,  706,    0,  706,  706,  706,    0,
    0,    0,    0,    0,    0,  706,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  706,  706,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  706,  706,    0,  706,  706,  706,    0,  706,  706,
  706,  706,  706,  706,  706,  706,  706,    0,  706,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   52,    0,    0,   52,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   52,
    0,    0,    0,   52,   52,   52,    0,   52,   52,   52,
   52,    0,   52,   52,   52,    0,   52,   52,   52,   52,
    0,    0,   52,   52,   52,    0,    0,    0,    0,    0,
    0,    0,    0,  562,  127,  563,    0,   54,  128,  129,
  130,  131,  132,    0,  133,  134,  135,  136,   52,  137,
  138,    0,    0,  139,  140,  141,  142,    0,    0,   98,
  143,  144,    0,    0,    0,   52,    0,    0,    0,  145,
    0,  146,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   52,  147,  148,  149,    0,
   52,   52,    0,    0,    0,    0,   54,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  157,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  150,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,    0,    0,    0,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   54,    0,   54,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   52,   52,   52,   52,    0,
   52,   52,   52,   52,    0,    0,   52,    0,   52,    0,
   52,   52,   52,   52,    0,   52,   52,    0,   52,   52,
   52,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   52,   52,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   52,   52,    0,   52,   52,   52,    0,
   52,   52,   52,   52,   52,   52,   52,   52,   52,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
   54,    0,    0,    0,    0,    0,    0,  155,    0,    0,
   54,    0,    0,    0,   54,   54,   54,    0,   54,   54,
   54,   54,    0,   54,   54,   54,    0,   54,   54,   54,
   54,    0,    0,   54,   54,   54,    0,    0,    0,    0,
    0,    0,    0,    0,  265,  127,  266,    0,   55,  128,
  129,  130,  131,  132,    0,  133,  134,  135,  136,   54,
  137,  138,    0,    0,  139,  140,  141,  142,    0,    0,
    0,  143,  144,    0,    0,    0,   54,    0,    0,    0,
  145,    0,  146,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   54,  147,  148,  149,
    0,   54,   54,    0,    0,    0,    0,   55,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  157,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  150,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,    0,    0,    0,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   55,    0,   55,    0,    0,  872,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   54,   54,   54,   54,
    0,   54,   54,   54,   54,    0,    0,   54,    0,   54,
    0,   54,   54,   54,   54,    0,   54,   54,    0,   54,
   54,   54,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   54,   54,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   54,   54,    0,   54,   54,   54,
    0,   54,   54,   54,   54,   54,   54,   54,   54,   54,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   55,    0,
    0,   55,    0,    0,    0,    0,    0,    0,  155,    0,
    0,   55,    0,    0,    0,   55,   55,   55,    0,   55,
   55,   55,   55,    0,   55,   55,   55,    0,   55,   55,
   55,   55,    0,    0,   55,   55,   55,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  127,    0,    0,   56,
  128,  129,  130,  131,  132,    0,  133,  134,  135,  136,
   55,  137,  138,    0,    0,  139,  140,  141,  142,    0,
    0,    0,  143,  144,    0,    0,    0,   55,    0,    0,
    0,  145,    0,  146,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   55,  147,  148,
  149,    0,   55,   55,    0,    0,    0,    0,   56,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  232,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  150,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,    0,    0,    0,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   56,    0,   56,    0,    0,  232,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   55,   55,   55,
   55,    0,   55,   55,   55,   55,    0,    0,   55,    0,
   55,    0,   55,   55,   55,   55,    0,   55,   55,    0,
   55,   55,   55,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   55,   55,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   55,   55,    0,   55,   55,
   55,    0,   55,   55,   55,   55,   55,   55,   55,   55,
   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   56,
    0,    0,   56,    0,    0,    0,    0,    0,    0,  155,
    0,    0,   56,    0,    0,    0,   56,   56,   56,    0,
   56,   56,   56,   56,    0,   56,   56,   56,    0,   56,
   56,   56,   56,    0,    0,   56,   56,   56,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  232,    0,    0,
   53,  232,  232,  232,  232,  232,    0,  232,  232,  232,
  232,   56,  232,  232,    0,    0,  232,  232,  232,  232,
    0,    0,    0,  232,  232,    0,    0,    0,   56,    0,
    0,    0,  232,    0,  232,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   56,  232,
  232,  232,    0,   56,   56,    0,    0,    0,    0,   53,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  232,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,    0,    0,    0,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   53,    0,   53,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   56,   56,
   56,   56,    0,   56,   56,   56,   56,    0,    0,   56,
    0,   56,    0,   56,   56,   56,   56,    0,   56,   56,
    0,   56,   56,   56,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   61,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   56,   56,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   56,   56,    0,   56,
   56,   56,    0,   56,   56,   56,   56,   56,   56,   56,
   56,   56,    0,    0,    0,    0,    0,    0,    0,   61,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   53,    0,    0,   53,    0,    0,    0,    0,    0,    0,
  232,    0,    0,   53,    0,    0,    0,   53,   53,   53,
    0,   53,   53,   53,   53,    0,   53,   53,   53,    0,
   53,   53,   53,   53,    0,    0,   53,   53,   53,    0,
    0,    0,    0,   61,    0,   61,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   53,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   53,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   53,
    0,    0,    0,    0,   53,   53,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,    0,    0,    0,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,    0,    0,   62,    0,    0,    0,
   61,    0,    0,   61,    0,    0,    0,    0,    0,   53,
   53,   53,   53,   61,   53,   53,   53,   53,    0,    0,
   53,    0,   53,    0,   53,   53,   53,   53,    0,   53,
   53,    0,   53,   53,   53,    0,   61,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   62,    0,    0,    0,    0,
    0,    0,   61,    0,    0,    0,    0,    0,    0,   53,
   53,    0,    0,    0,    0,    0,    0,    0,    0,   61,
    0,    0,    0,    0,    0,    0,    0,   53,   53,    0,
   53,   53,   53,    0,   53,   53,   53,   53,   53,   53,
   53,   53,   53,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
    0,   62,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   61,    0,    0,    0,    0,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,    0,    0,    0,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,    0,    0,   65,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   61,
   61,   61,   61,    0,   61,   61,   61,   61,    0,    0,
   61,    0,   61,    0,   61,   61,   61,   61,    0,   61,
   61,    0,   61,   61,   61,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   65,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   61,
   61,    0,    0,    0,    0,    0,   62,    0,    0,   62,
    0,    0,    0,    0,    0,    0,    0,   61,   61,   62,
   61,   61,   61,    0,   61,   61,   61,   61,   61,   61,
   61,   61,   61,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   62,    0,    0,    0,    0,    0,    0,   65,
    0,   65,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   62,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   62,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   62,    0,    0,
    0,    0,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,    0,    0,    0,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    0,    0,   66,    0,    0,    0,   65,    0,    0,   65,
    0,    0,    0,    0,    0,   62,   62,   62,   62,   65,
   62,   62,   62,   62,    0,    0,   62,    0,   62,    0,
   62,   62,   62,   62,    0,   62,   62,    0,   62,   62,
   62,    0,   65,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   66,    0,    0,    0,    0,    0,    0,   65,    0,
    0,    0,    0,    0,    0,   62,   62,    0,    0,    0,
    0,    0,    0,    0,    0,   65,    0,    0,    0,    0,
    0,    0,    0,   62,   62,    0,   62,   62,   62,    0,
   62,   62,   62,   62,   62,   62,   62,   62,   62,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   66,    0,   66,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   65,    0,    0,
    0,    0,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,    0,    0,    0,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
    0,    0,    0,    0,    0,    0,    0,  571,    0,    0,
    0,    0,    0,    0,    0,   65,   65,   65,   65,    0,
   65,   65,   65,   65,    0,    0,   65,    0,   65,    0,
   65,   65,   65,   65,    0,   65,   65,    0,   65,   65,
   65,    0,    0,    0,    0,    0,    0,  571,  571,    0,
    0,  571,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  571,    0,  571,    0,
    0,    0,    0,    0,    0,   65,   65,    0,    0,    0,
    0,    0,   66,    0,    0,   66,    0,    0,    0,    0,
    0,    0,    0,   65,   65,   66,   65,   65,   65,    0,
   65,   65,   65,   65,   65,   65,   65,   65,   65,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  571,    0,  571,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   66,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   66,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   66,    0,    0,    0,    0,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,    0,    0,    0,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,    0,    0,  569,    0,
    0,    0,    0,    0,    0,    0,    0,  571,  571,    0,
  571,   66,   66,   66,   66,    0,   66,   66,   66,   66,
  571,  571,   66,    0,   66,    0,   66,   66,   66,   66,
    0,   66,   66,    0,   66,   66,   66,    0,  569,  569,
    0,    0,  569,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  569,  571,  569,
    0,    0,    0,  571,    0,    0,    0,    0,    0,  571,
    0,   66,   66,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
   66,    0,   66,   66,   66,    0,   66,   66,   66,   66,
   66,   66,   66,   66,   66,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  569,    0,  569,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  571,  571,  571,  571,  571,  571,  571,
  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
  571,  571,    0,    0,    0,  571,  571,  571,  571,  571,
  571,  571,    0,    0,    0,    0,  571,    0,    0,  571,
  571,    0,    0,  570,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  571,  571,  571,  571,
    0,  571,  571,  571,  571,    0,    0,  571,    0,  571,
    0,  571,  571,  571,    0,    0,  571,  571,    0,  571,
  571,  571,    0,  570,  570,    0,    0,  570,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  570,    0,  570,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  571,  571,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  569,  569,    0,  571,  571,    0,  571,  571,  571,
    0,  571,  571,  571,  571,  571,  571,  571,  571,  571,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  570,    0,  570,  569,
    0,    0,    0,    0,  569,    0,    0,    0,    0,    0,
  569,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  569,  569,  569,  569,  569,  569,
  569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
  569,  569,  569,   33,    0,    0,  569,  569,  569,  569,
  569,  569,  569,    0,    0,    0,    0,  569,    0,    0,
  569,  569,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  569,  569,  569,
  569,    0,  569,  569,  569,  569,  570,  570,  569,    0,
  569,    0,  569,  569,  569,    0,    0,  569,  569,    0,
  569,  569,  569,    0,    0,    0,    0,   33,    0,   33,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  570,    0,    0,    0,    0,  570,
    0,    0,    0,    0,    0,  570,    0,  569,  569,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  569,  569,    0,  569,  569,
  569,    0,  569,  569,  569,  569,  569,  569,  569,  569,
  569,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  570,
  570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
  570,  570,  570,  570,  570,  570,  570,  570,    0,    0,
    0,  570,  570,  570,  570,  570,  570,  570,    0,    0,
    0,   34,  570,    0,   33,  570,  570,   33,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,  570,  570,  570,  570,    0,  570,  570,  570,
  570,    0,    0,  570,    0,  570,    0,  570,  570,  570,
    0,    0,  570,  570,    0,  570,  570,  570,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   34,   33,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  570,  570,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  570,  570,    0,  570,  570,  570,    0,  570,  570,  570,
  570,  570,  570,  570,  570,  570,    0,    0,    0,    0,
    0,    0,  776,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,    0,
    0,    0,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,    0,    0,
    0,  776,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   33,   33,   33,   33,    0,   33,   33,
   33,   33,   34,    0,   33,   34,   33,    0,    0,   33,
    0,    0,    0,    0,    0,   34,   33,   33,   33,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  776,    0,  776,    0,    0,
    0,    0,    0,   33,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   34,    0,    0,    0,    0,    0,
    0,   33,   33,    0,   33,   33,   33,    0,   33,   33,
   33,   33,   33,   33,   33,   33,   33,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  778,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,    0,    0,    0,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,    0,    0,    0,  778,
    0,    0,  776,    0,    0,    0,    0,    0,    0,    0,
    0,   34,   34,   34,   34,  776,   34,   34,   34,   34,
    0,    0,   34,    0,   34,    0,    0,   34,    0,    0,
    0,    0,    0,    0,   34,   34,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  778,  776,  778,    0,    0,    0,    0,
    0,   34,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   34,
   34,    0,   34,   34,   34,    0,   34,   34,   34,   34,
   34,   34,   34,   34,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  782,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  776,  776,
  776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
  776,  776,  776,  776,  776,  776,  776,    0,    0,    0,
  776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
  776,  776,  776,  776,  776,  776,    0,    0,    0,  782,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  776,  776,  776,  776,    0,  776,  776,  776,  776,
  778,    0,  776,    0,  776,    0,    0,  776,    0,    0,
    0,    0,    0,  778,  776,  776,  776,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  782,    0,  782,    0,    0,    0,    0,
    0,  776,  776,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  778,    0,    0,    0,    0,    0,    0,  776,
  776,    0,  776,  776,  776,    0,  776,  776,  776,  776,
  776,  776,  776,  776,  776,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  780,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  778,  778,  778,  778,
  778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
  778,  778,  778,  778,  778,    0,    0,    0,  778,  778,
  778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
  778,  778,  778,  778,    0,    0,    0,  780,    0,    0,
  782,    0,    0,    0,    0,    0,    0,    0,    0,  778,
  778,  778,  778,  782,  778,  778,  778,  778,    0,    0,
  778,    0,  778,    0,    0,  778,    0,    0,    0,    0,
    0,    0,  778,  778,  778,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  780,  782,  780,    0,    0,    0,    0,    0,  778,
  778,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  778,  778,    0,
  778,  778,  778,    0,  778,  778,  778,  778,  778,  778,
  778,  778,  778,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  784,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  782,  782,  782,  782,
  782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
  782,  782,  782,  782,  782,    0,    0,    0,  782,  782,
  782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
  782,  782,  782,  782,    0,    0,    0,  784,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  782,
  782,  782,  782,    0,  782,  782,  782,  782,  780,    0,
  782,    0,  782,    0,    0,  782,    0,    0,    0,    0,
    0,  780,  782,  782,  782,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  784,    0,  784,    0,    0,    0,    0,    0,  782,
  782,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  780,    0,    0,    0,    0,    0,    0,  782,  782,    0,
  782,  782,  782,    0,  782,  782,  782,  782,  782,  782,
  782,  782,  782,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  734,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  780,  780,  780,  780,  780,  780,
  780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
  780,  780,  780,    0,    0,    0,  780,  780,  780,  780,
  780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
  780,  780,    0,    0,    0,  734,    0,    0,  784,    0,
    0,    0,    0,    0,    0,    0,    0,  780,  780,  780,
  780,  784,  780,  780,  780,  780,    0,    0,  780,    0,
  780,    0,    0,  780,    0,    0,    0,    0,    0,    0,
  780,  780,  780,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  734,
  784,  734,    0,    0,    0,    0,    0,  780,  780,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  780,  780,    0,  780,  780,
  780,    0,  780,  780,  780,  780,  780,  780,  780,  780,
  780,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  736,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  784,  784,  784,  784,  784,  784,
  784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
  784,  784,  784,    0,    0,    0,  784,  784,  784,  784,
  784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
  784,  784,    0,    0,    0,  736,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  784,  784,  784,
  784,    0,  784,  784,  784,  784,  734,    0,  784,  734,
  784,    0,    0,  784,    0,    0,    0,    0,    0,  734,
  784,  784,  784,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  736,
    0,  736,    0,    0,    0,    0,    0,  784,  784,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  734,    0,
    0,    0,    0,    0,    0,  784,  784,    0,  784,  784,
  784,    0,  784,  784,  784,  784,  784,  784,  784,  784,
  784,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  734,  734,  734,  734,  734,  734,  734,  734,
  734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
  734,    0,    0,    0,  734,  734,  734,  734,  734,  734,
  734,    0,    0,    0,    0,  734,    0,  400,  734,  734,
    0,    0,    0,    0,    0,    0,  736,    0,    0,  736,
    0,    0,    0,    0,    0,  734,  734,  734,  734,  736,
  734,  734,  734,  734,    0,    0,  734,    0,  734,    0,
  734,  734,  734,    0,    0,  734,  734,    0,  734,  734,
  734,  400,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  400,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  736,    0,
    0,    0,    0,    0,    0,  734,  734,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  734,  734,    0,  734,  734,  734,  157,
  734,  734,  734,  734,  734,  734,  734,  734,  734,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  400,    0,  400,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  736,  736,  736,  736,  736,  736,  736,  736,
  736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
  736,    0,    0,    0,  736,  736,  736,  736,  736,  736,
  736,  442,    0,    0,    0,  736,    0,    0,  736,  736,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  736,  736,  736,  736,    0,
  736,  736,  736,  736,    0,   51,  736,    0,  736,    0,
  736,  736,  736,    0,    0,  736,  736,    0,  736,  736,
  736,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  442,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  736,  736,  400,    0,    0,
  400,    0,    0,    0,   51,    0,    0,    0,    0,    0,
  400,    0,    0,  736,  736,    0,  736,  736,  736,    0,
  736,  736,  736,  736,  736,  736,  736,  736,  736,    0,
    0,    0,    0,    0,  442,    0,  442,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  400,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   51,    0,    0,    0,    0,    0,    0,  127,    0,    0,
    0,  128,  129,  130,  131,  132,    0,  133,  134,  135,
  136,    0,  137,  138,    0,    0,  139,  140,  141,  142,
    0,    0,    0,  143,  144,    0,  790,    0,    0,    0,
    0,    0,  145,    0,  146,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  147,
  148,  149,    0,  400,  400,  400,  400,  400,  400,  400,
  400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
  400,  400,    0,    0,    0,  400,  400,  400,  400,  400,
  400,  400,    0,    0,  150,  790,  400,    0,    0,  400,
  400,  442,    0,    0,  442,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  442,    0,  400,  400,  400,  400,
    0,  400,  400,  400,  400,    0,    0,  400,    0,  400,
    0,    0,  400,    0,    0,    0,    0,    0,    0,  400,
  400,  400,    0,    0,    0,    0,    0,    0,   51,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  790,    0,  442,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  400,  400,    0,    0,
  225,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  400,  400,    0,  400,  400,  400,
    0,  400,  400,  400,  400,  400,  400,  400,  400,  400,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  442,  442,  442,
  442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
  442,  442,  442,  442,  442,  442,    0,    0,    0,  442,
  442,  442,  442,  442,  442,  442,    0,    0,    0,    0,
  442,    0,    0,  442,  442,    0,    0,    0,    0,    0,
  155,    0,    0,    0,    0,   51,   51,   51,   51,   51,
  442,  442,  442,  442,    0,  442,  442,  442,  442,    0,
    0,  442,    0,  442,    0,    0,  442,   51,   51,  790,
    0,    0,    0,  442,  442,  442,    0,    0,    0,    0,
    0,    0,    0,    0,   51,   51,   51,   51,    0,    0,
    0,   51,   51,    0,    0,    0,    0,   51,    0,    0,
   51,    0,    0,    0,    0,    0,    0,   51,   51,    0,
  442,  442,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  157,    0,    0,    0,    0,  285,    0,  442,  442,
  284,  442,  442,  442,    0,  442,  442,  442,  442,  442,
  442,  442,  442,  442,    0,    0,    0,    0,  283,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   51,   51,    0,   51,   51,   51,    0,   51,
   51,   51,   51,   51,   51,   51,   51,   51,  225,  470,
    0,    0,  225,  225,  225,  225,  225,    0,  225,  225,
  225,  225,    0,  225,  225,    0,    0,  225,  225,  225,
  225,    0,    0,    0,  225,  225,  790,  790,  790,  790,
  790,    0,    0,  225,    0,  225,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  790,  790,
  225,  225,  225,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  790,  790,  790,  790,    0,
    0,    0,  790,  790,    0,    0,    0,    0,  790,    0,
    0,  790,    0,    0,    0,  225,    0,    0,  790,  790,
    0,  157,    0,    0,    0,    0,  285,    0,    0,    0,
  703,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  283,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  790,  790,    0,  790,  790,  790,  470,
  790,  790,  790,  790,  790,  790,  790,  790,  790,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   67,   68,
    0,   69,    0,    0,    0,    0,  126,    0,    0,  127,
    0,    0,    0,  128,  129,  130,  131,  132,    0,  133,
  134,  135,  136,    0,  137,  138,    0,    0,  139,  140,
  141,  142,    0,    0,   98,  143,  144,    0,    0,    0,
    0,    0,    0,    0,  145,    0,  146,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  147,  148,  149,  686,    0,    0,    0,    0,  686,
    0,    0,    0,  686,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  686,    0,    0,    0,    0,  150,    0,  278,  279,
  280,  225,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  468,  469,    0,    0,    0,    0,    0,    0,
    0,    0,  686,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   67,   68,
    0,   69,   34,  152,  153,  154,  126,    0,    0,  127,
    0,    0,    0,  128,  129,  130,  131,  132,    0,  133,
  134,  135,  136,    0,  137,  138,  157,    0,  139,  140,
  141,  142,    0,    0,   98,  143,  144,    0,    0,    0,
    0,    0,    0,    0,  145,    0,  146,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  147,  148,  149,    0,    0,    0,    0,  524,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  150,    0,  278,  279,
  280,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  468,  469,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  155,    0,    0,    0,    0,    0,    0,    0,
    0,  686,  686,    0,  686,    0,    0,    0,    0,  686,
    0,    0,  686,  152,  153,  154,  686,  686,  686,  686,
  686,    0,  686,  686,  686,  686,    0,  686,  686,    0,
    0,  686,  686,  686,  686,    0,    0,  686,  686,  686,
    0,    0,    0,    0,    0,    0,  157,  686,    0,  686,
    0,  285,    0,    0,    0,  284,    0,    0,    0,    0,
    0,    0,    0,    0,  686,  686,  686,    0,    0,    0,
    0,    0,    0,  283,    0,    0,    2,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  686,
    0,  686,  686,  686,  470,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  686,  686,    0,    0,    0,
    0,    0,    0,    0,  127,  515,    0,    0,  128,  129,
  130,  131,  132,    0,  133,  134,  135,  136,    0,  137,
  138,  212,  155,  139,  140,  141,  142,  438,    0,    0,
  143,  144,    0,    0,    0,    0,  686,  686,  686,  145,
    0,  146,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  147,  148,  149,    0,
  439,    0,  440,  441,  442,  443,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  150,    0,  516,    0,    5,    6,    7,    0,  444,
  445,  446,  447,    0,    0,  448,    0,  517,    0,  449,
  450,  451,  518,    0,    0,    8,    9,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   10,   11,   12,   13,    0,  519,  520,    0,
  157,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   67,   68,    0,   69,  521,    0,    0,
    0,  126,    0,    0,  127,  686,    0,    0,  128,  129,
  130,  131,  132,    0,  133,  134,  135,  136,    0,  137,
  138,    0,    0,  139,  140,  141,  142,    0,    0,   98,
  143,  144,  522,  523,    0,    0,    0,    0,  156,  145,
    0,  146,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  452,    0,  147,  148,  149,   27,
   28,   29,   30,   31,   32,   33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  157,    0,    0,    0,    0,    0,    0,
    0,  150,    0,  278,  279,  280,    0,    0,    0,  212,
    0,    0,    0,  212,  212,  212,  212,  212,    0,  212,
  212,  212,  212,    0,  212,  212,    0,  155,  212,  212,
  212,  212,  212,    0,    0,  212,  212,    0,    0,    0,
    0,    0,    0,    0,  212,    0,  212,    0,    0,    0,
    0,  210,    0,    0,    0,    0,    0,    0,  152,  153,
  154,  212,  212,  212,    0,  212,    0,  212,  212,  212,
  212,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  157,    0,    0,  212,    0,    0,    0,
    0,    0,    0,    0,  212,  212,  212,  212,    0,    0,
  212,    0,    0,    0,  212,  212,  212,   67,   68,    0,
   69,    0,    0,    0,    0,  126,    0,    0,  127,    0,
    0,    0,  128,  129,  130,  131,  132,    0,  133,  134,
  135,  136,    0,  137,  138,    0,    0,  139,  140,  141,
  142,  210,    0,   98,  143,  144,    0,    0,    0,    0,
    0,    0,    0,  145,    0,  146,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  147,  148,  149,    0,    0,    0,    0,  155,    0,    0,
    0,    0,    0,    0,    0,    0,  157,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  150,  151,    0,    0,  212,
   67,   68,    0,   69,    0,    0,    0,    0,  126,    0,
    0,  127,    0,    0,    0,  128,  129,  130,  131,  132,
    0,  133,  134,  135,  136,    0,  137,  138,    0,    0,
  139,  140,  141,  142,  210,    0,   98,  143,  144,    0,
    0,    0,    0,    0,    0,    0,  145,    0,  146,    0,
    0,    0,  152,  153,  154,    0,    0,    0,    0,    0,
    0,    0,  212,  147,  148,  149,    0,  917,    0,    0,
    0,    0,    0,    0,    0,    0,  157,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
    0,    0,    0,    0,    0,    0,    0,    0,  150,    0,
   67,   68,    0,   69,    0,    0,    0,    0,  126,    0,
    0,  127,  918,    0,    0,  128,  129,  130,  131,  132,
    0,  133,  134,  135,  136,    0,  137,  138,    0,    0,
  139,  140,  141,  142,  210,    0,   98,  143,  144,    0,
    0,    0,    0,    0,    0,    0,  145,    0,  146,    0,
    0,    0,    0,    0,    0,  152,  153,  154,    0,    0,
    0,    0,    0,  147,  148,  149,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  157,
    0,  155,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  150,  151,
    0,    0,    0,   67,   68,    0,   69,    0,    0,    0,
    0,  126,    0,    0,  127,    0,    0,    0,  128,  129,
  130,  131,  132,    0,  133,  134,  135,  136,    0,  137,
  138,    0,    0,  139,  140,  141,  142,  210,    0,   98,
  143,  144,    0,    0,    0,    0,    0,    0,    0,  145,
    0,  146,    0,    0,    0,  152,  153,  154,    0,    0,
    0,    0,    0,    0,    0,  159,  147,  148,  149,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  155,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  546,    0,   67,   68,    0,   69,    0,    0,    0,
    0,  126,    0,    0,  127,    0,    0,    0,  128,  129,
  130,  131,  132,  159,  133,  134,  135,  136,    0,  137,
  138,    0,    0,  139,  140,  141,  142,    0,    0,   98,
  143,  144,    0,    0,    0,    0,    0,    0,    0,  670,
   33,  146,    0,    0,    0,    0,    0,    0,  152,  153,
  154,    0,    0,    0,    0,    0,  147,  148,  149,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  155,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  150,    0,    0,    0,    0,   67,   68,    0,   69,
    0,    0,    0,    0,  126,    0,    0,  127,    0,   33,
    0,  128,  129,  130,  131,  132,    0,  133,  134,  135,
  136,    0,  137,  138,    0,    0,  139,  140,  141,  142,
    0,    0,   98,  143,  144,    0,    0,    0,    0,    0,
    0,    0,  145,    0,  146,    0,    0,    0,  152,  153,
  154,    0,    0,    0,    0,    0,    0,    0,    0,  147,
  148,  149,    0,    0,    0,  225,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  155,    0,    0,
    0,    0,  159,  159,    0,  159,    0,    0,    0,    0,
  159,    0,    0,  159,  712,    0,    0,  159,  159,  159,
  159,  159,    0,  159,  159,  159,  159,    0,  159,  159,
    0,    0,  159,  159,  159,  159,    0,    0,  159,  159,
  159,    0,    0,  225,    0,    0,    0,    0,  159,  317,
  159,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  159,  159,  159,    0,    0,
    0,  152,  153,  154,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  155,   33,    0,
  159,    0,   33,   33,   33,   33,   33,  317,   33,   33,
   33,   33,  316,   33,   33,    0,    0,   33,   33,   33,
   33,    0,   37,    0,   33,   33,    0,   40,    0,   43,
    0,  316,  316,   33,    0,   33,   46,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   33,   33,   33,   49,    0,    0,    0,  159,  159,  159,
    0,    0,    0,    0,    0,    0,    0,   33,   52,    0,
    0,   33,   33,   33,   33,   33,    0,   33,   33,   33,
   33,    0,   33,   33,    0,   33,   33,   33,   33,   33,
    0,   37,    0,   33,   33,  316,   40,  316,   43,    0,
  155,    0,   33,    0,   33,   46,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   33,
   33,   33,   49,  225,    0,    0,    0,  225,  225,  225,
  225,  225,    0,  225,  225,  225,  225,   52,  225,  225,
    0,    0,  225,  225,  225,  225,    0,    0,    0,  225,
  225,    0,    0,    0,   33,    0,    0,    0,  225,    0,
  225,    0,    0,    0,    0,  236,    0,    0,    0,    0,
    0,  566,    0,    0,    0,  225,  225,  225,    0,    0,
    0,    0,    0,  236,    0,    0,  159,  317,    0,    0,
    0,    0,  317,  317,  317,  317,    0,  317,  317,  317,
  317,    0,  317,  317,    0,    0,  317,  317,  317,  317,
  225,    0,    0,  317,  317,    0,    0,    0,    0,    0,
    0,    0,  317,    0,  317,    0,    0,    0,    0,    0,
    0,    0,  316,    0,    0,  316,    0,    0,    0,  317,
  317,  317,    0,    0,    0,  316,    0,  236,    0,  236,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   33,    0,    0,  317,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  235,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  235,    0,    0,    0,    0,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  316,  316,
  316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
  316,  316,    0,    0,  236,    0,  316,  236,    0,    0,
  316,  316,  316,  316,  316,  316,  225,  236,  566,  235,
    0,  235,    0,    0,  316,  316,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  316,  316,  316,  316,    0,    0,    0,    0,    0,
    0,    0,  316,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  316,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  317,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  316,  316,  316,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  566,    0,    0,  316,  316,
  316,  316,  316,  316,  316,  236,    0,  527,    0,    0,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,    0,    0,  235,    0,  236,  235,
    0,    0,  236,  236,  236,  236,  236,  236,    0,  235,
    0,    0,    0,    0,    0,    0,  236,  236,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  236,  236,  236,  236,    0,    0,    0,
    0,  527,    0,  527,  236,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  236,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  236,  236,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  236,  236,  236,  236,  236,  236,  236,  235,    0,   34,
    0,    0,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,    0,    0,    0,    0,
  235,    0,    0,    0,  235,  235,  235,  235,  235,  235,
    0,    0,    0,    0,    0,    0,    0,    0,  235,  235,
    0,    0,    0,    0,    0,    0,    0,    0,  527,    0,
    0,  527,    0,    0,    0,  235,  235,  235,  235,    0,
    0,  527,  566,  325,    0,  326,  235,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  235,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  235,  235,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  235,  235,  235,  235,  235,  235,  235,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  325,    0,  748,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  527,  527,  527,  527,  527,  527,
  527,  527,  527,  527,  527,  527,  527,  527,    0,    0,
   67,    0,  527,   69,    0,    0,  527,  527,  527,  527,
  527,  527,    0,    2,    0,    0,    0,    0,    0,    0,
  527,  527,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  527,  527,  527,
  527,    0,    0,    0,    0,    0,    0,    0,  527,    0,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  527,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  527,  527,   67,
    0,    0,   69,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    2,    0,  325,    0,  932,    0,    0,    0,
    0,    0,    0,    0,  527,  527,  527,  527,  527,  527,
  527,    0,    0,  532,    0,    0,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
    0,    0,    0,    0,    7,    0,    0,    0,  315,  316,
  317,  318,  319,  320,    0,    0,    0,    0,    0,    0,
    0,    0,    8,    9,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   10,
   11,   12,   13,    0,    0,    0,    0,  532,    0,  532,
  321,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  322,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  371,    0,    0,    0,    0,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  323,
  324,   67,    0,    7,   69,    0,    0,  315,  316,  317,
  318,  319,  320,    0,    2,    0,    0,    0,    0,    0,
    0,    8,    9,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,    0,    0,    0,    0,    0,   10,   11,
   12,   13,    0,    0,  371,    0,  371,    0,    0,  321,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  322,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  532,    0,    0,  532,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  532,  323,  324,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   27,   28,   29,   30,   31,
   32,   33,    0,    0,    0,    0,    0,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,    0,    0,    0,    0,    7,    0,    0,    0,  315,
  316,  317,  318,  319,  320,    0,    0,    0,    0,    0,
    0,    0,    0,    8,    9,  363,    0,    0,    0,    0,
    0,  371,    0,    0,  371,    0,    0,    0,    0,    0,
   10,   11,   12,   13,  371,    0,    0,    0,    0,    0,
    0,  321,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  322,    0,    0,    0,    0,
  532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
  532,  532,  532,  532,    0,    0,    0,    0,  532,  363,
    0,  363,  532,  532,  532,  532,  532,  532,    0,    0,
  323,  324,    0,    0,    0,    0,  532,  532,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  356,  532,  532,  532,  532,   27,   28,   29,
   30,   31,   32,   33,  532,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  532,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  371,  371,  371,
  371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
  371,    0,    0,  532,  532,  371,  356,    0,  356,  371,
  371,  371,  371,  371,  371,    0,    0,    0,    0,    0,
    0,    0,    0,  371,  371,  210,    0,    0,    0,    0,
  532,  532,  532,  532,  532,  532,  532,    0,    0,    0,
  371,  371,  371,  371,    0,    0,  363,    0,    0,  363,
    0,  371,    0,    0,    0,    0,    0,    0,    0,  363,
    0,    0,    0,    0,    0,  371,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  210,
    0,  210,    0,    0,    0,    0,    0,    0,    0,    0,
  371,  371,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  371,  371,  371,
  371,  371,  371,  371,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  356,    0,    0,  356,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  356,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  526,    0,    0,
    0,    0,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,    0,    0,    0,    0,
  363,    0,    0,    0,  363,  363,  363,  363,  363,  363,
    0,    0,    0,    0,    0,    0,    0,    0,  363,  363,
    0,    0,    0,    0,    0,    0,  210,    0,   34,  210,
    0,    0,    0,    0,    0,  363,  363,  363,  363,  210,
    0,  526,    0,  526,    0,    0,  363,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  363,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  356,
  356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
  356,  356,  356,    0,  538,  363,  363,  356,    0,    0,
    0,  356,  356,  356,  356,  356,  356,    0,    0,    0,
    0,    0,    0,    0,    0,  356,  356,    0,    0,    0,
    0,    0,  363,  363,  363,  363,  363,  363,  363,    0,
    0,    0,  356,  356,  356,  356,    0,    0,    0,   34,
    0,    0,    0,  356,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  356,    0,    0,
    0,    0,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  210,    0,    0,  526,    0,
  210,  526,    0,    0,  210,  210,  210,  210,  210,  210,
    0,  526,  356,  356,    0,    0,    0,    0,  210,  210,
    0,    0,    0,    0,    0,    0,    0,    0,   34,    0,
    0,    0,    0,    0,    0,  210,  210,  210,  210,  356,
  356,  356,  356,  356,  356,  356,  210,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  210,    0,    2,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1160,  210,  210,    0,    0,    0,
    0,  187,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  210,  210,  210,  210,  210,  210,  210,    0,
    0,    0,    0,    0,  526,  526,  526,  526,  526,  526,
  526,  526,  526,  526,  526,  526,  526,  526,    0,    0,
    0,    0,  526,    0,    0,    0,  526,  526,  526,  526,
  526,  526,    0,    0,    0,    0,    0,  187,    0,    0,
  526,  526,    0,    2,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  526,  526,  526,
  526,    0,    0,    0,    0,    0,    0,    0,  526,    3,
    4,    5,    6,    7,    0,    0,    0,    0,    0,    0,
    0,    0,  526,    0,    0,    0,    0,    0,    0,    0,
    0,    8,    9,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   10,   11,
   12,   13,    2,    0,    0,   14,   15,  526,  526,    0,
    0,   16,    0,    0,   17,    0,    0,    0,    0,    0,
    0,   18,   19,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  526,  526,  526,  526,  526,  526,
  526,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  515,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,    4,    5,    6,    7,  187,   20,   21,    0,   22,
   23,   24,    0,   25,   26,   27,   28,   29,   30,   31,
   32,   33,    8,    9,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   10,
   11,   12,   13,    0,    0,    0,   14,   15,    0,    0,
    0,    0,   16,    0,  187,   17,    0,    0,    0,    0,
    0,    0,   18,   19,    0,    0,    0,    0,  855,  516,
    0,    5,    6,    7,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  517,    0,    0,    0,    0,  518,    0,
    0,    8,    9,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   10,   11,
   12,   13,    0,  519,  520,    0,    0,   20,   21,    0,
   22,   23,   24,    0,   25,   26,   27,   28,   29,   30,
   31,   32,   33,  521,    0,    0,    0,    0,    0,    0,
    0,    0,  187,    0,  187,  187,  187,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  187,    0,    0,    0,
    0,  187,    0,    0,  187,  187,    0,    0,  522,  523,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  187,  187,  187,  187,    0,  187,  187,    0,    0,
    0,    0,    0,    0,    0,   27,   28,   29,   30,   31,
   32,   33,  814,    0,    0,    0,  187,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  815,    0,    0,    0,
    0,  816,  817,    0,  818,  819,  820,  821,  822,  823,
  814,  824,  825,    0,  826,  827,  828,  829,  830,    0,
    0,  187,  187,    0,  815,    0,    0,    0,    0,  816,
  817,    0,  818,  819,  820,  821,  822,  823,    0,  824,
  825,    0,  826,  827,  828,  829,  830,    0,  187,  187,
  187,  187,  187,  187,  187,    0,    0,    0,    0,    0,
  831,    0,  832,    0,    0,    0,    0,  833,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  834,    0,    0,    0,    0,  831,    0,
  832,    0,    0,    0,    0,  833,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  834,    0,    0,    0,    0,  835,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  835,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  836,    0,  837,
  838,  839,  840,  841,  842,  843,  844,  845,  846,  847,
  848,  849,  850,  851,  852,  853,    0,    0,    0,  854,
    0,    0,    0,    0,    0,  836,    0,  837,  838,  839,
  840,  841,  842,  843,  844,  845,  846,  847,  848,  849,
  850,  851,  852,  853,    0,    0,    0,  854,
};
static int yycheck[] = {                                       4,
   24,   24,  102,  103,  155,    1,   22,   23,   93,  418,
    1,  420,   24,  299,   19,    1,  299,  181,   13,  299,
    1,  941,   27,   28,   29,   30,    1,  965,   64,   24,
   38,   38,    1,   41,  668,  167,   44,   44,  796,  472,
   40, 1109,   46,   46,   59,   43,  742,  682,   91,  193,
  194,  195,  196,  197, 1137,  264,  491,  492,  493,   46,
  123,   46,   46,   24,   36,   37,  123,  167,   41,   46,
   41, 1487,   38,   91,  365,   42,   42,   41,   61,   61,
   33, 1099,  105,   91,  169,   40,   44,   43,   60,   45,
  190,   43,  727, 1211,   60,  125,  262,  319,  123,   46,
  471,   40,  354,  125,   40,  128,   40,   46,  113,  104,
  115,  116,  117,   59,   61,  215,  263,   44,  483,   20,
   21,  145,  288,   41,  148,   91,   40,   46,  151,   40,
   40,   58, 1474,   47,   41,   93,  264,   42,  503,  263,
   40,   93,   41,  104,  168,   38,   60,   42,  233,   42,
   40,  156,  157,   46,   47,   91,   42,   91,  380,   41,
   42,  156, 1504,  199,   65,   38,   40,   60,  123,   42,
   91,   72,  167, 1476,   93,  299,  342,   92,  874,  875,
   91,   91,  187,   41,   76,  208,   41,   60,   41,   44,
   40,   91,  356,   61,   41, 1611,   41,   91,   91,   40,
  205,  206,  334, 1506,   41,  210,  529,   41,   41,   91,
  111,  112,  471,   38,   43,  210, 1477,   42,   91,  915,
   61,   43,  260,  261,   41,  263, 1344,  232,   41,  664,
   46,  203,   61,  123,  239,   60,  260,  267,  264,  339,
   41,   91,  260,  261, 1262,  263, 1507,  123,  311,  123,
  268,  260,  543,  338,  263,  951,  157,  692,   41,  316,
  283,   59,  267,  268,  123,  270,   91,  290,  292,  274,
   59,   93,  277,  188,  526,  264,  281,   93,  296,  262,
  262,  286,  287,  288,  289,  262,  275,   59,  306,  181,
  315,  316,  263,  260,  261,  930,  263,  506,  507,  508,
  264,   38,  338,  299,  300,   42,  288,  260,  299,  300,
  263,  264,  335,  299,  300,  331,  332,  232,  299,  300,
  221,  222,  365,   60,  299,  300,   59,  125,  299,  296,
  299,  300,   40,  318,  318,  262,  125,  359,  294,  334,
  335,  776,  364,  471,  359,  340,  264,  320,  321,  364,
  306,  307,  267,  125,   91,  260,  261,  264,  263,  262,
  274,  357,  358,  359,  360,  264,  265,  268,  324,  264,
  342,  357,  262,  274,  260,  261, 1011,  263,  264,  340,
   40,  282,  357,  358,  359,  360,  267,  391,  262,  275,
  315,  296,  125,  391,  360,  361,  362,  415,  416,  417,
  416, 1484,  123, 1341,  391,  260,  264,  265,  263,  324,
  296,  264,  265,  577,  315,   46,  317,  264,  374,  422,
  321,  123,  337,   40,  588,   40,  861,  264,  329,  330,
  264,  264,  333,  471, 1502, 1518,  459,  329,   46,   38,
  123,  333,  264,   42,  877,   41,  546,  264,  453,  294,
  455,  264,   60,  453, 1212,  356,  301,   91,  303,  304,
  305,   60,   93,  264,  356,  470, 1100,  360,  361,  362,
  385,   44,  467,   46,   91,  470,   91,  482,  123,   40,
   40,  264,  487,  266,   41,   42,  123,  360,  361,  362,
  260,  261,   91,  263,   43,   46,   45,  342,  343,  344,
  543,  273,   41,  286,  287,   44,  473,  512,  409,  410,
  595,  412,   40,  414,   40,  481,  264,  265,  526,  526,
   40,  536,  537,  538,  539,  540,  541,  542,  429,  430,
   91,   91,  123,  425,   91,  360,  361,  362,  543,  544,
  273,   46,   93,  388,  389,  390,  461,  392,  571,   41,
  395,  715,   44,  638, 1492,  640,  264,  265,  266,  564,
   40,  359,   44,   91,   33,   42,  364,  339,  473,  470,
  359,   91, 1268, 1269,   41,  364,   43,  260,  286,  287,
  263,  264,  497,  498,   40,   33,  487,  473,  544,   40,
  536,  537,  538,  539,  540,  541,  542,  512,  570,   40,
  260,  261, 1522,  263,   40,   40,  706,   40,  523,  614,
   59,   91,  712,  649,   91,  620,  639,   41,  519,  520,
   40,   44,   40,  360,  361,  362,  260,  261,  306,  263,
  602,  603,  260,  261,   44,  263,  608,   40,  610,   62,
   91,  542,   61,   38,  545,  931,  670,   47,  931,  564,
  735,  931,   41,   42,  391,   91,  679,  801,   91,  803,
  804,  805,  806,  807,  579,  566,   40,   91,  264,  265,
  266,   91,  573,   91,  566,  391,  125,  682,  391,  702,
  452,  573,  687,   93,  689,  577,   91,  588,   91,   41,
  286,  287,  464,  463,  466,  467,  588,  469,  470,  391,
  705, 1336,   91,  726,  709,  710,  711,   47,   91,  684,
   41,  391,  613,  729,  686,   59, 1125,   91, 1127,  452,
   40,  744,  727,   41,   42,  626,   91,   40,  123,  462,
  320,  321,  465, 1429,  260,  261,  637,  263,  536,  537,
  538,  539,  540,  541,  542,  294, 1442,  536,  537,  538,
  539,  540,  541,  542,  585,  586,  587,  306,  307,  660,
   40,  360,  361,  362,  536,  537,  538,  539,  540,  541,
  542,   91,   44,   91,  779,  324,  781,  862,   91,  283,
  284,  125,   41,  123,  267,   42,  871,  792,   41,  704,
  705,  260,  261,   44,  263,  264, 1431,  698,  699,  260,
  261,   44,  263,  536,  537,  538,  539,  540,  541,  542,
   91,   91,  260,  261,  318,  263,  264,   41,  719,   62,
  721,   93,  723,  715,  273,  374, 1469,  728,  316, 1525,
   40,  732, 1475,   40,   91,  463,  260,  261,  862,  263,
  732,   38,   93,   40,  268,   42,   42,  264,   38,   44,
  751,   46,   42,  393,  394,  260,  261,   40,  263,  751,
  761,  762, 1505,   60,  281,  282,  283,   41,  760,   43,
   60, 1567,  296,   41,  775,  299,   40,  260,  261,  794,
  263,   91,  306,  278,   91,   61,  281,  282,  283,  284,
  339,  286,  287,  288,   91,  260,  261,  798,  263,   93,
  923,   91, 1598,   40,  916,  990,  929,  260,  261,  810,
  263,  812,   43,  374,  375,  920,   41, 1613,   43,   44,
  260,  261,  897,  263,  263,  930,  264,  899,  266,  273,
   41,  260,  261, 1568,  263,  931,   93,  933,  934,  935,
  931,  946,  933,  934,   44,  931,   46, 1032,  286,  287,
  931,   41,  867,   43,  458,  459,  931,  461,  933,  934,
  935,  862,  931,  294,  933,  934,  476,  859,   91,  280,
  301,  872,  303,  304,  305, 1610,  266,  330,  331,  260,
  261,  986,  263,  432,  433,   91,  260,  261,   93,  263,
   93,  415,  416,  417, 1145,   40,  286,  287,  260,  261,
 1085,  263,  264,  452,  279,  280, 1011,  952,   33,  954,
  902,  342,  343,  344,  289,  464,   41,  466,  467,  260,
  469,  470,  263,  264,  925,  940,  927,  942,   40, 1161,
 1162, 1163, 1164,  125,  301,  294,  303,  304,  305, 1171,
 1172, 1173,  301,   91,  303,  304,  305,  260,  261,  295,
  263,  952,   58,  954,  300,   33,  302,  388,  389,  390,
  952,  392,  954,  309,  395,   40,   91,  982,   40,  984,
  260,  261,   40,  263,   40,  976,  260,  261,  979,  263,
  326,   41,   40,  342,  343,  344,  125,  536,  537,  538,
  539,  540,  541,  542,  310,  341,  312,  313,  314,   44,
  374,  375,   41, 1512, 1513,  393,  394, 1123,  452,   43,
   44, 1127,  260,  261,   40,  263,   40, 1141,  462, 1135,
  262,  465,  330,  331,  332,    0,   43,   44,  123,  388,
  389,  390,  262,  392,   44,   40,  395,  260,  261,   41,
  263,  281,  282,  283,  284,  268,   41,   91,   60, 1154,
  274, 1236,   41,   42,  260,  261, 1151,  263,  366,  367,
  368,  464,  268,  360,  361,  362, 1161, 1162, 1163, 1164,
  360,  361,  362,  296,  849,  850, 1171, 1172, 1173, 1080,
  328,  274,  330,  331,   59,  264,  265,  266,  275,  337,
  296,   62,  536,  537,  538,  539,  540,  541,  542,   44,
 1205,  123,   33,   59,  365,  123,   58,  286,  287, 1110,
 1111, 1112,  281,  282,  283,  284, 1117, 1118, 1119, 1120,
 1121, 1122,  123, 1124, 1125, 1126, 1326, 1128, 1129, 1130,
 1131, 1132, 1133, 1134,  274, 1136,  123, 1138,   40, 1140,
   40, 1142, 1157, 1158,   40,   40,  271,   41,  468,  317,
  125,  276,  277,  278,  279,  317,  281,  282,  283,  284,
   91,  286,  287,   61, 1280,  290,  291,  292,  293,  125,
   61,   61,  297,  298, 1359,  280,  281,  282,  283,  284,
   38,  306,  471,  308,  281,  282,  283,  284, 1263, 1181,
 1314,   40,  415,  416,  417,   41,  471, 1198,  323,  324,
  325,   44, 1203, 1195,   59, 1197,   93,   41,   41,  415,
  416,  417, 1317, 1214,   41,  295,  260,  261,   41,  263,
  300,   41,  302, 1224,  268,   41,   58, 1228, 1229,  309,
   44, 1336,   41,  358,  294,   61,   44,   44, 1239,  125,
  263,  301,   61,  303,  304,  305,  326,  327,   40,  330,
  331,  332,  296,   40,  125,  299,   41,   41,   40, 1260,
 1261,  341,  306,  274,  269,  123,  274,  272,   93,   93,
  125,   41,   44, 1274, 1275, 1276, 1277, 1278, 1279,   41,
 1281,   44,  342,  343,  344,  366,  367,  368,   41,   44,
  295,  296,  372,   40,   58,  300,   40,  302,  273,   38,
   41, 1376,  294,   41,  309,   40,   40,  498,   41, 1432,
 1495,   41,   41,  260,  261,   40,  263,  273,   41,   62,
 1335,  326,   91,   41,   40,  490, 1431,  502,  388,  389,
  390, 1346,  392,   40,  277,  395,  341,   41,   62,   61,
  271,    0,  125,  123,  275,  276,  277,  278,  279,   91,
  281,  282,  283,  284,   41,  286,  287, 1358,  452,  290,
  291,  292,  293,  391, 1365,   93,  297,  298,   41,   41,
   41,  415,  416,  417,   33,  306,   93,  308,  317,   38,
  317,   40,   41,   42,   41,   44, 1571,   40,   47,   40,
   58,   58,  323,  324,  325,   93, 1520, 1513,   93,   93,
   59,   60,   61,   62, 1604,   93,   40,   44,  355,  356,
  357,   91,  505,   91,   40, 1430,   40,  123,  273,  544,
  278,   41,   41,  281,  282,  283,  284,  358,  286,  287,
  288,   93,   91,  380,   93,  410,  411,  412,  413,  414,
  280,  281,  282,  283,  284,   40,   40,   93,   41,  422,
 1451, 1452, 1453,   41,   93,  511,  274,  432,  433,   44,
   41,   58,   41, 1568,  123,   41,  125,   44,   60,  425,
  426,  427,  428, 1488,  449,  450,  451,  452,   61,   93,
   40,  456,  457,   40, 1607,   38,   40,  462,   40,  464,
  465,   40,   40,  449,  450,  451,  452,  472,  473,   40,
   40,   40, 1503,   40,   40, 1610,   40, 1508, 1509, 1510,
  125, 1512,   62, 1514, 1515, 1516,   41,   41,  260,  261,
  262,  263,  264,   93,   93,   41,  268,   93,  475,   41,
  477,  478,  479,  480,   93, 1536, 1537, 1538,   41,  278,
   41,  283,  281,  282,  283,  284,   93,  286,  287,  288,
   93,   41,  527,  528,  296,  530,  531,  532,   41,  534,
  535,  536,  537,  538,  539,  540,  541,  542,   41,   41,
  123,   93,   93,  428,   41,  430,  431,   41,  320,  321,
  536,  537,  538,  539,  540,  541,  542,   93,   93,   41,
   41,   93,   41, 1608,  449,  450,  451,  452, 1599,   93,
   93,  260,  261,  262,  263,   41,   41,   93,   41,  268,
   41,  263,  271,  544,  273,  274,  275,  276,  277,  278,
  279,   44,  281,  282,  283,  284,  274,  286,  287,  288,
   93,  290,  291,  292,  293,   41,   41,  296,  297,  298,
  299,   41,   40,   93,   40,   93,   93,  306,   40,  308,
   40,   40,  311,   41,   58,   58,  315,  316,   41,  318,
   41,   58,   41,  322,  323,  324,  325,   40,   40,   93,
   41,   41,   41,  415,  416,  417,   93,   41,   93,   41,
  339,  536,  537,  538,  539,  540,  541,  542,   40,   40,
   40,   93,   33,   40,   40,   40,   40,   40,   40,  358,
  359,  360,  361,  362,   40,  364,  365,  260,   40,   40,
  263,   41,   40,   93,   41,  374,  375,  263,   93,   58,
   60,   40,   40,   40,   40,  278,   33,   41,  281,  282,
  283,  284,  391,  286,  287,  288,   91,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,   40,  274,   41,   41,    0,
   41,   41,   40,  263,   91,   41,  358,   41,   40,   40,
  449,  450,  451,  452,   41,  454,  455,  456,  457,  511,
   41,  460,   40,  462,  274,  464,  465,  466,  467,   41,
  469,  470,   33,  472,  473,  474,   41,   38,  123,   40,
   41,   42,  481,   44,  125,   41,   47,  269,  123,  123,
  272,  123,   44,   62,  125,  123,  125,   40,   59,   60,
   61,   62,  123,   62,   41,  123,   41,  123,  125,   41,
  509,  510,  511,  295,  296,   41,   41,   41,  300,  125,
  302,  123,   41,   62,  123,   41,   40,  309,  527,  528,
   91,  530,  531,  532,  123,  534,  535,  536,  537,  538,
  539,  540,  541,  542,  326,  544,   40,  123,   41,  263,
   46,   93,   93,  275,   42,  263,   61,  275,  275,  341,
  263,   91,  123,  123,  125,  263,  277,  278,  279,  275,
  281,  282,  283,  284,  275,  286,  287,  288,  275,  290,
  291,  292,  293,  407,  791,  263,  297,  298,  981,  958,
  271,  699,   59,  858,    0,  180,  277,  278,  279, 1447,
  281,  282,  283,  284, 1221,  286,  287,  956, 1085,  290,
  291,  292,  293,  260,  261,  275,  263,  298,  877,  679,
  275,  268,  275,  275,  271,  275,  275,  275,  275,  276,
  277,  278,  279,  275,  281,  282,  283,  284,  275,  286,
  287, 1209,  867,  290,  291,  292,  293, 1222,  467,  296,
  297,  298,  340,   59,  365,   61,   24,    9,  125,  306,
  864,  308, 1149,  260,  261,  114,  263,  262,  521,   24,
  718,  714,  292,  649,   64,  583,  323,  324,  325,  479,
   -1,  358,  277,  278,  279,   -1,  281,  282,  283,  284,
   -1,  286,  287,  288,   -1,  290,  291,  292,  293,  260,
  261,   -1,  263,   -1,  299,   -1,   -1,  268,   -1,   -1,
  271,  358,  273,  274,  275,  276,  277,  278,  279,  125,
  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,
  291,  292,  293,   -1,  294,  296,  297,  298,  299,   -1,
   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,  309,
  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,  355,  356,
  357,  322,  323,  324,  325,  325,   -1,   -1,  415,  416,
  417,   -1,   -1,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  380,   -1,   -1,   -1,   -1,  348,  349,
  350,  351,   -1,   -1,   -1,   -1,   -1,  358,   -1,  360,
  361,  362,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,
  380,  381,  382,  383,  384,  385,  386,   -1,   -1,  296,
  391,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,   -1,   -1,   -1,  273,  429,   -1,
   -1,  432,  433,   -1,   -1,   -1,   -1,    0,  475,   -1,
  477,  478,  479,  480,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,   -1,  454,  455,  456,  457,  544,   -1,  460,
   -1,  462,   -1,  464,  465,  466,   -1,   -1,  469,  470,
   33,  472,  473,  474,   -1,   38,  322,   40,   41,   42,
  481,   44,   -1,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,
   -1,   -1,   -1,  410,   -1,   -1,   -1,   -1,  509,  510,
  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
  444,  445,  446,  447,  448,   -1,  527,  528,   91,  530,
  531,  532,   -1,  534,  535,  536,  537,  538,  539,  540,
  541,  542,   -1,  544,   -1,  452,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  462,   -1,   -1,  465,   -1,
  123,   -1,  125,   -1,  410,  411,  412,  413,  414,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,
   -1,   -1,   -1,  429,   -1,   -1,  432,  433,   -1,   -1,
   59,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,
  456,  457,   -1,   -1,   -1,   -1,  462,   -1,   -1,  465,
   -1,   -1,   -1,   -1,   -1,   -1,  472,  473,  474,  536,
  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,  535,
  536,  537,  538,  539,  540,  541,  542,  260,  261,   -1,
  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,  125,  281,  282,
  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,
  293,   -1,   -1,  296,  297,  298,  299,   -1,   -1,   -1,
   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,  311,   -1,
   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,
  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  358,   -1,  360,  361,  362,
   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  391,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
  423,  424,   -1,   -1,   -1,  273,  429,   -1,   -1,  432,
  433,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,
   -1,  454,  455,  456,  457,   -1,   -1,  460,   -1,  462,
   -1,  464,  465,  466,   -1,   -1,  469,  470,   33,  472,
  473,  474,   -1,   38,  322,   40,   41,   42,  481,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
   -1,  410,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  527,  528,   91,  530,  531,  532,
   -1,  534,  535,  536,  537,  538,  539,  540,  541,  542,
   -1,  544,   -1,  452,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  462,   -1,   -1,  465,   -1,  123,   -1,
  125,   -1,  410,  411,  412,  413,  414,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,   -1,   -1,
   -1,  429,   -1,   -1,  432,  433,   -1,   59,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,   -1,  454,  455,  456,  457,
   -1,   -1,   -1,   -1,  462,   -1,   -1,  465,   -1,   -1,
   -1,   -1,   -1,   -1,  472,  473,  474,  536,  537,  538,
  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,
  528,   -1,  530,  531,  532,   -1,  534,  535,  536,  537,
  538,  539,  540,  541,  542,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,  125,  281,  282,  283,  284,
   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,
   -1,  296,  297,  298,  299,   -1,   -1,   -1,   -1,   -1,
   -1,  306,   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,
   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,  323,  324,
  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,   -1,  360,  361,  362,   -1,   -1,
   -1,  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,   -1,  391,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
   -1,   -1,   -1,  273,  429,   -1,   -1,  432,  433,   -1,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,  454,
  455,  456,  457,   -1,   -1,  460,   -1,  462,   -1,  464,
  465,  466,   -1,   -1,  469,  470,   33,  472,  473,  474,
   -1,   38,   -1,   40,   41,   42,  481,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   60,   61,   62,   -1,   -1,  410,   -1,
   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  527,  528,   91,  530,  531,  532,   -1,  534,
  535,  536,  537,  538,  539,  540,  541,  542,   -1,  544,
  452,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  462,   -1,   -1,  465,   -1,   -1,  123,   -1,  125,   -1,
  410,  411,  412,  413,  414,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  432,  433,   -1,   59,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,   -1,   -1,   -1,  456,  457,   -1,   -1,
   -1,   -1,  462,   -1,   -1,  465,   -1,   -1,   -1,   -1,
   -1,   -1,  472,  473,  536,  537,  538,  539,  540,  541,
  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  271,   59,   -1,   -1,
   -1,  125,  277,  278,  279,   -1,  281,  282,  283,  284,
   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,
   -1,   -1,  297,  298,   -1,   -1,   -1,  527,  528,   -1,
  530,  531,  532,   -1,  534,  535,  536,  537,  538,  539,
  540,  541,  542,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,   -1,   -1,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,  125,  281,  282,  283,  284,   -1,  286,
  287,  346,   -1,  290,  291,  292,  293,   -1,   -1,  296,
  297,  298,  299,   -1,   -1,   -1,   -1,   -1,   -1,  306,
  365,  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,  316,
   -1,   -1,   -1,   -1,   -1,  322,  323,  324,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,   -1,  360,  361,  362,   -1,   -1,   -1,  273,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,   -1,  391,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  420,  421,  422,  423,  424,   -1,   -1,
   -1,  273,  429,   -1,   -1,  432,  433,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,  456,
  457,   -1,   -1,  460,   -1,  462,   -1,  464,  465,  466,
   -1,   -1,  469,  470,   33,  472,  473,  474,   -1,   38,
   -1,   40,   41,   42,  481,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,   -1,   -1,  410,   -1,   -1,   -1,
   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  527,  528,   91,  530,  531,  532,   -1,  534,  535,  536,
  537,  538,  539,  540,  541,  542,   -1,  544,  452,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  462,   -1,
   -1,  465,   -1,   -1,  123,   -1,  125,   -1,  410,  411,
  412,  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  432,  433,   -1,   59,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,   -1,   -1,   -1,  456,  457,   -1,   -1,   -1,   -1,
  462,   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,   -1,
  472,  473,  536,  537,  538,  539,  540,  541,  542,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,  278,  279,
   -1,  281,  282,  283,  284,   59,  286,  287,  288,  125,
  290,  291,  292,  293,   -1,   -1,   -1,  297,  298,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,
  532,   -1,  534,  535,  536,  537,  538,  539,  540,  541,
  542,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
   -1,   -1,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,  125,  281,  282,  283,  284,   -1,  286,  287,   -1,
   -1,  290,  291,  292,  293,  365,   -1,  296,  297,  298,
  299,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,
   -1,   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,
   -1,   -1,   -1,  322,  323,  324,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
   -1,  360,  361,  362,   -1,   -1,   -1,  273,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  296,   -1,  391,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,  422,  423,  424,   -1,   -1,   -1,  273,
  429,   -1,   -1,  432,  433,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,   -1,  454,  455,  456,  457,   -1,
   -1,  460,   -1,  462,   -1,  464,  465,  466,   -1,   -1,
  469,  470,   33,  472,  473,  474,   -1,   38,   -1,   40,
   41,   42,  481,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,
   61,   62,   -1,   -1,  410,   -1,   -1,   -1,   -1,   -1,
  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,
   91,  530,  531,  532,   -1,  534,  535,  536,  537,  538,
  539,  540,  541,  542,   -1,  544,  452,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  462,   -1,   -1,  465,
   -1,   -1,  123,   -1,  125,   -1,  410,  411,  412,  413,
  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,  433,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,
   -1,   -1,  456,  457,   -1,   -1,   -1,   -1,  462,   -1,
   -1,  465,   -1,   -1,   -1,   -1,   -1,   -1,  472,  473,
  536,  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,
  534,  535,  536,  537,  538,  539,  540,  541,  542,  260,
  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,  125,
  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,
  291,  292,  293,   -1,   -1,  296,  297,  298,  299,   -1,
   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,
  311,   -1,   -1,   -1,   -1,  316,  257,   -1,   -1,   -1,
   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  276,  277,   -1,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,   -1,  289,  290,
  291,  292,  293,   -1,   -1,   -1,   -1,  358,   -1,  360,
  361,  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  391,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,   -1,   -1,   -1,  273,  429,   -1,
   -1,  432,  433,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,   -1,  454,  455,  456,  457,   -1,   -1,  460,
   -1,  462,   -1,  464,  465,  466,   -1,   -1,  469,  470,
   33,  472,  473,  474,   -1,   38,   -1,   40,   41,   42,
  481,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   91,  530,
  531,  532,   -1,  534,  535,  536,  537,  538,  539,  540,
  541,  542,   -1,  544,  485,  486,   -1,  488,  489,  490,
   -1,  492,  493,   -1,   -1,  496,  497,   -1,  499,   -1,
  123,   -1,  125,   -1,  410,  411,  412,  413,  414,   -1,
   -1,  512,  513,  514,  515,  516,  517,  518,  519,  520,
  521,  522,  523,  524,  525,   -1,  432,  433,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,   -1,   -1,   -1,
  456,  457,   -1,   -1,   -1,   -1,  462,   -1,   -1,  465,
   -1,   -1,   -1,   -1,   -1,   -1,  472,  473,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,  535,
  536,  537,  538,  539,  540,  541,  542,  260,  261,   -1,
  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,  125,  281,  282,
  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,
  293,   -1,   -1,  296,  297,  298,  299,   -1,   -1,   -1,
   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,  311,   -1,
   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,
  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  358,   -1,  360,  361,  362,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
  423,  424,   -1,   -1,   -1,  273,  429,   -1,   -1,  432,
  433,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,
   -1,  454,  455,  456,  457,   -1,   -1,  460,   -1,  462,
   -1,  464,  465,  466,   -1,   -1,  469,  470,   33,  472,
  473,  474,   -1,   38,   -1,   40,   41,   42,  481,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  527,  528,   91,  530,  531,  532,
   -1,  534,  535,  536,  537,  538,  539,  540,  541,  542,
   -1,  544,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,  123,   -1,
  125,   -1,  410,  411,  412,  413,  414,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  432,  433,  294,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,   -1,   -1,   -1,  456,  457,
   -1,   -1,   -1,   -1,  462,  323,   -1,  465,   -1,  327,
   -1,   -1,  330,  331,  472,  473,   -1,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,   -1,
   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,  356,   59,
   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,
  528,   -1,  530,  531,  532,   -1,  534,  535,  536,  537,
  538,  539,  540,  541,  542,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,  125,  281,  282,  283,  284,
   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,
   -1,  296,  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  306,   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,
   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,  323,  324,
  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,   -1,  360,  361,  362,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
   -1,   -1,   -1,  273,  429,   -1,   -1,  432,  433,   -1,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,  454,
  455,  456,  457,   -1,   -1,  460,   -1,  462,   -1,  464,
  465,  466,   -1,   -1,  469,  470,   33,  472,  473,  474,
   -1,   38,   -1,   40,   41,   42,  481,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  527,  528,   91,  530,  531,  532,   -1,  534,
  535,  536,  537,  538,  539,  540,  541,  542,   -1,  544,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  260,  261,   -1,  263,   -1,   -1,  123,   -1,  125,   -1,
  410,  411,  412,  413,  414,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  432,  433,  294,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,   -1,   -1,   -1,  456,  457,   -1,   -1,
   -1,   -1,  462,  323,   -1,  465,   -1,  327,   -1,   -1,
  330,  331,  472,  473,   -1,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,   -1,   -1,   -1,
   -1,   -1,   -1,  353,   -1,   -1,  356,   59,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,
  530,  531,  532,   -1,  534,  535,  536,  537,  538,  539,
  540,  541,  542,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,   -1,   -1,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,  125,  281,  282,  283,  284,   -1,  286,
  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,
  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,
   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,  316,
   -1,   -1,   -1,   -1,   -1,  322,  323,  324,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,   -1,  360,  361,  362,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  420,  421,  422,  423,  424,   -1,   -1,
   -1,  273,  429,   -1,   -1,  432,  433,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,  456,
  457,   -1,   -1,  460,   -1,  462,   -1,  464,  465,  466,
   -1,   -1,  469,  470,   33,  472,  473,  474,   -1,   38,
   -1,   40,   41,   42,  481,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  527,  528,   91,  530,  531,  532,   -1,  534,  535,  536,
  537,  538,  539,  540,  541,  542,   -1,  544,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,  410,  411,
  412,  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  432,  433,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,   -1,   -1,   -1,  456,  457,   -1,   -1,   -1,  125,
  462,   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,   -1,
  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,
  532,   -1,  534,  535,  536,  537,  538,  539,  540,  541,
  542,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
   -1,   -1,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,  125,  281,  282,  283,  284,   -1,  286,  287,   -1,
   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,
   -1,   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,
   -1,   -1,   -1,  322,  323,  324,  325,  273,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
   -1,  360,  361,  362,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  391,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,  422,  423,  424,   -1,   -1,   -1,  273,
  429,   -1,   -1,  432,  433,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,   -1,  454,  455,  456,  457,   -1,
   -1,  460,   -1,  462,   -1,  464,  465,  466,   -1,   -1,
  469,  470,   33,  472,  473,  474,   -1,   38,   -1,   40,
   41,   42,  481,   44,   -1,   -1,  432,  433,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,  452,   -1,   -1,   -1,
  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,  464,   -1,
  466,   -1,   -1,  469,  470,   -1,   -1,   -1,  527,  528,
   91,  530,  531,  532,   -1,  534,  535,  536,  537,  538,
  539,  540,  541,  542,   -1,  544,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,   -1,  410,  411,  412,  413,
  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,  433,
  536,  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,
   -1,   -1,  456,  457,   -1,   -1,   -1,   -1,  462,   -1,
   -1,  465,   -1,   -1,   -1,   -1,   -1,   -1,  472,  473,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,
  534,  535,  536,  537,  538,  539,  540,  541,  542,  260,
  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,   -1,
  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,
  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,
   -1,   -1,   -1,   -1,    0,  306,   -1,  308,   -1,   -1,
  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,
   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  360,
  361,  362,   -1,   59,   -1,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  391,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,   -1,   -1,   -1,  123,  429,  125,
   -1,  432,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,   -1,  454,  455,  456,  457,   -1,   -1,  460,
   -1,  462,   -1,  464,  465,  466,   -1,   -1,  469,  470,
   -1,  472,  473,  474,   -1,   -1,   -1,   -1,   -1,   -1,
  481,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,
  531,  532,   -1,  534,  535,  536,  537,  538,  539,  540,
  541,  542,   -1,  544,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   -1,   -1,    0,   -1,  294,  295,
  306,   -1,  308,   -1,  300,  311,  302,   -1,   -1,   -1,
  316,   -1,   -1,  309,   -1,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  326,  327,   -1,  329,  330,  331,  332,  333,   -1,   -1,
   -1,   -1,  338,   -1,   -1,  341,   -1,   -1,   -1,   -1,
   -1,  347,  358,   -1,   -1,   59,  352,   -1,  354,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,  374,  375,
  366,  367,  368,  369,  370,  371,  372,  373,   -1,   -1,
   -1,   -1,   -1,  379,   -1,  391,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,  424,  123,
   -1,  125,   -1,  429,   -1,   -1,  432,  433,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,
  456,  457,   -1,   -1,  460,   -1,  462,   -1,  464,  465,
  466,   -1,   -1,  469,  470,   -1,  472,  473,  474,   -1,
   -1,   -1,   -1,   -1,   -1,  481,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,  535,
  536,  537,  538,  539,  540,  541,  542,   -1,  544,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
   -1,   -1,   -1,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,  288,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  270,  271,  272,   -1,    0,  275,  276,
  277,  278,  279,   -1,  281,  282,  283,  284,  322,  286,
  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,
  297,  298,   -1,   -1,   -1,  339,   -1,   -1,   -1,  306,
   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  323,  324,  325,   -1,
  364,  365,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,
  454,  455,  456,  457,   -1,   -1,  460,   -1,  462,   -1,
  464,  465,  466,  467,   -1,  469,  470,   -1,  472,  473,
  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,
  534,  535,  536,  537,  538,  539,  540,  541,  542,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,
  263,   -1,   -1,   -1,   -1,   -1,   -1,  544,   -1,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,   -1,  281,  282,
  283,  284,   -1,  286,  287,  288,   -1,  290,  291,  292,
  293,   -1,   -1,  296,  297,  298,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  270,  271,  272,   -1,    0,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,  322,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
   -1,  297,  298,   -1,   -1,   -1,  339,   -1,   -1,   -1,
  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  323,  324,  325,
   -1,  364,  365,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,
  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
  433,  123,   -1,  125,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,
   -1,  454,  455,  456,  457,   -1,   -1,  460,   -1,  462,
   -1,  464,  465,  466,  467,   -1,  469,  470,   -1,  472,
  473,  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,
   -1,  534,  535,  536,  537,  538,  539,  540,  541,  542,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,
   -1,  263,   -1,   -1,   -1,   -1,   -1,   -1,  544,   -1,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,  288,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,   -1,    0,
  275,  276,  277,  278,  279,   -1,  281,  282,  283,  284,
  322,  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,
   -1,   -1,  297,  298,   -1,   -1,   -1,  339,   -1,   -1,
   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  323,  324,
  325,   -1,  364,  365,   -1,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,   -1,   -1,   -1,  418,  419,  420,  421,
  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
  432,  433,  123,   -1,  125,   -1,   -1,   91,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,   -1,  454,  455,  456,  457,   -1,   -1,  460,   -1,
  462,   -1,  464,  465,  466,  467,   -1,  469,  470,   -1,
  472,  473,  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,
  532,   -1,  534,  535,  536,  537,  538,  539,  540,  541,
  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,
   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,   -1,  544,
   -1,   -1,  273,   -1,   -1,   -1,  277,  278,  279,   -1,
  281,  282,  283,  284,   -1,  286,  287,  288,   -1,  290,
  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,   -1,
    0,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,  322,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,  339,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  323,
  324,  325,   -1,  364,  365,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,   -1,   -1,   -1,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  123,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,   -1,  454,  455,  456,  457,   -1,   -1,  460,
   -1,  462,   -1,  464,  465,  466,  467,   -1,  469,  470,
   -1,  472,  473,  474,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,
  531,  532,   -1,  534,  535,  536,  537,  538,  539,  540,
  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,   -1,
  544,   -1,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,  288,   -1,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,
   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
   -1,   -1,   -1,   -1,  364,  365,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,   -1,   -1,   -1,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  431,  432,  433,   -1,   -1,    0,   -1,   -1,   -1,
  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,  273,  454,  455,  456,  457,   -1,   -1,
  460,   -1,  462,   -1,  464,  465,  466,  467,   -1,  469,
  470,   -1,  472,  473,  474,   -1,  296,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,  509,
  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,
  530,  531,  532,   -1,  534,  535,  536,  537,  538,  539,
  540,  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,   -1,   -1,   -1,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  431,  432,  433,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,   -1,  454,  455,  456,  457,   -1,   -1,
  460,   -1,  462,   -1,  464,  465,  466,  467,   -1,  469,
  470,   -1,  472,  473,  474,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,
  510,   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,  273,
  530,  531,  532,   -1,  534,  535,  536,  537,  538,  539,
  540,  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
   -1,   -1,    0,   -1,   -1,   -1,  260,   -1,   -1,  263,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,  273,
  454,  455,  456,  457,   -1,   -1,  460,   -1,  462,   -1,
  464,  465,  466,  467,   -1,  469,  470,   -1,  472,  473,
  474,   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,
  534,  535,  536,  537,  538,  539,  540,  541,  542,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,
  454,  455,  456,  457,   -1,   -1,  460,   -1,  462,   -1,
  464,  465,  466,  467,   -1,  469,  470,   -1,  472,  473,
  474,   -1,   -1,   -1,   -1,   -1,   -1,   40,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,
   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,
   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  527,  528,  273,  530,  531,  532,   -1,
  534,  535,  536,  537,  538,  539,  540,  541,  542,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  391,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,
  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,   -1,
  263,  449,  450,  451,  452,   -1,  454,  455,  456,  457,
  273,  274,  460,   -1,  462,   -1,  464,  465,  466,  467,
   -1,  469,  470,   -1,  472,  473,  474,   -1,   40,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,  311,   61,
   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,
   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,
  528,   -1,  530,  531,  532,   -1,  534,  535,  536,  537,
  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,
  423,  424,   -1,   -1,   -1,   -1,  429,   -1,   -1,  432,
  433,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,
   -1,  454,  455,  456,  457,   -1,   -1,  460,   -1,  462,
   -1,  464,  465,  466,   -1,   -1,  469,  470,   -1,  472,
  473,  474,   -1,   40,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,  527,  528,   -1,  530,  531,  532,
   -1,  534,  535,  536,  537,  538,  539,  540,  541,  542,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,   59,   -1,   -1,  418,  419,  420,  421,
  422,  423,  424,   -1,   -1,   -1,   -1,  429,   -1,   -1,
  432,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,   -1,  454,  455,  456,  457,  273,  274,  460,   -1,
  462,   -1,  464,  465,  466,   -1,   -1,  469,  470,   -1,
  472,  473,  474,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  311,   -1,   -1,   -1,   -1,  316,
   -1,   -1,   -1,   -1,   -1,  322,   -1,  509,  510,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,
  532,   -1,  534,  535,  536,  537,  538,  539,  540,  541,
  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,   -1,   -1,
   -1,  418,  419,  420,  421,  422,  423,  424,   -1,   -1,
   -1,   59,  429,   -1,  260,  432,  433,  263,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,  456,
  457,   -1,   -1,  460,   -1,  462,   -1,  464,  465,  466,
   -1,   -1,  469,  470,   -1,  472,  473,  474,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,  322,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  527,  528,   -1,  530,  531,  532,   -1,  534,  535,  536,
  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,   -1,
   -1,   -1,  418,  419,  420,  421,  422,  423,  424,  425,
  426,  427,  428,  429,  430,  431,  432,  433,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,
  456,  457,  260,   -1,  460,  263,  462,   -1,   -1,  465,
   -1,   -1,   -1,   -1,   -1,  273,  472,  473,  474,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,  535,
  536,  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,
  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,   -1,   -1,   -1,   59,
   -1,   -1,  260,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,  273,  454,  455,  456,  457,
   -1,   -1,  460,   -1,  462,   -1,   -1,  465,   -1,   -1,
   -1,   -1,   -1,   -1,  472,  473,  474,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,  322,  125,   -1,   -1,   -1,   -1,
   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,
  528,   -1,  530,  531,  532,   -1,  534,  535,  536,  537,
  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,
  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,   -1,  454,  455,  456,  457,
  260,   -1,  460,   -1,  462,   -1,   -1,  465,   -1,   -1,
   -1,   -1,   -1,  273,  472,  473,  474,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,
   -1,  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,  527,
  528,   -1,  530,  531,  532,   -1,  534,  535,  536,  537,
  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,   -1,   -1,   -1,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  431,  432,  433,   -1,   -1,   -1,   59,   -1,   -1,
  260,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,  273,  454,  455,  456,  457,   -1,   -1,
  460,   -1,  462,   -1,   -1,  465,   -1,   -1,   -1,   -1,
   -1,   -1,  472,  473,  474,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,  322,  125,   -1,   -1,   -1,   -1,   -1,  509,
  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,
  530,  531,  532,   -1,  534,  535,  536,  537,  538,  539,
  540,  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,   -1,   -1,   -1,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  431,  432,  433,   -1,   -1,   -1,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,   -1,  454,  455,  456,  457,  260,   -1,
  460,   -1,  462,   -1,   -1,  465,   -1,   -1,   -1,   -1,
   -1,  273,  472,  473,  474,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,  509,
  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,
  530,  531,  532,   -1,  534,  535,  536,  537,  538,  539,
  540,  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,   -1,   -1,   -1,  418,  419,  420,  421,
  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
  432,  433,   -1,   -1,   -1,   59,   -1,   -1,  260,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,  273,  454,  455,  456,  457,   -1,   -1,  460,   -1,
  462,   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,   -1,
  472,  473,  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
  322,  125,   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,
  532,   -1,  534,  535,  536,  537,  538,  539,  540,  541,
  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,   -1,   -1,   -1,  418,  419,  420,  421,
  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
  432,  433,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,   -1,  454,  455,  456,  457,  260,   -1,  460,  263,
  462,   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,  273,
  472,  473,  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,
  532,   -1,  534,  535,  536,  537,  538,  539,  540,  541,
  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,
  424,   -1,   -1,   -1,   -1,  429,   -1,    0,  432,  433,
   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,  273,
  454,  455,  456,  457,   -1,   -1,  460,   -1,  462,   -1,
  464,  465,  466,   -1,   -1,  469,  470,   -1,  472,  473,
  474,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,   33,
  534,  535,  536,  537,  538,  539,  540,  541,  542,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,
  424,    0,   -1,   -1,   -1,  429,   -1,   -1,  432,  433,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,
  454,  455,  456,  457,   -1,    0,  460,   -1,  462,   -1,
  464,  465,  466,   -1,   -1,  469,  470,   -1,  472,  473,
  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  509,  510,  260,   -1,   -1,
  263,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,
  273,   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,
  534,  535,  536,  537,  538,  539,  540,  541,  542,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,   -1,
   -1,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,   -1,  297,  298,   -1,    0,   -1,   -1,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,
  324,  325,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,
  423,  424,   -1,   -1,  358,   59,  429,   -1,   -1,  432,
  433,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,   -1,  449,  450,  451,  452,
   -1,  454,  455,  456,  457,   -1,   -1,  460,   -1,  462,
   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,   -1,  472,
  473,  474,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  125,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,
   -1,  534,  535,  536,  537,  538,  539,  540,  541,  542,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,  418,
  419,  420,  421,  422,  423,  424,   -1,   -1,   -1,   -1,
  429,   -1,   -1,  432,  433,   -1,   -1,   -1,   -1,   -1,
  544,   -1,   -1,   -1,   -1,  410,  411,  412,  413,  414,
  449,  450,  451,  452,   -1,  454,  455,  456,  457,   -1,
   -1,  460,   -1,  462,   -1,   -1,  465,  432,  433,  273,
   -1,   -1,   -1,  472,  473,  474,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,   -1,
   -1,  456,  457,   -1,   -1,   -1,   -1,  462,   -1,   -1,
  465,   -1,   -1,   -1,   -1,   -1,   -1,  472,  473,   -1,
  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,  527,  528,
   42,  530,  531,  532,   -1,  534,  535,  536,  537,  538,
  539,  540,  541,  542,   -1,   -1,   -1,   -1,   60,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  527,  528,   -1,  530,  531,  532,   -1,  534,
  535,  536,  537,  538,  539,  540,  541,  542,  271,   91,
   -1,   -1,  275,  276,  277,  278,  279,   -1,  281,  282,
  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,
  293,   -1,   -1,   -1,  297,  298,  410,  411,  412,  413,
  414,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,  433,
  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,
   -1,   -1,  456,  457,   -1,   -1,   -1,   -1,  462,   -1,
   -1,  465,   -1,   -1,   -1,  358,   -1,   -1,  472,  473,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   -1,   -1,
   42,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  527,  528,   -1,  530,  531,  532,   91,
  534,  535,  536,  537,  538,  539,  540,  541,  542,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,
   -1,   -1,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,  325,   33,   -1,   -1,   -1,   -1,   38,
   -1,   -1,   -1,   42,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   -1,   -1,   -1,   -1,  358,   -1,  360,  361,
  362,  544,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,
   -1,  263,   59,  415,  416,  417,  268,   -1,   -1,  271,
   -1,   -1,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   33,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,  325,   -1,   -1,   -1,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  360,  361,
  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  544,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
   -1,   -1,  271,  415,  416,  417,  275,  276,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,
   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   33,  306,   -1,  308,
   -1,   38,   -1,   -1,   -1,   42,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   -1,  273,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
   -1,  360,  361,  362,   91,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  271,  322,   -1,   -1,  275,  276,
  277,  278,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,   33,  544,  290,  291,  292,  293,  294,   -1,   -1,
  297,  298,   -1,   -1,   -1,   -1,  415,  416,  417,  306,
   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,   -1,  410,   -1,  412,  413,  414,   -1,  366,
  367,  368,  369,   -1,   -1,  372,   -1,  424,   -1,  376,
  377,  378,  429,   -1,   -1,  432,  433,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,   -1,  454,  455,   -1,
   33,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  260,  261,   -1,  263,  474,   -1,   -1,
   -1,  268,   -1,   -1,  271,  544,   -1,   -1,  275,  276,
  277,  278,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,
  297,  298,  509,  510,   -1,   -1,   -1,   -1,   91,  306,
   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,   -1,  323,  324,  325,  536,
  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,   -1,  360,  361,  362,   -1,   -1,   -1,  271,
   -1,   -1,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,  544,  290,  291,
  292,  293,  294,   -1,   -1,  297,  298,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,  415,  416,
  417,  323,  324,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,  358,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,  367,  368,  369,   -1,   -1,
  372,   -1,   -1,   -1,  376,  377,  378,  260,  261,   -1,
  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,
   -1,   -1,  275,  276,  277,  278,  279,   -1,  281,  282,
  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,
  293,   91,   -1,  296,  297,  298,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  323,  324,  325,   -1,   -1,   -1,   -1,  544,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,  481,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,
   -1,  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   91,   -1,  296,  297,  298,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,
   -1,   -1,  415,  416,  417,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  544,  323,  324,  325,   -1,  327,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  452,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,
   -1,  271,  372,   -1,   -1,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   91,   -1,  296,  297,  298,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,  415,  416,  417,   -1,   -1,
   -1,   -1,   -1,  323,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,  544,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,
   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,   -1,   -1,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,   -1,   -1,  290,  291,  292,  293,   91,   -1,  296,
  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,
   -1,  308,   -1,   -1,   -1,  415,  416,  417,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,  323,  324,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  544,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,   -1,   -1,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,   91,  281,  282,  283,  284,   -1,  286,
  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,
  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,
   33,  308,   -1,   -1,   -1,   -1,   -1,   -1,  415,  416,
  417,   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  544,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,   -1,   -1,   -1,   -1,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,   33,
   -1,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,  415,  416,
  417,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,
  324,  325,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  544,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,   -1,  271,  358,   -1,   -1,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,   -1,   -1,   91,   -1,   -1,   -1,   -1,  306,   33,
  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,
   -1,  415,  416,  417,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  544,  271,   -1,
  358,   -1,  275,  276,  277,  278,  279,   91,  281,  282,
  283,  284,   40,  286,  287,   -1,   -1,  290,  291,  292,
  293,   -1,  295,   -1,  297,  298,   -1,  300,   -1,  302,
   -1,   59,   60,  306,   -1,  308,  309,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  323,  324,  325,  326,   -1,   -1,   -1,  415,  416,  417,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,  341,   -1,
   -1,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,  358,  290,  291,  292,  293,
   -1,  295,   -1,  297,  298,  123,  300,  125,  302,   -1,
  544,   -1,  306,   -1,  308,  309,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,
  324,  325,  326,  271,   -1,   -1,   -1,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,  341,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,   -1,  297,
  298,   -1,   -1,   -1,  358,   -1,   -1,   -1,  306,   -1,
  308,   -1,   -1,   -1,   -1,   41,   -1,   -1,   -1,   -1,
   -1,   47,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,  544,  271,   -1,   -1,
   -1,   -1,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
  358,   -1,   -1,  297,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,  323,
  324,  325,   -1,   -1,   -1,  273,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  544,   -1,   -1,  358,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
  544,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,   -1,   -1,  260,   -1,  414,  263,   -1,   -1,
  418,  419,  420,  421,  422,  423,  544,  273,  274,  123,
   -1,  125,   -1,   -1,  432,  433,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  460,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  474,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  544,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  509,  510,  511,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,   -1,   -1,   -1,   -1,   47,   -1,   -1,  536,  537,
  538,  539,  540,  541,  542,  391,   -1,   59,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,   -1,   -1,  260,   -1,  414,  263,
   -1,   -1,  418,  419,  420,  421,  422,  423,   -1,  273,
   -1,   -1,   -1,   -1,   -1,   -1,  432,  433,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,   -1,   -1,   -1,
   -1,  123,   -1,  125,  460,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  474,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  509,  510,  260,   -1,   -1,  263,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  536,  537,  538,  539,  540,  541,  542,  391,   -1,   59,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,   -1,   -1,   -1,   -1,
  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,  433,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,
   -1,  263,   -1,   -1,   -1,  449,  450,  451,  452,   -1,
   -1,  273,  274,  123,   -1,  125,  460,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   59,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  509,  510,   -1,   -1,  414,
   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,  433,   -1,
   -1,   -1,  536,  537,  538,  539,  540,  541,  542,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,   -1,   -1,
   -1,   -1,  123,   -1,  125,  460,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  474,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,   -1,   -1,
  260,   -1,  414,  263,   -1,   -1,  418,  419,  420,  421,
  422,  423,   -1,  273,  509,  510,   -1,   -1,   -1,   -1,
  432,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,  536,  537,  538,  539,  540,  541,  542,  460,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  509,  510,  260,
   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  536,  537,  538,  539,  540,  541,
  542,   -1,   -1,   59,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,  418,  419,
  420,  421,  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  432,  433,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,   -1,   -1,   -1,   -1,  123,   -1,  125,
  460,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  474,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  509,
  510,  260,   -1,  414,  263,   -1,   -1,  418,  419,  420,
  421,  422,  423,   -1,  273,   -1,   -1,   -1,   -1,   -1,
   -1,  432,  433,   -1,   -1,   -1,  536,  537,  538,  539,
  540,  541,  542,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,   -1,   -1,  123,   -1,  125,   -1,   -1,  460,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  474,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,  509,  510,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  536,  537,  538,  539,  540,
  541,  542,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,  418,
  419,  420,  421,  422,  423,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  432,  433,   59,   -1,   -1,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,  273,   -1,   -1,   -1,   -1,   -1,
   -1,  460,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  474,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,   -1,   -1,   -1,   -1,  414,  123,
   -1,  125,  418,  419,  420,  421,  422,  423,   -1,   -1,
  509,  510,   -1,   -1,   -1,   -1,  432,  433,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,  449,  450,  451,  452,  536,  537,  538,
  539,  540,  541,  542,  460,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  474,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,   -1,   -1,  509,  510,  414,  123,   -1,  125,  418,
  419,  420,  421,  422,  423,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  432,  433,   59,   -1,   -1,   -1,   -1,
  536,  537,  538,  539,  540,  541,  542,   -1,   -1,   -1,
  449,  450,  451,  452,   -1,   -1,  260,   -1,   -1,  263,
   -1,  460,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
   -1,   -1,   -1,   -1,   -1,  474,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  509,  510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  536,  537,  538,
  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,   -1,   -1,   -1,   -1,
  414,   -1,   -1,   -1,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,  433,
   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,   59,  263,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,  273,
   -1,  123,   -1,  125,   -1,   -1,  460,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,  125,  509,  510,  414,   -1,   -1,
   -1,  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  432,  433,   -1,   -1,   -1,
   -1,   -1,  536,  537,  538,  539,  540,  541,  542,   -1,
   -1,   -1,  449,  450,  451,  452,   -1,   -1,   -1,   59,
   -1,   -1,   -1,  460,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  474,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,   -1,   -1,  260,   -1,
  414,  263,   -1,   -1,  418,  419,  420,  421,  422,  423,
   -1,  273,  509,  510,   -1,   -1,   -1,   -1,  432,  433,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,  536,
  537,  538,  539,  540,  541,  542,  460,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  474,   -1,  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,  509,  510,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  536,  537,  538,  539,  540,  541,  542,   -1,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,   -1,   -1,
   -1,   -1,  414,   -1,   -1,   -1,  418,  419,  420,  421,
  422,  423,   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,
  432,  433,   -1,  273,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  460,  410,
  411,  412,  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  432,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,  273,   -1,   -1,  456,  457,  509,  510,   -1,
   -1,  462,   -1,   -1,  465,   -1,   -1,   -1,   -1,   -1,
   -1,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  536,  537,  538,  539,  540,  541,
  542,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  410,  411,  412,  413,  414,  273,  527,  528,   -1,  530,
  531,  532,   -1,  534,  535,  536,  537,  538,  539,  540,
  541,  542,  432,  433,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,   -1,   -1,   -1,  456,  457,   -1,   -1,
   -1,   -1,  462,   -1,  322,  465,   -1,   -1,   -1,   -1,
   -1,   -1,  472,  473,   -1,   -1,   -1,   -1,  123,  410,
   -1,  412,  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,  429,   -1,
   -1,  432,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,   -1,  454,  455,   -1,   -1,  527,  528,   -1,
  530,  531,  532,   -1,  534,  535,  536,  537,  538,  539,
  540,  541,  542,  474,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  410,   -1,  412,  413,  414,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,   -1,   -1,
   -1,  429,   -1,   -1,  432,  433,   -1,   -1,  509,  510,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,   -1,  454,  455,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  536,  537,  538,  539,  540,
  541,  542,  257,   -1,   -1,   -1,  474,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,
   -1,  276,  277,   -1,  279,  280,  281,  282,  283,  284,
  257,  286,  287,   -1,  289,  290,  291,  292,  293,   -1,
   -1,  509,  510,   -1,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,   -1,  289,  290,  291,  292,  293,   -1,  536,  537,
  538,  539,  540,  541,  542,   -1,   -1,   -1,   -1,   -1,
  335,   -1,  337,   -1,   -1,   -1,   -1,  342,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,   -1,   -1,   -1,   -1,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  482,   -1,  484,
  485,  486,  487,  488,  489,  490,  491,  492,  493,  494,
  495,  496,  497,  498,  499,  500,   -1,   -1,   -1,  504,
   -1,   -1,   -1,   -1,   -1,  482,   -1,  484,  485,  486,
  487,  488,  489,  490,  491,  492,  493,  494,  495,  496,
  497,  498,  499,  500,   -1,   -1,   -1,  504,
};
static int yyctable[] = {                                     -1,
  239,  561,   -1,  428,  776,   -1,  278,  706,   -1,  279,
  706,   -1,  280,  706,   -1,  282,  706,   -1,  283,  706,
   -1,  284,  706,   -1,  285,  706,   -1,  501,  727,   -1,
  206,   40,   -1,  225,  495,   -1,   97,  495,   -1,   99,
  495,   -1,  100,  495,   -1,  101,  495,   -1,  102,  495,
   -1,  103,  495,   -1,  743,  317,   -1,  811,  778,   -1,
   67,  569,   -1,   68,  569,   -1,   69,  569,   -1,   27,
   78,   -1,   28,   78,   -1,   29,   78,   -1,   30,   78,
   -1,   31,   78,   -1,   32,   78,   -1,   33,   78,   -1,
   34,   78,   -1, 1078,  629,   -1,   67,  570,   -1,   68,
  570,   -1,   69,  570,   -1, 1097,   37,   -1, 1223,  782,
   -1, 1225,  780,   -1, 1237,  613,   -1, 1443,  784,   -1,
 1080,  576,   -1, 1081,  576,   -1,
};
#ifdef YYDESTRUCT
static int yyastable[] = {                                      0,
  310,   18,  155,  156,  157,  158,  159,  177,  178,  194,
  195,  196,  197,  201,  202,  207,  210,  217,  218,  272,
  273,  275,  276,  277,  279,  280,  281,  282,  283,  284,
  285,  286,  287,  297,  320,  321,  399,  405,  406,  422,
  423,  425,  426,  428,  429,  430,  431,  432,  433,  434,
  436,  438,  440,  442,  443,  444,  445,  446,  447,  449,
  450,  451,  464,  482,  488,  216,    5,    6,    8,  311,
  312,  299,  326,   64,  125,  484,  179,  180,  181,  182,
  183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
  193,  398,  398,    8,   14,   17,   40,   41,   45,   47,
   54,   71,   86,  295,  317,  318,  385,  387,  388,  298,
  299,  274,  400,  216,  402,  404,  216,  311,    9,  319,
  319,    9,   10,  336,  336,   13,   16,   20,   21,   22,
   23,   24,   26,   27,   28,   29,   31,   32,   35,   36,
   37,   38,   42,   43,   51,   53,   68,   69,   70,  103,
  104,  160,  161,  162,  289,  299,  307,  311,  315,  340,
  364,  382,  386,  388,  405,  406,  461,  290,  311,  311,
  311,  311,    7,   12,  343,  344,  343,  343,  290,  290,
  427,  290,  290,  290,  290,  343,  389,   60,  452,  390,
   23,   26,   27,   28,   29,   31,   32,   33,  290,  306,
  483,  486,  487,  319,  403,  294,  319,  391,  312,  299,
  340,  382,  383,  388,  461,    7,   33,  298,  348,  293,
  295,  295,   46,   48,   49,   50,  317,  317,  383,  384,
  386,  340,  298,  295,  319,  319,  208,  311,  402,  100,
  101,  102,  125,  220,  222,  223,  224,  225,  311,   75,
   76,  311,  311,  340,   26,   27,   28,   29,  382,   51,
  382,   24,   25,   34,   15,   17,  340,  307,  364,  218,
  305,  311,  388,  307,  311,  319,  308,  105,  106,  107,
  136,  299,  301,  305,  306,  136,  136,  136,  136,  317,
  387,  382,  448,  348,  296,   12,  296,  296,  424,  310,
  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
  151,  152,  153,  154,  163,  164,  165,  166,  167,  168,
  205,  219,  254,  255,  290,  291,  312,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  429,  432,  443,  444,  445,  447,  466,  467,
  468,  469,  470,  471,  472,  475,  435,  437,  439,  441,
  296,   39,   68,   72,   75,   76,   80,   81,   82,   83,
   84,   85,   86,   87,   88,   89,   90,   91,   98,  101,
  108,  117,  311,  383,   61,  453,   39,   72,   74,   75,
   76,   77,   78,   83,   92,   97,   99,  111,  112,  113,
  114,  115,  116,  117,  118,  124,  317,  305,  295,  299,
  324,  295,  324,  295,  324,  295,  324,  295,  324,  295,
  324,  295,  485,  486,  295,  343,    7,    8,  293,  304,
   73,   75,   76,   82,  311,  311,  300,   39,   72,   74,
   75,   76,   77,  111,  112,  113,  114,  117,  121,  122,
  123,  226,  340,  298,  218,  311,  295,  298,  317,  295,
  290,  295,  292,    8,  319,  319,  296,  119,  120,  299,
  311,  313,  383,  290,  295,  348,  300,  167,  401,  311,
  221,  136,  382,   25,  311,  383,  307,  311,  319,  311,
  300,  300,  300,  311,  319,  311,  295,  295,  311,   20,
  300,  319,  341,  342,  340,  366,  367,  311,  311,  311,
  311,  340,  448,  291,   67,  155,  169,  174,  199,  200,
  219,  254,  255,  291,  423,  426,  428,  429,  432,  443,
  444,  445,  447,  455,  456,  458,  460,  291,  319,  319,
  319,  299,  110,  288,  299,  103,  383,  304,  312,  319,
  319,  336,   11,   31,   32,  295,  335,  336,  312,  319,
  387,   15,   17,  340,  388,  307,  383,   87,  348,  487,
  317,  384,  295,  343,  198,  295,  427,   55,   57,   58,
   59,  473,  474,  476,  478,  479,  480,  481,  312,  319,
  470,  209,  211,  214,  215,  291,  443,  444,  447,  490,
  491,  492,  493,   84,  209,  212,  291,  489,  491,  494,
  495,   41,  155,  207,  210,  291,  444,  447,  496,  207,
  210,  291,  444,  447,  497,  295,   75,   76,   77,  111,
  112,  113,  301,  381,  383,  454,  295,  295,  323,  295,
  319,  319,  319,  319,  336,  335,  335,  291,  293,  312,
  296,  319,  319,   75,   76,   77,  111,  112,  113,  295,
  295,  311,  311,  300,  348,  396,  397,  290,  340,   51,
  375,  376,  383,    7,  293,  296,  296,  385,  301,  334,
  365,   19,  371,  373,  322,  489,  136,  311,   19,  311,
  319,  300,  315,  315,  315,  383,  383,   20,  293,  300,
  302,  293,  305,  110,  393,  394,  319,  319,  403,  110,
  288,  103,  383,  290,  427,  290,  290,  290,  304,  319,
  299,  311,  299,  311,  319,  317,   19,  295,  295,  311,
  383,  307,  312,  319,  295,  343,  340,  312,  316,  319,
  296,  295,   20,  323,  337,  338,  339,  291,  383,  473,
   56,  470,  477,  477,  477,  477,  312,  319,  470,   62,
   62,  213,  298,  305,  319,  378,  298,  348,  343,  343,
  298,  298,  343,  343,  295,  216,  319,  311,  216,  311,
  216,  319,   39,   51,   52,   69,  119,  289,  292,  303,
  328,  329,  380,  293,  319,  348,  395,  299,  340,  348,
  296,  300,  296,  296,  296,  296,  296,  485,  296,  304,
    8,  293,  319,    2,   16,   21,   22,   24,   25,   26,
   27,   28,   29,   31,   32,   34,   35,   36,   37,   38,
   80,   82,   87,  103,  136,  227,  229,  230,  231,  232,
  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
  243,  244,  245,  249,  290,  345,  346,  465,   63,  314,
  300,  298,  296,  293,  371,    8,  293,  291,  298,    8,
  298,  299,  366,  295,  295,  311,  313,  291,   22,   23,
   24,   26,   27,   28,   29,   31,   32,   35,   36,   37,
   38,   42,   43,  110,  352,  353,  374,  447,  487,   28,
   29,   63,  203,  204,  206,  343,  311,  311,  315,  296,
  296,  319,  341,  340,  295,  383,   72,  117,  311,  383,
   72,  117,  317,  311,  299,  311,  299,  311,  317,   19,
  424,  291,  457,  459,  439,  319,  300,  319,  319,  293,
  300,  340,  313,  319,  336,   19,  312,  319,  348,  296,
  295,  293,  296,  293,  337,  340,  296,  293,  312,  319,
  312,  319,  319,  295,  304,  295,  296,  296,  295,  295,
  296,  296,  319,  315,  311,   63,  311,  296,  295,   39,
  330,  331,  329,  295,  311,  370,  302,  383,  296,  136,
  395,   39,   46,   48,   49,   50,   87,   88,   89,  133,
  134,  135,  137,  140,  296,  251,  252,  253,  319,  226,
  350,  296,  324,  324,  324,  324,  324,  324,  319,  319,
  296,   25,   26,   27,   28,   29,  295,  332,  243,  235,
  247,  295,  228,  248,   22,  332,  332,    2,   21,   22,
   24,   25,   26,   27,   28,   29,   31,   32,   34,   35,
   36,   37,   38,  230,  231,  233,  234,  235,  237,  238,
  241,  242,  244,  257,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  305,  325,  299,
  305,  296,  344,  312,  298,  347,   28,   65,   66,  319,
  327,  348,  349,  382,  396,  291,  298,  376,  290,  290,
  295,  348,  319,  302,  337,  337,  334,  365,  295,  299,
  295,  299,   26,   27,   28,   29,  295,  299,  295,  299,
  295,  299,  295,  299,  295,  299,  295,  299,  295,  299,
  295,  299,  295,  299,  295,  299,  295,  299,  295,  299,
  295,  299,  104,  109,  377,  447,  343,  312,  296,  337,
  197,  405,  311,  340,  319,  319,  293,  340,  313,  291,
  170,  171,  172,  173,  291,  432,  444,  445,  447,  462,
  173,  175,  176,  291,  432,  444,  445,  447,  463,  291,
  136,  300,  300,  383,  347,  383,  296,  296,  311,  296,
  337,  316,  316,  296,  350,  339,   62,   62,  378,  296,
  319,  319,  295,  331,  383,  368,  369,  383,  293,  379,
  311,  348,  296,  295,  304,  304,  300,  300,  300,  300,
  295,  313,    8,  293,    8,  250,  348,  299,  299,   25,
   26,   27,   28,   29,  271,  293,  299,  306,  292,  300,
  319,  291,   22,   23,   24,   26,   27,   28,   29,   31,
   32,   35,   36,   37,   38,   44,  348,  351,  353,  295,
  295,  290,  374,  371,  300,  296,  296,  295,  295,  327,
  319,  319,  319,  295,  299,  295,  299,  295,  299,  295,
  299,  319,  319,  319,  319,  319,  319,  336,  319,  319,
  335,  319,  335,  336,  319,  319,  319,  319,  319,  319,
  319,  336,  319,  352,  319,    8,   44,  319,   44,   51,
  382,  319,   42,   91,  110,  364,  372,  296,  401,  296,
  311,  300,  300,  383,  383,  256,  387,  387,  387,  387,
  387,  387,  387,  312,  293,   19,  296,  312,  312,  319,
  304,  296,  319,  311,  296,  293,  380,  379,  395,  319,
  138,  139,  138,  139,  346,  381,  319,  298,  293,  319,
  319,  348,  300,  319,  292,  300,   26,   27,   28,   29,
  319,   26,   27,   28,  319,  374,  291,  291,  302,  337,
  337,  296,  300,  296,  300,  319,  319,  319,  319,  319,
  319,  336,  319,  296,  300,  296,  300,  296,  300,  296,
  300,  296,  296,  300,  296,  296,  300,  296,  300,  296,
  300,  296,  300,  296,  300,  296,  300,  296,  296,  300,
  296,    8,  296,  300,   51,  382,  299,  311,  295,  293,
   19,  317,  383,  313,  378,  296,  379,  383,  296,  296,
  296,  295,    8,  319,  348,  300,  300,  300,  319,  296,
  304,  304,  304,  296,  291,  296,  296,  295,  295,  296,
  300,  296,  300,  296,  300,  296,  300,  295,  295,  295,
  295,  295,  295,  295,  295,  295,  295,  295,  295,  296,
  295,    8,  300,  298,  337,  383,  313,  340,  301,  333,
  334,  304,  337,  296,  293,  296,  345,  300,  319,  319,
  319,  360,  357,  295,  295,  295,  295,  356,  357,  358,
  359,  354,  355,  356,  357,  358,  359,  363,  361,  362,
  352,  296,  333,  383,  295,  378,  296,  348,  296,  296,
  296,  296,  327,  296,  319,  356,  357,  358,  359,  296,
  319,  296,  296,  319,  296,  336,  296,  319,  335,  296,
  335,  336,  296,  296,  296,  296,  296,  352,    8,   44,
  296,   44,   51,  296,  382,  347,  295,   19,  337,  392,
  293,  296,  296,  296,  296,    8,  337,  313,  296,   39,
   54,   70,   79,   93,   94,   95,   96,  125,  126,  127,
  128,  129,  130,  131,  290,  348,  296,  295,  295,  296,
  256,  337,  319,  103,  296,  296,  317,  340,  383,   19,
  313,  333,  295,  337,  296,
};
#endif /* YYDESTRUCT */
#define YYFINAL 1
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 544
#if YYDEBUG
static const char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,0,"'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,
0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,"'{'",0,"'}'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ERROR_","BAD_COMMENT_",
"BAD_LITERAL_","ID","DOTTEDNAME","QSTRING","SQSTRING","INT32","INT64","FLOAT64",
"HEXBYTE","TYPEDEF_T","TYPEDEF_M","TYPEDEF_F","TYPEDEF_TS","TYPEDEF_MR",
"TYPEDEF_CA","DCOLON","ELLIPSIS","VOID_","BOOL_","CHAR_","UNSIGNED_","INT_",
"INT8_","INT16_","INT32_","INT64_","FLOAT_","FLOAT32_","FLOAT64_","BYTEARRAY_",
"UINT_","UINT8_","UINT16_","UINT32_","UINT64_","FLAGS_","CALLCONV_","MDTOKEN_",
"OBJECT_","STRING_","NULLREF_","DEFAULT_","CDECL_","VARARG_","STDCALL_",
"THISCALL_","FASTCALL_","CLASS_","BYREFLIKE_","TYPEDREF_","UNMANAGED_",
"FINALLY_","HANDLER_","CATCH_","FILTER_","FAULT_","EXTENDS_","IMPLEMENTS_",
"TO_","AT_","TLS_","TRUE_","FALSE_","_INTERFACEIMPL","VALUE_","VALUETYPE_",
"NATIVE_","INSTANCE_","SPECIALNAME_","FORWARDER_","STATIC_","PUBLIC_",
"PRIVATE_","FAMILY_","FINAL_","SYNCHRONIZED_","INTERFACE_","SEALED_","NESTED_",
"ABSTRACT_","AUTO_","SEQUENTIAL_","EXPLICIT_","ANSI_","UNICODE_","AUTOCHAR_",
"IMPORT_","ENUM_","VIRTUAL_","NOINLINING_","AGGRESSIVEINLINING_",
"NOOPTIMIZATION_","AGGRESSIVEOPTIMIZATION_","UNMANAGEDEXP_","BEFOREFIELDINIT_",
"STRICT_","RETARGETABLE_","WINDOWSRUNTIME_","NOPLATFORM_","METHOD_","FIELD_",
"PINNED_","MODREQ_","MODOPT_","SERIALIZABLE_","PROPERTY_","TYPE_","ASSEMBLY_",
"FAMANDASSEM_","FAMORASSEM_","PRIVATESCOPE_","HIDEBYSIG_","NEWSLOT_",
"RTSPECIALNAME_","PINVOKEIMPL_","_CTOR","_CCTOR","LITERAL_","NOTSERIALIZED_",
"INITONLY_","REQSECOBJ_","CIL_","OPTIL_","MANAGED_","FORWARDREF_",
"PRESERVESIG_","RUNTIME_","INTERNALCALL_","_IMPORT","NOMANGLE_","LASTERR_",
"WINAPI_","AS_","BESTFIT_","ON_","OFF_","CHARMAPERROR_","INSTR_NONE",
"INSTR_VAR","INSTR_I","INSTR_I8","INSTR_R","INSTR_BRTARGET","INSTR_METHOD",
"INSTR_FIELD","INSTR_TVAR","INSTR_TYPE","INSTR_STRING","INSTR_SIG","INSTR_TOK",
"INSTR_SWITCH","_CLASS","_NAMESPACE","_METHOD","_FIELD","_DATA","_THIS","_BASE",
"_NESTER","_EMITBYTE","_TRY","_MAXSTACK","_LOCALS","_ENTRYPOINT","_ZEROINIT",
"_EVENT","_ADDON","_REMOVEON","_FIRE","_OTHER","_PROPERTY","_SET","_GET",
"_PERMISSION","_PERMISSIONSET","REQUEST_","DEMAND_","ASSERT_","DENY_",
"PERMITONLY_","LINKCHECK_","INHERITCHECK_","REQMIN_","REQOPT_","REQREFUSE_",
"PREJITGRANT_","PREJITDENY_","NONCASDEMAND_","NONCASLINKDEMAND_",
"NONCASINHERITANCE_","_LINE","P_LINE","_LANGUAGE","_CUSTOM","INIT_","_SIZE",
"_PACK","_VTABLE","_VTFIXUP","FROMUNMANAGED_","CALLMOSTDERIVED_","_VTENTRY",
"RETAINAPPDOMAIN_","_FILE","NOMETADATA_","_HASH","_ASSEMBLY","_PUBLICKEY",
"_PUBLICKEYTOKEN","ALGORITHM_","_VER","_LOCALE","EXTERN_","_MRESOURCE",
"_MODULE","_EXPORT","LEGACY_","LIBRARY_","X86_","AMD64_","ARM_","ARM64_",
"MARSHAL_","CUSTOM_","SYSSTRING_","FIXED_","VARIANT_","CURRENCY_","SYSCHAR_",
"DECIMAL_","DATE_","BSTR_","TBSTR_","LPSTR_","LPWSTR_","LPTSTR_","OBJECTREF_",
"IUNKNOWN_","IDISPATCH_","STRUCT_","SAFEARRAY_","BYVALSTR_","LPVOID_","ANY_",
"ARRAY_","LPSTRUCT_","IIDPARAM_","IN_","OUT_","OPT_","_PARAM","_OVERRIDE",
"WITH_","NULL_","HRESULT_","CARRAY_","USERDEFINED_","RECORD_","FILETIME_",
"BLOB_","STREAM_","STORAGE_","STREAMED_OBJECT_","STORED_OBJECT_","BLOB_OBJECT_",
"CF_","CLSID_","VECTOR_","_SUBSYSTEM","_CORFLAGS","ALIGNMENT_","_IMAGEBASE",
"_STACKRESERVE","_TYPEDEF","_TEMPLATE","_TYPELIST","_MSCORLIB","P_DEFINE",
"P_UNDEF","P_IFDEF","P_IFNDEF","P_ELSE","P_ENDIF","P_INCLUDE","CONSTRAINT_",
"CONST_",
};
static const char *yyrule[] = {
"$accept : decls",
"decls :",
"decls : decls decl",
"decl : classHead '{' classDecls '}'",
"decl : nameSpaceHead '{' decls '}'",
"decl : methodHead methodDecls '}'",
"decl : fieldDecl",
"decl : dataDecl",
"decl : vtableDecl",
"decl : vtfixupDecl",
"decl : extSourceSpec",
"decl : fileDecl",
"decl : assemblyHead '{' assemblyDecls '}'",
"decl : assemblyRefHead '{' assemblyRefDecls '}'",
"decl : exptypeHead '{' exptypeDecls '}'",
"decl : manifestResHead '{' manifestResDecls '}'",
"decl : moduleHead",
"decl : secDecl",
"decl : customAttrDecl",
"decl : _SUBSYSTEM int32",
"decl : _CORFLAGS int32",
"decl : _FILE ALIGNMENT_ int32",
"decl : _IMAGEBASE int64",
"decl : _STACKRESERVE int64",
"decl : languageDecl",
"decl : typedefDecl",
"decl : compControl",
"decl : _TYPELIST '{' classNameSeq '}'",
"decl : _MSCORLIB",
"classNameSeq :",
"classNameSeq : className classNameSeq",
"compQstring : QSTRING",
"compQstring : compQstring '+' QSTRING",
"languageDecl : _LANGUAGE SQSTRING",
"languageDecl : _LANGUAGE SQSTRING ',' SQSTRING",
"languageDecl : _LANGUAGE SQSTRING ',' SQSTRING ',' SQSTRING",
"id : ID",
"id : SQSTRING",
"dottedName : id",
"dottedName : DOTTEDNAME",
"dottedName : dottedName '.' dottedName",
"int32 : INT32",
"int64 : INT64",
"int64 : INT32",
"float64 : FLOAT64",
"float64 : FLOAT32_ '(' int32 ')'",
"float64 : FLOAT64_ '(' int64 ')'",
"typedefDecl : _TYPEDEF type AS_ dottedName",
"typedefDecl : _TYPEDEF className AS_ dottedName",
"typedefDecl : _TYPEDEF memberRef AS_ dottedName",
"typedefDecl : _TYPEDEF customDescr AS_ dottedName",
"typedefDecl : _TYPEDEF customDescrWithOwner AS_ dottedName",
"compControl : P_DEFINE dottedName",
"compControl : P_DEFINE dottedName compQstring",
"compControl : P_UNDEF dottedName",
"compControl : P_IFDEF dottedName",
"compControl : P_IFNDEF dottedName",
"compControl : P_ELSE",
"compControl : P_ENDIF",
"compControl : P_INCLUDE QSTRING",
"compControl : ';'",
"customDescr : _CUSTOM customType",
"customDescr : _CUSTOM customType '=' compQstring",
"customDescr : _CUSTOM customType '=' '{' customBlobDescr '}'",
"customDescr : customHead bytes ')'",
"customDescrWithOwner : _CUSTOM '(' ownerType ')' customType",
"customDescrWithOwner : _CUSTOM '(' ownerType ')' customType '=' compQstring",
"customDescrWithOwner : _CUSTOM '(' ownerType ')' customType '=' '{' customBlobDescr '}'",
"customDescrWithOwner : customHeadWithOwner bytes ')'",
"customHead : _CUSTOM customType '=' '('",
"customHeadWithOwner : _CUSTOM '(' ownerType ')' customType '=' '('",
"customType : methodRef",
"ownerType : typeSpec",
"ownerType : memberRef",
"customBlobDescr : customBlobArgs customBlobNVPairs",
"customBlobArgs :",
"customBlobArgs : customBlobArgs serInit",
"customBlobArgs : customBlobArgs compControl",
"customBlobNVPairs :",
"customBlobNVPairs : customBlobNVPairs fieldOrProp serializType dottedName '=' serInit",
"customBlobNVPairs : customBlobNVPairs compControl",
"fieldOrProp : FIELD_",
"fieldOrProp : PROPERTY_",
"customAttrDecl : customDescr",
"customAttrDecl : customDescrWithOwner",
"customAttrDecl : TYPEDEF_CA",
"serializType : simpleType",
"serializType : TYPE_",
"serializType : OBJECT_",
"serializType : ENUM_ CLASS_ SQSTRING",
"serializType : ENUM_ className",
"serializType : serializType '[' ']'",
"moduleHead : _MODULE",
"moduleHead : _MODULE dottedName",
"moduleHead : _MODULE EXTERN_ dottedName",
"vtfixupDecl : _VTFIXUP '[' int32 ']' vtfixupAttr AT_ id",
"vtfixupAttr :",
"vtfixupAttr : vtfixupAttr INT32_",
"vtfixupAttr : vtfixupAttr INT64_",
"vtfixupAttr : vtfixupAttr FROMUNMANAGED_",
"vtfixupAttr : vtfixupAttr CALLMOSTDERIVED_",
"vtfixupAttr : vtfixupAttr RETAINAPPDOMAIN_",
"vtableDecl : vtableHead bytes ')'",
"vtableHead : _VTABLE '=' '('",
"nameSpaceHead : _NAMESPACE dottedName",
"_class : _CLASS",
"classHeadBegin : _class classAttr dottedName typarsClause",
"classHead : classHeadBegin extendsClause implClause",
"classAttr :",
"classAttr : classAttr PUBLIC_",
"classAttr : classAttr PRIVATE_",
"classAttr : classAttr VALUE_",
"classAttr : classAttr ENUM_",
"classAttr : classAttr INTERFACE_",
"classAttr : classAttr SEALED_",
"classAttr : classAttr ABSTRACT_",
"classAttr : classAttr AUTO_",
"classAttr : classAttr SEQUENTIAL_",
"classAttr : classAttr EXPLICIT_",
"classAttr : classAttr ANSI_",
"classAttr : classAttr UNICODE_",
"classAttr : classAttr AUTOCHAR_",
"classAttr : classAttr IMPORT_",
"classAttr : classAttr SERIALIZABLE_",
"classAttr : classAttr WINDOWSRUNTIME_",
"classAttr : classAttr NESTED_ PUBLIC_",
"classAttr : classAttr NESTED_ PRIVATE_",
"classAttr : classAttr NESTED_ FAMILY_",
"classAttr : classAttr NESTED_ ASSEMBLY_",
"classAttr : classAttr NESTED_ FAMANDASSEM_",
"classAttr : classAttr NESTED_ FAMORASSEM_",
"classAttr : classAttr BEFOREFIELDINIT_",
"classAttr : classAttr SPECIALNAME_",
"classAttr : classAttr RTSPECIALNAME_",
"classAttr : classAttr FLAGS_ '(' int32 ')'",
"extendsClause :",
"extendsClause : EXTENDS_ typeSpec",
"implClause :",
"implClause : IMPLEMENTS_ implList",
"classDecls :",
"classDecls : classDecls classDecl",
"implList : implList ',' typeSpec",
"implList : typeSpec",
"typeList :",
"typeList : typeListNotEmpty",
"typeListNotEmpty : typeSpec",
"typeListNotEmpty : typeListNotEmpty ',' typeSpec",
"typarsClause :",
"typarsClause : '<' typars '>'",
"typarAttrib : '+'",
"typarAttrib : '-'",
"typarAttrib : CLASS_",
"typarAttrib : VALUETYPE_",
"typarAttrib : BYREFLIKE_",
"typarAttrib : _CTOR",
"typarAttrib : FLAGS_ '(' int32 ')'",
"typarAttribs :",
"typarAttribs : typarAttrib typarAttribs",
"conTyparAttrib : FLAGS_ '(' int32 ')'",
"conTyparAttribs :",
"conTyparAttribs : conTyparAttrib conTyparAttribs",
"typars : CONST_ conTyparAttribs typeSpec dottedName typarsRest",
"typars : typarAttribs tyBound dottedName typarsRest",
"typars : typarAttribs dottedName typarsRest",
"typarsRest :",
"typarsRest : ',' typars",
"tyBound : '(' typeList ')'",
"genArity :",
"genArity : genArityNotEmpty",
"genArityNotEmpty : '<' '[' int32 ']' '>'",
"classDecl : methodHead methodDecls '}'",
"classDecl : classHead '{' classDecls '}'",
"classDecl : eventHead '{' eventDecls '}'",
"classDecl : propHead '{' propDecls '}'",
"classDecl : fieldDecl",
"classDecl : dataDecl",
"classDecl : secDecl",
"classDecl : extSourceSpec",
"classDecl : customAttrDecl",
"classDecl : _SIZE int32",
"classDecl : _PACK int32",
"classDecl : exportHead '{' exptypeDecls '}'",
"classDecl : _OVERRIDE typeSpec DCOLON methodName WITH_ callConv type typeSpec DCOLON methodName '(' sigArgs0 ')'",
"classDecl : _OVERRIDE METHOD_ callConv type typeSpec DCOLON methodName genArity '(' sigArgs0 ')' WITH_ METHOD_ callConv type typeSpec DCOLON methodName genArity '(' sigArgs0 ')'",
"classDecl : languageDecl",
"classDecl : compControl",
"classDecl : _PARAM TYPE_ '[' int32 ']'",
"classDecl : _PARAM TYPE_ dottedName",
"classDecl : _PARAM CONSTRAINT_ '[' int32 ']' ',' typeSpec",
"classDecl : _PARAM CONSTRAINT_ dottedName ',' typeSpec",
"classDecl : _INTERFACEIMPL TYPE_ typeSpec customDescr",
"fieldDecl : _FIELD repeatOpt fieldAttr type dottedName atOpt initOpt",
"fieldAttr :",
"fieldAttr : fieldAttr STATIC_",
"fieldAttr : fieldAttr PUBLIC_",
"fieldAttr : fieldAttr PRIVATE_",
"fieldAttr : fieldAttr FAMILY_",
"fieldAttr : fieldAttr INITONLY_",
"fieldAttr : fieldAttr RTSPECIALNAME_",
"fieldAttr : fieldAttr SPECIALNAME_",
"fieldAttr : fieldAttr MARSHAL_ '(' marshalBlob ')'",
"fieldAttr : fieldAttr ASSEMBLY_",
"fieldAttr : fieldAttr FAMANDASSEM_",
"fieldAttr : fieldAttr FAMORASSEM_",
"fieldAttr : fieldAttr PRIVATESCOPE_",
"fieldAttr : fieldAttr LITERAL_",
"fieldAttr : fieldAttr NOTSERIALIZED_",
"fieldAttr : fieldAttr FLAGS_ '(' int32 ')'",
"atOpt :",
"atOpt : AT_ id",
"initOpt :",
"initOpt : '=' fieldInit",
"repeatOpt :",
"repeatOpt : '[' int32 ']'",
"methodRef : callConv type typeSpec DCOLON methodName tyArgs0 '(' sigArgs0 ')'",
"methodRef : callConv type typeSpec DCOLON methodName genArityNotEmpty '(' sigArgs0 ')'",
"methodRef : callConv type methodName tyArgs0 '(' sigArgs0 ')'",
"methodRef : callConv type methodName genArityNotEmpty '(' sigArgs0 ')'",
"methodRef : mdtoken",
"methodRef : TYPEDEF_M",
"methodRef : TYPEDEF_MR",
"callConv : INSTANCE_ callConv",
"callConv : EXPLICIT_ callConv",
"callConv : callKind",
"callConv : CALLCONV_ '(' int32 ')'",
"callKind :",
"callKind : DEFAULT_",
"callKind : VARARG_",
"callKind : UNMANAGED_ CDECL_",
"callKind : UNMANAGED_ STDCALL_",
"callKind : UNMANAGED_ THISCALL_",
"callKind : UNMANAGED_ FASTCALL_",
"callKind : UNMANAGED_",
"mdtoken : MDTOKEN_ '(' int32 ')'",
"memberRef : methodSpec methodRef",
"memberRef : FIELD_ type typeSpec DCOLON dottedName",
"memberRef : FIELD_ type dottedName",
"memberRef : FIELD_ TYPEDEF_F",
"memberRef : FIELD_ TYPEDEF_MR",
"memberRef : mdtoken",
"eventHead : _EVENT eventAttr typeSpec dottedName",
"eventHead : _EVENT eventAttr dottedName",
"eventAttr :",
"eventAttr : eventAttr RTSPECIALNAME_",
"eventAttr : eventAttr SPECIALNAME_",
"eventDecls :",
"eventDecls : eventDecls eventDecl",
"eventDecl : _ADDON methodRef",
"eventDecl : _REMOVEON methodRef",
"eventDecl : _FIRE methodRef",
"eventDecl : _OTHER methodRef",
"eventDecl : extSourceSpec",
"eventDecl : customAttrDecl",
"eventDecl : languageDecl",
"eventDecl : compControl",
"propHead : _PROPERTY propAttr callConv type dottedName '(' sigArgs0 ')' initOpt",
"propAttr :",
"propAttr : propAttr RTSPECIALNAME_",
"propAttr : propAttr SPECIALNAME_",
"propDecls :",
"propDecls : propDecls propDecl",
"propDecl : _SET methodRef",
"propDecl : _GET methodRef",
"propDecl : _OTHER methodRef",
"propDecl : customAttrDecl",
"propDecl : extSourceSpec",
"propDecl : languageDecl",
"propDecl : compControl",
"methodHeadPart1 : _METHOD",
"marshalClause :",
"marshalClause : MARSHAL_ '(' marshalBlob ')'",
"marshalBlob : nativeType",
"marshalBlob : marshalBlobHead hexbytes '}'",
"marshalBlobHead : '{'",
"methodHead : methodHeadPart1 methAttr callConv paramAttr type marshalClause methodName typarsClause '(' sigArgs0 ')' implAttr '{'",
"methAttr :",
"methAttr : methAttr STATIC_",
"methAttr : methAttr PUBLIC_",
"methAttr : methAttr PRIVATE_",
"methAttr : methAttr FAMILY_",
"methAttr : methAttr FINAL_",
"methAttr : methAttr SPECIALNAME_",
"methAttr : methAttr VIRTUAL_",
"methAttr : methAttr STRICT_",
"methAttr : methAttr ABSTRACT_",
"methAttr : methAttr ASSEMBLY_",
"methAttr : methAttr FAMANDASSEM_",
"methAttr : methAttr FAMORASSEM_",
"methAttr : methAttr PRIVATESCOPE_",
"methAttr : methAttr HIDEBYSIG_",
"methAttr : methAttr NEWSLOT_",
"methAttr : methAttr RTSPECIALNAME_",
"methAttr : methAttr UNMANAGEDEXP_",
"methAttr : methAttr REQSECOBJ_",
"methAttr : methAttr FLAGS_ '(' int32 ')'",
"methAttr : methAttr PINVOKEIMPL_ '(' compQstring AS_ compQstring pinvAttr ')'",
"methAttr : methAttr PINVOKEIMPL_ '(' compQstring pinvAttr ')'",
"methAttr : methAttr PINVOKEIMPL_ '(' pinvAttr ')'",
"pinvAttr :",
"pinvAttr : pinvAttr NOMANGLE_",
"pinvAttr : pinvAttr ANSI_",
"pinvAttr : pinvAttr UNICODE_",
"pinvAttr : pinvAttr AUTOCHAR_",
"pinvAttr : pinvAttr LASTERR_",
"pinvAttr : pinvAttr WINAPI_",
"pinvAttr : pinvAttr CDECL_",
"pinvAttr : pinvAttr STDCALL_",
"pinvAttr : pinvAttr THISCALL_",
"pinvAttr : pinvAttr FASTCALL_",
"pinvAttr : pinvAttr BESTFIT_ ':' ON_",
"pinvAttr : pinvAttr BESTFIT_ ':' OFF_",
"pinvAttr : pinvAttr CHARMAPERROR_ ':' ON_",
"pinvAttr : pinvAttr CHARMAPERROR_ ':' OFF_",
"pinvAttr : pinvAttr FLAGS_ '(' int32 ')'",
"methodName : _CTOR",
"methodName : _CCTOR",
"methodName : dottedName",
"paramAttr :",
"paramAttr : paramAttr '[' IN_ ']'",
"paramAttr : paramAttr '[' OUT_ ']'",
"paramAttr : paramAttr '[' OPT_ ']'",
"paramAttr : paramAttr '[' int32 ']'",
"implAttr :",
"implAttr : implAttr NATIVE_",
"implAttr : implAttr CIL_",
"implAttr : implAttr OPTIL_",
"implAttr : implAttr MANAGED_",
"implAttr : implAttr UNMANAGED_",
"implAttr : implAttr FORWARDREF_",
"implAttr : implAttr PRESERVESIG_",
"implAttr : implAttr RUNTIME_",
"implAttr : implAttr INTERNALCALL_",
"implAttr : implAttr SYNCHRONIZED_",
"implAttr : implAttr NOINLINING_",
"implAttr : implAttr AGGRESSIVEINLINING_",
"implAttr : implAttr NOOPTIMIZATION_",
"implAttr : implAttr AGGRESSIVEOPTIMIZATION_",
"implAttr : implAttr FLAGS_ '(' int32 ')'",
"localsHead : _LOCALS",
"methodDecls :",
"methodDecls : methodDecls methodDecl",
"methodDecl : _EMITBYTE int32",
"methodDecl : sehBlock",
"methodDecl : _MAXSTACK int32",
"methodDecl : localsHead '(' sigArgs0 ')'",
"methodDecl : localsHead INIT_ '(' sigArgs0 ')'",
"methodDecl : _ENTRYPOINT",
"methodDecl : _ZEROINIT",
"methodDecl : dataDecl",
"methodDecl : instr",
"methodDecl : id ':'",
"methodDecl : secDecl",
"methodDecl : extSourceSpec",
"methodDecl : languageDecl",
"methodDecl : customAttrDecl",
"methodDecl : compControl",
"methodDecl : _EXPORT '[' int32 ']'",
"methodDecl : _EXPORT '[' int32 ']' AS_ id",
"methodDecl : _VTENTRY int32 ':' int32",
"methodDecl : _OVERRIDE typeSpec DCOLON methodName",
"methodDecl : _OVERRIDE METHOD_ callConv type typeSpec DCOLON methodName genArity '(' sigArgs0 ')'",
"methodDecl : scopeBlock",
"methodDecl : _PARAM TYPE_ '[' int32 ']'",
"methodDecl : _PARAM TYPE_ dottedName",
"methodDecl : _PARAM CONSTRAINT_ '[' int32 ']' ',' typeSpec",
"methodDecl : _PARAM CONSTRAINT_ dottedName ',' typeSpec",
"methodDecl : _PARAM '[' int32 ']' initOpt",
"scopeBlock : scopeOpen methodDecls '}'",
"scopeOpen : '{'",
"sehBlock : tryBlock sehClauses",
"sehClauses : sehClause sehClauses",
"sehClauses : sehClause",
"tryBlock : tryHead scopeBlock",
"tryBlock : tryHead id TO_ id",
"tryBlock : tryHead int32 TO_ int32",
"tryHead : _TRY",
"sehClause : catchClause handlerBlock",
"sehClause : filterClause handlerBlock",
"sehClause : finallyClause handlerBlock",
"sehClause : faultClause handlerBlock",
"filterClause : filterHead scopeBlock",
"filterClause : filterHead id",
"filterClause : filterHead int32",
"filterHead : FILTER_",
"catchClause : CATCH_ typeSpec",
"finallyClause : FINALLY_",
"faultClause : FAULT_",
"handlerBlock : scopeBlock",
"handlerBlock : HANDLER_ id TO_ id",
"handlerBlock : HANDLER_ int32 TO_ int32",
"dataDecl : ddHead ddBody",
"ddHead : _DATA tls id '='",
"ddHead : _DATA tls",
"tls :",
"tls : TLS_",
"tls : CIL_",
"ddBody : '{' ddItemList '}'",
"ddBody : ddItem",
"ddItemList : ddItem ',' ddItemList",
"ddItemList : ddItem",
"ddItemCount :",
"ddItemCount : '[' int32 ']'",
"ddItem : CHAR_ '*' '(' compQstring ')'",
"ddItem : '&' '(' id ')'",
"ddItem : bytearrayhead bytes ')'",
"ddItem : FLOAT32_ '(' float64 ')' ddItemCount",
"ddItem : FLOAT64_ '(' float64 ')' ddItemCount",
"ddItem : INT64_ '(' int64 ')' ddItemCount",
"ddItem : INT32_ '(' int32 ')' ddItemCount",
"ddItem : INT16_ '(' int32 ')' ddItemCount",
"ddItem : INT8_ '(' int32 ')' ddItemCount",
"ddItem : FLOAT32_ ddItemCount",
"ddItem : FLOAT64_ ddItemCount",
"ddItem : INT64_ ddItemCount",
"ddItem : INT32_ ddItemCount",
"ddItem : INT16_ ddItemCount",
"ddItem : INT8_ ddItemCount",
"fieldSerInit : FLOAT32_ '(' float64 ')'",
"fieldSerInit : FLOAT64_ '(' float64 ')'",
"fieldSerInit : FLOAT32_ '(' int32 ')'",
"fieldSerInit : FLOAT64_ '(' int64 ')'",
"fieldSerInit : INT64_ '(' int64 ')'",
"fieldSerInit : INT32_ '(' int32 ')'",
"fieldSerInit : INT16_ '(' int32 ')'",
"fieldSerInit : INT8_ '(' int32 ')'",
"fieldSerInit : UNSIGNED_ INT64_ '(' int64 ')'",
"fieldSerInit : UNSIGNED_ INT32_ '(' int32 ')'",
"fieldSerInit : UNSIGNED_ INT16_ '(' int32 ')'",
"fieldSerInit : UNSIGNED_ INT8_ '(' int32 ')'",
"fieldSerInit : UINT64_ '(' int64 ')'",
"fieldSerInit : UINT32_ '(' int32 ')'",
"fieldSerInit : UINT16_ '(' int32 ')'",
"fieldSerInit : UINT8_ '(' int32 ')'",
"fieldSerInit : CHAR_ '(' int32 ')'",
"fieldSerInit : BOOL_ '(' truefalse ')'",
"fieldSerInit : bytearrayhead bytes ')'",
"bytearrayhead : BYTEARRAY_ '('",
"bytes :",
"bytes : hexbytes",
"hexbytes : HEXBYTE",
"hexbytes : hexbytes HEXBYTE",
"fieldInit : fieldSerInit",
"fieldInit : compQstring",
"fieldInit : NULLREF_",
"serInit : fieldSerInit",
"serInit : STRING_ '(' NULLREF_ ')'",
"serInit : STRING_ '(' SQSTRING ')'",
"serInit : TYPE_ '(' CLASS_ SQSTRING ')'",
"serInit : TYPE_ '(' className ')'",
"serInit : TYPE_ '(' NULLREF_ ')'",
"serInit : OBJECT_ '(' serInit ')'",
"serInit : FLOAT32_ '[' int32 ']' '(' f32seq ')'",
"serInit : FLOAT64_ '[' int32 ']' '(' f64seq ')'",
"serInit : INT64_ '[' int32 ']' '(' i64seq ')'",
"serInit : INT32_ '[' int32 ']' '(' i32seq ')'",
"serInit : INT16_ '[' int32 ']' '(' i16seq ')'",
"serInit : INT8_ '[' int32 ']' '(' i8seq ')'",
"serInit : UINT64_ '[' int32 ']' '(' i64seq ')'",
"serInit : UINT32_ '[' int32 ']' '(' i32seq ')'",
"serInit : UINT16_ '[' int32 ']' '(' i16seq ')'",
"serInit : UINT8_ '[' int32 ']' '(' i8seq ')'",
"serInit : UNSIGNED_ INT64_ '[' int32 ']' '(' i64seq ')'",
"serInit : UNSIGNED_ INT32_ '[' int32 ']' '(' i32seq ')'",
"serInit : UNSIGNED_ INT16_ '[' int32 ']' '(' i16seq ')'",
"serInit : UNSIGNED_ INT8_ '[' int32 ']' '(' i8seq ')'",
"serInit : CHAR_ '[' int32 ']' '(' i16seq ')'",
"serInit : BOOL_ '[' int32 ']' '(' boolSeq ')'",
"serInit : STRING_ '[' int32 ']' '(' sqstringSeq ')'",
"serInit : TYPE_ '[' int32 ']' '(' classSeq ')'",
"serInit : OBJECT_ '[' int32 ']' '(' objSeq ')'",
"f32seq :",
"f32seq : f32seq float64",
"f32seq : f32seq int32",
"f64seq :",
"f64seq : f64seq float64",
"f64seq : f64seq int64",
"i64seq :",
"i64seq : i64seq int64",
"i32seq :",
"i32seq : i32seq int32",
"i16seq :",
"i16seq : i16seq int32",
"i8seq :",
"i8seq : i8seq int32",
"boolSeq :",
"boolSeq : boolSeq truefalse",
"sqstringSeq :",
"sqstringSeq : sqstringSeq NULLREF_",
"sqstringSeq : sqstringSeq SQSTRING",
"classSeq :",
"classSeq : classSeq NULLREF_",
"classSeq : classSeq CLASS_ SQSTRING",
"classSeq : classSeq className",
"objSeq :",
"objSeq : objSeq serInit",
"methodSpec : METHOD_",
"instr_none : INSTR_NONE",
"instr_var : INSTR_VAR",
"instr_tvar : INSTR_TVAR",
"instr_i : INSTR_I",
"instr_i8 : INSTR_I8",
"instr_r : INSTR_R",
"instr_brtarget : INSTR_BRTARGET",
"instr_method : INSTR_METHOD",
"instr_field : INSTR_FIELD",
"instr_type : INSTR_TYPE",
"instr_string : INSTR_STRING",
"instr_sig : INSTR_SIG",
"instr_tok : INSTR_TOK",
"instr_switch : INSTR_SWITCH",
"instr_r_head : instr_r '('",
"instr : instr_none",
"instr : instr_var int32",
"instr : instr_var id",
"instr : instr_tvar '!' int32",
"instr : instr_tvar '!' id",
"instr : instr_tvar '!' '!' int32",
"instr : instr_tvar '!' '!' id",
"instr : instr_i int32",
"instr : instr_i8 int64",
"instr : instr_r float64",
"instr : instr_r int64",
"instr : instr_r_head bytes ')'",
"instr : instr_brtarget int32",
"instr : instr_brtarget id",
"instr : instr_method methodRef",
"instr : instr_field type typeSpec DCOLON dottedName",
"instr : instr_field type dottedName",
"instr : instr_field mdtoken",
"instr : instr_field TYPEDEF_F",
"instr : instr_field TYPEDEF_MR",
"instr : instr_type typeSpec",
"instr : instr_string compQstring",
"instr : instr_string ANSI_ '(' compQstring ')'",
"instr : instr_string bytearrayhead bytes ')'",
"instr : instr_sig callConv type '(' sigArgs0 ')'",
"instr : instr_tok ownerType",
"instr : instr_switch '(' labels ')'",
"labels :",
"labels : id ',' labels",
"labels : int32 ',' labels",
"labels : id",
"labels : int32",
"tyArgs0 :",
"tyArgs0 : '<' tyArgs1 '>'",
"tyArgs1 :",
"tyArgs1 : tyArgs2",
"tyArgs2 : type",
"tyArgs2 : tyArgs2 ',' type",
"sigArgs0 :",
"sigArgs0 : sigArgs1",
"sigArgs1 : sigArg",
"sigArgs1 : sigArgs1 ',' sigArg",
"sigArg : ELLIPSIS",
"sigArg : paramAttr type marshalClause",
"sigArg : paramAttr type marshalClause id",
"className : '[' dottedName ']' slashedName",
"className : '[' mdtoken ']' slashedName",
"className : '[' '*' ']' slashedName",
"className : '[' _MODULE dottedName ']' slashedName",
"className : slashedName",
"className : mdtoken",
"className : TYPEDEF_T",
"className : _THIS",
"className : _BASE",
"className : _NESTER",
"slashedName : dottedName",
"slashedName : slashedName '/' dottedName",
"typeSpec : className",
"typeSpec : '[' dottedName ']'",
"typeSpec : '[' _MODULE dottedName ']'",
"typeSpec : type",
"nativeType :",
"nativeType : CUSTOM_ '(' compQstring ',' compQstring ',' compQstring ',' compQstring ')'",
"nativeType : CUSTOM_ '(' compQstring ',' compQstring ')'",
"nativeType : FIXED_ SYSSTRING_ '[' int32 ']'",
"nativeType : FIXED_ ARRAY_ '[' int32 ']' nativeType",
"nativeType : VARIANT_",
"nativeType : CURRENCY_",
"nativeType : SYSCHAR_",
"nativeType : VOID_",
"nativeType : BOOL_",
"nativeType : INT8_",
"nativeType : INT16_",
"nativeType : INT32_",
"nativeType : INT64_",
"nativeType : FLOAT32_",
"nativeType : FLOAT64_",
"nativeType : ERROR_",
"nativeType : UNSIGNED_ INT8_",
"nativeType : UNSIGNED_ INT16_",
"nativeType : UNSIGNED_ INT32_",
"nativeType : UNSIGNED_ INT64_",
"nativeType : UINT8_",
"nativeType : UINT16_",
"nativeType : UINT32_",
"nativeType : UINT64_",
"nativeType : nativeType '*'",
"nativeType : nativeType '[' ']'",
"nativeType : nativeType '[' int32 ']'",
"nativeType : nativeType '[' int32 '+' int32 ']'",
"nativeType : nativeType '[' '+' int32 ']'",
"nativeType : DECIMAL_",
"nativeType : DATE_",
"nativeType : BSTR_",
"nativeType : LPSTR_",
"nativeType : LPWSTR_",
"nativeType : LPTSTR_",
"nativeType : OBJECTREF_",
"nativeType : IUNKNOWN_ iidParamIndex",
"nativeType : IDISPATCH_ iidParamIndex",
"nativeType : STRUCT_",
"nativeType : INTERFACE_ iidParamIndex",
"nativeType : SAFEARRAY_ variantType",
"nativeType : SAFEARRAY_ variantType ',' compQstring",
"nativeType : INT_",
"nativeType : UNSIGNED_ INT_",
"nativeType : UINT_",
"nativeType : NESTED_ STRUCT_",
"nativeType : BYVALSTR_",
"nativeType : ANSI_ BSTR_",
"nativeType : TBSTR_",
"nativeType : VARIANT_ BOOL_",
"nativeType : METHOD_",
"nativeType : AS_ ANY_",
"nativeType : LPSTRUCT_",
"nativeType : TYPEDEF_TS",
"iidParamIndex :",
"iidParamIndex : '(' IIDPARAM_ '=' int32 ')'",
"variantType :",
"variantType : NULL_",
"variantType : VARIANT_",
"variantType : CURRENCY_",
"variantType : VOID_",
"variantType : BOOL_",
"variantType : INT8_",
"variantType : INT16_",
"variantType : INT32_",
"variantType : INT64_",
"variantType : FLOAT32_",
"variantType : FLOAT64_",
"variantType : UNSIGNED_ INT8_",
"variantType : UNSIGNED_ INT16_",
"variantType : UNSIGNED_ INT32_",
"variantType : UNSIGNED_ INT64_",
"variantType : UINT8_",
"variantType : UINT16_",
"variantType : UINT32_",
"variantType : UINT64_",
"variantType : '*'",
"variantType : variantType '[' ']'",
"variantType : variantType VECTOR_",
"variantType : variantType '&'",
"variantType : DECIMAL_",
"variantType : DATE_",
"variantType : BSTR_",
"variantType : LPSTR_",
"variantType : LPWSTR_",
"variantType : IUNKNOWN_",
"variantType : IDISPATCH_",
"variantType : SAFEARRAY_",
"variantType : INT_",
"variantType : UNSIGNED_ INT_",
"variantType : UINT_",
"variantType : ERROR_",
"variantType : HRESULT_",
"variantType : CARRAY_",
"variantType : USERDEFINED_",
"variantType : RECORD_",
"variantType : FILETIME_",
"variantType : BLOB_",
"variantType : STREAM_",
"variantType : STORAGE_",
"variantType : STREAMED_OBJECT_",
"variantType : STORED_OBJECT_",
"variantType : BLOB_OBJECT_",
"variantType : CF_",
"variantType : CLSID_",
"type : CLASS_ className",
"type : OBJECT_",
"type : VALUE_ CLASS_ className",
"type : VALUETYPE_ className",
"type : CONST_ simpleType",
"type : type '[' ']'",
"type : type '[' bounds1 ']'",
"type : type '&'",
"type : type '*'",
"type : type PINNED_",
"type : type MODREQ_ '(' typeSpec ')'",
"type : type MODOPT_ '(' typeSpec ')'",
"type : methodSpec callConv type '*' '(' sigArgs0 ')'",
"type : type '<' tyArgs1 '>'",
"type : CONST_ '!' '!' int32",
"type : '!' '!' int32",
"type : CONST_ '!' int32",
"type : '!' int32",
"type : CONST_ '!' '!' dottedName",
"type : '!' '!' dottedName",
"type : CONST_ '!' dottedName",
"type : '!' dottedName",
"type : TYPEDREF_",
"type : VOID_",
"type : NATIVE_ INT_",
"type : NATIVE_ UNSIGNED_ INT_",
"type : NATIVE_ UINT_",
"type : simpleType",
"type : ELLIPSIS type",
"simpleType : CHAR_",
"simpleType : STRING_",
"simpleType : BOOL_",
"simpleType : INT8_",
"simpleType : INT16_",
"simpleType : INT32_",
"simpleType : INT64_",
"simpleType : FLOAT32_",
"simpleType : FLOAT64_",
"simpleType : UNSIGNED_ INT8_",
"simpleType : UNSIGNED_ INT16_",
"simpleType : UNSIGNED_ INT32_",
"simpleType : UNSIGNED_ INT64_",
"simpleType : UINT8_",
"simpleType : UINT16_",
"simpleType : UINT32_",
"simpleType : UINT64_",
"simpleType : TYPEDEF_TS",
"bounds1 : bound",
"bounds1 : bounds1 ',' bound",
"bound :",
"bound : ELLIPSIS",
"bound : int32",
"bound : int32 ELLIPSIS int32",
"bound : int32 ELLIPSIS",
"secDecl : _PERMISSION secAction typeSpec '(' nameValPairs ')'",
"secDecl : _PERMISSION secAction typeSpec '=' '{' customBlobDescr '}'",
"secDecl : _PERMISSION secAction typeSpec",
"secDecl : psetHead bytes ')'",
"secDecl : _PERMISSIONSET secAction compQstring",
"secDecl : _PERMISSIONSET secAction '=' '{' secAttrSetBlob '}'",
"secAttrSetBlob :",
"secAttrSetBlob : secAttrBlob",
"secAttrSetBlob : secAttrBlob ',' secAttrSetBlob",
"secAttrBlob : typeSpec '=' '{' customBlobNVPairs '}'",
"secAttrBlob : CLASS_ SQSTRING '=' '{' customBlobNVPairs '}'",
"psetHead : _PERMISSIONSET secAction '=' '('",
"psetHead : _PERMISSIONSET secAction BYTEARRAY_ '('",
"nameValPairs : nameValPair",
"nameValPairs : nameValPair ',' nameValPairs",
"nameValPair : compQstring '=' caValue",
"truefalse : TRUE_",
"truefalse : FALSE_",
"caValue : truefalse",
"caValue : int32",
"caValue : INT32_ '(' int32 ')'",
"caValue : compQstring",
"caValue : className '(' INT8_ ':' int32 ')'",
"caValue : className '(' INT16_ ':' int32 ')'",
"caValue : className '(' INT32_ ':' int32 ')'",
"caValue : className '(' int32 ')'",
"secAction : REQUEST_",
"secAction : DEMAND_",
"secAction : ASSERT_",
"secAction : DENY_",
"secAction : PERMITONLY_",
"secAction : LINKCHECK_",
"secAction : INHERITCHECK_",
"secAction : REQMIN_",
"secAction : REQOPT_",
"secAction : REQREFUSE_",
"secAction : PREJITGRANT_",
"secAction : PREJITDENY_",
"secAction : NONCASDEMAND_",
"secAction : NONCASLINKDEMAND_",
"secAction : NONCASINHERITANCE_",
"esHead : _LINE",
"esHead : P_LINE",
"extSourceSpec : esHead int32 SQSTRING",
"extSourceSpec : esHead int32",
"extSourceSpec : esHead int32 ':' int32 SQSTRING",
"extSourceSpec : esHead int32 ':' int32",
"extSourceSpec : esHead int32 ':' int32 ',' int32 SQSTRING",
"extSourceSpec : esHead int32 ':' int32 ',' int32",
"extSourceSpec : esHead int32 ',' int32 ':' int32 SQSTRING",
"extSourceSpec : esHead int32 ',' int32 ':' int32",
"extSourceSpec : esHead int32 ',' int32 ':' int32 ',' int32 SQSTRING",
"extSourceSpec : esHead int32 ',' int32 ':' int32 ',' int32",
"extSourceSpec : esHead int32 QSTRING",
"fileDecl : _FILE fileAttr dottedName fileEntry hashHead bytes ')' fileEntry",
"fileDecl : _FILE fileAttr dottedName fileEntry",
"fileAttr :",
"fileAttr : fileAttr NOMETADATA_",
"fileEntry :",
"fileEntry : _ENTRYPOINT",
"hashHead : _HASH '=' '('",
"assemblyHead : _ASSEMBLY asmAttr dottedName",
"asmAttr :",
"asmAttr : asmAttr RETARGETABLE_",
"asmAttr : asmAttr WINDOWSRUNTIME_",
"asmAttr : asmAttr NOPLATFORM_",
"asmAttr : asmAttr LEGACY_ LIBRARY_",
"asmAttr : asmAttr CIL_",
"asmAttr : asmAttr X86_",
"asmAttr : asmAttr AMD64_",
"asmAttr : asmAttr ARM_",
"asmAttr : asmAttr ARM64_",
"assemblyDecls :",
"assemblyDecls : assemblyDecls assemblyDecl",
"assemblyDecl : _HASH ALGORITHM_ int32",
"assemblyDecl : secDecl",
"assemblyDecl : asmOrRefDecl",
"intOrWildcard : int32",
"intOrWildcard : '*'",
"asmOrRefDecl : publicKeyHead bytes ')'",
"asmOrRefDecl : _VER intOrWildcard ':' intOrWildcard ':' intOrWildcard ':' intOrWildcard",
"asmOrRefDecl : _LOCALE compQstring",
"asmOrRefDecl : localeHead bytes ')'",
"asmOrRefDecl : customAttrDecl",
"asmOrRefDecl : compControl",
"publicKeyHead : _PUBLICKEY '=' '('",
"publicKeyTokenHead : _PUBLICKEYTOKEN '=' '('",
"localeHead : _LOCALE '=' '('",
"assemblyRefHead : _ASSEMBLY EXTERN_ asmAttr dottedName",
"assemblyRefHead : _ASSEMBLY EXTERN_ asmAttr dottedName AS_ dottedName",
"assemblyRefDecls :",
"assemblyRefDecls : assemblyRefDecls assemblyRefDecl",
"assemblyRefDecl : hashHead bytes ')'",
"assemblyRefDecl : asmOrRefDecl",
"assemblyRefDecl : publicKeyTokenHead bytes ')'",
"assemblyRefDecl : AUTO_",
"exptypeHead : _CLASS EXTERN_ exptAttr dottedName",
"exportHead : _EXPORT exptAttr dottedName",
"exptAttr :",
"exptAttr : exptAttr PRIVATE_",
"exptAttr : exptAttr PUBLIC_",
"exptAttr : exptAttr FORWARDER_",
"exptAttr : exptAttr NESTED_ PUBLIC_",
"exptAttr : exptAttr NESTED_ PRIVATE_",
"exptAttr : exptAttr NESTED_ FAMILY_",
"exptAttr : exptAttr NESTED_ ASSEMBLY_",
"exptAttr : exptAttr NESTED_ FAMANDASSEM_",
"exptAttr : exptAttr NESTED_ FAMORASSEM_",
"exptypeDecls :",
"exptypeDecls : exptypeDecls exptypeDecl",
"exptypeDecl : _FILE dottedName",
"exptypeDecl : _CLASS EXTERN_ slashedName",
"exptypeDecl : _ASSEMBLY EXTERN_ dottedName",
"exptypeDecl : MDTOKEN_ '(' int32 ')'",
"exptypeDecl : _CLASS int32",
"exptypeDecl : customAttrDecl",
"exptypeDecl : compControl",
"manifestResHead : _MRESOURCE manresAttr dottedName",
"manifestResHead : _MRESOURCE manresAttr dottedName AS_ dottedName",
"manresAttr :",
"manresAttr : manresAttr PUBLIC_",
"manresAttr : manresAttr PRIVATE_",
"manifestResDecls :",
"manifestResDecls : manifestResDecls manifestResDecl",
"manifestResDecl : _FILE dottedName AT_ int32",
"manifestResDecl : _ASSEMBLY EXTERN_ dottedName",
"manifestResDecl : customAttrDecl",
"manifestResDecl : compControl",
};
#endif
#line 52 "btyaccpa.ske"

/*
** YYPOSN is user-defined text position type.
*/
#ifdef YYPOSN
#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif /* YYREDUCEPOSNFUNC */
#endif /* YYPOSN */

/* If delete function is not defined by the user, do not deletions. */
#ifndef YYDELETEVAL
#define YYDELETEVAL(v, x) 
#endif

/* If delete function is not defined by the user, do not deletions. */
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v, x) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

extern void yyerror(const char *);

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
#ifdef YYPOSN
YYPOSN  yyposn;
#endif /* YYPOSN */

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
#ifdef YYPOSN
YYPOSN  yyretposn;
#endif /* YYPOSN */

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYERROR_QUIET  goto yyerrquiet
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  struct yyparsestate *save;        /* Previously saved parser state */
  int           state;
  int           errflag;
  Yshort       *ss;          /* state stack base */
  Yshort       *ssp;         /* state stack pointer */
  YYSTYPE      *vs;          /* values stack base */
  YYSTYPE      *vsp;         /* value stack pointer */
  YYSTYPE       val;         /* value as returned by actions */
#ifdef YYPOSN
  YYPOSN       *ps;          /* position stack base */
  YYPOSN       *psp;         /* position stack pointer */
  YYPOSN        pos;         /* position as returned by universal action */
#endif /* YYPOSN */
  ptrdiff_t     lexeme;      /* index of the conflict lexeme in the lexical queue */
  size_t        stacksize;   /* current maximum stack size */
  Yshort        ctry;        /* index in yyctable[] for this conflict */
};

/* Current parser state */
static struct yyparsestate *yyps=0;

/* yypath!=NULL: do the full parse, starting at *yypath parser state. */
static struct yyparsestate *yypath=0;

/* Base of the lexical value queue */
static YYSTYPE *yylvals=0;

/* Current posistion at lexical value queue */
static YYSTYPE *yylvp=0;

/* End position of lexical value queue */
static YYSTYPE *yylve=0;

/* The last allocated position at the lexical value queue */
static YYSTYPE *yylvlim=0;

#ifdef YYPOSN
/* Base of the lexical position queue */
static YYPOSN *yylpsns=0;

/* Current posistion at lexical position queue */
static YYPOSN *yylpp=0;

/* End position of lexical position queue */
static YYPOSN *yylpe=0;

/* The last allocated position at the lexical position queue */
static YYPOSN *yylplim=0;
#endif /* YYPOSN */

/* Current position at lexical token queue */
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

/*
** For use in generated program
*/
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yypsp   (yyps->psp)
#define yypos   (yyps->pos)
#define yydepth (yyps->ssp - yyps->ss)


/*
** Local prototypes.
*/
int yyparse(void);
int yylex(void);

static void YYSCopy(YYSTYPE *to, YYSTYPE *from, ptrdiff_t size) {
  ptrdiff_t i;
  for (i = size-1; i >= 0; i--)
    to[i] = from[i];
}

#ifdef YYPOSN
static void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--)
    to[i] = from[i];
}
#endif /* YYPOSN */

static int yyexpand() {
  ptrdiff_t p = yylvp-yylvals;
  ptrdiff_t s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
#ifdef __cplusplus
  Yshort  *tl = yylexemes; 
  yylexemes = new Yshort[s];
  memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
  delete[] tl;
  YYSTYPE *tv = yylvals;
  yylvals = new YYSTYPE[s];
  YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
  delete[] tv;
#ifdef YYPOSN
  YYPOSN  *tp = yylpsns;
  yylpsns = new YYPOSN[s];
  YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
  delete[] tp;
#endif /* YYPOSN */
#else
  yylexemes = realloc(yylexemes, sizeof(Yshort) * s);
  yylvals = realloc(yylvals, sizeof(YYSTYPE) * s);
#ifdef YYPOSN
  yylpsns = realloc(yylpsns, sizeof(YYPOSN) * s);
#endif /* YYPOSN */
#endif
  yylexp = yylexemes + p;
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
#ifdef YYPOSN
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
#endif /* YYPOSN */
  return 0;
}

static int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
#ifdef YYPOSN
    yyposn = *yylpp++;
#endif /* YYPOSN */
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
#ifdef YYPOSN
      *yylpp++ = yyposn;
      yylpe++;
#endif /* YYPOSN */
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

static void YYMoreStack(struct yyparsestate *yyps) {
  ptrdiff_t p = yyps->ssp - yyps->ss;
#ifdef __cplusplus
  Yshort  *tss = yyps->ss;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  delete[] tss;
  YYSTYPE *tvs = yyps->vs;
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  delete[] tvs;
#ifdef YYPOSN
  YYPOSN  *tps = yyps->ps;
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  delete[] tps;
#endif /* YYPOSN */
  yyps->stacksize += YYSTACKGROWTH;                           
#else
  yyps->stacksize += YYSTACKGROWTH;                           
  yyps->ss = realloc(yyps->ss, sizeof(Yshort ) * yyps->stacksize);   
  yyps->vs = realloc(yyps->vs, sizeof(YYSTYPE) * yyps->stacksize);  
#ifdef YYPOSN
  yyps->ps = realloc(yyps->ps, sizeof(YYPOSN ) * yyps->stacksize);  
#endif /* YYPOSN */
#endif
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
#ifdef YYPOSN
  yyps->psp = yyps->ps + p;                                   
#endif /* YYPOSN */
}

static struct yyparsestate *YYNewState(size_t size) {
#ifdef __cplusplus
  yyparsestate *p = new yyparsestate;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
#ifdef YYPOSN
  p->ps = new YYPOSN [size + 4];
#endif /* YYPOSN */
#else
  struct yyparsestate *p = malloc(sizeof(struct yyparsestate));
  p->ss = malloc(sizeof(Yshort ) * (size + 4));
  p->vs = malloc(sizeof(YYSTYPE) * (size + 4));
#ifdef YYPOSN
  p->ps = malloc(sizeof(YYPOSN ) * (size + 4));
#endif /* YYPOSN */
#endif
  p->stacksize = size+4;
#ifndef YYSTYPE_CONSTRUCTOR
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
#endif
#ifdef YYPOSN
#ifndef YYPOSN_CONSTRUCTOR
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
#endif
#endif /* YYPOSN */
  return p;
}

static void YYFreeState(struct yyparsestate *p) {
#ifdef __cplusplus
  delete[] p->ss;
  delete[] p->vs;
#ifdef YYPOSN
  delete[] p->ps;
#endif /* YYPOSN */
  delete p;
#else
  free(p->ss);
  free(p->vs);
#ifdef YYPOSN
  free(p->ps);
#endif /* YYPOSN */
  free(p);
#endif
}

#line 2116 "asmparse.y"


#include "grammar_after.cpp"
#line 5948 "asmparse.cpp.tab.c"
#line 354 "btyaccpa.ske"

/*
** Parser function
*/
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  struct yyparsestate *yyerrctx = NULL;
#ifdef YYREDUCEPOSNFUNC
  int reduce_posn;
#endif /* YYREDUCEPOSNFUNC */

#if YYDEBUG
  const char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yym = 0;
  yyn = 0;
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
#ifdef YYPOSN
  yyps->psp = yyps->ps;
#endif /* YYPOSN */
  *(yyps->ssp) = yystate = 0;
  

  /*
  ** Main parsing loop
  */
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  /*
  ** Read one token
  */
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     (int)yydepth, yytrial!=0, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  /*
  ** Do we have a conflict?
  */
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful "
	       "trial parse\n", (int)yydepth, yytrial!=0, yystate);
      }
#endif
      /* Switch to the next conflict context */
      struct yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       (int)yydepth, yytrial!=0, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      struct yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
#ifdef YYPOSN
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
#endif /* YYPOSN */
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 yytrial!=0);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        /* If this is a first conflict in the stack, start saving lexemes */
        if (!yylexemes) {
#ifdef __cplusplus
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
#ifdef YYPOSN
          yylpsns = new YYPOSN[YYSTACKGROWTH];
#endif /* YYPOSN */
#else
          yylexemes = malloc(sizeof(Yshort) * YYSTACKGROWTH);
          yylvals = malloc(sizeof(YYSTYPE) * YYSTACKGROWTH);
#ifdef YYPOSN
          yylpsns = malloc(sizeof(YYPOSN) * YYSTACKGROWTH);
#endif /* YYPOSN */
#endif
          yylvlim = yylvals + YYSTACKGROWTH; 
#ifdef YYPOSN
          yylplim = yylpsns + YYSTACKGROWTH; 
#endif /* YYPOSN */
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
#ifdef YYPOSN
	  yylpp = yylpe = yylpsns;
#endif /* YYPOSN */
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
#ifdef YYPOSN
            *yylpe++ = yyposn;
#endif /* YYPOSN */
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--;
#ifdef YYPOSN
	yylpp--;
#endif /* YYPOSN */
	yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               (int)yydepth, yytrial!=0, yystate, yyctable[ctry]);
#endif
      if (yychar < 0) {
        yylvp++;
#ifdef YYPOSN
	yylpp++;
#endif /* YYPOSN */
	yylexp++;
      }
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  /*
  ** Is action a shift?
  */
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             (int)yydepth, yytrial!=0, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
#ifdef YYPOSN
    *++(yyps->psp) = yyposn;
#endif /* YYPOSN */
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }
  yym = 0;  /* no reduction to clean up after */

  /*
  ** Action: error
  */
  if (yyps->errflag) goto yyinrecovery;
  else goto yyerrlab;	/* redundant goto to avoid 'unused label' warnings */
yyerrlab:
  /* explicit YYERROR from an action -- pop the rhs of the rule reduced
   * before looking for error recovery */
  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
#ifdef YYPOSN
  yyps->psp -= yym;
#endif /* YYPOSN */

  yynewerrflag = 1;
  goto yyerrhandler;
  goto yyerrquiet; /* redundant goto to avoid 'unused label' warnings */
yyerrquiet:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) {
    int ctry; 
    struct yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to "
	     "state %d, %d tokens\n", (int)yydepth, yytrial!=0, yystate,
	     yyps->save->state, (int)(yylvp - yylvals - yyps->save->lexeme));
#endif
    /* Memorize most forward-looking error state in case
     * it's really an error. */
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      /* Free old saved error context state */
      if(yyerrctx) YYFreeState(yyerrctx);
      /* Create and fill out new saved error context state */
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      memcpy(yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
#ifdef YYPOSN
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
#endif /* YYPOSN */
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yychar = -1;
    yylexp = yylexemes + save->lexeme;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    yylvp = yylvals + save->lexeme;
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
#ifdef YYPOSN
    yylpp  = yylpsns + save->lexeme;
    yyps->psp = yyps->ps + (save->psp - save->ps);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
#endif /* YYPOSN */
    ctry = ++save->ctry;
    yystate = save->state;
    /* We tried shift, try reduce now */
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    /*
    ** Nothing left on the stack -- error
    */
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       yytrial!=0);
      }
#endif
      /* Restore state as it was in the most forward-advanced error */
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      memcpy(yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      yylvp = yylvals   + yyerrctx->lexeme;
      yylval = yylvp[-1];
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
#ifdef YYPOSN
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yyposn = yylpp[-1];
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
#endif /* YYPOSN */
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state "
	         "%d\n", (int)yydepth, yytrial!=0, *(yyps->ssp), yytable[yyn]);
#endif
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 (int)yydepth, yytrial!=0, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
#ifdef YYDESTRUCT
	YYDESTRUCT(yytrial!=0, yyastable[yyps->ssp[0]], yyps->vsp, yyps->psp);
#endif /* YYDESTRUCT */
        --(yyps->ssp);
        --(yyps->vsp);
#ifdef YYPOSN
        --(yyps->psp);
#endif /* YYPOSN */
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d "
	     "(%s)\n", (int)yydepth, yytrial!=0, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
#ifdef YYDESTRUCT
    if (yychar > 0)
      YYDESTRUCT(yytrial!=0, yyastable[yyttable[yychar]], &yylval, &yyposn);
#endif /* YYDESTRUCT */
    yychar = (-1);
    goto yyloop;
  }

  /*
  ** Reduce the rule
  */
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           (int)yydepth, yytrial!=0, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = $1" default action */
  yyval = yyvsp[0];

#ifdef YYPOSN
  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling
     is present */
#ifndef YYPOSN_CONSTRUCTOR
  memset(&yyps->pos, 0, sizeof(yyps->pos));
#endif
#ifdef YYREDUCEPOSNFUNC
  reduce_posn = 1;
#endif /* YYREDUCEPOSNFUNC */
#endif /* YYPOSN */

  switch (yyn) {

case 3:
  if (!yytrial)
#line 194 "asmparse.y"
{ PASM->EndClass(); }
#line 6401 "asmparse.cpp.tab.c"
break;
case 4:
  if (!yytrial)
#line 195 "asmparse.y"
{ PASM->EndNameSpace(); }
#line 6407 "asmparse.cpp.tab.c"
break;
case 5:
  if (!yytrial)
#line 196 "asmparse.y"
{ if(PASM->m_pCurMethod->m_ulLines[1] ==0)
                                                                                  {  PASM->m_pCurMethod->m_ulLines[1] = PASM->m_ulCurLine;
                                                                                     PASM->m_pCurMethod->m_ulColumns[1]=PASM->m_ulCurColumn;}
                                                                                  PASM->EndMethod(); }
#line 6416 "asmparse.cpp.tab.c"
break;
case 12:
  if (!yytrial)
#line 206 "asmparse.y"
{ PASMM->EndAssembly(); }
#line 6422 "asmparse.cpp.tab.c"
break;
case 13:
  if (!yytrial)
#line 207 "asmparse.y"
{ PASMM->EndAssembly(); }
#line 6428 "asmparse.cpp.tab.c"
break;
case 14:
  if (!yytrial)
#line 208 "asmparse.y"
{ PASMM->EndComType(); }
#line 6434 "asmparse.cpp.tab.c"
break;
case 15:
  if (!yytrial)
#line 209 "asmparse.y"
{ PASMM->EndManifestRes(); }
#line 6440 "asmparse.cpp.tab.c"
break;
case 19:
  if (!yytrial)
#line 213 "asmparse.y"
{
#ifdef _PREFAST_
#pragma warning(push)
#pragma warning(disable:22011) /* Suppress PREFast warning about integer overflow/underflow*/
#endif
                                                                                  PASM->m_dwSubsystem = yyvsp[0].int32;
#ifdef _PREFAST_
#pragma warning(pop)
#endif
                                                                                }
#line 6455 "asmparse.cpp.tab.c"
break;
case 20:
  if (!yytrial)
#line 223 "asmparse.y"
{ PASM->m_dwComImageFlags = yyvsp[0].int32; }
#line 6461 "asmparse.cpp.tab.c"
break;
case 21:
  if (!yytrial)
#line 224 "asmparse.y"
{ PASM->m_dwFileAlignment = yyvsp[0].int32;
                                                                                  if((yyvsp[0].int32 & (yyvsp[0].int32 - 1))||(yyvsp[0].int32 < 0x200)||(yyvsp[0].int32 > 0x10000))
                                                                                    PASM->report->error("Invalid file alignment, must be power of 2 from 0x200 to 0x10000\n");}
#line 6469 "asmparse.cpp.tab.c"
break;
case 22:
  if (!yytrial)
#line 227 "asmparse.y"
{ PASM->m_stBaseAddress = (ULONGLONG)(*(yyvsp[0].int64)); delete yyvsp[0].int64;
                                                                                  if(PASM->m_stBaseAddress & 0xFFFF)
                                                                                    PASM->report->error("Invalid image base, must be 0x10000-aligned\n");}
#line 6477 "asmparse.cpp.tab.c"
break;
case 23:
  if (!yytrial)
#line 230 "asmparse.y"
{ PASM->m_stSizeOfStackReserve = (size_t)(*(yyvsp[0].int64)); delete yyvsp[0].int64; }
#line 6483 "asmparse.cpp.tab.c"
break;
case 28:
  if (!yytrial)
#line 235 "asmparse.y"
{ PASM->m_fIsMscorlib = TRUE; }
#line 6489 "asmparse.cpp.tab.c"
break;
case 31:
  if (!yytrial)
#line 242 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 6495 "asmparse.cpp.tab.c"
break;
case 32:
  if (!yytrial)
#line 243 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 6501 "asmparse.cpp.tab.c"
break;
case 33:
  if (!yytrial)
#line 246 "asmparse.y"
{ LPCSTRToGuid(yyvsp[0].string,&(PASM->m_guidLang)); }
#line 6507 "asmparse.cpp.tab.c"
break;
case 34:
  if (!yytrial)
#line 247 "asmparse.y"
{ LPCSTRToGuid(yyvsp[-2].string,&(PASM->m_guidLang));
                                                                                  LPCSTRToGuid(yyvsp[0].string,&(PASM->m_guidLangVendor));}
#line 6514 "asmparse.cpp.tab.c"
break;
case 35:
  if (!yytrial)
#line 249 "asmparse.y"
{ LPCSTRToGuid(yyvsp[-4].string,&(PASM->m_guidLang));
                                                                                  LPCSTRToGuid(yyvsp[-2].string,&(PASM->m_guidLangVendor));
                                                                                  LPCSTRToGuid(yyvsp[-2].string,&(PASM->m_guidDoc));}
#line 6522 "asmparse.cpp.tab.c"
break;
case 36:
  if (!yytrial)
#line 254 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 6528 "asmparse.cpp.tab.c"
break;
case 37:
  if (!yytrial)
#line 255 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 6534 "asmparse.cpp.tab.c"
break;
case 38:
  if (!yytrial)
#line 258 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 6540 "asmparse.cpp.tab.c"
break;
case 39:
  if (!yytrial)
#line 259 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 6546 "asmparse.cpp.tab.c"
break;
case 40:
  if (!yytrial)
#line 260 "asmparse.y"
{ yyval.string = newStringWDel(yyvsp[-2].string, '.', yyvsp[0].string); }
#line 6552 "asmparse.cpp.tab.c"
break;
case 41:
  if (!yytrial)
#line 263 "asmparse.y"
{ yyval.int32 = yyvsp[0].int32; }
#line 6558 "asmparse.cpp.tab.c"
break;
case 42:
  if (!yytrial)
#line 266 "asmparse.y"
{ yyval.int64 = yyvsp[0].int64; }
#line 6564 "asmparse.cpp.tab.c"
break;
case 43:
  if (!yytrial)
#line 267 "asmparse.y"
{ yyval.int64 = neg ? new __int64(yyvsp[0].int32) : new __int64((unsigned)yyvsp[0].int32); }
#line 6570 "asmparse.cpp.tab.c"
break;
case 44:
  if (!yytrial)
#line 270 "asmparse.y"
{ yyval.float64 = yyvsp[0].float64; }
#line 6576 "asmparse.cpp.tab.c"
break;
case 45:
  if (!yytrial)
#line 271 "asmparse.y"
{ float f; *((__int32*) (&f)) = yyvsp[-1].int32; yyval.float64 = new double(f); }
#line 6582 "asmparse.cpp.tab.c"
break;
case 46:
  if (!yytrial)
#line 272 "asmparse.y"
{ yyval.float64 = (double*) yyvsp[-1].int64; }
#line 6588 "asmparse.cpp.tab.c"
break;
case 47:
  if (!yytrial)
#line 276 "asmparse.y"
{ PASM->AddTypeDef(yyvsp[-2].binstr,yyvsp[0].string); }
#line 6594 "asmparse.cpp.tab.c"
break;
case 48:
  if (!yytrial)
#line 277 "asmparse.y"
{ PASM->AddTypeDef(yyvsp[-2].token,yyvsp[0].string); }
#line 6600 "asmparse.cpp.tab.c"
break;
case 49:
  if (!yytrial)
#line 278 "asmparse.y"
{ PASM->AddTypeDef(yyvsp[-2].token,yyvsp[0].string); }
#line 6606 "asmparse.cpp.tab.c"
break;
case 50:
  if (!yytrial)
#line 279 "asmparse.y"
{ yyvsp[-2].cad->tkOwner = 0; PASM->AddTypeDef(yyvsp[-2].cad,yyvsp[0].string); }
#line 6612 "asmparse.cpp.tab.c"
break;
case 51:
  if (!yytrial)
#line 280 "asmparse.y"
{ PASM->AddTypeDef(yyvsp[-2].cad,yyvsp[0].string); }
#line 6618 "asmparse.cpp.tab.c"
break;
case 52:
  if (!yytrial)
#line 285 "asmparse.y"
{ DefineVar(yyvsp[0].string, NULL); }
#line 6624 "asmparse.cpp.tab.c"
break;
case 53:
  if (!yytrial)
#line 286 "asmparse.y"
{ DefineVar(yyvsp[-1].string, yyvsp[0].binstr); }
#line 6630 "asmparse.cpp.tab.c"
break;
case 54:
  if (!yytrial)
#line 287 "asmparse.y"
{ UndefVar(yyvsp[0].string); }
#line 6636 "asmparse.cpp.tab.c"
break;
case 55:
  if (!yytrial)
#line 288 "asmparse.y"
{ SkipToken = !IsVarDefined(yyvsp[0].string);
                                                                                  IfEndif++;
                                                                                }
#line 6644 "asmparse.cpp.tab.c"
break;
case 56:
  if (!yytrial)
#line 291 "asmparse.y"
{ SkipToken = IsVarDefined(yyvsp[0].string);
                                                                                  IfEndif++;
                                                                                }
#line 6652 "asmparse.cpp.tab.c"
break;
case 57:
  if (!yytrial)
#line 294 "asmparse.y"
{ if(IfEndif == 1) SkipToken = !SkipToken;}
#line 6658 "asmparse.cpp.tab.c"
break;
case 58:
  if (!yytrial)
#line 295 "asmparse.y"
{ if(IfEndif == 0)
                                                                                    PASM->report->error("Unmatched #endif\n");
                                                                                  else IfEndif--;
                                                                                }
#line 6667 "asmparse.cpp.tab.c"
break;
case 59:
  if (!yytrial)
#line 299 "asmparse.y"
{ _ASSERTE(!"yylex should have dealt with this"); }
#line 6673 "asmparse.cpp.tab.c"
break;
case 60:
  if (!yytrial)
#line 300 "asmparse.y"
{ }
#line 6679 "asmparse.cpp.tab.c"
break;
case 61:
  if (!yytrial)
#line 304 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[0].token, NULL); }
#line 6685 "asmparse.cpp.tab.c"
break;
case 62:
  if (!yytrial)
#line 305 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[-2].token, yyvsp[0].binstr); }
#line 6691 "asmparse.cpp.tab.c"
break;
case 63:
  if (!yytrial)
#line 306 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[-4].token, yyvsp[-1].binstr); }
#line 6697 "asmparse.cpp.tab.c"
break;
case 64:
  if (!yytrial)
#line 307 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[-2].int32, yyvsp[-1].binstr); }
#line 6703 "asmparse.cpp.tab.c"
break;
case 65:
  if (!yytrial)
#line 310 "asmparse.y"
{ yyval.cad = new CustomDescr(yyvsp[-2].token, yyvsp[0].token, NULL); }
#line 6709 "asmparse.cpp.tab.c"
break;
case 66:
  if (!yytrial)
#line 311 "asmparse.y"
{ yyval.cad = new CustomDescr(yyvsp[-4].token, yyvsp[-2].token, yyvsp[0].binstr); }
#line 6715 "asmparse.cpp.tab.c"
break;
case 67:
  if (!yytrial)
#line 313 "asmparse.y"
{ yyval.cad = new CustomDescr(yyvsp[-6].token, yyvsp[-4].token, yyvsp[-1].binstr); }
#line 6721 "asmparse.cpp.tab.c"
break;
case 68:
  if (!yytrial)
#line 314 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yyvsp[-2].int32, yyvsp[-1].binstr); }
#line 6727 "asmparse.cpp.tab.c"
break;
case 69:
  if (!yytrial)
#line 317 "asmparse.y"
{ yyval.int32 = yyvsp[-2].token; bParsingByteArray = TRUE; }
#line 6733 "asmparse.cpp.tab.c"
break;
case 70:
  if (!yytrial)
#line 321 "asmparse.y"
{ PASM->m_pCustomDescrList = NULL;
                                                                                  PASM->m_tkCurrentCVOwner = yyvsp[-4].token;
                                                                                  yyval.int32 = yyvsp[-2].token; bParsingByteArray = TRUE; }
#line 6741 "asmparse.cpp.tab.c"
break;
case 71:
  if (!yytrial)
#line 326 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 6747 "asmparse.cpp.tab.c"
break;
case 72:
  if (!yytrial)
#line 329 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 6753 "asmparse.cpp.tab.c"
break;
case 73:
  if (!yytrial)
#line 330 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 6759 "asmparse.cpp.tab.c"
break;
case 74:
  if (!yytrial)
#line 334 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                                                  yyval.binstr->appendInt16(VAL16(nCustomBlobNVPairs));
                                                                                  yyval.binstr->append(yyvsp[0].binstr);
                                                                                  nCustomBlobNVPairs = 0; }
#line 6768 "asmparse.cpp.tab.c"
break;
case 75:
  if (!yytrial)
#line 340 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt16(VAL16(0x0001)); }
#line 6774 "asmparse.cpp.tab.c"
break;
case 76:
  if (!yytrial)
#line 341 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                                                  AppendFieldToCustomBlob(yyval.binstr,yyvsp[0].binstr); }
#line 6781 "asmparse.cpp.tab.c"
break;
case 77:
  if (!yytrial)
#line 343 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 6787 "asmparse.cpp.tab.c"
break;
case 78:
  if (!yytrial)
#line 346 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 6793 "asmparse.cpp.tab.c"
break;
case 79:
  if (!yytrial)
#line 348 "asmparse.y"
{ yyval.binstr = yyvsp[-5].binstr; yyval.binstr->appendInt8(yyvsp[-4].int32);
                                                                                  yyval.binstr->append(yyvsp[-3].binstr);
                                                                                  AppendStringWithLength(yyval.binstr,yyvsp[-2].string);
                                                                                  AppendFieldToCustomBlob(yyval.binstr,yyvsp[0].binstr);
                                                                                  nCustomBlobNVPairs++; }
#line 6803 "asmparse.cpp.tab.c"
break;
case 80:
  if (!yytrial)
#line 353 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 6809 "asmparse.cpp.tab.c"
break;
case 81:
  if (!yytrial)
#line 356 "asmparse.y"
{ yyval.int32 = SERIALIZATION_TYPE_FIELD; }
#line 6815 "asmparse.cpp.tab.c"
break;
case 82:
  if (!yytrial)
#line 357 "asmparse.y"
{ yyval.int32 = SERIALIZATION_TYPE_PROPERTY; }
#line 6821 "asmparse.cpp.tab.c"
break;
case 83:
  if (!yytrial)
#line 360 "asmparse.y"
{ if(yyvsp[0].cad->tkOwner && !yyvsp[0].cad->tkInterfacePair)
                                                                                    PASM->DefineCV(yyvsp[0].cad);
                                                                                  else if(PASM->m_pCustomDescrList)
                                                                                    PASM->m_pCustomDescrList->PUSH(yyvsp[0].cad); }
#line 6830 "asmparse.cpp.tab.c"
break;
case 84:
  if (!yytrial)
#line 364 "asmparse.y"
{ PASM->DefineCV(yyvsp[0].cad); }
#line 6836 "asmparse.cpp.tab.c"
break;
case 85:
  if (!yytrial)
#line 365 "asmparse.y"
{ CustomDescr* pNew = new CustomDescr(yyvsp[0].tdd->m_pCA);
                                                                                  if(pNew->tkOwner == 0) pNew->tkOwner = PASM->m_tkCurrentCVOwner;
                                                                                  if(pNew->tkOwner)
                                                                                    PASM->DefineCV(pNew);
                                                                                  else if(PASM->m_pCustomDescrList)
                                                                                    PASM->m_pCustomDescrList->PUSH(pNew); }
#line 6847 "asmparse.cpp.tab.c"
break;
case 86:
  if (!yytrial)
#line 373 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 6853 "asmparse.cpp.tab.c"
break;
case 87:
  if (!yytrial)
#line 374 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE); }
#line 6859 "asmparse.cpp.tab.c"
break;
case 88:
  if (!yytrial)
#line 375 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TAGGED_OBJECT); }
#line 6865 "asmparse.cpp.tab.c"
break;
case 89:
  if (!yytrial)
#line 376 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                AppendStringWithLength(yyval.binstr,yyvsp[0].string); }
#line 6872 "asmparse.cpp.tab.c"
break;
case 90:
  if (!yytrial)
#line 378 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yyvsp[0].token)); }
#line 6879 "asmparse.cpp.tab.c"
break;
case 91:
  if (!yytrial)
#line 380 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 6885 "asmparse.cpp.tab.c"
break;
case 92:
  if (!yytrial)
#line 385 "asmparse.y"
{ PASMM->SetModuleName(NULL); PASM->m_tkCurrentCVOwner=1; }
#line 6891 "asmparse.cpp.tab.c"
break;
case 93:
  if (!yytrial)
#line 386 "asmparse.y"
{ PASMM->SetModuleName(yyvsp[0].string); PASM->m_tkCurrentCVOwner=1; }
#line 6897 "asmparse.cpp.tab.c"
break;
case 94:
  if (!yytrial)
#line 387 "asmparse.y"
{ BinStr* pbs = new BinStr();
                                                                                  unsigned L = (unsigned)strlen(yyvsp[0].string);
                                                                                  memcpy((char*)(pbs->getBuff(L)),yyvsp[0].string,L);
                                                                                  PASM->EmitImport(pbs); delete pbs;}
#line 6906 "asmparse.cpp.tab.c"
break;
case 95:
  if (!yytrial)
#line 394 "asmparse.y"
{ /*PASM->SetDataSection(); PASM->EmitDataLabel($7);*/
                                                                                  PASM->m_VTFList.PUSH(new VTFEntry((USHORT)yyvsp[-4].int32, (USHORT)yyvsp[-2].int32, yyvsp[0].string)); }
#line 6913 "asmparse.cpp.tab.c"
break;
case 96:
  if (!yytrial)
#line 398 "asmparse.y"
{ yyval.int32 = 0; }
#line 6919 "asmparse.cpp.tab.c"
break;
case 97:
  if (!yytrial)
#line 399 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_32BIT; }
#line 6925 "asmparse.cpp.tab.c"
break;
case 98:
  if (!yytrial)
#line 400 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_64BIT; }
#line 6931 "asmparse.cpp.tab.c"
break;
case 99:
  if (!yytrial)
#line 401 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_FROM_UNMANAGED; }
#line 6937 "asmparse.cpp.tab.c"
break;
case 100:
  if (!yytrial)
#line 402 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_CALL_MOST_DERIVED; }
#line 6943 "asmparse.cpp.tab.c"
break;
case 101:
  if (!yytrial)
#line 403 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN; }
#line 6949 "asmparse.cpp.tab.c"
break;
case 102:
  if (!yytrial)
#line 406 "asmparse.y"
{ PASM->m_pVTable = yyvsp[-1].binstr; }
#line 6955 "asmparse.cpp.tab.c"
break;
case 103:
  if (!yytrial)
#line 409 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 6961 "asmparse.cpp.tab.c"
break;
case 104:
  if (!yytrial)
#line 413 "asmparse.y"
{ PASM->StartNameSpace(yyvsp[0].string); }
#line 6967 "asmparse.cpp.tab.c"
break;
case 105:
  if (!yytrial)
#line 416 "asmparse.y"
{ newclass = TRUE; }
#line 6973 "asmparse.cpp.tab.c"
break;
case 106:
  if (!yytrial)
#line 419 "asmparse.y"
{ if(yyvsp[0].typarlist) FixupConstraints();
                                                                                  PASM->StartClass(yyvsp[-1].string, yyvsp[-2].classAttr, yyvsp[0].typarlist);
                                                                                  TyParFixupList.RESET(false);
                                                                                  newclass = FALSE;
                                                                                }
#line 6983 "asmparse.cpp.tab.c"
break;
case 107:
  if (!yytrial)
#line 425 "asmparse.y"
{ PASM->AddClass(); }
#line 6989 "asmparse.cpp.tab.c"
break;
case 108:
  if (!yytrial)
#line 428 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) 0; }
#line 6995 "asmparse.cpp.tab.c"
break;
case 109:
  if (!yytrial)
#line 429 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdVisibilityMask) | tdPublic); }
#line 7001 "asmparse.cpp.tab.c"
break;
case 110:
  if (!yytrial)
#line 430 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdVisibilityMask) | tdNotPublic); }
#line 7007 "asmparse.cpp.tab.c"
break;
case 111:
  if (!yytrial)
#line 431 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | 0x80000000 | tdSealed); }
#line 7013 "asmparse.cpp.tab.c"
break;
case 112:
  if (!yytrial)
#line 432 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | 0x40000000); }
#line 7019 "asmparse.cpp.tab.c"
break;
case 113:
  if (!yytrial)
#line 433 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdInterface | tdAbstract); }
#line 7025 "asmparse.cpp.tab.c"
break;
case 114:
  if (!yytrial)
#line 434 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdSealed); }
#line 7031 "asmparse.cpp.tab.c"
break;
case 115:
  if (!yytrial)
#line 435 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdAbstract); }
#line 7037 "asmparse.cpp.tab.c"
break;
case 116:
  if (!yytrial)
#line 436 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdLayoutMask) | tdAutoLayout); }
#line 7043 "asmparse.cpp.tab.c"
break;
case 117:
  if (!yytrial)
#line 437 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdLayoutMask) | tdSequentialLayout); }
#line 7049 "asmparse.cpp.tab.c"
break;
case 118:
  if (!yytrial)
#line 438 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdLayoutMask) | tdExplicitLayout); }
#line 7055 "asmparse.cpp.tab.c"
break;
case 119:
  if (!yytrial)
#line 439 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdStringFormatMask) | tdAnsiClass); }
#line 7061 "asmparse.cpp.tab.c"
break;
case 120:
  if (!yytrial)
#line 440 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdStringFormatMask) | tdUnicodeClass); }
#line 7067 "asmparse.cpp.tab.c"
break;
case 121:
  if (!yytrial)
#line 441 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-1].classAttr & ~tdStringFormatMask) | tdAutoClass); }
#line 7073 "asmparse.cpp.tab.c"
break;
case 122:
  if (!yytrial)
#line 442 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdImport); }
#line 7079 "asmparse.cpp.tab.c"
break;
case 123:
  if (!yytrial)
#line 443 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdSerializable); }
#line 7085 "asmparse.cpp.tab.c"
break;
case 124:
  if (!yytrial)
#line 444 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdWindowsRuntime); }
#line 7091 "asmparse.cpp.tab.c"
break;
case 125:
  if (!yytrial)
#line 445 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedPublic); }
#line 7097 "asmparse.cpp.tab.c"
break;
case 126:
  if (!yytrial)
#line 446 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedPrivate); }
#line 7103 "asmparse.cpp.tab.c"
break;
case 127:
  if (!yytrial)
#line 447 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedFamily); }
#line 7109 "asmparse.cpp.tab.c"
break;
case 128:
  if (!yytrial)
#line 448 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedAssembly); }
#line 7115 "asmparse.cpp.tab.c"
break;
case 129:
  if (!yytrial)
#line 449 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedFamANDAssem); }
#line 7121 "asmparse.cpp.tab.c"
break;
case 130:
  if (!yytrial)
#line 450 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yyvsp[-2].classAttr & ~tdVisibilityMask) | tdNestedFamORAssem); }
#line 7127 "asmparse.cpp.tab.c"
break;
case 131:
  if (!yytrial)
#line 451 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdBeforeFieldInit); }
#line 7133 "asmparse.cpp.tab.c"
break;
case 132:
  if (!yytrial)
#line 452 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr | tdSpecialName); }
#line 7139 "asmparse.cpp.tab.c"
break;
case 133:
  if (!yytrial)
#line 453 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].classAttr); }
#line 7145 "asmparse.cpp.tab.c"
break;
case 134:
  if (!yytrial)
#line 454 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yyvsp[-1].int32); }
#line 7151 "asmparse.cpp.tab.c"
break;
case 136:
  if (!yytrial)
#line 458 "asmparse.y"
{ PASM->m_crExtends = yyvsp[0].token; }
#line 7157 "asmparse.cpp.tab.c"
break;
case 141:
  if (!yytrial)
#line 469 "asmparse.y"
{ PASM->AddToImplList(yyvsp[0].token); }
#line 7163 "asmparse.cpp.tab.c"
break;
case 142:
  if (!yytrial)
#line 470 "asmparse.y"
{ PASM->AddToImplList(yyvsp[0].token); }
#line 7169 "asmparse.cpp.tab.c"
break;
case 143:
  if (!yytrial)
#line 474 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 7175 "asmparse.cpp.tab.c"
break;
case 144:
  if (!yytrial)
#line 475 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 7181 "asmparse.cpp.tab.c"
break;
case 145:
  if (!yytrial)
#line 478 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yyvsp[0].token); }
#line 7187 "asmparse.cpp.tab.c"
break;
case 146:
  if (!yytrial)
#line 479 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->appendInt32(yyvsp[0].token); }
#line 7193 "asmparse.cpp.tab.c"
break;
case 147:
  if (!yytrial)
#line 482 "asmparse.y"
{ yyval.typarlist = NULL; PASM->m_TyParList = NULL;}
#line 7199 "asmparse.cpp.tab.c"
break;
case 148:
  if (!yytrial)
#line 483 "asmparse.y"
{ yyval.typarlist = yyvsp[-1].typarlist;   PASM->m_TyParList = yyvsp[-1].typarlist;}
#line 7205 "asmparse.cpp.tab.c"
break;
case 149:
  if (!yytrial)
#line 486 "asmparse.y"
{ yyval.int32 = gpCovariant; }
#line 7211 "asmparse.cpp.tab.c"
break;
case 150:
  if (!yytrial)
#line 487 "asmparse.y"
{ yyval.int32 = gpContravariant; }
#line 7217 "asmparse.cpp.tab.c"
break;
case 151:
  if (!yytrial)
#line 488 "asmparse.y"
{ yyval.int32 = gpReferenceTypeConstraint; }
#line 7223 "asmparse.cpp.tab.c"
break;
case 152:
  if (!yytrial)
#line 489 "asmparse.y"
{ yyval.int32 = gpNotNullableValueTypeConstraint; }
#line 7229 "asmparse.cpp.tab.c"
break;
case 153:
  if (!yytrial)
#line 490 "asmparse.y"
{ yyval.int32 = gpAcceptByRefLike; }
#line 7235 "asmparse.cpp.tab.c"
break;
case 154:
  if (!yytrial)
#line 491 "asmparse.y"
{ yyval.int32 = gpDefaultConstructorConstraint; }
#line 7241 "asmparse.cpp.tab.c"
break;
case 155:
  if (!yytrial)
#line 492 "asmparse.y"
{ yyval.int32 = (CorGenericParamAttr)yyvsp[-1].int32; }
#line 7247 "asmparse.cpp.tab.c"
break;
case 156:
  if (!yytrial)
#line 495 "asmparse.y"
{ yyval.int32 = 0; }
#line 7253 "asmparse.cpp.tab.c"
break;
case 157:
  if (!yytrial)
#line 496 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | yyvsp[0].int32; }
#line 7259 "asmparse.cpp.tab.c"
break;
case 158:
  if (!yytrial)
#line 499 "asmparse.y"
{ yyval.int32 = (CorGenericParamAttr)yyvsp[-1].int32; }
#line 7265 "asmparse.cpp.tab.c"
break;
case 159:
  if (!yytrial)
#line 502 "asmparse.y"
{ yyval.int32 = 0; }
#line 7271 "asmparse.cpp.tab.c"
break;
case 160:
  if (!yytrial)
#line 503 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | yyvsp[0].int32; }
#line 7277 "asmparse.cpp.tab.c"
break;
case 161:
  if (!yytrial)
#line 506 "asmparse.y"
{yyval.typarlist = new TyParList(yyvsp[-3].int32, yyvsp[-2].token, NULL, yyvsp[-1].string, yyvsp[0].typarlist); }
#line 7283 "asmparse.cpp.tab.c"
break;
case 162:
  if (!yytrial)
#line 507 "asmparse.y"
{yyval.typarlist = new TyParList(yyvsp[-3].int32, yyvsp[-2].binstr, yyvsp[-1].string, yyvsp[0].typarlist);}
#line 7289 "asmparse.cpp.tab.c"
break;
case 163:
  if (!yytrial)
#line 508 "asmparse.y"
{yyval.typarlist = new TyParList(yyvsp[-2].int32, NULL, yyvsp[-1].string, yyvsp[0].typarlist);}
#line 7295 "asmparse.cpp.tab.c"
break;
case 164:
  if (!yytrial)
#line 511 "asmparse.y"
{ yyval.typarlist = NULL; }
#line 7301 "asmparse.cpp.tab.c"
break;
case 165:
  if (!yytrial)
#line 512 "asmparse.y"
{ yyval.typarlist = yyvsp[0].typarlist; }
#line 7307 "asmparse.cpp.tab.c"
break;
case 166:
  if (!yytrial)
#line 515 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 7313 "asmparse.cpp.tab.c"
break;
case 167:
  if (!yytrial)
#line 518 "asmparse.y"
{ yyval.int32= 0; }
#line 7319 "asmparse.cpp.tab.c"
break;
case 168:
  if (!yytrial)
#line 519 "asmparse.y"
{ yyval.int32 = yyvsp[0].int32; }
#line 7325 "asmparse.cpp.tab.c"
break;
case 169:
  if (!yytrial)
#line 522 "asmparse.y"
{ yyval.int32 = yyvsp[-2].int32; }
#line 7331 "asmparse.cpp.tab.c"
break;
case 170:
  if (!yytrial)
#line 526 "asmparse.y"
{ if(PASM->m_pCurMethod->m_ulLines[1] ==0)
                                                              {  PASM->m_pCurMethod->m_ulLines[1] = PASM->m_ulCurLine;
                                                                 PASM->m_pCurMethod->m_ulColumns[1]=PASM->m_ulCurColumn;}
                                                              PASM->EndMethod(); }
#line 7340 "asmparse.cpp.tab.c"
break;
case 171:
  if (!yytrial)
#line 530 "asmparse.y"
{ PASM->EndClass(); }
#line 7346 "asmparse.cpp.tab.c"
break;
case 172:
  if (!yytrial)
#line 531 "asmparse.y"
{ PASM->EndEvent(); }
#line 7352 "asmparse.cpp.tab.c"
break;
case 173:
  if (!yytrial)
#line 532 "asmparse.y"
{ PASM->EndProp(); }
#line 7358 "asmparse.cpp.tab.c"
break;
case 179:
  if (!yytrial)
#line 538 "asmparse.y"
{ PASM->m_pCurClass->m_ulSize = yyvsp[0].int32; }
#line 7364 "asmparse.cpp.tab.c"
break;
case 180:
  if (!yytrial)
#line 539 "asmparse.y"
{ PASM->m_pCurClass->m_ulPack = yyvsp[0].int32; }
#line 7370 "asmparse.cpp.tab.c"
break;
case 181:
  if (!yytrial)
#line 540 "asmparse.y"
{ PASMM->EndComType(); }
#line 7376 "asmparse.cpp.tab.c"
break;
case 182:
  if (!yytrial)
#line 542 "asmparse.y"
{ BinStr *sig1 = parser->MakeSig(yyvsp[-7].int32, yyvsp[-6].binstr, yyvsp[-1].binstr);
                                                                  BinStr *sig2 = new BinStr(); sig2->append(sig1);
                                                                  PASM->AddMethodImpl(yyvsp[-11].token,yyvsp[-9].string,sig1,yyvsp[-5].token,yyvsp[-3].string,sig2);
                                                                  PASM->ResetArgNameList();
                                                                }
#line 7386 "asmparse.cpp.tab.c"
break;
case 183:
  if (!yytrial)
#line 548 "asmparse.y"
{ PASM->AddMethodImpl(yyvsp[-17].token,yyvsp[-15].string,
                                                                      (yyvsp[-14].int32==0 ? parser->MakeSig(yyvsp[-19].int32,yyvsp[-18].binstr,yyvsp[-12].binstr) :
                                                                      parser->MakeSig(yyvsp[-19].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yyvsp[-18].binstr,yyvsp[-12].binstr,yyvsp[-14].int32)),
                                                                      yyvsp[-6].token,yyvsp[-4].string,
                                                                      (yyvsp[-3].int32==0 ? parser->MakeSig(yyvsp[-8].int32,yyvsp[-7].binstr,yyvsp[-1].binstr) :
                                                                      parser->MakeSig(yyvsp[-8].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yyvsp[-7].binstr,yyvsp[-1].binstr,yyvsp[-3].int32)));
                                                                   PASM->ResetArgNameList();
                                                                 }
#line 7399 "asmparse.cpp.tab.c"
break;
case 186:
  if (!yytrial)
#line 558 "asmparse.y"
{ if((yyvsp[-1].int32 > 0) && (yyvsp[-1].int32 <= (int)PASM->m_pCurClass->m_NumTyPars))
                                                                PASM->m_pCustomDescrList = PASM->m_pCurClass->m_TyPars[yyvsp[-1].int32-1].CAList();
                                                              else
                                                                PASM->report->error("Type parameter index out of range\n");
                                                            }
#line 7409 "asmparse.cpp.tab.c"
break;
case 187:
  if (!yytrial)
#line 563 "asmparse.y"
{ int n = PASM->m_pCurClass->FindTyPar(yyvsp[0].string);
                                                              if(n >= 0)
                                                                PASM->m_pCustomDescrList = PASM->m_pCurClass->m_TyPars[n].CAList();
                                                              else
                                                                PASM->report->error("Type parameter '%s' undefined\n",yyvsp[0].string);
                                                            }
#line 7420 "asmparse.cpp.tab.c"
break;
case 188:
  if (!yytrial)
#line 569 "asmparse.y"
{ PASM->AddGenericParamConstraint(yyvsp[-3].int32, 0, yyvsp[0].token); }
#line 7426 "asmparse.cpp.tab.c"
break;
case 189:
  if (!yytrial)
#line 570 "asmparse.y"
{ PASM->AddGenericParamConstraint(0, yyvsp[-2].string, yyvsp[0].token); }
#line 7432 "asmparse.cpp.tab.c"
break;
case 190:
  if (!yytrial)
#line 571 "asmparse.y"
{ yyvsp[0].cad->tkInterfacePair = yyvsp[-1].token;
                                                                        if(PASM->m_pCustomDescrList)
                                                                            PASM->m_pCustomDescrList->PUSH(yyvsp[0].cad);
                                                                      }
#line 7441 "asmparse.cpp.tab.c"
break;
case 191:
  if (!yytrial)
#line 579 "asmparse.y"
{ yyvsp[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                              PASM->AddField(yyvsp[-2].string, yyvsp[-3].binstr, yyvsp[-4].fieldAttr, yyvsp[-1].string, yyvsp[0].binstr, yyvsp[-5].int32); }
#line 7448 "asmparse.cpp.tab.c"
break;
case 192:
  if (!yytrial)
#line 583 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) 0; }
#line 7454 "asmparse.cpp.tab.c"
break;
case 193:
  if (!yytrial)
#line 584 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdStatic); }
#line 7460 "asmparse.cpp.tab.c"
break;
case 194:
  if (!yytrial)
#line 585 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdPublic); }
#line 7466 "asmparse.cpp.tab.c"
break;
case 195:
  if (!yytrial)
#line 586 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdPrivate); }
#line 7472 "asmparse.cpp.tab.c"
break;
case 196:
  if (!yytrial)
#line 587 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdFamily); }
#line 7478 "asmparse.cpp.tab.c"
break;
case 197:
  if (!yytrial)
#line 588 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdInitOnly); }
#line 7484 "asmparse.cpp.tab.c"
break;
case 198:
  if (!yytrial)
#line 589 "asmparse.y"
{ yyval.fieldAttr = yyvsp[-1].fieldAttr; }
#line 7490 "asmparse.cpp.tab.c"
break;
case 199:
  if (!yytrial)
#line 590 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdSpecialName); }
#line 7496 "asmparse.cpp.tab.c"
break;
case 200:
  if (!yytrial)
#line 603 "asmparse.y"
{ PASM->m_pMarshal = yyvsp[-1].binstr; }
#line 7502 "asmparse.cpp.tab.c"
break;
case 201:
  if (!yytrial)
#line 604 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdAssembly); }
#line 7508 "asmparse.cpp.tab.c"
break;
case 202:
  if (!yytrial)
#line 605 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdFamANDAssem); }
#line 7514 "asmparse.cpp.tab.c"
break;
case 203:
  if (!yytrial)
#line 606 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdFamORAssem); }
#line 7520 "asmparse.cpp.tab.c"
break;
case 204:
  if (!yytrial)
#line 607 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yyvsp[-1].fieldAttr & ~mdMemberAccessMask) | fdPrivateScope); }
#line 7526 "asmparse.cpp.tab.c"
break;
case 205:
  if (!yytrial)
#line 608 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdLiteral); }
#line 7532 "asmparse.cpp.tab.c"
break;
case 206:
  if (!yytrial)
#line 609 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].fieldAttr | fdNotSerialized); }
#line 7538 "asmparse.cpp.tab.c"
break;
case 207:
  if (!yytrial)
#line 610 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yyvsp[-1].int32); }
#line 7544 "asmparse.cpp.tab.c"
break;
case 208:
  if (!yytrial)
#line 613 "asmparse.y"
{ yyval.string = 0; }
#line 7550 "asmparse.cpp.tab.c"
break;
case 209:
  if (!yytrial)
#line 614 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 7556 "asmparse.cpp.tab.c"
break;
case 210:
  if (!yytrial)
#line 617 "asmparse.y"
{ yyval.binstr = NULL; }
#line 7562 "asmparse.cpp.tab.c"
break;
case 211:
  if (!yytrial)
#line 618 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 7568 "asmparse.cpp.tab.c"
break;
case 212:
  if (!yytrial)
#line 621 "asmparse.y"
{ yyval.int32 = 0xFFFFFFFF; }
#line 7574 "asmparse.cpp.tab.c"
break;
case 213:
  if (!yytrial)
#line 622 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32; }
#line 7580 "asmparse.cpp.tab.c"
break;
case 214:
  if (!yytrial)
#line 627 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if (yyvsp[-3].binstr == NULL)
                                                               {
                                                                 if((iCallConv)&&((yyvsp[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 yyval.token = PASM->MakeMemberRef(yyvsp[-6].token, yyvsp[-4].string, parser->MakeSig(yyvsp[-8].int32|iCallConv, yyvsp[-7].binstr, yyvsp[-1].binstr));
                                                               }
                                                               else
                                                               {
                                                                 mdToken mr;
                                                                 if((iCallConv)&&((yyvsp[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 mr = PASM->MakeMemberRef(yyvsp[-6].token, yyvsp[-4].string,
                                                                   parser->MakeSig(yyvsp[-8].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yyvsp[-7].binstr, yyvsp[-1].binstr, corCountArgs(yyvsp[-3].binstr)));
                                                                 yyval.token = PASM->MakeMethodSpec(mr,
                                                                   parser->MakeSig(IMAGE_CEE_CS_CALLCONV_INSTANTIATION, 0, yyvsp[-3].binstr));
                                                               }
                                                             }
#line 7601 "asmparse.cpp.tab.c"
break;
case 215:
  if (!yytrial)
#line 644 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if((iCallConv)&&((yyvsp[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                               yyval.token = PASM->MakeMemberRef(yyvsp[-6].token, yyvsp[-4].string,
                                                                 parser->MakeSig(yyvsp[-8].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yyvsp[-7].binstr, yyvsp[-1].binstr, yyvsp[-3].int32));
                                                             }
#line 7611 "asmparse.cpp.tab.c"
break;
case 216:
  if (!yytrial)
#line 650 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if (yyvsp[-3].binstr == NULL)
                                                               {
                                                                 if((iCallConv)&&((yyvsp[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 yyval.token = PASM->MakeMemberRef(mdTokenNil, yyvsp[-4].string, parser->MakeSig(yyvsp[-6].int32|iCallConv, yyvsp[-5].binstr, yyvsp[-1].binstr));
                                                               }
                                                               else
                                                               {
                                                                 mdToken mr;
                                                                 if((iCallConv)&&((yyvsp[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 mr = PASM->MakeMemberRef(mdTokenNil, yyvsp[-4].string, parser->MakeSig(yyvsp[-6].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yyvsp[-5].binstr, yyvsp[-1].binstr, corCountArgs(yyvsp[-3].binstr)));
                                                                 yyval.token = PASM->MakeMethodSpec(mr,
                                                                   parser->MakeSig(IMAGE_CEE_CS_CALLCONV_INSTANTIATION, 0, yyvsp[-3].binstr));
                                                               }
                                                             }
#line 7631 "asmparse.cpp.tab.c"
break;
case 217:
  if (!yytrial)
#line 666 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if((iCallConv)&&((yyvsp[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                               yyval.token = PASM->MakeMemberRef(mdTokenNil, yyvsp[-4].string, parser->MakeSig(yyvsp[-6].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yyvsp[-5].binstr, yyvsp[-1].binstr, yyvsp[-3].int32));
                                                             }
#line 7640 "asmparse.cpp.tab.c"
break;
case 218:
  if (!yytrial)
#line 670 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 7646 "asmparse.cpp.tab.c"
break;
case 219:
  if (!yytrial)
#line 671 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec; }
#line 7652 "asmparse.cpp.tab.c"
break;
case 220:
  if (!yytrial)
#line 672 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec; }
#line 7658 "asmparse.cpp.tab.c"
break;
case 221:
  if (!yytrial)
#line 675 "asmparse.y"
{ yyval.int32 = (yyvsp[0].int32 | IMAGE_CEE_CS_CALLCONV_HASTHIS); }
#line 7664 "asmparse.cpp.tab.c"
break;
case 222:
  if (!yytrial)
#line 676 "asmparse.y"
{ yyval.int32 = (yyvsp[0].int32 | IMAGE_CEE_CS_CALLCONV_EXPLICITTHIS); }
#line 7670 "asmparse.cpp.tab.c"
break;
case 223:
  if (!yytrial)
#line 677 "asmparse.y"
{ yyval.int32 = yyvsp[0].int32; }
#line 7676 "asmparse.cpp.tab.c"
break;
case 224:
  if (!yytrial)
#line 678 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32; }
#line 7682 "asmparse.cpp.tab.c"
break;
case 225:
  if (!yytrial)
#line 681 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_DEFAULT; }
#line 7688 "asmparse.cpp.tab.c"
break;
case 226:
  if (!yytrial)
#line 682 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_DEFAULT; }
#line 7694 "asmparse.cpp.tab.c"
break;
case 227:
  if (!yytrial)
#line 683 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_VARARG; }
#line 7700 "asmparse.cpp.tab.c"
break;
case 228:
  if (!yytrial)
#line 684 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_C; }
#line 7706 "asmparse.cpp.tab.c"
break;
case 229:
  if (!yytrial)
#line 685 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_STDCALL; }
#line 7712 "asmparse.cpp.tab.c"
break;
case 230:
  if (!yytrial)
#line 686 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_THISCALL; }
#line 7718 "asmparse.cpp.tab.c"
break;
case 231:
  if (!yytrial)
#line 687 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_FASTCALL; }
#line 7724 "asmparse.cpp.tab.c"
break;
case 232:
  if (!yytrial)
#line 688 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_UNMANAGED; }
#line 7730 "asmparse.cpp.tab.c"
break;
case 233:
  if (!yytrial)
#line 691 "asmparse.y"
{ yyval.token = yyvsp[-1].int32; }
#line 7736 "asmparse.cpp.tab.c"
break;
case 234:
  if (!yytrial)
#line 694 "asmparse.y"
{ yyval.token = yyvsp[0].token;
                                                               PASM->delArgNameList(PASM->m_firstArgName);
                                                               PASM->m_firstArgName = parser->m_ANSFirst.POP();
                                                               PASM->m_lastArgName = parser->m_ANSLast.POP();
                                                               PASM->SetMemberRefFixup(yyvsp[0].token,iOpcodeLen); }
#line 7746 "asmparse.cpp.tab.c"
break;
case 235:
  if (!yytrial)
#line 700 "asmparse.y"
{ yyvsp[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               yyval.token = PASM->MakeMemberRef(yyvsp[-2].token, yyvsp[0].string, yyvsp[-3].binstr);
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7754 "asmparse.cpp.tab.c"
break;
case 236:
  if (!yytrial)
#line 704 "asmparse.y"
{ yyvsp[-1].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               yyval.token = PASM->MakeMemberRef(NULL, yyvsp[0].string, yyvsp[-1].binstr);
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7762 "asmparse.cpp.tab.c"
break;
case 237:
  if (!yytrial)
#line 707 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7769 "asmparse.cpp.tab.c"
break;
case 238:
  if (!yytrial)
#line 709 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7776 "asmparse.cpp.tab.c"
break;
case 239:
  if (!yytrial)
#line 711 "asmparse.y"
{ yyval.token = yyvsp[0].token;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 7783 "asmparse.cpp.tab.c"
break;
case 240:
  if (!yytrial)
#line 716 "asmparse.y"
{ PASM->ResetEvent(yyvsp[0].string, yyvsp[-1].token, yyvsp[-2].eventAttr); }
#line 7789 "asmparse.cpp.tab.c"
break;
case 241:
  if (!yytrial)
#line 717 "asmparse.y"
{ PASM->ResetEvent(yyvsp[0].string, mdTypeRefNil, yyvsp[-1].eventAttr); }
#line 7795 "asmparse.cpp.tab.c"
break;
case 242:
  if (!yytrial)
#line 721 "asmparse.y"
{ yyval.eventAttr = (CorEventAttr) 0; }
#line 7801 "asmparse.cpp.tab.c"
break;
case 243:
  if (!yytrial)
#line 722 "asmparse.y"
{ yyval.eventAttr = yyvsp[-1].eventAttr; }
#line 7807 "asmparse.cpp.tab.c"
break;
case 244:
  if (!yytrial)
#line 723 "asmparse.y"
{ yyval.eventAttr = (CorEventAttr) (yyvsp[-1].eventAttr | evSpecialName); }
#line 7813 "asmparse.cpp.tab.c"
break;
case 247:
  if (!yytrial)
#line 730 "asmparse.y"
{ PASM->SetEventMethod(0, yyvsp[0].token); }
#line 7819 "asmparse.cpp.tab.c"
break;
case 248:
  if (!yytrial)
#line 731 "asmparse.y"
{ PASM->SetEventMethod(1, yyvsp[0].token); }
#line 7825 "asmparse.cpp.tab.c"
break;
case 249:
  if (!yytrial)
#line 732 "asmparse.y"
{ PASM->SetEventMethod(2, yyvsp[0].token); }
#line 7831 "asmparse.cpp.tab.c"
break;
case 250:
  if (!yytrial)
#line 733 "asmparse.y"
{ PASM->SetEventMethod(3, yyvsp[0].token); }
#line 7837 "asmparse.cpp.tab.c"
break;
case 255:
  if (!yytrial)
#line 742 "asmparse.y"
{ PASM->ResetProp(yyvsp[-4].string,
                                                              parser->MakeSig((IMAGE_CEE_CS_CALLCONV_PROPERTY |
                                                              (yyvsp[-6].int32 & IMAGE_CEE_CS_CALLCONV_HASTHIS)),yyvsp[-5].binstr,yyvsp[-2].binstr), yyvsp[-7].propAttr, yyvsp[0].binstr);}
#line 7845 "asmparse.cpp.tab.c"
break;
case 256:
  if (!yytrial)
#line 747 "asmparse.y"
{ yyval.propAttr = (CorPropertyAttr) 0; }
#line 7851 "asmparse.cpp.tab.c"
break;
case 257:
  if (!yytrial)
#line 748 "asmparse.y"
{ yyval.propAttr = yyvsp[-1].propAttr; }
#line 7857 "asmparse.cpp.tab.c"
break;
case 258:
  if (!yytrial)
#line 749 "asmparse.y"
{ yyval.propAttr = (CorPropertyAttr) (yyvsp[-1].propAttr | prSpecialName); }
#line 7863 "asmparse.cpp.tab.c"
break;
case 261:
  if (!yytrial)
#line 757 "asmparse.y"
{ PASM->SetPropMethod(0, yyvsp[0].token); }
#line 7869 "asmparse.cpp.tab.c"
break;
case 262:
  if (!yytrial)
#line 758 "asmparse.y"
{ PASM->SetPropMethod(1, yyvsp[0].token); }
#line 7875 "asmparse.cpp.tab.c"
break;
case 263:
  if (!yytrial)
#line 759 "asmparse.y"
{ PASM->SetPropMethod(2, yyvsp[0].token); }
#line 7881 "asmparse.cpp.tab.c"
break;
case 268:
  if (!yytrial)
#line 767 "asmparse.y"
{ PASM->ResetForNextMethod();
                                                              uMethodBeginLine = PASM->m_ulCurLine;
                                                              uMethodBeginColumn=PASM->m_ulCurColumn;
                                                            }
#line 7890 "asmparse.cpp.tab.c"
break;
case 269:
  if (!yytrial)
#line 773 "asmparse.y"
{ yyval.binstr = NULL; }
#line 7896 "asmparse.cpp.tab.c"
break;
case 270:
  if (!yytrial)
#line 774 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 7902 "asmparse.cpp.tab.c"
break;
case 271:
  if (!yytrial)
#line 777 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 7908 "asmparse.cpp.tab.c"
break;
case 272:
  if (!yytrial)
#line 778 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 7914 "asmparse.cpp.tab.c"
break;
case 273:
  if (!yytrial)
#line 781 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 7920 "asmparse.cpp.tab.c"
break;
case 274:
  if (!yytrial)
#line 785 "asmparse.y"
{ BinStr* sig;
                                                              if (yyvsp[-5].typarlist == NULL) sig = parser->MakeSig(yyvsp[-10].int32, yyvsp[-8].binstr, yyvsp[-3].binstr);
                                                              else {
                                                               FixupTyPars(yyvsp[-8].binstr);
                                                               sig = parser->MakeSig(yyvsp[-10].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC, yyvsp[-8].binstr, yyvsp[-3].binstr, yyvsp[-5].typarlist->Count());
                                                               FixupConstraints();
                                                              }
                                                              PASM->StartMethod(yyvsp[-6].string, sig, yyvsp[-11].methAttr, yyvsp[-7].binstr, yyvsp[-9].int32, yyvsp[-5].typarlist);
                                                              TyParFixupList.RESET(false);
                                                              PASM->SetImplAttr((USHORT)yyvsp[-1].implAttr);
                                                              PASM->m_pCurMethod->m_ulLines[0] = uMethodBeginLine;
                                                              PASM->m_pCurMethod->m_ulColumns[0]=uMethodBeginColumn;
                                                            }
#line 7938 "asmparse.cpp.tab.c"
break;
case 275:
  if (!yytrial)
#line 800 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) 0; }
#line 7944 "asmparse.cpp.tab.c"
break;
case 276:
  if (!yytrial)
#line 801 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdStatic); }
#line 7950 "asmparse.cpp.tab.c"
break;
case 277:
  if (!yytrial)
#line 802 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdPublic); }
#line 7956 "asmparse.cpp.tab.c"
break;
case 278:
  if (!yytrial)
#line 803 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdPrivate); }
#line 7962 "asmparse.cpp.tab.c"
break;
case 279:
  if (!yytrial)
#line 804 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdFamily); }
#line 7968 "asmparse.cpp.tab.c"
break;
case 280:
  if (!yytrial)
#line 805 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdFinal); }
#line 7974 "asmparse.cpp.tab.c"
break;
case 281:
  if (!yytrial)
#line 806 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdSpecialName); }
#line 7980 "asmparse.cpp.tab.c"
break;
case 282:
  if (!yytrial)
#line 807 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdVirtual); }
#line 7986 "asmparse.cpp.tab.c"
break;
case 283:
  if (!yytrial)
#line 808 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdCheckAccessOnOverride); }
#line 7992 "asmparse.cpp.tab.c"
break;
case 284:
  if (!yytrial)
#line 809 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdAbstract); }
#line 7998 "asmparse.cpp.tab.c"
break;
case 285:
  if (!yytrial)
#line 810 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdAssem); }
#line 8004 "asmparse.cpp.tab.c"
break;
case 286:
  if (!yytrial)
#line 811 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdFamANDAssem); }
#line 8010 "asmparse.cpp.tab.c"
break;
case 287:
  if (!yytrial)
#line 812 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdFamORAssem); }
#line 8016 "asmparse.cpp.tab.c"
break;
case 288:
  if (!yytrial)
#line 813 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yyvsp[-1].methAttr & ~mdMemberAccessMask) | mdPrivateScope); }
#line 8022 "asmparse.cpp.tab.c"
break;
case 289:
  if (!yytrial)
#line 814 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdHideBySig); }
#line 8028 "asmparse.cpp.tab.c"
break;
case 290:
  if (!yytrial)
#line 815 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdNewSlot); }
#line 8034 "asmparse.cpp.tab.c"
break;
case 291:
  if (!yytrial)
#line 816 "asmparse.y"
{ yyval.methAttr = yyvsp[-1].methAttr; }
#line 8040 "asmparse.cpp.tab.c"
break;
case 292:
  if (!yytrial)
#line 817 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdUnmanagedExport); }
#line 8046 "asmparse.cpp.tab.c"
break;
case 293:
  if (!yytrial)
#line 818 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].methAttr | mdRequireSecObject); }
#line 8052 "asmparse.cpp.tab.c"
break;
case 294:
  if (!yytrial)
#line 819 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yyvsp[-1].int32); }
#line 8058 "asmparse.cpp.tab.c"
break;
case 295:
  if (!yytrial)
#line 821 "asmparse.y"
{ PASM->SetPinvoke(yyvsp[-4].binstr,0,yyvsp[-2].binstr,yyvsp[-1].pinvAttr);
                                                              yyval.methAttr = (CorMethodAttr) (yyvsp[-7].methAttr | mdPinvokeImpl); }
#line 8065 "asmparse.cpp.tab.c"
break;
case 296:
  if (!yytrial)
#line 824 "asmparse.y"
{ PASM->SetPinvoke(yyvsp[-2].binstr,0,NULL,yyvsp[-1].pinvAttr);
                                                              yyval.methAttr = (CorMethodAttr) (yyvsp[-5].methAttr | mdPinvokeImpl); }
#line 8072 "asmparse.cpp.tab.c"
break;
case 297:
  if (!yytrial)
#line 827 "asmparse.y"
{ PASM->SetPinvoke(new BinStr(),0,NULL,yyvsp[-1].pinvAttr);
                                                              yyval.methAttr = (CorMethodAttr) (yyvsp[-4].methAttr | mdPinvokeImpl); }
#line 8079 "asmparse.cpp.tab.c"
break;
case 298:
  if (!yytrial)
#line 831 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) 0; }
#line 8085 "asmparse.cpp.tab.c"
break;
case 299:
  if (!yytrial)
#line 832 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmNoMangle); }
#line 8091 "asmparse.cpp.tab.c"
break;
case 300:
  if (!yytrial)
#line 833 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCharSetAnsi); }
#line 8097 "asmparse.cpp.tab.c"
break;
case 301:
  if (!yytrial)
#line 834 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCharSetUnicode); }
#line 8103 "asmparse.cpp.tab.c"
break;
case 302:
  if (!yytrial)
#line 835 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCharSetAuto); }
#line 8109 "asmparse.cpp.tab.c"
break;
case 303:
  if (!yytrial)
#line 836 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmSupportsLastError); }
#line 8115 "asmparse.cpp.tab.c"
break;
case 304:
  if (!yytrial)
#line 837 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvWinapi); }
#line 8121 "asmparse.cpp.tab.c"
break;
case 305:
  if (!yytrial)
#line 838 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvCdecl); }
#line 8127 "asmparse.cpp.tab.c"
break;
case 306:
  if (!yytrial)
#line 839 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvStdcall); }
#line 8133 "asmparse.cpp.tab.c"
break;
case 307:
  if (!yytrial)
#line 840 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvThiscall); }
#line 8139 "asmparse.cpp.tab.c"
break;
case 308:
  if (!yytrial)
#line 841 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].pinvAttr | pmCallConvFastcall); }
#line 8145 "asmparse.cpp.tab.c"
break;
case 309:
  if (!yytrial)
#line 842 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-3].pinvAttr | pmBestFitEnabled); }
#line 8151 "asmparse.cpp.tab.c"
break;
case 310:
  if (!yytrial)
#line 843 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-3].pinvAttr | pmBestFitDisabled); }
#line 8157 "asmparse.cpp.tab.c"
break;
case 311:
  if (!yytrial)
#line 844 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-3].pinvAttr | pmThrowOnUnmappableCharEnabled); }
#line 8163 "asmparse.cpp.tab.c"
break;
case 312:
  if (!yytrial)
#line 845 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-3].pinvAttr | pmThrowOnUnmappableCharDisabled); }
#line 8169 "asmparse.cpp.tab.c"
break;
case 313:
  if (!yytrial)
#line 846 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yyvsp[-1].int32); }
#line 8175 "asmparse.cpp.tab.c"
break;
case 314:
  if (!yytrial)
#line 849 "asmparse.y"
{ yyval.string = newString(COR_CTOR_METHOD_NAME); }
#line 8181 "asmparse.cpp.tab.c"
break;
case 315:
  if (!yytrial)
#line 850 "asmparse.y"
{ yyval.string = newString(COR_CCTOR_METHOD_NAME); }
#line 8187 "asmparse.cpp.tab.c"
break;
case 316:
  if (!yytrial)
#line 851 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 8193 "asmparse.cpp.tab.c"
break;
case 317:
  if (!yytrial)
#line 854 "asmparse.y"
{ yyval.int32 = 0; }
#line 8199 "asmparse.cpp.tab.c"
break;
case 318:
  if (!yytrial)
#line 855 "asmparse.y"
{ yyval.int32 = yyvsp[-3].int32 | pdIn; }
#line 8205 "asmparse.cpp.tab.c"
break;
case 319:
  if (!yytrial)
#line 856 "asmparse.y"
{ yyval.int32 = yyvsp[-3].int32 | pdOut; }
#line 8211 "asmparse.cpp.tab.c"
break;
case 320:
  if (!yytrial)
#line 857 "asmparse.y"
{ yyval.int32 = yyvsp[-3].int32 | pdOptional; }
#line 8217 "asmparse.cpp.tab.c"
break;
case 321:
  if (!yytrial)
#line 858 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 + 1; }
#line 8223 "asmparse.cpp.tab.c"
break;
case 322:
  if (!yytrial)
#line 861 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (miIL | miManaged); }
#line 8229 "asmparse.cpp.tab.c"
break;
case 323:
  if (!yytrial)
#line 862 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFF4) | miNative); }
#line 8235 "asmparse.cpp.tab.c"
break;
case 324:
  if (!yytrial)
#line 863 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFF4) | miIL); }
#line 8241 "asmparse.cpp.tab.c"
break;
case 325:
  if (!yytrial)
#line 864 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFF4) | miOPTIL); }
#line 8247 "asmparse.cpp.tab.c"
break;
case 326:
  if (!yytrial)
#line 865 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFFB) | miManaged); }
#line 8253 "asmparse.cpp.tab.c"
break;
case 327:
  if (!yytrial)
#line 866 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yyvsp[-1].implAttr & 0xFFFB) | miUnmanaged); }
#line 8259 "asmparse.cpp.tab.c"
break;
case 328:
  if (!yytrial)
#line 867 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miForwardRef); }
#line 8265 "asmparse.cpp.tab.c"
break;
case 329:
  if (!yytrial)
#line 868 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miPreserveSig); }
#line 8271 "asmparse.cpp.tab.c"
break;
case 330:
  if (!yytrial)
#line 869 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miRuntime); }
#line 8277 "asmparse.cpp.tab.c"
break;
case 331:
  if (!yytrial)
#line 870 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miInternalCall); }
#line 8283 "asmparse.cpp.tab.c"
break;
case 332:
  if (!yytrial)
#line 871 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miSynchronized); }
#line 8289 "asmparse.cpp.tab.c"
break;
case 333:
  if (!yytrial)
#line 872 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miNoInlining); }
#line 8295 "asmparse.cpp.tab.c"
break;
case 334:
  if (!yytrial)
#line 873 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miAggressiveInlining); }
#line 8301 "asmparse.cpp.tab.c"
break;
case 335:
  if (!yytrial)
#line 874 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miNoOptimization); }
#line 8307 "asmparse.cpp.tab.c"
break;
case 336:
  if (!yytrial)
#line 875 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].implAttr | miAggressiveOptimization); }
#line 8313 "asmparse.cpp.tab.c"
break;
case 337:
  if (!yytrial)
#line 876 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yyvsp[-1].int32); }
#line 8319 "asmparse.cpp.tab.c"
break;
case 338:
  if (!yytrial)
#line 879 "asmparse.y"
{ PASM->delArgNameList(PASM->m_firstArgName); PASM->m_firstArgName = NULL;PASM->m_lastArgName = NULL;
                                                            }
#line 8326 "asmparse.cpp.tab.c"
break;
case 341:
  if (!yytrial)
#line 887 "asmparse.y"
{ PASM->EmitByte(yyvsp[0].int32); }
#line 8332 "asmparse.cpp.tab.c"
break;
case 342:
  if (!yytrial)
#line 888 "asmparse.y"
{ delete PASM->m_SEHD; PASM->m_SEHD = PASM->m_SEHDstack.POP(); }
#line 8338 "asmparse.cpp.tab.c"
break;
case 343:
  if (!yytrial)
#line 889 "asmparse.y"
{ PASM->EmitMaxStack(yyvsp[0].int32); }
#line 8344 "asmparse.cpp.tab.c"
break;
case 344:
  if (!yytrial)
#line 890 "asmparse.y"
{ PASM->EmitLocals(parser->MakeSig(IMAGE_CEE_CS_CALLCONV_LOCAL_SIG, 0, yyvsp[-1].binstr));
                                                            }
#line 8351 "asmparse.cpp.tab.c"
break;
case 345:
  if (!yytrial)
#line 892 "asmparse.y"
{ PASM->EmitZeroInit();
                                                              PASM->EmitLocals(parser->MakeSig(IMAGE_CEE_CS_CALLCONV_LOCAL_SIG, 0, yyvsp[-1].binstr));
                                                            }
#line 8359 "asmparse.cpp.tab.c"
break;
case 346:
  if (!yytrial)
#line 895 "asmparse.y"
{ PASM->EmitEntryPoint(); }
#line 8365 "asmparse.cpp.tab.c"
break;
case 347:
  if (!yytrial)
#line 896 "asmparse.y"
{ PASM->EmitZeroInit(); }
#line 8371 "asmparse.cpp.tab.c"
break;
case 350:
  if (!yytrial)
#line 899 "asmparse.y"
{ PASM->AddLabel(PASM->m_CurPC,yyvsp[-1].string); /*PASM->EmitLabel($1);*/ }
#line 8377 "asmparse.cpp.tab.c"
break;
case 356:
  if (!yytrial)
#line 905 "asmparse.y"
{ if(PASM->m_pCurMethod->m_dwExportOrdinal == 0xFFFFFFFF)
                                                              {
                                                                PASM->m_pCurMethod->m_dwExportOrdinal = yyvsp[-1].int32;
                                                                PASM->m_pCurMethod->m_szExportAlias = NULL;
                                                                if(PASM->m_pCurMethod->m_wVTEntry == 0) PASM->m_pCurMethod->m_wVTEntry = 1;
                                                                if(PASM->m_pCurMethod->m_wVTSlot  == 0) PASM->m_pCurMethod->m_wVTSlot = (WORD)(yyvsp[-1].int32 + 0x8000);
                                                              }
                                                              else
                                                                PASM->report->warn("Duplicate .export directive, ignored\n");
                                                            }
#line 8392 "asmparse.cpp.tab.c"
break;
case 357:
  if (!yytrial)
#line 915 "asmparse.y"
{ if(PASM->m_pCurMethod->m_dwExportOrdinal == 0xFFFFFFFF)
                                                              {
                                                                PASM->m_pCurMethod->m_dwExportOrdinal = yyvsp[-3].int32;
                                                                PASM->m_pCurMethod->m_szExportAlias = yyvsp[0].string;
                                                                if(PASM->m_pCurMethod->m_wVTEntry == 0) PASM->m_pCurMethod->m_wVTEntry = 1;
                                                                if(PASM->m_pCurMethod->m_wVTSlot  == 0) PASM->m_pCurMethod->m_wVTSlot = (WORD)(yyvsp[-3].int32 + 0x8000);
                                                              }
                                                              else
                                                                PASM->report->warn("Duplicate .export directive, ignored\n");
                                                            }
#line 8407 "asmparse.cpp.tab.c"
break;
case 358:
  if (!yytrial)
#line 925 "asmparse.y"
{ PASM->m_pCurMethod->m_wVTEntry = (WORD)yyvsp[-2].int32;
                                                              PASM->m_pCurMethod->m_wVTSlot = (WORD)yyvsp[0].int32; }
#line 8414 "asmparse.cpp.tab.c"
break;
case 359:
  if (!yytrial)
#line 928 "asmparse.y"
{ PASM->AddMethodImpl(yyvsp[-2].token,yyvsp[0].string,NULL,NULL,NULL,NULL); }
#line 8420 "asmparse.cpp.tab.c"
break;
case 360:
  if (!yytrial)
#line 931 "asmparse.y"
{ PASM->AddMethodImpl(yyvsp[-6].token,yyvsp[-4].string,
                                                              (yyvsp[-3].int32==0 ? parser->MakeSig(yyvsp[-8].int32,yyvsp[-7].binstr,yyvsp[-1].binstr) :
                                                              parser->MakeSig(yyvsp[-8].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yyvsp[-7].binstr,yyvsp[-1].binstr,yyvsp[-3].int32))
                                                              ,NULL,NULL,NULL);
                                                              PASM->ResetArgNameList();
                                                            }
#line 8431 "asmparse.cpp.tab.c"
break;
case 362:
  if (!yytrial)
#line 938 "asmparse.y"
{ if((yyvsp[-1].int32 > 0) && (yyvsp[-1].int32 <= (int)PASM->m_pCurMethod->m_NumTyPars))
                                                                PASM->m_pCustomDescrList = PASM->m_pCurMethod->m_TyPars[yyvsp[-1].int32-1].CAList();
                                                              else
                                                                PASM->report->error("Type parameter index out of range\n");
                                                            }
#line 8441 "asmparse.cpp.tab.c"
break;
case 363:
  if (!yytrial)
#line 943 "asmparse.y"
{ int n = PASM->m_pCurMethod->FindTyPar(yyvsp[0].string);
                                                              if(n >= 0)
                                                                PASM->m_pCustomDescrList = PASM->m_pCurMethod->m_TyPars[n].CAList();
                                                              else
                                                                PASM->report->error("Type parameter '%s' undefined\n",yyvsp[0].string);
                                                            }
#line 8452 "asmparse.cpp.tab.c"
break;
case 364:
  if (!yytrial)
#line 949 "asmparse.y"
{ PASM->m_pCurMethod->AddGenericParamConstraint(yyvsp[-3].int32, 0, yyvsp[0].token); }
#line 8458 "asmparse.cpp.tab.c"
break;
case 365:
  if (!yytrial)
#line 950 "asmparse.y"
{ PASM->m_pCurMethod->AddGenericParamConstraint(0, yyvsp[-2].string, yyvsp[0].token); }
#line 8464 "asmparse.cpp.tab.c"
break;
case 366:
  if (!yytrial)
#line 953 "asmparse.y"
{ if( yyvsp[-2].int32 ) {
                                                                ARG_NAME_LIST* pAN=PASM->findArg(PASM->m_pCurMethod->m_firstArgName, yyvsp[-2].int32 - 1);
                                                                if(pAN)
                                                                {
                                                                    PASM->m_pCustomDescrList = &(pAN->CustDList);
                                                                    pAN->pValue = yyvsp[0].binstr;
                                                                }
                                                                else
                                                                {
                                                                    PASM->m_pCustomDescrList = NULL;
                                                                    if(yyvsp[0].binstr) delete yyvsp[0].binstr;
                                                                }
                                                              } else {
                                                                PASM->m_pCustomDescrList = &(PASM->m_pCurMethod->m_RetCustDList);
                                                                PASM->m_pCurMethod->m_pRetValue = yyvsp[0].binstr;
                                                              }
                                                              PASM->m_tkCurrentCVOwner = 0;
                                                            }
#line 8487 "asmparse.cpp.tab.c"
break;
case 367:
  if (!yytrial)
#line 973 "asmparse.y"
{ PASM->m_pCurMethod->CloseScope(); }
#line 8493 "asmparse.cpp.tab.c"
break;
case 368:
  if (!yytrial)
#line 976 "asmparse.y"
{ PASM->m_pCurMethod->OpenScope(); }
#line 8499 "asmparse.cpp.tab.c"
break;
case 372:
  if (!yytrial)
#line 987 "asmparse.y"
{ PASM->m_SEHD->tryTo = PASM->m_CurPC; }
#line 8505 "asmparse.cpp.tab.c"
break;
case 373:
  if (!yytrial)
#line 988 "asmparse.y"
{ PASM->SetTryLabels(yyvsp[-2].string, yyvsp[0].string); }
#line 8511 "asmparse.cpp.tab.c"
break;
case 374:
  if (!yytrial)
#line 989 "asmparse.y"
{ if(PASM->m_SEHD) {PASM->m_SEHD->tryFrom = yyvsp[-2].int32;
                                                              PASM->m_SEHD->tryTo = yyvsp[0].int32;} }
#line 8518 "asmparse.cpp.tab.c"
break;
case 375:
  if (!yytrial)
#line 993 "asmparse.y"
{ PASM->NewSEHDescriptor();
                                                              PASM->m_SEHD->tryFrom = PASM->m_CurPC; }
#line 8525 "asmparse.cpp.tab.c"
break;
case 376:
  if (!yytrial)
#line 998 "asmparse.y"
{ PASM->EmitTry(); }
#line 8531 "asmparse.cpp.tab.c"
break;
case 377:
  if (!yytrial)
#line 999 "asmparse.y"
{ PASM->EmitTry(); }
#line 8537 "asmparse.cpp.tab.c"
break;
case 378:
  if (!yytrial)
#line 1000 "asmparse.y"
{ PASM->EmitTry(); }
#line 8543 "asmparse.cpp.tab.c"
break;
case 379:
  if (!yytrial)
#line 1001 "asmparse.y"
{ PASM->EmitTry(); }
#line 8549 "asmparse.cpp.tab.c"
break;
case 380:
  if (!yytrial)
#line 1005 "asmparse.y"
{ PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8555 "asmparse.cpp.tab.c"
break;
case 381:
  if (!yytrial)
#line 1006 "asmparse.y"
{ PASM->SetFilterLabel(yyvsp[0].string);
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8562 "asmparse.cpp.tab.c"
break;
case 382:
  if (!yytrial)
#line 1008 "asmparse.y"
{ PASM->m_SEHD->sehFilter = yyvsp[0].int32;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8569 "asmparse.cpp.tab.c"
break;
case 383:
  if (!yytrial)
#line 1012 "asmparse.y"
{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FILTER;
                                                               PASM->m_SEHD->sehFilter = PASM->m_CurPC; }
#line 8576 "asmparse.cpp.tab.c"
break;
case 384:
  if (!yytrial)
#line 1016 "asmparse.y"
{  PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_NONE;
                                                               PASM->SetCatchClass(yyvsp[0].token);
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8584 "asmparse.cpp.tab.c"
break;
case 385:
  if (!yytrial)
#line 1021 "asmparse.y"
{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FINALLY;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8591 "asmparse.cpp.tab.c"
break;
case 386:
  if (!yytrial)
#line 1025 "asmparse.y"
{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FAULT;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 8598 "asmparse.cpp.tab.c"
break;
case 387:
  if (!yytrial)
#line 1029 "asmparse.y"
{ PASM->m_SEHD->sehHandlerTo = PASM->m_CurPC; }
#line 8604 "asmparse.cpp.tab.c"
break;
case 388:
  if (!yytrial)
#line 1030 "asmparse.y"
{ PASM->SetHandlerLabels(yyvsp[-2].string, yyvsp[0].string); }
#line 8610 "asmparse.cpp.tab.c"
break;
case 389:
  if (!yytrial)
#line 1031 "asmparse.y"
{ PASM->m_SEHD->sehHandler = yyvsp[-2].int32;
                                                               PASM->m_SEHD->sehHandlerTo = yyvsp[0].int32; }
#line 8617 "asmparse.cpp.tab.c"
break;
case 391:
  if (!yytrial)
#line 1039 "asmparse.y"
{ PASM->EmitDataLabel(yyvsp[-1].string); }
#line 8623 "asmparse.cpp.tab.c"
break;
case 393:
  if (!yytrial)
#line 1043 "asmparse.y"
{ PASM->SetDataSection(); }
#line 8629 "asmparse.cpp.tab.c"
break;
case 394:
  if (!yytrial)
#line 1044 "asmparse.y"
{ PASM->SetTLSSection(); }
#line 8635 "asmparse.cpp.tab.c"
break;
case 395:
  if (!yytrial)
#line 1045 "asmparse.y"
{ PASM->SetILSection(); }
#line 8641 "asmparse.cpp.tab.c"
break;
case 400:
  if (!yytrial)
#line 1056 "asmparse.y"
{ yyval.int32 = 1; }
#line 8647 "asmparse.cpp.tab.c"
break;
case 401:
  if (!yytrial)
#line 1057 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32;
                                                               if(yyvsp[-1].int32 <= 0) { PASM->report->error("Illegal item count: %d\n",yyvsp[-1].int32);
                                                                  if(!PASM->OnErrGo) yyval.int32 = 1; }}
#line 8655 "asmparse.cpp.tab.c"
break;
case 402:
  if (!yytrial)
#line 1062 "asmparse.y"
{ PASM->EmitDataString(yyvsp[-1].binstr); }
#line 8661 "asmparse.cpp.tab.c"
break;
case 403:
  if (!yytrial)
#line 1063 "asmparse.y"
{ PASM->EmitDD(yyvsp[-1].string); }
#line 8667 "asmparse.cpp.tab.c"
break;
case 404:
  if (!yytrial)
#line 1064 "asmparse.y"
{ PASM->EmitData(yyvsp[-1].binstr->ptr(),yyvsp[-1].binstr->length()); }
#line 8673 "asmparse.cpp.tab.c"
break;
case 405:
  if (!yytrial)
#line 1066 "asmparse.y"
{ float f = (float) (*yyvsp[-2].float64); float* p = new (nothrow) float[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i < yyvsp[0].int32; i++) p[i] = f;
                                                                 PASM->EmitData(p, sizeof(float)*yyvsp[0].int32); delete yyvsp[-2].float64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(float)*yyvsp[0].int32); }
#line 8684 "asmparse.cpp.tab.c"
break;
case 406:
  if (!yytrial)
#line 1073 "asmparse.y"
{ double* p = new (nothrow) double[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yyvsp[0].int32; i++) p[i] = *(yyvsp[-2].float64);
                                                                 PASM->EmitData(p, sizeof(double)*yyvsp[0].int32); delete yyvsp[-2].float64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(double)*yyvsp[0].int32); }
#line 8695 "asmparse.cpp.tab.c"
break;
case 407:
  if (!yytrial)
#line 1080 "asmparse.y"
{ __int64* p = new (nothrow) __int64[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yyvsp[0].int32; i++) p[i] = *(yyvsp[-2].int64);
                                                                 PASM->EmitData(p, sizeof(__int64)*yyvsp[0].int32); delete yyvsp[-2].int64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int64)*yyvsp[0].int32); }
#line 8706 "asmparse.cpp.tab.c"
break;
case 408:
  if (!yytrial)
#line 1087 "asmparse.y"
{ __int32* p = new (nothrow) __int32[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yyvsp[0].int32; i++) p[i] = yyvsp[-2].int32;
                                                                 PASM->EmitData(p, sizeof(__int32)*yyvsp[0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int32)*yyvsp[0].int32); }
#line 8717 "asmparse.cpp.tab.c"
break;
case 409:
  if (!yytrial)
#line 1094 "asmparse.y"
{ __int16 i = (__int16) yyvsp[-2].int32; FAIL_UNLESS(i == yyvsp[-2].int32, ("Value %d too big\n", yyvsp[-2].int32));
                                                               __int16* p = new (nothrow) __int16[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int j=0; j<yyvsp[0].int32; j++) p[j] = i;
                                                                 PASM->EmitData(p, sizeof(__int16)*yyvsp[0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int16)*yyvsp[0].int32); }
#line 8729 "asmparse.cpp.tab.c"
break;
case 410:
  if (!yytrial)
#line 1102 "asmparse.y"
{ __int8 i = (__int8) yyvsp[-2].int32; FAIL_UNLESS(i == yyvsp[-2].int32, ("Value %d too big\n", yyvsp[-2].int32));
                                                               __int8* p = new (nothrow) __int8[yyvsp[0].int32];
                                                               if(p != NULL) {
                                                                 for(int j=0; j<yyvsp[0].int32; j++) p[j] = i;
                                                                 PASM->EmitData(p, sizeof(__int8)*yyvsp[0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int8)*yyvsp[0].int32); }
#line 8741 "asmparse.cpp.tab.c"
break;
case 411:
  if (!yytrial)
#line 1109 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(float)*yyvsp[0].int32); }
#line 8747 "asmparse.cpp.tab.c"
break;
case 412:
  if (!yytrial)
#line 1110 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(double)*yyvsp[0].int32); }
#line 8753 "asmparse.cpp.tab.c"
break;
case 413:
  if (!yytrial)
#line 1111 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int64)*yyvsp[0].int32); }
#line 8759 "asmparse.cpp.tab.c"
break;
case 414:
  if (!yytrial)
#line 1112 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int32)*yyvsp[0].int32); }
#line 8765 "asmparse.cpp.tab.c"
break;
case 415:
  if (!yytrial)
#line 1113 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int16)*yyvsp[0].int32); }
#line 8771 "asmparse.cpp.tab.c"
break;
case 416:
  if (!yytrial)
#line 1114 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int8)*yyvsp[0].int32); }
#line 8777 "asmparse.cpp.tab.c"
break;
case 417:
  if (!yytrial)
#line 1118 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               float f = (float)(*yyvsp[-1].float64);
                                                               yyval.binstr->appendInt32(*((__int32*)&f)); delete yyvsp[-1].float64; }
#line 8785 "asmparse.cpp.tab.c"
break;
case 418:
  if (!yytrial)
#line 1121 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].float64); delete yyvsp[-1].float64; }
#line 8792 "asmparse.cpp.tab.c"
break;
case 419:
  if (!yytrial)
#line 1123 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 8799 "asmparse.cpp.tab.c"
break;
case 420:
  if (!yytrial)
#line 1125 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 8806 "asmparse.cpp.tab.c"
break;
case 421:
  if (!yytrial)
#line 1127 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 8813 "asmparse.cpp.tab.c"
break;
case 422:
  if (!yytrial)
#line 1129 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 8820 "asmparse.cpp.tab.c"
break;
case 423:
  if (!yytrial)
#line 1131 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I2);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 8827 "asmparse.cpp.tab.c"
break;
case 424:
  if (!yytrial)
#line 1133 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I1);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32); }
#line 8834 "asmparse.cpp.tab.c"
break;
case 425:
  if (!yytrial)
#line 1135 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 8841 "asmparse.cpp.tab.c"
break;
case 426:
  if (!yytrial)
#line 1137 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 8848 "asmparse.cpp.tab.c"
break;
case 427:
  if (!yytrial)
#line 1139 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 8855 "asmparse.cpp.tab.c"
break;
case 428:
  if (!yytrial)
#line 1141 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32); }
#line 8862 "asmparse.cpp.tab.c"
break;
case 429:
  if (!yytrial)
#line 1143 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[-1].int64); delete yyvsp[-1].int64; }
#line 8869 "asmparse.cpp.tab.c"
break;
case 430:
  if (!yytrial)
#line 1145 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 8876 "asmparse.cpp.tab.c"
break;
case 431:
  if (!yytrial)
#line 1147 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 8883 "asmparse.cpp.tab.c"
break;
case 432:
  if (!yytrial)
#line 1149 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32); }
#line 8890 "asmparse.cpp.tab.c"
break;
case 433:
  if (!yytrial)
#line 1151 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CHAR);
                                                               yyval.binstr->appendInt16(yyvsp[-1].int32); }
#line 8897 "asmparse.cpp.tab.c"
break;
case 434:
  if (!yytrial)
#line 1153 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_BOOLEAN);
                                                               yyval.binstr->appendInt8(yyvsp[-1].int32);}
#line 8904 "asmparse.cpp.tab.c"
break;
case 435:
  if (!yytrial)
#line 1155 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING);
                                                               yyval.binstr->append(yyvsp[-1].binstr); delete yyvsp[-1].binstr;}
#line 8911 "asmparse.cpp.tab.c"
break;
case 436:
  if (!yytrial)
#line 1159 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 8917 "asmparse.cpp.tab.c"
break;
case 437:
  if (!yytrial)
#line 1162 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 8923 "asmparse.cpp.tab.c"
break;
case 438:
  if (!yytrial)
#line 1163 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 8929 "asmparse.cpp.tab.c"
break;
case 439:
  if (!yytrial)
#line 1166 "asmparse.y"
{ __int8 i = (__int8) yyvsp[0].int32; yyval.binstr = new BinStr(); yyval.binstr->appendInt8(i); }
#line 8935 "asmparse.cpp.tab.c"
break;
case 440:
  if (!yytrial)
#line 1167 "asmparse.y"
{ __int8 i = (__int8) yyvsp[0].int32; yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt8(i); }
#line 8941 "asmparse.cpp.tab.c"
break;
case 441:
  if (!yytrial)
#line 1171 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 8947 "asmparse.cpp.tab.c"
break;
case 442:
  if (!yytrial)
#line 1172 "asmparse.y"
{ yyval.binstr = BinStrToUnicode(yyvsp[0].binstr,true); yyval.binstr->insertInt8(ELEMENT_TYPE_STRING);}
#line 8953 "asmparse.cpp.tab.c"
break;
case 443:
  if (!yytrial)
#line 1173 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CLASS);
                                                               yyval.binstr->appendInt32(0); }
#line 8960 "asmparse.cpp.tab.c"
break;
case 444:
  if (!yytrial)
#line 1178 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 8966 "asmparse.cpp.tab.c"
break;
case 445:
  if (!yytrial)
#line 1179 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); yyval.binstr->appendInt8(0xFF); }
#line 8972 "asmparse.cpp.tab.c"
break;
case 446:
  if (!yytrial)
#line 1180 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING);
                                                               AppendStringWithLength(yyval.binstr,yyvsp[-1].string); delete [] yyvsp[-1].string;}
#line 8979 "asmparse.cpp.tab.c"
break;
case 447:
  if (!yytrial)
#line 1182 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE);
                                                               AppendStringWithLength(yyval.binstr,yyvsp[-1].string); delete [] yyvsp[-1].string;}
#line 8986 "asmparse.cpp.tab.c"
break;
case 448:
  if (!yytrial)
#line 1184 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE);
                                                               AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yyvsp[-1].token));}
#line 8993 "asmparse.cpp.tab.c"
break;
case 449:
  if (!yytrial)
#line 1186 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE); yyval.binstr->appendInt8(0xFF); }
#line 8999 "asmparse.cpp.tab.c"
break;
case 450:
  if (!yytrial)
#line 1187 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(SERIALIZATION_TYPE_TAGGED_OBJECT);}
#line 9005 "asmparse.cpp.tab.c"
break;
case 451:
  if (!yytrial)
#line 1189 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_R4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9013 "asmparse.cpp.tab.c"
break;
case 452:
  if (!yytrial)
#line 1193 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9021 "asmparse.cpp.tab.c"
break;
case 453:
  if (!yytrial)
#line 1197 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9029 "asmparse.cpp.tab.c"
break;
case 454:
  if (!yytrial)
#line 1201 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9037 "asmparse.cpp.tab.c"
break;
case 455:
  if (!yytrial)
#line 1205 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9045 "asmparse.cpp.tab.c"
break;
case 456:
  if (!yytrial)
#line 1209 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9053 "asmparse.cpp.tab.c"
break;
case 457:
  if (!yytrial)
#line 1213 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9061 "asmparse.cpp.tab.c"
break;
case 458:
  if (!yytrial)
#line 1217 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9069 "asmparse.cpp.tab.c"
break;
case 459:
  if (!yytrial)
#line 1221 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9077 "asmparse.cpp.tab.c"
break;
case 460:
  if (!yytrial)
#line 1225 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9085 "asmparse.cpp.tab.c"
break;
case 461:
  if (!yytrial)
#line 1229 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9093 "asmparse.cpp.tab.c"
break;
case 462:
  if (!yytrial)
#line 1233 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9101 "asmparse.cpp.tab.c"
break;
case 463:
  if (!yytrial)
#line 1237 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9109 "asmparse.cpp.tab.c"
break;
case 464:
  if (!yytrial)
#line 1241 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9117 "asmparse.cpp.tab.c"
break;
case 465:
  if (!yytrial)
#line 1245 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_CHAR);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9125 "asmparse.cpp.tab.c"
break;
case 466:
  if (!yytrial)
#line 1249 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_BOOLEAN);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9133 "asmparse.cpp.tab.c"
break;
case 467:
  if (!yytrial)
#line 1253 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_STRING);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9141 "asmparse.cpp.tab.c"
break;
case 468:
  if (!yytrial)
#line 1257 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(SERIALIZATION_TYPE_TYPE);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9149 "asmparse.cpp.tab.c"
break;
case 469:
  if (!yytrial)
#line 1261 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt32(yyvsp[-4].int32);
                                                               yyval.binstr->insertInt8(SERIALIZATION_TYPE_TAGGED_OBJECT);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9157 "asmparse.cpp.tab.c"
break;
case 470:
  if (!yytrial)
#line 1267 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9163 "asmparse.cpp.tab.c"
break;
case 471:
  if (!yytrial)
#line 1268 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               float f = (float) (*yyvsp[0].float64); yyval.binstr->appendInt32(*((__int32*)&f)); delete yyvsp[0].float64; }
#line 9170 "asmparse.cpp.tab.c"
break;
case 472:
  if (!yytrial)
#line 1270 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt32(yyvsp[0].int32); }
#line 9177 "asmparse.cpp.tab.c"
break;
case 473:
  if (!yytrial)
#line 1274 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9183 "asmparse.cpp.tab.c"
break;
case 474:
  if (!yytrial)
#line 1275 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[0].float64); delete yyvsp[0].float64; }
#line 9190 "asmparse.cpp.tab.c"
break;
case 475:
  if (!yytrial)
#line 1277 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[0].int64); delete yyvsp[0].int64; }
#line 9197 "asmparse.cpp.tab.c"
break;
case 476:
  if (!yytrial)
#line 1281 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9203 "asmparse.cpp.tab.c"
break;
case 477:
  if (!yytrial)
#line 1282 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt64((__int64 *)yyvsp[0].int64); delete yyvsp[0].int64; }
#line 9210 "asmparse.cpp.tab.c"
break;
case 478:
  if (!yytrial)
#line 1286 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9216 "asmparse.cpp.tab.c"
break;
case 479:
  if (!yytrial)
#line 1287 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt32(yyvsp[0].int32);}
#line 9222 "asmparse.cpp.tab.c"
break;
case 480:
  if (!yytrial)
#line 1290 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9228 "asmparse.cpp.tab.c"
break;
case 481:
  if (!yytrial)
#line 1291 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt16(yyvsp[0].int32);}
#line 9234 "asmparse.cpp.tab.c"
break;
case 482:
  if (!yytrial)
#line 1294 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9240 "asmparse.cpp.tab.c"
break;
case 483:
  if (!yytrial)
#line 1295 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt8(yyvsp[0].int32); }
#line 9246 "asmparse.cpp.tab.c"
break;
case 484:
  if (!yytrial)
#line 1298 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9252 "asmparse.cpp.tab.c"
break;
case 485:
  if (!yytrial)
#line 1299 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               yyval.binstr->appendInt8(yyvsp[0].int32);}
#line 9259 "asmparse.cpp.tab.c"
break;
case 486:
  if (!yytrial)
#line 1303 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9265 "asmparse.cpp.tab.c"
break;
case 487:
  if (!yytrial)
#line 1304 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt8(0xFF); }
#line 9271 "asmparse.cpp.tab.c"
break;
case 488:
  if (!yytrial)
#line 1305 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               AppendStringWithLength(yyval.binstr,yyvsp[0].string); delete [] yyvsp[0].string;}
#line 9278 "asmparse.cpp.tab.c"
break;
case 489:
  if (!yytrial)
#line 1309 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9284 "asmparse.cpp.tab.c"
break;
case 490:
  if (!yytrial)
#line 1310 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->appendInt8(0xFF); }
#line 9290 "asmparse.cpp.tab.c"
break;
case 491:
  if (!yytrial)
#line 1311 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr;
                                                               AppendStringWithLength(yyval.binstr,yyvsp[0].string); delete [] yyvsp[0].string;}
#line 9297 "asmparse.cpp.tab.c"
break;
case 492:
  if (!yytrial)
#line 1313 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr;
                                                               AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yyvsp[0].token));}
#line 9304 "asmparse.cpp.tab.c"
break;
case 493:
  if (!yytrial)
#line 1317 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9310 "asmparse.cpp.tab.c"
break;
case 494:
  if (!yytrial)
#line 1318 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 9316 "asmparse.cpp.tab.c"
break;
case 495:
  if (!yytrial)
#line 1322 "asmparse.y"
{ parser->m_ANSFirst.PUSH(PASM->m_firstArgName);
                                                               parser->m_ANSLast.PUSH(PASM->m_lastArgName);
                                                               PASM->m_firstArgName = NULL;
                                                               PASM->m_lastArgName = NULL; }
#line 9325 "asmparse.cpp.tab.c"
break;
case 496:
  if (!yytrial)
#line 1328 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9331 "asmparse.cpp.tab.c"
break;
case 497:
  if (!yytrial)
#line 1331 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9337 "asmparse.cpp.tab.c"
break;
case 498:
  if (!yytrial)
#line 1334 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9343 "asmparse.cpp.tab.c"
break;
case 499:
  if (!yytrial)
#line 1337 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9349 "asmparse.cpp.tab.c"
break;
case 500:
  if (!yytrial)
#line 1340 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9355 "asmparse.cpp.tab.c"
break;
case 501:
  if (!yytrial)
#line 1343 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9361 "asmparse.cpp.tab.c"
break;
case 502:
  if (!yytrial)
#line 1346 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9367 "asmparse.cpp.tab.c"
break;
case 503:
  if (!yytrial)
#line 1349 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode);
                                                               if((!PASM->OnErrGo)&&
                                                               ((yyvsp[0].opcode == CEE_NEWOBJ)||
                                                                (yyvsp[0].opcode == CEE_CALLVIRT)))
                                                                  iCallConv = IMAGE_CEE_CS_CALLCONV_HASTHIS;
                                                             }
#line 9378 "asmparse.cpp.tab.c"
break;
case 504:
  if (!yytrial)
#line 1357 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9384 "asmparse.cpp.tab.c"
break;
case 505:
  if (!yytrial)
#line 1360 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9390 "asmparse.cpp.tab.c"
break;
case 506:
  if (!yytrial)
#line 1363 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9396 "asmparse.cpp.tab.c"
break;
case 507:
  if (!yytrial)
#line 1366 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9402 "asmparse.cpp.tab.c"
break;
case 508:
  if (!yytrial)
#line 1369 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); iOpcodeLen = PASM->OpcodeLen(yyval.instr); }
#line 9408 "asmparse.cpp.tab.c"
break;
case 509:
  if (!yytrial)
#line 1372 "asmparse.y"
{ yyval.instr = SetupInstr(yyvsp[0].opcode); }
#line 9414 "asmparse.cpp.tab.c"
break;
case 510:
  if (!yytrial)
#line 1375 "asmparse.y"
{ yyval.instr = yyvsp[-1].instr; bParsingByteArray = TRUE; }
#line 9420 "asmparse.cpp.tab.c"
break;
case 511:
  if (!yytrial)
#line 1379 "asmparse.y"
{ PASM->EmitOpcode(yyvsp[0].instr); }
#line 9426 "asmparse.cpp.tab.c"
break;
case 512:
  if (!yytrial)
#line 1380 "asmparse.y"
{ PASM->EmitInstrVar(yyvsp[-1].instr, yyvsp[0].int32); }
#line 9432 "asmparse.cpp.tab.c"
break;
case 513:
  if (!yytrial)
#line 1381 "asmparse.y"
{ PASM->EmitInstrVarByName(yyvsp[-1].instr, yyvsp[0].string); }
#line 9438 "asmparse.cpp.tab.c"
break;
case 514:
  if (!yytrial)
#line 1382 "asmparse.y"
{ PASM->EmitInstrTypeVar(yyvsp[-2].instr, ELEMENT_TYPE_CVAR, yyvsp[0].int32); }
#line 9444 "asmparse.cpp.tab.c"
break;
case 515:
  if (!yytrial)
#line 1383 "asmparse.y"
{ PASM->EmitInstrTypeVarByName(yyvsp[-2].instr, ELEMENT_TYPE_CVAR, yyvsp[0].string); }
#line 9450 "asmparse.cpp.tab.c"
break;
case 516:
  if (!yytrial)
#line 1384 "asmparse.y"
{ PASM->EmitInstrTypeVar(yyvsp[-3].instr, ELEMENT_TYPE_MCVAR, yyvsp[0].int32); }
#line 9456 "asmparse.cpp.tab.c"
break;
case 517:
  if (!yytrial)
#line 1385 "asmparse.y"
{ PASM->EmitInstrTypeVarByName(yyvsp[-3].instr, ELEMENT_TYPE_MCVAR, yyvsp[0].string); }
#line 9462 "asmparse.cpp.tab.c"
break;
case 518:
  if (!yytrial)
#line 1386 "asmparse.y"
{ PASM->EmitInstrI(yyvsp[-1].instr, yyvsp[0].int32); }
#line 9468 "asmparse.cpp.tab.c"
break;
case 519:
  if (!yytrial)
#line 1387 "asmparse.y"
{ PASM->EmitInstrI8(yyvsp[-1].instr, yyvsp[0].int64); }
#line 9474 "asmparse.cpp.tab.c"
break;
case 520:
  if (!yytrial)
#line 1388 "asmparse.y"
{ PASM->EmitInstrR(yyvsp[-1].instr, yyvsp[0].float64); delete (yyvsp[0].float64);}
#line 9480 "asmparse.cpp.tab.c"
break;
case 521:
  if (!yytrial)
#line 1389 "asmparse.y"
{ double f = (double) (*yyvsp[0].int64); PASM->EmitInstrR(yyvsp[-1].instr, &f); }
#line 9486 "asmparse.cpp.tab.c"
break;
case 522:
  if (!yytrial)
#line 1390 "asmparse.y"
{ unsigned L = yyvsp[-1].binstr->length();
                                                               FAIL_UNLESS(L >= sizeof(float), ("%d hexbytes, must be at least %d\n",
                                                                           L,sizeof(float)));
                                                               if(L < sizeof(float)) {YYERROR; }
                                                               else {
                                                                   double f = (L >= sizeof(double)) ? *((double *)(yyvsp[-1].binstr->ptr()))
                                                                                    : (double)(*(float *)(yyvsp[-1].binstr->ptr()));
                                                                   PASM->EmitInstrR(yyvsp[-2].instr,&f); }
                                                               delete yyvsp[-1].binstr; }
#line 9500 "asmparse.cpp.tab.c"
break;
case 523:
  if (!yytrial)
#line 1399 "asmparse.y"
{ PASM->EmitInstrBrOffset(yyvsp[-1].instr, yyvsp[0].int32); }
#line 9506 "asmparse.cpp.tab.c"
break;
case 524:
  if (!yytrial)
#line 1400 "asmparse.y"
{ PASM->EmitInstrBrTarget(yyvsp[-1].instr, yyvsp[0].string); }
#line 9512 "asmparse.cpp.tab.c"
break;
case 525:
  if (!yytrial)
#line 1402 "asmparse.y"
{ PASM->SetMemberRefFixup(yyvsp[0].token,PASM->OpcodeLen(yyvsp[-1].instr));
                                                               PASM->EmitInstrI(yyvsp[-1].instr,yyvsp[0].token);
                                                               PASM->m_tkCurrentCVOwner = yyvsp[0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                               iCallConv = 0;
                                                             }
#line 9523 "asmparse.cpp.tab.c"
break;
case 526:
  if (!yytrial)
#line 1409 "asmparse.y"
{ yyvsp[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               mdToken mr = PASM->MakeMemberRef(yyvsp[-2].token, yyvsp[0].string, yyvsp[-3].binstr);
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-4].instr));
                                                               PASM->EmitInstrI(yyvsp[-4].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9535 "asmparse.cpp.tab.c"
break;
case 527:
  if (!yytrial)
#line 1417 "asmparse.y"
{ yyvsp[-1].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               mdToken mr = PASM->MakeMemberRef(mdTokenNil, yyvsp[0].string, yyvsp[-1].binstr);
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-2].instr));
                                                               PASM->EmitInstrI(yyvsp[-2].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9547 "asmparse.cpp.tab.c"
break;
case 528:
  if (!yytrial)
#line 1424 "asmparse.y"
{ mdToken mr = yyvsp[0].token;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-1].instr));
                                                               PASM->EmitInstrI(yyvsp[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9558 "asmparse.cpp.tab.c"
break;
case 529:
  if (!yytrial)
#line 1430 "asmparse.y"
{ mdToken mr = yyvsp[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-1].instr));
                                                               PASM->EmitInstrI(yyvsp[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9569 "asmparse.cpp.tab.c"
break;
case 530:
  if (!yytrial)
#line 1436 "asmparse.y"
{ mdToken mr = yyvsp[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yyvsp[-1].instr));
                                                               PASM->EmitInstrI(yyvsp[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9580 "asmparse.cpp.tab.c"
break;
case 531:
  if (!yytrial)
#line 1442 "asmparse.y"
{ PASM->EmitInstrI(yyvsp[-1].instr, yyvsp[0].token);
                                                               PASM->m_tkCurrentCVOwner = yyvsp[0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 9589 "asmparse.cpp.tab.c"
break;
case 532:
  if (!yytrial)
#line 1446 "asmparse.y"
{ PASM->EmitInstrStringLiteral(yyvsp[-1].instr, yyvsp[0].binstr,TRUE); }
#line 9595 "asmparse.cpp.tab.c"
break;
case 533:
  if (!yytrial)
#line 1448 "asmparse.y"
{ PASM->EmitInstrStringLiteral(yyvsp[-4].instr, yyvsp[-1].binstr,FALSE); }
#line 9601 "asmparse.cpp.tab.c"
break;
case 534:
  if (!yytrial)
#line 1450 "asmparse.y"
{ PASM->EmitInstrStringLiteral(yyvsp[-3].instr, yyvsp[-1].binstr,FALSE,TRUE); }
#line 9607 "asmparse.cpp.tab.c"
break;
case 535:
  if (!yytrial)
#line 1452 "asmparse.y"
{ PASM->EmitInstrSig(yyvsp[-5].instr, parser->MakeSig(yyvsp[-4].int32, yyvsp[-3].binstr, yyvsp[-1].binstr));
                                                               PASM->ResetArgNameList();
                                                             }
#line 9615 "asmparse.cpp.tab.c"
break;
case 536:
  if (!yytrial)
#line 1456 "asmparse.y"
{ PASM->EmitInstrI(yyvsp[-1].instr,yyvsp[0].token);
                                                               PASM->m_tkCurrentCVOwner = yyvsp[0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                               iOpcodeLen = 0;
                                                             }
#line 9625 "asmparse.cpp.tab.c"
break;
case 537:
  if (!yytrial)
#line 1461 "asmparse.y"
{ PASM->EmitInstrSwitch(yyvsp[-3].instr, yyvsp[-1].labels); }
#line 9631 "asmparse.cpp.tab.c"
break;
case 538:
  if (!yytrial)
#line 1464 "asmparse.y"
{ yyval.labels = 0; }
#line 9637 "asmparse.cpp.tab.c"
break;
case 539:
  if (!yytrial)
#line 1465 "asmparse.y"
{ yyval.labels = new Labels(yyvsp[-2].string, yyvsp[0].labels, TRUE); }
#line 9643 "asmparse.cpp.tab.c"
break;
case 540:
  if (!yytrial)
#line 1466 "asmparse.y"
{ yyval.labels = new Labels((char *)(UINT_PTR)yyvsp[-2].int32, yyvsp[0].labels, FALSE); }
#line 9649 "asmparse.cpp.tab.c"
break;
case 541:
  if (!yytrial)
#line 1467 "asmparse.y"
{ yyval.labels = new Labels(yyvsp[0].string, NULL, TRUE); }
#line 9655 "asmparse.cpp.tab.c"
break;
case 542:
  if (!yytrial)
#line 1468 "asmparse.y"
{ yyval.labels = new Labels((char *)(UINT_PTR)yyvsp[0].int32, NULL, FALSE); }
#line 9661 "asmparse.cpp.tab.c"
break;
case 543:
  if (!yytrial)
#line 1472 "asmparse.y"
{ yyval.binstr = NULL; }
#line 9667 "asmparse.cpp.tab.c"
break;
case 544:
  if (!yytrial)
#line 1473 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; }
#line 9673 "asmparse.cpp.tab.c"
break;
case 545:
  if (!yytrial)
#line 1476 "asmparse.y"
{ yyval.binstr = NULL; }
#line 9679 "asmparse.cpp.tab.c"
break;
case 546:
  if (!yytrial)
#line 1477 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 9685 "asmparse.cpp.tab.c"
break;
case 547:
  if (!yytrial)
#line 1480 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 9691 "asmparse.cpp.tab.c"
break;
case 548:
  if (!yytrial)
#line 1481 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 9697 "asmparse.cpp.tab.c"
break;
case 549:
  if (!yytrial)
#line 1485 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9703 "asmparse.cpp.tab.c"
break;
case 550:
  if (!yytrial)
#line 1486 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr;}
#line 9709 "asmparse.cpp.tab.c"
break;
case 551:
  if (!yytrial)
#line 1489 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 9715 "asmparse.cpp.tab.c"
break;
case 552:
  if (!yytrial)
#line 1490 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 9721 "asmparse.cpp.tab.c"
break;
case 553:
  if (!yytrial)
#line 1493 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_SENTINEL); }
#line 9727 "asmparse.cpp.tab.c"
break;
case 554:
  if (!yytrial)
#line 1494 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yyvsp[-1].binstr); PASM->addArgName(NULL, yyvsp[-1].binstr, yyvsp[0].binstr, yyvsp[-2].int32); }
#line 9733 "asmparse.cpp.tab.c"
break;
case 555:
  if (!yytrial)
#line 1495 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yyvsp[-2].binstr); PASM->addArgName(yyvsp[0].string, yyvsp[-2].binstr, yyvsp[-1].binstr, yyvsp[-3].int32);}
#line 9739 "asmparse.cpp.tab.c"
break;
case 556:
  if (!yytrial)
#line 1499 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(PASM->GetAsmRef(yyvsp[-2].string), yyvsp[0].string, NULL); delete[] yyvsp[-2].string;}
#line 9745 "asmparse.cpp.tab.c"
break;
case 557:
  if (!yytrial)
#line 1500 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(yyvsp[-2].token, yyvsp[0].string, NULL); }
#line 9751 "asmparse.cpp.tab.c"
break;
case 558:
  if (!yytrial)
#line 1501 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(mdTokenNil, yyvsp[0].string, NULL); }
#line 9757 "asmparse.cpp.tab.c"
break;
case 559:
  if (!yytrial)
#line 1502 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(PASM->GetModRef(yyvsp[-2].string),yyvsp[0].string, NULL); delete[] yyvsp[-2].string;}
#line 9763 "asmparse.cpp.tab.c"
break;
case 560:
  if (!yytrial)
#line 1503 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(1,yyvsp[0].string,NULL); }
#line 9769 "asmparse.cpp.tab.c"
break;
case 561:
  if (!yytrial)
#line 1504 "asmparse.y"
{ yyval.token = yyvsp[0].token; }
#line 9775 "asmparse.cpp.tab.c"
break;
case 562:
  if (!yytrial)
#line 1505 "asmparse.y"
{ yyval.token = yyvsp[0].tdd->m_tkTypeSpec; }
#line 9781 "asmparse.cpp.tab.c"
break;
case 563:
  if (!yytrial)
#line 1506 "asmparse.y"
{ if(PASM->m_pCurClass != NULL) yyval.token = PASM->m_pCurClass->m_cl;
                                                                else { yyval.token = 0; PASM->report->error(".this outside class scope\n"); }
                                                              }
#line 9789 "asmparse.cpp.tab.c"
break;
case 564:
  if (!yytrial)
#line 1509 "asmparse.y"
{ if(PASM->m_pCurClass != NULL) {
                                                                  yyval.token = PASM->m_pCurClass->m_crExtends;
                                                                  if(RidFromToken(yyval.token) == 0)
                                                                    PASM->report->error(".base undefined\n");
                                                                } else { yyval.token = 0; PASM->report->error(".base outside class scope\n"); }
                                                              }
#line 9800 "asmparse.cpp.tab.c"
break;
case 565:
  if (!yytrial)
#line 1515 "asmparse.y"
{ if(PASM->m_pCurClass != NULL) {
                                                                  if(PASM->m_pCurClass->m_pEncloser != NULL) yyval.token = PASM->m_pCurClass->m_pEncloser->m_cl;
                                                                  else { yyval.token = 0; PASM->report->error(".nester undefined\n"); }
                                                                } else { yyval.token = 0; PASM->report->error(".nester outside class scope\n"); }
                                                              }
#line 9810 "asmparse.cpp.tab.c"
break;
case 566:
  if (!yytrial)
#line 1522 "asmparse.y"
{ yyval.string = yyvsp[0].string; }
#line 9816 "asmparse.cpp.tab.c"
break;
case 567:
  if (!yytrial)
#line 1523 "asmparse.y"
{ yyval.string = newStringWDel(yyvsp[-2].string, NESTING_SEP, yyvsp[0].string); }
#line 9822 "asmparse.cpp.tab.c"
break;
case 568:
  if (!yytrial)
#line 1526 "asmparse.y"
{ yyval.token = yyvsp[0].token;}
#line 9828 "asmparse.cpp.tab.c"
break;
case 569:
  if (!yytrial)
#line 1527 "asmparse.y"
{ yyval.token = PASM->GetAsmRef(yyvsp[-1].string); delete[] yyvsp[-1].string;}
#line 9834 "asmparse.cpp.tab.c"
break;
case 570:
  if (!yytrial)
#line 1528 "asmparse.y"
{ yyval.token = PASM->GetModRef(yyvsp[-1].string); delete[] yyvsp[-1].string;}
#line 9840 "asmparse.cpp.tab.c"
break;
case 571:
  if (!yytrial)
#line 1529 "asmparse.y"
{ yyval.token = PASM->ResolveTypeSpec(yyvsp[0].binstr); }
#line 9846 "asmparse.cpp.tab.c"
break;
case 572:
  if (!yytrial)
#line 1533 "asmparse.y"
{ yyval.binstr = new BinStr(); }
#line 9852 "asmparse.cpp.tab.c"
break;
case 573:
  if (!yytrial)
#line 1535 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CUSTOMMARSHALER);
                                                                corEmitInt(yyval.binstr,yyvsp[-7].binstr->length()); yyval.binstr->append(yyvsp[-7].binstr);
                                                                corEmitInt(yyval.binstr,yyvsp[-5].binstr->length()); yyval.binstr->append(yyvsp[-5].binstr);
                                                                corEmitInt(yyval.binstr,yyvsp[-3].binstr->length()); yyval.binstr->append(yyvsp[-3].binstr);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].binstr->length()); yyval.binstr->append(yyvsp[-1].binstr);
                                                                PASM->report->warn("Deprecated 4-string form of custom marshaler, first two strings ignored\n");}
#line 9863 "asmparse.cpp.tab.c"
break;
case 574:
  if (!yytrial)
#line 1542 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CUSTOMMARSHALER);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,yyvsp[-3].binstr->length()); yyval.binstr->append(yyvsp[-3].binstr);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].binstr->length()); yyval.binstr->append(yyvsp[-1].binstr); }
#line 9873 "asmparse.cpp.tab.c"
break;
case 575:
  if (!yytrial)
#line 1547 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FIXEDSYSSTRING);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].int32); }
#line 9880 "asmparse.cpp.tab.c"
break;
case 576:
  if (!yytrial)
#line 1550 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FIXEDARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[-2].int32); yyval.binstr->append(yyvsp[0].binstr); }
#line 9887 "asmparse.cpp.tab.c"
break;
case 577:
  if (!yytrial)
#line 1552 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VARIANT);
                                                                PASM->report->warn("Deprecated native type 'variant'\n"); }
#line 9894 "asmparse.cpp.tab.c"
break;
case 578:
  if (!yytrial)
#line 1554 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CURRENCY); }
#line 9900 "asmparse.cpp.tab.c"
break;
case 579:
  if (!yytrial)
#line 1555 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SYSCHAR);
                                                                PASM->report->warn("Deprecated native type 'syschar'\n"); }
#line 9907 "asmparse.cpp.tab.c"
break;
case 580:
  if (!yytrial)
#line 1557 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VOID);
                                                                PASM->report->warn("Deprecated native type 'void'\n"); }
#line 9914 "asmparse.cpp.tab.c"
break;
case 581:
  if (!yytrial)
#line 1559 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BOOLEAN); }
#line 9920 "asmparse.cpp.tab.c"
break;
case 582:
  if (!yytrial)
#line 1560 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I1); }
#line 9926 "asmparse.cpp.tab.c"
break;
case 583:
  if (!yytrial)
#line 1561 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I2); }
#line 9932 "asmparse.cpp.tab.c"
break;
case 584:
  if (!yytrial)
#line 1562 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I4); }
#line 9938 "asmparse.cpp.tab.c"
break;
case 585:
  if (!yytrial)
#line 1563 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I8); }
#line 9944 "asmparse.cpp.tab.c"
break;
case 586:
  if (!yytrial)
#line 1564 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_R4); }
#line 9950 "asmparse.cpp.tab.c"
break;
case 587:
  if (!yytrial)
#line 1565 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_R8); }
#line 9956 "asmparse.cpp.tab.c"
break;
case 588:
  if (!yytrial)
#line 1566 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ERROR); }
#line 9962 "asmparse.cpp.tab.c"
break;
case 589:
  if (!yytrial)
#line 1567 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U1); }
#line 9968 "asmparse.cpp.tab.c"
break;
case 590:
  if (!yytrial)
#line 1568 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U2); }
#line 9974 "asmparse.cpp.tab.c"
break;
case 591:
  if (!yytrial)
#line 1569 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U4); }
#line 9980 "asmparse.cpp.tab.c"
break;
case 592:
  if (!yytrial)
#line 1570 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U8); }
#line 9986 "asmparse.cpp.tab.c"
break;
case 593:
  if (!yytrial)
#line 1571 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U1); }
#line 9992 "asmparse.cpp.tab.c"
break;
case 594:
  if (!yytrial)
#line 1572 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U2); }
#line 9998 "asmparse.cpp.tab.c"
break;
case 595:
  if (!yytrial)
#line 1573 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U4); }
#line 10004 "asmparse.cpp.tab.c"
break;
case 596:
  if (!yytrial)
#line 1574 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U8); }
#line 10010 "asmparse.cpp.tab.c"
break;
case 597:
  if (!yytrial)
#line 1575 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(NATIVE_TYPE_PTR);
                                                                PASM->report->warn("Deprecated native type '*'\n"); }
#line 10017 "asmparse.cpp.tab.c"
break;
case 598:
  if (!yytrial)
#line 1577 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY); }
#line 10024 "asmparse.cpp.tab.c"
break;
case 599:
  if (!yytrial)
#line 1579 "asmparse.y"
{ yyval.binstr = yyvsp[-3].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].int32);
                                                                corEmitInt(yyval.binstr,0); }
#line 10034 "asmparse.cpp.tab.c"
break;
case 600:
  if (!yytrial)
#line 1584 "asmparse.y"
{ yyval.binstr = yyvsp[-5].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].int32);
                                                                corEmitInt(yyval.binstr,yyvsp[-3].int32);
                                                                corEmitInt(yyval.binstr,ntaSizeParamIndexSpecified); }
#line 10044 "asmparse.cpp.tab.c"
break;
case 601:
  if (!yytrial)
#line 1589 "asmparse.y"
{ yyval.binstr = yyvsp[-4].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[-1].int32); }
#line 10052 "asmparse.cpp.tab.c"
break;
case 602:
  if (!yytrial)
#line 1592 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_DECIMAL);
                                                                PASM->report->warn("Deprecated native type 'decimal'\n"); }
#line 10059 "asmparse.cpp.tab.c"
break;
case 603:
  if (!yytrial)
#line 1594 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_DATE);
                                                                PASM->report->warn("Deprecated native type 'date'\n"); }
#line 10066 "asmparse.cpp.tab.c"
break;
case 604:
  if (!yytrial)
#line 1596 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BSTR); }
#line 10072 "asmparse.cpp.tab.c"
break;
case 605:
  if (!yytrial)
#line 1597 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPSTR); }
#line 10078 "asmparse.cpp.tab.c"
break;
case 606:
  if (!yytrial)
#line 1598 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPWSTR); }
#line 10084 "asmparse.cpp.tab.c"
break;
case 607:
  if (!yytrial)
#line 1599 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPTSTR); }
#line 10090 "asmparse.cpp.tab.c"
break;
case 608:
  if (!yytrial)
#line 1600 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_OBJECTREF);
                                                                PASM->report->warn("Deprecated native type 'objectref'\n"); }
#line 10097 "asmparse.cpp.tab.c"
break;
case 609:
  if (!yytrial)
#line 1602 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_IUNKNOWN);
                                                                if(yyvsp[0].int32 != -1) corEmitInt(yyval.binstr,yyvsp[0].int32); }
#line 10104 "asmparse.cpp.tab.c"
break;
case 610:
  if (!yytrial)
#line 1604 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_IDISPATCH);
                                                                if(yyvsp[0].int32 != -1) corEmitInt(yyval.binstr,yyvsp[0].int32); }
#line 10111 "asmparse.cpp.tab.c"
break;
case 611:
  if (!yytrial)
#line 1606 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_STRUCT); }
#line 10117 "asmparse.cpp.tab.c"
break;
case 612:
  if (!yytrial)
#line 1607 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_INTF);
                                                                if(yyvsp[0].int32 != -1) corEmitInt(yyval.binstr,yyvsp[0].int32); }
#line 10124 "asmparse.cpp.tab.c"
break;
case 613:
  if (!yytrial)
#line 1609 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SAFEARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[0].int32);
                                                                corEmitInt(yyval.binstr,0);}
#line 10132 "asmparse.cpp.tab.c"
break;
case 614:
  if (!yytrial)
#line 1612 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SAFEARRAY);
                                                                corEmitInt(yyval.binstr,yyvsp[-2].int32);
                                                                corEmitInt(yyval.binstr,yyvsp[0].binstr->length()); yyval.binstr->append(yyvsp[0].binstr); }
#line 10140 "asmparse.cpp.tab.c"
break;
case 615:
  if (!yytrial)
#line 1616 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_INT); }
#line 10146 "asmparse.cpp.tab.c"
break;
case 616:
  if (!yytrial)
#line 1617 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_UINT); }
#line 10152 "asmparse.cpp.tab.c"
break;
case 617:
  if (!yytrial)
#line 1618 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_UINT); }
#line 10158 "asmparse.cpp.tab.c"
break;
case 618:
  if (!yytrial)
#line 1619 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_NESTEDSTRUCT);
                                                                PASM->report->warn("Deprecated native type 'nested struct'\n"); }
#line 10165 "asmparse.cpp.tab.c"
break;
case 619:
  if (!yytrial)
#line 1621 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BYVALSTR); }
#line 10171 "asmparse.cpp.tab.c"
break;
case 620:
  if (!yytrial)
#line 1622 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ANSIBSTR); }
#line 10177 "asmparse.cpp.tab.c"
break;
case 621:
  if (!yytrial)
#line 1623 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_TBSTR); }
#line 10183 "asmparse.cpp.tab.c"
break;
case 622:
  if (!yytrial)
#line 1624 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VARIANTBOOL); }
#line 10189 "asmparse.cpp.tab.c"
break;
case 623:
  if (!yytrial)
#line 1625 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FUNC); }
#line 10195 "asmparse.cpp.tab.c"
break;
case 624:
  if (!yytrial)
#line 1626 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ASANY); }
#line 10201 "asmparse.cpp.tab.c"
break;
case 625:
  if (!yytrial)
#line 1627 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPSTRUCT); }
#line 10207 "asmparse.cpp.tab.c"
break;
case 626:
  if (!yytrial)
#line 1628 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yyvsp[0].tdd->m_pbsTypeSpec); }
#line 10213 "asmparse.cpp.tab.c"
break;
case 627:
  if (!yytrial)
#line 1631 "asmparse.y"
{ yyval.int32 = -1; }
#line 10219 "asmparse.cpp.tab.c"
break;
case 628:
  if (!yytrial)
#line 1632 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32; }
#line 10225 "asmparse.cpp.tab.c"
break;
case 629:
  if (!yytrial)
#line 1635 "asmparse.y"
{ yyval.int32 = VT_EMPTY; }
#line 10231 "asmparse.cpp.tab.c"
break;
case 630:
  if (!yytrial)
#line 1636 "asmparse.y"
{ yyval.int32 = VT_NULL; }
#line 10237 "asmparse.cpp.tab.c"
break;
case 631:
  if (!yytrial)
#line 1637 "asmparse.y"
{ yyval.int32 = VT_VARIANT; }
#line 10243 "asmparse.cpp.tab.c"
break;
case 632:
  if (!yytrial)
#line 1638 "asmparse.y"
{ yyval.int32 = VT_CY; }
#line 10249 "asmparse.cpp.tab.c"
break;
case 633:
  if (!yytrial)
#line 1639 "asmparse.y"
{ yyval.int32 = VT_VOID; }
#line 10255 "asmparse.cpp.tab.c"
break;
case 634:
  if (!yytrial)
#line 1640 "asmparse.y"
{ yyval.int32 = VT_BOOL; }
#line 10261 "asmparse.cpp.tab.c"
break;
case 635:
  if (!yytrial)
#line 1641 "asmparse.y"
{ yyval.int32 = VT_I1; }
#line 10267 "asmparse.cpp.tab.c"
break;
case 636:
  if (!yytrial)
#line 1642 "asmparse.y"
{ yyval.int32 = VT_I2; }
#line 10273 "asmparse.cpp.tab.c"
break;
case 637:
  if (!yytrial)
#line 1643 "asmparse.y"
{ yyval.int32 = VT_I4; }
#line 10279 "asmparse.cpp.tab.c"
break;
case 638:
  if (!yytrial)
#line 1644 "asmparse.y"
{ yyval.int32 = VT_I8; }
#line 10285 "asmparse.cpp.tab.c"
break;
case 639:
  if (!yytrial)
#line 1645 "asmparse.y"
{ yyval.int32 = VT_R4; }
#line 10291 "asmparse.cpp.tab.c"
break;
case 640:
  if (!yytrial)
#line 1646 "asmparse.y"
{ yyval.int32 = VT_R8; }
#line 10297 "asmparse.cpp.tab.c"
break;
case 641:
  if (!yytrial)
#line 1647 "asmparse.y"
{ yyval.int32 = VT_UI1; }
#line 10303 "asmparse.cpp.tab.c"
break;
case 642:
  if (!yytrial)
#line 1648 "asmparse.y"
{ yyval.int32 = VT_UI2; }
#line 10309 "asmparse.cpp.tab.c"
break;
case 643:
  if (!yytrial)
#line 1649 "asmparse.y"
{ yyval.int32 = VT_UI4; }
#line 10315 "asmparse.cpp.tab.c"
break;
case 644:
  if (!yytrial)
#line 1650 "asmparse.y"
{ yyval.int32 = VT_UI8; }
#line 10321 "asmparse.cpp.tab.c"
break;
case 645:
  if (!yytrial)
#line 1651 "asmparse.y"
{ yyval.int32 = VT_UI1; }
#line 10327 "asmparse.cpp.tab.c"
break;
case 646:
  if (!yytrial)
#line 1652 "asmparse.y"
{ yyval.int32 = VT_UI2; }
#line 10333 "asmparse.cpp.tab.c"
break;
case 647:
  if (!yytrial)
#line 1653 "asmparse.y"
{ yyval.int32 = VT_UI4; }
#line 10339 "asmparse.cpp.tab.c"
break;
case 648:
  if (!yytrial)
#line 1654 "asmparse.y"
{ yyval.int32 = VT_UI8; }
#line 10345 "asmparse.cpp.tab.c"
break;
case 649:
  if (!yytrial)
#line 1655 "asmparse.y"
{ yyval.int32 = VT_PTR; }
#line 10351 "asmparse.cpp.tab.c"
break;
case 650:
  if (!yytrial)
#line 1656 "asmparse.y"
{ yyval.int32 = yyvsp[-2].int32 | VT_ARRAY; }
#line 10357 "asmparse.cpp.tab.c"
break;
case 651:
  if (!yytrial)
#line 1657 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | VT_VECTOR; }
#line 10363 "asmparse.cpp.tab.c"
break;
case 652:
  if (!yytrial)
#line 1658 "asmparse.y"
{ yyval.int32 = yyvsp[-1].int32 | VT_BYREF; }
#line 10369 "asmparse.cpp.tab.c"
break;
case 653:
  if (!yytrial)
#line 1659 "asmparse.y"
{ yyval.int32 = VT_DECIMAL; }
#line 10375 "asmparse.cpp.tab.c"
break;
case 654:
  if (!yytrial)
#line 1660 "asmparse.y"
{ yyval.int32 = VT_DATE; }
#line 10381 "asmparse.cpp.tab.c"
break;
case 655:
  if (!yytrial)
#line 1661 "asmparse.y"
{ yyval.int32 = VT_BSTR; }
#line 10387 "asmparse.cpp.tab.c"
break;
case 656:
  if (!yytrial)
#line 1662 "asmparse.y"
{ yyval.int32 = VT_LPSTR; }
#line 10393 "asmparse.cpp.tab.c"
break;
case 657:
  if (!yytrial)
#line 1663 "asmparse.y"
{ yyval.int32 = VT_LPWSTR; }
#line 10399 "asmparse.cpp.tab.c"
break;
case 658:
  if (!yytrial)
#line 1664 "asmparse.y"
{ yyval.int32 = VT_UNKNOWN; }
#line 10405 "asmparse.cpp.tab.c"
break;
case 659:
  if (!yytrial)
#line 1665 "asmparse.y"
{ yyval.int32 = VT_DISPATCH; }
#line 10411 "asmparse.cpp.tab.c"
break;
case 660:
  if (!yytrial)
#line 1666 "asmparse.y"
{ yyval.int32 = VT_SAFEARRAY; }
#line 10417 "asmparse.cpp.tab.c"
break;
case 661:
  if (!yytrial)
#line 1667 "asmparse.y"
{ yyval.int32 = VT_INT; }
#line 10423 "asmparse.cpp.tab.c"
break;
case 662:
  if (!yytrial)
#line 1668 "asmparse.y"
{ yyval.int32 = VT_UINT; }
#line 10429 "asmparse.cpp.tab.c"
break;
case 663:
  if (!yytrial)
#line 1669 "asmparse.y"
{ yyval.int32 = VT_UINT; }
#line 10435 "asmparse.cpp.tab.c"
break;
case 664:
  if (!yytrial)
#line 1670 "asmparse.y"
{ yyval.int32 = VT_ERROR; }
#line 10441 "asmparse.cpp.tab.c"
break;
case 665:
  if (!yytrial)
#line 1671 "asmparse.y"
{ yyval.int32 = VT_HRESULT; }
#line 10447 "asmparse.cpp.tab.c"
break;
case 666:
  if (!yytrial)
#line 1672 "asmparse.y"
{ yyval.int32 = VT_CARRAY; }
#line 10453 "asmparse.cpp.tab.c"
break;
case 667:
  if (!yytrial)
#line 1673 "asmparse.y"
{ yyval.int32 = VT_USERDEFINED; }
#line 10459 "asmparse.cpp.tab.c"
break;
case 668:
  if (!yytrial)
#line 1674 "asmparse.y"
{ yyval.int32 = VT_RECORD; }
#line 10465 "asmparse.cpp.tab.c"
break;
case 669:
  if (!yytrial)
#line 1675 "asmparse.y"
{ yyval.int32 = VT_FILETIME; }
#line 10471 "asmparse.cpp.tab.c"
break;
case 670:
  if (!yytrial)
#line 1676 "asmparse.y"
{ yyval.int32 = VT_BLOB; }
#line 10477 "asmparse.cpp.tab.c"
break;
case 671:
  if (!yytrial)
#line 1677 "asmparse.y"
{ yyval.int32 = VT_STREAM; }
#line 10483 "asmparse.cpp.tab.c"
break;
case 672:
  if (!yytrial)
#line 1678 "asmparse.y"
{ yyval.int32 = VT_STORAGE; }
#line 10489 "asmparse.cpp.tab.c"
break;
case 673:
  if (!yytrial)
#line 1679 "asmparse.y"
{ yyval.int32 = VT_STREAMED_OBJECT; }
#line 10495 "asmparse.cpp.tab.c"
break;
case 674:
  if (!yytrial)
#line 1680 "asmparse.y"
{ yyval.int32 = VT_STORED_OBJECT; }
#line 10501 "asmparse.cpp.tab.c"
break;
case 675:
  if (!yytrial)
#line 1681 "asmparse.y"
{ yyval.int32 = VT_BLOB_OBJECT; }
#line 10507 "asmparse.cpp.tab.c"
break;
case 676:
  if (!yytrial)
#line 1682 "asmparse.y"
{ yyval.int32 = VT_CF; }
#line 10513 "asmparse.cpp.tab.c"
break;
case 677:
  if (!yytrial)
#line 1683 "asmparse.y"
{ yyval.int32 = VT_CLSID; }
#line 10519 "asmparse.cpp.tab.c"
break;
case 678:
  if (!yytrial)
#line 1687 "asmparse.y"
{ if(yyvsp[0].token == PASM->m_tkSysString)
                                                                {     yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); }
                                                                else if(yyvsp[0].token == PASM->m_tkSysObject)
                                                                {     yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_OBJECT); }
                                                                else
                                                                 yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CLASS, yyvsp[0].token); }
#line 10530 "asmparse.cpp.tab.c"
break;
case 679:
  if (!yytrial)
#line 1693 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_OBJECT); }
#line 10536 "asmparse.cpp.tab.c"
break;
case 680:
  if (!yytrial)
#line 1694 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_VALUETYPE, yyvsp[0].token); }
#line 10542 "asmparse.cpp.tab.c"
break;
case 681:
  if (!yytrial)
#line 1695 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_VALUETYPE, yyvsp[0].token); }
#line 10548 "asmparse.cpp.tab.c"
break;
case 682:
  if (!yytrial)
#line 1696 "asmparse.y"
{ yyval.binstr = parser->MakeConstTypeClass(yyvsp[0].binstr); }
#line 10554 "asmparse.cpp.tab.c"
break;
case 683:
  if (!yytrial)
#line 1697 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 10560 "asmparse.cpp.tab.c"
break;
case 684:
  if (!yytrial)
#line 1698 "asmparse.y"
{ yyval.binstr = parser->MakeTypeArray(ELEMENT_TYPE_ARRAY, yyvsp[-3].binstr, yyvsp[-1].binstr); }
#line 10566 "asmparse.cpp.tab.c"
break;
case 685:
  if (!yytrial)
#line 1699 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_BYREF); }
#line 10572 "asmparse.cpp.tab.c"
break;
case 686:
  if (!yytrial)
#line 1700 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_PTR); }
#line 10578 "asmparse.cpp.tab.c"
break;
case 687:
  if (!yytrial)
#line 1701 "asmparse.y"
{ yyval.binstr = yyvsp[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_PINNED); }
#line 10584 "asmparse.cpp.tab.c"
break;
case 688:
  if (!yytrial)
#line 1702 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CMOD_REQD, yyvsp[-1].token);
                                                                yyval.binstr->append(yyvsp[-4].binstr); }
#line 10591 "asmparse.cpp.tab.c"
break;
case 689:
  if (!yytrial)
#line 1704 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CMOD_OPT, yyvsp[-1].token);
                                                                yyval.binstr->append(yyvsp[-4].binstr); }
#line 10598 "asmparse.cpp.tab.c"
break;
case 690:
  if (!yytrial)
#line 1707 "asmparse.y"
{ yyval.binstr = parser->MakeSig(yyvsp[-5].int32, yyvsp[-4].binstr, yyvsp[-1].binstr);
                                                                yyval.binstr->insertInt8(ELEMENT_TYPE_FNPTR);
                                                                PASM->delArgNameList(PASM->m_firstArgName);
                                                                PASM->m_firstArgName = parser->m_ANSFirst.POP();
                                                                PASM->m_lastArgName = parser->m_ANSLast.POP();
                                                              }
#line 10609 "asmparse.cpp.tab.c"
break;
case 691:
  if (!yytrial)
#line 1713 "asmparse.y"
{ if(yyvsp[-1].binstr == NULL) yyval.binstr = yyvsp[-3].binstr;
                                                                else {
                                                                  yyval.binstr = new BinStr();
                                                                  yyval.binstr->appendInt8(ELEMENT_TYPE_GENERICINST);
                                                                  yyval.binstr->append(yyvsp[-3].binstr);
                                                                  corEmitInt(yyval.binstr, corCountArgs(yyvsp[-1].binstr));
                                                                  yyval.binstr->append(yyvsp[-1].binstr); delete yyvsp[-3].binstr; delete yyvsp[-1].binstr; }}
#line 10621 "asmparse.cpp.tab.c"
break;
case 692:
  if (!yytrial)
#line 1720 "asmparse.y"
{
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_MCVAR); corEmitInt(yyval.binstr, yyvsp[0].int32);
                                                              }
#line 10629 "asmparse.cpp.tab.c"
break;
case 693:
  if (!yytrial)
#line 1723 "asmparse.y"
{ /*if(PASM->m_pCurMethod)  {*/
                                                                /*  if(($3 < 0)||((DWORD)$3 >= PASM->m_pCurMethod->m_NumTyPars))*/
                                                                /*    PASM->report->error("Invalid method type parameter '%d'\n",$3);*/
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_MVAR); corEmitInt(yyval.binstr, yyvsp[0].int32);
                                                                /*} else PASM->report->error("Method type parameter '%d' outside method scope\n",$3);*/
                                                              }
#line 10640 "asmparse.cpp.tab.c"
break;
case 694:
  if (!yytrial)
#line 1729 "asmparse.y"
{
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CVAR); corEmitInt(yyval.binstr, yyvsp[0].int32);
                                                              }
#line 10648 "asmparse.cpp.tab.c"
break;
case 695:
  if (!yytrial)
#line 1732 "asmparse.y"
{ /*if(PASM->m_pCurClass)  {*/
                                                                /*  if(($2 < 0)||((DWORD)$2 >= PASM->m_pCurClass->m_NumTyPars))*/
                                                                /*    PASM->report->error("Invalid type parameter '%d'\n",$2);*/
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_VAR); corEmitInt(yyval.binstr, yyvsp[0].int32);
                                                                /*} else PASM->report->error("Type parameter '%d' outside class scope\n",$2);*/
                                                              }
#line 10659 "asmparse.cpp.tab.c"
break;
case 696:
  if (!yytrial)
#line 1738 "asmparse.y"
{ int eltype = ELEMENT_TYPE_MCVAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurMethod) n = PASM->m_pCurMethod->FindTyPar(yyvsp[0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yyvsp[0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yyvsp[0].string);
                                                                    eltype = ELEMENT_TYPE_MCVARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid method const type parameter '%s'\n",yyvsp[0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n);
                                                              }
#line 10679 "asmparse.cpp.tab.c"
break;
case 697:
  if (!yytrial)
#line 1753 "asmparse.y"
{ int eltype = ELEMENT_TYPE_MVAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurMethod) n = PASM->m_pCurMethod->FindTyPar(yyvsp[0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yyvsp[0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yyvsp[0].string);
                                                                    eltype = ELEMENT_TYPE_MVARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid method type parameter '%s'\n",yyvsp[0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n);
                                                              }
#line 10699 "asmparse.cpp.tab.c"
break;
case 698:
  if (!yytrial)
#line 1768 "asmparse.y"
{ int eltype = ELEMENT_TYPE_CVAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurClass && !newclass) n = PASM->m_pCurClass->FindTyPar(yyvsp[0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yyvsp[0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yyvsp[0].string);
                                                                    eltype = ELEMENT_TYPE_CVARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid const type parameter '%s'\n",yyvsp[0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n);
                                                              }
#line 10719 "asmparse.cpp.tab.c"
break;
case 699:
  if (!yytrial)
#line 1783 "asmparse.y"
{ int eltype = ELEMENT_TYPE_VAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurClass && !newclass) n = PASM->m_pCurClass->FindTyPar(yyvsp[0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yyvsp[0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yyvsp[0].string);
                                                                    eltype = ELEMENT_TYPE_VARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid type parameter '%s'\n",yyvsp[0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n);
                                                              }
#line 10739 "asmparse.cpp.tab.c"
break;
case 700:
  if (!yytrial)
#line 1798 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_TYPEDBYREF); }
#line 10745 "asmparse.cpp.tab.c"
break;
case 701:
  if (!yytrial)
#line 1799 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_VOID); }
#line 10751 "asmparse.cpp.tab.c"
break;
case 702:
  if (!yytrial)
#line 1800 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I); }
#line 10757 "asmparse.cpp.tab.c"
break;
case 703:
  if (!yytrial)
#line 1801 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U); }
#line 10763 "asmparse.cpp.tab.c"
break;
case 704:
  if (!yytrial)
#line 1802 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U); }
#line 10769 "asmparse.cpp.tab.c"
break;
case 705:
  if (!yytrial)
#line 1803 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 10775 "asmparse.cpp.tab.c"
break;
case 706:
  if (!yytrial)
#line 1804 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SENTINEL); }
#line 10781 "asmparse.cpp.tab.c"
break;
case 707:
  if (!yytrial)
#line 1807 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CHAR); }
#line 10787 "asmparse.cpp.tab.c"
break;
case 708:
  if (!yytrial)
#line 1808 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); }
#line 10793 "asmparse.cpp.tab.c"
break;
case 709:
  if (!yytrial)
#line 1809 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_BOOLEAN); }
#line 10799 "asmparse.cpp.tab.c"
break;
case 710:
  if (!yytrial)
#line 1810 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I1); }
#line 10805 "asmparse.cpp.tab.c"
break;
case 711:
  if (!yytrial)
#line 1811 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I2); }
#line 10811 "asmparse.cpp.tab.c"
break;
case 712:
  if (!yytrial)
#line 1812 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I4); }
#line 10817 "asmparse.cpp.tab.c"
break;
case 713:
  if (!yytrial)
#line 1813 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I8); }
#line 10823 "asmparse.cpp.tab.c"
break;
case 714:
  if (!yytrial)
#line 1814 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4); }
#line 10829 "asmparse.cpp.tab.c"
break;
case 715:
  if (!yytrial)
#line 1815 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8); }
#line 10835 "asmparse.cpp.tab.c"
break;
case 716:
  if (!yytrial)
#line 1816 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1); }
#line 10841 "asmparse.cpp.tab.c"
break;
case 717:
  if (!yytrial)
#line 1817 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2); }
#line 10847 "asmparse.cpp.tab.c"
break;
case 718:
  if (!yytrial)
#line 1818 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4); }
#line 10853 "asmparse.cpp.tab.c"
break;
case 719:
  if (!yytrial)
#line 1819 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8); }
#line 10859 "asmparse.cpp.tab.c"
break;
case 720:
  if (!yytrial)
#line 1820 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1); }
#line 10865 "asmparse.cpp.tab.c"
break;
case 721:
  if (!yytrial)
#line 1821 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2); }
#line 10871 "asmparse.cpp.tab.c"
break;
case 722:
  if (!yytrial)
#line 1822 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4); }
#line 10877 "asmparse.cpp.tab.c"
break;
case 723:
  if (!yytrial)
#line 1823 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8); }
#line 10883 "asmparse.cpp.tab.c"
break;
case 724:
  if (!yytrial)
#line 1824 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yyvsp[0].tdd->m_pbsTypeSpec); }
#line 10889 "asmparse.cpp.tab.c"
break;
case 725:
  if (!yytrial)
#line 1827 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; }
#line 10895 "asmparse.cpp.tab.c"
break;
case 726:
  if (!yytrial)
#line 1828 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyvsp[-2].binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr; }
#line 10901 "asmparse.cpp.tab.c"
break;
case 727:
  if (!yytrial)
#line 1831 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0x7FFFFFFF); yyval.binstr->appendInt32(0x7FFFFFFF);  }
#line 10907 "asmparse.cpp.tab.c"
break;
case 728:
  if (!yytrial)
#line 1832 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0x7FFFFFFF); yyval.binstr->appendInt32(0x7FFFFFFF);  }
#line 10913 "asmparse.cpp.tab.c"
break;
case 729:
  if (!yytrial)
#line 1833 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0); yyval.binstr->appendInt32(yyvsp[0].int32); }
#line 10919 "asmparse.cpp.tab.c"
break;
case 730:
  if (!yytrial)
#line 1834 "asmparse.y"
{ FAIL_UNLESS(yyvsp[-2].int32 <= yyvsp[0].int32, ("lower bound %d must be <= upper bound %d\n", yyvsp[-2].int32, yyvsp[0].int32));
                                                                if (yyvsp[-2].int32 > yyvsp[0].int32) { YYERROR; };
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yyvsp[-2].int32); yyval.binstr->appendInt32(yyvsp[0].int32-yyvsp[-2].int32+1); }
#line 10927 "asmparse.cpp.tab.c"
break;
case 731:
  if (!yytrial)
#line 1837 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yyvsp[-1].int32); yyval.binstr->appendInt32(0x7FFFFFFF); }
#line 10933 "asmparse.cpp.tab.c"
break;
case 732:
  if (!yytrial)
#line 1842 "asmparse.y"
{ PASM->AddPermissionDecl(yyvsp[-4].secAct, yyvsp[-3].token, yyvsp[-1].pair); }
#line 10939 "asmparse.cpp.tab.c"
break;
case 733:
  if (!yytrial)
#line 1844 "asmparse.y"
{ PASM->AddPermissionDecl(yyvsp[-5].secAct, yyvsp[-4].token, yyvsp[-1].binstr); }
#line 10945 "asmparse.cpp.tab.c"
break;
case 734:
  if (!yytrial)
#line 1845 "asmparse.y"
{ PASM->AddPermissionDecl(yyvsp[-1].secAct, yyvsp[0].token, (NVPair *)NULL); }
#line 10951 "asmparse.cpp.tab.c"
break;
case 735:
  if (!yytrial)
#line 1846 "asmparse.y"
{ PASM->AddPermissionSetDecl(yyvsp[-2].secAct, yyvsp[-1].binstr); }
#line 10957 "asmparse.cpp.tab.c"
break;
case 736:
  if (!yytrial)
#line 1848 "asmparse.y"
{ PASM->AddPermissionSetDecl(yyvsp[-1].secAct,BinStrToUnicode(yyvsp[0].binstr,true));}
#line 10963 "asmparse.cpp.tab.c"
break;
case 737:
  if (!yytrial)
#line 1850 "asmparse.y"
{ BinStr* ret = new BinStr();
                                                                ret->insertInt8('.');
                                                                corEmitInt(ret, nSecAttrBlobs);
                                                                ret->append(yyvsp[-1].binstr);
                                                                PASM->AddPermissionSetDecl(yyvsp[-4].secAct,ret);
                                                                nSecAttrBlobs = 0; }
#line 10974 "asmparse.cpp.tab.c"
break;
case 738:
  if (!yytrial)
#line 1858 "asmparse.y"
{ yyval.binstr = new BinStr(); nSecAttrBlobs = 0;}
#line 10980 "asmparse.cpp.tab.c"
break;
case 739:
  if (!yytrial)
#line 1859 "asmparse.y"
{ yyval.binstr = yyvsp[0].binstr; nSecAttrBlobs = 1; }
#line 10986 "asmparse.cpp.tab.c"
break;
case 740:
  if (!yytrial)
#line 1860 "asmparse.y"
{ yyval.binstr = yyvsp[-2].binstr; yyval.binstr->append(yyvsp[0].binstr); nSecAttrBlobs++; }
#line 10992 "asmparse.cpp.tab.c"
break;
case 741:
  if (!yytrial)
#line 1864 "asmparse.y"
{ yyval.binstr = PASM->EncodeSecAttr(PASM->ReflectionNotation(yyvsp[-4].token),yyvsp[-1].binstr,nCustomBlobNVPairs);
                                                                nCustomBlobNVPairs = 0; }
#line 10999 "asmparse.cpp.tab.c"
break;
case 742:
  if (!yytrial)
#line 1867 "asmparse.y"
{ yyval.binstr = PASM->EncodeSecAttr(yyvsp[-4].string,yyvsp[-1].binstr,nCustomBlobNVPairs);
                                                                nCustomBlobNVPairs = 0; }
#line 11006 "asmparse.cpp.tab.c"
break;
case 743:
  if (!yytrial)
#line 1871 "asmparse.y"
{ yyval.secAct = yyvsp[-2].secAct; bParsingByteArray = TRUE; }
#line 11012 "asmparse.cpp.tab.c"
break;
case 744:
  if (!yytrial)
#line 1873 "asmparse.y"
{ yyval.secAct = yyvsp[-2].secAct; bParsingByteArray = TRUE; }
#line 11018 "asmparse.cpp.tab.c"
break;
case 745:
  if (!yytrial)
#line 1876 "asmparse.y"
{ yyval.pair = yyvsp[0].pair; }
#line 11024 "asmparse.cpp.tab.c"
break;
case 746:
  if (!yytrial)
#line 1877 "asmparse.y"
{ yyval.pair = yyvsp[-2].pair->Concat(yyvsp[0].pair); }
#line 11030 "asmparse.cpp.tab.c"
break;
case 747:
  if (!yytrial)
#line 1880 "asmparse.y"
{ yyvsp[-2].binstr->appendInt8(0); yyval.pair = new NVPair(yyvsp[-2].binstr, yyvsp[0].binstr); }
#line 11036 "asmparse.cpp.tab.c"
break;
case 748:
  if (!yytrial)
#line 1883 "asmparse.y"
{ yyval.int32 = 1; }
#line 11042 "asmparse.cpp.tab.c"
break;
case 749:
  if (!yytrial)
#line 1884 "asmparse.y"
{ yyval.int32 = 0; }
#line 11048 "asmparse.cpp.tab.c"
break;
case 750:
  if (!yytrial)
#line 1887 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_BOOLEAN);
                                                                yyval.binstr->appendInt8(yyvsp[0].int32); }
#line 11056 "asmparse.cpp.tab.c"
break;
case 751:
  if (!yytrial)
#line 1890 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_I4);
                                                                yyval.binstr->appendInt32(yyvsp[0].int32); }
#line 11064 "asmparse.cpp.tab.c"
break;
case 752:
  if (!yytrial)
#line 1893 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_I4);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 11072 "asmparse.cpp.tab.c"
break;
case 753:
  if (!yytrial)
#line 1896 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_STRING);
                                                                yyval.binstr->append(yyvsp[0].binstr); delete yyvsp[0].binstr;
                                                                yyval.binstr->appendInt8(0); }
#line 11081 "asmparse.cpp.tab.c"
break;
case 754:
  if (!yytrial)
#line 1900 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yyvsp[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(1);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 11092 "asmparse.cpp.tab.c"
break;
case 755:
  if (!yytrial)
#line 1906 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yyvsp[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(2);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 11103 "asmparse.cpp.tab.c"
break;
case 756:
  if (!yytrial)
#line 1912 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yyvsp[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(4);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 11114 "asmparse.cpp.tab.c"
break;
case 757:
  if (!yytrial)
#line 1918 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yyvsp[-3].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(4);
                                                                yyval.binstr->appendInt32(yyvsp[-1].int32); }
#line 11125 "asmparse.cpp.tab.c"
break;
case 758:
  if (!yytrial)
#line 1926 "asmparse.y"
{ yyval.secAct = dclRequest; }
#line 11131 "asmparse.cpp.tab.c"
break;
case 759:
  if (!yytrial)
#line 1927 "asmparse.y"
{ yyval.secAct = dclDemand; }
#line 11137 "asmparse.cpp.tab.c"
break;
case 760:
  if (!yytrial)
#line 1928 "asmparse.y"
{ yyval.secAct = dclAssert; }
#line 11143 "asmparse.cpp.tab.c"
break;
case 761:
  if (!yytrial)
#line 1929 "asmparse.y"
{ yyval.secAct = dclDeny; }
#line 11149 "asmparse.cpp.tab.c"
break;
case 762:
  if (!yytrial)
#line 1930 "asmparse.y"
{ yyval.secAct = dclPermitOnly; }
#line 11155 "asmparse.cpp.tab.c"
break;
case 763:
  if (!yytrial)
#line 1931 "asmparse.y"
{ yyval.secAct = dclLinktimeCheck; }
#line 11161 "asmparse.cpp.tab.c"
break;
case 764:
  if (!yytrial)
#line 1932 "asmparse.y"
{ yyval.secAct = dclInheritanceCheck; }
#line 11167 "asmparse.cpp.tab.c"
break;
case 765:
  if (!yytrial)
#line 1933 "asmparse.y"
{ yyval.secAct = dclRequestMinimum; }
#line 11173 "asmparse.cpp.tab.c"
break;
case 766:
  if (!yytrial)
#line 1934 "asmparse.y"
{ yyval.secAct = dclRequestOptional; }
#line 11179 "asmparse.cpp.tab.c"
break;
case 767:
  if (!yytrial)
#line 1935 "asmparse.y"
{ yyval.secAct = dclRequestRefuse; }
#line 11185 "asmparse.cpp.tab.c"
break;
case 768:
  if (!yytrial)
#line 1936 "asmparse.y"
{ yyval.secAct = dclPrejitGrant; }
#line 11191 "asmparse.cpp.tab.c"
break;
case 769:
  if (!yytrial)
#line 1937 "asmparse.y"
{ yyval.secAct = dclPrejitDenied; }
#line 11197 "asmparse.cpp.tab.c"
break;
case 770:
  if (!yytrial)
#line 1938 "asmparse.y"
{ yyval.secAct = dclNonCasDemand; }
#line 11203 "asmparse.cpp.tab.c"
break;
case 771:
  if (!yytrial)
#line 1939 "asmparse.y"
{ yyval.secAct = dclNonCasLinkDemand; }
#line 11209 "asmparse.cpp.tab.c"
break;
case 772:
  if (!yytrial)
#line 1940 "asmparse.y"
{ yyval.secAct = dclNonCasInheritance; }
#line 11215 "asmparse.cpp.tab.c"
break;
case 773:
  if (!yytrial)
#line 1944 "asmparse.y"
{ PASM->ResetLineNumbers(); nCurrPC = PASM->m_CurPC; PENV->bExternSource = TRUE; PENV->bExternSourceAutoincrement = FALSE; }
#line 11221 "asmparse.cpp.tab.c"
break;
case 774:
  if (!yytrial)
#line 1945 "asmparse.y"
{ PASM->ResetLineNumbers(); nCurrPC = PASM->m_CurPC; PENV->bExternSource = TRUE; PENV->bExternSourceAutoincrement = TRUE; }
#line 11227 "asmparse.cpp.tab.c"
break;
case 775:
  if (!yytrial)
#line 1948 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-1].int32;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd  = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 11235 "asmparse.cpp.tab.c"
break;
case 776:
  if (!yytrial)
#line 1951 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[0].int32;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd  = static_cast<unsigned>(-1); }
#line 11242 "asmparse.cpp.tab.c"
break;
case 777:
  if (!yytrial)
#line 1953 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-3].int32;
                                                                PENV->nExtCol=yyvsp[-1].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 11250 "asmparse.cpp.tab.c"
break;
case 778:
  if (!yytrial)
#line 1956 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-2].int32;
                                                                PENV->nExtCol=yyvsp[0].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);}
#line 11257 "asmparse.cpp.tab.c"
break;
case 779:
  if (!yytrial)
#line 1959 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-5].int32;
                                                                PENV->nExtCol=yyvsp[-3].int32; PENV->nExtColEnd = yyvsp[-1].int32;
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 11265 "asmparse.cpp.tab.c"
break;
case 780:
  if (!yytrial)
#line 1963 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-4].int32;
                                                                PENV->nExtCol=yyvsp[-2].int32; PENV->nExtColEnd = yyvsp[0].int32; }
#line 11272 "asmparse.cpp.tab.c"
break;
case 781:
  if (!yytrial)
#line 1966 "asmparse.y"
{ PENV->nExtLine = yyvsp[-5].int32; PENV->nExtLineEnd = yyvsp[-3].int32;
                                                                PENV->nExtCol=yyvsp[-1].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 11280 "asmparse.cpp.tab.c"
break;
case 782:
  if (!yytrial)
#line 1970 "asmparse.y"
{ PENV->nExtLine = yyvsp[-4].int32; PENV->nExtLineEnd = yyvsp[-2].int32;
                                                                PENV->nExtCol=yyvsp[0].int32; PENV->nExtColEnd = static_cast<unsigned>(-1); }
#line 11287 "asmparse.cpp.tab.c"
break;
case 783:
  if (!yytrial)
#line 1973 "asmparse.y"
{ PENV->nExtLine = yyvsp[-7].int32; PENV->nExtLineEnd = yyvsp[-5].int32;
                                                                PENV->nExtCol=yyvsp[-3].int32; PENV->nExtColEnd = yyvsp[-1].int32;
                                                                PASM->SetSourceFileName(yyvsp[0].string);}
#line 11295 "asmparse.cpp.tab.c"
break;
case 784:
  if (!yytrial)
#line 1977 "asmparse.y"
{ PENV->nExtLine = yyvsp[-6].int32; PENV->nExtLineEnd = yyvsp[-4].int32;
                                                                PENV->nExtCol=yyvsp[-2].int32; PENV->nExtColEnd = yyvsp[0].int32; }
#line 11302 "asmparse.cpp.tab.c"
break;
case 785:
  if (!yytrial)
#line 1979 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yyvsp[-1].int32 - 1;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yyvsp[0].binstr);}
#line 11310 "asmparse.cpp.tab.c"
break;
case 786:
  if (!yytrial)
#line 1986 "asmparse.y"
{ PASMM->AddFile(yyvsp[-5].string, yyvsp[-6].fileAttr|yyvsp[-4].fileAttr|yyvsp[0].fileAttr, yyvsp[-2].binstr); }
#line 11316 "asmparse.cpp.tab.c"
break;
case 787:
  if (!yytrial)
#line 1987 "asmparse.y"
{ PASMM->AddFile(yyvsp[-1].string, yyvsp[-2].fileAttr|yyvsp[0].fileAttr, NULL); }
#line 11322 "asmparse.cpp.tab.c"
break;
case 788:
  if (!yytrial)
#line 1990 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) 0; }
#line 11328 "asmparse.cpp.tab.c"
break;
case 789:
  if (!yytrial)
#line 1991 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) (yyvsp[-1].fileAttr | ffContainsNoMetaData); }
#line 11334 "asmparse.cpp.tab.c"
break;
case 790:
  if (!yytrial)
#line 1994 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) 0; }
#line 11340 "asmparse.cpp.tab.c"
break;
case 791:
  if (!yytrial)
#line 1995 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) 0x80000000; }
#line 11346 "asmparse.cpp.tab.c"
break;
case 792:
  if (!yytrial)
#line 1998 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 11352 "asmparse.cpp.tab.c"
break;
case 793:
  if (!yytrial)
#line 2001 "asmparse.y"
{ PASMM->StartAssembly(yyvsp[0].string, NULL, (DWORD)yyvsp[-1].asmAttr, FALSE); }
#line 11358 "asmparse.cpp.tab.c"
break;
case 794:
  if (!yytrial)
#line 2004 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) 0; }
#line 11364 "asmparse.cpp.tab.c"
break;
case 795:
  if (!yytrial)
#line 2005 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) (yyvsp[-1].asmAttr | afRetargetable); }
#line 11370 "asmparse.cpp.tab.c"
break;
case 796:
  if (!yytrial)
#line 2006 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) (yyvsp[-1].asmAttr | afContentType_WindowsRuntime); }
#line 11376 "asmparse.cpp.tab.c"
break;
case 797:
  if (!yytrial)
#line 2007 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) (yyvsp[-1].asmAttr | afPA_NoPlatform); }
#line 11382 "asmparse.cpp.tab.c"
break;
case 798:
  if (!yytrial)
#line 2008 "asmparse.y"
{ yyval.asmAttr = yyvsp[-2].asmAttr; }
#line 11388 "asmparse.cpp.tab.c"
break;
case 799:
  if (!yytrial)
#line 2009 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_MSIL); }
#line 11394 "asmparse.cpp.tab.c"
break;
case 800:
  if (!yytrial)
#line 2010 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_x86); }
#line 11400 "asmparse.cpp.tab.c"
break;
case 801:
  if (!yytrial)
#line 2011 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_AMD64); }
#line 11406 "asmparse.cpp.tab.c"
break;
case 802:
  if (!yytrial)
#line 2012 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_ARM); }
#line 11412 "asmparse.cpp.tab.c"
break;
case 803:
  if (!yytrial)
#line 2013 "asmparse.y"
{ SET_PA(yyval.asmAttr,yyvsp[-1].asmAttr,afPA_ARM64); }
#line 11418 "asmparse.cpp.tab.c"
break;
case 806:
  if (!yytrial)
#line 2020 "asmparse.y"
{ PASMM->SetAssemblyHashAlg(yyvsp[0].int32); }
#line 11424 "asmparse.cpp.tab.c"
break;
case 809:
  if (!yytrial)
#line 2025 "asmparse.y"
{ yyval.int32 = yyvsp[0].int32; }
#line 11430 "asmparse.cpp.tab.c"
break;
case 810:
  if (!yytrial)
#line 2026 "asmparse.y"
{ yyval.int32 = 0xFFFF; }
#line 11436 "asmparse.cpp.tab.c"
break;
case 811:
  if (!yytrial)
#line 2029 "asmparse.y"
{ PASMM->SetAssemblyPublicKey(yyvsp[-1].binstr); }
#line 11442 "asmparse.cpp.tab.c"
break;
case 812:
  if (!yytrial)
#line 2031 "asmparse.y"
{ PASMM->SetAssemblyVer((USHORT)yyvsp[-6].int32, (USHORT)yyvsp[-4].int32, (USHORT)yyvsp[-2].int32, (USHORT)yyvsp[0].int32); }
#line 11448 "asmparse.cpp.tab.c"
break;
case 813:
  if (!yytrial)
#line 2032 "asmparse.y"
{ yyvsp[0].binstr->appendInt8(0); PASMM->SetAssemblyLocale(yyvsp[0].binstr,TRUE); }
#line 11454 "asmparse.cpp.tab.c"
break;
case 814:
  if (!yytrial)
#line 2033 "asmparse.y"
{ PASMM->SetAssemblyLocale(yyvsp[-1].binstr,FALSE); }
#line 11460 "asmparse.cpp.tab.c"
break;
case 817:
  if (!yytrial)
#line 2038 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 11466 "asmparse.cpp.tab.c"
break;
case 818:
  if (!yytrial)
#line 2041 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 11472 "asmparse.cpp.tab.c"
break;
case 819:
  if (!yytrial)
#line 2044 "asmparse.y"
{ bParsingByteArray = TRUE; }
#line 11478 "asmparse.cpp.tab.c"
break;
case 820:
  if (!yytrial)
#line 2048 "asmparse.y"
{ PASMM->StartAssembly(yyvsp[0].string, NULL, yyvsp[-1].asmAttr, TRUE); }
#line 11484 "asmparse.cpp.tab.c"
break;
case 821:
  if (!yytrial)
#line 2050 "asmparse.y"
{ PASMM->StartAssembly(yyvsp[-2].string, yyvsp[0].string, yyvsp[-3].asmAttr, TRUE); }
#line 11490 "asmparse.cpp.tab.c"
break;
case 824:
  if (!yytrial)
#line 2057 "asmparse.y"
{ PASMM->SetAssemblyHashBlob(yyvsp[-1].binstr); }
#line 11496 "asmparse.cpp.tab.c"
break;
case 826:
  if (!yytrial)
#line 2059 "asmparse.y"
{ PASMM->SetAssemblyPublicKeyToken(yyvsp[-1].binstr); }
#line 11502 "asmparse.cpp.tab.c"
break;
case 827:
  if (!yytrial)
#line 2060 "asmparse.y"
{ PASMM->SetAssemblyAutodetect(); }
#line 11508 "asmparse.cpp.tab.c"
break;
case 828:
  if (!yytrial)
#line 2063 "asmparse.y"
{ PASMM->StartComType(yyvsp[0].string, yyvsp[-1].exptAttr);}
#line 11514 "asmparse.cpp.tab.c"
break;
case 829:
  if (!yytrial)
#line 2066 "asmparse.y"
{ PASMM->StartComType(yyvsp[0].string, yyvsp[-1].exptAttr); }
#line 11520 "asmparse.cpp.tab.c"
break;
case 830:
  if (!yytrial)
#line 2069 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) 0; }
#line 11526 "asmparse.cpp.tab.c"
break;
case 831:
  if (!yytrial)
#line 2070 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-1].exptAttr | tdNotPublic); }
#line 11532 "asmparse.cpp.tab.c"
break;
case 832:
  if (!yytrial)
#line 2071 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-1].exptAttr | tdPublic); }
#line 11538 "asmparse.cpp.tab.c"
break;
case 833:
  if (!yytrial)
#line 2072 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-1].exptAttr | tdForwarder); }
#line 11544 "asmparse.cpp.tab.c"
break;
case 834:
  if (!yytrial)
#line 2073 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedPublic); }
#line 11550 "asmparse.cpp.tab.c"
break;
case 835:
  if (!yytrial)
#line 2074 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedPrivate); }
#line 11556 "asmparse.cpp.tab.c"
break;
case 836:
  if (!yytrial)
#line 2075 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedFamily); }
#line 11562 "asmparse.cpp.tab.c"
break;
case 837:
  if (!yytrial)
#line 2076 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedAssembly); }
#line 11568 "asmparse.cpp.tab.c"
break;
case 838:
  if (!yytrial)
#line 2077 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedFamANDAssem); }
#line 11574 "asmparse.cpp.tab.c"
break;
case 839:
  if (!yytrial)
#line 2078 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yyvsp[-2].exptAttr | tdNestedFamORAssem); }
#line 11580 "asmparse.cpp.tab.c"
break;
case 842:
  if (!yytrial)
#line 2085 "asmparse.y"
{ PASMM->SetComTypeFile(yyvsp[0].string); }
#line 11586 "asmparse.cpp.tab.c"
break;
case 843:
  if (!yytrial)
#line 2086 "asmparse.y"
{ PASMM->SetComTypeComType(yyvsp[0].string); }
#line 11592 "asmparse.cpp.tab.c"
break;
case 844:
  if (!yytrial)
#line 2087 "asmparse.y"
{ PASMM->SetComTypeAsmRef(yyvsp[0].string); }
#line 11598 "asmparse.cpp.tab.c"
break;
case 845:
  if (!yytrial)
#line 2088 "asmparse.y"
{ if(!PASMM->SetComTypeImplementationTok(yyvsp[-1].int32))
                                                                  PASM->report->error("Invalid implementation of exported type\n"); }
#line 11605 "asmparse.cpp.tab.c"
break;
case 846:
  if (!yytrial)
#line 2090 "asmparse.y"
{ if(!PASMM->SetComTypeClassTok(yyvsp[0].int32))
                                                                  PASM->report->error("Invalid TypeDefID of exported type\n"); }
#line 11612 "asmparse.cpp.tab.c"
break;
case 849:
  if (!yytrial)
#line 2096 "asmparse.y"
{ PASMM->StartManifestRes(yyvsp[0].string, yyvsp[0].string, yyvsp[-1].manresAttr); }
#line 11618 "asmparse.cpp.tab.c"
break;
case 850:
  if (!yytrial)
#line 2098 "asmparse.y"
{ PASMM->StartManifestRes(yyvsp[-2].string, yyvsp[0].string, yyvsp[-3].manresAttr); }
#line 11624 "asmparse.cpp.tab.c"
break;
case 851:
  if (!yytrial)
#line 2101 "asmparse.y"
{ yyval.manresAttr = (CorManifestResourceFlags) 0; }
#line 11630 "asmparse.cpp.tab.c"
break;
case 852:
  if (!yytrial)
#line 2102 "asmparse.y"
{ yyval.manresAttr = (CorManifestResourceFlags) (yyvsp[-1].manresAttr | mrPublic); }
#line 11636 "asmparse.cpp.tab.c"
break;
case 853:
  if (!yytrial)
#line 2103 "asmparse.y"
{ yyval.manresAttr = (CorManifestResourceFlags) (yyvsp[-1].manresAttr | mrPrivate); }
#line 11642 "asmparse.cpp.tab.c"
break;
case 856:
  if (!yytrial)
#line 2110 "asmparse.y"
{ PASMM->SetManifestResFile(yyvsp[-2].string, (ULONG)yyvsp[0].int32); }
#line 11648 "asmparse.cpp.tab.c"
break;
case 857:
  if (!yytrial)
#line 2111 "asmparse.y"
{ PASMM->SetManifestResAsmRef(yyvsp[0].string); }
#line 11654 "asmparse.cpp.tab.c"
break;
#line 11656 "asmparse.cpp.tab.c"
#line 802 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial!=0);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

#ifdef YYPOSN
  /* Perform user-defined position reduction */
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif
#endif /* YYPOSN */

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
#ifdef YYPOSN
  yyps->psp -= yym;
#endif /* YYPOSN */

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state "
	     "%d\n", (int)yydepth, yytrial!=0, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;  /* return value of root non-terminal to yylval */
#ifdef YYPOSN
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;  /* return value of root position to yyposn */
#endif /* YYPOSN */
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       (int)yydepth, yytrial!=0, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state "
	   "%d\n", (int)yydepth, yytrial!=0, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
#ifdef YYPOSN
  *++(yyps->psp) = yyps->pos;
#endif /* YYPOSN */
  goto yyloop;


  /*
  ** Reduction declares that this path is valid.
  ** Set yypath and do a full parse
  */
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    struct yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state "
	   "%d, %d tokens\n", (int)yydepth, yytrial!=0, yypath->state,
	   (int)(yylvp - yylvals - yypath->lexeme));
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  yylexp = yylexemes + yypath->lexeme;
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  yylvp = yylvals + yypath->lexeme;
#ifdef YYPOSN
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylpp = yylpsns + yypath->lexeme;
#endif /* YYPOSN */
  yystate = yypath->state;
  goto yyloop;

yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  {
    YYSTYPE *pv;
#ifdef YYPOSN
    YYPOSN *pp = yyps->ps;
#endif
#ifdef YYDESTRUCT
    Yshort *ps = yyps->ss;
#endif
    for(pv=yyps->vs; pv<yyps->vsp; pv++) {
      YYDELETEVAL(*pv,2);
#if defined(YYDESTRUCT)
      YYDESTRUCT(yytrial!=0, yyastable[*ps++], pv, pp++);
#endif /* YYDESTRUCT */
    }
#ifdef YYPOSN
    for(pp=yyps->ps; pp<yyps->psp; pp++) {
      YYDELETEPOSN(*pp,2);
    }
#endif /* YYPOSN */
  }

  while (yyps) {
    struct yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    struct yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    struct yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    struct yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}
