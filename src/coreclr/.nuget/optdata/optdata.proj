<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>
    <TargetFramework>$(NetCoreAppCurrent)</TargetFramework>

    <OptimizationDataSupported Condition="'$(TargetOS)' == 'windows' And ('$(TargetArchitecture)' == 'x64' Or '$(TargetArchitecture)' == 'x86')">True</OptimizationDataSupported>
    <OptimizationDataSupported Condition="'$(TargetOS)' == 'Linux' And '$(TargetArchitecture)' == 'x64'">True</OptimizationDataSupported>

    <!-- At the moment, we are only generating data for Windows X64 in the most recent optimization data publishing platform. Use the old data for now -->
    <RuntimeIdentifiers>win7-x64;win7-x86;linux-x64</RuntimeIdentifiers>
    <ExcludeFromSourceBuild>true</ExcludeFromSourceBuild>
    <_TargetOSArchLowercase>$(TargetOS.ToLower())-$(TargetArchitecture.ToLower())</_TargetOSArchLowercase>
    <_TargetOSArchLowercase Condition="'$(TargetOS)' == 'windows'">windows_nt-$(TargetArchitecture.ToLower())</_TargetOSArchLowercase>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="optimization.$(_TargetOSArchLowercase).PGO.CoreCLR"
      Version="$(optimizationPGOCoreCLRVersion)"
      Condition="'$(optimizationPGOCoreCLRVersion)'!='' And '$(OptimizationDataSupported)'!=''"
      GeneratePathProperty="true" />
  </ItemGroup>

  <!--                                                                       -->
  <!-- Task: GetPgoDataPackagePath                                          -->
  <!--                                                                       -->
  <!-- Notes:                                                                -->
  <!--                                                                       -->
  <!-- DumpPgoDataPackagePath is used to get the path of the native PGO data -->
  <!-- for other MSBuild projects, generally to pass to another project or   -->
  <!-- native script like build-runtime.cmd/sh.                              -->
  <!--                                                                       -->

  <Target Name="GetPgoDataPackagePath" Returns="$(PgoPackagePath)">
    <PropertyGroup>
      <PgoPackagePathProperty>Pkgoptimization_$(_TargetOSArchLowercase)_PGO_CoreCLR</PgoPackagePathProperty>
    </PropertyGroup>

    <!--
      Use an item group for expansion of $($(PgoPackagePathProperty)) (an illegal MSBuild expression)
      i.e. the prop value's value.
    -->
    <ItemGroup>
      <PgoPackagePathPropertyItemList Include="$(PgoPackagePathProperty)" />
      <PgoPackagePathPropertyItemList>
        <PgoPackagePath>$(%(Identity))</PgoPackagePath>
      </PgoPackagePathPropertyItemList>
    </ItemGroup>

    <PropertyGroup>
      <PgoPackagePath>@(PgoPackagePathPropertyItemList->'%(PgoPackagePath)')</PgoPackagePath>
    </PropertyGroup>

    <Error Condition="!Exists('$(PgoPackagePath)') And '$(OptimizationDataSupported)' == 'True'" Text="Unable to locate restored PGO package at $(PgoPackagePath). Maybe the platform-specific package naming changed?" />
  </Target>

  <Target Name="OutputPgoPathForCI" Condition="'$(ContinuousIntegrationBuild)' == 'true'" DependsOnTargets="GetPgoDataPackagePath" BeforeTargets="Build">
    <!-- Get the path to PGO data to pass to AzDO so we can pass it to the build-runtime script. -->
    <MSBuild
      Projects=".nuget/optdata/optdata.proj"
      Targets="GetPgoDataPackagePath">
      <Output
        TaskParameter="TargetOutputs"
        PropertyName="PgoDataPath" />
    </MSBuild>
    <Message Text="##vso[task.setvariable variable=CoreClrPgoDataArg]-pgodatapath &quot;$(PgoDataPath)&quot;" />
  </Target>
</Project>
