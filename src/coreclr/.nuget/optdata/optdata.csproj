<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(NetCoreAppCurrent)</TargetFramework>
    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>

    <OptimizationDataSupported Condition="'$(TargetOS)' == 'windows' And ('$(TargetArchitecture)' == 'x64' Or '$(TargetArchitecture)' == 'x86')">True</OptimizationDataSupported>
    <OptimizationDataSupported Condition="'$(TargetOS)' == 'Linux' And '$(TargetArchitecture)' == 'x64'">True</OptimizationDataSupported>

    <!-- At the moment, we are only generating data for Windows X64 in the most recent optimization data publishing platform. Use the old data for now -->
    <RuntimeIdentifiers>win7-x64;win7-x86;linux-x64</RuntimeIdentifiers>
    <ExcludeFromSourceBuild>true</ExcludeFromSourceBuild>
    <_TargetOSArchLowercase>$(TargetOS.ToLower())-$(TargetArchitecture.ToLower())</_TargetOSArchLowercase>
    <_TargetOSArchLowercase Condition="'$(TargetOS)' == 'windows'">windows_nt-$(TargetArchitecture.ToLower())</_TargetOSArchLowercase>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="optimization.$(_TargetOSArchLowercase).PGO.CoreCLR"
      Version="$(optimizationPGOCoreCLRVersion)"
      Condition="'$(optimizationPGOCoreCLRVersion)'!='' And '$(OptimizationDataSupported)'!=''"
      GeneratePathProperty="true" />
  </ItemGroup>

  <!--                                                                       -->
  <!-- Task: DumpPgoDataPackagePath                                          -->
  <!--                                                                       -->
  <!-- Notes:                                                                -->
  <!--                                                                       -->
  <!-- DumpPgoDataPackagePath is used by build.sh and build.cmd to pass      -->
  <!-- the path information to cmake. The task will write a file to be       -->
  <!-- read back by build.cmd/sh. The path for the file is:                  -->
  <!-- $(PgoDataPackagePathOutputFile)                                       -->
  <!--                                                                       -->

  <Target Name="DumpPgoDataPackagePath">
    <!-- Error if PgoDataPackagePathOutputFile is not set. -->
    <Error Condition="'$(PgoDataPackagePathOutputFile)'==''" Text="PgoDataPackagePathOutputFile must be passed as a property." />

    <PropertyGroup>
      <PgoPackagePathProperty>Pkgoptimization_$(_TargetOSArchLowercase)_PGO_CoreCLR</PgoPackagePathProperty>
    </PropertyGroup>

    <!--
      Use an item group for expansion of $($(PgoPackagePathProperty)) (an illegal MSBuild expression)
      i.e. the prop value's value.
    -->
    <ItemGroup>
      <PgoPackagePathPropertyItemList Include="$(PgoPackagePathProperty)" />
      <PgoPackagePathPropertyItemList>
        <PgoPackagePath>$(%(Identity))</PgoPackagePath>
      </PgoPackagePathPropertyItemList>
    </ItemGroup>

    <PropertyGroup>
      <PgoPackagePath>@(PgoPackagePathPropertyItemList->'%(PgoPackagePath)')</PgoPackagePath>
    </PropertyGroup>

    <Error Condition="!Exists('$(PgoPackagePath)') And '$(OptimizationDataSupported)' == 'True'" Text="Unable to locate restored PGO package at $(PgoPackagePath). Maybe the platform-specific package naming changed?" />

    <!-- Cleanup old version file -->

    <WriteLinesToFile File="$(PgoDataPackagePathOutputFile)"
                      Lines="$(PgoPackagePath)"
                      Condition="'$(OptimizationDataSupported)' == 'True'"
                      Overwrite="true"
                      WriteOnlyWhenDifferent="true" />

    <WriteLinesToFile File="$(PgoDataPackagePathOutputFile)"
                      Lines=""
                      Condition="'$(OptimizationDataSupported)' != 'True'"
                      Overwrite="true"
                      WriteOnlyWhenDifferent="true" />

    <Message Text="optimizationPGOCoreCLR Package path: $(PgoPackagePath) written to: $(PgoDataPackagePathOutputFile)" Importance="High" />
  </Target>
</Project>
