//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

#pragma warning disable 1591

namespace LibObjectFile.Elf
{
    using System.Runtime.InteropServices;
    
    public static partial class ElfNative
    {
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Elf32_Ehdr
        {
            /// <summary>
            /// Magic number and other info
            /// </summary>
            public fixed byte e_ident[16];
            
            /// <summary>
            /// Object file type
            /// </summary>
            public ElfNative.Elf32_Half e_type;
            
            /// <summary>
            /// Architecture
            /// </summary>
            public ElfNative.Elf32_Half e_machine;
            
            /// <summary>
            /// Object file version
            /// </summary>
            public ElfNative.Elf32_Word e_version;
            
            /// <summary>
            /// Entry point virtual address
            /// </summary>
            public ElfNative.Elf32_Addr e_entry;
            
            /// <summary>
            /// Program header table file offset
            /// </summary>
            public ElfNative.Elf32_Off e_phoff;
            
            /// <summary>
            /// Section header table file offset
            /// </summary>
            public ElfNative.Elf32_Off e_shoff;
            
            /// <summary>
            /// Processor-specific flags
            /// </summary>
            public ElfNative.Elf32_Word e_flags;
            
            /// <summary>
            /// ELF header size in bytes
            /// </summary>
            public ElfNative.Elf32_Half e_ehsize;
            
            /// <summary>
            /// Program header table entry size
            /// </summary>
            public ElfNative.Elf32_Half e_phentsize;
            
            /// <summary>
            /// Program header table entry count
            /// </summary>
            public ElfNative.Elf32_Half e_phnum;
            
            /// <summary>
            /// Section header table entry size
            /// </summary>
            public ElfNative.Elf32_Half e_shentsize;
            
            /// <summary>
            /// Section header table entry count
            /// </summary>
            public ElfNative.Elf32_Half e_shnum;
            
            /// <summary>
            /// Section header string table index
            /// </summary>
            public ElfNative.Elf32_Half e_shstrndx;
        }
        
        /// <summary>
        /// Type for a 16-bit quantity.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf32_Half : IEquatable<Elf32_Half>
        {
            public Elf32_Half(ushort value) => this.Value = value;
            
            public readonly ushort Value;
            
            public bool Equals(Elf32_Half other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf32_Half other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ushort(Elf32_Half from) => from.Value;
            
            public static implicit operator Elf32_Half(ushort from) => new Elf32_Half(from);
            
            public static bool operator ==(Elf32_Half left, Elf32_Half right) => left.Equals(right);
            
            public static bool operator !=(Elf32_Half left, Elf32_Half right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Types for signed and unsigned 32-bit quantities.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf32_Word : IEquatable<Elf32_Word>
        {
            public Elf32_Word(uint value) => this.Value = value;
            
            public readonly uint Value;
            
            public bool Equals(Elf32_Word other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf32_Word other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator uint(Elf32_Word from) => from.Value;
            
            public static implicit operator Elf32_Word(uint from) => new Elf32_Word(from);
            
            public static bool operator ==(Elf32_Word left, Elf32_Word right) => left.Equals(right);
            
            public static bool operator !=(Elf32_Word left, Elf32_Word right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Type of addresses.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf32_Addr : IEquatable<Elf32_Addr>
        {
            public Elf32_Addr(uint value) => this.Value = value;
            
            public readonly uint Value;
            
            public bool Equals(Elf32_Addr other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf32_Addr other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator uint(Elf32_Addr from) => from.Value;
            
            public static implicit operator Elf32_Addr(uint from) => new Elf32_Addr(from);
            
            public static bool operator ==(Elf32_Addr left, Elf32_Addr right) => left.Equals(right);
            
            public static bool operator !=(Elf32_Addr left, Elf32_Addr right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Type of file offsets.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf32_Off : IEquatable<Elf32_Off>
        {
            public Elf32_Off(uint value) => this.Value = value;
            
            public readonly uint Value;
            
            public bool Equals(Elf32_Off other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf32_Off other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator uint(Elf32_Off from) => from.Value;
            
            public static implicit operator Elf32_Off(uint from) => new Elf32_Off(from);
            
            public static bool operator ==(Elf32_Off left, Elf32_Off right) => left.Equals(right);
            
            public static bool operator !=(Elf32_Off left, Elf32_Off right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Elf64_Ehdr
        {
            /// <summary>
            /// Magic number and other info
            /// </summary>
            public fixed byte e_ident[16];
            
            /// <summary>
            /// Object file type
            /// </summary>
            public ElfNative.Elf64_Half e_type;
            
            /// <summary>
            /// Architecture
            /// </summary>
            public ElfNative.Elf64_Half e_machine;
            
            /// <summary>
            /// Object file version
            /// </summary>
            public ElfNative.Elf64_Word e_version;
            
            /// <summary>
            /// Entry point virtual address
            /// </summary>
            public ElfNative.Elf64_Addr e_entry;
            
            /// <summary>
            /// Program header table file offset
            /// </summary>
            public ElfNative.Elf64_Off e_phoff;
            
            /// <summary>
            /// Section header table file offset
            /// </summary>
            public ElfNative.Elf64_Off e_shoff;
            
            /// <summary>
            /// Processor-specific flags
            /// </summary>
            public ElfNative.Elf64_Word e_flags;
            
            /// <summary>
            /// ELF header size in bytes
            /// </summary>
            public ElfNative.Elf64_Half e_ehsize;
            
            /// <summary>
            /// Program header table entry size
            /// </summary>
            public ElfNative.Elf64_Half e_phentsize;
            
            /// <summary>
            /// Program header table entry count
            /// </summary>
            public ElfNative.Elf64_Half e_phnum;
            
            /// <summary>
            /// Section header table entry size
            /// </summary>
            public ElfNative.Elf64_Half e_shentsize;
            
            /// <summary>
            /// Section header table entry count
            /// </summary>
            public ElfNative.Elf64_Half e_shnum;
            
            /// <summary>
            /// Section header string table index
            /// </summary>
            public ElfNative.Elf64_Half e_shstrndx;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf64_Half : IEquatable<Elf64_Half>
        {
            public Elf64_Half(ushort value) => this.Value = value;
            
            public readonly ushort Value;
            
            public bool Equals(Elf64_Half other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf64_Half other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ushort(Elf64_Half from) => from.Value;
            
            public static implicit operator Elf64_Half(ushort from) => new Elf64_Half(from);
            
            public static bool operator ==(Elf64_Half left, Elf64_Half right) => left.Equals(right);
            
            public static bool operator !=(Elf64_Half left, Elf64_Half right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf64_Word : IEquatable<Elf64_Word>
        {
            public Elf64_Word(uint value) => this.Value = value;
            
            public readonly uint Value;
            
            public bool Equals(Elf64_Word other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf64_Word other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator uint(Elf64_Word from) => from.Value;
            
            public static implicit operator Elf64_Word(uint from) => new Elf64_Word(from);
            
            public static bool operator ==(Elf64_Word left, Elf64_Word right) => left.Equals(right);
            
            public static bool operator !=(Elf64_Word left, Elf64_Word right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf64_Addr : IEquatable<Elf64_Addr>
        {
            public Elf64_Addr(ulong value) => this.Value = value;
            
            public readonly ulong Value;
            
            public bool Equals(Elf64_Addr other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf64_Addr other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ulong(Elf64_Addr from) => from.Value;
            
            public static implicit operator Elf64_Addr(ulong from) => new Elf64_Addr(from);
            
            public static bool operator ==(Elf64_Addr left, Elf64_Addr right) => left.Equals(right);
            
            public static bool operator !=(Elf64_Addr left, Elf64_Addr right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf64_Off : IEquatable<Elf64_Off>
        {
            public Elf64_Off(ulong value) => this.Value = value;
            
            public readonly ulong Value;
            
            public bool Equals(Elf64_Off other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf64_Off other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ulong(Elf64_Off from) => from.Value;
            
            public static implicit operator Elf64_Off(ulong from) => new Elf64_Off(from);
            
            public static bool operator ==(Elf64_Off left, Elf64_Off right) => left.Equals(right);
            
            public static bool operator !=(Elf64_Off left, Elf64_Off right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Section header.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Shdr
        {
            /// <summary>
            /// Section name (string tbl index)
            /// </summary>
            public ElfNative.Elf32_Word sh_name;
            
            /// <summary>
            /// Section type
            /// </summary>
            public ElfNative.Elf32_Word sh_type;
            
            /// <summary>
            /// Section flags
            /// </summary>
            public ElfNative.Elf32_Word sh_flags;
            
            /// <summary>
            /// Section virtual addr at execution
            /// </summary>
            public ElfNative.Elf32_Addr sh_addr;
            
            /// <summary>
            /// Section file offset
            /// </summary>
            public ElfNative.Elf32_Off sh_offset;
            
            /// <summary>
            /// Section size in bytes
            /// </summary>
            public ElfNative.Elf32_Word sh_size;
            
            /// <summary>
            /// Link to another section
            /// </summary>
            public ElfNative.Elf32_Word sh_link;
            
            /// <summary>
            /// Additional section information
            /// </summary>
            public ElfNative.Elf32_Word sh_info;
            
            /// <summary>
            /// Section alignment
            /// </summary>
            public ElfNative.Elf32_Word sh_addralign;
            
            /// <summary>
            /// Entry size if section holds table
            /// </summary>
            public ElfNative.Elf32_Word sh_entsize;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Shdr
        {
            /// <summary>
            /// Section name (string tbl index)
            /// </summary>
            public ElfNative.Elf64_Word sh_name;
            
            /// <summary>
            /// Section type
            /// </summary>
            public ElfNative.Elf64_Word sh_type;
            
            /// <summary>
            /// Section flags
            /// </summary>
            public ElfNative.Elf64_Xword sh_flags;
            
            /// <summary>
            /// Section virtual addr at execution
            /// </summary>
            public ElfNative.Elf64_Addr sh_addr;
            
            /// <summary>
            /// Section file offset
            /// </summary>
            public ElfNative.Elf64_Off sh_offset;
            
            /// <summary>
            /// Section size in bytes
            /// </summary>
            public ElfNative.Elf64_Xword sh_size;
            
            /// <summary>
            /// Link to another section
            /// </summary>
            public ElfNative.Elf64_Word sh_link;
            
            /// <summary>
            /// Additional section information
            /// </summary>
            public ElfNative.Elf64_Word sh_info;
            
            /// <summary>
            /// Section alignment
            /// </summary>
            public ElfNative.Elf64_Xword sh_addralign;
            
            /// <summary>
            /// Entry size if section holds table
            /// </summary>
            public ElfNative.Elf64_Xword sh_entsize;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf64_Xword : IEquatable<Elf64_Xword>
        {
            public Elf64_Xword(ulong value) => this.Value = value;
            
            public readonly ulong Value;
            
            public bool Equals(Elf64_Xword other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf64_Xword other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ulong(Elf64_Xword from) => from.Value;
            
            public static implicit operator Elf64_Xword(ulong from) => new Elf64_Xword(from);
            
            public static bool operator ==(Elf64_Xword left, Elf64_Xword right) => left.Equals(right);
            
            public static bool operator !=(Elf64_Xword left, Elf64_Xword right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Section compression header.  Used when SHF_COMPRESSED is set.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Chdr
        {
            /// <summary>
            /// Compression format.
            /// </summary>
            public ElfNative.Elf32_Word ch_type;
            
            /// <summary>
            /// Uncompressed data size.
            /// </summary>
            public ElfNative.Elf32_Word ch_size;
            
            /// <summary>
            /// Uncompressed data alignment.
            /// </summary>
            public ElfNative.Elf32_Word ch_addralign;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Chdr
        {
            /// <summary>
            /// Compression format.
            /// </summary>
            public ElfNative.Elf64_Word ch_type;
            
            public ElfNative.Elf64_Word ch_reserved;
            
            /// <summary>
            /// Uncompressed data size.
            /// </summary>
            public ElfNative.Elf64_Xword ch_size;
            
            /// <summary>
            /// Uncompressed data alignment.
            /// </summary>
            public ElfNative.Elf64_Xword ch_addralign;
        }
        
        /// <summary>
        /// Symbol table entry.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Sym
        {
            /// <summary>
            /// Symbol name (string tbl index)
            /// </summary>
            public ElfNative.Elf32_Word st_name;
            
            /// <summary>
            /// Symbol value
            /// </summary>
            public ElfNative.Elf32_Addr st_value;
            
            /// <summary>
            /// Symbol size
            /// </summary>
            public ElfNative.Elf32_Word st_size;
            
            /// <summary>
            /// Symbol type and binding
            /// </summary>
            public byte st_info;
            
            /// <summary>
            /// Symbol visibility
            /// </summary>
            public byte st_other;
            
            /// <summary>
            /// Section index
            /// </summary>
            public ElfNative.Elf32_Section st_shndx;
        }
        
        /// <summary>
        /// Type for section indices, which are 16-bit quantities.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf32_Section : IEquatable<Elf32_Section>
        {
            public Elf32_Section(ushort value) => this.Value = value;
            
            public readonly ushort Value;
            
            public bool Equals(Elf32_Section other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf32_Section other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ushort(Elf32_Section from) => from.Value;
            
            public static implicit operator Elf32_Section(ushort from) => new Elf32_Section(from);
            
            public static bool operator ==(Elf32_Section left, Elf32_Section right) => left.Equals(right);
            
            public static bool operator !=(Elf32_Section left, Elf32_Section right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Sym
        {
            /// <summary>
            /// Symbol name (string tbl index)
            /// </summary>
            public ElfNative.Elf64_Word st_name;
            
            /// <summary>
            /// Symbol type and binding
            /// </summary>
            public byte st_info;
            
            /// <summary>
            /// Symbol visibility
            /// </summary>
            public byte st_other;
            
            /// <summary>
            /// Section index
            /// </summary>
            public ElfNative.Elf64_Section st_shndx;
            
            /// <summary>
            /// Symbol value
            /// </summary>
            public ElfNative.Elf64_Addr st_value;
            
            /// <summary>
            /// Symbol size
            /// </summary>
            public ElfNative.Elf64_Xword st_size;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf64_Section : IEquatable<Elf64_Section>
        {
            public Elf64_Section(ushort value) => this.Value = value;
            
            public readonly ushort Value;
            
            public bool Equals(Elf64_Section other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf64_Section other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ushort(Elf64_Section from) => from.Value;
            
            public static implicit operator Elf64_Section(ushort from) => new Elf64_Section(from);
            
            public static bool operator ==(Elf64_Section left, Elf64_Section right) => left.Equals(right);
            
            public static bool operator !=(Elf64_Section left, Elf64_Section right) => !left.Equals(right);
        }
        
        /// <summary>
        /// The syminfo section if available contains additional information about
        /// every dynamic symbol.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Syminfo
        {
            /// <summary>
            /// Direct bindings, symbol bound to
            /// </summary>
            public ElfNative.Elf32_Half si_boundto;
            
            /// <summary>
            /// Per symbol flags
            /// </summary>
            public ElfNative.Elf32_Half si_flags;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Syminfo
        {
            /// <summary>
            /// Direct bindings, symbol bound to
            /// </summary>
            public ElfNative.Elf64_Half si_boundto;
            
            /// <summary>
            /// Per symbol flags
            /// </summary>
            public ElfNative.Elf64_Half si_flags;
        }
        
        /// <summary>
        /// Relocation table entry without addend (in section of type SHT_REL).
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Rel
        {
            /// <summary>
            /// Address
            /// </summary>
            public ElfNative.Elf32_Addr r_offset;
            
            /// <summary>
            /// Relocation type and symbol index
            /// </summary>
            public ElfNative.Elf32_Word r_info;
        }
        
        /// <summary>
        /// I have seen two different definitions of the Elf64_Rel and
        /// Elf64_Rela structures, so we'll leave them out until Novell (or
        /// whoever) gets their act together.
        /// </summary>
        /// <remarks>
        /// The following, at least, is used on Sparc v9, MIPS, and Alpha.
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Rel
        {
            /// <summary>
            /// Address
            /// </summary>
            public ElfNative.Elf64_Addr r_offset;
            
            /// <summary>
            /// Relocation type and symbol index
            /// </summary>
            public ElfNative.Elf64_Xword r_info;
        }
        
        /// <summary>
        /// Relocation table entry with addend (in section of type SHT_RELA).
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Rela
        {
            /// <summary>
            /// Address
            /// </summary>
            public ElfNative.Elf32_Addr r_offset;
            
            /// <summary>
            /// Relocation type and symbol index
            /// </summary>
            public ElfNative.Elf32_Word r_info;
            
            /// <summary>
            /// Addend
            /// </summary>
            public ElfNative.Elf32_Sword r_addend;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf32_Sword : IEquatable<Elf32_Sword>
        {
            public Elf32_Sword(int value) => this.Value = value;
            
            public readonly int Value;
            
            public bool Equals(Elf32_Sword other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf32_Sword other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator int(Elf32_Sword from) => from.Value;
            
            public static implicit operator Elf32_Sword(int from) => new Elf32_Sword(from);
            
            public static bool operator ==(Elf32_Sword left, Elf32_Sword right) => left.Equals(right);
            
            public static bool operator !=(Elf32_Sword left, Elf32_Sword right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Rela
        {
            /// <summary>
            /// Address
            /// </summary>
            public ElfNative.Elf64_Addr r_offset;
            
            /// <summary>
            /// Relocation type and symbol index
            /// </summary>
            public ElfNative.Elf64_Xword r_info;
            
            /// <summary>
            /// Addend
            /// </summary>
            public ElfNative.Elf64_Sxword r_addend;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf64_Sxword : IEquatable<Elf64_Sxword>
        {
            public Elf64_Sxword(long value) => this.Value = value;
            
            public readonly long Value;
            
            public bool Equals(Elf64_Sxword other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf64_Sxword other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator long(Elf64_Sxword from) => from.Value;
            
            public static implicit operator Elf64_Sxword(long from) => new Elf64_Sxword(from);
            
            public static bool operator ==(Elf64_Sxword left, Elf64_Sxword right) => left.Equals(right);
            
            public static bool operator !=(Elf64_Sxword left, Elf64_Sxword right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Program segment header.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Phdr
        {
            /// <summary>
            /// Segment type
            /// </summary>
            public ElfNative.Elf32_Word p_type;
            
            /// <summary>
            /// Segment file offset
            /// </summary>
            public ElfNative.Elf32_Off p_offset;
            
            /// <summary>
            /// Segment virtual address
            /// </summary>
            public ElfNative.Elf32_Addr p_vaddr;
            
            /// <summary>
            /// Segment physical address
            /// </summary>
            public ElfNative.Elf32_Addr p_paddr;
            
            /// <summary>
            /// Segment size in file
            /// </summary>
            public ElfNative.Elf32_Word p_filesz;
            
            /// <summary>
            /// Segment size in memory
            /// </summary>
            public ElfNative.Elf32_Word p_memsz;
            
            /// <summary>
            /// Segment flags
            /// </summary>
            public ElfNative.Elf32_Word p_flags;
            
            /// <summary>
            /// Segment alignment
            /// </summary>
            public ElfNative.Elf32_Word p_align;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Phdr
        {
            /// <summary>
            /// Segment type
            /// </summary>
            public ElfNative.Elf64_Word p_type;
            
            /// <summary>
            /// Segment flags
            /// </summary>
            public ElfNative.Elf64_Word p_flags;
            
            /// <summary>
            /// Segment file offset
            /// </summary>
            public ElfNative.Elf64_Off p_offset;
            
            /// <summary>
            /// Segment virtual address
            /// </summary>
            public ElfNative.Elf64_Addr p_vaddr;
            
            /// <summary>
            /// Segment physical address
            /// </summary>
            public ElfNative.Elf64_Addr p_paddr;
            
            /// <summary>
            /// Segment size in file
            /// </summary>
            public ElfNative.Elf64_Xword p_filesz;
            
            /// <summary>
            /// Segment size in memory
            /// </summary>
            public ElfNative.Elf64_Xword p_memsz;
            
            /// <summary>
            /// Segment alignment
            /// </summary>
            public ElfNative.Elf64_Xword p_align;
        }
        
        /// <summary>
        /// Dynamic section entry.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Dyn
        {
            [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]
            public partial struct Elf32_Dyn_union_d_un
            {
                /// <summary>
                /// Integer value
                /// </summary>
                [FieldOffset(0)]
                public ElfNative.Elf32_Word d_val;
                
                /// <summary>
                /// Address value
                /// </summary>
                [FieldOffset(0)]
                public ElfNative.Elf32_Addr d_ptr;
            }
            
            /// <summary>
            /// Dynamic entry type
            /// </summary>
            public ElfNative.Elf32_Sword d_tag;
            
            public ElfNative.Elf32_Dyn.Elf32_Dyn_union_d_un d_un;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Dyn
        {
            [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]
            public partial struct Elf64_Dyn_union_d_un
            {
                /// <summary>
                /// Integer value
                /// </summary>
                [FieldOffset(0)]
                public ElfNative.Elf64_Xword d_val;
                
                /// <summary>
                /// Address value
                /// </summary>
                [FieldOffset(0)]
                public ElfNative.Elf64_Addr d_ptr;
            }
            
            /// <summary>
            /// Dynamic entry type
            /// </summary>
            public ElfNative.Elf64_Sxword d_tag;
            
            public ElfNative.Elf64_Dyn.Elf64_Dyn_union_d_un d_un;
        }
        
        /// <summary>
        /// Version definition sections.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Verdef
        {
            /// <summary>
            /// Version revision
            /// </summary>
            public ElfNative.Elf32_Half vd_version;
            
            /// <summary>
            /// Version information
            /// </summary>
            public ElfNative.Elf32_Half vd_flags;
            
            /// <summary>
            /// Version Index
            /// </summary>
            public ElfNative.Elf32_Half vd_ndx;
            
            /// <summary>
            /// Number of associated aux entries
            /// </summary>
            public ElfNative.Elf32_Half vd_cnt;
            
            /// <summary>
            /// Version name hash value
            /// </summary>
            public ElfNative.Elf32_Word vd_hash;
            
            /// <summary>
            /// Offset in bytes to verdaux array
            /// </summary>
            public ElfNative.Elf32_Word vd_aux;
            
            /// <summary>
            /// Offset in bytes to next verdef
            /// entry
            /// </summary>
            public ElfNative.Elf32_Word vd_next;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Verdef
        {
            /// <summary>
            /// Version revision
            /// </summary>
            public ElfNative.Elf64_Half vd_version;
            
            /// <summary>
            /// Version information
            /// </summary>
            public ElfNative.Elf64_Half vd_flags;
            
            /// <summary>
            /// Version Index
            /// </summary>
            public ElfNative.Elf64_Half vd_ndx;
            
            /// <summary>
            /// Number of associated aux entries
            /// </summary>
            public ElfNative.Elf64_Half vd_cnt;
            
            /// <summary>
            /// Version name hash value
            /// </summary>
            public ElfNative.Elf64_Word vd_hash;
            
            /// <summary>
            /// Offset in bytes to verdaux array
            /// </summary>
            public ElfNative.Elf64_Word vd_aux;
            
            /// <summary>
            /// Offset in bytes to next verdef
            /// entry
            /// </summary>
            public ElfNative.Elf64_Word vd_next;
        }
        
        /// <summary>
        /// Auxialiary version information.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Verdaux
        {
            /// <summary>
            /// Version or dependency names
            /// </summary>
            public ElfNative.Elf32_Word vda_name;
            
            /// <summary>
            /// Offset in bytes to next verdaux
            /// entry
            /// </summary>
            public ElfNative.Elf32_Word vda_next;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Verdaux
        {
            /// <summary>
            /// Version or dependency names
            /// </summary>
            public ElfNative.Elf64_Word vda_name;
            
            /// <summary>
            /// Offset in bytes to next verdaux
            /// entry
            /// </summary>
            public ElfNative.Elf64_Word vda_next;
        }
        
        /// <summary>
        /// Version dependency section.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Verneed
        {
            /// <summary>
            /// Version of structure
            /// </summary>
            public ElfNative.Elf32_Half vn_version;
            
            /// <summary>
            /// Number of associated aux entries
            /// </summary>
            public ElfNative.Elf32_Half vn_cnt;
            
            /// <summary>
            /// Offset of filename for this
            /// dependency
            /// </summary>
            public ElfNative.Elf32_Word vn_file;
            
            /// <summary>
            /// Offset in bytes to vernaux array
            /// </summary>
            public ElfNative.Elf32_Word vn_aux;
            
            /// <summary>
            /// Offset in bytes to next verneed
            /// entry
            /// </summary>
            public ElfNative.Elf32_Word vn_next;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Verneed
        {
            /// <summary>
            /// Version of structure
            /// </summary>
            public ElfNative.Elf64_Half vn_version;
            
            /// <summary>
            /// Number of associated aux entries
            /// </summary>
            public ElfNative.Elf64_Half vn_cnt;
            
            /// <summary>
            /// Offset of filename for this
            /// dependency
            /// </summary>
            public ElfNative.Elf64_Word vn_file;
            
            /// <summary>
            /// Offset in bytes to vernaux array
            /// </summary>
            public ElfNative.Elf64_Word vn_aux;
            
            /// <summary>
            /// Offset in bytes to next verneed
            /// entry
            /// </summary>
            public ElfNative.Elf64_Word vn_next;
        }
        
        /// <summary>
        /// Auxiliary needed version information.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Vernaux
        {
            /// <summary>
            /// Hash value of dependency name
            /// </summary>
            public ElfNative.Elf32_Word vna_hash;
            
            /// <summary>
            /// Dependency specific information
            /// </summary>
            public ElfNative.Elf32_Half vna_flags;
            
            /// <summary>
            /// Unused
            /// </summary>
            public ElfNative.Elf32_Half vna_other;
            
            /// <summary>
            /// Dependency name string offset
            /// </summary>
            public ElfNative.Elf32_Word vna_name;
            
            /// <summary>
            /// Offset in bytes to next vernaux
            /// entry
            /// </summary>
            public ElfNative.Elf32_Word vna_next;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Vernaux
        {
            /// <summary>
            /// Hash value of dependency name
            /// </summary>
            public ElfNative.Elf64_Word vna_hash;
            
            /// <summary>
            /// Dependency specific information
            /// </summary>
            public ElfNative.Elf64_Half vna_flags;
            
            /// <summary>
            /// Unused
            /// </summary>
            public ElfNative.Elf64_Half vna_other;
            
            /// <summary>
            /// Dependency name string offset
            /// </summary>
            public ElfNative.Elf64_Word vna_name;
            
            /// <summary>
            /// Offset in bytes to next vernaux
            /// entry
            /// </summary>
            public ElfNative.Elf64_Word vna_next;
        }
        
        /// <summary>
        /// This vector is normally only used by the program interpreter.  The
        /// usual definition in an ABI supplement uses the name auxv_t.  The
        /// vector is not usually defined in a standard 
        /// &lt;elf
        /// .h&gt; file, but it
        /// can't hurt.  We rename it to avoid conflicts.  The sizes of these
        /// types are an arrangement between the exec server and the program
        /// interpreter, so we don't fully specify them here.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_auxv_t
        {
            [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]
            public partial struct Elf32_auxv_t_union_a_un
            {
                /// <summary>
                /// Integer value
                /// </summary>
                [FieldOffset(0)]
                public uint a_val;
            }
            
            /// <summary>
            /// Entry type
            /// </summary>
            public uint a_type;
            
            public ElfNative.Elf32_auxv_t.Elf32_auxv_t_union_a_un a_un;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_auxv_t
        {
            [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]
            public partial struct Elf64_auxv_t_union_a_un
            {
                /// <summary>
                /// Integer value
                /// </summary>
                [FieldOffset(0)]
                public ulong a_val;
            }
            
            /// <summary>
            /// Entry type
            /// </summary>
            public ulong a_type;
            
            public ElfNative.Elf64_auxv_t.Elf64_auxv_t_union_a_un a_un;
        }
        
        /// <summary>
        /// Note section contents.  Each entry in the note section begins with
        /// a header of a fixed form.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Nhdr
        {
            /// <summary>
            /// Length of the note's name.
            /// </summary>
            public ElfNative.Elf32_Word n_namesz;
            
            /// <summary>
            /// Length of the note's descriptor.
            /// </summary>
            public ElfNative.Elf32_Word n_descsz;
            
            /// <summary>
            /// Type of the note.
            /// </summary>
            public ElfNative.Elf32_Word n_type;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Nhdr
        {
            /// <summary>
            /// Length of the note's name.
            /// </summary>
            public ElfNative.Elf64_Word n_namesz;
            
            /// <summary>
            /// Length of the note's descriptor.
            /// </summary>
            public ElfNative.Elf64_Word n_descsz;
            
            /// <summary>
            /// Type of the note.
            /// </summary>
            public ElfNative.Elf64_Word n_type;
        }
        
        /// <summary>
        /// Move records.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Move
        {
            /// <summary>
            /// Symbol value.
            /// </summary>
            public ElfNative.Elf32_Xword m_value;
            
            /// <summary>
            /// Size and index.
            /// </summary>
            public ElfNative.Elf32_Word m_info;
            
            /// <summary>
            /// Symbol offset.
            /// </summary>
            public ElfNative.Elf32_Word m_poffset;
            
            /// <summary>
            /// Repeat count.
            /// </summary>
            public ElfNative.Elf32_Half m_repeat;
            
            /// <summary>
            /// Stride info.
            /// </summary>
            public ElfNative.Elf32_Half m_stride;
        }
        
        /// <summary>
        /// Types for signed and unsigned 64-bit quantities.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf32_Xword : IEquatable<Elf32_Xword>
        {
            public Elf32_Xword(ulong value) => this.Value = value;
            
            public readonly ulong Value;
            
            public bool Equals(Elf32_Xword other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf32_Xword other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ulong(Elf32_Xword from) => from.Value;
            
            public static implicit operator Elf32_Xword(ulong from) => new Elf32_Xword(from);
            
            public static bool operator ==(Elf32_Xword left, Elf32_Xword right) => left.Equals(right);
            
            public static bool operator !=(Elf32_Xword left, Elf32_Xword right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Move
        {
            /// <summary>
            /// Symbol value.
            /// </summary>
            public ElfNative.Elf64_Xword m_value;
            
            /// <summary>
            /// Size and index.
            /// </summary>
            public ElfNative.Elf64_Xword m_info;
            
            /// <summary>
            /// Symbol offset.
            /// </summary>
            public ElfNative.Elf64_Xword m_poffset;
            
            /// <summary>
            /// Repeat count.
            /// </summary>
            public ElfNative.Elf64_Half m_repeat;
            
            /// <summary>
            /// Stride info.
            /// </summary>
            public ElfNative.Elf64_Half m_stride;
        }
        
        /// <summary>
        /// Entries found in sections of type SHT_MIPS_GPTAB.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]
        public partial struct Elf32_gptab
        {
            [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
            public partial struct Elf32_gptab_gt_header
            {
                /// <summary>
                /// -G value used for compilation.
                /// </summary>
                public ElfNative.Elf32_Word gt_current_g_value;
                
                /// <summary>
                /// Not used.
                /// </summary>
                public ElfNative.Elf32_Word gt_unused;
            }
            
            [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
            public partial struct Elf32_gptab_gt_entry
            {
                /// <summary>
                /// If this value were used for -G.
                /// </summary>
                public ElfNative.Elf32_Word gt_g_value;
                
                /// <summary>
                /// This many bytes would be used.
                /// </summary>
                public ElfNative.Elf32_Word gt_bytes;
            }
            
            /// <summary>
            /// First entry in section.
            /// </summary>
            [FieldOffset(0)]
            public ElfNative.Elf32_gptab.Elf32_gptab_gt_header gt_header;
            
            /// <summary>
            /// Subsequent entries in section.
            /// </summary>
            [FieldOffset(0)]
            public ElfNative.Elf32_gptab.Elf32_gptab_gt_entry gt_entry;
        }
        
        /// <summary>
        /// Entry found in sections of type SHT_MIPS_REGINFO.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Elf32_RegInfo
        {
            /// <summary>
            /// General registers used.
            /// </summary>
            public ElfNative.Elf32_Word ri_gprmask;
            
            /// <summary>
            /// Coprocessor registers used.
            /// </summary>
            public fixed uint ri_cprmask[4];
            
            /// <summary>
            /// $gp register value.
            /// </summary>
            public ElfNative.Elf32_Sword ri_gp_value;
        }
        
        /// <summary>
        /// Entries found in sections of type SHT_MIPS_OPTIONS.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf_Options
        {
            /// <summary>
            /// Determines interpretation of the
            /// variable part of descriptor.
            /// </summary>
            public byte kind;
            
            /// <summary>
            /// Size of descriptor, including header.
            /// </summary>
            public byte size;
            
            /// <summary>
            /// Section header index of section affected,
            /// 0 for global options.
            /// </summary>
            public ElfNative.Elf32_Section section;
            
            /// <summary>
            /// Kind-specific information.
            /// </summary>
            public ElfNative.Elf32_Word info;
        }
        
        /// <summary>
        /// Entry found in `.options' section.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf_Options_Hw
        {
            /// <summary>
            /// Extra flags.
            /// </summary>
            public ElfNative.Elf32_Word hwp_flags1;
            
            /// <summary>
            /// Extra flags.
            /// </summary>
            public ElfNative.Elf32_Word hwp_flags2;
        }
        
        /// <summary>
        /// Entries found in sections of type SHT_MIPS_LIBLIST.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf32_Lib
        {
            /// <summary>
            /// Name (string table index)
            /// </summary>
            public ElfNative.Elf32_Word l_name;
            
            /// <summary>
            /// Timestamp
            /// </summary>
            public ElfNative.Elf32_Word l_time_stamp;
            
            /// <summary>
            /// Checksum
            /// </summary>
            public ElfNative.Elf32_Word l_checksum;
            
            /// <summary>
            /// Interface version
            /// </summary>
            public ElfNative.Elf32_Word l_version;
            
            /// <summary>
            /// Flags
            /// </summary>
            public ElfNative.Elf32_Word l_flags;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf64_Lib
        {
            /// <summary>
            /// Name (string table index)
            /// </summary>
            public ElfNative.Elf64_Word l_name;
            
            /// <summary>
            /// Timestamp
            /// </summary>
            public ElfNative.Elf64_Word l_time_stamp;
            
            /// <summary>
            /// Checksum
            /// </summary>
            public ElfNative.Elf64_Word l_checksum;
            
            /// <summary>
            /// Interface version
            /// </summary>
            public ElfNative.Elf64_Word l_version;
            
            /// <summary>
            /// Flags
            /// </summary>
            public ElfNative.Elf64_Word l_flags;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Elf_MIPS_ABIFlags_v0
        {
            /// <summary>
            /// Version of flags structure.
            /// </summary>
            public ElfNative.Elf32_Half version;
            
            /// <summary>
            /// The level of the ISA: 1-5, 32, 64.
            /// </summary>
            public byte isa_level;
            
            /// <summary>
            /// The revision of ISA: 0 for MIPS V and below, 1-n otherwise.
            /// </summary>
            public byte isa_rev;
            
            /// <summary>
            /// The size of general purpose registers.
            /// </summary>
            public byte gpr_size;
            
            /// <summary>
            /// The size of co-processor 1 registers.
            /// </summary>
            public byte cpr1_size;
            
            /// <summary>
            /// The size of co-processor 2 registers.
            /// </summary>
            public byte cpr2_size;
            
            /// <summary>
            /// The floating-point ABI.
            /// </summary>
            public byte fp_abi;
            
            /// <summary>
            /// Processor-specific extension.
            /// </summary>
            public ElfNative.Elf32_Word isa_ext;
            
            /// <summary>
            /// Mask of ASEs used.
            /// </summary>
            public ElfNative.Elf32_Word ases;
            
            /// <summary>
            /// Mask of general flags.
            /// </summary>
            public ElfNative.Elf32_Word flags1;
            
            public ElfNative.Elf32_Word flags2;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf64_Sword : IEquatable<Elf64_Sword>
        {
            public Elf64_Sword(int value) => this.Value = value;
            
            public readonly int Value;
            
            public bool Equals(Elf64_Sword other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf64_Sword other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator int(Elf64_Sword from) => from.Value;
            
            public static implicit operator Elf64_Sword(int from) => new Elf64_Sword(from);
            
            public static bool operator ==(Elf64_Sword left, Elf64_Sword right) => left.Equals(right);
            
            public static bool operator !=(Elf64_Sword left, Elf64_Sword right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf32_Sxword : IEquatable<Elf32_Sxword>
        {
            public Elf32_Sxword(long value) => this.Value = value;
            
            public readonly long Value;
            
            public bool Equals(Elf32_Sxword other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf32_Sxword other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator long(Elf32_Sxword from) => from.Value;
            
            public static implicit operator Elf32_Sxword(long from) => new Elf32_Sxword(from);
            
            public static bool operator ==(Elf32_Sxword left, Elf32_Sxword right) => left.Equals(right);
            
            public static bool operator !=(Elf32_Sxword left, Elf32_Sxword right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Type for version symbol information.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf32_Versym : IEquatable<Elf32_Versym>
        {
            public Elf32_Versym(ElfNative.Elf32_Half value) => this.Value = value;
            
            public readonly ElfNative.Elf32_Half Value;
            
            public bool Equals(Elf32_Versym other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf32_Versym other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ElfNative.Elf32_Half(Elf32_Versym from) => from.Value;
            
            public static implicit operator Elf32_Versym(ElfNative.Elf32_Half from) => new Elf32_Versym(from);
            
            public static bool operator ==(Elf32_Versym left, Elf32_Versym right) => left.Equals(right);
            
            public static bool operator !=(Elf32_Versym left, Elf32_Versym right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf64_Versym : IEquatable<Elf64_Versym>
        {
            public Elf64_Versym(ElfNative.Elf64_Half value) => this.Value = value;
            
            public readonly ElfNative.Elf64_Half Value;
            
            public bool Equals(Elf64_Versym other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf64_Versym other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ElfNative.Elf64_Half(Elf64_Versym from) => from.Value;
            
            public static implicit operator Elf64_Versym(ElfNative.Elf64_Half from) => new Elf64_Versym(from);
            
            public static bool operator ==(Elf64_Versym left, Elf64_Versym right) => left.Equals(right);
            
            public static bool operator !=(Elf64_Versym left, Elf64_Versym right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Entries found in sections of type SHT_MIPS_CONFLICT.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Elf32_Conflict : IEquatable<Elf32_Conflict>
        {
            public Elf32_Conflict(ElfNative.Elf32_Addr value) => this.Value = value;
            
            public readonly ElfNative.Elf32_Addr Value;
            
            public bool Equals(Elf32_Conflict other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Elf32_Conflict other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ElfNative.Elf32_Addr(Elf32_Conflict from) => from.Value;
            
            public static implicit operator Elf32_Conflict(ElfNative.Elf32_Addr from) => new Elf32_Conflict(from);
            
            public static bool operator ==(Elf32_Conflict left, Elf32_Conflict right) => left.Equals(right);
            
            public static bool operator !=(Elf32_Conflict left, Elf32_Conflict right) => !left.Equals(right);
        }
        
        public const byte EI_NIDENT = 16;
        
        /// <summary>
        /// File identification byte 0 index
        /// </summary>
        public const byte EI_MAG0 = 0;
        
        /// <summary>
        /// Magic number byte 0
        /// </summary>
        public const byte ELFMAG0 = 127;
        
        /// <summary>
        /// File identification byte 1 index
        /// </summary>
        public const byte EI_MAG1 = 1;
        
        /// <summary>
        /// Magic number byte 1
        /// </summary>
        public const byte ELFMAG1 = 69;
        
        /// <summary>
        /// File identification byte 2 index
        /// </summary>
        public const byte EI_MAG2 = 2;
        
        /// <summary>
        /// Magic number byte 2
        /// </summary>
        public const byte ELFMAG2 = 76;
        
        /// <summary>
        /// File identification byte 3 index
        /// </summary>
        public const byte EI_MAG3 = 3;
        
        /// <summary>
        /// Magic number byte 3
        /// </summary>
        public const byte ELFMAG3 = 70;
        
        /// <summary>
        /// File class byte index
        /// </summary>
        public const byte EI_CLASS = 4;
        
        /// <summary>
        /// Invalid class
        /// </summary>
        public const byte ELFCLASSNONE = 0;
        
        /// <summary>
        /// 32-bit objects
        /// </summary>
        public const byte ELFCLASS32 = 1;
        
        /// <summary>
        /// 64-bit objects
        /// </summary>
        public const byte ELFCLASS64 = 2;
        
        public const byte ELFCLASSNUM = 3;
        
        /// <summary>
        /// Data encoding byte index
        /// </summary>
        public const byte EI_DATA = 5;
        
        /// <summary>
        /// Invalid data encoding
        /// </summary>
        public const byte ELFDATANONE = 0;
        
        /// <summary>
        /// 2's complement, little endian
        /// </summary>
        public const byte ELFDATA2LSB = 1;
        
        /// <summary>
        /// 2's complement, big endian
        /// </summary>
        public const byte ELFDATA2MSB = 2;
        
        public const byte ELFDATANUM = 3;
        
        /// <summary>
        /// File version byte index
        /// </summary>
        public const byte EI_VERSION = 6;
        
        /// <summary>
        /// OS ABI identification
        /// </summary>
        public const byte EI_OSABI = 7;
        
        /// <summary>
        /// UNIX System V ABI
        /// </summary>
        public const byte ELFOSABI_NONE = 0;
        
        /// <summary>
        /// UNIX System V ABI
        /// </summary>
        public const byte ELFOSABI_SYSV = 0;
        
        /// <summary>
        /// HP-UX
        /// </summary>
        public const byte ELFOSABI_HPUX = 1;
        
        /// <summary>
        /// NetBSD.
        /// </summary>
        public const byte ELFOSABI_NETBSD = 2;
        
        /// <summary>
        /// Object uses GNU ELF extensions.
        /// </summary>
        public const byte ELFOSABI_GNU = 3;
        
        /// <summary>
        /// Object uses GNU ELF extensions.
        /// </summary>
        public const byte ELFOSABI_LINUX = 3;
        
        /// <summary>
        /// Sun Solaris.
        /// </summary>
        public const byte ELFOSABI_SOLARIS = 6;
        
        /// <summary>
        /// IBM AIX.
        /// </summary>
        public const byte ELFOSABI_AIX = 7;
        
        /// <summary>
        /// SGI Irix.
        /// </summary>
        public const byte ELFOSABI_IRIX = 8;
        
        /// <summary>
        /// FreeBSD.
        /// </summary>
        public const byte ELFOSABI_FREEBSD = 9;
        
        /// <summary>
        /// Compaq TRU64 UNIX.
        /// </summary>
        public const byte ELFOSABI_TRU64 = 10;
        
        /// <summary>
        /// Novell Modesto.
        /// </summary>
        public const byte ELFOSABI_MODESTO = 11;
        
        /// <summary>
        /// OpenBSD.
        /// </summary>
        public const byte ELFOSABI_OPENBSD = 12;
        
        /// <summary>
        /// ARM EABI
        /// </summary>
        public const byte ELFOSABI_ARM_AEABI = 64;
        
        /// <summary>
        /// ARM
        /// </summary>
        public const byte ELFOSABI_ARM = 97;
        
        /// <summary>
        /// Standalone (embedded) application
        /// </summary>
        public const byte ELFOSABI_STANDALONE = 255;
        
        /// <summary>
        /// ABI version
        /// </summary>
        public const byte EI_ABIVERSION = 8;
        
        /// <summary>
        /// Byte index of padding bytes
        /// </summary>
        public const byte EI_PAD = 9;
        
        /// <summary>
        /// No file type
        /// </summary>
        public const ushort ET_NONE = 0;
        
        /// <summary>
        /// Relocatable file
        /// </summary>
        public const ushort ET_REL = 1;
        
        /// <summary>
        /// Executable file
        /// </summary>
        public const ushort ET_EXEC = 2;
        
        /// <summary>
        /// Shared object file
        /// </summary>
        public const ushort ET_DYN = 3;
        
        /// <summary>
        /// Core file
        /// </summary>
        public const ushort ET_CORE = 4;
        
        /// <summary>
        /// Number of defined types
        /// </summary>
        public const ushort ET_NUM = 5;
        
        /// <summary>
        /// OS-specific range start
        /// </summary>
        public const ushort ET_LOOS = 65024;
        
        /// <summary>
        /// OS-specific range end
        /// </summary>
        public const ushort ET_HIOS = 65279;
        
        /// <summary>
        /// Processor-specific range start
        /// </summary>
        public const ushort ET_LOPROC = 65280;
        
        /// <summary>
        /// Processor-specific range end
        /// </summary>
        public const ushort ET_HIPROC = 65535;
        
        /// <summary>
        /// No machine
        /// </summary>
        public const ushort EM_NONE = 0;
        
        /// <summary>
        /// AT
        /// &amp;T
        /// WE 32100
        /// </summary>
        public const ushort EM_M32 = 1;
        
        /// <summary>
        /// SUN SPARC
        /// </summary>
        public const ushort EM_SPARC = 2;
        
        /// <summary>
        /// Intel 80386
        /// </summary>
        public const ushort EM_386 = 3;
        
        /// <summary>
        /// Motorola m68k family
        /// </summary>
        public const ushort EM_68K = 4;
        
        /// <summary>
        /// Motorola m88k family
        /// </summary>
        public const ushort EM_88K = 5;
        
        /// <summary>
        /// Intel 80860
        /// </summary>
        public const ushort EM_860 = 7;
        
        /// <summary>
        /// MIPS R3000 big-endian
        /// </summary>
        public const ushort EM_MIPS = 8;
        
        /// <summary>
        /// IBM System/370
        /// </summary>
        public const ushort EM_S370 = 9;
        
        /// <summary>
        /// MIPS R3000 little-endian
        /// </summary>
        public const ushort EM_MIPS_RS3_LE = 10;
        
        /// <summary>
        /// HPPA
        /// </summary>
        public const ushort EM_PARISC = 15;
        
        /// <summary>
        /// Fujitsu VPP500
        /// </summary>
        public const ushort EM_VPP500 = 17;
        
        /// <summary>
        /// Sun's "v8plus"
        /// </summary>
        public const ushort EM_SPARC32PLUS = 18;
        
        /// <summary>
        /// Intel 80960
        /// </summary>
        public const ushort EM_960 = 19;
        
        /// <summary>
        /// PowerPC
        /// </summary>
        public const ushort EM_PPC = 20;
        
        /// <summary>
        /// PowerPC 64-bit
        /// </summary>
        public const ushort EM_PPC64 = 21;
        
        /// <summary>
        /// IBM S390
        /// </summary>
        public const ushort EM_S390 = 22;
        
        /// <summary>
        /// NEC V800 series
        /// </summary>
        public const ushort EM_V800 = 36;
        
        /// <summary>
        /// Fujitsu FR20
        /// </summary>
        public const ushort EM_FR20 = 37;
        
        /// <summary>
        /// TRW RH-32
        /// </summary>
        public const ushort EM_RH32 = 38;
        
        /// <summary>
        /// Motorola RCE
        /// </summary>
        public const ushort EM_RCE = 39;
        
        /// <summary>
        /// ARM
        /// </summary>
        public const ushort EM_ARM = 40;
        
        /// <summary>
        /// Digital Alpha
        /// </summary>
        public const ushort EM_FAKE_ALPHA = 41;
        
        /// <summary>
        /// Hitachi SH
        /// </summary>
        public const ushort EM_SH = 42;
        
        /// <summary>
        /// SPARC v9 64-bit
        /// </summary>
        public const ushort EM_SPARCV9 = 43;
        
        /// <summary>
        /// Siemens Tricore
        /// </summary>
        public const ushort EM_TRICORE = 44;
        
        /// <summary>
        /// Argonaut RISC Core
        /// </summary>
        public const ushort EM_ARC = 45;
        
        /// <summary>
        /// Hitachi H8/300
        /// </summary>
        public const ushort EM_H8_300 = 46;
        
        /// <summary>
        /// Hitachi H8/300H
        /// </summary>
        public const ushort EM_H8_300H = 47;
        
        /// <summary>
        /// Hitachi H8S
        /// </summary>
        public const ushort EM_H8S = 48;
        
        /// <summary>
        /// Hitachi H8/500
        /// </summary>
        public const ushort EM_H8_500 = 49;
        
        /// <summary>
        /// Intel Merced
        /// </summary>
        public const ushort EM_IA_64 = 50;
        
        /// <summary>
        /// Stanford MIPS-X
        /// </summary>
        public const ushort EM_MIPS_X = 51;
        
        /// <summary>
        /// Motorola Coldfire
        /// </summary>
        public const ushort EM_COLDFIRE = 52;
        
        /// <summary>
        /// Motorola M68HC12
        /// </summary>
        public const ushort EM_68HC12 = 53;
        
        /// <summary>
        /// Fujitsu MMA Multimedia Accelerator
        /// </summary>
        public const ushort EM_MMA = 54;
        
        /// <summary>
        /// Siemens PCP
        /// </summary>
        public const ushort EM_PCP = 55;
        
        /// <summary>
        /// Sony nCPU embeeded RISC
        /// </summary>
        public const ushort EM_NCPU = 56;
        
        /// <summary>
        /// Denso NDR1 microprocessor
        /// </summary>
        public const ushort EM_NDR1 = 57;
        
        /// <summary>
        /// Motorola Start*Core processor
        /// </summary>
        public const ushort EM_STARCORE = 58;
        
        /// <summary>
        /// Toyota ME16 processor
        /// </summary>
        public const ushort EM_ME16 = 59;
        
        /// <summary>
        /// STMicroelectronic ST100 processor
        /// </summary>
        public const ushort EM_ST100 = 60;
        
        /// <summary>
        /// Advanced Logic Corp. Tinyj emb.fam
        /// </summary>
        public const ushort EM_TINYJ = 61;
        
        /// <summary>
        /// AMD x86-64 architecture
        /// </summary>
        public const ushort EM_X86_64 = 62;
        
        /// <summary>
        /// Sony DSP Processor
        /// </summary>
        public const ushort EM_PDSP = 63;
        
        /// <summary>
        /// Siemens FX66 microcontroller
        /// </summary>
        public const ushort EM_FX66 = 66;
        
        /// <summary>
        /// STMicroelectronics ST9+ 8/16 mc
        /// </summary>
        public const ushort EM_ST9PLUS = 67;
        
        /// <summary>
        /// STmicroelectronics ST7 8 bit mc
        /// </summary>
        public const ushort EM_ST7 = 68;
        
        /// <summary>
        /// Motorola MC68HC16 microcontroller
        /// </summary>
        public const ushort EM_68HC16 = 69;
        
        /// <summary>
        /// Motorola MC68HC11 microcontroller
        /// </summary>
        public const ushort EM_68HC11 = 70;
        
        /// <summary>
        /// Motorola MC68HC08 microcontroller
        /// </summary>
        public const ushort EM_68HC08 = 71;
        
        /// <summary>
        /// Motorola MC68HC05 microcontroller
        /// </summary>
        public const ushort EM_68HC05 = 72;
        
        /// <summary>
        /// Silicon Graphics SVx
        /// </summary>
        public const ushort EM_SVX = 73;
        
        /// <summary>
        /// STMicroelectronics ST19 8 bit mc
        /// </summary>
        public const ushort EM_ST19 = 74;
        
        /// <summary>
        /// Digital VAX
        /// </summary>
        public const ushort EM_VAX = 75;
        
        /// <summary>
        /// Axis Communications 32-bit embedded processor
        /// </summary>
        public const ushort EM_CRIS = 76;
        
        /// <summary>
        /// Infineon Technologies 32-bit embedded processor
        /// </summary>
        public const ushort EM_JAVELIN = 77;
        
        /// <summary>
        /// Element 14 64-bit DSP Processor
        /// </summary>
        public const ushort EM_FIREPATH = 78;
        
        /// <summary>
        /// LSI Logic 16-bit DSP Processor
        /// </summary>
        public const ushort EM_ZSP = 79;
        
        /// <summary>
        /// Donald Knuth's educational 64-bit processor
        /// </summary>
        public const ushort EM_MMIX = 80;
        
        /// <summary>
        /// Harvard University machine-independent object files
        /// </summary>
        public const ushort EM_HUANY = 81;
        
        /// <summary>
        /// SiTera Prism
        /// </summary>
        public const ushort EM_PRISM = 82;
        
        /// <summary>
        /// Atmel AVR 8-bit microcontroller
        /// </summary>
        public const ushort EM_AVR = 83;
        
        /// <summary>
        /// Fujitsu FR30
        /// </summary>
        public const ushort EM_FR30 = 84;
        
        /// <summary>
        /// Mitsubishi D10V
        /// </summary>
        public const ushort EM_D10V = 85;
        
        /// <summary>
        /// Mitsubishi D30V
        /// </summary>
        public const ushort EM_D30V = 86;
        
        /// <summary>
        /// NEC v850
        /// </summary>
        public const ushort EM_V850 = 87;
        
        /// <summary>
        /// Mitsubishi M32R
        /// </summary>
        public const ushort EM_M32R = 88;
        
        /// <summary>
        /// Matsushita MN10300
        /// </summary>
        public const ushort EM_MN10300 = 89;
        
        /// <summary>
        /// Matsushita MN10200
        /// </summary>
        public const ushort EM_MN10200 = 90;
        
        /// <summary>
        /// picoJava
        /// </summary>
        public const ushort EM_PJ = 91;
        
        /// <summary>
        /// OpenRISC 32-bit embedded processor
        /// </summary>
        public const ushort EM_OPENRISC = 92;
        
        /// <summary>
        /// ARC Cores Tangent-A5
        /// </summary>
        public const ushort EM_ARC_A5 = 93;
        
        /// <summary>
        /// Tensilica Xtensa Architecture
        /// </summary>
        public const ushort EM_XTENSA = 94;
        
        /// <summary>
        /// Altera Nios II
        /// </summary>
        public const ushort EM_ALTERA_NIOS2 = 113;
        
        /// <summary>
        /// ARM AARCH64
        /// </summary>
        public const ushort EM_AARCH64 = 183;
        
        /// <summary>
        /// Tilera TILEPro
        /// </summary>
        public const ushort EM_TILEPRO = 188;
        
        /// <summary>
        /// Xilinx MicroBlaze
        /// </summary>
        public const ushort EM_MICROBLAZE = 189;
        
        /// <summary>
        /// Tilera TILE-Gx
        /// </summary>
        public const ushort EM_TILEGX = 191;
        
        public const ushort EM_NUM = 192;
        
        public const ushort EM_ALPHA = 36902;
        
        /// <summary>
        /// Invalid ELF version
        /// </summary>
        public const byte EV_NONE = 0;
        
        /// <summary>
        /// Current version
        /// </summary>
        public const byte EV_CURRENT = 1;
        
        public const byte EV_NUM = 2;
        
        /// <summary>
        /// Undefined section
        /// </summary>
        public const uint SHN_UNDEF = 0;
        
        /// <summary>
        /// Start of reserved indices *k/
        /// #define SHN_LOPROC	0xff00		/* Start of processor-specific
        /// </summary>
        public const uint SHN_LORESERVE = 65280;
        
        /// <summary>
        /// Order section before all others (Solaris).
        /// </summary>
        public const uint SHN_BEFORE = 65280;
        
        /// <summary>
        /// Order section after all others (Solaris).
        /// </summary>
        public const uint SHN_AFTER = 65281;
        
        /// <summary>
        /// End of processor-specific
        /// </summary>
        public const uint SHN_HIPROC = 65311;
        
        /// <summary>
        /// Start of OS-specific
        /// </summary>
        public const uint SHN_LOOS = 65312;
        
        /// <summary>
        /// End of OS-specific
        /// </summary>
        public const uint SHN_HIOS = 65343;
        
        /// <summary>
        /// Associated symbol is absolute
        /// </summary>
        public const uint SHN_ABS = 65521;
        
        /// <summary>
        /// Associated symbol is common
        /// </summary>
        public const uint SHN_COMMON = 65522;
        
        /// <summary>
        /// Index is in extra table.
        /// </summary>
        public const uint SHN_XINDEX = 65535;
        
        /// <summary>
        /// End of reserved indices
        /// </summary>
        public const uint SHN_HIRESERVE = 65535;
        
        /// <summary>
        /// Section header table entry unused
        /// </summary>
        public const uint SHT_NULL = 0;
        
        /// <summary>
        /// Program data
        /// </summary>
        public const uint SHT_PROGBITS = 1;
        
        /// <summary>
        /// Symbol table
        /// </summary>
        public const uint SHT_SYMTAB = 2;
        
        /// <summary>
        /// String table
        /// </summary>
        public const uint SHT_STRTAB = 3;
        
        /// <summary>
        /// Relocation entries with addends
        /// </summary>
        public const uint SHT_RELA = 4;
        
        /// <summary>
        /// Symbol hash table
        /// </summary>
        public const uint SHT_HASH = 5;
        
        /// <summary>
        /// Dynamic linking information
        /// </summary>
        public const uint SHT_DYNAMIC = 6;
        
        /// <summary>
        /// Notes
        /// </summary>
        public const uint SHT_NOTE = 7;
        
        /// <summary>
        /// Program space with no data (bss)
        /// </summary>
        public const uint SHT_NOBITS = 8;
        
        /// <summary>
        /// Relocation entries, no addends
        /// </summary>
        public const uint SHT_REL = 9;
        
        /// <summary>
        /// Reserved
        /// </summary>
        public const uint SHT_SHLIB = 10;
        
        /// <summary>
        /// Dynamic linker symbol table
        /// </summary>
        public const uint SHT_DYNSYM = 11;
        
        /// <summary>
        /// Array of constructors
        /// </summary>
        public const uint SHT_INIT_ARRAY = 14;
        
        /// <summary>
        /// Array of destructors
        /// </summary>
        public const uint SHT_FINI_ARRAY = 15;
        
        /// <summary>
        /// Array of pre-constructors
        /// </summary>
        public const uint SHT_PREINIT_ARRAY = 16;
        
        /// <summary>
        /// Section group
        /// </summary>
        public const uint SHT_GROUP = 17;
        
        /// <summary>
        /// Extended section indeces
        /// </summary>
        public const uint SHT_SYMTAB_SHNDX = 18;
        
        /// <summary>
        /// Number of defined types.
        /// </summary>
        public const uint SHT_NUM = 19;
        
        /// <summary>
        /// Start OS-specific.
        /// </summary>
        public const uint SHT_LOOS = 1610612736;
        
        /// <summary>
        /// Object attributes.
        /// </summary>
        public const uint SHT_GNU_ATTRIBUTES = 1879048181;
        
        /// <summary>
        /// GNU-style hash table.
        /// </summary>
        public const uint SHT_GNU_HASH = 1879048182;
        
        /// <summary>
        /// Prelink library list
        /// </summary>
        public const uint SHT_GNU_LIBLIST = 1879048183;
        
        /// <summary>
        /// Checksum for DSO content.
        /// </summary>
        public const uint SHT_CHECKSUM = 1879048184;
        
        /// <summary>
        /// Sun-specific low bound.
        /// </summary>
        public const uint SHT_LOSUNW = 1879048186;
        
        public const uint SHT_SUNW_move = 1879048186;
        
        public const uint SHT_SUNW_COMDAT = 1879048187;
        
        public const uint SHT_SUNW_syminfo = 1879048188;
        
        /// <summary>
        /// Version definition section.
        /// </summary>
        public const uint SHT_GNU_verdef = 1879048189;
        
        /// <summary>
        /// Version needs section.
        /// </summary>
        public const uint SHT_GNU_verneed = 1879048190;
        
        /// <summary>
        /// Version symbol table.
        /// </summary>
        public const uint SHT_GNU_versym = 1879048191;
        
        /// <summary>
        /// Sun-specific high bound.
        /// </summary>
        public const uint SHT_HISUNW = 1879048191;
        
        /// <summary>
        /// End OS-specific type
        /// </summary>
        public const uint SHT_HIOS = 1879048191;
        
        /// <summary>
        /// Start of processor-specific
        /// </summary>
        public const uint SHT_LOPROC = 1879048192;
        
        /// <summary>
        /// End of processor-specific
        /// </summary>
        public const uint SHT_HIPROC = 2147483647;
        
        /// <summary>
        /// Start of application-specific
        /// </summary>
        public const uint SHT_LOUSER = 0x80000000;
        
        /// <summary>
        /// End of application-specific
        /// </summary>
        public const uint SHT_HIUSER = 0x8fffffff;
        
        /// <summary>
        /// Writable
        /// </summary>
        public const uint SHF_WRITE = 1;
        
        /// <summary>
        /// Occupies memory during execution
        /// </summary>
        public const uint SHF_ALLOC = 2;
        
        /// <summary>
        /// Executable
        /// </summary>
        public const uint SHF_EXECINSTR = 4;
        
        /// <summary>
        /// Might be merged
        /// </summary>
        public const uint SHF_MERGE = 16;
        
        /// <summary>
        /// Contains nul-terminated strings
        /// </summary>
        public const uint SHF_STRINGS = 32;
        
        /// <summary>
        /// `sh_info' contains SHT index
        /// </summary>
        public const uint SHF_INFO_LINK = 64;
        
        /// <summary>
        /// Preserve order after combining
        /// </summary>
        public const uint SHF_LINK_ORDER = 128;
        
        /// <summary>
        /// Non-standard OS specific handling required
        /// </summary>
        public const uint SHF_OS_NONCONFORMING = 256;
        
        /// <summary>
        /// Section is member of a group.
        /// </summary>
        public const uint SHF_GROUP = 512;
        
        /// <summary>
        /// Section hold thread-local data.
        /// </summary>
        public const uint SHF_TLS = 1024;
        
        /// <summary>
        /// Section with compressed data.
        /// </summary>
        public const uint SHF_COMPRESSED = 2048;
        
        /// <summary>
        /// OS-specific.
        /// </summary>
        public const uint SHF_MASKOS = 267386880;
        
        /// <summary>
        /// Processor-specific
        /// </summary>
        public const uint SHF_MASKPROC = 0xf0000000;
        
        /// <summary>
        /// Special ordering requirement (Solaris).
        /// </summary>
        public const uint SHF_ORDERED = 1073741824;
        
        /// <summary>
        /// Section is excluded unless referenced or allocated (Solaris).
        /// </summary>
        public const uint SHF_EXCLUDE = (1U << 31);
        
        /// <summary>
        /// ZLIB/DEFLATE algorithm.
        /// </summary>
        public const int ELFCOMPRESS_ZLIB = 1;
        
        /// <summary>
        /// Start of OS-specific.
        /// </summary>
        public const int ELFCOMPRESS_LOOS = 0x60000000;
        
        /// <summary>
        /// End of OS-specific.
        /// </summary>
        public const int ELFCOMPRESS_HIOS = 0x6fffffff;
        
        /// <summary>
        /// Start of processor-specific.
        /// </summary>
        public const int ELFCOMPRESS_LOPROC = 0x70000000;
        
        /// <summary>
        /// End of processor-specific.
        /// </summary>
        public const int ELFCOMPRESS_HIPROC = 0x7fffffff;
        
        /// <summary>
        /// Symbol bound to self
        /// </summary>
        public const ushort SYMINFO_BT_SELF = 65535;
        
        /// <summary>
        /// Symbol bound to parent
        /// </summary>
        public const ushort SYMINFO_BT_PARENT = 65534;
        
        /// <summary>
        /// Beginning of reserved entries
        /// </summary>
        public const ushort SYMINFO_BT_LOWRESERVE = 65280;
        
        /// <summary>
        /// Direct bound symbol
        /// </summary>
        public const ushort SYMINFO_FLG_DIRECT = 1;
        
        /// <summary>
        /// Pass-thru symbol for translator
        /// </summary>
        public const ushort SYMINFO_FLG_PASSTHRU = 2;
        
        /// <summary>
        /// Symbol is a copy-reloc
        /// </summary>
        public const ushort SYMINFO_FLG_COPY = 4;
        
        /// <summary>
        /// Symbol bound to object to be lazy loaded
        /// </summary>
        public const ushort SYMINFO_FLG_LAZYLOAD = 8;
        
        public const ushort SYMINFO_NONE = 0;
        
        public const ushort SYMINFO_CURRENT = 1;
        
        public const ushort SYMINFO_NUM = 2;
        
        /// <summary>
        /// Local symbol
        /// </summary>
        public const byte STB_LOCAL = 0;
        
        /// <summary>
        /// Global symbol
        /// </summary>
        public const byte STB_GLOBAL = 1;
        
        /// <summary>
        /// Weak symbol
        /// </summary>
        public const byte STB_WEAK = 2;
        
        /// <summary>
        /// Number of defined types.
        /// </summary>
        public const byte STB_NUM = 3;
        
        /// <summary>
        /// Start of OS-specific
        /// </summary>
        public const byte STB_LOOS = 10;
        
        /// <summary>
        /// Unique symbol.
        /// </summary>
        public const byte STB_GNU_UNIQUE = 10;
        
        /// <summary>
        /// End of OS-specific
        /// </summary>
        public const byte STB_HIOS = 12;
        
        /// <summary>
        /// Start of processor-specific
        /// </summary>
        public const byte STB_LOPROC = 13;
        
        /// <summary>
        /// End of processor-specific
        /// </summary>
        public const byte STB_HIPROC = 15;
        
        /// <summary>
        /// Symbol type is unspecified
        /// </summary>
        public const byte STT_NOTYPE = 0;
        
        /// <summary>
        /// Symbol is a data object
        /// </summary>
        public const byte STT_OBJECT = 1;
        
        /// <summary>
        /// Symbol is a code object
        /// </summary>
        public const byte STT_FUNC = 2;
        
        /// <summary>
        /// Symbol associated with a section
        /// </summary>
        public const byte STT_SECTION = 3;
        
        /// <summary>
        /// Symbol's name is file name
        /// </summary>
        public const byte STT_FILE = 4;
        
        /// <summary>
        /// Symbol is a common data object
        /// </summary>
        public const byte STT_COMMON = 5;
        
        /// <summary>
        /// Symbol is thread-local data object
        /// </summary>
        public const byte STT_TLS = 6;
        
        /// <summary>
        /// Number of defined types.
        /// </summary>
        public const byte STT_NUM = 7;
        
        /// <summary>
        /// Start of OS-specific
        /// </summary>
        public const byte STT_LOOS = 10;
        
        /// <summary>
        /// Symbol is indirect code object
        /// </summary>
        public const byte STT_GNU_IFUNC = 10;
        
        /// <summary>
        /// End of OS-specific
        /// </summary>
        public const byte STT_HIOS = 12;
        
        /// <summary>
        /// Start of processor-specific
        /// </summary>
        public const byte STT_LOPROC = 13;
        
        /// <summary>
        /// End of processor-specific
        /// </summary>
        public const byte STT_HIPROC = 15;
        
        /// <summary>
        /// End of a chain.
        /// </summary>
        public const byte STN_UNDEF = 0;
        
        /// <summary>
        /// Default symbol visibility rules
        /// </summary>
        public const byte STV_DEFAULT = 0;
        
        /// <summary>
        /// Processor specific hidden class
        /// </summary>
        public const byte STV_INTERNAL = 1;
        
        /// <summary>
        /// Sym unavailable in other modules
        /// </summary>
        public const byte STV_HIDDEN = 2;
        
        /// <summary>
        /// Not preemptible, not exported
        /// </summary>
        public const byte STV_PROTECTED = 3;
        
        /// <summary>
        /// Program header table entry unused
        /// </summary>
        public const uint PT_NULL = 0;
        
        /// <summary>
        /// Loadable program segment
        /// </summary>
        public const uint PT_LOAD = 1;
        
        /// <summary>
        /// Dynamic linking information
        /// </summary>
        public const uint PT_DYNAMIC = 2;
        
        /// <summary>
        /// Program interpreter
        /// </summary>
        public const uint PT_INTERP = 3;
        
        /// <summary>
        /// Auxiliary information
        /// </summary>
        public const uint PT_NOTE = 4;
        
        /// <summary>
        /// Reserved
        /// </summary>
        public const uint PT_SHLIB = 5;
        
        /// <summary>
        /// Entry for header table itself
        /// </summary>
        public const uint PT_PHDR = 6;
        
        /// <summary>
        /// Thread-local storage segment
        /// </summary>
        public const uint PT_TLS = 7;
        
        /// <summary>
        /// Number of defined types
        /// </summary>
        public const uint PT_NUM = 8;
        
        /// <summary>
        /// Start of OS-specific
        /// </summary>
        public const uint PT_LOOS = 1610612736;
        
        /// <summary>
        /// GCC .eh_frame_hdr segment
        /// </summary>
        public const uint PT_GNU_EH_FRAME = 1685382480;
        
        /// <summary>
        /// Indicates stack executability
        /// </summary>
        public const uint PT_GNU_STACK = 1685382481;
        
        /// <summary>
        /// Read-only after relocation
        /// </summary>
        public const uint PT_GNU_RELRO = 1685382482;
        
        public const uint PT_LOSUNW = 1879048186;
        
        /// <summary>
        /// Sun Specific segment
        /// </summary>
        public const uint PT_SUNWBSS = 1879048186;
        
        /// <summary>
        /// Stack segment
        /// </summary>
        public const uint PT_SUNWSTACK = 1879048187;
        
        public const uint PT_HISUNW = 1879048191;
        
        /// <summary>
        /// End of OS-specific
        /// </summary>
        public const uint PT_HIOS = 1879048191;
        
        /// <summary>
        /// Start of processor-specific
        /// </summary>
        public const uint PT_LOPROC = 1879048192;
        
        /// <summary>
        /// End of processor-specific
        /// </summary>
        public const uint PT_HIPROC = 2147483647;
        
        /// <summary>
        /// Segment is executable
        /// </summary>
        public const uint PF_X = 1;
        
        /// <summary>
        /// Segment is writable
        /// </summary>
        public const uint PF_W = 2;
        
        /// <summary>
        /// Segment is readable
        /// </summary>
        public const uint PF_R = 4;
        
        /// <summary>
        /// OS-specific
        /// </summary>
        public const uint PF_MASKOS = 267386880;
        
        /// <summary>
        /// Processor-specific
        /// </summary>
        public const uint PF_MASKPROC = 0xf0000000;
        
        /// <summary>
        /// Contains copy of prstatus struct
        /// </summary>
        public const uint NT_PRSTATUS = 1;
        
        /// <summary>
        /// Contains copy of fpregset struct
        /// </summary>
        public const uint NT_FPREGSET = 2;
        
        /// <summary>
        /// Contains copy of prpsinfo struct
        /// </summary>
        public const uint NT_PRPSINFO = 3;
        
        /// <summary>
        /// Contains copy of prxregset struct
        /// </summary>
        public const uint NT_PRXREG = 4;
        
        /// <summary>
        /// Contains copy of task structure
        /// </summary>
        public const uint NT_TASKSTRUCT = 4;
        
        /// <summary>
        /// String from sysinfo(SI_PLATFORM)
        /// </summary>
        public const uint NT_PLATFORM = 5;
        
        /// <summary>
        /// Contains copy of auxv array
        /// </summary>
        public const uint NT_AUXV = 6;
        
        /// <summary>
        /// Contains copy of gwindows struct
        /// </summary>
        public const uint NT_GWINDOWS = 7;
        
        /// <summary>
        /// Contains copy of asrset struct
        /// </summary>
        public const uint NT_ASRS = 8;
        
        /// <summary>
        /// Contains copy of pstatus struct
        /// </summary>
        public const uint NT_PSTATUS = 10;
        
        /// <summary>
        /// Contains copy of psinfo struct
        /// </summary>
        public const uint NT_PSINFO = 13;
        
        /// <summary>
        /// Contains copy of prcred struct
        /// </summary>
        public const uint NT_PRCRED = 14;
        
        /// <summary>
        /// Contains copy of utsname struct
        /// </summary>
        public const uint NT_UTSNAME = 15;
        
        /// <summary>
        /// Contains copy of lwpstatus struct
        /// </summary>
        public const uint NT_LWPSTATUS = 16;
        
        /// <summary>
        /// Contains copy of lwpinfo struct
        /// </summary>
        public const uint NT_LWPSINFO = 17;
        
        /// <summary>
        /// Contains copy of fprxregset struct
        /// </summary>
        public const uint NT_PRFPXREG = 20;
        
        /// <summary>
        /// Contains copy of siginfo_t, size might increase
        /// </summary>
        public const uint NT_SIGINFO = 1397311305;
        
        /// <summary>
        /// Contains information about mapped files
        /// </summary>
        public const uint NT_FILE = 1179208773;
        
        /// <summary>
        /// Contains copy of user_fxsr_struct
        /// </summary>
        public const uint NT_PRXFPREG = 1189489535;
        
        /// <summary>
        /// PowerPC Altivec/VMX registers
        /// </summary>
        public const uint NT_PPC_VMX = 256;
        
        /// <summary>
        /// PowerPC SPE/EVR registers
        /// </summary>
        public const uint NT_PPC_SPE = 257;
        
        /// <summary>
        /// PowerPC VSX registers
        /// </summary>
        public const uint NT_PPC_VSX = 258;
        
        /// <summary>
        /// i386 TLS slots (struct user_desc)
        /// </summary>
        public const uint NT_386_TLS = 512;
        
        /// <summary>
        /// x86 io permission bitmap (1=deny)
        /// </summary>
        public const uint NT_386_IOPERM = 513;
        
        /// <summary>
        /// x86 extended state using xsave
        /// </summary>
        public const uint NT_X86_XSTATE = 514;
        
        /// <summary>
        /// s390 upper register halves
        /// </summary>
        public const uint NT_S390_HIGH_GPRS = 768;
        
        /// <summary>
        /// s390 timer register
        /// </summary>
        public const uint NT_S390_TIMER = 769;
        
        /// <summary>
        /// s390 TOD clock comparator register
        /// </summary>
        public const uint NT_S390_TODCMP = 770;
        
        /// <summary>
        /// s390 TOD programmable register
        /// </summary>
        public const uint NT_S390_TODPREG = 771;
        
        /// <summary>
        /// s390 control registers
        /// </summary>
        public const uint NT_S390_CTRS = 772;
        
        /// <summary>
        /// s390 prefix register
        /// </summary>
        public const uint NT_S390_PREFIX = 773;
        
        /// <summary>
        /// s390 breaking event address
        /// </summary>
        public const uint NT_S390_LAST_BREAK = 774;
        
        /// <summary>
        /// s390 system call restart data
        /// </summary>
        public const uint NT_S390_SYSTEM_CALL = 775;
        
        /// <summary>
        /// s390 transaction diagnostic block
        /// </summary>
        public const uint NT_S390_TDB = 776;
        
        /// <summary>
        /// ARM VFP/NEON registers
        /// </summary>
        public const uint NT_ARM_VFP = 1024;
        
        /// <summary>
        /// ARM TLS register
        /// </summary>
        public const uint NT_ARM_TLS = 1025;
        
        /// <summary>
        /// ARM hardware breakpoint registers
        /// </summary>
        public const uint NT_ARM_HW_BREAK = 1026;
        
        /// <summary>
        /// ARM hardware watchpoint registers
        /// </summary>
        public const uint NT_ARM_HW_WATCH = 1027;
        
        /// <summary>
        /// Contains a version string.
        /// </summary>
        public const uint NT_VERSION = 1;
        
        /// <summary>
        /// Marks end of dynamic section
        /// </summary>
        public const int DT_NULL = 0;
        
        /// <summary>
        /// Name of needed library
        /// </summary>
        public const int DT_NEEDED = 1;
        
        /// <summary>
        /// Size in bytes of PLT relocs
        /// </summary>
        public const int DT_PLTRELSZ = 2;
        
        /// <summary>
        /// Processor defined value
        /// </summary>
        public const int DT_PLTGOT = 3;
        
        /// <summary>
        /// Address of symbol hash table
        /// </summary>
        public const int DT_HASH = 4;
        
        /// <summary>
        /// Address of string table
        /// </summary>
        public const int DT_STRTAB = 5;
        
        /// <summary>
        /// Address of symbol table
        /// </summary>
        public const int DT_SYMTAB = 6;
        
        /// <summary>
        /// Address of Rela relocs
        /// </summary>
        public const int DT_RELA = 7;
        
        /// <summary>
        /// Total size of Rela relocs
        /// </summary>
        public const int DT_RELASZ = 8;
        
        /// <summary>
        /// Size of one Rela reloc
        /// </summary>
        public const int DT_RELAENT = 9;
        
        /// <summary>
        /// Size of string table
        /// </summary>
        public const int DT_STRSZ = 10;
        
        /// <summary>
        /// Size of one symbol table entry
        /// </summary>
        public const int DT_SYMENT = 11;
        
        /// <summary>
        /// Address of init function
        /// </summary>
        public const int DT_INIT = 12;
        
        /// <summary>
        /// Address of termination function
        /// </summary>
        public const int DT_FINI = 13;
        
        /// <summary>
        /// Name of shared object
        /// </summary>
        public const int DT_SONAME = 14;
        
        /// <summary>
        /// Library search path (deprecated)
        /// </summary>
        public const int DT_RPATH = 15;
        
        /// <summary>
        /// Start symbol search here
        /// </summary>
        public const int DT_SYMBOLIC = 16;
        
        /// <summary>
        /// Address of Rel relocs
        /// </summary>
        public const int DT_REL = 17;
        
        /// <summary>
        /// Total size of Rel relocs
        /// </summary>
        public const int DT_RELSZ = 18;
        
        /// <summary>
        /// Size of one Rel reloc
        /// </summary>
        public const int DT_RELENT = 19;
        
        /// <summary>
        /// Type of reloc in PLT
        /// </summary>
        public const int DT_PLTREL = 20;
        
        /// <summary>
        /// For debugging; unspecified
        /// </summary>
        public const int DT_DEBUG = 21;
        
        /// <summary>
        /// Reloc might modify .text
        /// </summary>
        public const int DT_TEXTREL = 22;
        
        /// <summary>
        /// Address of PLT relocs
        /// </summary>
        public const int DT_JMPREL = 23;
        
        /// <summary>
        /// Process relocations of object
        /// </summary>
        public const int DT_BIND_NOW = 24;
        
        /// <summary>
        /// Array with addresses of init fct
        /// </summary>
        public const int DT_INIT_ARRAY = 25;
        
        /// <summary>
        /// Array with addresses of fini fct
        /// </summary>
        public const int DT_FINI_ARRAY = 26;
        
        /// <summary>
        /// Size in bytes of DT_INIT_ARRAY
        /// </summary>
        public const int DT_INIT_ARRAYSZ = 27;
        
        /// <summary>
        /// Size in bytes of DT_FINI_ARRAY
        /// </summary>
        public const int DT_FINI_ARRAYSZ = 28;
        
        /// <summary>
        /// Library search path
        /// </summary>
        public const int DT_RUNPATH = 29;
        
        /// <summary>
        /// Flags for the object being loaded
        /// </summary>
        public const int DT_FLAGS = 30;
        
        /// <summary>
        /// Start of encoded range
        /// </summary>
        public const int DT_ENCODING = 32;
        
        /// <summary>
        /// Array with addresses of preinit fct
        /// </summary>
        public const int DT_PREINIT_ARRAY = 32;
        
        /// <summary>
        /// size in bytes of DT_PREINIT_ARRAY
        /// </summary>
        public const int DT_PREINIT_ARRAYSZ = 33;
        
        /// <summary>
        /// Number used
        /// </summary>
        public const int DT_NUM = 34;
        
        /// <summary>
        /// Start of OS-specific
        /// </summary>
        public const int DT_LOOS = 0x6000000d;
        
        /// <summary>
        /// End of OS-specific
        /// </summary>
        public const int DT_HIOS = 0x6ffff000;
        
        /// <summary>
        /// Start of processor-specific
        /// </summary>
        public const int DT_LOPROC = 0x70000000;
        
        /// <summary>
        /// End of processor-specific
        /// </summary>
        public const int DT_HIPROC = 0x7fffffff;
        
        /// <summary>
        /// Most used by any processor
        /// </summary>
        public const int DT_PROCNUM = 0x36;
        
        public const int DT_VALRNGLO = 0x6ffffd00;
        
        /// <summary>
        /// Prelinking timestamp
        /// </summary>
        public const int DT_GNU_PRELINKED = 0x6ffffdf5;
        
        /// <summary>
        /// Size of conflict section
        /// </summary>
        public const int DT_GNU_CONFLICTSZ = 0x6ffffdf6;
        
        /// <summary>
        /// Size of library list
        /// </summary>
        public const int DT_GNU_LIBLISTSZ = 0x6ffffdf7;
        
        public const int DT_CHECKSUM = 0x6ffffdf8;
        
        public const int DT_PLTPADSZ = 0x6ffffdf9;
        
        public const int DT_MOVEENT = 0x6ffffdfa;
        
        public const int DT_MOVESZ = 0x6ffffdfb;
        
        /// <summary>
        /// Feature selection (DTF_*).
        /// </summary>
        public const int DT_FEATURE_1 = 0x6ffffdfc;
        
        /// <summary>
        /// Flags for DT_* entries, effecting the following DT_* entry.
        /// </summary>
        public const int DT_POSFLAG_1 = 0x6ffffdfd;
        
        /// <summary>
        /// Size of syminfo table (in bytes)
        /// </summary>
        public const int DT_SYMINSZ = 0x6ffffdfe;
        
        /// <summary>
        /// Entry size of syminfo
        /// </summary>
        public const int DT_SYMINENT = 0x6ffffdff;
        
        public const int DT_VALRNGHI = 0x6ffffdff;
        
        public const int DT_VALNUM = 12;
        
        public const int DT_ADDRRNGLO = 0x6ffffe00;
        
        /// <summary>
        /// GNU-style hash table.
        /// </summary>
        public const int DT_GNU_HASH = 0x6ffffef5;
        
        public const int DT_TLSDESC_PLT = 0x6ffffef6;
        
        public const int DT_TLSDESC_GOT = 0x6ffffef7;
        
        /// <summary>
        /// Start of conflict section
        /// </summary>
        public const int DT_GNU_CONFLICT = 0x6ffffef8;
        
        /// <summary>
        /// Library list
        /// </summary>
        public const int DT_GNU_LIBLIST = 0x6ffffef9;
        
        /// <summary>
        /// Configuration information.
        /// </summary>
        public const int DT_CONFIG = 0x6ffffefa;
        
        /// <summary>
        /// Dependency auditing.
        /// </summary>
        public const int DT_DEPAUDIT = 0x6ffffefb;
        
        /// <summary>
        /// Object auditing.
        /// </summary>
        public const int DT_AUDIT = 0x6ffffefc;
        
        /// <summary>
        /// PLT padding.
        /// </summary>
        public const int DT_PLTPAD = 0x6ffffefd;
        
        /// <summary>
        /// Move table.
        /// </summary>
        public const int DT_MOVETAB = 0x6ffffefe;
        
        /// <summary>
        /// Syminfo table.
        /// </summary>
        public const int DT_SYMINFO = 0x6ffffeff;
        
        public const int DT_ADDRRNGHI = 0x6ffffeff;
        
        public const int DT_ADDRNUM = 11;
        
        public const int DT_VERSYM = 0x6ffffff0;
        
        public const int DT_RELACOUNT = 0x6ffffff9;
        
        public const int DT_RELCOUNT = 0x6ffffffa;
        
        /// <summary>
        /// State flags, see DF_1_* below.
        /// </summary>
        public const int DT_FLAGS_1 = 0x6ffffffb;
        
        /// <summary>
        /// Address of version definition table
        /// </summary>
        public const int DT_VERDEF = 0x6ffffffc;
        
        /// <summary>
        /// Number of version definitions
        /// </summary>
        public const int DT_VERDEFNUM = 0x6ffffffd;
        
        /// <summary>
        /// Address of table with needed versions
        /// </summary>
        public const int DT_VERNEED = 0x6ffffffe;
        
        /// <summary>
        /// Number of needed versions
        /// </summary>
        public const int DT_VERNEEDNUM = 0x6fffffff;
        
        public const int DT_VERSIONTAGNUM = 16;
        
        /// <summary>
        /// Shared object to load before self
        /// </summary>
        public const int DT_AUXILIARY = 0x7ffffffd;
        
        /// <summary>
        /// Shared object to get values from
        /// </summary>
        public const int DT_FILTER = 0x7fffffff;
        
        public const int DT_EXTRANUM = 3;
        
        /// <summary>
        /// Object may use DF_ORIGIN
        /// </summary>
        public const uint DF_ORIGIN = 1;
        
        /// <summary>
        /// Symbol resolutions starts here
        /// </summary>
        public const uint DF_SYMBOLIC = 2;
        
        /// <summary>
        /// Object contains text relocations
        /// </summary>
        public const uint DF_TEXTREL = 4;
        
        /// <summary>
        /// No lazy binding for this object
        /// </summary>
        public const uint DF_BIND_NOW = 8;
        
        /// <summary>
        /// Module uses the static TLS model
        /// </summary>
        public const uint DF_STATIC_TLS = 16;
        
        /// <summary>
        /// Set RTLD_NOW for this object.
        /// </summary>
        public const uint DF_1_NOW = 1;
        
        /// <summary>
        /// Set RTLD_GLOBAL for this object.
        /// </summary>
        public const uint DF_1_GLOBAL = 2;
        
        /// <summary>
        /// Set RTLD_GROUP for this object.
        /// </summary>
        public const uint DF_1_GROUP = 4;
        
        /// <summary>
        /// Set RTLD_NODELETE for this object.
        /// </summary>
        public const uint DF_1_NODELETE = 8;
        
        /// <summary>
        /// Trigger filtee loading at runtime.
        /// </summary>
        public const uint DF_1_LOADFLTR = 16;
        
        /// <summary>
        /// Set RTLD_INITFIRST for this object
        /// </summary>
        public const uint DF_1_INITFIRST = 32;
        
        /// <summary>
        /// Set RTLD_NOOPEN for this object.
        /// </summary>
        public const uint DF_1_NOOPEN = 64;
        
        /// <summary>
        /// $ORIGIN must be handled.
        /// </summary>
        public const uint DF_1_ORIGIN = 128;
        
        /// <summary>
        /// Direct binding enabled.
        /// </summary>
        public const uint DF_1_DIRECT = 256;
        
        public const uint DF_1_TRANS = 512;
        
        /// <summary>
        /// Object is used to interpose.
        /// </summary>
        public const uint DF_1_INTERPOSE = 1024;
        
        /// <summary>
        /// Ignore default lib search path.
        /// </summary>
        public const uint DF_1_NODEFLIB = 2048;
        
        /// <summary>
        /// Object can't be dldump'ed.
        /// </summary>
        public const uint DF_1_NODUMP = 4096;
        
        /// <summary>
        /// Configuration alternative created.
        /// </summary>
        public const uint DF_1_CONFALT = 8192;
        
        /// <summary>
        /// Filtee terminates filters search.
        /// </summary>
        public const uint DF_1_ENDFILTEE = 16384;
        
        /// <summary>
        /// Disp reloc applied at build time.
        /// </summary>
        public const uint DF_1_DISPRELDNE = 32768;
        
        /// <summary>
        /// Disp reloc applied at run-time.
        /// </summary>
        public const uint DF_1_DISPRELPND = 65536;
        
        /// <summary>
        /// Object has no-direct binding.
        /// </summary>
        public const uint DF_1_NODIRECT = 131072;
        
        public const uint DF_1_IGNMULDEF = 262144;
        
        public const uint DF_1_NOKSYMS = 524288;
        
        public const uint DF_1_NOHDR = 1048576;
        
        /// <summary>
        /// Object is modified after built.
        /// </summary>
        public const uint DF_1_EDITED = 2097152;
        
        public const uint DF_1_NORELOC = 4194304;
        
        /// <summary>
        /// Object has individual interposers.
        /// </summary>
        public const uint DF_1_SYMINTPOSE = 8388608;
        
        /// <summary>
        /// Global auditing required.
        /// </summary>
        public const uint DF_1_GLOBAUDIT = 16777216;
        
        /// <summary>
        /// Singleton symbols are used.
        /// </summary>
        public const uint DF_1_SINGLETON = 33554432;
        
        public const uint DTF_1_PARINIT = 1;
        
        public const uint DTF_1_CONFEXP = 2;
        
        /// <summary>
        /// Lazyload following object.
        /// </summary>
        public const uint DF_P1_LAZYLOAD = 1;
        
        /// <summary>
        /// Symbols from next object are not generally available.
        /// </summary>
        public const uint DF_P1_GROUPPERM = 2;
        
        /// <summary>
        /// No version
        /// </summary>
        public const ushort VER_DEF_NONE = 0;
        
        /// <summary>
        /// Current version
        /// </summary>
        public const ushort VER_DEF_CURRENT = 1;
        
        /// <summary>
        /// Given version number
        /// </summary>
        public const ushort VER_DEF_NUM = 2;
        
        /// <summary>
        /// Version definition of file itself
        /// </summary>
        public const ushort VER_FLG_BASE = 1;
        
        /// <summary>
        /// Weak version identifier
        /// </summary>
        public const ushort VER_FLG_WEAK = 2;
        
        /// <summary>
        /// Symbol is local.
        /// </summary>
        public const ushort VER_NDX_LOCAL = 0;
        
        /// <summary>
        /// Symbol is global.
        /// </summary>
        public const ushort VER_NDX_GLOBAL = 1;
        
        /// <summary>
        /// Beginning of reserved entries.
        /// </summary>
        public const ushort VER_NDX_LORESERVE = 65280;
        
        /// <summary>
        /// Symbol is to be eliminated.
        /// </summary>
        public const ushort VER_NDX_ELIMINATE = 65281;
        
        /// <summary>
        /// No version
        /// </summary>
        public const ushort VER_NEED_NONE = 0;
        
        /// <summary>
        /// Current version
        /// </summary>
        public const ushort VER_NEED_CURRENT = 1;
        
        /// <summary>
        /// Given version number
        /// </summary>
        public const ushort VER_NEED_NUM = 2;
        
        public const uint NT_GNU_ABI_TAG = 1;
        
        public const uint ELF_NOTE_OS_LINUX = 0;
        
        public const uint ELF_NOTE_OS_GNU = 1;
        
        public const uint ELF_NOTE_OS_SOLARIS2 = 2;
        
        public const uint ELF_NOTE_OS_FREEBSD = 3;
        
        public const uint NT_GNU_HWCAP = 2;
        
        public const uint NT_GNU_BUILD_ID = 3;
        
        public const uint NT_GNU_GOLD_VERSION = 4;
        
        public const uint EF_CPU32 = 8454144;
        
        /// <summary>
        /// No reloc
        /// </summary>
        public const uint R_68K_NONE = 0;
        
        /// <summary>
        /// Direct 32 bit
        /// </summary>
        public const uint R_68K_32 = 1;
        
        /// <summary>
        /// Direct 16 bit
        /// </summary>
        public const uint R_68K_16 = 2;
        
        /// <summary>
        /// Direct 8 bit
        /// </summary>
        public const uint R_68K_8 = 3;
        
        /// <summary>
        /// PC relative 32 bit
        /// </summary>
        public const uint R_68K_PC32 = 4;
        
        /// <summary>
        /// PC relative 16 bit
        /// </summary>
        public const uint R_68K_PC16 = 5;
        
        /// <summary>
        /// PC relative 8 bit
        /// </summary>
        public const uint R_68K_PC8 = 6;
        
        /// <summary>
        /// 32 bit PC relative GOT entry
        /// </summary>
        public const uint R_68K_GOT32 = 7;
        
        /// <summary>
        /// 16 bit PC relative GOT entry
        /// </summary>
        public const uint R_68K_GOT16 = 8;
        
        /// <summary>
        /// 8 bit PC relative GOT entry
        /// </summary>
        public const uint R_68K_GOT8 = 9;
        
        /// <summary>
        /// 32 bit GOT offset
        /// </summary>
        public const uint R_68K_GOT32O = 10;
        
        /// <summary>
        /// 16 bit GOT offset
        /// </summary>
        public const uint R_68K_GOT16O = 11;
        
        /// <summary>
        /// 8 bit GOT offset
        /// </summary>
        public const uint R_68K_GOT8O = 12;
        
        /// <summary>
        /// 32 bit PC relative PLT address
        /// </summary>
        public const uint R_68K_PLT32 = 13;
        
        /// <summary>
        /// 16 bit PC relative PLT address
        /// </summary>
        public const uint R_68K_PLT16 = 14;
        
        /// <summary>
        /// 8 bit PC relative PLT address
        /// </summary>
        public const uint R_68K_PLT8 = 15;
        
        /// <summary>
        /// 32 bit PLT offset
        /// </summary>
        public const uint R_68K_PLT32O = 16;
        
        /// <summary>
        /// 16 bit PLT offset
        /// </summary>
        public const uint R_68K_PLT16O = 17;
        
        /// <summary>
        /// 8 bit PLT offset
        /// </summary>
        public const uint R_68K_PLT8O = 18;
        
        /// <summary>
        /// Copy symbol at runtime
        /// </summary>
        public const uint R_68K_COPY = 19;
        
        /// <summary>
        /// Create GOT entry
        /// </summary>
        public const uint R_68K_GLOB_DAT = 20;
        
        /// <summary>
        /// Create PLT entry
        /// </summary>
        public const uint R_68K_JMP_SLOT = 21;
        
        /// <summary>
        /// Adjust by program base
        /// </summary>
        public const uint R_68K_RELATIVE = 22;
        
        /// <summary>
        /// 32 bit GOT offset for GD
        /// </summary>
        public const uint R_68K_TLS_GD32 = 25;
        
        /// <summary>
        /// 16 bit GOT offset for GD
        /// </summary>
        public const uint R_68K_TLS_GD16 = 26;
        
        /// <summary>
        /// 8 bit GOT offset for GD
        /// </summary>
        public const uint R_68K_TLS_GD8 = 27;
        
        /// <summary>
        /// 32 bit GOT offset for LDM
        /// </summary>
        public const uint R_68K_TLS_LDM32 = 28;
        
        /// <summary>
        /// 16 bit GOT offset for LDM
        /// </summary>
        public const uint R_68K_TLS_LDM16 = 29;
        
        /// <summary>
        /// 8 bit GOT offset for LDM
        /// </summary>
        public const uint R_68K_TLS_LDM8 = 30;
        
        /// <summary>
        /// 32 bit module-relative offset
        /// </summary>
        public const uint R_68K_TLS_LDO32 = 31;
        
        /// <summary>
        /// 16 bit module-relative offset
        /// </summary>
        public const uint R_68K_TLS_LDO16 = 32;
        
        /// <summary>
        /// 8 bit module-relative offset
        /// </summary>
        public const uint R_68K_TLS_LDO8 = 33;
        
        /// <summary>
        /// 32 bit GOT offset for IE
        /// </summary>
        public const uint R_68K_TLS_IE32 = 34;
        
        /// <summary>
        /// 16 bit GOT offset for IE
        /// </summary>
        public const uint R_68K_TLS_IE16 = 35;
        
        /// <summary>
        /// 8 bit GOT offset for IE
        /// </summary>
        public const uint R_68K_TLS_IE8 = 36;
        
        /// <summary>
        /// 32 bit offset relative to static TLS block
        /// </summary>
        public const uint R_68K_TLS_LE32 = 37;
        
        /// <summary>
        /// 16 bit offset relative to static TLS block
        /// </summary>
        public const uint R_68K_TLS_LE16 = 38;
        
        /// <summary>
        /// 8 bit offset relative to static TLS block
        /// </summary>
        public const uint R_68K_TLS_LE8 = 39;
        
        /// <summary>
        /// 32 bit module number
        /// </summary>
        public const uint R_68K_TLS_DTPMOD32 = 40;
        
        /// <summary>
        /// 32 bit module-relative offset
        /// </summary>
        public const uint R_68K_TLS_DTPREL32 = 41;
        
        /// <summary>
        /// 32 bit TP-relative offset
        /// </summary>
        public const uint R_68K_TLS_TPREL32 = 42;
        
        public const uint R_68K_NUM = 43;
        
        /// <summary>
        /// No reloc
        /// </summary>
        public const uint R_386_NONE = 0;
        
        /// <summary>
        /// Direct 32 bit
        /// </summary>
        public const uint R_386_32 = 1;
        
        /// <summary>
        /// PC relative 32 bit
        /// </summary>
        public const uint R_386_PC32 = 2;
        
        /// <summary>
        /// 32 bit GOT entry
        /// </summary>
        public const uint R_386_GOT32 = 3;
        
        /// <summary>
        /// 32 bit PLT address
        /// </summary>
        public const uint R_386_PLT32 = 4;
        
        /// <summary>
        /// Copy symbol at runtime
        /// </summary>
        public const uint R_386_COPY = 5;
        
        /// <summary>
        /// Create GOT entry
        /// </summary>
        public const uint R_386_GLOB_DAT = 6;
        
        /// <summary>
        /// Create PLT entry
        /// </summary>
        public const uint R_386_JMP_SLOT = 7;
        
        /// <summary>
        /// Adjust by program base
        /// </summary>
        public const uint R_386_RELATIVE = 8;
        
        /// <summary>
        /// 32 bit offset to GOT
        /// </summary>
        public const uint R_386_GOTOFF = 9;
        
        /// <summary>
        /// 32 bit PC relative offset to GOT
        /// </summary>
        public const uint R_386_GOTPC = 10;
        
        public const uint R_386_32PLT = 11;
        
        /// <summary>
        /// Offset in static TLS block
        /// </summary>
        public const uint R_386_TLS_TPOFF = 14;
        
        /// <summary>
        /// Address of GOT entry for static TLS block offset
        /// </summary>
        public const uint R_386_TLS_IE = 15;
        
        /// <summary>
        /// GOT entry for static TLS block offset
        /// </summary>
        public const uint R_386_TLS_GOTIE = 16;
        
        /// <summary>
        /// Offset relative to static TLS block
        /// </summary>
        public const uint R_386_TLS_LE = 17;
        
        /// <summary>
        /// Direct 32 bit for GNU version of general dynamic thread local data
        /// </summary>
        public const uint R_386_TLS_GD = 18;
        
        /// <summary>
        /// Direct 32 bit for GNU version of local dynamic thread local data in LE code
        /// </summary>
        public const uint R_386_TLS_LDM = 19;
        
        public const uint R_386_16 = 20;
        
        public const uint R_386_PC16 = 21;
        
        public const uint R_386_8 = 22;
        
        public const uint R_386_PC8 = 23;
        
        /// <summary>
        /// Direct 32 bit for general dynamic
        /// thread local data
        /// </summary>
        public const uint R_386_TLS_GD_32 = 24;
        
        /// <summary>
        /// Tag for pushl in GD TLS code
        /// </summary>
        public const uint R_386_TLS_GD_PUSH = 25;
        
        /// <summary>
        /// Relocation for call to
        /// __tls_get_addr()
        /// </summary>
        public const uint R_386_TLS_GD_CALL = 26;
        
        /// <summary>
        /// Tag for popl in GD TLS code
        /// </summary>
        public const uint R_386_TLS_GD_POP = 27;
        
        /// <summary>
        /// Direct 32 bit for local dynamic
        /// thread local data in LE code
        /// </summary>
        public const uint R_386_TLS_LDM_32 = 28;
        
        /// <summary>
        /// Tag for pushl in LDM TLS code
        /// </summary>
        public const uint R_386_TLS_LDM_PUSH = 29;
        
        /// <summary>
        /// Relocation for call to
        /// __tls_get_addr() in LDM code
        /// </summary>
        public const uint R_386_TLS_LDM_CALL = 30;
        
        /// <summary>
        /// Tag for popl in LDM TLS code
        /// </summary>
        public const uint R_386_TLS_LDM_POP = 31;
        
        /// <summary>
        /// Offset relative to TLS block
        /// </summary>
        public const uint R_386_TLS_LDO_32 = 32;
        
        /// <summary>
        /// GOT entry for negated static TLS
        /// block offset
        /// </summary>
        public const uint R_386_TLS_IE_32 = 33;
        
        /// <summary>
        /// Negated offset relative to static
        /// TLS block
        /// </summary>
        public const uint R_386_TLS_LE_32 = 34;
        
        /// <summary>
        /// ID of module containing symbol
        /// </summary>
        public const uint R_386_TLS_DTPMOD32 = 35;
        
        /// <summary>
        /// Offset in TLS block
        /// </summary>
        public const uint R_386_TLS_DTPOFF32 = 36;
        
        /// <summary>
        /// Negated offset in static TLS block
        /// </summary>
        public const uint R_386_TLS_TPOFF32 = 37;
        
        /// <summary>
        /// 32-bit symbol size
        /// </summary>
        public const uint R_386_SIZE32 = 38;
        
        /// <summary>
        /// GOT offset for TLS descriptor.
        /// </summary>
        public const uint R_386_TLS_GOTDESC = 39;
        
        /// <summary>
        /// Marker of call through TLS
        /// descriptor for
        /// relaxation.
        /// </summary>
        public const uint R_386_TLS_DESC_CALL = 40;
        
        /// <summary>
        /// TLS descriptor containing
        /// pointer to code and to
        /// argument, returning the TLS
        /// offset for the symbol.
        /// </summary>
        public const uint R_386_TLS_DESC = 41;
        
        /// <summary>
        /// Adjust indirectly by program base
        /// </summary>
        public const uint R_386_IRELATIVE = 42;
        
        public const uint R_386_NUM = 43;
        
        /// <summary>
        /// Global register reserved to app.
        /// </summary>
        public const byte STT_SPARC_REGISTER = 13;
        
        public const uint EF_SPARCV9_MM = 3;
        
        public const uint EF_SPARCV9_TSO = 0;
        
        public const uint EF_SPARCV9_PSO = 1;
        
        public const uint EF_SPARCV9_RMO = 2;
        
        /// <summary>
        /// little endian data
        /// </summary>
        public const uint EF_SPARC_LEDATA = 8388608;
        
        public const uint EF_SPARC_EXT_MASK = 16776960;
        
        /// <summary>
        /// generic V8+ features
        /// </summary>
        public const uint EF_SPARC_32PLUS = 256;
        
        /// <summary>
        /// Sun UltraSPARC1 extensions
        /// </summary>
        public const uint EF_SPARC_SUN_US1 = 512;
        
        /// <summary>
        /// HAL R1 extensions
        /// </summary>
        public const uint EF_SPARC_HAL_R1 = 1024;
        
        /// <summary>
        /// Sun UltraSPARCIII extensions
        /// </summary>
        public const uint EF_SPARC_SUN_US3 = 2048;
        
        /// <summary>
        /// No reloc
        /// </summary>
        public const uint R_SPARC_NONE = 0;
        
        /// <summary>
        /// Direct 8 bit
        /// </summary>
        public const uint R_SPARC_8 = 1;
        
        /// <summary>
        /// Direct 16 bit
        /// </summary>
        public const uint R_SPARC_16 = 2;
        
        /// <summary>
        /// Direct 32 bit
        /// </summary>
        public const uint R_SPARC_32 = 3;
        
        /// <summary>
        /// PC relative 8 bit
        /// </summary>
        public const uint R_SPARC_DISP8 = 4;
        
        /// <summary>
        /// PC relative 16 bit
        /// </summary>
        public const uint R_SPARC_DISP16 = 5;
        
        /// <summary>
        /// PC relative 32 bit
        /// </summary>
        public const uint R_SPARC_DISP32 = 6;
        
        /// <summary>
        /// PC relative 30 bit shifted
        /// </summary>
        public const uint R_SPARC_WDISP30 = 7;
        
        /// <summary>
        /// PC relative 22 bit shifted
        /// </summary>
        public const uint R_SPARC_WDISP22 = 8;
        
        /// <summary>
        /// High 22 bit
        /// </summary>
        public const uint R_SPARC_HI22 = 9;
        
        /// <summary>
        /// Direct 22 bit
        /// </summary>
        public const uint R_SPARC_22 = 10;
        
        /// <summary>
        /// Direct 13 bit
        /// </summary>
        public const uint R_SPARC_13 = 11;
        
        /// <summary>
        /// Truncated 10 bit
        /// </summary>
        public const uint R_SPARC_LO10 = 12;
        
        /// <summary>
        /// Truncated 10 bit GOT entry
        /// </summary>
        public const uint R_SPARC_GOT10 = 13;
        
        /// <summary>
        /// 13 bit GOT entry
        /// </summary>
        public const uint R_SPARC_GOT13 = 14;
        
        /// <summary>
        /// 22 bit GOT entry shifted
        /// </summary>
        public const uint R_SPARC_GOT22 = 15;
        
        /// <summary>
        /// PC relative 10 bit truncated
        /// </summary>
        public const uint R_SPARC_PC10 = 16;
        
        /// <summary>
        /// PC relative 22 bit shifted
        /// </summary>
        public const uint R_SPARC_PC22 = 17;
        
        /// <summary>
        /// 30 bit PC relative PLT address
        /// </summary>
        public const uint R_SPARC_WPLT30 = 18;
        
        /// <summary>
        /// Copy symbol at runtime
        /// </summary>
        public const uint R_SPARC_COPY = 19;
        
        /// <summary>
        /// Create GOT entry
        /// </summary>
        public const uint R_SPARC_GLOB_DAT = 20;
        
        /// <summary>
        /// Create PLT entry
        /// </summary>
        public const uint R_SPARC_JMP_SLOT = 21;
        
        /// <summary>
        /// Adjust by program base
        /// </summary>
        public const uint R_SPARC_RELATIVE = 22;
        
        /// <summary>
        /// Direct 32 bit unaligned
        /// </summary>
        public const uint R_SPARC_UA32 = 23;
        
        /// <summary>
        /// Direct 32 bit ref to PLT entry
        /// </summary>
        public const uint R_SPARC_PLT32 = 24;
        
        /// <summary>
        /// High 22 bit PLT entry
        /// </summary>
        public const uint R_SPARC_HIPLT22 = 25;
        
        /// <summary>
        /// Truncated 10 bit PLT entry
        /// </summary>
        public const uint R_SPARC_LOPLT10 = 26;
        
        /// <summary>
        /// PC rel 32 bit ref to PLT entry
        /// </summary>
        public const uint R_SPARC_PCPLT32 = 27;
        
        /// <summary>
        /// PC rel high 22 bit PLT entry
        /// </summary>
        public const uint R_SPARC_PCPLT22 = 28;
        
        /// <summary>
        /// PC rel trunc 10 bit PLT entry
        /// </summary>
        public const uint R_SPARC_PCPLT10 = 29;
        
        /// <summary>
        /// Direct 10 bit
        /// </summary>
        public const uint R_SPARC_10 = 30;
        
        /// <summary>
        /// Direct 11 bit
        /// </summary>
        public const uint R_SPARC_11 = 31;
        
        /// <summary>
        /// Direct 64 bit
        /// </summary>
        public const uint R_SPARC_64 = 32;
        
        /// <summary>
        /// 10bit with secondary 13bit addend
        /// </summary>
        public const uint R_SPARC_OLO10 = 33;
        
        /// <summary>
        /// Top 22 bits of direct 64 bit
        /// </summary>
        public const uint R_SPARC_HH22 = 34;
        
        /// <summary>
        /// High middle 10 bits of ...
        /// </summary>
        public const uint R_SPARC_HM10 = 35;
        
        /// <summary>
        /// Low middle 22 bits of ...
        /// </summary>
        public const uint R_SPARC_LM22 = 36;
        
        /// <summary>
        /// Top 22 bits of pc rel 64 bit
        /// </summary>
        public const uint R_SPARC_PC_HH22 = 37;
        
        /// <summary>
        /// High middle 10 bit of ...
        /// </summary>
        public const uint R_SPARC_PC_HM10 = 38;
        
        /// <summary>
        /// Low miggle 22 bits of ...
        /// </summary>
        public const uint R_SPARC_PC_LM22 = 39;
        
        /// <summary>
        /// PC relative 16 bit shifted
        /// </summary>
        public const uint R_SPARC_WDISP16 = 40;
        
        /// <summary>
        /// PC relative 19 bit shifted
        /// </summary>
        public const uint R_SPARC_WDISP19 = 41;
        
        /// <summary>
        /// was part of v9 ABI but was removed
        /// </summary>
        public const uint R_SPARC_GLOB_JMP = 42;
        
        /// <summary>
        /// Direct 7 bit
        /// </summary>
        public const uint R_SPARC_7 = 43;
        
        /// <summary>
        /// Direct 5 bit
        /// </summary>
        public const uint R_SPARC_5 = 44;
        
        /// <summary>
        /// Direct 6 bit
        /// </summary>
        public const uint R_SPARC_6 = 45;
        
        /// <summary>
        /// PC relative 64 bit
        /// </summary>
        public const uint R_SPARC_DISP64 = 46;
        
        /// <summary>
        /// Direct 64 bit ref to PLT entry
        /// </summary>
        public const uint R_SPARC_PLT64 = 47;
        
        /// <summary>
        /// High 22 bit complemented
        /// </summary>
        public const uint R_SPARC_HIX22 = 48;
        
        /// <summary>
        /// Truncated 11 bit complemented
        /// </summary>
        public const uint R_SPARC_LOX10 = 49;
        
        /// <summary>
        /// Direct high 12 of 44 bit
        /// </summary>
        public const uint R_SPARC_H44 = 50;
        
        /// <summary>
        /// Direct mid 22 of 44 bit
        /// </summary>
        public const uint R_SPARC_M44 = 51;
        
        /// <summary>
        /// Direct low 10 of 44 bit
        /// </summary>
        public const uint R_SPARC_L44 = 52;
        
        /// <summary>
        /// Global register usage
        /// </summary>
        public const uint R_SPARC_REGISTER = 53;
        
        /// <summary>
        /// Direct 64 bit unaligned
        /// </summary>
        public const uint R_SPARC_UA64 = 54;
        
        /// <summary>
        /// Direct 16 bit unaligned
        /// </summary>
        public const uint R_SPARC_UA16 = 55;
        
        public const uint R_SPARC_TLS_GD_HI22 = 56;
        
        public const uint R_SPARC_TLS_GD_LO10 = 57;
        
        public const uint R_SPARC_TLS_GD_ADD = 58;
        
        public const uint R_SPARC_TLS_GD_CALL = 59;
        
        public const uint R_SPARC_TLS_LDM_HI22 = 60;
        
        public const uint R_SPARC_TLS_LDM_LO10 = 61;
        
        public const uint R_SPARC_TLS_LDM_ADD = 62;
        
        public const uint R_SPARC_TLS_LDM_CALL = 63;
        
        public const uint R_SPARC_TLS_LDO_HIX22 = 64;
        
        public const uint R_SPARC_TLS_LDO_LOX10 = 65;
        
        public const uint R_SPARC_TLS_LDO_ADD = 66;
        
        public const uint R_SPARC_TLS_IE_HI22 = 67;
        
        public const uint R_SPARC_TLS_IE_LO10 = 68;
        
        public const uint R_SPARC_TLS_IE_LD = 69;
        
        public const uint R_SPARC_TLS_IE_LDX = 70;
        
        public const uint R_SPARC_TLS_IE_ADD = 71;
        
        public const uint R_SPARC_TLS_LE_HIX22 = 72;
        
        public const uint R_SPARC_TLS_LE_LOX10 = 73;
        
        public const uint R_SPARC_TLS_DTPMOD32 = 74;
        
        public const uint R_SPARC_TLS_DTPMOD64 = 75;
        
        public const uint R_SPARC_TLS_DTPOFF32 = 76;
        
        public const uint R_SPARC_TLS_DTPOFF64 = 77;
        
        public const uint R_SPARC_TLS_TPOFF32 = 78;
        
        public const uint R_SPARC_TLS_TPOFF64 = 79;
        
        public const uint R_SPARC_GOTDATA_HIX22 = 80;
        
        public const uint R_SPARC_GOTDATA_LOX10 = 81;
        
        public const uint R_SPARC_GOTDATA_OP_HIX22 = 82;
        
        public const uint R_SPARC_GOTDATA_OP_LOX10 = 83;
        
        public const uint R_SPARC_GOTDATA_OP = 84;
        
        public const uint R_SPARC_H34 = 85;
        
        public const uint R_SPARC_SIZE32 = 86;
        
        public const uint R_SPARC_SIZE64 = 87;
        
        public const uint R_SPARC_WDISP10 = 88;
        
        public const uint R_SPARC_JMP_IREL = 248;
        
        public const uint R_SPARC_IRELATIVE = 249;
        
        public const uint R_SPARC_GNU_VTINHERIT = 250;
        
        public const uint R_SPARC_GNU_VTENTRY = 251;
        
        public const uint R_SPARC_REV32 = 252;
        
        public const uint R_SPARC_NUM = 253;
        
        public const int DT_SPARC_REGISTER = 0x70000001;
        
        public const int DT_SPARC_NUM = 2;
        
        /// <summary>
        /// A .noreorder directive was used.
        /// </summary>
        public const uint EF_MIPS_NOREORDER = 1;
        
        /// <summary>
        /// Contains PIC code.
        /// </summary>
        public const uint EF_MIPS_PIC = 2;
        
        /// <summary>
        /// Uses PIC calling sequence.
        /// </summary>
        public const uint EF_MIPS_CPIC = 4;
        
        public const uint EF_MIPS_XGOT = 8;
        
        public const uint EF_MIPS_64BIT_WHIRL = 16;
        
        public const uint EF_MIPS_ABI2 = 32;
        
        public const uint EF_MIPS_ABI_ON32 = 64;
        
        /// <summary>
        /// Uses FP64 (12 callee-saved).
        /// </summary>
        public const uint EF_MIPS_FP64 = 512;
        
        /// <summary>
        /// Uses IEEE 754-2008 NaN encoding.
        /// </summary>
        public const uint EF_MIPS_NAN2008 = 1024;
        
        /// <summary>
        /// MIPS architecture level.
        /// </summary>
        public const uint EF_MIPS_ARCH = 0xf0000000;
        
        /// <summary>
        /// -mips1 code.
        /// </summary>
        public const uint EF_MIPS_ARCH_1 = 0;
        
        /// <summary>
        /// -mips2 code.
        /// </summary>
        public const uint EF_MIPS_ARCH_2 = 268435456;
        
        /// <summary>
        /// -mips3 code.
        /// </summary>
        public const uint EF_MIPS_ARCH_3 = 536870912;
        
        /// <summary>
        /// -mips4 code.
        /// </summary>
        public const uint EF_MIPS_ARCH_4 = 805306368;
        
        /// <summary>
        /// -mips5 code.
        /// </summary>
        public const uint EF_MIPS_ARCH_5 = 1073741824;
        
        /// <summary>
        /// MIPS32 code.
        /// </summary>
        public const uint EF_MIPS_ARCH_32 = 1342177280;
        
        /// <summary>
        /// MIPS64 code.
        /// </summary>
        public const uint EF_MIPS_ARCH_64 = 1610612736;
        
        /// <summary>
        /// MIPS32r2 code.
        /// </summary>
        public const uint EF_MIPS_ARCH_32R2 = 1879048192;
        
        /// <summary>
        /// MIPS64r2 code.
        /// </summary>
        public const uint EF_MIPS_ARCH_64R2 = 0x80000000;
        
        /// <summary>
        /// Allocated common symbols.
        /// </summary>
        public const uint SHN_MIPS_ACOMMON = 65280;
        
        /// <summary>
        /// Allocated test symbols.
        /// </summary>
        public const uint SHN_MIPS_TEXT = 65281;
        
        /// <summary>
        /// Allocated data symbols.
        /// </summary>
        public const uint SHN_MIPS_DATA = 65282;
        
        /// <summary>
        /// Small common symbols.
        /// </summary>
        public const uint SHN_MIPS_SCOMMON = 65283;
        
        /// <summary>
        /// Small undefined symbols.
        /// </summary>
        public const uint SHN_MIPS_SUNDEFINED = 65284;
        
        /// <summary>
        /// Shared objects used in link.
        /// </summary>
        public const uint SHT_MIPS_LIBLIST = 1879048192;
        
        public const uint SHT_MIPS_MSYM = 1879048193;
        
        /// <summary>
        /// Conflicting symbols.
        /// </summary>
        public const uint SHT_MIPS_CONFLICT = 1879048194;
        
        /// <summary>
        /// Global data area sizes.
        /// </summary>
        public const uint SHT_MIPS_GPTAB = 1879048195;
        
        /// <summary>
        /// Reserved for SGI/MIPS compilers
        /// </summary>
        public const uint SHT_MIPS_UCODE = 1879048196;
        
        /// <summary>
        /// MIPS ECOFF debugging info.
        /// </summary>
        public const uint SHT_MIPS_DEBUG = 1879048197;
        
        /// <summary>
        /// Register usage information.
        /// </summary>
        public const uint SHT_MIPS_REGINFO = 1879048198;
        
        public const uint SHT_MIPS_PACKAGE = 1879048199;
        
        public const uint SHT_MIPS_PACKSYM = 1879048200;
        
        public const uint SHT_MIPS_RELD = 1879048201;
        
        public const uint SHT_MIPS_IFACE = 1879048203;
        
        public const uint SHT_MIPS_CONTENT = 1879048204;
        
        /// <summary>
        /// Miscellaneous options.
        /// </summary>
        public const uint SHT_MIPS_OPTIONS = 1879048205;
        
        public const uint SHT_MIPS_SHDR = 1879048208;
        
        public const uint SHT_MIPS_FDESC = 1879048209;
        
        public const uint SHT_MIPS_EXTSYM = 1879048210;
        
        public const uint SHT_MIPS_DENSE = 1879048211;
        
        public const uint SHT_MIPS_PDESC = 1879048212;
        
        public const uint SHT_MIPS_LOCSYM = 1879048213;
        
        public const uint SHT_MIPS_AUXSYM = 1879048214;
        
        public const uint SHT_MIPS_OPTSYM = 1879048215;
        
        public const uint SHT_MIPS_LOCSTR = 1879048216;
        
        public const uint SHT_MIPS_LINE = 1879048217;
        
        public const uint SHT_MIPS_RFDESC = 1879048218;
        
        public const uint SHT_MIPS_DELTASYM = 1879048219;
        
        public const uint SHT_MIPS_DELTAINST = 1879048220;
        
        public const uint SHT_MIPS_DELTACLASS = 1879048221;
        
        /// <summary>
        /// DWARF debugging information.
        /// </summary>
        public const uint SHT_MIPS_DWARF = 1879048222;
        
        public const uint SHT_MIPS_DELTADECL = 1879048223;
        
        public const uint SHT_MIPS_SYMBOL_LIB = 1879048224;
        
        /// <summary>
        /// Event section.
        /// </summary>
        public const uint SHT_MIPS_EVENTS = 1879048225;
        
        public const uint SHT_MIPS_TRANSLATE = 1879048226;
        
        public const uint SHT_MIPS_PIXIE = 1879048227;
        
        public const uint SHT_MIPS_XLATE = 1879048228;
        
        public const uint SHT_MIPS_XLATE_DEBUG = 1879048229;
        
        public const uint SHT_MIPS_WHIRL = 1879048230;
        
        public const uint SHT_MIPS_EH_REGION = 1879048231;
        
        public const uint SHT_MIPS_XLATE_OLD = 1879048232;
        
        public const uint SHT_MIPS_PDR_EXCEPTION = 1879048233;
        
        /// <summary>
        /// Must be in global data area.
        /// </summary>
        public const uint SHF_MIPS_GPREL = 268435456;
        
        public const uint SHF_MIPS_MERGE = 536870912;
        
        public const uint SHF_MIPS_ADDR = 1073741824;
        
        public const uint SHF_MIPS_STRINGS = 0x80000000;
        
        public const uint SHF_MIPS_NOSTRIP = 134217728;
        
        public const uint SHF_MIPS_LOCAL = 67108864;
        
        public const uint SHF_MIPS_NAMES = 33554432;
        
        public const uint SHF_MIPS_NODUPE = 16777216;
        
        public const byte STB_MIPS_SPLIT_COMMON = 13;
        
        /// <summary>
        /// No reloc
        /// </summary>
        public const uint R_MIPS_NONE = 0;
        
        /// <summary>
        /// Direct 16 bit
        /// </summary>
        public const uint R_MIPS_16 = 1;
        
        /// <summary>
        /// Direct 32 bit
        /// </summary>
        public const uint R_MIPS_32 = 2;
        
        /// <summary>
        /// PC relative 32 bit
        /// </summary>
        public const uint R_MIPS_REL32 = 3;
        
        /// <summary>
        /// Direct 26 bit shifted
        /// </summary>
        public const uint R_MIPS_26 = 4;
        
        /// <summary>
        /// High 16 bit
        /// </summary>
        public const uint R_MIPS_HI16 = 5;
        
        /// <summary>
        /// Low 16 bit
        /// </summary>
        public const uint R_MIPS_LO16 = 6;
        
        /// <summary>
        /// GP relative 16 bit
        /// </summary>
        public const uint R_MIPS_GPREL16 = 7;
        
        /// <summary>
        /// 16 bit literal entry
        /// </summary>
        public const uint R_MIPS_LITERAL = 8;
        
        /// <summary>
        /// 16 bit GOT entry
        /// </summary>
        public const uint R_MIPS_GOT16 = 9;
        
        /// <summary>
        /// PC relative 16 bit
        /// </summary>
        public const uint R_MIPS_PC16 = 10;
        
        /// <summary>
        /// 16 bit GOT entry for function
        /// </summary>
        public const uint R_MIPS_CALL16 = 11;
        
        /// <summary>
        /// GP relative 32 bit
        /// </summary>
        public const uint R_MIPS_GPREL32 = 12;
        
        public const uint R_MIPS_SHIFT5 = 16;
        
        public const uint R_MIPS_SHIFT6 = 17;
        
        public const uint R_MIPS_64 = 18;
        
        public const uint R_MIPS_GOT_DISP = 19;
        
        public const uint R_MIPS_GOT_PAGE = 20;
        
        public const uint R_MIPS_GOT_OFST = 21;
        
        public const uint R_MIPS_GOT_HI16 = 22;
        
        public const uint R_MIPS_GOT_LO16 = 23;
        
        public const uint R_MIPS_SUB = 24;
        
        public const uint R_MIPS_INSERT_A = 25;
        
        public const uint R_MIPS_INSERT_B = 26;
        
        public const uint R_MIPS_DELETE = 27;
        
        public const uint R_MIPS_HIGHER = 28;
        
        public const uint R_MIPS_HIGHEST = 29;
        
        public const uint R_MIPS_CALL_HI16 = 30;
        
        public const uint R_MIPS_CALL_LO16 = 31;
        
        public const uint R_MIPS_SCN_DISP = 32;
        
        public const uint R_MIPS_REL16 = 33;
        
        public const uint R_MIPS_ADD_IMMEDIATE = 34;
        
        public const uint R_MIPS_PJUMP = 35;
        
        public const uint R_MIPS_RELGOT = 36;
        
        public const uint R_MIPS_JALR = 37;
        
        /// <summary>
        /// Module number 32 bit
        /// </summary>
        public const uint R_MIPS_TLS_DTPMOD32 = 38;
        
        /// <summary>
        /// Module-relative offset 32 bit
        /// </summary>
        public const uint R_MIPS_TLS_DTPREL32 = 39;
        
        /// <summary>
        /// Module number 64 bit
        /// </summary>
        public const uint R_MIPS_TLS_DTPMOD64 = 40;
        
        /// <summary>
        /// Module-relative offset 64 bit
        /// </summary>
        public const uint R_MIPS_TLS_DTPREL64 = 41;
        
        /// <summary>
        /// 16 bit GOT offset for GD
        /// </summary>
        public const uint R_MIPS_TLS_GD = 42;
        
        /// <summary>
        /// 16 bit GOT offset for LDM
        /// </summary>
        public const uint R_MIPS_TLS_LDM = 43;
        
        /// <summary>
        /// Module-relative offset, high 16 bits
        /// </summary>
        public const uint R_MIPS_TLS_DTPREL_HI16 = 44;
        
        /// <summary>
        /// Module-relative offset, low 16 bits
        /// </summary>
        public const uint R_MIPS_TLS_DTPREL_LO16 = 45;
        
        /// <summary>
        /// 16 bit GOT offset for IE
        /// </summary>
        public const uint R_MIPS_TLS_GOTTPREL = 46;
        
        /// <summary>
        /// TP-relative offset, 32 bit
        /// </summary>
        public const uint R_MIPS_TLS_TPREL32 = 47;
        
        /// <summary>
        /// TP-relative offset, 64 bit
        /// </summary>
        public const uint R_MIPS_TLS_TPREL64 = 48;
        
        /// <summary>
        /// TP-relative offset, high 16 bits
        /// </summary>
        public const uint R_MIPS_TLS_TPREL_HI16 = 49;
        
        /// <summary>
        /// TP-relative offset, low 16 bits
        /// </summary>
        public const uint R_MIPS_TLS_TPREL_LO16 = 50;
        
        public const uint R_MIPS_GLOB_DAT = 51;
        
        public const uint R_MIPS_COPY = 126;
        
        public const uint R_MIPS_JUMP_SLOT = 127;
        
        public const uint R_MIPS_NUM = 128;
        
        /// <summary>
        /// Register usage information.
        /// </summary>
        public const uint PT_MIPS_REGINFO = 1879048192;
        
        /// <summary>
        /// Runtime procedure table.
        /// </summary>
        public const uint PT_MIPS_RTPROC = 1879048193;
        
        public const uint PT_MIPS_OPTIONS = 1879048194;
        
        /// <summary>
        /// FP mode requirement.
        /// </summary>
        public const uint PT_MIPS_ABIFLAGS = 1879048195;
        
        public const uint PF_MIPS_LOCAL = 268435456;
        
        /// <summary>
        /// Runtime linker interface version
        /// </summary>
        public const int DT_MIPS_RLD_VERSION = 0x70000001;
        
        /// <summary>
        /// Timestamp
        /// </summary>
        public const int DT_MIPS_TIME_STAMP = 0x70000002;
        
        /// <summary>
        /// Checksum
        /// </summary>
        public const int DT_MIPS_ICHECKSUM = 0x70000003;
        
        /// <summary>
        /// Version string (string tbl index)
        /// </summary>
        public const int DT_MIPS_IVERSION = 0x70000004;
        
        /// <summary>
        /// Flags
        /// </summary>
        public const int DT_MIPS_FLAGS = 0x70000005;
        
        /// <summary>
        /// Base address
        /// </summary>
        public const int DT_MIPS_BASE_ADDRESS = 0x70000006;
        
        public const int DT_MIPS_MSYM = 0x70000007;
        
        /// <summary>
        /// Address of CONFLICT section
        /// </summary>
        public const int DT_MIPS_CONFLICT = 0x70000008;
        
        /// <summary>
        /// Address of LIBLIST section
        /// </summary>
        public const int DT_MIPS_LIBLIST = 0x70000009;
        
        /// <summary>
        /// Number of local GOT entries
        /// </summary>
        public const int DT_MIPS_LOCAL_GOTNO = 0x7000000a;
        
        /// <summary>
        /// Number of CONFLICT entries
        /// </summary>
        public const int DT_MIPS_CONFLICTNO = 0x7000000b;
        
        /// <summary>
        /// Number of LIBLIST entries
        /// </summary>
        public const int DT_MIPS_LIBLISTNO = 0x70000010;
        
        /// <summary>
        /// Number of DYNSYM entries
        /// </summary>
        public const int DT_MIPS_SYMTABNO = 0x70000011;
        
        /// <summary>
        /// First external DYNSYM
        /// </summary>
        public const int DT_MIPS_UNREFEXTNO = 0x70000012;
        
        /// <summary>
        /// First GOT entry in DYNSYM
        /// </summary>
        public const int DT_MIPS_GOTSYM = 0x70000013;
        
        /// <summary>
        /// Number of GOT page table entries
        /// </summary>
        public const int DT_MIPS_HIPAGENO = 0x70000014;
        
        /// <summary>
        /// Address of run time loader map.
        /// </summary>
        public const int DT_MIPS_RLD_MAP = 0x70000016;
        
        /// <summary>
        /// Delta C++ class definition.
        /// </summary>
        public const int DT_MIPS_DELTA_CLASS = 0x70000017;
        
        /// <summary>
        /// Number of entries in
        /// DT_MIPS_DELTA_CLASS.
        /// </summary>
        public const int DT_MIPS_DELTA_CLASS_NO = 0x70000018;
        
        /// <summary>
        /// Delta C++ class instances.
        /// </summary>
        public const int DT_MIPS_DELTA_INSTANCE = 0x70000019;
        
        /// <summary>
        /// Number of entries in
        /// DT_MIPS_DELTA_INSTANCE.
        /// </summary>
        public const int DT_MIPS_DELTA_INSTANCE_NO = 0x7000001a;
        
        /// <summary>
        /// Delta relocations.
        /// </summary>
        public const int DT_MIPS_DELTA_RELOC = 0x7000001b;
        
        /// <summary>
        /// Number of entries in
        /// DT_MIPS_DELTA_RELOC.
        /// </summary>
        public const int DT_MIPS_DELTA_RELOC_NO = 0x7000001c;
        
        /// <summary>
        /// Delta symbols that Delta
        /// relocations refer to.
        /// </summary>
        public const int DT_MIPS_DELTA_SYM = 0x7000001d;
        
        /// <summary>
        /// Number of entries in
        /// DT_MIPS_DELTA_SYM.
        /// </summary>
        public const int DT_MIPS_DELTA_SYM_NO = 0x7000001e;
        
        /// <summary>
        /// Delta symbols that hold the
        /// class declaration.
        /// </summary>
        public const int DT_MIPS_DELTA_CLASSSYM = 0x70000020;
        
        /// <summary>
        /// Number of entries in
        /// DT_MIPS_DELTA_CLASSSYM.
        /// </summary>
        public const int DT_MIPS_DELTA_CLASSSYM_NO = 0x70000021;
        
        /// <summary>
        /// Flags indicating for C++ flavor.
        /// </summary>
        public const int DT_MIPS_CXX_FLAGS = 0x70000022;
        
        public const int DT_MIPS_PIXIE_INIT = 0x70000023;
        
        public const int DT_MIPS_SYMBOL_LIB = 0x70000024;
        
        public const int DT_MIPS_LOCALPAGE_GOTIDX = 0x70000025;
        
        public const int DT_MIPS_LOCAL_GOTIDX = 0x70000026;
        
        public const int DT_MIPS_HIDDEN_GOTIDX = 0x70000027;
        
        public const int DT_MIPS_PROTECTED_GOTIDX = 0x70000028;
        
        /// <summary>
        /// Address of .options.
        /// </summary>
        public const int DT_MIPS_OPTIONS = 0x70000029;
        
        /// <summary>
        /// Address of .interface.
        /// </summary>
        public const int DT_MIPS_INTERFACE = 0x7000002a;
        
        public const int DT_MIPS_DYNSTR_ALIGN = 0x7000002b;
        
        /// <summary>
        /// Size of the .interface section.
        /// </summary>
        public const int DT_MIPS_INTERFACE_SIZE = 0x7000002c;
        
        /// <summary>
        /// Address of rld_text_rsolve
        /// function stored in GOT.
        /// </summary>
        public const int DT_MIPS_RLD_TEXT_RESOLVE_ADDR = 0x7000002d;
        
        /// <summary>
        /// Default suffix of dso to be added
        /// by rld on dlopen() calls.
        /// </summary>
        public const int DT_MIPS_PERF_SUFFIX = 0x7000002e;
        
        /// <summary>
        /// (O32)Size of compact rel section.
        /// </summary>
        public const int DT_MIPS_COMPACT_SIZE = 0x7000002f;
        
        /// <summary>
        /// GP value for aux GOTs.
        /// </summary>
        public const int DT_MIPS_GP_VALUE = 0x70000030;
        
        /// <summary>
        /// Address of aux .dynamic.
        /// </summary>
        public const int DT_MIPS_AUX_DYNAMIC = 0x70000031;
        
        public const int DT_MIPS_PLTGOT = 0x70000032;
        
        public const int DT_MIPS_RWPLT = 0x70000034;
        
        public const int DT_MIPS_RLD_MAP_REL = 0x70000035;
        
        public const int DT_MIPS_NUM = 0x36;
        
        /// <summary>
        /// Trap nil pointer dereference.
        /// </summary>
        public const uint EF_PARISC_TRAPNIL = 65536;
        
        /// <summary>
        /// Program uses arch. extensions.
        /// </summary>
        public const uint EF_PARISC_EXT = 131072;
        
        /// <summary>
        /// Program expects little endian.
        /// </summary>
        public const uint EF_PARISC_LSB = 262144;
        
        /// <summary>
        /// Program expects wide mode.
        /// </summary>
        public const uint EF_PARISC_WIDE = 524288;
        
        /// <summary>
        /// No kernel assisted branch
        /// prediction.
        /// </summary>
        public const uint EF_PARISC_NO_KABP = 1048576;
        
        /// <summary>
        /// Allow lazy swapping.
        /// </summary>
        public const uint EF_PARISC_LAZYSWAP = 4194304;
        
        /// <summary>
        /// Architecture version.
        /// </summary>
        public const uint EF_PARISC_ARCH = 65535;
        
        /// <summary>
        /// Section for tenatively declared
        /// symbols in ANSI C.
        /// </summary>
        public const uint SHN_PARISC_ANSI_COMMON = 65280;
        
        /// <summary>
        /// Common blocks in huge model.
        /// </summary>
        public const uint SHN_PARISC_HUGE_COMMON = 65281;
        
        /// <summary>
        /// Contains product specific ext.
        /// </summary>
        public const uint SHT_PARISC_EXT = 1879048192;
        
        /// <summary>
        /// Unwind information.
        /// </summary>
        public const uint SHT_PARISC_UNWIND = 1879048193;
        
        /// <summary>
        /// Debug info for optimized code.
        /// </summary>
        public const uint SHT_PARISC_DOC = 1879048194;
        
        /// <summary>
        /// Section with short addressing.
        /// </summary>
        public const uint SHF_PARISC_SHORT = 536870912;
        
        /// <summary>
        /// Section far from gp.
        /// </summary>
        public const uint SHF_PARISC_HUGE = 1073741824;
        
        /// <summary>
        /// Static branch prediction code.
        /// </summary>
        public const uint SHF_PARISC_SBP = 0x80000000;
        
        /// <summary>
        /// Millicode function entry point.
        /// </summary>
        public const byte STT_PARISC_MILLICODE = 13;
        
        public const byte STT_HP_OPAQUE = 11;
        
        public const byte STT_HP_STUB = 12;
        
        /// <summary>
        /// No reloc.
        /// </summary>
        public const uint R_PARISC_NONE = 0;
        
        /// <summary>
        /// Direct 32-bit reference.
        /// </summary>
        public const uint R_PARISC_DIR32 = 1;
        
        /// <summary>
        /// Left 21 bits of eff. address.
        /// </summary>
        public const uint R_PARISC_DIR21L = 2;
        
        /// <summary>
        /// Right 17 bits of eff. address.
        /// </summary>
        public const uint R_PARISC_DIR17R = 3;
        
        /// <summary>
        /// 17 bits of eff. address.
        /// </summary>
        public const uint R_PARISC_DIR17F = 4;
        
        /// <summary>
        /// Right 14 bits of eff. address.
        /// </summary>
        public const uint R_PARISC_DIR14R = 6;
        
        /// <summary>
        /// 32-bit rel. address.
        /// </summary>
        public const uint R_PARISC_PCREL32 = 9;
        
        /// <summary>
        /// Left 21 bits of rel. address.
        /// </summary>
        public const uint R_PARISC_PCREL21L = 10;
        
        /// <summary>
        /// Right 17 bits of rel. address.
        /// </summary>
        public const uint R_PARISC_PCREL17R = 11;
        
        /// <summary>
        /// 17 bits of rel. address.
        /// </summary>
        public const uint R_PARISC_PCREL17F = 12;
        
        /// <summary>
        /// Right 14 bits of rel. address.
        /// </summary>
        public const uint R_PARISC_PCREL14R = 14;
        
        /// <summary>
        /// Left 21 bits of rel. address.
        /// </summary>
        public const uint R_PARISC_DPREL21L = 18;
        
        /// <summary>
        /// Right 14 bits of rel. address.
        /// </summary>
        public const uint R_PARISC_DPREL14R = 22;
        
        /// <summary>
        /// GP-relative, left 21 bits.
        /// </summary>
        public const uint R_PARISC_GPREL21L = 26;
        
        /// <summary>
        /// GP-relative, right 14 bits.
        /// </summary>
        public const uint R_PARISC_GPREL14R = 30;
        
        /// <summary>
        /// LT-relative, left 21 bits.
        /// </summary>
        public const uint R_PARISC_LTOFF21L = 34;
        
        /// <summary>
        /// LT-relative, right 14 bits.
        /// </summary>
        public const uint R_PARISC_LTOFF14R = 38;
        
        /// <summary>
        /// 32 bits section rel. address.
        /// </summary>
        public const uint R_PARISC_SECREL32 = 41;
        
        /// <summary>
        /// No relocation, set segment base.
        /// </summary>
        public const uint R_PARISC_SEGBASE = 48;
        
        /// <summary>
        /// 32 bits segment rel. address.
        /// </summary>
        public const uint R_PARISC_SEGREL32 = 49;
        
        /// <summary>
        /// PLT rel. address, left 21 bits.
        /// </summary>
        public const uint R_PARISC_PLTOFF21L = 50;
        
        /// <summary>
        /// PLT rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_PLTOFF14R = 54;
        
        /// <summary>
        /// 32 bits LT-rel. function pointer.
        /// </summary>
        public const uint R_PARISC_LTOFF_FPTR32 = 57;
        
        /// <summary>
        /// LT-rel. fct ptr, left 21 bits.
        /// </summary>
        public const uint R_PARISC_LTOFF_FPTR21L = 58;
        
        /// <summary>
        /// LT-rel. fct ptr, right 14 bits.
        /// </summary>
        public const uint R_PARISC_LTOFF_FPTR14R = 62;
        
        /// <summary>
        /// 64 bits function address.
        /// </summary>
        public const uint R_PARISC_FPTR64 = 64;
        
        /// <summary>
        /// 32 bits function address.
        /// </summary>
        public const uint R_PARISC_PLABEL32 = 65;
        
        /// <summary>
        /// Left 21 bits of fdesc address.
        /// </summary>
        public const uint R_PARISC_PLABEL21L = 66;
        
        /// <summary>
        /// Right 14 bits of fdesc address.
        /// </summary>
        public const uint R_PARISC_PLABEL14R = 70;
        
        /// <summary>
        /// 64 bits PC-rel. address.
        /// </summary>
        public const uint R_PARISC_PCREL64 = 72;
        
        /// <summary>
        /// 22 bits PC-rel. address.
        /// </summary>
        public const uint R_PARISC_PCREL22F = 74;
        
        /// <summary>
        /// PC-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_PCREL14WR = 75;
        
        /// <summary>
        /// PC rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_PCREL14DR = 76;
        
        /// <summary>
        /// 16 bits PC-rel. address.
        /// </summary>
        public const uint R_PARISC_PCREL16F = 77;
        
        /// <summary>
        /// 16 bits PC-rel. address.
        /// </summary>
        public const uint R_PARISC_PCREL16WF = 78;
        
        /// <summary>
        /// 16 bits PC-rel. address.
        /// </summary>
        public const uint R_PARISC_PCREL16DF = 79;
        
        /// <summary>
        /// 64 bits of eff. address.
        /// </summary>
        public const uint R_PARISC_DIR64 = 80;
        
        /// <summary>
        /// 14 bits of eff. address.
        /// </summary>
        public const uint R_PARISC_DIR14WR = 83;
        
        /// <summary>
        /// 14 bits of eff. address.
        /// </summary>
        public const uint R_PARISC_DIR14DR = 84;
        
        /// <summary>
        /// 16 bits of eff. address.
        /// </summary>
        public const uint R_PARISC_DIR16F = 85;
        
        /// <summary>
        /// 16 bits of eff. address.
        /// </summary>
        public const uint R_PARISC_DIR16WF = 86;
        
        /// <summary>
        /// 16 bits of eff. address.
        /// </summary>
        public const uint R_PARISC_DIR16DF = 87;
        
        /// <summary>
        /// 64 bits of GP-rel. address.
        /// </summary>
        public const uint R_PARISC_GPREL64 = 88;
        
        /// <summary>
        /// GP-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_GPREL14WR = 91;
        
        /// <summary>
        /// GP-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_GPREL14DR = 92;
        
        /// <summary>
        /// 16 bits GP-rel. address.
        /// </summary>
        public const uint R_PARISC_GPREL16F = 93;
        
        /// <summary>
        /// 16 bits GP-rel. address.
        /// </summary>
        public const uint R_PARISC_GPREL16WF = 94;
        
        /// <summary>
        /// 16 bits GP-rel. address.
        /// </summary>
        public const uint R_PARISC_GPREL16DF = 95;
        
        /// <summary>
        /// 64 bits LT-rel. address.
        /// </summary>
        public const uint R_PARISC_LTOFF64 = 96;
        
        /// <summary>
        /// LT-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_LTOFF14WR = 99;
        
        /// <summary>
        /// LT-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_LTOFF14DR = 100;
        
        /// <summary>
        /// 16 bits LT-rel. address.
        /// </summary>
        public const uint R_PARISC_LTOFF16F = 101;
        
        /// <summary>
        /// 16 bits LT-rel. address.
        /// </summary>
        public const uint R_PARISC_LTOFF16WF = 102;
        
        /// <summary>
        /// 16 bits LT-rel. address.
        /// </summary>
        public const uint R_PARISC_LTOFF16DF = 103;
        
        /// <summary>
        /// 64 bits section rel. address.
        /// </summary>
        public const uint R_PARISC_SECREL64 = 104;
        
        /// <summary>
        /// 64 bits segment rel. address.
        /// </summary>
        public const uint R_PARISC_SEGREL64 = 112;
        
        /// <summary>
        /// PLT-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_PLTOFF14WR = 115;
        
        /// <summary>
        /// PLT-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_PLTOFF14DR = 116;
        
        /// <summary>
        /// 16 bits LT-rel. address.
        /// </summary>
        public const uint R_PARISC_PLTOFF16F = 117;
        
        /// <summary>
        /// 16 bits PLT-rel. address.
        /// </summary>
        public const uint R_PARISC_PLTOFF16WF = 118;
        
        /// <summary>
        /// 16 bits PLT-rel. address.
        /// </summary>
        public const uint R_PARISC_PLTOFF16DF = 119;
        
        /// <summary>
        /// 64 bits LT-rel. function ptr.
        /// </summary>
        public const uint R_PARISC_LTOFF_FPTR64 = 120;
        
        /// <summary>
        /// LT-rel. fct. ptr., right 14 bits.
        /// </summary>
        public const uint R_PARISC_LTOFF_FPTR14WR = 123;
        
        /// <summary>
        /// LT-rel. fct. ptr., right 14 bits.
        /// </summary>
        public const uint R_PARISC_LTOFF_FPTR14DR = 124;
        
        /// <summary>
        /// 16 bits LT-rel. function ptr.
        /// </summary>
        public const uint R_PARISC_LTOFF_FPTR16F = 125;
        
        /// <summary>
        /// 16 bits LT-rel. function ptr.
        /// </summary>
        public const uint R_PARISC_LTOFF_FPTR16WF = 126;
        
        /// <summary>
        /// 16 bits LT-rel. function ptr.
        /// </summary>
        public const uint R_PARISC_LTOFF_FPTR16DF = 127;
        
        public const uint R_PARISC_LORESERVE = 128;
        
        /// <summary>
        /// Copy relocation.
        /// </summary>
        public const uint R_PARISC_COPY = 128;
        
        /// <summary>
        /// Dynamic reloc, imported PLT
        /// </summary>
        public const uint R_PARISC_IPLT = 129;
        
        /// <summary>
        /// Dynamic reloc, exported PLT
        /// </summary>
        public const uint R_PARISC_EPLT = 130;
        
        /// <summary>
        /// 32 bits TP-rel. address.
        /// </summary>
        public const uint R_PARISC_TPREL32 = 153;
        
        /// <summary>
        /// TP-rel. address, left 21 bits.
        /// </summary>
        public const uint R_PARISC_TPREL21L = 154;
        
        /// <summary>
        /// TP-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_TPREL14R = 158;
        
        /// <summary>
        /// LT-TP-rel. address, left 21 bits.
        /// </summary>
        public const uint R_PARISC_LTOFF_TP21L = 162;
        
        /// <summary>
        /// LT-TP-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_LTOFF_TP14R = 166;
        
        /// <summary>
        /// 14 bits LT-TP-rel. address.
        /// </summary>
        public const uint R_PARISC_LTOFF_TP14F = 167;
        
        /// <summary>
        /// 64 bits TP-rel. address.
        /// </summary>
        public const uint R_PARISC_TPREL64 = 216;
        
        /// <summary>
        /// TP-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_TPREL14WR = 219;
        
        /// <summary>
        /// TP-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_TPREL14DR = 220;
        
        /// <summary>
        /// 16 bits TP-rel. address.
        /// </summary>
        public const uint R_PARISC_TPREL16F = 221;
        
        /// <summary>
        /// 16 bits TP-rel. address.
        /// </summary>
        public const uint R_PARISC_TPREL16WF = 222;
        
        /// <summary>
        /// 16 bits TP-rel. address.
        /// </summary>
        public const uint R_PARISC_TPREL16DF = 223;
        
        /// <summary>
        /// 64 bits LT-TP-rel. address.
        /// </summary>
        public const uint R_PARISC_LTOFF_TP64 = 224;
        
        /// <summary>
        /// LT-TP-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_LTOFF_TP14WR = 227;
        
        /// <summary>
        /// LT-TP-rel. address, right 14 bits.
        /// </summary>
        public const uint R_PARISC_LTOFF_TP14DR = 228;
        
        /// <summary>
        /// 16 bits LT-TP-rel. address.
        /// </summary>
        public const uint R_PARISC_LTOFF_TP16F = 229;
        
        /// <summary>
        /// 16 bits LT-TP-rel. address.
        /// </summary>
        public const uint R_PARISC_LTOFF_TP16WF = 230;
        
        /// <summary>
        /// 16 bits LT-TP-rel. address.
        /// </summary>
        public const uint R_PARISC_LTOFF_TP16DF = 231;
        
        public const uint R_PARISC_GNU_VTENTRY = 232;
        
        public const uint R_PARISC_GNU_VTINHERIT = 233;
        
        /// <summary>
        /// GD 21-bit left.
        /// </summary>
        public const uint R_PARISC_TLS_GD21L = 234;
        
        /// <summary>
        /// GD 14-bit right.
        /// </summary>
        public const uint R_PARISC_TLS_GD14R = 235;
        
        /// <summary>
        /// GD call to __t_g_a.
        /// </summary>
        public const uint R_PARISC_TLS_GDCALL = 236;
        
        /// <summary>
        /// LD module 21-bit left.
        /// </summary>
        public const uint R_PARISC_TLS_LDM21L = 237;
        
        /// <summary>
        /// LD module 14-bit right.
        /// </summary>
        public const uint R_PARISC_TLS_LDM14R = 238;
        
        /// <summary>
        /// LD module call to __t_g_a.
        /// </summary>
        public const uint R_PARISC_TLS_LDMCALL = 239;
        
        /// <summary>
        /// LD offset 21-bit left.
        /// </summary>
        public const uint R_PARISC_TLS_LDO21L = 240;
        
        /// <summary>
        /// LD offset 14-bit right.
        /// </summary>
        public const uint R_PARISC_TLS_LDO14R = 241;
        
        /// <summary>
        /// DTP module 32-bit.
        /// </summary>
        public const uint R_PARISC_TLS_DTPMOD32 = 242;
        
        /// <summary>
        /// DTP module 64-bit.
        /// </summary>
        public const uint R_PARISC_TLS_DTPMOD64 = 243;
        
        /// <summary>
        /// DTP offset 32-bit.
        /// </summary>
        public const uint R_PARISC_TLS_DTPOFF32 = 244;
        
        /// <summary>
        /// DTP offset 32-bit.
        /// </summary>
        public const uint R_PARISC_TLS_DTPOFF64 = 245;
        
        public const uint R_PARISC_TLS_LE21L = 154;
        
        public const uint R_PARISC_TLS_LE14R = 158;
        
        public const uint R_PARISC_TLS_IE21L = 162;
        
        public const uint R_PARISC_TLS_IE14R = 166;
        
        public const uint R_PARISC_TLS_TPREL32 = 153;
        
        public const uint R_PARISC_TLS_TPREL64 = 216;
        
        public const uint R_PARISC_HIRESERVE = 255;
        
        public const uint PT_HP_TLS = 1610612736;
        
        public const uint PT_HP_CORE_NONE = 1610612737;
        
        public const uint PT_HP_CORE_VERSION = 1610612738;
        
        public const uint PT_HP_CORE_KERNEL = 1610612739;
        
        public const uint PT_HP_CORE_COMM = 1610612740;
        
        public const uint PT_HP_CORE_PROC = 1610612741;
        
        public const uint PT_HP_CORE_LOADABLE = 1610612742;
        
        public const uint PT_HP_CORE_STACK = 1610612743;
        
        public const uint PT_HP_CORE_SHM = 1610612744;
        
        public const uint PT_HP_CORE_MMF = 1610612745;
        
        public const uint PT_HP_PARALLEL = 1610612752;
        
        public const uint PT_HP_FASTBIND = 1610612753;
        
        public const uint PT_HP_OPT_ANNOT = 1610612754;
        
        public const uint PT_HP_HSL_ANNOT = 1610612755;
        
        public const uint PT_HP_STACK = 1610612756;
        
        public const uint PT_PARISC_ARCHEXT = 1879048192;
        
        public const uint PT_PARISC_UNWIND = 1879048193;
        
        public const uint PF_PARISC_SBP = 134217728;
        
        public const uint PF_HP_PAGE_SIZE = 1048576;
        
        public const uint PF_HP_FAR_SHARED = 2097152;
        
        public const uint PF_HP_NEAR_SHARED = 4194304;
        
        public const uint PF_HP_CODE = 16777216;
        
        public const uint PF_HP_MODIFY = 33554432;
        
        public const uint PF_HP_LAZYSWAP = 67108864;
        
        public const uint PF_HP_SBP = 134217728;
        
        /// <summary>
        /// All addresses must be 
        /// &lt;
        /// 2GB.
        /// </summary>
        public const uint EF_ALPHA_32BIT = 1;
        
        /// <summary>
        /// Relocations for relaxing exist.
        /// </summary>
        public const uint EF_ALPHA_CANRELAX = 2;
        
        public const uint SHT_ALPHA_DEBUG = 1879048193;
        
        public const uint SHT_ALPHA_REGINFO = 1879048194;
        
        public const uint SHF_ALPHA_GPREL = 268435456;
        
        /// <summary>
        /// No reloc
        /// </summary>
        public const uint R_ALPHA_NONE = 0;
        
        /// <summary>
        /// Direct 32 bit
        /// </summary>
        public const uint R_ALPHA_REFLONG = 1;
        
        /// <summary>
        /// Direct 64 bit
        /// </summary>
        public const uint R_ALPHA_REFQUAD = 2;
        
        /// <summary>
        /// GP relative 32 bit
        /// </summary>
        public const uint R_ALPHA_GPREL32 = 3;
        
        /// <summary>
        /// GP relative 16 bit w/optimization
        /// </summary>
        public const uint R_ALPHA_LITERAL = 4;
        
        /// <summary>
        /// Optimization hint for LITERAL
        /// </summary>
        public const uint R_ALPHA_LITUSE = 5;
        
        /// <summary>
        /// Add displacement to GP
        /// </summary>
        public const uint R_ALPHA_GPDISP = 6;
        
        /// <summary>
        /// PC+4 relative 23 bit shifted
        /// </summary>
        public const uint R_ALPHA_BRADDR = 7;
        
        /// <summary>
        /// PC+4 relative 16 bit shifted
        /// </summary>
        public const uint R_ALPHA_HINT = 8;
        
        /// <summary>
        /// PC relative 16 bit
        /// </summary>
        public const uint R_ALPHA_SREL16 = 9;
        
        /// <summary>
        /// PC relative 32 bit
        /// </summary>
        public const uint R_ALPHA_SREL32 = 10;
        
        /// <summary>
        /// PC relative 64 bit
        /// </summary>
        public const uint R_ALPHA_SREL64 = 11;
        
        /// <summary>
        /// GP relative 32 bit, high 16 bits
        /// </summary>
        public const uint R_ALPHA_GPRELHIGH = 17;
        
        /// <summary>
        /// GP relative 32 bit, low 16 bits
        /// </summary>
        public const uint R_ALPHA_GPRELLOW = 18;
        
        /// <summary>
        /// GP relative 16 bit
        /// </summary>
        public const uint R_ALPHA_GPREL16 = 19;
        
        /// <summary>
        /// Copy symbol at runtime
        /// </summary>
        public const uint R_ALPHA_COPY = 24;
        
        /// <summary>
        /// Create GOT entry
        /// </summary>
        public const uint R_ALPHA_GLOB_DAT = 25;
        
        /// <summary>
        /// Create PLT entry
        /// </summary>
        public const uint R_ALPHA_JMP_SLOT = 26;
        
        /// <summary>
        /// Adjust by program base
        /// </summary>
        public const uint R_ALPHA_RELATIVE = 27;
        
        public const uint R_ALPHA_TLS_GD_HI = 28;
        
        public const uint R_ALPHA_TLSGD = 29;
        
        public const uint R_ALPHA_TLS_LDM = 30;
        
        public const uint R_ALPHA_DTPMOD64 = 31;
        
        public const uint R_ALPHA_GOTDTPREL = 32;
        
        public const uint R_ALPHA_DTPREL64 = 33;
        
        public const uint R_ALPHA_DTPRELHI = 34;
        
        public const uint R_ALPHA_DTPRELLO = 35;
        
        public const uint R_ALPHA_DTPREL16 = 36;
        
        public const uint R_ALPHA_GOTTPREL = 37;
        
        public const uint R_ALPHA_TPREL64 = 38;
        
        public const uint R_ALPHA_TPRELHI = 39;
        
        public const uint R_ALPHA_TPRELLO = 40;
        
        public const uint R_ALPHA_TPREL16 = 41;
        
        public const uint R_ALPHA_NUM = 46;
        
        public const int DT_ALPHA_PLTRO = (  0);
        
        public const int DT_ALPHA_NUM = 1;
        
        /// <summary>
        /// PowerPC embedded flag
        /// </summary>
        public const uint EF_PPC_EMB = 0x80000000;
        
        /// <summary>
        /// PowerPC -mrelocatable flag
        /// </summary>
        public const uint EF_PPC_RELOCATABLE = 65536;
        
        /// <summary>
        /// PowerPC -mrelocatable-lib
        /// flag
        /// </summary>
        public const uint EF_PPC_RELOCATABLE_LIB = 32768;
        
        public const uint R_PPC_NONE = 0;
        
        /// <summary>
        /// 32bit absolute address
        /// </summary>
        public const uint R_PPC_ADDR32 = 1;
        
        /// <summary>
        /// 26bit address, 2 bits ignored.
        /// </summary>
        public const uint R_PPC_ADDR24 = 2;
        
        /// <summary>
        /// 16bit absolute address
        /// </summary>
        public const uint R_PPC_ADDR16 = 3;
        
        /// <summary>
        /// lower 16bit of absolute address
        /// </summary>
        public const uint R_PPC_ADDR16_LO = 4;
        
        /// <summary>
        /// high 16bit of absolute address
        /// </summary>
        public const uint R_PPC_ADDR16_HI = 5;
        
        /// <summary>
        /// adjusted high 16bit
        /// </summary>
        public const uint R_PPC_ADDR16_HA = 6;
        
        /// <summary>
        /// 16bit address, 2 bits ignored
        /// </summary>
        public const uint R_PPC_ADDR14 = 7;
        
        public const uint R_PPC_ADDR14_BRTAKEN = 8;
        
        public const uint R_PPC_ADDR14_BRNTAKEN = 9;
        
        /// <summary>
        /// PC relative 26 bit
        /// </summary>
        public const uint R_PPC_REL24 = 10;
        
        /// <summary>
        /// PC relative 16 bit
        /// </summary>
        public const uint R_PPC_REL14 = 11;
        
        public const uint R_PPC_REL14_BRTAKEN = 12;
        
        public const uint R_PPC_REL14_BRNTAKEN = 13;
        
        public const uint R_PPC_GOT16 = 14;
        
        public const uint R_PPC_GOT16_LO = 15;
        
        public const uint R_PPC_GOT16_HI = 16;
        
        public const uint R_PPC_GOT16_HA = 17;
        
        public const uint R_PPC_PLTREL24 = 18;
        
        public const uint R_PPC_COPY = 19;
        
        public const uint R_PPC_GLOB_DAT = 20;
        
        public const uint R_PPC_JMP_SLOT = 21;
        
        public const uint R_PPC_RELATIVE = 22;
        
        public const uint R_PPC_LOCAL24PC = 23;
        
        public const uint R_PPC_UADDR32 = 24;
        
        public const uint R_PPC_UADDR16 = 25;
        
        public const uint R_PPC_REL32 = 26;
        
        public const uint R_PPC_PLT32 = 27;
        
        public const uint R_PPC_PLTREL32 = 28;
        
        public const uint R_PPC_PLT16_LO = 29;
        
        public const uint R_PPC_PLT16_HI = 30;
        
        public const uint R_PPC_PLT16_HA = 31;
        
        public const uint R_PPC_SDAREL16 = 32;
        
        public const uint R_PPC_SECTOFF = 33;
        
        public const uint R_PPC_SECTOFF_LO = 34;
        
        public const uint R_PPC_SECTOFF_HI = 35;
        
        public const uint R_PPC_SECTOFF_HA = 36;
        
        /// <summary>
        /// none	(sym+add)@tls
        /// </summary>
        public const uint R_PPC_TLS = 67;
        
        /// <summary>
        /// word32	(sym+add)@dtpmod
        /// </summary>
        public const uint R_PPC_DTPMOD32 = 68;
        
        /// <summary>
        /// half16*	(sym+add)@tprel
        /// </summary>
        public const uint R_PPC_TPREL16 = 69;
        
        /// <summary>
        /// half16	(sym+add)@tprel @l
        /// </summary>
        public const uint R_PPC_TPREL16_LO = 70;
        
        /// <summary>
        /// half16	(sym+add)@tprel @h
        /// </summary>
        public const uint R_PPC_TPREL16_HI = 71;
        
        /// <summary>
        /// half16	(sym+add)@tprel @ha
        /// </summary>
        public const uint R_PPC_TPREL16_HA = 72;
        
        /// <summary>
        /// word32	(sym+add)@tprel
        /// </summary>
        public const uint R_PPC_TPREL32 = 73;
        
        /// <summary>
        /// half16*	(sym+add)@dtprel
        /// </summary>
        public const uint R_PPC_DTPREL16 = 74;
        
        /// <summary>
        /// half16	(sym+add)@dtprel @l
        /// </summary>
        public const uint R_PPC_DTPREL16_LO = 75;
        
        /// <summary>
        /// half16	(sym+add)@dtprel @h
        /// </summary>
        public const uint R_PPC_DTPREL16_HI = 76;
        
        /// <summary>
        /// half16	(sym+add)@dtprel @ha
        /// </summary>
        public const uint R_PPC_DTPREL16_HA = 77;
        
        /// <summary>
        /// word32	(sym+add)@dtprel
        /// </summary>
        public const uint R_PPC_DTPREL32 = 78;
        
        /// <summary>
        /// half16*	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsgd 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_TLSGD16 = 79;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsgd@l 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_TLSGD16_LO = 80;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsgd@h 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_TLSGD16_HI = 81;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsgd@ha 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_TLSGD16_HA = 82;
        
        /// <summary>
        /// half16*	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsld 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_TLSLD16 = 83;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsld@l 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_TLSLD16_LO = 84;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsld@h 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_TLSLD16_HI = 85;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsld@ha 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_TLSLD16_HA = 86;
        
        /// <summary>
        /// half16*	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tprel 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_TPREL16 = 87;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tprel@l 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_TPREL16_LO = 88;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tprel@h 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_TPREL16_HI = 89;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tprel@ha 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_TPREL16_HA = 90;
        
        /// <summary>
        /// half16*	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @dtprel 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_DTPREL16 = 91;
        
        /// <summary>
        /// half16*	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @dtprel@l 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_DTPREL16_LO = 92;
        
        /// <summary>
        /// half16*	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @dtprel@h 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_DTPREL16_HI = 93;
        
        /// <summary>
        /// half16*	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @dtprel@ha 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC_GOT_DTPREL16_HA = 94;
        
        /// <summary>
        /// none	(sym+add)@tlsgd
        /// </summary>
        public const uint R_PPC_TLSGD = 95;
        
        /// <summary>
        /// none	(sym+add)@tlsld
        /// </summary>
        public const uint R_PPC_TLSLD = 96;
        
        public const uint R_PPC_EMB_NADDR32 = 101;
        
        public const uint R_PPC_EMB_NADDR16 = 102;
        
        public const uint R_PPC_EMB_NADDR16_LO = 103;
        
        public const uint R_PPC_EMB_NADDR16_HI = 104;
        
        public const uint R_PPC_EMB_NADDR16_HA = 105;
        
        public const uint R_PPC_EMB_SDAI16 = 106;
        
        public const uint R_PPC_EMB_SDA2I16 = 107;
        
        public const uint R_PPC_EMB_SDA2REL = 108;
        
        /// <summary>
        /// 16 bit offset in SDA
        /// </summary>
        public const uint R_PPC_EMB_SDA21 = 109;
        
        public const uint R_PPC_EMB_MRKREF = 110;
        
        public const uint R_PPC_EMB_RELSEC16 = 111;
        
        public const uint R_PPC_EMB_RELST_LO = 112;
        
        public const uint R_PPC_EMB_RELST_HI = 113;
        
        public const uint R_PPC_EMB_RELST_HA = 114;
        
        public const uint R_PPC_EMB_BIT_FLD = 115;
        
        /// <summary>
        /// 16 bit relative offset in SDA
        /// </summary>
        public const uint R_PPC_EMB_RELSDA = 116;
        
        /// <summary>
        /// like EMB_SDA21, but lower 16 bit
        /// </summary>
        public const uint R_PPC_DIAB_SDA21_LO = 180;
        
        /// <summary>
        /// like EMB_SDA21, but high 16 bit
        /// </summary>
        public const uint R_PPC_DIAB_SDA21_HI = 181;
        
        /// <summary>
        /// like EMB_SDA21, adjusted high 16
        /// </summary>
        public const uint R_PPC_DIAB_SDA21_HA = 182;
        
        /// <summary>
        /// like EMB_RELSDA, but lower 16 bit
        /// </summary>
        public const uint R_PPC_DIAB_RELSDA_LO = 183;
        
        /// <summary>
        /// like EMB_RELSDA, but high 16 bit
        /// </summary>
        public const uint R_PPC_DIAB_RELSDA_HI = 184;
        
        /// <summary>
        /// like EMB_RELSDA, adjusted high 16
        /// </summary>
        public const uint R_PPC_DIAB_RELSDA_HA = 185;
        
        public const uint R_PPC_IRELATIVE = 248;
        
        /// <summary>
        /// half16   (sym+add-.)
        /// </summary>
        public const uint R_PPC_REL16 = 249;
        
        /// <summary>
        /// half16   (sym+add-.)@l
        /// </summary>
        public const uint R_PPC_REL16_LO = 250;
        
        /// <summary>
        /// half16   (sym+add-.)@h
        /// </summary>
        public const uint R_PPC_REL16_HI = 251;
        
        /// <summary>
        /// half16   (sym+add-.)@ha
        /// </summary>
        public const uint R_PPC_REL16_HA = 252;
        
        public const uint R_PPC_TOC16 = 255;
        
        public const int DT_PPC_GOT = (  0);
        
        public const int DT_PPC_OPT = (  1);
        
        public const int DT_PPC_NUM = 2;
        
        public const uint R_PPC64_NONE = 0;
        
        /// <summary>
        /// 32bit absolute address
        /// </summary>
        public const uint R_PPC64_ADDR32 = 1;
        
        /// <summary>
        /// 26bit address, word aligned
        /// </summary>
        public const uint R_PPC64_ADDR24 = 2;
        
        /// <summary>
        /// 16bit absolute address
        /// </summary>
        public const uint R_PPC64_ADDR16 = 3;
        
        /// <summary>
        /// lower 16bits of address
        /// </summary>
        public const uint R_PPC64_ADDR16_LO = 4;
        
        /// <summary>
        /// high 16bits of address.
        /// </summary>
        public const uint R_PPC64_ADDR16_HI = 5;
        
        /// <summary>
        /// adjusted high 16bits.
        /// </summary>
        public const uint R_PPC64_ADDR16_HA = 6;
        
        /// <summary>
        /// 16bit address, word aligned
        /// </summary>
        public const uint R_PPC64_ADDR14 = 7;
        
        public const uint R_PPC64_ADDR14_BRTAKEN = 8;
        
        public const uint R_PPC64_ADDR14_BRNTAKEN = 9;
        
        /// <summary>
        /// PC-rel. 26 bit, word aligned
        /// </summary>
        public const uint R_PPC64_REL24 = 10;
        
        /// <summary>
        /// PC relative 16 bit
        /// </summary>
        public const uint R_PPC64_REL14 = 11;
        
        public const uint R_PPC64_REL14_BRTAKEN = 12;
        
        public const uint R_PPC64_REL14_BRNTAKEN = 13;
        
        public const uint R_PPC64_GOT16 = 14;
        
        public const uint R_PPC64_GOT16_LO = 15;
        
        public const uint R_PPC64_GOT16_HI = 16;
        
        public const uint R_PPC64_GOT16_HA = 17;
        
        public const uint R_PPC64_COPY = 19;
        
        public const uint R_PPC64_GLOB_DAT = 20;
        
        public const uint R_PPC64_JMP_SLOT = 21;
        
        public const uint R_PPC64_RELATIVE = 22;
        
        public const uint R_PPC64_UADDR32 = 24;
        
        public const uint R_PPC64_UADDR16 = 25;
        
        public const uint R_PPC64_REL32 = 26;
        
        public const uint R_PPC64_PLT32 = 27;
        
        public const uint R_PPC64_PLTREL32 = 28;
        
        public const uint R_PPC64_PLT16_LO = 29;
        
        public const uint R_PPC64_PLT16_HI = 30;
        
        public const uint R_PPC64_PLT16_HA = 31;
        
        public const uint R_PPC64_SECTOFF = 33;
        
        public const uint R_PPC64_SECTOFF_LO = 34;
        
        public const uint R_PPC64_SECTOFF_HI = 35;
        
        public const uint R_PPC64_SECTOFF_HA = 36;
        
        /// <summary>
        /// word30 (S + A - P) &gt;&gt; 2
        /// </summary>
        public const uint R_PPC64_ADDR30 = 37;
        
        /// <summary>
        /// doubleword64 S + A
        /// </summary>
        public const uint R_PPC64_ADDR64 = 38;
        
        /// <summary>
        /// half16 #higher(S + A)
        /// </summary>
        public const uint R_PPC64_ADDR16_HIGHER = 39;
        
        /// <summary>
        /// half16 #highera(S + A)
        /// </summary>
        public const uint R_PPC64_ADDR16_HIGHERA = 40;
        
        /// <summary>
        /// half16 #highest(S + A)
        /// </summary>
        public const uint R_PPC64_ADDR16_HIGHEST = 41;
        
        /// <summary>
        /// half16 #highesta(S + A)
        /// </summary>
        public const uint R_PPC64_ADDR16_HIGHESTA = 42;
        
        /// <summary>
        /// doubleword64 S + A
        /// </summary>
        public const uint R_PPC64_UADDR64 = 43;
        
        /// <summary>
        /// doubleword64 S + A - P
        /// </summary>
        public const uint R_PPC64_REL64 = 44;
        
        /// <summary>
        /// doubleword64 L + A
        /// </summary>
        public const uint R_PPC64_PLT64 = 45;
        
        /// <summary>
        /// doubleword64 L + A - P
        /// </summary>
        public const uint R_PPC64_PLTREL64 = 46;
        
        /// <summary>
        /// half16* S + A - .TOC
        /// </summary>
        public const uint R_PPC64_TOC16 = 47;
        
        /// <summary>
        /// half16 #lo(S + A - .TOC.)
        /// </summary>
        public const uint R_PPC64_TOC16_LO = 48;
        
        /// <summary>
        /// half16 #hi(S + A - .TOC.)
        /// </summary>
        public const uint R_PPC64_TOC16_HI = 49;
        
        /// <summary>
        /// half16 #ha(S + A - .TOC.)
        /// </summary>
        public const uint R_PPC64_TOC16_HA = 50;
        
        /// <summary>
        /// doubleword64 .TOC
        /// </summary>
        public const uint R_PPC64_TOC = 51;
        
        /// <summary>
        /// half16* M + A
        /// </summary>
        public const uint R_PPC64_PLTGOT16 = 52;
        
        /// <summary>
        /// half16 #lo(M + A)
        /// </summary>
        public const uint R_PPC64_PLTGOT16_LO = 53;
        
        /// <summary>
        /// half16 #hi(M + A)
        /// </summary>
        public const uint R_PPC64_PLTGOT16_HI = 54;
        
        /// <summary>
        /// half16 #ha(M + A)
        /// </summary>
        public const uint R_PPC64_PLTGOT16_HA = 55;
        
        /// <summary>
        /// half16ds* (S + A) &gt;&gt; 2
        /// </summary>
        public const uint R_PPC64_ADDR16_DS = 56;
        
        /// <summary>
        /// half16ds  #lo(S + A) &gt;&gt; 2
        /// </summary>
        public const uint R_PPC64_ADDR16_LO_DS = 57;
        
        /// <summary>
        /// half16ds* (G + A) &gt;&gt; 2
        /// </summary>
        public const uint R_PPC64_GOT16_DS = 58;
        
        /// <summary>
        /// half16ds  #lo(G + A) &gt;&gt; 2
        /// </summary>
        public const uint R_PPC64_GOT16_LO_DS = 59;
        
        /// <summary>
        /// half16ds  #lo(L + A) &gt;&gt; 2
        /// </summary>
        public const uint R_PPC64_PLT16_LO_DS = 60;
        
        /// <summary>
        /// half16ds* (R + A) &gt;&gt; 2
        /// </summary>
        public const uint R_PPC64_SECTOFF_DS = 61;
        
        /// <summary>
        /// half16ds  #lo(R + A) &gt;&gt; 2
        /// </summary>
        public const uint R_PPC64_SECTOFF_LO_DS = 62;
        
        /// <summary>
        /// half16ds* (S + A - .TOC.) &gt;&gt; 2
        /// </summary>
        public const uint R_PPC64_TOC16_DS = 63;
        
        /// <summary>
        /// half16ds  #lo(S + A - .TOC.) &gt;&gt; 2
        /// </summary>
        public const uint R_PPC64_TOC16_LO_DS = 64;
        
        /// <summary>
        /// half16ds* (M + A) &gt;&gt; 2
        /// </summary>
        public const uint R_PPC64_PLTGOT16_DS = 65;
        
        /// <summary>
        /// half16ds  #lo(M + A) &gt;&gt; 2
        /// </summary>
        public const uint R_PPC64_PLTGOT16_LO_DS = 66;
        
        /// <summary>
        /// none	(sym+add)@tls
        /// </summary>
        public const uint R_PPC64_TLS = 67;
        
        /// <summary>
        /// doubleword64 (sym+add)@dtpmod
        /// </summary>
        public const uint R_PPC64_DTPMOD64 = 68;
        
        /// <summary>
        /// half16*	(sym+add)@tprel
        /// </summary>
        public const uint R_PPC64_TPREL16 = 69;
        
        /// <summary>
        /// half16	(sym+add)@tprel @l
        /// </summary>
        public const uint R_PPC64_TPREL16_LO = 70;
        
        /// <summary>
        /// half16	(sym+add)@tprel @h
        /// </summary>
        public const uint R_PPC64_TPREL16_HI = 71;
        
        /// <summary>
        /// half16	(sym+add)@tprel @ha
        /// </summary>
        public const uint R_PPC64_TPREL16_HA = 72;
        
        /// <summary>
        /// doubleword64 (sym+add)@tprel
        /// </summary>
        public const uint R_PPC64_TPREL64 = 73;
        
        /// <summary>
        /// half16*	(sym+add)@dtprel
        /// </summary>
        public const uint R_PPC64_DTPREL16 = 74;
        
        /// <summary>
        /// half16	(sym+add)@dtprel @l
        /// </summary>
        public const uint R_PPC64_DTPREL16_LO = 75;
        
        /// <summary>
        /// half16	(sym+add)@dtprel @h
        /// </summary>
        public const uint R_PPC64_DTPREL16_HI = 76;
        
        /// <summary>
        /// half16	(sym+add)@dtprel @ha
        /// </summary>
        public const uint R_PPC64_DTPREL16_HA = 77;
        
        /// <summary>
        /// doubleword64 (sym+add)@dtprel
        /// </summary>
        public const uint R_PPC64_DTPREL64 = 78;
        
        /// <summary>
        /// half16*	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsgd 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_TLSGD16 = 79;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsgd@l 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_TLSGD16_LO = 80;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsgd@h 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_TLSGD16_HI = 81;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsgd@ha 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_TLSGD16_HA = 82;
        
        /// <summary>
        /// half16*	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsld 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_TLSLD16 = 83;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsld@l 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_TLSLD16_LO = 84;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsld@h 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_TLSLD16_HI = 85;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tlsld@ha 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_TLSLD16_HA = 86;
        
        /// <summary>
        /// half16ds*	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tprel 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_TPREL16_DS = 87;
        
        /// <summary>
        /// half16ds (sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tprel@l 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_TPREL16_LO_DS = 88;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tprel@h 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_TPREL16_HI = 89;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @tprel@ha 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_TPREL16_HA = 90;
        
        /// <summary>
        /// half16ds*	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @dtprel 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_DTPREL16_DS = 91;
        
        /// <summary>
        /// half16ds (sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @dtprel@l 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_DTPREL16_LO_DS = 92;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @dtprel@h 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_DTPREL16_HI = 93;
        
        /// <summary>
        /// half16	(sym+add)
        /// </summary>
        /// <remarks>
        /// @dot @dtprel@ha 
        /// 
        /// @enddot
        /// </remarks>
        public const uint R_PPC64_GOT_DTPREL16_HA = 94;
        
        /// <summary>
        /// half16ds*	(sym+add)@tprel
        /// </summary>
        public const uint R_PPC64_TPREL16_DS = 95;
        
        /// <summary>
        /// half16ds	(sym+add)@tprel @l
        /// </summary>
        public const uint R_PPC64_TPREL16_LO_DS = 96;
        
        /// <summary>
        /// half16	(sym+add)@tprel @higher
        /// </summary>
        public const uint R_PPC64_TPREL16_HIGHER = 97;
        
        /// <summary>
        /// half16	(sym+add)@tprel @highera
        /// </summary>
        public const uint R_PPC64_TPREL16_HIGHERA = 98;
        
        /// <summary>
        /// half16	(sym+add)@tprel @highest
        /// </summary>
        public const uint R_PPC64_TPREL16_HIGHEST = 99;
        
        /// <summary>
        /// half16	(sym+add)@tprel @highesta
        /// </summary>
        public const uint R_PPC64_TPREL16_HIGHESTA = 100;
        
        /// <summary>
        /// half16ds* (sym+add)@dtprel
        /// </summary>
        public const uint R_PPC64_DTPREL16_DS = 101;
        
        /// <summary>
        /// half16ds	(sym+add)@dtprel @l
        /// </summary>
        public const uint R_PPC64_DTPREL16_LO_DS = 102;
        
        /// <summary>
        /// half16	(sym+add)@dtprel @higher
        /// </summary>
        public const uint R_PPC64_DTPREL16_HIGHER = 103;
        
        /// <summary>
        /// half16	(sym+add)@dtprel @highera
        /// </summary>
        public const uint R_PPC64_DTPREL16_HIGHERA = 104;
        
        /// <summary>
        /// half16	(sym+add)@dtprel @highest
        /// </summary>
        public const uint R_PPC64_DTPREL16_HIGHEST = 105;
        
        /// <summary>
        /// half16	(sym+add)@dtprel @highesta
        /// </summary>
        public const uint R_PPC64_DTPREL16_HIGHESTA = 106;
        
        /// <summary>
        /// none	(sym+add)@tlsgd
        /// </summary>
        public const uint R_PPC64_TLSGD = 107;
        
        /// <summary>
        /// none	(sym+add)@tlsld
        /// </summary>
        public const uint R_PPC64_TLSLD = 108;
        
        /// <summary>
        /// none
        /// </summary>
        public const uint R_PPC64_TOCSAVE = 109;
        
        public const uint R_PPC64_ADDR16_HIGH = 110;
        
        public const uint R_PPC64_ADDR16_HIGHA = 111;
        
        public const uint R_PPC64_TPREL16_HIGH = 112;
        
        public const uint R_PPC64_TPREL16_HIGHA = 113;
        
        public const uint R_PPC64_DTPREL16_HIGH = 114;
        
        public const uint R_PPC64_DTPREL16_HIGHA = 115;
        
        public const uint R_PPC64_JMP_IREL = 247;
        
        public const uint R_PPC64_IRELATIVE = 248;
        
        /// <summary>
        /// half16   (sym+add-.)
        /// </summary>
        public const uint R_PPC64_REL16 = 249;
        
        /// <summary>
        /// half16   (sym+add-.)@l
        /// </summary>
        public const uint R_PPC64_REL16_LO = 250;
        
        /// <summary>
        /// half16   (sym+add-.)@h
        /// </summary>
        public const uint R_PPC64_REL16_HI = 251;
        
        /// <summary>
        /// half16   (sym+add-.)@ha
        /// </summary>
        public const uint R_PPC64_REL16_HA = 252;
        
        public const uint EF_PPC64_ABI = 3;
        
        public const int DT_PPC64_GLINK = (  0);
        
        public const int DT_PPC64_OPD = (  1);
        
        public const int DT_PPC64_OPDSZ = (  2);
        
        public const int DT_PPC64_OPT = (  3);
        
        public const int DT_PPC64_NUM = 4;
        
        public const uint EF_ARM_RELEXEC = 1;
        
        public const uint EF_ARM_HASENTRY = 2;
        
        public const uint EF_ARM_INTERWORK = 4;
        
        public const uint EF_ARM_APCS_26 = 8;
        
        public const uint EF_ARM_APCS_FLOAT = 16;
        
        public const uint EF_ARM_PIC = 32;
        
        /// <summary>
        /// 8-bit structure alignment is in use
        /// </summary>
        public const uint EF_ARM_ALIGN8 = 64;
        
        public const uint EF_ARM_NEW_ABI = 128;
        
        public const uint EF_ARM_OLD_ABI = 256;
        
        public const uint EF_ARM_SOFT_FLOAT = 512;
        
        public const uint EF_ARM_VFP_FLOAT = 1024;
        
        public const uint EF_ARM_MAVERICK_FLOAT = 2048;
        
        /// <summary>
        /// NB conflicts with EF_ARM_SOFT_FLOAT
        /// </summary>
        public const uint EF_ARM_ABI_FLOAT_SOFT = 512;
        
        /// <summary>
        /// NB conflicts with EF_ARM_VFP_FLOAT
        /// </summary>
        public const uint EF_ARM_ABI_FLOAT_HARD = 1024;
        
        public const uint EF_ARM_SYMSARESORTED = 4;
        
        public const uint EF_ARM_DYNSYMSUSESEGIDX = 8;
        
        public const uint EF_ARM_MAPSYMSFIRST = 16;
        
        public const uint EF_ARM_EABIMASK = 0XFF000000;
        
        public const uint EF_ARM_BE8 = 8388608;
        
        public const uint EF_ARM_LE8 = 4194304;
        
        public const uint EF_ARM_EABI_UNKNOWN = 0;
        
        public const uint EF_ARM_EABI_VER1 = 16777216;
        
        public const uint EF_ARM_EABI_VER2 = 33554432;
        
        public const uint EF_ARM_EABI_VER3 = 50331648;
        
        public const uint EF_ARM_EABI_VER4 = 67108864;
        
        public const uint EF_ARM_EABI_VER5 = 83886080;
        
        /// <summary>
        /// A Thumb function.
        /// </summary>
        public const byte STT_ARM_TFUNC = 13;
        
        /// <summary>
        /// A Thumb label.
        /// </summary>
        public const byte STT_ARM_16BIT = 15;
        
        /// <summary>
        /// Section contains an entry point
        /// </summary>
        public const uint SHF_ARM_ENTRYSECT = 268435456;
        
        /// <summary>
        /// Section may be multiply defined
        /// in the input to a link step.
        /// </summary>
        public const uint SHF_ARM_COMDEF = 0x80000000;
        
        /// <summary>
        /// Segment contains the location
        /// addressed by the static base.
        /// </summary>
        public const uint PF_ARM_SB = 268435456;
        
        /// <summary>
        /// Position-independent segment.
        /// </summary>
        public const uint PF_ARM_PI = 536870912;
        
        /// <summary>
        /// Absolute segment.
        /// </summary>
        public const uint PF_ARM_ABS = 1073741824;
        
        /// <summary>
        /// ARM unwind segment.
        /// </summary>
        public const uint PT_ARM_EXIDX = 1879048193;
        
        /// <summary>
        /// ARM unwind section.
        /// </summary>
        public const uint SHT_ARM_EXIDX = 1879048193;
        
        /// <summary>
        /// Preemption details.
        /// </summary>
        public const uint SHT_ARM_PREEMPTMAP = 1879048194;
        
        /// <summary>
        /// ARM attributes section.
        /// </summary>
        public const uint SHT_ARM_ATTRIBUTES = 1879048195;
        
        /// <summary>
        /// No relocation.
        /// </summary>
        public const uint R_AARCH64_NONE = 0;
        
        /// <summary>
        /// Direct 32 bit.
        /// </summary>
        public const uint R_AARCH64_P32_ABS32 = 1;
        
        /// <summary>
        /// Copy symbol at runtime.
        /// </summary>
        public const uint R_AARCH64_P32_COPY = 180;
        
        /// <summary>
        /// Create GOT entry.
        /// </summary>
        public const uint R_AARCH64_P32_GLOB_DAT = 181;
        
        /// <summary>
        /// Create PLT entry.
        /// </summary>
        public const uint R_AARCH64_P32_JUMP_SLOT = 182;
        
        /// <summary>
        /// Adjust by program base.
        /// </summary>
        public const uint R_AARCH64_P32_RELATIVE = 183;
        
        /// <summary>
        /// Module number, 32 bit.
        /// </summary>
        public const uint R_AARCH64_P32_TLS_DTPMOD = 184;
        
        /// <summary>
        /// Module-relative offset, 32 bit.
        /// </summary>
        public const uint R_AARCH64_P32_TLS_DTPREL = 185;
        
        /// <summary>
        /// TP-relative offset, 32 bit.
        /// </summary>
        public const uint R_AARCH64_P32_TLS_TPREL = 186;
        
        /// <summary>
        /// TLS Descriptor.
        /// </summary>
        public const uint R_AARCH64_P32_TLSDESC = 187;
        
        /// <summary>
        /// STT_GNU_IFUNC relocation.
        /// </summary>
        public const uint R_AARCH64_P32_IRELATIVE = 188;
        
        /// <summary>
        /// Direct 64 bit.
        /// </summary>
        public const uint R_AARCH64_ABS64 = 257;
        
        /// <summary>
        /// Direct 32 bit.
        /// </summary>
        public const uint R_AARCH64_ABS32 = 258;
        
        /// <summary>
        /// Direct 16-bit.
        /// </summary>
        public const uint R_AARCH64_ABS16 = 259;
        
        /// <summary>
        /// PC-relative 64-bit.
        /// </summary>
        public const uint R_AARCH64_PREL64 = 260;
        
        /// <summary>
        /// PC-relative 32-bit.
        /// </summary>
        public const uint R_AARCH64_PREL32 = 261;
        
        /// <summary>
        /// PC-relative 16-bit.
        /// </summary>
        public const uint R_AARCH64_PREL16 = 262;
        
        /// <summary>
        /// Dir. MOVZ imm. from bits 15:0.
        /// </summary>
        public const uint R_AARCH64_MOVW_UABS_G0 = 263;
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_MOVW_UABS_G0_NC = 264;
        
        /// <summary>
        /// Dir. MOVZ imm. from bits 31:16.
        /// </summary>
        public const uint R_AARCH64_MOVW_UABS_G1 = 265;
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_MOVW_UABS_G1_NC = 266;
        
        /// <summary>
        /// Dir. MOVZ imm. from bits 47:32.
        /// </summary>
        public const uint R_AARCH64_MOVW_UABS_G2 = 267;
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_MOVW_UABS_G2_NC = 268;
        
        /// <summary>
        /// Dir. MOV{K,Z} imm. from 63:48.
        /// </summary>
        public const uint R_AARCH64_MOVW_UABS_G3 = 269;
        
        /// <summary>
        /// Dir. MOV{N,Z} imm. from 15:0.
        /// </summary>
        public const uint R_AARCH64_MOVW_SABS_G0 = 270;
        
        /// <summary>
        /// Dir. MOV{N,Z} imm. from 31:16.
        /// </summary>
        public const uint R_AARCH64_MOVW_SABS_G1 = 271;
        
        /// <summary>
        /// Dir. MOV{N,Z} imm. from 47:32.
        /// </summary>
        public const uint R_AARCH64_MOVW_SABS_G2 = 272;
        
        /// <summary>
        /// PC-rel. LD imm. from bits 20:2.
        /// </summary>
        public const uint R_AARCH64_LD_PREL_LO19 = 273;
        
        /// <summary>
        /// PC-rel. ADR imm. from bits 20:0.
        /// </summary>
        public const uint R_AARCH64_ADR_PREL_LO21 = 274;
        
        /// <summary>
        /// Page-rel. ADRP imm. from 32:12.
        /// </summary>
        public const uint R_AARCH64_ADR_PREL_PG_HI21 = 275;
        
        /// <summary>
        /// Likewise; no overflow check.
        /// </summary>
        public const uint R_AARCH64_ADR_PREL_PG_HI21_NC = 276;
        
        /// <summary>
        /// Dir. ADD imm. from bits 11:0.
        /// </summary>
        public const uint R_AARCH64_ADD_ABS_LO12_NC = 277;
        
        /// <summary>
        /// Likewise for LD/ST; no check.
        /// </summary>
        public const uint R_AARCH64_LDST8_ABS_LO12_NC = 278;
        
        /// <summary>
        /// PC-rel. TBZ/TBNZ imm. from 15:2.
        /// </summary>
        public const uint R_AARCH64_TSTBR14 = 279;
        
        /// <summary>
        /// PC-rel. cond. br. imm. from 20:2.
        /// </summary>
        public const uint R_AARCH64_CONDBR19 = 280;
        
        /// <summary>
        /// PC-rel. B imm. from bits 27:2.
        /// </summary>
        public const uint R_AARCH64_JUMP26 = 282;
        
        /// <summary>
        /// Likewise for CALL.
        /// </summary>
        public const uint R_AARCH64_CALL26 = 283;
        
        /// <summary>
        /// Dir. ADD imm. from bits 11:1.
        /// </summary>
        public const uint R_AARCH64_LDST16_ABS_LO12_NC = 284;
        
        /// <summary>
        /// Likewise for bits 11:2.
        /// </summary>
        public const uint R_AARCH64_LDST32_ABS_LO12_NC = 285;
        
        /// <summary>
        /// Likewise for bits 11:3.
        /// </summary>
        public const uint R_AARCH64_LDST64_ABS_LO12_NC = 286;
        
        /// <summary>
        /// PC-rel. MOV{N,Z} imm. from 15:0.
        /// </summary>
        public const uint R_AARCH64_MOVW_PREL_G0 = 287;
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_MOVW_PREL_G0_NC = 288;
        
        /// <summary>
        /// PC-rel. MOV{N,Z} imm. from 31:16.
        /// </summary>
        public const uint R_AARCH64_MOVW_PREL_G1 = 289;
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_MOVW_PREL_G1_NC = 290;
        
        /// <summary>
        /// PC-rel. MOV{N,Z} imm. from 47:32.
        /// </summary>
        public const uint R_AARCH64_MOVW_PREL_G2 = 291;
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_MOVW_PREL_G2_NC = 292;
        
        /// <summary>
        /// PC-rel. MOV{N,Z} imm. from 63:48.
        /// </summary>
        public const uint R_AARCH64_MOVW_PREL_G3 = 293;
        
        /// <summary>
        /// Dir. ADD imm. from bits 11:4.
        /// </summary>
        public const uint R_AARCH64_LDST128_ABS_LO12_NC = 299;
        
        /// <summary>
        /// GOT-rel. off. MOV{N,Z} imm. 15:0.
        /// </summary>
        public const uint R_AARCH64_MOVW_GOTOFF_G0 = 300;
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_MOVW_GOTOFF_G0_NC = 301;
        
        /// <summary>
        /// GOT-rel. o. MOV{N,Z} imm. 31:16.
        /// </summary>
        public const uint R_AARCH64_MOVW_GOTOFF_G1 = 302;
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_MOVW_GOTOFF_G1_NC = 303;
        
        /// <summary>
        /// GOT-rel. o. MOV{N,Z} imm. 47:32.
        /// </summary>
        public const uint R_AARCH64_MOVW_GOTOFF_G2 = 304;
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_MOVW_GOTOFF_G2_NC = 305;
        
        /// <summary>
        /// GOT-rel. o. MOV{N,Z} imm. 63:48.
        /// </summary>
        public const uint R_AARCH64_MOVW_GOTOFF_G3 = 306;
        
        /// <summary>
        /// GOT-relative 64-bit.
        /// </summary>
        public const uint R_AARCH64_GOTREL64 = 307;
        
        /// <summary>
        /// GOT-relative 32-bit.
        /// </summary>
        public const uint R_AARCH64_GOTREL32 = 308;
        
        /// <summary>
        /// PC-rel. GOT off. load imm. 20:2.
        /// </summary>
        public const uint R_AARCH64_GOT_LD_PREL19 = 309;
        
        /// <summary>
        /// GOT-rel. off. LD/ST imm. 14:3.
        /// </summary>
        public const uint R_AARCH64_LD64_GOTOFF_LO15 = 310;
        
        /// <summary>
        /// P-page-rel. GOT off. ADRP 32:12.
        /// </summary>
        public const uint R_AARCH64_ADR_GOT_PAGE = 311;
        
        /// <summary>
        /// Dir. GOT off. LD/ST imm. 11:3.
        /// </summary>
        public const uint R_AARCH64_LD64_GOT_LO12_NC = 312;
        
        /// <summary>
        /// GOT-page-rel. GOT off. LD/ST 14:3
        /// </summary>
        public const uint R_AARCH64_LD64_GOTPAGE_LO15 = 313;
        
        /// <summary>
        /// PC-relative ADR imm. 20:0.
        /// </summary>
        public const uint R_AARCH64_TLSGD_ADR_PREL21 = 512;
        
        /// <summary>
        /// page-rel. ADRP imm. 32:12.
        /// </summary>
        public const uint R_AARCH64_TLSGD_ADR_PAGE21 = 513;
        
        /// <summary>
        /// direct ADD imm. from 11:0.
        /// </summary>
        public const uint R_AARCH64_TLSGD_ADD_LO12_NC = 514;
        
        /// <summary>
        /// GOT-rel. MOV{N,Z} 31:16.
        /// </summary>
        public const uint R_AARCH64_TLSGD_MOVW_G1 = 515;
        
        /// <summary>
        /// GOT-rel. MOVK imm. 15:0.
        /// </summary>
        public const uint R_AARCH64_TLSGD_MOVW_G0_NC = 516;
        
        /// <summary>
        /// Like 512; local dynamic model.
        /// </summary>
        public const uint R_AARCH64_TLSLD_ADR_PREL21 = 517;
        
        /// <summary>
        /// Like 513; local dynamic model.
        /// </summary>
        public const uint R_AARCH64_TLSLD_ADR_PAGE21 = 518;
        
        /// <summary>
        /// Like 514; local dynamic model.
        /// </summary>
        public const uint R_AARCH64_TLSLD_ADD_LO12_NC = 519;
        
        /// <summary>
        /// Like 515; local dynamic model.
        /// </summary>
        public const uint R_AARCH64_TLSLD_MOVW_G1 = 520;
        
        /// <summary>
        /// Like 516; local dynamic model.
        /// </summary>
        public const uint R_AARCH64_TLSLD_MOVW_G0_NC = 521;
        
        /// <summary>
        /// TLS PC-rel. load imm. 20:2.
        /// </summary>
        public const uint R_AARCH64_TLSLD_LD_PREL19 = 522;
        
        /// <summary>
        /// TLS DTP-rel. MOV{N,Z} 47:32.
        /// </summary>
        public const uint R_AARCH64_TLSLD_MOVW_DTPREL_G2 = 523;
        
        /// <summary>
        /// TLS DTP-rel. MOV{N,Z} 31:16.
        /// </summary>
        public const uint R_AARCH64_TLSLD_MOVW_DTPREL_G1 = 524;
        
        /// <summary>
        /// Likewise; MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC = 525;
        
        /// <summary>
        /// TLS DTP-rel. MOV{N,Z} 15:0.
        /// </summary>
        public const uint R_AARCH64_TLSLD_MOVW_DTPREL_G0 = 526;
        
        /// <summary>
        /// Likewise; MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC = 527;
        
        /// <summary>
        /// DTP-rel. ADD imm. from 23:12.
        /// </summary>
        public const uint R_AARCH64_TLSLD_ADD_DTPREL_HI12 = 528;
        
        /// <summary>
        /// DTP-rel. ADD imm. from 11:0.
        /// </summary>
        public const uint R_AARCH64_TLSLD_ADD_DTPREL_LO12 = 529;
        
        /// <summary>
        /// Likewise; no ovfl. check.
        /// </summary>
        public const uint R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC = 530;
        
        /// <summary>
        /// DTP-rel. LD/ST imm. 11:0.
        /// </summary>
        public const uint R_AARCH64_TLSLD_LDST8_DTPREL_LO12 = 531;
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC = 532;
        
        /// <summary>
        /// DTP-rel. LD/ST imm. 11:1.
        /// </summary>
        public const uint R_AARCH64_TLSLD_LDST16_DTPREL_LO12 = 533;
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC = 534;
        
        /// <summary>
        /// DTP-rel. LD/ST imm. 11:2.
        /// </summary>
        public const uint R_AARCH64_TLSLD_LDST32_DTPREL_LO12 = 535;
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC = 536;
        
        /// <summary>
        /// DTP-rel. LD/ST imm. 11:3.
        /// </summary>
        public const uint R_AARCH64_TLSLD_LDST64_DTPREL_LO12 = 537;
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC = 538;
        
        /// <summary>
        /// GOT-rel. MOV{N,Z} 31:16.
        /// </summary>
        public const uint R_AARCH64_TLSIE_MOVW_GOTTPREL_G1 = 539;
        
        /// <summary>
        /// GOT-rel. MOVK 15:0.
        /// </summary>
        public const uint R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC = 540;
        
        /// <summary>
        /// Page-rel. ADRP 32:12.
        /// </summary>
        public const uint R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 = 541;
        
        /// <summary>
        /// Direct LD off. 11:3.
        /// </summary>
        public const uint R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC = 542;
        
        /// <summary>
        /// PC-rel. load imm. 20:2.
        /// </summary>
        public const uint R_AARCH64_TLSIE_LD_GOTTPREL_PREL19 = 543;
        
        /// <summary>
        /// TLS TP-rel. MOV{N,Z} 47:32.
        /// </summary>
        public const uint R_AARCH64_TLSLE_MOVW_TPREL_G2 = 544;
        
        /// <summary>
        /// TLS TP-rel. MOV{N,Z} 31:16.
        /// </summary>
        public const uint R_AARCH64_TLSLE_MOVW_TPREL_G1 = 545;
        
        /// <summary>
        /// Likewise; MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLE_MOVW_TPREL_G1_NC = 546;
        
        /// <summary>
        /// TLS TP-rel. MOV{N,Z} 15:0.
        /// </summary>
        public const uint R_AARCH64_TLSLE_MOVW_TPREL_G0 = 547;
        
        /// <summary>
        /// Likewise; MOVK; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLE_MOVW_TPREL_G0_NC = 548;
        
        /// <summary>
        /// TP-rel. ADD imm. 23:12.
        /// </summary>
        public const uint R_AARCH64_TLSLE_ADD_TPREL_HI12 = 549;
        
        /// <summary>
        /// TP-rel. ADD imm. 11:0.
        /// </summary>
        public const uint R_AARCH64_TLSLE_ADD_TPREL_LO12 = 550;
        
        /// <summary>
        /// Likewise; no ovfl. check.
        /// </summary>
        public const uint R_AARCH64_TLSLE_ADD_TPREL_LO12_NC = 551;
        
        /// <summary>
        /// TP-rel. LD/ST off. 11:0.
        /// </summary>
        public const uint R_AARCH64_TLSLE_LDST8_TPREL_LO12 = 552;
        
        /// <summary>
        /// Likewise; no ovfl. check.
        /// </summary>
        public const uint R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC = 553;
        
        /// <summary>
        /// TP-rel. LD/ST off. 11:1.
        /// </summary>
        public const uint R_AARCH64_TLSLE_LDST16_TPREL_LO12 = 554;
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC = 555;
        
        /// <summary>
        /// TP-rel. LD/ST off. 11:2.
        /// </summary>
        public const uint R_AARCH64_TLSLE_LDST32_TPREL_LO12 = 556;
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC = 557;
        
        /// <summary>
        /// TP-rel. LD/ST off. 11:3.
        /// </summary>
        public const uint R_AARCH64_TLSLE_LDST64_TPREL_LO12 = 558;
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC = 559;
        
        /// <summary>
        /// PC-rel. load immediate 20:2.
        /// </summary>
        public const uint R_AARCH64_TLSDESC_LD_PREL19 = 560;
        
        /// <summary>
        /// PC-rel. ADR immediate 20:0.
        /// </summary>
        public const uint R_AARCH64_TLSDESC_ADR_PREL21 = 561;
        
        /// <summary>
        /// Page-rel. ADRP imm. 32:12.
        /// </summary>
        public const uint R_AARCH64_TLSDESC_ADR_PAGE21 = 562;
        
        /// <summary>
        /// Direct LD off. from 11:3.
        /// </summary>
        public const uint R_AARCH64_TLSDESC_LD64_LO12 = 563;
        
        /// <summary>
        /// Direct ADD imm. from 11:0.
        /// </summary>
        public const uint R_AARCH64_TLSDESC_ADD_LO12 = 564;
        
        /// <summary>
        /// GOT-rel. MOV{N,Z} imm. 31:16.
        /// </summary>
        public const uint R_AARCH64_TLSDESC_OFF_G1 = 565;
        
        /// <summary>
        /// GOT-rel. MOVK imm. 15:0; no ck.
        /// </summary>
        public const uint R_AARCH64_TLSDESC_OFF_G0_NC = 566;
        
        /// <summary>
        /// Relax LDR.
        /// </summary>
        public const uint R_AARCH64_TLSDESC_LDR = 567;
        
        /// <summary>
        /// Relax ADD.
        /// </summary>
        public const uint R_AARCH64_TLSDESC_ADD = 568;
        
        /// <summary>
        /// Relax BLR.
        /// </summary>
        public const uint R_AARCH64_TLSDESC_CALL = 569;
        
        /// <summary>
        /// TP-rel. LD/ST off. 11:4.
        /// </summary>
        public const uint R_AARCH64_TLSLE_LDST128_TPREL_LO12 = 570;
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC = 571;
        
        /// <summary>
        /// DTP-rel. LD/ST imm. 11:4.
        /// </summary>
        public const uint R_AARCH64_TLSLD_LDST128_DTPREL_LO12 = 572;
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public const uint R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC = 573;
        
        /// <summary>
        /// Copy symbol at runtime.
        /// </summary>
        public const uint R_AARCH64_COPY = 1024;
        
        /// <summary>
        /// Create GOT entry.
        /// </summary>
        public const uint R_AARCH64_GLOB_DAT = 1025;
        
        /// <summary>
        /// Create PLT entry.
        /// </summary>
        public const uint R_AARCH64_JUMP_SLOT = 1026;
        
        /// <summary>
        /// Adjust by program base.
        /// </summary>
        public const uint R_AARCH64_RELATIVE = 1027;
        
        /// <summary>
        /// Module number, 64 bit.
        /// </summary>
        public const uint R_AARCH64_TLS_DTPMOD = 1028;
        
        /// <summary>
        /// Module-relative offset, 64 bit.
        /// </summary>
        public const uint R_AARCH64_TLS_DTPREL = 1029;
        
        /// <summary>
        /// TP-relative offset, 64 bit.
        /// </summary>
        public const uint R_AARCH64_TLS_TPREL = 1030;
        
        /// <summary>
        /// TLS Descriptor.
        /// </summary>
        public const uint R_AARCH64_TLSDESC = 1031;
        
        /// <summary>
        /// STT_GNU_IFUNC relocation.
        /// </summary>
        public const uint R_AARCH64_IRELATIVE = 1032;
        
        /// <summary>
        /// No reloc
        /// </summary>
        public const uint R_ARM_NONE = 0;
        
        /// <summary>
        /// Deprecated PC relative 26 bit branch.
        /// </summary>
        public const uint R_ARM_PC24 = 1;
        
        /// <summary>
        /// Direct 32 bit
        /// </summary>
        public const uint R_ARM_ABS32 = 2;
        
        /// <summary>
        /// PC relative 32 bit
        /// </summary>
        public const uint R_ARM_REL32 = 3;
        
        public const uint R_ARM_PC13 = 4;
        
        /// <summary>
        /// Direct 16 bit
        /// </summary>
        public const uint R_ARM_ABS16 = 5;
        
        /// <summary>
        /// Direct 12 bit
        /// </summary>
        public const uint R_ARM_ABS12 = 6;
        
        /// <summary>
        /// Direct 
        /// &amp;
        /// 0x7C (LDR, STR).
        /// </summary>
        public const uint R_ARM_THM_ABS5 = 7;
        
        /// <summary>
        /// Direct 8 bit
        /// </summary>
        public const uint R_ARM_ABS8 = 8;
        
        public const uint R_ARM_SBREL32 = 9;
        
        /// <summary>
        /// PC relative 24 bit (Thumb32 BL).
        /// </summary>
        public const uint R_ARM_THM_PC22 = 10;
        
        /// <summary>
        /// PC relative 
        /// &amp;
        /// 0x3FC (Thumb16 LDR, ADD, ADR).
        /// </summary>
        public const uint R_ARM_THM_PC8 = 11;
        
        public const uint R_ARM_AMP_VCALL9 = 12;
        
        /// <summary>
        /// Obsolete static relocation.
        /// </summary>
        public const uint R_ARM_SWI24 = 13;
        
        /// <summary>
        /// Dynamic relocation.
        /// </summary>
        public const uint R_ARM_TLS_DESC = 13;
        
        /// <summary>
        /// Reserved.
        /// </summary>
        public const uint R_ARM_THM_SWI8 = 14;
        
        /// <summary>
        /// Reserved.
        /// </summary>
        public const uint R_ARM_XPC25 = 15;
        
        /// <summary>
        /// Reserved.
        /// </summary>
        public const uint R_ARM_THM_XPC22 = 16;
        
        /// <summary>
        /// ID of module containing symbol
        /// </summary>
        public const uint R_ARM_TLS_DTPMOD32 = 17;
        
        /// <summary>
        /// Offset in TLS block
        /// </summary>
        public const uint R_ARM_TLS_DTPOFF32 = 18;
        
        /// <summary>
        /// Offset in static TLS block
        /// </summary>
        public const uint R_ARM_TLS_TPOFF32 = 19;
        
        /// <summary>
        /// Copy symbol at runtime
        /// </summary>
        public const uint R_ARM_COPY = 20;
        
        /// <summary>
        /// Create GOT entry
        /// </summary>
        public const uint R_ARM_GLOB_DAT = 21;
        
        /// <summary>
        /// Create PLT entry
        /// </summary>
        public const uint R_ARM_JUMP_SLOT = 22;
        
        /// <summary>
        /// Adjust by program base
        /// </summary>
        public const uint R_ARM_RELATIVE = 23;
        
        /// <summary>
        /// 32 bit offset to GOT
        /// </summary>
        public const uint R_ARM_GOTOFF = 24;
        
        /// <summary>
        /// 32 bit PC relative offset to GOT
        /// </summary>
        public const uint R_ARM_GOTPC = 25;
        
        /// <summary>
        /// 32 bit GOT entry
        /// </summary>
        public const uint R_ARM_GOT32 = 26;
        
        /// <summary>
        /// Deprecated, 32 bit PLT address.
        /// </summary>
        public const uint R_ARM_PLT32 = 27;
        
        /// <summary>
        /// PC relative 24 bit (BL, BLX).
        /// </summary>
        public const uint R_ARM_CALL = 28;
        
        /// <summary>
        /// PC relative 24 bit (B, BL
        /// &lt;cond
        /// &gt;).
        /// </summary>
        public const uint R_ARM_JUMP24 = 29;
        
        /// <summary>
        /// PC relative 24 bit (Thumb32 B.W).
        /// </summary>
        public const uint R_ARM_THM_JUMP24 = 30;
        
        /// <summary>
        /// Adjust by program base.
        /// </summary>
        public const uint R_ARM_BASE_ABS = 31;
        
        /// <summary>
        /// Obsolete.
        /// </summary>
        public const uint R_ARM_ALU_PCREL_7_0 = 32;
        
        /// <summary>
        /// Obsolete.
        /// </summary>
        public const uint R_ARM_ALU_PCREL_15_8 = 33;
        
        /// <summary>
        /// Obsolete.
        /// </summary>
        public const uint R_ARM_ALU_PCREL_23_15 = 34;
        
        /// <summary>
        /// Deprecated, prog. base relative.
        /// </summary>
        public const uint R_ARM_LDR_SBREL_11_0 = 35;
        
        /// <summary>
        /// Deprecated, prog. base relative.
        /// </summary>
        public const uint R_ARM_ALU_SBREL_19_12 = 36;
        
        /// <summary>
        /// Deprecated, prog. base relative.
        /// </summary>
        public const uint R_ARM_ALU_SBREL_27_20 = 37;
        
        public const uint R_ARM_TARGET1 = 38;
        
        /// <summary>
        /// Program base relative.
        /// </summary>
        public const uint R_ARM_SBREL31 = 39;
        
        public const uint R_ARM_V4BX = 40;
        
        public const uint R_ARM_TARGET2 = 41;
        
        /// <summary>
        /// 32 bit PC relative.
        /// </summary>
        public const uint R_ARM_PREL31 = 42;
        
        /// <summary>
        /// Direct 16-bit (MOVW).
        /// </summary>
        public const uint R_ARM_MOVW_ABS_NC = 43;
        
        /// <summary>
        /// Direct high 16-bit (MOVT).
        /// </summary>
        public const uint R_ARM_MOVT_ABS = 44;
        
        /// <summary>
        /// PC relative 16-bit (MOVW).
        /// </summary>
        public const uint R_ARM_MOVW_PREL_NC = 45;
        
        /// <summary>
        /// PC relative (MOVT).
        /// </summary>
        public const uint R_ARM_MOVT_PREL = 46;
        
        /// <summary>
        /// Direct 16 bit (Thumb32 MOVW).
        /// </summary>
        public const uint R_ARM_THM_MOVW_ABS_NC = 47;
        
        /// <summary>
        /// Direct high 16 bit (Thumb32 MOVT).
        /// </summary>
        public const uint R_ARM_THM_MOVT_ABS = 48;
        
        /// <summary>
        /// PC relative 16 bit (Thumb32 MOVW).
        /// </summary>
        public const uint R_ARM_THM_MOVW_PREL_NC = 49;
        
        /// <summary>
        /// PC relative high 16 bit (Thumb32 MOVT).
        /// </summary>
        public const uint R_ARM_THM_MOVT_PREL = 50;
        
        /// <summary>
        /// PC relative 20 bit (Thumb32 B
        /// &lt;cond
        /// &gt;.W).
        /// </summary>
        public const uint R_ARM_THM_JUMP19 = 51;
        
        /// <summary>
        /// PC relative X 
        /// &amp;
        /// 0x7E (Thumb16 CBZ, CBNZ).
        /// </summary>
        public const uint R_ARM_THM_JUMP6 = 52;
        
        /// <summary>
        /// PC relative 12 bit (Thumb32 ADR.W).
        /// </summary>
        public const uint R_ARM_THM_ALU_PREL_11_0 = 53;
        
        /// <summary>
        /// PC relative 12 bit (Thumb32 LDR{D,SB,H,SH}).
        /// </summary>
        public const uint R_ARM_THM_PC12 = 54;
        
        /// <summary>
        /// Direct 32-bit.
        /// </summary>
        public const uint R_ARM_ABS32_NOI = 55;
        
        /// <summary>
        /// PC relative 32-bit.
        /// </summary>
        public const uint R_ARM_REL32_NOI = 56;
        
        /// <summary>
        /// PC relative (ADD, SUB).
        /// </summary>
        public const uint R_ARM_ALU_PC_G0_NC = 57;
        
        /// <summary>
        /// PC relative (ADD, SUB).
        /// </summary>
        public const uint R_ARM_ALU_PC_G0 = 58;
        
        /// <summary>
        /// PC relative (ADD, SUB).
        /// </summary>
        public const uint R_ARM_ALU_PC_G1_NC = 59;
        
        /// <summary>
        /// PC relative (ADD, SUB).
        /// </summary>
        public const uint R_ARM_ALU_PC_G1 = 60;
        
        /// <summary>
        /// PC relative (ADD, SUB).
        /// </summary>
        public const uint R_ARM_ALU_PC_G2 = 61;
        
        /// <summary>
        /// PC relative (LDR,STR,LDRB,STRB).
        /// </summary>
        public const uint R_ARM_LDR_PC_G1 = 62;
        
        /// <summary>
        /// PC relative (LDR,STR,LDRB,STRB).
        /// </summary>
        public const uint R_ARM_LDR_PC_G2 = 63;
        
        /// <summary>
        /// PC relative (STR{D,H}, LDR{D,SB,H,SH}).
        /// </summary>
        public const uint R_ARM_LDRS_PC_G0 = 64;
        
        /// <summary>
        /// PC relative (STR{D,H}, LDR{D,SB,H,SH}).
        /// </summary>
        public const uint R_ARM_LDRS_PC_G1 = 65;
        
        /// <summary>
        /// PC relative (STR{D,H}, LDR{D,SB,H,SH}).
        /// </summary>
        public const uint R_ARM_LDRS_PC_G2 = 66;
        
        /// <summary>
        /// PC relative (LDC, STC).
        /// </summary>
        public const uint R_ARM_LDC_PC_G0 = 67;
        
        /// <summary>
        /// PC relative (LDC, STC).
        /// </summary>
        public const uint R_ARM_LDC_PC_G1 = 68;
        
        /// <summary>
        /// PC relative (LDC, STC).
        /// </summary>
        public const uint R_ARM_LDC_PC_G2 = 69;
        
        /// <summary>
        /// Program base relative (ADD,SUB).
        /// </summary>
        public const uint R_ARM_ALU_SB_G0_NC = 70;
        
        /// <summary>
        /// Program base relative (ADD,SUB).
        /// </summary>
        public const uint R_ARM_ALU_SB_G0 = 71;
        
        /// <summary>
        /// Program base relative (ADD,SUB).
        /// </summary>
        public const uint R_ARM_ALU_SB_G1_NC = 72;
        
        /// <summary>
        /// Program base relative (ADD,SUB).
        /// </summary>
        public const uint R_ARM_ALU_SB_G1 = 73;
        
        /// <summary>
        /// Program base relative (ADD,SUB).
        /// </summary>
        public const uint R_ARM_ALU_SB_G2 = 74;
        
        /// <summary>
        /// Program base relative (LDR, STR, LDRB, STRB).
        /// </summary>
        public const uint R_ARM_LDR_SB_G0 = 75;
        
        /// <summary>
        /// Program base relative (LDR, STR, LDRB, STRB).
        /// </summary>
        public const uint R_ARM_LDR_SB_G1 = 76;
        
        /// <summary>
        /// Program base relative (LDR, STR, LDRB, STRB).
        /// </summary>
        public const uint R_ARM_LDR_SB_G2 = 77;
        
        /// <summary>
        /// Program base relative (LDR, STR, LDRB, STRB).
        /// </summary>
        public const uint R_ARM_LDRS_SB_G0 = 78;
        
        /// <summary>
        /// Program base relative (LDR, STR, LDRB, STRB).
        /// </summary>
        public const uint R_ARM_LDRS_SB_G1 = 79;
        
        /// <summary>
        /// Program base relative (LDR, STR, LDRB, STRB).
        /// </summary>
        public const uint R_ARM_LDRS_SB_G2 = 80;
        
        /// <summary>
        /// Program base relative (LDC,STC).
        /// </summary>
        public const uint R_ARM_LDC_SB_G0 = 81;
        
        /// <summary>
        /// Program base relative (LDC,STC).
        /// </summary>
        public const uint R_ARM_LDC_SB_G1 = 82;
        
        /// <summary>
        /// Program base relative (LDC,STC).
        /// </summary>
        public const uint R_ARM_LDC_SB_G2 = 83;
        
        /// <summary>
        /// Program base relative 16 bit (MOVW).
        /// </summary>
        public const uint R_ARM_MOVW_BREL_NC = 84;
        
        /// <summary>
        /// Program base relative high 16 bit (MOVT).
        /// </summary>
        public const uint R_ARM_MOVT_BREL = 85;
        
        /// <summary>
        /// Program base relative 16 bit (MOVW).
        /// </summary>
        public const uint R_ARM_MOVW_BREL = 86;
        
        /// <summary>
        /// Program base relative 16 bit (Thumb32 MOVW).
        /// </summary>
        public const uint R_ARM_THM_MOVW_BREL_NC = 87;
        
        /// <summary>
        /// Program base relative high 16 bit (Thumb32 MOVT).
        /// </summary>
        public const uint R_ARM_THM_MOVT_BREL = 88;
        
        /// <summary>
        /// Program base relative 16 bit (Thumb32 MOVW).
        /// </summary>
        public const uint R_ARM_THM_MOVW_BREL = 89;
        
        public const uint R_ARM_TLS_GOTDESC = 90;
        
        public const uint R_ARM_TLS_CALL = 91;
        
        /// <summary>
        /// TLS relaxation.
        /// </summary>
        public const uint R_ARM_TLS_DESCSEQ = 92;
        
        public const uint R_ARM_THM_TLS_CALL = 93;
        
        public const uint R_ARM_PLT32_ABS = 94;
        
        /// <summary>
        /// GOT entry.
        /// </summary>
        public const uint R_ARM_GOT_ABS = 95;
        
        /// <summary>
        /// PC relative GOT entry.
        /// </summary>
        public const uint R_ARM_GOT_PREL = 96;
        
        /// <summary>
        /// GOT entry relative to GOT origin (LDR).
        /// </summary>
        public const uint R_ARM_GOT_BREL12 = 97;
        
        /// <summary>
        /// 12 bit, GOT entry relative to GOT origin (LDR, STR).
        /// </summary>
        public const uint R_ARM_GOTOFF12 = 98;
        
        public const uint R_ARM_GOTRELAX = 99;
        
        public const uint R_ARM_GNU_VTENTRY = 100;
        
        public const uint R_ARM_GNU_VTINHERIT = 101;
        
        /// <summary>
        /// PC relative 
        /// &amp;
        /// 0xFFE (Thumb16 B).
        /// </summary>
        public const uint R_ARM_THM_PC11 = 102;
        
        /// <summary>
        /// PC relative 
        /// &amp;
        /// 0x1FE (Thumb16 B/B
        /// &lt;cond
        /// &gt;).
        /// </summary>
        public const uint R_ARM_THM_PC9 = 103;
        
        /// <summary>
        /// PC-rel 32 bit for global dynamic thread local data
        /// </summary>
        public const uint R_ARM_TLS_GD32 = 104;
        
        /// <summary>
        /// PC-rel 32 bit for local dynamic thread local data
        /// </summary>
        public const uint R_ARM_TLS_LDM32 = 105;
        
        /// <summary>
        /// 32 bit offset relative to TLS block
        /// </summary>
        public const uint R_ARM_TLS_LDO32 = 106;
        
        /// <summary>
        /// PC-rel 32 bit for GOT entry of static TLS block offset
        /// </summary>
        public const uint R_ARM_TLS_IE32 = 107;
        
        /// <summary>
        /// 32 bit offset relative to static TLS block
        /// </summary>
        public const uint R_ARM_TLS_LE32 = 108;
        
        /// <summary>
        /// 12 bit relative to TLS block (LDR, STR).
        /// </summary>
        public const uint R_ARM_TLS_LDO12 = 109;
        
        /// <summary>
        /// 12 bit relative to static TLS block (LDR, STR).
        /// </summary>
        public const uint R_ARM_TLS_LE12 = 110;
        
        /// <summary>
        /// 12 bit GOT entry relative to GOT origin (LDR).
        /// </summary>
        public const uint R_ARM_TLS_IE12GP = 111;
        
        /// <summary>
        /// Obsolete.
        /// </summary>
        public const uint R_ARM_ME_TOO = 128;
        
        public const uint R_ARM_THM_TLS_DESCSEQ = 129;
        
        public const uint R_ARM_THM_TLS_DESCSEQ16 = 129;
        
        public const uint R_ARM_THM_TLS_DESCSEQ32 = 130;
        
        /// <summary>
        /// GOT entry relative to GOT origin, 12 bit (Thumb32 LDR).
        /// </summary>
        public const uint R_ARM_THM_GOT_BREL12 = 131;
        
        public const uint R_ARM_IRELATIVE = 160;
        
        public const uint R_ARM_RXPC25 = 249;
        
        public const uint R_ARM_RSBREL32 = 250;
        
        public const uint R_ARM_THM_RPC22 = 251;
        
        public const uint R_ARM_RREL32 = 252;
        
        public const uint R_ARM_RABS22 = 253;
        
        public const uint R_ARM_RPC24 = 254;
        
        public const uint R_ARM_RBASE = 255;
        
        public const uint R_ARM_NUM = 256;
        
        /// <summary>
        /// os-specific flags
        /// </summary>
        public const uint EF_IA_64_MASKOS = 15;
        
        /// <summary>
        /// 64-bit ABI
        /// </summary>
        public const uint EF_IA_64_ABI64 = 16;
        
        /// <summary>
        /// arch. version mask
        /// </summary>
        public const uint EF_IA_64_ARCH = 0xff000000;
        
        /// <summary>
        /// arch extension bits
        /// </summary>
        public const uint PT_IA_64_ARCHEXT = 1879048192;
        
        /// <summary>
        /// ia64 unwind bits
        /// </summary>
        public const uint PT_IA_64_UNWIND = 1879048193;
        
        public const uint PT_IA_64_HP_OPT_ANOT = 1610612754;
        
        public const uint PT_IA_64_HP_HSL_ANOT = 1610612755;
        
        public const uint PT_IA_64_HP_STACK = 1610612756;
        
        /// <summary>
        /// spec insns w/o recovery
        /// </summary>
        public const uint PF_IA_64_NORECOV = 0x80000000;
        
        /// <summary>
        /// extension bits
        /// </summary>
        public const uint SHT_IA_64_EXT = 1879048192;
        
        /// <summary>
        /// unwind bits
        /// </summary>
        public const uint SHT_IA_64_UNWIND = 1879048193;
        
        /// <summary>
        /// section near gp
        /// </summary>
        public const uint SHF_IA_64_SHORT = 268435456;
        
        /// <summary>
        /// spec insns w/o recovery
        /// </summary>
        public const uint SHF_IA_64_NORECOV = 536870912;
        
        public const int DT_IA_64_PLT_RESERVE = (  0);
        
        public const int DT_IA_64_NUM = 1;
        
        /// <summary>
        /// none
        /// </summary>
        public const uint R_IA64_NONE = 0;
        
        /// <summary>
        /// symbol + addend, add imm14
        /// </summary>
        public const uint R_IA64_IMM14 = 33;
        
        /// <summary>
        /// symbol + addend, add imm22
        /// </summary>
        public const uint R_IA64_IMM22 = 34;
        
        /// <summary>
        /// symbol + addend, mov imm64
        /// </summary>
        public const uint R_IA64_IMM64 = 35;
        
        /// <summary>
        /// symbol + addend, data4 MSB
        /// </summary>
        public const uint R_IA64_DIR32MSB = 36;
        
        /// <summary>
        /// symbol + addend, data4 LSB
        /// </summary>
        public const uint R_IA64_DIR32LSB = 37;
        
        /// <summary>
        /// symbol + addend, data8 MSB
        /// </summary>
        public const uint R_IA64_DIR64MSB = 38;
        
        /// <summary>
        /// symbol + addend, data8 LSB
        /// </summary>
        public const uint R_IA64_DIR64LSB = 39;
        
        /// <summary>
        /// @gprel (sym + add), add imm22
        /// </summary>
        public const uint R_IA64_GPREL22 = 42;
        
        /// <summary>
        /// @gprel (sym + add), mov imm64
        /// </summary>
        public const uint R_IA64_GPREL64I = 43;
        
        /// <summary>
        /// @gprel (sym + add), data4 MSB
        /// </summary>
        public const uint R_IA64_GPREL32MSB = 44;
        
        /// <summary>
        /// @gprel (sym + add), data4 LSB
        /// </summary>
        public const uint R_IA64_GPREL32LSB = 45;
        
        /// <summary>
        /// @gprel (sym + add), data8 MSB
        /// </summary>
        public const uint R_IA64_GPREL64MSB = 46;
        
        /// <summary>
        /// @gprel (sym + add), data8 LSB
        /// </summary>
        public const uint R_IA64_GPREL64LSB = 47;
        
        /// <summary>
        /// @ltoff (sym + add), add imm22
        /// </summary>
        public const uint R_IA64_LTOFF22 = 50;
        
        /// <summary>
        /// @ltoff (sym + add), mov imm64
        /// </summary>
        public const uint R_IA64_LTOFF64I = 51;
        
        /// <summary>
        /// @pltoff (sym + add), add imm22
        /// </summary>
        public const uint R_IA64_PLTOFF22 = 58;
        
        /// <summary>
        /// @pltoff (sym + add), mov imm64
        /// </summary>
        public const uint R_IA64_PLTOFF64I = 59;
        
        /// <summary>
        /// @pltoff (sym + add), data8 MSB
        /// </summary>
        public const uint R_IA64_PLTOFF64MSB = 62;
        
        /// <summary>
        /// @pltoff (sym + add), data8 LSB
        /// </summary>
        public const uint R_IA64_PLTOFF64LSB = 63;
        
        /// <summary>
        /// @fptr (sym + add), mov imm64
        /// </summary>
        public const uint R_IA64_FPTR64I = 67;
        
        /// <summary>
        /// @fptr (sym + add), data4 MSB
        /// </summary>
        public const uint R_IA64_FPTR32MSB = 68;
        
        /// <summary>
        /// @fptr (sym + add), data4 LSB
        /// </summary>
        public const uint R_IA64_FPTR32LSB = 69;
        
        /// <summary>
        /// @fptr (sym + add), data8 MSB
        /// </summary>
        public const uint R_IA64_FPTR64MSB = 70;
        
        /// <summary>
        /// @fptr (sym + add), data8 LSB
        /// </summary>
        public const uint R_IA64_FPTR64LSB = 71;
        
        /// <summary>
        /// @pcrel (sym + add), brl
        /// </summary>
        public const uint R_IA64_PCREL60B = 72;
        
        /// <summary>
        /// @pcrel (sym + add), ptb, call
        /// </summary>
        public const uint R_IA64_PCREL21B = 73;
        
        /// <summary>
        /// @pcrel (sym + add), chk.s
        /// </summary>
        public const uint R_IA64_PCREL21M = 74;
        
        /// <summary>
        /// @pcrel (sym + add), fchkf
        /// </summary>
        public const uint R_IA64_PCREL21F = 75;
        
        /// <summary>
        /// @pcrel (sym + add), data4 MSB
        /// </summary>
        public const uint R_IA64_PCREL32MSB = 76;
        
        /// <summary>
        /// @pcrel (sym + add), data4 LSB
        /// </summary>
        public const uint R_IA64_PCREL32LSB = 77;
        
        /// <summary>
        /// @pcrel (sym + add), data8 MSB
        /// </summary>
        public const uint R_IA64_PCREL64MSB = 78;
        
        /// <summary>
        /// @pcrel (sym + add), data8 LSB
        /// </summary>
        public const uint R_IA64_PCREL64LSB = 79;
        
        /// <summary>
        /// @ltoff (@fptr (s+a)), imm22
        /// </summary>
        public const uint R_IA64_LTOFF_FPTR22 = 82;
        
        /// <summary>
        /// @ltoff (@fptr (s+a)), imm64
        /// </summary>
        public const uint R_IA64_LTOFF_FPTR64I = 83;
        
        /// <summary>
        /// @ltoff (@fptr (s+a)), data4 MSB
        /// </summary>
        public const uint R_IA64_LTOFF_FPTR32MSB = 84;
        
        /// <summary>
        /// @ltoff (@fptr (s+a)), data4 LSB
        /// </summary>
        public const uint R_IA64_LTOFF_FPTR32LSB = 85;
        
        /// <summary>
        /// @ltoff (@fptr (s+a)), data8 MSB
        /// </summary>
        public const uint R_IA64_LTOFF_FPTR64MSB = 86;
        
        /// <summary>
        /// @ltoff (@fptr (s+a)), data8 LSB
        /// </summary>
        public const uint R_IA64_LTOFF_FPTR64LSB = 87;
        
        /// <summary>
        /// @segrel (sym + add), data4 MSB
        /// </summary>
        public const uint R_IA64_SEGREL32MSB = 92;
        
        /// <summary>
        /// @segrel (sym + add), data4 LSB
        /// </summary>
        public const uint R_IA64_SEGREL32LSB = 93;
        
        /// <summary>
        /// @segrel (sym + add), data8 MSB
        /// </summary>
        public const uint R_IA64_SEGREL64MSB = 94;
        
        /// <summary>
        /// @segrel (sym + add), data8 LSB
        /// </summary>
        public const uint R_IA64_SEGREL64LSB = 95;
        
        /// <summary>
        /// @secrel (sym + add), data4 MSB
        /// </summary>
        public const uint R_IA64_SECREL32MSB = 100;
        
        /// <summary>
        /// @secrel (sym + add), data4 LSB
        /// </summary>
        public const uint R_IA64_SECREL32LSB = 101;
        
        /// <summary>
        /// @secrel (sym + add), data8 MSB
        /// </summary>
        public const uint R_IA64_SECREL64MSB = 102;
        
        /// <summary>
        /// @secrel (sym + add), data8 LSB
        /// </summary>
        public const uint R_IA64_SECREL64LSB = 103;
        
        /// <summary>
        /// data 4 + REL
        /// </summary>
        public const uint R_IA64_REL32MSB = 108;
        
        /// <summary>
        /// data 4 + REL
        /// </summary>
        public const uint R_IA64_REL32LSB = 109;
        
        /// <summary>
        /// data 8 + REL
        /// </summary>
        public const uint R_IA64_REL64MSB = 110;
        
        /// <summary>
        /// data 8 + REL
        /// </summary>
        public const uint R_IA64_REL64LSB = 111;
        
        /// <summary>
        /// symbol + addend, data4 MSB
        /// </summary>
        public const uint R_IA64_LTV32MSB = 116;
        
        /// <summary>
        /// symbol + addend, data4 LSB
        /// </summary>
        public const uint R_IA64_LTV32LSB = 117;
        
        /// <summary>
        /// symbol + addend, data8 MSB
        /// </summary>
        public const uint R_IA64_LTV64MSB = 118;
        
        /// <summary>
        /// symbol + addend, data8 LSB
        /// </summary>
        public const uint R_IA64_LTV64LSB = 119;
        
        /// <summary>
        /// @pcrel (sym + add), 21bit inst
        /// </summary>
        public const uint R_IA64_PCREL21BI = 121;
        
        /// <summary>
        /// @pcrel (sym + add), 22bit inst
        /// </summary>
        public const uint R_IA64_PCREL22 = 122;
        
        /// <summary>
        /// @pcrel (sym + add), 64bit inst
        /// </summary>
        public const uint R_IA64_PCREL64I = 123;
        
        /// <summary>
        /// dynamic reloc, imported PLT, MSB
        /// </summary>
        public const uint R_IA64_IPLTMSB = 128;
        
        /// <summary>
        /// dynamic reloc, imported PLT, LSB
        /// </summary>
        public const uint R_IA64_IPLTLSB = 129;
        
        /// <summary>
        /// copy relocation
        /// </summary>
        public const uint R_IA64_COPY = 132;
        
        /// <summary>
        /// Addend and symbol difference
        /// </summary>
        public const uint R_IA64_SUB = 133;
        
        /// <summary>
        /// LTOFF22, relaxable.
        /// </summary>
        public const uint R_IA64_LTOFF22X = 134;
        
        /// <summary>
        /// Use of LTOFF22X.
        /// </summary>
        public const uint R_IA64_LDXMOV = 135;
        
        /// <summary>
        /// @tprel (sym + add), imm14
        /// </summary>
        public const uint R_IA64_TPREL14 = 145;
        
        /// <summary>
        /// @tprel (sym + add), imm22
        /// </summary>
        public const uint R_IA64_TPREL22 = 146;
        
        /// <summary>
        /// @tprel (sym + add), imm64
        /// </summary>
        public const uint R_IA64_TPREL64I = 147;
        
        /// <summary>
        /// @tprel (sym + add), data8 MSB
        /// </summary>
        public const uint R_IA64_TPREL64MSB = 150;
        
        /// <summary>
        /// @tprel (sym + add), data8 LSB
        /// </summary>
        public const uint R_IA64_TPREL64LSB = 151;
        
        /// <summary>
        /// @ltoff (@tprel (s+a)), imm2
        /// </summary>
        public const uint R_IA64_LTOFF_TPREL22 = 154;
        
        /// <summary>
        /// @dtpmod (sym + add), data8 MSB
        /// </summary>
        public const uint R_IA64_DTPMOD64MSB = 166;
        
        /// <summary>
        /// @dtpmod (sym + add), data8 LSB
        /// </summary>
        public const uint R_IA64_DTPMOD64LSB = 167;
        
        /// <summary>
        /// @ltoff (@dtpmod (sym + add)), imm22
        /// </summary>
        public const uint R_IA64_LTOFF_DTPMOD22 = 170;
        
        /// <summary>
        /// @dtprel (sym + add), imm14
        /// </summary>
        public const uint R_IA64_DTPREL14 = 177;
        
        /// <summary>
        /// @dtprel (sym + add), imm22
        /// </summary>
        public const uint R_IA64_DTPREL22 = 178;
        
        /// <summary>
        /// @dtprel (sym + add), imm64
        /// </summary>
        public const uint R_IA64_DTPREL64I = 179;
        
        /// <summary>
        /// @dtprel (sym + add), data4 MSB
        /// </summary>
        public const uint R_IA64_DTPREL32MSB = 180;
        
        /// <summary>
        /// @dtprel (sym + add), data4 LSB
        /// </summary>
        public const uint R_IA64_DTPREL32LSB = 181;
        
        /// <summary>
        /// @dtprel (sym + add), data8 MSB
        /// </summary>
        public const uint R_IA64_DTPREL64MSB = 182;
        
        /// <summary>
        /// @dtprel (sym + add), data8 LSB
        /// </summary>
        public const uint R_IA64_DTPREL64LSB = 183;
        
        /// <summary>
        /// @ltoff (@dtprel (s+a)), imm22
        /// </summary>
        public const uint R_IA64_LTOFF_DTPREL22 = 186;
        
        public const uint EF_SH_MACH_MASK = 31;
        
        public const uint EF_SH_UNKNOWN = 0;
        
        public const uint EF_SH1 = 1;
        
        public const uint EF_SH2 = 2;
        
        public const uint EF_SH3 = 3;
        
        public const uint EF_SH_DSP = 4;
        
        public const uint EF_SH3_DSP = 5;
        
        public const uint EF_SH4AL_DSP = 6;
        
        public const uint EF_SH3E = 8;
        
        public const uint EF_SH4 = 9;
        
        public const uint EF_SH2E = 11;
        
        public const uint EF_SH4A = 12;
        
        public const uint EF_SH2A = 13;
        
        public const uint EF_SH4_NOFPU = 16;
        
        public const uint EF_SH4A_NOFPU = 17;
        
        public const uint EF_SH4_NOMMU_NOFPU = 18;
        
        public const uint EF_SH2A_NOFPU = 19;
        
        public const uint EF_SH3_NOMMU = 20;
        
        public const uint EF_SH2A_SH4_NOFPU = 21;
        
        public const uint EF_SH2A_SH3_NOFPU = 22;
        
        public const uint EF_SH2A_SH4 = 23;
        
        public const uint EF_SH2A_SH3E = 24;
        
        public const uint R_SH_NONE = 0;
        
        public const uint R_SH_DIR32 = 1;
        
        public const uint R_SH_REL32 = 2;
        
        public const uint R_SH_DIR8WPN = 3;
        
        public const uint R_SH_IND12W = 4;
        
        public const uint R_SH_DIR8WPL = 5;
        
        public const uint R_SH_DIR8WPZ = 6;
        
        public const uint R_SH_DIR8BP = 7;
        
        public const uint R_SH_DIR8W = 8;
        
        public const uint R_SH_DIR8L = 9;
        
        public const uint R_SH_SWITCH16 = 25;
        
        public const uint R_SH_SWITCH32 = 26;
        
        public const uint R_SH_USES = 27;
        
        public const uint R_SH_COUNT = 28;
        
        public const uint R_SH_ALIGN = 29;
        
        public const uint R_SH_CODE = 30;
        
        public const uint R_SH_DATA = 31;
        
        public const uint R_SH_LABEL = 32;
        
        public const uint R_SH_SWITCH8 = 33;
        
        public const uint R_SH_GNU_VTINHERIT = 34;
        
        public const uint R_SH_GNU_VTENTRY = 35;
        
        public const uint R_SH_TLS_GD_32 = 144;
        
        public const uint R_SH_TLS_LD_32 = 145;
        
        public const uint R_SH_TLS_LDO_32 = 146;
        
        public const uint R_SH_TLS_IE_32 = 147;
        
        public const uint R_SH_TLS_LE_32 = 148;
        
        public const uint R_SH_TLS_DTPMOD32 = 149;
        
        public const uint R_SH_TLS_DTPOFF32 = 150;
        
        public const uint R_SH_TLS_TPOFF32 = 151;
        
        public const uint R_SH_GOT32 = 160;
        
        public const uint R_SH_PLT32 = 161;
        
        public const uint R_SH_COPY = 162;
        
        public const uint R_SH_GLOB_DAT = 163;
        
        public const uint R_SH_JMP_SLOT = 164;
        
        public const uint R_SH_RELATIVE = 165;
        
        public const uint R_SH_GOTOFF = 166;
        
        public const uint R_SH_GOTPC = 167;
        
        public const uint R_SH_NUM = 256;
        
        /// <summary>
        /// High GPRs kernel facility needed.
        /// </summary>
        public const uint EF_S390_HIGH_GPRS = 1;
        
        /// <summary>
        /// No reloc.
        /// </summary>
        public const uint R_390_NONE = 0;
        
        /// <summary>
        /// Direct 8 bit.
        /// </summary>
        public const uint R_390_8 = 1;
        
        /// <summary>
        /// Direct 12 bit.
        /// </summary>
        public const uint R_390_12 = 2;
        
        /// <summary>
        /// Direct 16 bit.
        /// </summary>
        public const uint R_390_16 = 3;
        
        /// <summary>
        /// Direct 32 bit.
        /// </summary>
        public const uint R_390_32 = 4;
        
        /// <summary>
        /// PC relative 32 bit.
        /// </summary>
        public const uint R_390_PC32 = 5;
        
        /// <summary>
        /// 12 bit GOT offset.
        /// </summary>
        public const uint R_390_GOT12 = 6;
        
        /// <summary>
        /// 32 bit GOT offset.
        /// </summary>
        public const uint R_390_GOT32 = 7;
        
        /// <summary>
        /// 32 bit PC relative PLT address.
        /// </summary>
        public const uint R_390_PLT32 = 8;
        
        /// <summary>
        /// Copy symbol at runtime.
        /// </summary>
        public const uint R_390_COPY = 9;
        
        /// <summary>
        /// Create GOT entry.
        /// </summary>
        public const uint R_390_GLOB_DAT = 10;
        
        /// <summary>
        /// Create PLT entry.
        /// </summary>
        public const uint R_390_JMP_SLOT = 11;
        
        /// <summary>
        /// Adjust by program base.
        /// </summary>
        public const uint R_390_RELATIVE = 12;
        
        /// <summary>
        /// 32 bit offset to GOT.
        /// </summary>
        public const uint R_390_GOTOFF32 = 13;
        
        /// <summary>
        /// 32 bit PC relative offset to GOT.
        /// </summary>
        public const uint R_390_GOTPC = 14;
        
        /// <summary>
        /// 16 bit GOT offset.
        /// </summary>
        public const uint R_390_GOT16 = 15;
        
        /// <summary>
        /// PC relative 16 bit.
        /// </summary>
        public const uint R_390_PC16 = 16;
        
        /// <summary>
        /// PC relative 16 bit shifted by 1.
        /// </summary>
        public const uint R_390_PC16DBL = 17;
        
        /// <summary>
        /// 16 bit PC rel. PLT shifted by 1.
        /// </summary>
        public const uint R_390_PLT16DBL = 18;
        
        /// <summary>
        /// PC relative 32 bit shifted by 1.
        /// </summary>
        public const uint R_390_PC32DBL = 19;
        
        /// <summary>
        /// 32 bit PC rel. PLT shifted by 1.
        /// </summary>
        public const uint R_390_PLT32DBL = 20;
        
        /// <summary>
        /// 32 bit PC rel. GOT shifted by 1.
        /// </summary>
        public const uint R_390_GOTPCDBL = 21;
        
        /// <summary>
        /// Direct 64 bit.
        /// </summary>
        public const uint R_390_64 = 22;
        
        /// <summary>
        /// PC relative 64 bit.
        /// </summary>
        public const uint R_390_PC64 = 23;
        
        /// <summary>
        /// 64 bit GOT offset.
        /// </summary>
        public const uint R_390_GOT64 = 24;
        
        /// <summary>
        /// 64 bit PC relative PLT address.
        /// </summary>
        public const uint R_390_PLT64 = 25;
        
        /// <summary>
        /// 32 bit PC rel. to GOT entry &gt;&gt; 1.
        /// </summary>
        public const uint R_390_GOTENT = 26;
        
        /// <summary>
        /// 16 bit offset to GOT.
        /// </summary>
        public const uint R_390_GOTOFF16 = 27;
        
        /// <summary>
        /// 64 bit offset to GOT.
        /// </summary>
        public const uint R_390_GOTOFF64 = 28;
        
        /// <summary>
        /// 12 bit offset to jump slot.
        /// </summary>
        public const uint R_390_GOTPLT12 = 29;
        
        /// <summary>
        /// 16 bit offset to jump slot.
        /// </summary>
        public const uint R_390_GOTPLT16 = 30;
        
        /// <summary>
        /// 32 bit offset to jump slot.
        /// </summary>
        public const uint R_390_GOTPLT32 = 31;
        
        /// <summary>
        /// 64 bit offset to jump slot.
        /// </summary>
        public const uint R_390_GOTPLT64 = 32;
        
        /// <summary>
        /// 32 bit rel. offset to jump slot.
        /// </summary>
        public const uint R_390_GOTPLTENT = 33;
        
        /// <summary>
        /// 16 bit offset from GOT to PLT.
        /// </summary>
        public const uint R_390_PLTOFF16 = 34;
        
        /// <summary>
        /// 32 bit offset from GOT to PLT.
        /// </summary>
        public const uint R_390_PLTOFF32 = 35;
        
        /// <summary>
        /// 16 bit offset from GOT to PLT.
        /// </summary>
        public const uint R_390_PLTOFF64 = 36;
        
        /// <summary>
        /// Tag for load insn in TLS code.
        /// </summary>
        public const uint R_390_TLS_LOAD = 37;
        
        /// <summary>
        /// Tag for function call in general dynamic TLS code.
        /// </summary>
        public const uint R_390_TLS_GDCALL = 38;
        
        /// <summary>
        /// Tag for function call in local dynamic TLS code.
        /// </summary>
        public const uint R_390_TLS_LDCALL = 39;
        
        /// <summary>
        /// Direct 32 bit for general dynamic thread local data.
        /// </summary>
        public const uint R_390_TLS_GD32 = 40;
        
        /// <summary>
        /// Direct 64 bit for general dynamic thread local data.
        /// </summary>
        public const uint R_390_TLS_GD64 = 41;
        
        /// <summary>
        /// 12 bit GOT offset for static TLS block offset.
        /// </summary>
        public const uint R_390_TLS_GOTIE12 = 42;
        
        /// <summary>
        /// 32 bit GOT offset for static TLS block offset.
        /// </summary>
        public const uint R_390_TLS_GOTIE32 = 43;
        
        /// <summary>
        /// 64 bit GOT offset for static TLS block offset.
        /// </summary>
        public const uint R_390_TLS_GOTIE64 = 44;
        
        /// <summary>
        /// Direct 32 bit for local dynamic thread local data in LE code.
        /// </summary>
        public const uint R_390_TLS_LDM32 = 45;
        
        /// <summary>
        /// Direct 64 bit for local dynamic thread local data in LE code.
        /// </summary>
        public const uint R_390_TLS_LDM64 = 46;
        
        /// <summary>
        /// 32 bit address of GOT entry for negated static TLS block offset.
        /// </summary>
        public const uint R_390_TLS_IE32 = 47;
        
        /// <summary>
        /// 64 bit address of GOT entry for negated static TLS block offset.
        /// </summary>
        public const uint R_390_TLS_IE64 = 48;
        
        /// <summary>
        /// 32 bit rel. offset to GOT entry for negated static TLS block offset.
        /// </summary>
        public const uint R_390_TLS_IEENT = 49;
        
        /// <summary>
        /// 32 bit negated offset relative to static TLS block.
        /// </summary>
        public const uint R_390_TLS_LE32 = 50;
        
        /// <summary>
        /// 64 bit negated offset relative to static TLS block.
        /// </summary>
        public const uint R_390_TLS_LE64 = 51;
        
        /// <summary>
        /// 32 bit offset relative to TLS block.
        /// </summary>
        public const uint R_390_TLS_LDO32 = 52;
        
        /// <summary>
        /// 64 bit offset relative to TLS block.
        /// </summary>
        public const uint R_390_TLS_LDO64 = 53;
        
        /// <summary>
        /// ID of module containing symbol.
        /// </summary>
        public const uint R_390_TLS_DTPMOD = 54;
        
        /// <summary>
        /// Offset in TLS block.
        /// </summary>
        public const uint R_390_TLS_DTPOFF = 55;
        
        /// <summary>
        /// Negated offset in static TLS block.
        /// </summary>
        public const uint R_390_TLS_TPOFF = 56;
        
        /// <summary>
        /// Direct 20 bit.
        /// </summary>
        public const uint R_390_20 = 57;
        
        /// <summary>
        /// 20 bit GOT offset.
        /// </summary>
        public const uint R_390_GOT20 = 58;
        
        /// <summary>
        /// 20 bit offset to jump slot.
        /// </summary>
        public const uint R_390_GOTPLT20 = 59;
        
        /// <summary>
        /// 20 bit GOT offset for static TLS block offset.
        /// </summary>
        public const uint R_390_TLS_GOTIE20 = 60;
        
        /// <summary>
        /// STT_GNU_IFUNC relocation.
        /// </summary>
        public const uint R_390_IRELATIVE = 61;
        
        public const uint R_390_NUM = 62;
        
        public const uint R_CRIS_NONE = 0;
        
        public const uint R_CRIS_8 = 1;
        
        public const uint R_CRIS_16 = 2;
        
        public const uint R_CRIS_32 = 3;
        
        public const uint R_CRIS_8_PCREL = 4;
        
        public const uint R_CRIS_16_PCREL = 5;
        
        public const uint R_CRIS_32_PCREL = 6;
        
        public const uint R_CRIS_GNU_VTINHERIT = 7;
        
        public const uint R_CRIS_GNU_VTENTRY = 8;
        
        public const uint R_CRIS_COPY = 9;
        
        public const uint R_CRIS_GLOB_DAT = 10;
        
        public const uint R_CRIS_JUMP_SLOT = 11;
        
        public const uint R_CRIS_RELATIVE = 12;
        
        public const uint R_CRIS_16_GOT = 13;
        
        public const uint R_CRIS_32_GOT = 14;
        
        public const uint R_CRIS_16_GOTPLT = 15;
        
        public const uint R_CRIS_32_GOTPLT = 16;
        
        public const uint R_CRIS_32_GOTREL = 17;
        
        public const uint R_CRIS_32_PLT_GOTREL = 18;
        
        public const uint R_CRIS_32_PLT_PCREL = 19;
        
        public const uint R_CRIS_NUM = 20;
        
        /// <summary>
        /// No reloc
        /// </summary>
        public const uint R_X86_64_NONE = 0;
        
        /// <summary>
        /// Direct 64 bit
        /// </summary>
        public const uint R_X86_64_64 = 1;
        
        /// <summary>
        /// PC relative 32 bit signed
        /// </summary>
        public const uint R_X86_64_PC32 = 2;
        
        /// <summary>
        /// 32 bit GOT entry
        /// </summary>
        public const uint R_X86_64_GOT32 = 3;
        
        /// <summary>
        /// 32 bit PLT address
        /// </summary>
        public const uint R_X86_64_PLT32 = 4;
        
        /// <summary>
        /// Copy symbol at runtime
        /// </summary>
        public const uint R_X86_64_COPY = 5;
        
        /// <summary>
        /// Create GOT entry
        /// </summary>
        public const uint R_X86_64_GLOB_DAT = 6;
        
        /// <summary>
        /// Create PLT entry
        /// </summary>
        public const uint R_X86_64_JUMP_SLOT = 7;
        
        /// <summary>
        /// Adjust by program base
        /// </summary>
        public const uint R_X86_64_RELATIVE = 8;
        
        /// <summary>
        /// 32 bit signed PC relative offset to GOT
        /// </summary>
        public const uint R_X86_64_GOTPCREL = 9;
        
        /// <summary>
        /// Direct 32 bit zero extended
        /// </summary>
        public const uint R_X86_64_32 = 10;
        
        /// <summary>
        /// Direct 32 bit sign extended
        /// </summary>
        public const uint R_X86_64_32S = 11;
        
        /// <summary>
        /// Direct 16 bit zero extended
        /// </summary>
        public const uint R_X86_64_16 = 12;
        
        /// <summary>
        /// 16 bit sign extended pc relative
        /// </summary>
        public const uint R_X86_64_PC16 = 13;
        
        /// <summary>
        /// Direct 8 bit sign extended
        /// </summary>
        public const uint R_X86_64_8 = 14;
        
        /// <summary>
        /// 8 bit sign extended pc relative
        /// </summary>
        public const uint R_X86_64_PC8 = 15;
        
        /// <summary>
        /// ID of module containing symbol
        /// </summary>
        public const uint R_X86_64_DTPMOD64 = 16;
        
        /// <summary>
        /// Offset in module's TLS block
        /// </summary>
        public const uint R_X86_64_DTPOFF64 = 17;
        
        /// <summary>
        /// Offset in initial TLS block
        /// </summary>
        public const uint R_X86_64_TPOFF64 = 18;
        
        /// <summary>
        /// 32 bit signed PC relative offset to two GOT entries for GD symbol
        /// </summary>
        public const uint R_X86_64_TLSGD = 19;
        
        /// <summary>
        /// 32 bit signed PC relative offset to two GOT entries for LD symbol
        /// </summary>
        public const uint R_X86_64_TLSLD = 20;
        
        /// <summary>
        /// Offset in TLS block
        /// </summary>
        public const uint R_X86_64_DTPOFF32 = 21;
        
        /// <summary>
        /// 32 bit signed PC relative offset to GOT entry for IE symbol
        /// </summary>
        public const uint R_X86_64_GOTTPOFF = 22;
        
        /// <summary>
        /// Offset in initial TLS block
        /// </summary>
        public const uint R_X86_64_TPOFF32 = 23;
        
        /// <summary>
        /// PC relative 64 bit
        /// </summary>
        public const uint R_X86_64_PC64 = 24;
        
        /// <summary>
        /// 64 bit offset to GOT
        /// </summary>
        public const uint R_X86_64_GOTOFF64 = 25;
        
        /// <summary>
        /// 32 bit signed pc relative offset to GOT
        /// </summary>
        public const uint R_X86_64_GOTPC32 = 26;
        
        /// <summary>
        /// 64-bit GOT entry offset
        /// </summary>
        public const uint R_X86_64_GOT64 = 27;
        
        /// <summary>
        /// 64-bit PC relative offset to GOT entry
        /// </summary>
        public const uint R_X86_64_GOTPCREL64 = 28;
        
        /// <summary>
        /// 64-bit PC relative offset to GOT
        /// </summary>
        public const uint R_X86_64_GOTPC64 = 29;
        
        /// <summary>
        /// like GOT64, says PLT entry needed
        /// </summary>
        public const uint R_X86_64_GOTPLT64 = 30;
        
        /// <summary>
        /// 64-bit GOT relative offset to PLT entry
        /// </summary>
        public const uint R_X86_64_PLTOFF64 = 31;
        
        /// <summary>
        /// Size of symbol plus 32-bit addend
        /// </summary>
        public const uint R_X86_64_SIZE32 = 32;
        
        /// <summary>
        /// Size of symbol plus 64-bit addend
        /// </summary>
        public const uint R_X86_64_SIZE64 = 33;
        
        /// <summary>
        /// GOT offset for TLS descriptor.
        /// </summary>
        public const uint R_X86_64_GOTPC32_TLSDESC = 34;
        
        /// <summary>
        /// Marker for call through TLS descriptor.
        /// </summary>
        public const uint R_X86_64_TLSDESC_CALL = 35;
        
        /// <summary>
        /// TLS descriptor.
        /// </summary>
        public const uint R_X86_64_TLSDESC = 36;
        
        /// <summary>
        /// Adjust indirectly by program base
        /// </summary>
        public const uint R_X86_64_IRELATIVE = 37;
        
        /// <summary>
        /// 64-bit adjust by program base
        /// </summary>
        public const uint R_X86_64_RELATIVE64 = 38;
        
        public const uint R_X86_64_NUM = 39;
        
        /// <summary>
        /// No reloc.
        /// </summary>
        public const uint R_MN10300_NONE = 0;
        
        /// <summary>
        /// Direct 32 bit.
        /// </summary>
        public const uint R_MN10300_32 = 1;
        
        /// <summary>
        /// Direct 16 bit.
        /// </summary>
        public const uint R_MN10300_16 = 2;
        
        /// <summary>
        /// Direct 8 bit.
        /// </summary>
        public const uint R_MN10300_8 = 3;
        
        /// <summary>
        /// PC-relative 32-bit.
        /// </summary>
        public const uint R_MN10300_PCREL32 = 4;
        
        /// <summary>
        /// PC-relative 16-bit signed.
        /// </summary>
        public const uint R_MN10300_PCREL16 = 5;
        
        /// <summary>
        /// PC-relative 8-bit signed.
        /// </summary>
        public const uint R_MN10300_PCREL8 = 6;
        
        /// <summary>
        /// Ancient C++ vtable garbage...
        /// </summary>
        public const uint R_MN10300_GNU_VTINHERIT = 7;
        
        /// <summary>
        /// ... collection annotation.
        /// </summary>
        public const uint R_MN10300_GNU_VTENTRY = 8;
        
        /// <summary>
        /// Direct 24 bit.
        /// </summary>
        public const uint R_MN10300_24 = 9;
        
        /// <summary>
        /// 32-bit PCrel offset to GOT.
        /// </summary>
        public const uint R_MN10300_GOTPC32 = 10;
        
        /// <summary>
        /// 16-bit PCrel offset to GOT.
        /// </summary>
        public const uint R_MN10300_GOTPC16 = 11;
        
        /// <summary>
        /// 32-bit offset from GOT.
        /// </summary>
        public const uint R_MN10300_GOTOFF32 = 12;
        
        /// <summary>
        /// 24-bit offset from GOT.
        /// </summary>
        public const uint R_MN10300_GOTOFF24 = 13;
        
        /// <summary>
        /// 16-bit offset from GOT.
        /// </summary>
        public const uint R_MN10300_GOTOFF16 = 14;
        
        /// <summary>
        /// 32-bit PCrel to PLT entry.
        /// </summary>
        public const uint R_MN10300_PLT32 = 15;
        
        /// <summary>
        /// 16-bit PCrel to PLT entry.
        /// </summary>
        public const uint R_MN10300_PLT16 = 16;
        
        /// <summary>
        /// 32-bit offset to GOT entry.
        /// </summary>
        public const uint R_MN10300_GOT32 = 17;
        
        /// <summary>
        /// 24-bit offset to GOT entry.
        /// </summary>
        public const uint R_MN10300_GOT24 = 18;
        
        /// <summary>
        /// 16-bit offset to GOT entry.
        /// </summary>
        public const uint R_MN10300_GOT16 = 19;
        
        /// <summary>
        /// Copy symbol at runtime.
        /// </summary>
        public const uint R_MN10300_COPY = 20;
        
        /// <summary>
        /// Create GOT entry.
        /// </summary>
        public const uint R_MN10300_GLOB_DAT = 21;
        
        /// <summary>
        /// Create PLT entry.
        /// </summary>
        public const uint R_MN10300_JMP_SLOT = 22;
        
        /// <summary>
        /// Adjust by program base.
        /// </summary>
        public const uint R_MN10300_RELATIVE = 23;
        
        /// <summary>
        /// 32-bit offset for global dynamic.
        /// </summary>
        public const uint R_MN10300_TLS_GD = 24;
        
        /// <summary>
        /// 32-bit offset for local dynamic.
        /// </summary>
        public const uint R_MN10300_TLS_LD = 25;
        
        /// <summary>
        /// Module-relative offset.
        /// </summary>
        public const uint R_MN10300_TLS_LDO = 26;
        
        /// <summary>
        /// GOT offset for static TLS block offset.
        /// </summary>
        public const uint R_MN10300_TLS_GOTIE = 27;
        
        /// <summary>
        /// GOT address for static TLS block offset.
        /// </summary>
        public const uint R_MN10300_TLS_IE = 28;
        
        /// <summary>
        /// Offset relative to static TLS block.
        /// </summary>
        public const uint R_MN10300_TLS_LE = 29;
        
        /// <summary>
        /// ID of module containing symbol.
        /// </summary>
        public const uint R_MN10300_TLS_DTPMOD = 30;
        
        /// <summary>
        /// Offset in module TLS block.
        /// </summary>
        public const uint R_MN10300_TLS_DTPOFF = 31;
        
        /// <summary>
        /// Offset in static TLS block.
        /// </summary>
        public const uint R_MN10300_TLS_TPOFF = 32;
        
        /// <summary>
        /// Adjustment for next reloc as needed by linker relaxation.
        /// </summary>
        public const uint R_MN10300_SYM_DIFF = 33;
        
        /// <summary>
        /// Alignment requirement for linker relaxation.
        /// </summary>
        public const uint R_MN10300_ALIGN = 34;
        
        public const uint R_MN10300_NUM = 35;
        
        /// <summary>
        /// No reloc.
        /// </summary>
        public const uint R_M32R_NONE = 0;
        
        /// <summary>
        /// Direct 16 bit.
        /// </summary>
        public const uint R_M32R_16 = 1;
        
        /// <summary>
        /// Direct 32 bit.
        /// </summary>
        public const uint R_M32R_32 = 2;
        
        /// <summary>
        /// Direct 24 bit.
        /// </summary>
        public const uint R_M32R_24 = 3;
        
        /// <summary>
        /// PC relative 10 bit shifted.
        /// </summary>
        public const uint R_M32R_10_PCREL = 4;
        
        /// <summary>
        /// PC relative 18 bit shifted.
        /// </summary>
        public const uint R_M32R_18_PCREL = 5;
        
        /// <summary>
        /// PC relative 26 bit shifted.
        /// </summary>
        public const uint R_M32R_26_PCREL = 6;
        
        /// <summary>
        /// High 16 bit with unsigned low.
        /// </summary>
        public const uint R_M32R_HI16_ULO = 7;
        
        /// <summary>
        /// High 16 bit with signed low.
        /// </summary>
        public const uint R_M32R_HI16_SLO = 8;
        
        /// <summary>
        /// Low 16 bit.
        /// </summary>
        public const uint R_M32R_LO16 = 9;
        
        /// <summary>
        /// 16 bit offset in SDA.
        /// </summary>
        public const uint R_M32R_SDA16 = 10;
        
        public const uint R_M32R_GNU_VTINHERIT = 11;
        
        public const uint R_M32R_GNU_VTENTRY = 12;
        
        /// <summary>
        /// Direct 16 bit.
        /// </summary>
        public const uint R_M32R_16_RELA = 33;
        
        /// <summary>
        /// Direct 32 bit.
        /// </summary>
        public const uint R_M32R_32_RELA = 34;
        
        /// <summary>
        /// Direct 24 bit.
        /// </summary>
        public const uint R_M32R_24_RELA = 35;
        
        /// <summary>
        /// PC relative 10 bit shifted.
        /// </summary>
        public const uint R_M32R_10_PCREL_RELA = 36;
        
        /// <summary>
        /// PC relative 18 bit shifted.
        /// </summary>
        public const uint R_M32R_18_PCREL_RELA = 37;
        
        /// <summary>
        /// PC relative 26 bit shifted.
        /// </summary>
        public const uint R_M32R_26_PCREL_RELA = 38;
        
        /// <summary>
        /// High 16 bit with unsigned low
        /// </summary>
        public const uint R_M32R_HI16_ULO_RELA = 39;
        
        /// <summary>
        /// High 16 bit with signed low
        /// </summary>
        public const uint R_M32R_HI16_SLO_RELA = 40;
        
        /// <summary>
        /// Low 16 bit
        /// </summary>
        public const uint R_M32R_LO16_RELA = 41;
        
        /// <summary>
        /// 16 bit offset in SDA
        /// </summary>
        public const uint R_M32R_SDA16_RELA = 42;
        
        public const uint R_M32R_RELA_GNU_VTINHERIT = 43;
        
        public const uint R_M32R_RELA_GNU_VTENTRY = 44;
        
        /// <summary>
        /// PC relative 32 bit.
        /// </summary>
        public const uint R_M32R_REL32 = 45;
        
        /// <summary>
        /// 24 bit GOT entry
        /// </summary>
        public const uint R_M32R_GOT24 = 48;
        
        /// <summary>
        /// 26 bit PC relative to PLT shifted
        /// </summary>
        public const uint R_M32R_26_PLTREL = 49;
        
        /// <summary>
        /// Copy symbol at runtime
        /// </summary>
        public const uint R_M32R_COPY = 50;
        
        /// <summary>
        /// Create GOT entry
        /// </summary>
        public const uint R_M32R_GLOB_DAT = 51;
        
        /// <summary>
        /// Create PLT entry
        /// </summary>
        public const uint R_M32R_JMP_SLOT = 52;
        
        /// <summary>
        /// Adjust by program base
        /// </summary>
        public const uint R_M32R_RELATIVE = 53;
        
        /// <summary>
        /// 24 bit offset to GOT
        /// </summary>
        public const uint R_M32R_GOTOFF = 54;
        
        /// <summary>
        /// 24 bit PC relative offset to GOT
        /// </summary>
        public const uint R_M32R_GOTPC24 = 55;
        
        /// <summary>
        /// High 16 bit GOT entry with unsigned low
        /// </summary>
        public const uint R_M32R_GOT16_HI_ULO = 56;
        
        /// <summary>
        /// High 16 bit GOT entry with signed low
        /// </summary>
        public const uint R_M32R_GOT16_HI_SLO = 57;
        
        /// <summary>
        /// Low 16 bit GOT entry
        /// </summary>
        public const uint R_M32R_GOT16_LO = 58;
        
        /// <summary>
        /// High 16 bit PC relative offset to GOT with unsigned low
        /// </summary>
        public const uint R_M32R_GOTPC_HI_ULO = 59;
        
        /// <summary>
        /// High 16 bit PC relative offset to GOT with signed low
        /// </summary>
        public const uint R_M32R_GOTPC_HI_SLO = 60;
        
        /// <summary>
        /// Low 16 bit PC relative offset to GOT
        /// </summary>
        public const uint R_M32R_GOTPC_LO = 61;
        
        /// <summary>
        /// High 16 bit offset to GOT with unsigned low
        /// </summary>
        public const uint R_M32R_GOTOFF_HI_ULO = 62;
        
        /// <summary>
        /// High 16 bit offset to GOT with signed low
        /// </summary>
        public const uint R_M32R_GOTOFF_HI_SLO = 63;
        
        /// <summary>
        /// Low 16 bit offset to GOT
        /// </summary>
        public const uint R_M32R_GOTOFF_LO = 64;
        
        /// <summary>
        /// Keep this the last entry.
        /// </summary>
        public const uint R_M32R_NUM = 256;
        
        /// <summary>
        /// No reloc.
        /// </summary>
        public const uint R_MICROBLAZE_NONE = 0;
        
        /// <summary>
        /// Direct 32 bit.
        /// </summary>
        public const uint R_MICROBLAZE_32 = 1;
        
        /// <summary>
        /// PC relative 32 bit.
        /// </summary>
        public const uint R_MICROBLAZE_32_PCREL = 2;
        
        /// <summary>
        /// PC relative 64 bit.
        /// </summary>
        public const uint R_MICROBLAZE_64_PCREL = 3;
        
        /// <summary>
        /// Low 16 bits of PCREL32.
        /// </summary>
        public const uint R_MICROBLAZE_32_PCREL_LO = 4;
        
        /// <summary>
        /// Direct 64 bit.
        /// </summary>
        public const uint R_MICROBLAZE_64 = 5;
        
        /// <summary>
        /// Low 16 bit.
        /// </summary>
        public const uint R_MICROBLAZE_32_LO = 6;
        
        /// <summary>
        /// Read-only small data area.
        /// </summary>
        public const uint R_MICROBLAZE_SRO32 = 7;
        
        /// <summary>
        /// Read-write small data area.
        /// </summary>
        public const uint R_MICROBLAZE_SRW32 = 8;
        
        /// <summary>
        /// No reloc.
        /// </summary>
        public const uint R_MICROBLAZE_64_NONE = 9;
        
        /// <summary>
        /// Symbol Op Symbol relocation.
        /// </summary>
        public const uint R_MICROBLAZE_32_SYM_OP_SYM = 10;
        
        /// <summary>
        /// GNU C++ vtable hierarchy.
        /// </summary>
        public const uint R_MICROBLAZE_GNU_VTINHERIT = 11;
        
        /// <summary>
        /// GNU C++ vtable member usage.
        /// </summary>
        public const uint R_MICROBLAZE_GNU_VTENTRY = 12;
        
        /// <summary>
        /// PC-relative GOT offset.
        /// </summary>
        public const uint R_MICROBLAZE_GOTPC_64 = 13;
        
        /// <summary>
        /// GOT entry offset.
        /// </summary>
        public const uint R_MICROBLAZE_GOT_64 = 14;
        
        /// <summary>
        /// PLT offset (PC-relative).
        /// </summary>
        public const uint R_MICROBLAZE_PLT_64 = 15;
        
        /// <summary>
        /// Adjust by program base.
        /// </summary>
        public const uint R_MICROBLAZE_REL = 16;
        
        /// <summary>
        /// Create PLT entry.
        /// </summary>
        public const uint R_MICROBLAZE_JUMP_SLOT = 17;
        
        /// <summary>
        /// Create GOT entry.
        /// </summary>
        public const uint R_MICROBLAZE_GLOB_DAT = 18;
        
        /// <summary>
        /// 64 bit offset to GOT.
        /// </summary>
        public const uint R_MICROBLAZE_GOTOFF_64 = 19;
        
        /// <summary>
        /// 32 bit offset to GOT.
        /// </summary>
        public const uint R_MICROBLAZE_GOTOFF_32 = 20;
        
        /// <summary>
        /// Runtime copy.
        /// </summary>
        public const uint R_MICROBLAZE_COPY = 21;
        
        /// <summary>
        /// TLS Reloc.
        /// </summary>
        public const uint R_MICROBLAZE_TLS = 22;
        
        /// <summary>
        /// TLS General Dynamic.
        /// </summary>
        public const uint R_MICROBLAZE_TLSGD = 23;
        
        /// <summary>
        /// TLS Local Dynamic.
        /// </summary>
        public const uint R_MICROBLAZE_TLSLD = 24;
        
        /// <summary>
        /// TLS Module ID.
        /// </summary>
        public const uint R_MICROBLAZE_TLSDTPMOD32 = 25;
        
        /// <summary>
        /// TLS Offset Within TLS Block.
        /// </summary>
        public const uint R_MICROBLAZE_TLSDTPREL32 = 26;
        
        /// <summary>
        /// TLS Offset Within TLS Block.
        /// </summary>
        public const uint R_MICROBLAZE_TLSDTPREL64 = 27;
        
        /// <summary>
        /// TLS Offset From Thread Pointer.
        /// </summary>
        public const uint R_MICROBLAZE_TLSGOTTPREL32 = 28;
        
        /// <summary>
        /// TLS Offset From Thread Pointer.
        /// </summary>
        public const uint R_MICROBLAZE_TLSTPREL32 = 29;
        
        /// <summary>
        /// Address of _gp.
        /// </summary>
        public const int DT_NIOS2_GP = 0x70000002;
        
        /// <summary>
        /// No reloc.
        /// </summary>
        public const uint R_NIOS2_NONE = 0;
        
        /// <summary>
        /// Direct signed 16 bit.
        /// </summary>
        public const uint R_NIOS2_S16 = 1;
        
        /// <summary>
        /// Direct unsigned 16 bit.
        /// </summary>
        public const uint R_NIOS2_U16 = 2;
        
        /// <summary>
        /// PC relative 16 bit.
        /// </summary>
        public const uint R_NIOS2_PCREL16 = 3;
        
        /// <summary>
        /// Direct call.
        /// </summary>
        public const uint R_NIOS2_CALL26 = 4;
        
        /// <summary>
        /// 5 bit constant expression.
        /// </summary>
        public const uint R_NIOS2_IMM5 = 5;
        
        /// <summary>
        /// 5 bit expression, shift 22.
        /// </summary>
        public const uint R_NIOS2_CACHE_OPX = 6;
        
        /// <summary>
        /// 6 bit constant expression.
        /// </summary>
        public const uint R_NIOS2_IMM6 = 7;
        
        /// <summary>
        /// 8 bit constant expression.
        /// </summary>
        public const uint R_NIOS2_IMM8 = 8;
        
        /// <summary>
        /// High 16 bit.
        /// </summary>
        public const uint R_NIOS2_HI16 = 9;
        
        /// <summary>
        /// Low 16 bit.
        /// </summary>
        public const uint R_NIOS2_LO16 = 10;
        
        /// <summary>
        /// High 16 bit, adjusted.
        /// </summary>
        public const uint R_NIOS2_HIADJ16 = 11;
        
        /// <summary>
        /// 32 bit symbol value + addend.
        /// </summary>
        public const uint R_NIOS2_BFD_RELOC_32 = 12;
        
        /// <summary>
        /// 16 bit symbol value + addend.
        /// </summary>
        public const uint R_NIOS2_BFD_RELOC_16 = 13;
        
        /// <summary>
        /// 8 bit symbol value + addend.
        /// </summary>
        public const uint R_NIOS2_BFD_RELOC_8 = 14;
        
        /// <summary>
        /// 16 bit GP pointer offset.
        /// </summary>
        public const uint R_NIOS2_GPREL = 15;
        
        /// <summary>
        /// GNU C++ vtable hierarchy.
        /// </summary>
        public const uint R_NIOS2_GNU_VTINHERIT = 16;
        
        /// <summary>
        /// GNU C++ vtable member usage.
        /// </summary>
        public const uint R_NIOS2_GNU_VTENTRY = 17;
        
        /// <summary>
        /// Unconditional branch.
        /// </summary>
        public const uint R_NIOS2_UJMP = 18;
        
        /// <summary>
        /// Conditional branch.
        /// </summary>
        public const uint R_NIOS2_CJMP = 19;
        
        /// <summary>
        /// Indirect call through register.
        /// </summary>
        public const uint R_NIOS2_CALLR = 20;
        
        /// <summary>
        /// Alignment requirement for linker relaxation.
        /// </summary>
        public const uint R_NIOS2_ALIGN = 21;
        
        /// <summary>
        /// 16 bit GOT entry.
        /// </summary>
        public const uint R_NIOS2_GOT16 = 22;
        
        /// <summary>
        /// 16 bit GOT entry for function.
        /// </summary>
        public const uint R_NIOS2_CALL16 = 23;
        
        /// <summary>
        /// %lo of offset to GOT pointer.
        /// </summary>
        public const uint R_NIOS2_GOTOFF_LO = 24;
        
        /// <summary>
        /// %hiadj of offset to GOT pointer.
        /// </summary>
        public const uint R_NIOS2_GOTOFF_HA = 25;
        
        /// <summary>
        /// %lo of PC relative offset.
        /// </summary>
        public const uint R_NIOS2_PCREL_LO = 26;
        
        /// <summary>
        /// %hiadj of PC relative offset.
        /// </summary>
        public const uint R_NIOS2_PCREL_HA = 27;
        
        /// <summary>
        /// 16 bit GOT offset for TLS GD.
        /// </summary>
        public const uint R_NIOS2_TLS_GD16 = 28;
        
        /// <summary>
        /// 16 bit GOT offset for TLS LDM.
        /// </summary>
        public const uint R_NIOS2_TLS_LDM16 = 29;
        
        /// <summary>
        /// 16 bit module relative offset.
        /// </summary>
        public const uint R_NIOS2_TLS_LDO16 = 30;
        
        /// <summary>
        /// 16 bit GOT offset for TLS IE.
        /// </summary>
        public const uint R_NIOS2_TLS_IE16 = 31;
        
        /// <summary>
        /// 16 bit LE TP-relative offset.
        /// </summary>
        public const uint R_NIOS2_TLS_LE16 = 32;
        
        /// <summary>
        /// Module number.
        /// </summary>
        public const uint R_NIOS2_TLS_DTPMOD = 33;
        
        /// <summary>
        /// Module-relative offset.
        /// </summary>
        public const uint R_NIOS2_TLS_DTPREL = 34;
        
        /// <summary>
        /// TP-relative offset.
        /// </summary>
        public const uint R_NIOS2_TLS_TPREL = 35;
        
        /// <summary>
        /// Copy symbol at runtime.
        /// </summary>
        public const uint R_NIOS2_COPY = 36;
        
        /// <summary>
        /// Create GOT entry.
        /// </summary>
        public const uint R_NIOS2_GLOB_DAT = 37;
        
        /// <summary>
        /// Create PLT entry.
        /// </summary>
        public const uint R_NIOS2_JUMP_SLOT = 38;
        
        /// <summary>
        /// Adjust by program base.
        /// </summary>
        public const uint R_NIOS2_RELATIVE = 39;
        
        /// <summary>
        /// 16 bit offset to GOT pointer.
        /// </summary>
        public const uint R_NIOS2_GOTOFF = 40;
        
        /// <summary>
        /// Direct call in .noat section.
        /// </summary>
        public const uint R_NIOS2_CALL26_NOAT = 41;
        
        /// <summary>
        /// %lo() of GOT entry.
        /// </summary>
        public const uint R_NIOS2_GOT_LO = 42;
        
        /// <summary>
        /// %hiadj() of GOT entry.
        /// </summary>
        public const uint R_NIOS2_GOT_HA = 43;
        
        /// <summary>
        /// %lo() of function GOT entry.
        /// </summary>
        public const uint R_NIOS2_CALL_LO = 44;
        
        /// <summary>
        /// %hiadj() of function GOT entry.
        /// </summary>
        public const uint R_NIOS2_CALL_HA = 45;
        
        /// <summary>
        /// No reloc
        /// </summary>
        public const uint R_TILEPRO_NONE = 0;
        
        /// <summary>
        /// Direct 32 bit
        /// </summary>
        public const uint R_TILEPRO_32 = 1;
        
        /// <summary>
        /// Direct 16 bit
        /// </summary>
        public const uint R_TILEPRO_16 = 2;
        
        /// <summary>
        /// Direct 8 bit
        /// </summary>
        public const uint R_TILEPRO_8 = 3;
        
        /// <summary>
        /// PC relative 32 bit
        /// </summary>
        public const uint R_TILEPRO_32_PCREL = 4;
        
        /// <summary>
        /// PC relative 16 bit
        /// </summary>
        public const uint R_TILEPRO_16_PCREL = 5;
        
        /// <summary>
        /// PC relative 8 bit
        /// </summary>
        public const uint R_TILEPRO_8_PCREL = 6;
        
        /// <summary>
        /// Low 16 bit
        /// </summary>
        public const uint R_TILEPRO_LO16 = 7;
        
        /// <summary>
        /// High 16 bit
        /// </summary>
        public const uint R_TILEPRO_HI16 = 8;
        
        /// <summary>
        /// High 16 bit, adjusted
        /// </summary>
        public const uint R_TILEPRO_HA16 = 9;
        
        /// <summary>
        /// Copy relocation
        /// </summary>
        public const uint R_TILEPRO_COPY = 10;
        
        /// <summary>
        /// Create GOT entry
        /// </summary>
        public const uint R_TILEPRO_GLOB_DAT = 11;
        
        /// <summary>
        /// Create PLT entry
        /// </summary>
        public const uint R_TILEPRO_JMP_SLOT = 12;
        
        /// <summary>
        /// Adjust by program base
        /// </summary>
        public const uint R_TILEPRO_RELATIVE = 13;
        
        /// <summary>
        /// X1 pipe branch offset
        /// </summary>
        public const uint R_TILEPRO_BROFF_X1 = 14;
        
        /// <summary>
        /// X1 pipe jump offset
        /// </summary>
        public const uint R_TILEPRO_JOFFLONG_X1 = 15;
        
        /// <summary>
        /// X1 pipe jump offset to PLT
        /// </summary>
        public const uint R_TILEPRO_JOFFLONG_X1_PLT = 16;
        
        /// <summary>
        /// X0 pipe 8-bit
        /// </summary>
        public const uint R_TILEPRO_IMM8_X0 = 17;
        
        /// <summary>
        /// Y0 pipe 8-bit
        /// </summary>
        public const uint R_TILEPRO_IMM8_Y0 = 18;
        
        /// <summary>
        /// X1 pipe 8-bit
        /// </summary>
        public const uint R_TILEPRO_IMM8_X1 = 19;
        
        /// <summary>
        /// Y1 pipe 8-bit
        /// </summary>
        public const uint R_TILEPRO_IMM8_Y1 = 20;
        
        /// <summary>
        /// X1 pipe mtspr
        /// </summary>
        public const uint R_TILEPRO_MT_IMM15_X1 = 21;
        
        /// <summary>
        /// X1 pipe mfspr
        /// </summary>
        public const uint R_TILEPRO_MF_IMM15_X1 = 22;
        
        /// <summary>
        /// X0 pipe 16-bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0 = 23;
        
        /// <summary>
        /// X1 pipe 16-bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1 = 24;
        
        /// <summary>
        /// X0 pipe low 16-bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_LO = 25;
        
        /// <summary>
        /// X1 pipe low 16-bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_LO = 26;
        
        /// <summary>
        /// X0 pipe high 16-bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_HI = 27;
        
        /// <summary>
        /// X1 pipe high 16-bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_HI = 28;
        
        /// <summary>
        /// X0 pipe high 16-bit, adjusted
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_HA = 29;
        
        /// <summary>
        /// X1 pipe high 16-bit, adjusted
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_HA = 30;
        
        /// <summary>
        /// X0 pipe PC relative 16 bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_PCREL = 31;
        
        /// <summary>
        /// X1 pipe PC relative 16 bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_PCREL = 32;
        
        /// <summary>
        /// X0 pipe PC relative low 16 bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_LO_PCREL = 33;
        
        /// <summary>
        /// X1 pipe PC relative low 16 bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_LO_PCREL = 34;
        
        /// <summary>
        /// X0 pipe PC relative high 16 bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_HI_PCREL = 35;
        
        /// <summary>
        /// X1 pipe PC relative high 16 bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_HI_PCREL = 36;
        
        /// <summary>
        /// X0 pipe PC relative ha() 16 bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_HA_PCREL = 37;
        
        /// <summary>
        /// X1 pipe PC relative ha() 16 bit
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_HA_PCREL = 38;
        
        /// <summary>
        /// X0 pipe 16-bit GOT offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_GOT = 39;
        
        /// <summary>
        /// X1 pipe 16-bit GOT offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_GOT = 40;
        
        /// <summary>
        /// X0 pipe low 16-bit GOT offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_GOT_LO = 41;
        
        /// <summary>
        /// X1 pipe low 16-bit GOT offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_GOT_LO = 42;
        
        /// <summary>
        /// X0 pipe high 16-bit GOT offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_GOT_HI = 43;
        
        /// <summary>
        /// X1 pipe high 16-bit GOT offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_GOT_HI = 44;
        
        /// <summary>
        /// X0 pipe ha() 16-bit GOT offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_GOT_HA = 45;
        
        /// <summary>
        /// X1 pipe ha() 16-bit GOT offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_GOT_HA = 46;
        
        /// <summary>
        /// X0 pipe mm "start"
        /// </summary>
        public const uint R_TILEPRO_MMSTART_X0 = 47;
        
        /// <summary>
        /// X0 pipe mm "end"
        /// </summary>
        public const uint R_TILEPRO_MMEND_X0 = 48;
        
        /// <summary>
        /// X1 pipe mm "start"
        /// </summary>
        public const uint R_TILEPRO_MMSTART_X1 = 49;
        
        /// <summary>
        /// X1 pipe mm "end"
        /// </summary>
        public const uint R_TILEPRO_MMEND_X1 = 50;
        
        /// <summary>
        /// X0 pipe shift amount
        /// </summary>
        public const uint R_TILEPRO_SHAMT_X0 = 51;
        
        /// <summary>
        /// X1 pipe shift amount
        /// </summary>
        public const uint R_TILEPRO_SHAMT_X1 = 52;
        
        /// <summary>
        /// Y0 pipe shift amount
        /// </summary>
        public const uint R_TILEPRO_SHAMT_Y0 = 53;
        
        /// <summary>
        /// Y1 pipe shift amount
        /// </summary>
        public const uint R_TILEPRO_SHAMT_Y1 = 54;
        
        /// <summary>
        /// X1 pipe destination 8-bit
        /// </summary>
        public const uint R_TILEPRO_DEST_IMM8_X1 = 55;
        
        /// <summary>
        /// "jal" for TLS GD
        /// </summary>
        public const uint R_TILEPRO_TLS_GD_CALL = 60;
        
        /// <summary>
        /// X0 pipe "addi" for TLS GD
        /// </summary>
        public const uint R_TILEPRO_IMM8_X0_TLS_GD_ADD = 61;
        
        /// <summary>
        /// X1 pipe "addi" for TLS GD
        /// </summary>
        public const uint R_TILEPRO_IMM8_X1_TLS_GD_ADD = 62;
        
        /// <summary>
        /// Y0 pipe "addi" for TLS GD
        /// </summary>
        public const uint R_TILEPRO_IMM8_Y0_TLS_GD_ADD = 63;
        
        /// <summary>
        /// Y1 pipe "addi" for TLS GD
        /// </summary>
        public const uint R_TILEPRO_IMM8_Y1_TLS_GD_ADD = 64;
        
        /// <summary>
        /// "lw_tls" for TLS IE
        /// </summary>
        public const uint R_TILEPRO_TLS_IE_LOAD = 65;
        
        /// <summary>
        /// X0 pipe 16-bit TLS GD offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_TLS_GD = 66;
        
        /// <summary>
        /// X1 pipe 16-bit TLS GD offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_TLS_GD = 67;
        
        /// <summary>
        /// X0 pipe low 16-bit TLS GD offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_TLS_GD_LO = 68;
        
        /// <summary>
        /// X1 pipe low 16-bit TLS GD offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_TLS_GD_LO = 69;
        
        /// <summary>
        /// X0 pipe high 16-bit TLS GD offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_TLS_GD_HI = 70;
        
        /// <summary>
        /// X1 pipe high 16-bit TLS GD offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_TLS_GD_HI = 71;
        
        /// <summary>
        /// X0 pipe ha() 16-bit TLS GD offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_TLS_GD_HA = 72;
        
        /// <summary>
        /// X1 pipe ha() 16-bit TLS GD offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_TLS_GD_HA = 73;
        
        /// <summary>
        /// X0 pipe 16-bit TLS IE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_TLS_IE = 74;
        
        /// <summary>
        /// X1 pipe 16-bit TLS IE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_TLS_IE = 75;
        
        /// <summary>
        /// X0 pipe low 16-bit TLS IE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_TLS_IE_LO = 76;
        
        /// <summary>
        /// X1 pipe low 16-bit TLS IE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_TLS_IE_LO = 77;
        
        /// <summary>
        /// X0 pipe high 16-bit TLS IE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_TLS_IE_HI = 78;
        
        /// <summary>
        /// X1 pipe high 16-bit TLS IE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_TLS_IE_HI = 79;
        
        /// <summary>
        /// X0 pipe ha() 16-bit TLS IE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_TLS_IE_HA = 80;
        
        /// <summary>
        /// X1 pipe ha() 16-bit TLS IE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_TLS_IE_HA = 81;
        
        /// <summary>
        /// ID of module containing symbol
        /// </summary>
        public const uint R_TILEPRO_TLS_DTPMOD32 = 82;
        
        /// <summary>
        /// Offset in TLS block
        /// </summary>
        public const uint R_TILEPRO_TLS_DTPOFF32 = 83;
        
        /// <summary>
        /// Offset in static TLS block
        /// </summary>
        public const uint R_TILEPRO_TLS_TPOFF32 = 84;
        
        /// <summary>
        /// X0 pipe 16-bit TLS LE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_TLS_LE = 85;
        
        /// <summary>
        /// X1 pipe 16-bit TLS LE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_TLS_LE = 86;
        
        /// <summary>
        /// X0 pipe low 16-bit TLS LE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_TLS_LE_LO = 87;
        
        /// <summary>
        /// X1 pipe low 16-bit TLS LE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_TLS_LE_LO = 88;
        
        /// <summary>
        /// X0 pipe high 16-bit TLS LE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_TLS_LE_HI = 89;
        
        /// <summary>
        /// X1 pipe high 16-bit TLS LE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_TLS_LE_HI = 90;
        
        /// <summary>
        /// X0 pipe ha() 16-bit TLS LE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X0_TLS_LE_HA = 91;
        
        /// <summary>
        /// X1 pipe ha() 16-bit TLS LE offset
        /// </summary>
        public const uint R_TILEPRO_IMM16_X1_TLS_LE_HA = 92;
        
        /// <summary>
        /// GNU C++ vtable hierarchy
        /// </summary>
        public const uint R_TILEPRO_GNU_VTINHERIT = 128;
        
        /// <summary>
        /// GNU C++ vtable member usage
        /// </summary>
        public const uint R_TILEPRO_GNU_VTENTRY = 129;
        
        public const uint R_TILEPRO_NUM = 130;
        
        /// <summary>
        /// No reloc
        /// </summary>
        public const uint R_TILEGX_NONE = 0;
        
        /// <summary>
        /// Direct 64 bit
        /// </summary>
        public const uint R_TILEGX_64 = 1;
        
        /// <summary>
        /// Direct 32 bit
        /// </summary>
        public const uint R_TILEGX_32 = 2;
        
        /// <summary>
        /// Direct 16 bit
        /// </summary>
        public const uint R_TILEGX_16 = 3;
        
        /// <summary>
        /// Direct 8 bit
        /// </summary>
        public const uint R_TILEGX_8 = 4;
        
        /// <summary>
        /// PC relative 64 bit
        /// </summary>
        public const uint R_TILEGX_64_PCREL = 5;
        
        /// <summary>
        /// PC relative 32 bit
        /// </summary>
        public const uint R_TILEGX_32_PCREL = 6;
        
        /// <summary>
        /// PC relative 16 bit
        /// </summary>
        public const uint R_TILEGX_16_PCREL = 7;
        
        /// <summary>
        /// PC relative 8 bit
        /// </summary>
        public const uint R_TILEGX_8_PCREL = 8;
        
        /// <summary>
        /// hword 0 16-bit
        /// </summary>
        public const uint R_TILEGX_HW0 = 9;
        
        /// <summary>
        /// hword 1 16-bit
        /// </summary>
        public const uint R_TILEGX_HW1 = 10;
        
        /// <summary>
        /// hword 2 16-bit
        /// </summary>
        public const uint R_TILEGX_HW2 = 11;
        
        /// <summary>
        /// hword 3 16-bit
        /// </summary>
        public const uint R_TILEGX_HW3 = 12;
        
        /// <summary>
        /// last hword 0 16-bit
        /// </summary>
        public const uint R_TILEGX_HW0_LAST = 13;
        
        /// <summary>
        /// last hword 1 16-bit
        /// </summary>
        public const uint R_TILEGX_HW1_LAST = 14;
        
        /// <summary>
        /// last hword 2 16-bit
        /// </summary>
        public const uint R_TILEGX_HW2_LAST = 15;
        
        /// <summary>
        /// Copy relocation
        /// </summary>
        public const uint R_TILEGX_COPY = 16;
        
        /// <summary>
        /// Create GOT entry
        /// </summary>
        public const uint R_TILEGX_GLOB_DAT = 17;
        
        /// <summary>
        /// Create PLT entry
        /// </summary>
        public const uint R_TILEGX_JMP_SLOT = 18;
        
        /// <summary>
        /// Adjust by program base
        /// </summary>
        public const uint R_TILEGX_RELATIVE = 19;
        
        /// <summary>
        /// X1 pipe branch offset
        /// </summary>
        public const uint R_TILEGX_BROFF_X1 = 20;
        
        /// <summary>
        /// X1 pipe jump offset
        /// </summary>
        public const uint R_TILEGX_JUMPOFF_X1 = 21;
        
        /// <summary>
        /// X1 pipe jump offset to PLT
        /// </summary>
        public const uint R_TILEGX_JUMPOFF_X1_PLT = 22;
        
        /// <summary>
        /// X0 pipe 8-bit
        /// </summary>
        public const uint R_TILEGX_IMM8_X0 = 23;
        
        /// <summary>
        /// Y0 pipe 8-bit
        /// </summary>
        public const uint R_TILEGX_IMM8_Y0 = 24;
        
        /// <summary>
        /// X1 pipe 8-bit
        /// </summary>
        public const uint R_TILEGX_IMM8_X1 = 25;
        
        /// <summary>
        /// Y1 pipe 8-bit
        /// </summary>
        public const uint R_TILEGX_IMM8_Y1 = 26;
        
        /// <summary>
        /// X1 pipe destination 8-bit
        /// </summary>
        public const uint R_TILEGX_DEST_IMM8_X1 = 27;
        
        /// <summary>
        /// X1 pipe mtspr
        /// </summary>
        public const uint R_TILEGX_MT_IMM14_X1 = 28;
        
        /// <summary>
        /// X1 pipe mfspr
        /// </summary>
        public const uint R_TILEGX_MF_IMM14_X1 = 29;
        
        /// <summary>
        /// X0 pipe mm "start"
        /// </summary>
        public const uint R_TILEGX_MMSTART_X0 = 30;
        
        /// <summary>
        /// X0 pipe mm "end"
        /// </summary>
        public const uint R_TILEGX_MMEND_X0 = 31;
        
        /// <summary>
        /// X0 pipe shift amount
        /// </summary>
        public const uint R_TILEGX_SHAMT_X0 = 32;
        
        /// <summary>
        /// X1 pipe shift amount
        /// </summary>
        public const uint R_TILEGX_SHAMT_X1 = 33;
        
        /// <summary>
        /// Y0 pipe shift amount
        /// </summary>
        public const uint R_TILEGX_SHAMT_Y0 = 34;
        
        /// <summary>
        /// Y1 pipe shift amount
        /// </summary>
        public const uint R_TILEGX_SHAMT_Y1 = 35;
        
        /// <summary>
        /// X0 pipe hword 0
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0 = 36;
        
        /// <summary>
        /// X1 pipe hword 0
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0 = 37;
        
        /// <summary>
        /// X0 pipe hword 1
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW1 = 38;
        
        /// <summary>
        /// X1 pipe hword 1
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW1 = 39;
        
        /// <summary>
        /// X0 pipe hword 2
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW2 = 40;
        
        /// <summary>
        /// X1 pipe hword 2
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW2 = 41;
        
        /// <summary>
        /// X0 pipe hword 3
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW3 = 42;
        
        /// <summary>
        /// X1 pipe hword 3
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW3 = 43;
        
        /// <summary>
        /// X0 pipe last hword 0
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_LAST = 44;
        
        /// <summary>
        /// X1 pipe last hword 0
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_LAST = 45;
        
        /// <summary>
        /// X0 pipe last hword 1
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW1_LAST = 46;
        
        /// <summary>
        /// X1 pipe last hword 1
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW1_LAST = 47;
        
        /// <summary>
        /// X0 pipe last hword 2
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW2_LAST = 48;
        
        /// <summary>
        /// X1 pipe last hword 2
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW2_LAST = 49;
        
        /// <summary>
        /// X0 pipe PC relative hword 0
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_PCREL = 50;
        
        /// <summary>
        /// X1 pipe PC relative hword 0
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_PCREL = 51;
        
        /// <summary>
        /// X0 pipe PC relative hword 1
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW1_PCREL = 52;
        
        /// <summary>
        /// X1 pipe PC relative hword 1
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW1_PCREL = 53;
        
        /// <summary>
        /// X0 pipe PC relative hword 2
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW2_PCREL = 54;
        
        /// <summary>
        /// X1 pipe PC relative hword 2
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW2_PCREL = 55;
        
        /// <summary>
        /// X0 pipe PC relative hword 3
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW3_PCREL = 56;
        
        /// <summary>
        /// X1 pipe PC relative hword 3
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW3_PCREL = 57;
        
        /// <summary>
        /// X0 pipe PC-rel last hword 0
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_LAST_PCREL = 58;
        
        /// <summary>
        /// X1 pipe PC-rel last hword 0
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_LAST_PCREL = 59;
        
        /// <summary>
        /// X0 pipe PC-rel last hword 1
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW1_LAST_PCREL = 60;
        
        /// <summary>
        /// X1 pipe PC-rel last hword 1
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW1_LAST_PCREL = 61;
        
        /// <summary>
        /// X0 pipe PC-rel last hword 2
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW2_LAST_PCREL = 62;
        
        /// <summary>
        /// X1 pipe PC-rel last hword 2
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW2_LAST_PCREL = 63;
        
        /// <summary>
        /// X0 pipe hword 0 GOT offset
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_GOT = 64;
        
        /// <summary>
        /// X1 pipe hword 0 GOT offset
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_GOT = 65;
        
        /// <summary>
        /// X0 pipe PC-rel PLT hword 0
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_PLT_PCREL = 66;
        
        /// <summary>
        /// X1 pipe PC-rel PLT hword 0
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_PLT_PCREL = 67;
        
        /// <summary>
        /// X0 pipe PC-rel PLT hword 1
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW1_PLT_PCREL = 68;
        
        /// <summary>
        /// X1 pipe PC-rel PLT hword 1
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW1_PLT_PCREL = 69;
        
        /// <summary>
        /// X0 pipe PC-rel PLT hword 2
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW2_PLT_PCREL = 70;
        
        /// <summary>
        /// X1 pipe PC-rel PLT hword 2
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW2_PLT_PCREL = 71;
        
        /// <summary>
        /// X0 pipe last hword 0 GOT offset
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_LAST_GOT = 72;
        
        /// <summary>
        /// X1 pipe last hword 0 GOT offset
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_LAST_GOT = 73;
        
        /// <summary>
        /// X0 pipe last hword 1 GOT offset
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW1_LAST_GOT = 74;
        
        /// <summary>
        /// X1 pipe last hword 1 GOT offset
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW1_LAST_GOT = 75;
        
        /// <summary>
        /// X0 pipe PC-rel PLT hword 3
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW3_PLT_PCREL = 76;
        
        /// <summary>
        /// X1 pipe PC-rel PLT hword 3
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW3_PLT_PCREL = 77;
        
        /// <summary>
        /// X0 pipe hword 0 TLS GD offset
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_TLS_GD = 78;
        
        /// <summary>
        /// X1 pipe hword 0 TLS GD offset
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_TLS_GD = 79;
        
        /// <summary>
        /// X0 pipe hword 0 TLS LE offset
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_TLS_LE = 80;
        
        /// <summary>
        /// X1 pipe hword 0 TLS LE offset
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_TLS_LE = 81;
        
        /// <summary>
        /// X0 pipe last hword 0 LE off
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE = 82;
        
        /// <summary>
        /// X1 pipe last hword 0 LE off
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE = 83;
        
        /// <summary>
        /// X0 pipe last hword 1 LE off
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE = 84;
        
        /// <summary>
        /// X1 pipe last hword 1 LE off
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE = 85;
        
        /// <summary>
        /// X0 pipe last hword 0 GD off
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD = 86;
        
        /// <summary>
        /// X1 pipe last hword 0 GD off
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD = 87;
        
        /// <summary>
        /// X0 pipe last hword 1 GD off
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD = 88;
        
        /// <summary>
        /// X1 pipe last hword 1 GD off
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD = 89;
        
        /// <summary>
        /// X0 pipe hword 0 TLS IE offset
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_TLS_IE = 92;
        
        /// <summary>
        /// X1 pipe hword 0 TLS IE offset
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_TLS_IE = 93;
        
        /// <summary>
        /// X0 pipe PC-rel PLT last hword 0
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL = 94;
        
        /// <summary>
        /// X1 pipe PC-rel PLT last hword 0
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL = 95;
        
        /// <summary>
        /// X0 pipe PC-rel PLT last hword 1
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL = 96;
        
        /// <summary>
        /// X1 pipe PC-rel PLT last hword 1
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL = 97;
        
        /// <summary>
        /// X0 pipe PC-rel PLT last hword 2
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL = 98;
        
        /// <summary>
        /// X1 pipe PC-rel PLT last hword 2
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL = 99;
        
        /// <summary>
        /// X0 pipe last hword 0 IE off
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE = 100;
        
        /// <summary>
        /// X1 pipe last hword 0 IE off
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE = 101;
        
        /// <summary>
        /// X0 pipe last hword 1 IE off
        /// </summary>
        public const uint R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE = 102;
        
        /// <summary>
        /// X1 pipe last hword 1 IE off
        /// </summary>
        public const uint R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE = 103;
        
        /// <summary>
        /// 64-bit ID of symbol's module
        /// </summary>
        public const uint R_TILEGX_TLS_DTPMOD64 = 106;
        
        /// <summary>
        /// 64-bit offset in TLS block
        /// </summary>
        public const uint R_TILEGX_TLS_DTPOFF64 = 107;
        
        /// <summary>
        /// 64-bit offset in static TLS block
        /// </summary>
        public const uint R_TILEGX_TLS_TPOFF64 = 108;
        
        /// <summary>
        /// 32-bit ID of symbol's module
        /// </summary>
        public const uint R_TILEGX_TLS_DTPMOD32 = 109;
        
        /// <summary>
        /// 32-bit offset in TLS block
        /// </summary>
        public const uint R_TILEGX_TLS_DTPOFF32 = 110;
        
        /// <summary>
        /// 32-bit offset in static TLS block
        /// </summary>
        public const uint R_TILEGX_TLS_TPOFF32 = 111;
        
        /// <summary>
        /// "jal" for TLS GD
        /// </summary>
        public const uint R_TILEGX_TLS_GD_CALL = 112;
        
        /// <summary>
        /// X0 pipe "addi" for TLS GD
        /// </summary>
        public const uint R_TILEGX_IMM8_X0_TLS_GD_ADD = 113;
        
        /// <summary>
        /// X1 pipe "addi" for TLS GD
        /// </summary>
        public const uint R_TILEGX_IMM8_X1_TLS_GD_ADD = 114;
        
        /// <summary>
        /// Y0 pipe "addi" for TLS GD
        /// </summary>
        public const uint R_TILEGX_IMM8_Y0_TLS_GD_ADD = 115;
        
        /// <summary>
        /// Y1 pipe "addi" for TLS GD
        /// </summary>
        public const uint R_TILEGX_IMM8_Y1_TLS_GD_ADD = 116;
        
        /// <summary>
        /// "ld_tls" for TLS IE
        /// </summary>
        public const uint R_TILEGX_TLS_IE_LOAD = 117;
        
        /// <summary>
        /// X0 pipe "addi" for TLS GD/IE
        /// </summary>
        public const uint R_TILEGX_IMM8_X0_TLS_ADD = 118;
        
        /// <summary>
        /// X1 pipe "addi" for TLS GD/IE
        /// </summary>
        public const uint R_TILEGX_IMM8_X1_TLS_ADD = 119;
        
        /// <summary>
        /// Y0 pipe "addi" for TLS GD/IE
        /// </summary>
        public const uint R_TILEGX_IMM8_Y0_TLS_ADD = 120;
        
        /// <summary>
        /// Y1 pipe "addi" for TLS GD/IE
        /// </summary>
        public const uint R_TILEGX_IMM8_Y1_TLS_ADD = 121;
        
        /// <summary>
        /// GNU C++ vtable hierarchy
        /// </summary>
        public const uint R_TILEGX_GNU_VTINHERIT = 128;
        
        /// <summary>
        /// GNU C++ vtable member usage
        /// </summary>
        public const uint R_TILEGX_GNU_VTENTRY = 129;
        
        public const uint R_TILEGX_NUM = 130;
    }
    
    public readonly partial struct ElfArchEx
    {
        /// <summary>
        /// No machine
        /// </summary>
        public static readonly ElfArchEx NONE = new ElfArchEx(ElfNative.EM_NONE);
        
        /// <summary>
        /// AT
        /// &amp;T
        /// WE 32100
        /// </summary>
        public static readonly ElfArchEx M32 = new ElfArchEx(ElfNative.EM_M32);
        
        /// <summary>
        /// SUN SPARC
        /// </summary>
        public static readonly ElfArchEx SPARC = new ElfArchEx(ElfNative.EM_SPARC);
        
        /// <summary>
        /// Intel 80386
        /// </summary>
        public static readonly ElfArchEx I386 = new ElfArchEx(ElfNative.EM_386);
        
        /// <summary>
        /// Motorola m68k family
        /// </summary>
        public static readonly ElfArchEx M68K = new ElfArchEx(ElfNative.EM_68K);
        
        /// <summary>
        /// Motorola m88k family
        /// </summary>
        public static readonly ElfArchEx M88K = new ElfArchEx(ElfNative.EM_88K);
        
        /// <summary>
        /// Intel 80860
        /// </summary>
        public static readonly ElfArchEx I860 = new ElfArchEx(ElfNative.EM_860);
        
        /// <summary>
        /// MIPS R3000 big-endian
        /// </summary>
        public static readonly ElfArchEx MIPS = new ElfArchEx(ElfNative.EM_MIPS);
        
        /// <summary>
        /// IBM System/370
        /// </summary>
        public static readonly ElfArchEx S370 = new ElfArchEx(ElfNative.EM_S370);
        
        /// <summary>
        /// MIPS R3000 little-endian
        /// </summary>
        public static readonly ElfArchEx MIPS_RS3_LE = new ElfArchEx(ElfNative.EM_MIPS_RS3_LE);
        
        /// <summary>
        /// HPPA
        /// </summary>
        public static readonly ElfArchEx PARISC = new ElfArchEx(ElfNative.EM_PARISC);
        
        /// <summary>
        /// Fujitsu VPP500
        /// </summary>
        public static readonly ElfArchEx VPP500 = new ElfArchEx(ElfNative.EM_VPP500);
        
        /// <summary>
        /// Sun's "v8plus"
        /// </summary>
        public static readonly ElfArchEx SPARC32PLUS = new ElfArchEx(ElfNative.EM_SPARC32PLUS);
        
        /// <summary>
        /// Intel 80960
        /// </summary>
        public static readonly ElfArchEx I960 = new ElfArchEx(ElfNative.EM_960);
        
        /// <summary>
        /// PowerPC
        /// </summary>
        public static readonly ElfArchEx PPC = new ElfArchEx(ElfNative.EM_PPC);
        
        /// <summary>
        /// PowerPC 64-bit
        /// </summary>
        public static readonly ElfArchEx PPC64 = new ElfArchEx(ElfNative.EM_PPC64);
        
        /// <summary>
        /// IBM S390
        /// </summary>
        public static readonly ElfArchEx S390 = new ElfArchEx(ElfNative.EM_S390);
        
        /// <summary>
        /// NEC V800 series
        /// </summary>
        public static readonly ElfArchEx V800 = new ElfArchEx(ElfNative.EM_V800);
        
        /// <summary>
        /// Fujitsu FR20
        /// </summary>
        public static readonly ElfArchEx FR20 = new ElfArchEx(ElfNative.EM_FR20);
        
        /// <summary>
        /// TRW RH-32
        /// </summary>
        public static readonly ElfArchEx RH32 = new ElfArchEx(ElfNative.EM_RH32);
        
        /// <summary>
        /// Motorola RCE
        /// </summary>
        public static readonly ElfArchEx RCE = new ElfArchEx(ElfNative.EM_RCE);
        
        /// <summary>
        /// ARM
        /// </summary>
        public static readonly ElfArchEx ARM = new ElfArchEx(ElfNative.EM_ARM);
        
        /// <summary>
        /// Digital Alpha
        /// </summary>
        public static readonly ElfArchEx FAKE_ALPHA = new ElfArchEx(ElfNative.EM_FAKE_ALPHA);
        
        /// <summary>
        /// Hitachi SH
        /// </summary>
        public static readonly ElfArchEx SH = new ElfArchEx(ElfNative.EM_SH);
        
        /// <summary>
        /// SPARC v9 64-bit
        /// </summary>
        public static readonly ElfArchEx SPARCV9 = new ElfArchEx(ElfNative.EM_SPARCV9);
        
        /// <summary>
        /// Siemens Tricore
        /// </summary>
        public static readonly ElfArchEx TRICORE = new ElfArchEx(ElfNative.EM_TRICORE);
        
        /// <summary>
        /// Argonaut RISC Core
        /// </summary>
        public static readonly ElfArchEx ARC = new ElfArchEx(ElfNative.EM_ARC);
        
        /// <summary>
        /// Hitachi H8/300
        /// </summary>
        public static readonly ElfArchEx H8_300 = new ElfArchEx(ElfNative.EM_H8_300);
        
        /// <summary>
        /// Hitachi H8/300H
        /// </summary>
        public static readonly ElfArchEx H8_300H = new ElfArchEx(ElfNative.EM_H8_300H);
        
        /// <summary>
        /// Hitachi H8S
        /// </summary>
        public static readonly ElfArchEx H8S = new ElfArchEx(ElfNative.EM_H8S);
        
        /// <summary>
        /// Hitachi H8/500
        /// </summary>
        public static readonly ElfArchEx H8_500 = new ElfArchEx(ElfNative.EM_H8_500);
        
        /// <summary>
        /// Intel Merced
        /// </summary>
        public static readonly ElfArchEx IA_64 = new ElfArchEx(ElfNative.EM_IA_64);
        
        /// <summary>
        /// Stanford MIPS-X
        /// </summary>
        public static readonly ElfArchEx MIPS_X = new ElfArchEx(ElfNative.EM_MIPS_X);
        
        /// <summary>
        /// Motorola Coldfire
        /// </summary>
        public static readonly ElfArchEx COLDFIRE = new ElfArchEx(ElfNative.EM_COLDFIRE);
        
        /// <summary>
        /// Motorola M68HC12
        /// </summary>
        public static readonly ElfArchEx M68HC12 = new ElfArchEx(ElfNative.EM_68HC12);
        
        /// <summary>
        /// Fujitsu MMA Multimedia Accelerator
        /// </summary>
        public static readonly ElfArchEx MMA = new ElfArchEx(ElfNative.EM_MMA);
        
        /// <summary>
        /// Siemens PCP
        /// </summary>
        public static readonly ElfArchEx PCP = new ElfArchEx(ElfNative.EM_PCP);
        
        /// <summary>
        /// Sony nCPU embeeded RISC
        /// </summary>
        public static readonly ElfArchEx NCPU = new ElfArchEx(ElfNative.EM_NCPU);
        
        /// <summary>
        /// Denso NDR1 microprocessor
        /// </summary>
        public static readonly ElfArchEx NDR1 = new ElfArchEx(ElfNative.EM_NDR1);
        
        /// <summary>
        /// Motorola Start*Core processor
        /// </summary>
        public static readonly ElfArchEx STARCORE = new ElfArchEx(ElfNative.EM_STARCORE);
        
        /// <summary>
        /// Toyota ME16 processor
        /// </summary>
        public static readonly ElfArchEx ME16 = new ElfArchEx(ElfNative.EM_ME16);
        
        /// <summary>
        /// STMicroelectronic ST100 processor
        /// </summary>
        public static readonly ElfArchEx ST100 = new ElfArchEx(ElfNative.EM_ST100);
        
        /// <summary>
        /// Advanced Logic Corp. Tinyj emb.fam
        /// </summary>
        public static readonly ElfArchEx TINYJ = new ElfArchEx(ElfNative.EM_TINYJ);
        
        /// <summary>
        /// AMD x86-64 architecture
        /// </summary>
        public static readonly ElfArchEx X86_64 = new ElfArchEx(ElfNative.EM_X86_64);
        
        /// <summary>
        /// Sony DSP Processor
        /// </summary>
        public static readonly ElfArchEx PDSP = new ElfArchEx(ElfNative.EM_PDSP);
        
        /// <summary>
        /// Siemens FX66 microcontroller
        /// </summary>
        public static readonly ElfArchEx FX66 = new ElfArchEx(ElfNative.EM_FX66);
        
        /// <summary>
        /// STMicroelectronics ST9+ 8/16 mc
        /// </summary>
        public static readonly ElfArchEx ST9PLUS = new ElfArchEx(ElfNative.EM_ST9PLUS);
        
        /// <summary>
        /// STmicroelectronics ST7 8 bit mc
        /// </summary>
        public static readonly ElfArchEx ST7 = new ElfArchEx(ElfNative.EM_ST7);
        
        /// <summary>
        /// Motorola MC68HC16 microcontroller
        /// </summary>
        public static readonly ElfArchEx M68HC16 = new ElfArchEx(ElfNative.EM_68HC16);
        
        /// <summary>
        /// Motorola MC68HC11 microcontroller
        /// </summary>
        public static readonly ElfArchEx M68HC11 = new ElfArchEx(ElfNative.EM_68HC11);
        
        /// <summary>
        /// Motorola MC68HC08 microcontroller
        /// </summary>
        public static readonly ElfArchEx M68HC08 = new ElfArchEx(ElfNative.EM_68HC08);
        
        /// <summary>
        /// Motorola MC68HC05 microcontroller
        /// </summary>
        public static readonly ElfArchEx M68HC05 = new ElfArchEx(ElfNative.EM_68HC05);
        
        /// <summary>
        /// Silicon Graphics SVx
        /// </summary>
        public static readonly ElfArchEx SVX = new ElfArchEx(ElfNative.EM_SVX);
        
        /// <summary>
        /// STMicroelectronics ST19 8 bit mc
        /// </summary>
        public static readonly ElfArchEx ST19 = new ElfArchEx(ElfNative.EM_ST19);
        
        /// <summary>
        /// Digital VAX
        /// </summary>
        public static readonly ElfArchEx VAX = new ElfArchEx(ElfNative.EM_VAX);
        
        /// <summary>
        /// Axis Communications 32-bit embedded processor
        /// </summary>
        public static readonly ElfArchEx CRIS = new ElfArchEx(ElfNative.EM_CRIS);
        
        /// <summary>
        /// Infineon Technologies 32-bit embedded processor
        /// </summary>
        public static readonly ElfArchEx JAVELIN = new ElfArchEx(ElfNative.EM_JAVELIN);
        
        /// <summary>
        /// Element 14 64-bit DSP Processor
        /// </summary>
        public static readonly ElfArchEx FIREPATH = new ElfArchEx(ElfNative.EM_FIREPATH);
        
        /// <summary>
        /// LSI Logic 16-bit DSP Processor
        /// </summary>
        public static readonly ElfArchEx ZSP = new ElfArchEx(ElfNative.EM_ZSP);
        
        /// <summary>
        /// Donald Knuth's educational 64-bit processor
        /// </summary>
        public static readonly ElfArchEx MMIX = new ElfArchEx(ElfNative.EM_MMIX);
        
        /// <summary>
        /// Harvard University machine-independent object files
        /// </summary>
        public static readonly ElfArchEx HUANY = new ElfArchEx(ElfNative.EM_HUANY);
        
        /// <summary>
        /// SiTera Prism
        /// </summary>
        public static readonly ElfArchEx PRISM = new ElfArchEx(ElfNative.EM_PRISM);
        
        /// <summary>
        /// Atmel AVR 8-bit microcontroller
        /// </summary>
        public static readonly ElfArchEx AVR = new ElfArchEx(ElfNative.EM_AVR);
        
        /// <summary>
        /// Fujitsu FR30
        /// </summary>
        public static readonly ElfArchEx FR30 = new ElfArchEx(ElfNative.EM_FR30);
        
        /// <summary>
        /// Mitsubishi D10V
        /// </summary>
        public static readonly ElfArchEx D10V = new ElfArchEx(ElfNative.EM_D10V);
        
        /// <summary>
        /// Mitsubishi D30V
        /// </summary>
        public static readonly ElfArchEx D30V = new ElfArchEx(ElfNative.EM_D30V);
        
        /// <summary>
        /// NEC v850
        /// </summary>
        public static readonly ElfArchEx V850 = new ElfArchEx(ElfNative.EM_V850);
        
        /// <summary>
        /// Mitsubishi M32R
        /// </summary>
        public static readonly ElfArchEx M32R = new ElfArchEx(ElfNative.EM_M32R);
        
        /// <summary>
        /// Matsushita MN10300
        /// </summary>
        public static readonly ElfArchEx MN10300 = new ElfArchEx(ElfNative.EM_MN10300);
        
        /// <summary>
        /// Matsushita MN10200
        /// </summary>
        public static readonly ElfArchEx MN10200 = new ElfArchEx(ElfNative.EM_MN10200);
        
        /// <summary>
        /// picoJava
        /// </summary>
        public static readonly ElfArchEx PJ = new ElfArchEx(ElfNative.EM_PJ);
        
        /// <summary>
        /// OpenRISC 32-bit embedded processor
        /// </summary>
        public static readonly ElfArchEx OPENRISC = new ElfArchEx(ElfNative.EM_OPENRISC);
        
        /// <summary>
        /// ARC Cores Tangent-A5
        /// </summary>
        public static readonly ElfArchEx ARC_A5 = new ElfArchEx(ElfNative.EM_ARC_A5);
        
        /// <summary>
        /// Tensilica Xtensa Architecture
        /// </summary>
        public static readonly ElfArchEx XTENSA = new ElfArchEx(ElfNative.EM_XTENSA);
        
        /// <summary>
        /// Altera Nios II
        /// </summary>
        public static readonly ElfArchEx ALTERA_NIOS2 = new ElfArchEx(ElfNative.EM_ALTERA_NIOS2);
        
        /// <summary>
        /// ARM AARCH64
        /// </summary>
        public static readonly ElfArchEx AARCH64 = new ElfArchEx(ElfNative.EM_AARCH64);
        
        /// <summary>
        /// Tilera TILEPro
        /// </summary>
        public static readonly ElfArchEx TILEPRO = new ElfArchEx(ElfNative.EM_TILEPRO);
        
        /// <summary>
        /// Xilinx MicroBlaze
        /// </summary>
        public static readonly ElfArchEx MICROBLAZE = new ElfArchEx(ElfNative.EM_MICROBLAZE);
        
        /// <summary>
        /// Tilera TILE-Gx
        /// </summary>
        public static readonly ElfArchEx TILEGX = new ElfArchEx(ElfNative.EM_TILEGX);
        
        public static readonly ElfArchEx ALPHA = new ElfArchEx(ElfNative.EM_ALPHA);
        
        private string ToStringInternal()
        {
            switch ((ushort)Value)
            {
                case ElfNative.EM_NONE: return "EM_NONE";
                case ElfNative.EM_M32: return "EM_M32";
                case ElfNative.EM_SPARC: return "EM_SPARC";
                case ElfNative.EM_386: return "EM_386";
                case ElfNative.EM_68K: return "EM_68K";
                case ElfNative.EM_88K: return "EM_88K";
                case ElfNative.EM_860: return "EM_860";
                case ElfNative.EM_MIPS: return "EM_MIPS";
                case ElfNative.EM_S370: return "EM_S370";
                case ElfNative.EM_MIPS_RS3_LE: return "EM_MIPS_RS3_LE";
                case ElfNative.EM_PARISC: return "EM_PARISC";
                case ElfNative.EM_VPP500: return "EM_VPP500";
                case ElfNative.EM_SPARC32PLUS: return "EM_SPARC32PLUS";
                case ElfNative.EM_960: return "EM_960";
                case ElfNative.EM_PPC: return "EM_PPC";
                case ElfNative.EM_PPC64: return "EM_PPC64";
                case ElfNative.EM_S390: return "EM_S390";
                case ElfNative.EM_V800: return "EM_V800";
                case ElfNative.EM_FR20: return "EM_FR20";
                case ElfNative.EM_RH32: return "EM_RH32";
                case ElfNative.EM_RCE: return "EM_RCE";
                case ElfNative.EM_ARM: return "EM_ARM";
                case ElfNative.EM_FAKE_ALPHA: return "EM_FAKE_ALPHA";
                case ElfNative.EM_SH: return "EM_SH";
                case ElfNative.EM_SPARCV9: return "EM_SPARCV9";
                case ElfNative.EM_TRICORE: return "EM_TRICORE";
                case ElfNative.EM_ARC: return "EM_ARC";
                case ElfNative.EM_H8_300: return "EM_H8_300";
                case ElfNative.EM_H8_300H: return "EM_H8_300H";
                case ElfNative.EM_H8S: return "EM_H8S";
                case ElfNative.EM_H8_500: return "EM_H8_500";
                case ElfNative.EM_IA_64: return "EM_IA_64";
                case ElfNative.EM_MIPS_X: return "EM_MIPS_X";
                case ElfNative.EM_COLDFIRE: return "EM_COLDFIRE";
                case ElfNative.EM_68HC12: return "EM_68HC12";
                case ElfNative.EM_MMA: return "EM_MMA";
                case ElfNative.EM_PCP: return "EM_PCP";
                case ElfNative.EM_NCPU: return "EM_NCPU";
                case ElfNative.EM_NDR1: return "EM_NDR1";
                case ElfNative.EM_STARCORE: return "EM_STARCORE";
                case ElfNative.EM_ME16: return "EM_ME16";
                case ElfNative.EM_ST100: return "EM_ST100";
                case ElfNative.EM_TINYJ: return "EM_TINYJ";
                case ElfNative.EM_X86_64: return "EM_X86_64";
                case ElfNative.EM_PDSP: return "EM_PDSP";
                case ElfNative.EM_FX66: return "EM_FX66";
                case ElfNative.EM_ST9PLUS: return "EM_ST9PLUS";
                case ElfNative.EM_ST7: return "EM_ST7";
                case ElfNative.EM_68HC16: return "EM_68HC16";
                case ElfNative.EM_68HC11: return "EM_68HC11";
                case ElfNative.EM_68HC08: return "EM_68HC08";
                case ElfNative.EM_68HC05: return "EM_68HC05";
                case ElfNative.EM_SVX: return "EM_SVX";
                case ElfNative.EM_ST19: return "EM_ST19";
                case ElfNative.EM_VAX: return "EM_VAX";
                case ElfNative.EM_CRIS: return "EM_CRIS";
                case ElfNative.EM_JAVELIN: return "EM_JAVELIN";
                case ElfNative.EM_FIREPATH: return "EM_FIREPATH";
                case ElfNative.EM_ZSP: return "EM_ZSP";
                case ElfNative.EM_MMIX: return "EM_MMIX";
                case ElfNative.EM_HUANY: return "EM_HUANY";
                case ElfNative.EM_PRISM: return "EM_PRISM";
                case ElfNative.EM_AVR: return "EM_AVR";
                case ElfNative.EM_FR30: return "EM_FR30";
                case ElfNative.EM_D10V: return "EM_D10V";
                case ElfNative.EM_D30V: return "EM_D30V";
                case ElfNative.EM_V850: return "EM_V850";
                case ElfNative.EM_M32R: return "EM_M32R";
                case ElfNative.EM_MN10300: return "EM_MN10300";
                case ElfNative.EM_MN10200: return "EM_MN10200";
                case ElfNative.EM_PJ: return "EM_PJ";
                case ElfNative.EM_OPENRISC: return "EM_OPENRISC";
                case ElfNative.EM_ARC_A5: return "EM_ARC_A5";
                case ElfNative.EM_XTENSA: return "EM_XTENSA";
                case ElfNative.EM_ALTERA_NIOS2: return "EM_ALTERA_NIOS2";
                case ElfNative.EM_AARCH64: return "EM_AARCH64";
                case ElfNative.EM_TILEPRO: return "EM_TILEPRO";
                case ElfNative.EM_MICROBLAZE: return "EM_MICROBLAZE";
                case ElfNative.EM_TILEGX: return "EM_TILEGX";
                case ElfNative.EM_ALPHA: return "EM_ALPHA";
                default: return null;
            }
        }
    }
    
    public enum ElfArch : ushort
    {
        NONE = ElfNative.EM_NONE,
        
        M32 = ElfNative.EM_M32,
        
        SPARC = ElfNative.EM_SPARC,
        
        I386 = ElfNative.EM_386,
        
        M68K = ElfNative.EM_68K,
        
        M88K = ElfNative.EM_88K,
        
        I860 = ElfNative.EM_860,
        
        MIPS = ElfNative.EM_MIPS,
        
        S370 = ElfNative.EM_S370,
        
        MIPS_RS3_LE = ElfNative.EM_MIPS_RS3_LE,
        
        PARISC = ElfNative.EM_PARISC,
        
        VPP500 = ElfNative.EM_VPP500,
        
        SPARC32PLUS = ElfNative.EM_SPARC32PLUS,
        
        I960 = ElfNative.EM_960,
        
        PPC = ElfNative.EM_PPC,
        
        PPC64 = ElfNative.EM_PPC64,
        
        S390 = ElfNative.EM_S390,
        
        V800 = ElfNative.EM_V800,
        
        FR20 = ElfNative.EM_FR20,
        
        RH32 = ElfNative.EM_RH32,
        
        RCE = ElfNative.EM_RCE,
        
        ARM = ElfNative.EM_ARM,
        
        FAKE_ALPHA = ElfNative.EM_FAKE_ALPHA,
        
        SH = ElfNative.EM_SH,
        
        SPARCV9 = ElfNative.EM_SPARCV9,
        
        TRICORE = ElfNative.EM_TRICORE,
        
        ARC = ElfNative.EM_ARC,
        
        H8_300 = ElfNative.EM_H8_300,
        
        H8_300H = ElfNative.EM_H8_300H,
        
        H8S = ElfNative.EM_H8S,
        
        H8_500 = ElfNative.EM_H8_500,
        
        IA_64 = ElfNative.EM_IA_64,
        
        MIPS_X = ElfNative.EM_MIPS_X,
        
        COLDFIRE = ElfNative.EM_COLDFIRE,
        
        M68HC12 = ElfNative.EM_68HC12,
        
        MMA = ElfNative.EM_MMA,
        
        PCP = ElfNative.EM_PCP,
        
        NCPU = ElfNative.EM_NCPU,
        
        NDR1 = ElfNative.EM_NDR1,
        
        STARCORE = ElfNative.EM_STARCORE,
        
        ME16 = ElfNative.EM_ME16,
        
        ST100 = ElfNative.EM_ST100,
        
        TINYJ = ElfNative.EM_TINYJ,
        
        X86_64 = ElfNative.EM_X86_64,
        
        PDSP = ElfNative.EM_PDSP,
        
        FX66 = ElfNative.EM_FX66,
        
        ST9PLUS = ElfNative.EM_ST9PLUS,
        
        ST7 = ElfNative.EM_ST7,
        
        M68HC16 = ElfNative.EM_68HC16,
        
        M68HC11 = ElfNative.EM_68HC11,
        
        M68HC08 = ElfNative.EM_68HC08,
        
        M68HC05 = ElfNative.EM_68HC05,
        
        SVX = ElfNative.EM_SVX,
        
        ST19 = ElfNative.EM_ST19,
        
        VAX = ElfNative.EM_VAX,
        
        CRIS = ElfNative.EM_CRIS,
        
        JAVELIN = ElfNative.EM_JAVELIN,
        
        FIREPATH = ElfNative.EM_FIREPATH,
        
        ZSP = ElfNative.EM_ZSP,
        
        MMIX = ElfNative.EM_MMIX,
        
        HUANY = ElfNative.EM_HUANY,
        
        PRISM = ElfNative.EM_PRISM,
        
        AVR = ElfNative.EM_AVR,
        
        FR30 = ElfNative.EM_FR30,
        
        D10V = ElfNative.EM_D10V,
        
        D30V = ElfNative.EM_D30V,
        
        V850 = ElfNative.EM_V850,
        
        M32R = ElfNative.EM_M32R,
        
        MN10300 = ElfNative.EM_MN10300,
        
        MN10200 = ElfNative.EM_MN10200,
        
        PJ = ElfNative.EM_PJ,
        
        OPENRISC = ElfNative.EM_OPENRISC,
        
        ARC_A5 = ElfNative.EM_ARC_A5,
        
        XTENSA = ElfNative.EM_XTENSA,
        
        ALTERA_NIOS2 = ElfNative.EM_ALTERA_NIOS2,
        
        AARCH64 = ElfNative.EM_AARCH64,
        
        TILEPRO = ElfNative.EM_TILEPRO,
        
        MICROBLAZE = ElfNative.EM_MICROBLAZE,
        
        TILEGX = ElfNative.EM_TILEGX,
        
        ALPHA = ElfNative.EM_ALPHA,
    }
    
    public readonly partial struct ElfOSABIEx
    {
        /// <summary>
        /// UNIX System V ABI
        /// </summary>
        public static readonly ElfOSABIEx NONE = new ElfOSABIEx(ElfNative.ELFOSABI_NONE);
        
        /// <summary>
        /// UNIX System V ABI
        /// </summary>
        public static readonly ElfOSABIEx SYSV = new ElfOSABIEx(ElfNative.ELFOSABI_SYSV);
        
        /// <summary>
        /// HP-UX
        /// </summary>
        public static readonly ElfOSABIEx HPUX = new ElfOSABIEx(ElfNative.ELFOSABI_HPUX);
        
        /// <summary>
        /// NetBSD.
        /// </summary>
        public static readonly ElfOSABIEx NETBSD = new ElfOSABIEx(ElfNative.ELFOSABI_NETBSD);
        
        /// <summary>
        /// Object uses GNU ELF extensions.
        /// </summary>
        public static readonly ElfOSABIEx GNU = new ElfOSABIEx(ElfNative.ELFOSABI_GNU);
        
        /// <summary>
        /// Object uses GNU ELF extensions.
        /// </summary>
        public static readonly ElfOSABIEx LINUX = new ElfOSABIEx(ElfNative.ELFOSABI_LINUX);
        
        /// <summary>
        /// Sun Solaris.
        /// </summary>
        public static readonly ElfOSABIEx SOLARIS = new ElfOSABIEx(ElfNative.ELFOSABI_SOLARIS);
        
        /// <summary>
        /// IBM AIX.
        /// </summary>
        public static readonly ElfOSABIEx AIX = new ElfOSABIEx(ElfNative.ELFOSABI_AIX);
        
        /// <summary>
        /// SGI Irix.
        /// </summary>
        public static readonly ElfOSABIEx IRIX = new ElfOSABIEx(ElfNative.ELFOSABI_IRIX);
        
        /// <summary>
        /// FreeBSD.
        /// </summary>
        public static readonly ElfOSABIEx FREEBSD = new ElfOSABIEx(ElfNative.ELFOSABI_FREEBSD);
        
        /// <summary>
        /// Compaq TRU64 UNIX.
        /// </summary>
        public static readonly ElfOSABIEx TRU64 = new ElfOSABIEx(ElfNative.ELFOSABI_TRU64);
        
        /// <summary>
        /// Novell Modesto.
        /// </summary>
        public static readonly ElfOSABIEx MODESTO = new ElfOSABIEx(ElfNative.ELFOSABI_MODESTO);
        
        /// <summary>
        /// OpenBSD.
        /// </summary>
        public static readonly ElfOSABIEx OPENBSD = new ElfOSABIEx(ElfNative.ELFOSABI_OPENBSD);
        
        /// <summary>
        /// ARM EABI
        /// </summary>
        public static readonly ElfOSABIEx ARM_AEABI = new ElfOSABIEx(ElfNative.ELFOSABI_ARM_AEABI);
        
        /// <summary>
        /// ARM
        /// </summary>
        public static readonly ElfOSABIEx ARM = new ElfOSABIEx(ElfNative.ELFOSABI_ARM);
        
        /// <summary>
        /// Standalone (embedded) application
        /// </summary>
        public static readonly ElfOSABIEx STANDALONE = new ElfOSABIEx(ElfNative.ELFOSABI_STANDALONE);
        
        private string ToStringInternal()
        {
            switch ((byte)Value)
            {
                case ElfNative.ELFOSABI_NONE: return "ELFOSABI_NONE";
                case ElfNative.ELFOSABI_HPUX: return "ELFOSABI_HPUX";
                case ElfNative.ELFOSABI_NETBSD: return "ELFOSABI_NETBSD";
                case ElfNative.ELFOSABI_GNU: return "ELFOSABI_GNU";
                case ElfNative.ELFOSABI_SOLARIS: return "ELFOSABI_SOLARIS";
                case ElfNative.ELFOSABI_AIX: return "ELFOSABI_AIX";
                case ElfNative.ELFOSABI_IRIX: return "ELFOSABI_IRIX";
                case ElfNative.ELFOSABI_FREEBSD: return "ELFOSABI_FREEBSD";
                case ElfNative.ELFOSABI_TRU64: return "ELFOSABI_TRU64";
                case ElfNative.ELFOSABI_MODESTO: return "ELFOSABI_MODESTO";
                case ElfNative.ELFOSABI_OPENBSD: return "ELFOSABI_OPENBSD";
                case ElfNative.ELFOSABI_ARM_AEABI: return "ELFOSABI_ARM_AEABI";
                case ElfNative.ELFOSABI_ARM: return "ELFOSABI_ARM";
                case ElfNative.ELFOSABI_STANDALONE: return "ELFOSABI_STANDALONE";
                default: return null;
            }
        }
    }
    
    public enum ElfOSABI : byte
    {
        NONE = ElfNative.ELFOSABI_NONE,
        
        SYSV = ElfNative.ELFOSABI_SYSV,
        
        HPUX = ElfNative.ELFOSABI_HPUX,
        
        NETBSD = ElfNative.ELFOSABI_NETBSD,
        
        GNU = ElfNative.ELFOSABI_GNU,
        
        LINUX = ElfNative.ELFOSABI_LINUX,
        
        SOLARIS = ElfNative.ELFOSABI_SOLARIS,
        
        AIX = ElfNative.ELFOSABI_AIX,
        
        IRIX = ElfNative.ELFOSABI_IRIX,
        
        FREEBSD = ElfNative.ELFOSABI_FREEBSD,
        
        TRU64 = ElfNative.ELFOSABI_TRU64,
        
        MODESTO = ElfNative.ELFOSABI_MODESTO,
        
        OPENBSD = ElfNative.ELFOSABI_OPENBSD,
        
        ARM_AEABI = ElfNative.ELFOSABI_ARM_AEABI,
        
        ARM = ElfNative.ELFOSABI_ARM,
        
        STANDALONE = ElfNative.ELFOSABI_STANDALONE,
    }
    
    public readonly partial struct ElfRelocationType
    {
        /// <summary>
        /// No reloc
        /// </summary>
        public static readonly ElfRelocationType R_386_NONE = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_NONE);
        
        /// <summary>
        /// Direct 32 bit
        /// </summary>
        public static readonly ElfRelocationType R_386_32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_32);
        
        /// <summary>
        /// PC relative 32 bit
        /// </summary>
        public static readonly ElfRelocationType R_386_PC32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_PC32);
        
        /// <summary>
        /// 32 bit GOT entry
        /// </summary>
        public static readonly ElfRelocationType R_386_GOT32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_GOT32);
        
        /// <summary>
        /// 32 bit PLT address
        /// </summary>
        public static readonly ElfRelocationType R_386_PLT32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_PLT32);
        
        /// <summary>
        /// Copy symbol at runtime
        /// </summary>
        public static readonly ElfRelocationType R_386_COPY = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_COPY);
        
        /// <summary>
        /// Create GOT entry
        /// </summary>
        public static readonly ElfRelocationType R_386_GLOB_DAT = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_GLOB_DAT);
        
        /// <summary>
        /// Create PLT entry
        /// </summary>
        public static readonly ElfRelocationType R_386_JMP_SLOT = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_JMP_SLOT);
        
        /// <summary>
        /// Adjust by program base
        /// </summary>
        public static readonly ElfRelocationType R_386_RELATIVE = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_RELATIVE);
        
        /// <summary>
        /// 32 bit offset to GOT
        /// </summary>
        public static readonly ElfRelocationType R_386_GOTOFF = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_GOTOFF);
        
        /// <summary>
        /// 32 bit PC relative offset to GOT
        /// </summary>
        public static readonly ElfRelocationType R_386_GOTPC = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_GOTPC);
        
        public static readonly ElfRelocationType R_386_32PLT = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_32PLT);
        
        /// <summary>
        /// Offset in static TLS block
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_TPOFF = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_TPOFF);
        
        /// <summary>
        /// Address of GOT entry for static TLS block offset
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_IE = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_IE);
        
        /// <summary>
        /// GOT entry for static TLS block offset
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_GOTIE = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_GOTIE);
        
        /// <summary>
        /// Offset relative to static TLS block
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_LE = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_LE);
        
        /// <summary>
        /// Direct 32 bit for GNU version of general dynamic thread local data
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_GD = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_GD);
        
        /// <summary>
        /// Direct 32 bit for GNU version of local dynamic thread local data in LE code
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_LDM = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_LDM);
        
        public static readonly ElfRelocationType R_386_16 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_16);
        
        public static readonly ElfRelocationType R_386_PC16 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_PC16);
        
        public static readonly ElfRelocationType R_386_8 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_8);
        
        public static readonly ElfRelocationType R_386_PC8 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_PC8);
        
        /// <summary>
        /// Direct 32 bit for general dynamic
        /// thread local data
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_GD_32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_GD_32);
        
        /// <summary>
        /// Tag for pushl in GD TLS code
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_GD_PUSH = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_GD_PUSH);
        
        /// <summary>
        /// Relocation for call to
        /// __tls_get_addr()
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_GD_CALL = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_GD_CALL);
        
        /// <summary>
        /// Tag for popl in GD TLS code
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_GD_POP = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_GD_POP);
        
        /// <summary>
        /// Direct 32 bit for local dynamic
        /// thread local data in LE code
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_LDM_32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_LDM_32);
        
        /// <summary>
        /// Tag for pushl in LDM TLS code
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_LDM_PUSH = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_LDM_PUSH);
        
        /// <summary>
        /// Relocation for call to
        /// __tls_get_addr() in LDM code
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_LDM_CALL = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_LDM_CALL);
        
        /// <summary>
        /// Tag for popl in LDM TLS code
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_LDM_POP = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_LDM_POP);
        
        /// <summary>
        /// Offset relative to TLS block
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_LDO_32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_LDO_32);
        
        /// <summary>
        /// GOT entry for negated static TLS
        /// block offset
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_IE_32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_IE_32);
        
        /// <summary>
        /// Negated offset relative to static
        /// TLS block
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_LE_32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_LE_32);
        
        /// <summary>
        /// ID of module containing symbol
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_DTPMOD32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_DTPMOD32);
        
        /// <summary>
        /// Offset in TLS block
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_DTPOFF32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_DTPOFF32);
        
        /// <summary>
        /// Negated offset in static TLS block
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_TPOFF32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_TPOFF32);
        
        /// <summary>
        /// 32-bit symbol size
        /// </summary>
        public static readonly ElfRelocationType R_386_SIZE32 = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_SIZE32);
        
        /// <summary>
        /// GOT offset for TLS descriptor.
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_GOTDESC = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_GOTDESC);
        
        /// <summary>
        /// Marker of call through TLS
        /// descriptor for
        /// relaxation.
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_DESC_CALL = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_DESC_CALL);
        
        /// <summary>
        /// TLS descriptor containing
        /// pointer to code and to
        /// argument, returning the TLS
        /// offset for the symbol.
        /// </summary>
        public static readonly ElfRelocationType R_386_TLS_DESC = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_TLS_DESC);
        
        /// <summary>
        /// Adjust indirectly by program base
        /// </summary>
        public static readonly ElfRelocationType R_386_IRELATIVE = new ElfRelocationType(ElfArch.I386, ElfNative.R_386_IRELATIVE);
        
        /// <summary>
        /// No relocation.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_NONE = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_NONE);
        
        /// <summary>
        /// Direct 32 bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_P32_ABS32 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_P32_ABS32);
        
        /// <summary>
        /// Copy symbol at runtime.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_P32_COPY = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_P32_COPY);
        
        /// <summary>
        /// Create GOT entry.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_P32_GLOB_DAT = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_P32_GLOB_DAT);
        
        /// <summary>
        /// Create PLT entry.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_P32_JUMP_SLOT = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_P32_JUMP_SLOT);
        
        /// <summary>
        /// Adjust by program base.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_P32_RELATIVE = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_P32_RELATIVE);
        
        /// <summary>
        /// Module number, 32 bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_P32_TLS_DTPMOD = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_P32_TLS_DTPMOD);
        
        /// <summary>
        /// Module-relative offset, 32 bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_P32_TLS_DTPREL = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_P32_TLS_DTPREL);
        
        /// <summary>
        /// TP-relative offset, 32 bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_P32_TLS_TPREL = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_P32_TLS_TPREL);
        
        /// <summary>
        /// TLS Descriptor.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_P32_TLSDESC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_P32_TLSDESC);
        
        /// <summary>
        /// STT_GNU_IFUNC relocation.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_P32_IRELATIVE = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_P32_IRELATIVE);
        
        /// <summary>
        /// Direct 64 bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_ABS64 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_ABS64);
        
        /// <summary>
        /// Direct 32 bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_ABS32 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_ABS32);
        
        /// <summary>
        /// Direct 16-bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_ABS16 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_ABS16);
        
        /// <summary>
        /// PC-relative 64-bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_PREL64 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_PREL64);
        
        /// <summary>
        /// PC-relative 32-bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_PREL32 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_PREL32);
        
        /// <summary>
        /// PC-relative 16-bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_PREL16 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_PREL16);
        
        /// <summary>
        /// Dir. MOVZ imm. from bits 15:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_UABS_G0 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_UABS_G0);
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_UABS_G0_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_UABS_G0_NC);
        
        /// <summary>
        /// Dir. MOVZ imm. from bits 31:16.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_UABS_G1 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_UABS_G1);
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_UABS_G1_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_UABS_G1_NC);
        
        /// <summary>
        /// Dir. MOVZ imm. from bits 47:32.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_UABS_G2 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_UABS_G2);
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_UABS_G2_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_UABS_G2_NC);
        
        /// <summary>
        /// Dir. MOV{K,Z} imm. from 63:48.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_UABS_G3 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_UABS_G3);
        
        /// <summary>
        /// Dir. MOV{N,Z} imm. from 15:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_SABS_G0 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_SABS_G0);
        
        /// <summary>
        /// Dir. MOV{N,Z} imm. from 31:16.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_SABS_G1 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_SABS_G1);
        
        /// <summary>
        /// Dir. MOV{N,Z} imm. from 47:32.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_SABS_G2 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_SABS_G2);
        
        /// <summary>
        /// PC-rel. LD imm. from bits 20:2.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_LD_PREL_LO19 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_LD_PREL_LO19);
        
        /// <summary>
        /// PC-rel. ADR imm. from bits 20:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_ADR_PREL_LO21 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_ADR_PREL_LO21);
        
        /// <summary>
        /// Page-rel. ADRP imm. from 32:12.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_ADR_PREL_PG_HI21 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_ADR_PREL_PG_HI21);
        
        /// <summary>
        /// Likewise; no overflow check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_ADR_PREL_PG_HI21_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_ADR_PREL_PG_HI21_NC);
        
        /// <summary>
        /// Dir. ADD imm. from bits 11:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_ADD_ABS_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_ADD_ABS_LO12_NC);
        
        /// <summary>
        /// Likewise for LD/ST; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_LDST8_ABS_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_LDST8_ABS_LO12_NC);
        
        /// <summary>
        /// PC-rel. TBZ/TBNZ imm. from 15:2.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TSTBR14 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TSTBR14);
        
        /// <summary>
        /// PC-rel. cond. br. imm. from 20:2.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_CONDBR19 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_CONDBR19);
        
        /// <summary>
        /// PC-rel. B imm. from bits 27:2.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_JUMP26 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_JUMP26);
        
        /// <summary>
        /// Likewise for CALL.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_CALL26 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_CALL26);
        
        /// <summary>
        /// Dir. ADD imm. from bits 11:1.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_LDST16_ABS_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_LDST16_ABS_LO12_NC);
        
        /// <summary>
        /// Likewise for bits 11:2.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_LDST32_ABS_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_LDST32_ABS_LO12_NC);
        
        /// <summary>
        /// Likewise for bits 11:3.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_LDST64_ABS_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_LDST64_ABS_LO12_NC);
        
        /// <summary>
        /// PC-rel. MOV{N,Z} imm. from 15:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_PREL_G0 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_PREL_G0);
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_PREL_G0_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_PREL_G0_NC);
        
        /// <summary>
        /// PC-rel. MOV{N,Z} imm. from 31:16.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_PREL_G1 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_PREL_G1);
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_PREL_G1_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_PREL_G1_NC);
        
        /// <summary>
        /// PC-rel. MOV{N,Z} imm. from 47:32.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_PREL_G2 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_PREL_G2);
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_PREL_G2_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_PREL_G2_NC);
        
        /// <summary>
        /// PC-rel. MOV{N,Z} imm. from 63:48.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_PREL_G3 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_PREL_G3);
        
        /// <summary>
        /// Dir. ADD imm. from bits 11:4.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_LDST128_ABS_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_LDST128_ABS_LO12_NC);
        
        /// <summary>
        /// GOT-rel. off. MOV{N,Z} imm. 15:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_GOTOFF_G0 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_GOTOFF_G0);
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_GOTOFF_G0_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_GOTOFF_G0_NC);
        
        /// <summary>
        /// GOT-rel. o. MOV{N,Z} imm. 31:16.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_GOTOFF_G1 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_GOTOFF_G1);
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_GOTOFF_G1_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_GOTOFF_G1_NC);
        
        /// <summary>
        /// GOT-rel. o. MOV{N,Z} imm. 47:32.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_GOTOFF_G2 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_GOTOFF_G2);
        
        /// <summary>
        /// Likewise for MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_GOTOFF_G2_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_GOTOFF_G2_NC);
        
        /// <summary>
        /// GOT-rel. o. MOV{N,Z} imm. 63:48.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_MOVW_GOTOFF_G3 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_MOVW_GOTOFF_G3);
        
        /// <summary>
        /// GOT-relative 64-bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_GOTREL64 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_GOTREL64);
        
        /// <summary>
        /// GOT-relative 32-bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_GOTREL32 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_GOTREL32);
        
        /// <summary>
        /// PC-rel. GOT off. load imm. 20:2.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_GOT_LD_PREL19 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_GOT_LD_PREL19);
        
        /// <summary>
        /// GOT-rel. off. LD/ST imm. 14:3.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_LD64_GOTOFF_LO15 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_LD64_GOTOFF_LO15);
        
        /// <summary>
        /// P-page-rel. GOT off. ADRP 32:12.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_ADR_GOT_PAGE = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_ADR_GOT_PAGE);
        
        /// <summary>
        /// Dir. GOT off. LD/ST imm. 11:3.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_LD64_GOT_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_LD64_GOT_LO12_NC);
        
        /// <summary>
        /// GOT-page-rel. GOT off. LD/ST 14:3
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_LD64_GOTPAGE_LO15 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_LD64_GOTPAGE_LO15);
        
        /// <summary>
        /// PC-relative ADR imm. 20:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSGD_ADR_PREL21 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSGD_ADR_PREL21);
        
        /// <summary>
        /// page-rel. ADRP imm. 32:12.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSGD_ADR_PAGE21 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSGD_ADR_PAGE21);
        
        /// <summary>
        /// direct ADD imm. from 11:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSGD_ADD_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSGD_ADD_LO12_NC);
        
        /// <summary>
        /// GOT-rel. MOV{N,Z} 31:16.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSGD_MOVW_G1 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSGD_MOVW_G1);
        
        /// <summary>
        /// GOT-rel. MOVK imm. 15:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSGD_MOVW_G0_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSGD_MOVW_G0_NC);
        
        /// <summary>
        /// Like 512; local dynamic model.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_ADR_PREL21 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_ADR_PREL21);
        
        /// <summary>
        /// Like 513; local dynamic model.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_ADR_PAGE21 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_ADR_PAGE21);
        
        /// <summary>
        /// Like 514; local dynamic model.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_ADD_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_ADD_LO12_NC);
        
        /// <summary>
        /// Like 515; local dynamic model.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_MOVW_G1 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_MOVW_G1);
        
        /// <summary>
        /// Like 516; local dynamic model.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_MOVW_G0_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_MOVW_G0_NC);
        
        /// <summary>
        /// TLS PC-rel. load imm. 20:2.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_LD_PREL19 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_LD_PREL19);
        
        /// <summary>
        /// TLS DTP-rel. MOV{N,Z} 47:32.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_MOVW_DTPREL_G2 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_MOVW_DTPREL_G2);
        
        /// <summary>
        /// TLS DTP-rel. MOV{N,Z} 31:16.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_MOVW_DTPREL_G1 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_MOVW_DTPREL_G1);
        
        /// <summary>
        /// Likewise; MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC);
        
        /// <summary>
        /// TLS DTP-rel. MOV{N,Z} 15:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_MOVW_DTPREL_G0 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_MOVW_DTPREL_G0);
        
        /// <summary>
        /// Likewise; MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC);
        
        /// <summary>
        /// DTP-rel. ADD imm. from 23:12.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_ADD_DTPREL_HI12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_ADD_DTPREL_HI12);
        
        /// <summary>
        /// DTP-rel. ADD imm. from 11:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_ADD_DTPREL_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_ADD_DTPREL_LO12);
        
        /// <summary>
        /// Likewise; no ovfl. check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC);
        
        /// <summary>
        /// DTP-rel. LD/ST imm. 11:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_LDST8_DTPREL_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_LDST8_DTPREL_LO12);
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC);
        
        /// <summary>
        /// DTP-rel. LD/ST imm. 11:1.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_LDST16_DTPREL_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_LDST16_DTPREL_LO12);
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC);
        
        /// <summary>
        /// DTP-rel. LD/ST imm. 11:2.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_LDST32_DTPREL_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_LDST32_DTPREL_LO12);
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC);
        
        /// <summary>
        /// DTP-rel. LD/ST imm. 11:3.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_LDST64_DTPREL_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_LDST64_DTPREL_LO12);
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC);
        
        /// <summary>
        /// GOT-rel. MOV{N,Z} 31:16.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSIE_MOVW_GOTTPREL_G1 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSIE_MOVW_GOTTPREL_G1);
        
        /// <summary>
        /// GOT-rel. MOVK 15:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC);
        
        /// <summary>
        /// Page-rel. ADRP 32:12.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21);
        
        /// <summary>
        /// Direct LD off. 11:3.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC);
        
        /// <summary>
        /// PC-rel. load imm. 20:2.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSIE_LD_GOTTPREL_PREL19 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSIE_LD_GOTTPREL_PREL19);
        
        /// <summary>
        /// TLS TP-rel. MOV{N,Z} 47:32.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_MOVW_TPREL_G2 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_MOVW_TPREL_G2);
        
        /// <summary>
        /// TLS TP-rel. MOV{N,Z} 31:16.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_MOVW_TPREL_G1 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_MOVW_TPREL_G1);
        
        /// <summary>
        /// Likewise; MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_MOVW_TPREL_G1_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_MOVW_TPREL_G1_NC);
        
        /// <summary>
        /// TLS TP-rel. MOV{N,Z} 15:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_MOVW_TPREL_G0 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_MOVW_TPREL_G0);
        
        /// <summary>
        /// Likewise; MOVK; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_MOVW_TPREL_G0_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_MOVW_TPREL_G0_NC);
        
        /// <summary>
        /// TP-rel. ADD imm. 23:12.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_ADD_TPREL_HI12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_ADD_TPREL_HI12);
        
        /// <summary>
        /// TP-rel. ADD imm. 11:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_ADD_TPREL_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_ADD_TPREL_LO12);
        
        /// <summary>
        /// Likewise; no ovfl. check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_ADD_TPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_ADD_TPREL_LO12_NC);
        
        /// <summary>
        /// TP-rel. LD/ST off. 11:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_LDST8_TPREL_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_LDST8_TPREL_LO12);
        
        /// <summary>
        /// Likewise; no ovfl. check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC);
        
        /// <summary>
        /// TP-rel. LD/ST off. 11:1.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_LDST16_TPREL_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_LDST16_TPREL_LO12);
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC);
        
        /// <summary>
        /// TP-rel. LD/ST off. 11:2.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_LDST32_TPREL_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_LDST32_TPREL_LO12);
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC);
        
        /// <summary>
        /// TP-rel. LD/ST off. 11:3.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_LDST64_TPREL_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_LDST64_TPREL_LO12);
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC);
        
        /// <summary>
        /// PC-rel. load immediate 20:2.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSDESC_LD_PREL19 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSDESC_LD_PREL19);
        
        /// <summary>
        /// PC-rel. ADR immediate 20:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSDESC_ADR_PREL21 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSDESC_ADR_PREL21);
        
        /// <summary>
        /// Page-rel. ADRP imm. 32:12.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSDESC_ADR_PAGE21 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSDESC_ADR_PAGE21);
        
        /// <summary>
        /// Direct LD off. from 11:3.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSDESC_LD64_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSDESC_LD64_LO12);
        
        /// <summary>
        /// Direct ADD imm. from 11:0.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSDESC_ADD_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSDESC_ADD_LO12);
        
        /// <summary>
        /// GOT-rel. MOV{N,Z} imm. 31:16.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSDESC_OFF_G1 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSDESC_OFF_G1);
        
        /// <summary>
        /// GOT-rel. MOVK imm. 15:0; no ck.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSDESC_OFF_G0_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSDESC_OFF_G0_NC);
        
        /// <summary>
        /// Relax LDR.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSDESC_LDR = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSDESC_LDR);
        
        /// <summary>
        /// Relax ADD.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSDESC_ADD = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSDESC_ADD);
        
        /// <summary>
        /// Relax BLR.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSDESC_CALL = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSDESC_CALL);
        
        /// <summary>
        /// TP-rel. LD/ST off. 11:4.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_LDST128_TPREL_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_LDST128_TPREL_LO12);
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC);
        
        /// <summary>
        /// DTP-rel. LD/ST imm. 11:4.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_LDST128_DTPREL_LO12 = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_LDST128_DTPREL_LO12);
        
        /// <summary>
        /// Likewise; no check.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC);
        
        /// <summary>
        /// Copy symbol at runtime.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_COPY = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_COPY);
        
        /// <summary>
        /// Create GOT entry.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_GLOB_DAT = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_GLOB_DAT);
        
        /// <summary>
        /// Create PLT entry.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_JUMP_SLOT = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_JUMP_SLOT);
        
        /// <summary>
        /// Adjust by program base.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_RELATIVE = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_RELATIVE);
        
        /// <summary>
        /// Module number, 64 bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLS_DTPMOD = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLS_DTPMOD);
        
        /// <summary>
        /// Module-relative offset, 64 bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLS_DTPREL = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLS_DTPREL);
        
        /// <summary>
        /// TP-relative offset, 64 bit.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLS_TPREL = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLS_TPREL);
        
        /// <summary>
        /// TLS Descriptor.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_TLSDESC = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_TLSDESC);
        
        /// <summary>
        /// STT_GNU_IFUNC relocation.
        /// </summary>
        public static readonly ElfRelocationType R_AARCH64_IRELATIVE = new ElfRelocationType(ElfArch.AARCH64, ElfNative.R_AARCH64_IRELATIVE);
        
        /// <summary>
        /// No reloc
        /// </summary>
        public static readonly ElfRelocationType R_ARM_NONE = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_NONE);
        
        /// <summary>
        /// Deprecated PC relative 26 bit branch.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_PC24 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_PC24);
        
        /// <summary>
        /// Direct 32 bit
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ABS32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ABS32);
        
        /// <summary>
        /// PC relative 32 bit
        /// </summary>
        public static readonly ElfRelocationType R_ARM_REL32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_REL32);
        
        public static readonly ElfRelocationType R_ARM_PC13 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_PC13);
        
        /// <summary>
        /// Direct 16 bit
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ABS16 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ABS16);
        
        /// <summary>
        /// Direct 12 bit
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ABS12 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ABS12);
        
        /// <summary>
        /// Direct 
        /// &amp;
        /// 0x7C (LDR, STR).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_ABS5 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_ABS5);
        
        /// <summary>
        /// Direct 8 bit
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ABS8 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ABS8);
        
        public static readonly ElfRelocationType R_ARM_SBREL32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_SBREL32);
        
        /// <summary>
        /// PC relative 24 bit (Thumb32 BL).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_PC22 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_PC22);
        
        /// <summary>
        /// PC relative 
        /// &amp;
        /// 0x3FC (Thumb16 LDR, ADD, ADR).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_PC8 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_PC8);
        
        public static readonly ElfRelocationType R_ARM_AMP_VCALL9 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_AMP_VCALL9);
        
        /// <summary>
        /// Obsolete static relocation.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_SWI24 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_SWI24);
        
        /// <summary>
        /// Dynamic relocation.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_DESC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_DESC);
        
        /// <summary>
        /// Reserved.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_SWI8 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_SWI8);
        
        /// <summary>
        /// Reserved.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_XPC25 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_XPC25);
        
        /// <summary>
        /// Reserved.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_XPC22 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_XPC22);
        
        /// <summary>
        /// ID of module containing symbol
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_DTPMOD32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_DTPMOD32);
        
        /// <summary>
        /// Offset in TLS block
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_DTPOFF32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_DTPOFF32);
        
        /// <summary>
        /// Offset in static TLS block
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_TPOFF32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_TPOFF32);
        
        /// <summary>
        /// Copy symbol at runtime
        /// </summary>
        public static readonly ElfRelocationType R_ARM_COPY = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_COPY);
        
        /// <summary>
        /// Create GOT entry
        /// </summary>
        public static readonly ElfRelocationType R_ARM_GLOB_DAT = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_GLOB_DAT);
        
        /// <summary>
        /// Create PLT entry
        /// </summary>
        public static readonly ElfRelocationType R_ARM_JUMP_SLOT = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_JUMP_SLOT);
        
        /// <summary>
        /// Adjust by program base
        /// </summary>
        public static readonly ElfRelocationType R_ARM_RELATIVE = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_RELATIVE);
        
        /// <summary>
        /// 32 bit offset to GOT
        /// </summary>
        public static readonly ElfRelocationType R_ARM_GOTOFF = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_GOTOFF);
        
        /// <summary>
        /// 32 bit PC relative offset to GOT
        /// </summary>
        public static readonly ElfRelocationType R_ARM_GOTPC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_GOTPC);
        
        /// <summary>
        /// 32 bit GOT entry
        /// </summary>
        public static readonly ElfRelocationType R_ARM_GOT32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_GOT32);
        
        /// <summary>
        /// Deprecated, 32 bit PLT address.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_PLT32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_PLT32);
        
        /// <summary>
        /// PC relative 24 bit (BL, BLX).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_CALL = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_CALL);
        
        /// <summary>
        /// PC relative 24 bit (B, BL
        /// &lt;cond
        /// &gt;).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_JUMP24 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_JUMP24);
        
        /// <summary>
        /// PC relative 24 bit (Thumb32 B.W).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_JUMP24 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_JUMP24);
        
        /// <summary>
        /// Adjust by program base.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_BASE_ABS = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_BASE_ABS);
        
        /// <summary>
        /// Obsolete.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_PCREL_7_0 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_PCREL_7_0);
        
        /// <summary>
        /// Obsolete.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_PCREL_15_8 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_PCREL_15_8);
        
        /// <summary>
        /// Obsolete.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_PCREL_23_15 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_PCREL_23_15);
        
        /// <summary>
        /// Deprecated, prog. base relative.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDR_SBREL_11_0 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDR_SBREL_11_0);
        
        /// <summary>
        /// Deprecated, prog. base relative.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_SBREL_19_12 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_SBREL_19_12);
        
        /// <summary>
        /// Deprecated, prog. base relative.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_SBREL_27_20 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_SBREL_27_20);
        
        public static readonly ElfRelocationType R_ARM_TARGET1 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TARGET1);
        
        /// <summary>
        /// Program base relative.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_SBREL31 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_SBREL31);
        
        public static readonly ElfRelocationType R_ARM_V4BX = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_V4BX);
        
        public static readonly ElfRelocationType R_ARM_TARGET2 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TARGET2);
        
        /// <summary>
        /// 32 bit PC relative.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_PREL31 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_PREL31);
        
        /// <summary>
        /// Direct 16-bit (MOVW).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_MOVW_ABS_NC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_MOVW_ABS_NC);
        
        /// <summary>
        /// Direct high 16-bit (MOVT).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_MOVT_ABS = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_MOVT_ABS);
        
        /// <summary>
        /// PC relative 16-bit (MOVW).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_MOVW_PREL_NC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_MOVW_PREL_NC);
        
        /// <summary>
        /// PC relative (MOVT).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_MOVT_PREL = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_MOVT_PREL);
        
        /// <summary>
        /// Direct 16 bit (Thumb32 MOVW).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_MOVW_ABS_NC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_MOVW_ABS_NC);
        
        /// <summary>
        /// Direct high 16 bit (Thumb32 MOVT).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_MOVT_ABS = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_MOVT_ABS);
        
        /// <summary>
        /// PC relative 16 bit (Thumb32 MOVW).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_MOVW_PREL_NC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_MOVW_PREL_NC);
        
        /// <summary>
        /// PC relative high 16 bit (Thumb32 MOVT).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_MOVT_PREL = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_MOVT_PREL);
        
        /// <summary>
        /// PC relative 20 bit (Thumb32 B
        /// &lt;cond
        /// &gt;.W).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_JUMP19 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_JUMP19);
        
        /// <summary>
        /// PC relative X 
        /// &amp;
        /// 0x7E (Thumb16 CBZ, CBNZ).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_JUMP6 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_JUMP6);
        
        /// <summary>
        /// PC relative 12 bit (Thumb32 ADR.W).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_ALU_PREL_11_0 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_ALU_PREL_11_0);
        
        /// <summary>
        /// PC relative 12 bit (Thumb32 LDR{D,SB,H,SH}).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_PC12 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_PC12);
        
        /// <summary>
        /// Direct 32-bit.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ABS32_NOI = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ABS32_NOI);
        
        /// <summary>
        /// PC relative 32-bit.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_REL32_NOI = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_REL32_NOI);
        
        /// <summary>
        /// PC relative (ADD, SUB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_PC_G0_NC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_PC_G0_NC);
        
        /// <summary>
        /// PC relative (ADD, SUB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_PC_G0 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_PC_G0);
        
        /// <summary>
        /// PC relative (ADD, SUB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_PC_G1_NC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_PC_G1_NC);
        
        /// <summary>
        /// PC relative (ADD, SUB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_PC_G1 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_PC_G1);
        
        /// <summary>
        /// PC relative (ADD, SUB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_PC_G2 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_PC_G2);
        
        /// <summary>
        /// PC relative (LDR,STR,LDRB,STRB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDR_PC_G1 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDR_PC_G1);
        
        /// <summary>
        /// PC relative (LDR,STR,LDRB,STRB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDR_PC_G2 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDR_PC_G2);
        
        /// <summary>
        /// PC relative (STR{D,H}, LDR{D,SB,H,SH}).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDRS_PC_G0 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDRS_PC_G0);
        
        /// <summary>
        /// PC relative (STR{D,H}, LDR{D,SB,H,SH}).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDRS_PC_G1 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDRS_PC_G1);
        
        /// <summary>
        /// PC relative (STR{D,H}, LDR{D,SB,H,SH}).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDRS_PC_G2 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDRS_PC_G2);
        
        /// <summary>
        /// PC relative (LDC, STC).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDC_PC_G0 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDC_PC_G0);
        
        /// <summary>
        /// PC relative (LDC, STC).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDC_PC_G1 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDC_PC_G1);
        
        /// <summary>
        /// PC relative (LDC, STC).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDC_PC_G2 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDC_PC_G2);
        
        /// <summary>
        /// Program base relative (ADD,SUB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_SB_G0_NC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_SB_G0_NC);
        
        /// <summary>
        /// Program base relative (ADD,SUB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_SB_G0 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_SB_G0);
        
        /// <summary>
        /// Program base relative (ADD,SUB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_SB_G1_NC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_SB_G1_NC);
        
        /// <summary>
        /// Program base relative (ADD,SUB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_SB_G1 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_SB_G1);
        
        /// <summary>
        /// Program base relative (ADD,SUB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ALU_SB_G2 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ALU_SB_G2);
        
        /// <summary>
        /// Program base relative (LDR, STR, LDRB, STRB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDR_SB_G0 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDR_SB_G0);
        
        /// <summary>
        /// Program base relative (LDR, STR, LDRB, STRB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDR_SB_G1 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDR_SB_G1);
        
        /// <summary>
        /// Program base relative (LDR, STR, LDRB, STRB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDR_SB_G2 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDR_SB_G2);
        
        /// <summary>
        /// Program base relative (LDR, STR, LDRB, STRB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDRS_SB_G0 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDRS_SB_G0);
        
        /// <summary>
        /// Program base relative (LDR, STR, LDRB, STRB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDRS_SB_G1 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDRS_SB_G1);
        
        /// <summary>
        /// Program base relative (LDR, STR, LDRB, STRB).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDRS_SB_G2 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDRS_SB_G2);
        
        /// <summary>
        /// Program base relative (LDC,STC).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDC_SB_G0 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDC_SB_G0);
        
        /// <summary>
        /// Program base relative (LDC,STC).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDC_SB_G1 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDC_SB_G1);
        
        /// <summary>
        /// Program base relative (LDC,STC).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_LDC_SB_G2 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_LDC_SB_G2);
        
        /// <summary>
        /// Program base relative 16 bit (MOVW).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_MOVW_BREL_NC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_MOVW_BREL_NC);
        
        /// <summary>
        /// Program base relative high 16 bit (MOVT).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_MOVT_BREL = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_MOVT_BREL);
        
        /// <summary>
        /// Program base relative 16 bit (MOVW).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_MOVW_BREL = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_MOVW_BREL);
        
        /// <summary>
        /// Program base relative 16 bit (Thumb32 MOVW).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_MOVW_BREL_NC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_MOVW_BREL_NC);
        
        /// <summary>
        /// Program base relative high 16 bit (Thumb32 MOVT).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_MOVT_BREL = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_MOVT_BREL);
        
        /// <summary>
        /// Program base relative 16 bit (Thumb32 MOVW).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_MOVW_BREL = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_MOVW_BREL);
        
        public static readonly ElfRelocationType R_ARM_TLS_GOTDESC = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_GOTDESC);
        
        public static readonly ElfRelocationType R_ARM_TLS_CALL = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_CALL);
        
        /// <summary>
        /// TLS relaxation.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_DESCSEQ = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_DESCSEQ);
        
        public static readonly ElfRelocationType R_ARM_THM_TLS_CALL = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_TLS_CALL);
        
        public static readonly ElfRelocationType R_ARM_PLT32_ABS = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_PLT32_ABS);
        
        /// <summary>
        /// GOT entry.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_GOT_ABS = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_GOT_ABS);
        
        /// <summary>
        /// PC relative GOT entry.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_GOT_PREL = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_GOT_PREL);
        
        /// <summary>
        /// GOT entry relative to GOT origin (LDR).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_GOT_BREL12 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_GOT_BREL12);
        
        /// <summary>
        /// 12 bit, GOT entry relative to GOT origin (LDR, STR).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_GOTOFF12 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_GOTOFF12);
        
        public static readonly ElfRelocationType R_ARM_GOTRELAX = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_GOTRELAX);
        
        public static readonly ElfRelocationType R_ARM_GNU_VTENTRY = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_GNU_VTENTRY);
        
        public static readonly ElfRelocationType R_ARM_GNU_VTINHERIT = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_GNU_VTINHERIT);
        
        /// <summary>
        /// PC relative 
        /// &amp;
        /// 0xFFE (Thumb16 B).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_PC11 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_PC11);
        
        /// <summary>
        /// PC relative 
        /// &amp;
        /// 0x1FE (Thumb16 B/B
        /// &lt;cond
        /// &gt;).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_PC9 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_PC9);
        
        /// <summary>
        /// PC-rel 32 bit for global dynamic thread local data
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_GD32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_GD32);
        
        /// <summary>
        /// PC-rel 32 bit for local dynamic thread local data
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_LDM32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_LDM32);
        
        /// <summary>
        /// 32 bit offset relative to TLS block
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_LDO32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_LDO32);
        
        /// <summary>
        /// PC-rel 32 bit for GOT entry of static TLS block offset
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_IE32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_IE32);
        
        /// <summary>
        /// 32 bit offset relative to static TLS block
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_LE32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_LE32);
        
        /// <summary>
        /// 12 bit relative to TLS block (LDR, STR).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_LDO12 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_LDO12);
        
        /// <summary>
        /// 12 bit relative to static TLS block (LDR, STR).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_LE12 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_LE12);
        
        /// <summary>
        /// 12 bit GOT entry relative to GOT origin (LDR).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_TLS_IE12GP = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_TLS_IE12GP);
        
        /// <summary>
        /// Obsolete.
        /// </summary>
        public static readonly ElfRelocationType R_ARM_ME_TOO = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_ME_TOO);
        
        public static readonly ElfRelocationType R_ARM_THM_TLS_DESCSEQ = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_TLS_DESCSEQ);
        
        public static readonly ElfRelocationType R_ARM_THM_TLS_DESCSEQ16 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_TLS_DESCSEQ16);
        
        public static readonly ElfRelocationType R_ARM_THM_TLS_DESCSEQ32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_TLS_DESCSEQ32);
        
        /// <summary>
        /// GOT entry relative to GOT origin, 12 bit (Thumb32 LDR).
        /// </summary>
        public static readonly ElfRelocationType R_ARM_THM_GOT_BREL12 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_GOT_BREL12);
        
        public static readonly ElfRelocationType R_ARM_IRELATIVE = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_IRELATIVE);
        
        public static readonly ElfRelocationType R_ARM_RXPC25 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_RXPC25);
        
        public static readonly ElfRelocationType R_ARM_RSBREL32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_RSBREL32);
        
        public static readonly ElfRelocationType R_ARM_THM_RPC22 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_THM_RPC22);
        
        public static readonly ElfRelocationType R_ARM_RREL32 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_RREL32);
        
        public static readonly ElfRelocationType R_ARM_RABS22 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_RABS22);
        
        public static readonly ElfRelocationType R_ARM_RPC24 = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_RPC24);
        
        public static readonly ElfRelocationType R_ARM_RBASE = new ElfRelocationType(ElfArch.ARM, ElfNative.R_ARM_RBASE);
        
        /// <summary>
        /// No reloc
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_NONE = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_NONE);
        
        /// <summary>
        /// Direct 64 bit
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_64);
        
        /// <summary>
        /// PC relative 32 bit signed
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_PC32 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_PC32);
        
        /// <summary>
        /// 32 bit GOT entry
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_GOT32 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_GOT32);
        
        /// <summary>
        /// 32 bit PLT address
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_PLT32 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_PLT32);
        
        /// <summary>
        /// Copy symbol at runtime
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_COPY = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_COPY);
        
        /// <summary>
        /// Create GOT entry
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_GLOB_DAT = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_GLOB_DAT);
        
        /// <summary>
        /// Create PLT entry
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_JUMP_SLOT = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_JUMP_SLOT);
        
        /// <summary>
        /// Adjust by program base
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_RELATIVE = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_RELATIVE);
        
        /// <summary>
        /// 32 bit signed PC relative offset to GOT
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_GOTPCREL = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_GOTPCREL);
        
        /// <summary>
        /// Direct 32 bit zero extended
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_32 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_32);
        
        /// <summary>
        /// Direct 32 bit sign extended
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_32S = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_32S);
        
        /// <summary>
        /// Direct 16 bit zero extended
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_16 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_16);
        
        /// <summary>
        /// 16 bit sign extended pc relative
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_PC16 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_PC16);
        
        /// <summary>
        /// Direct 8 bit sign extended
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_8 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_8);
        
        /// <summary>
        /// 8 bit sign extended pc relative
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_PC8 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_PC8);
        
        /// <summary>
        /// ID of module containing symbol
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_DTPMOD64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_DTPMOD64);
        
        /// <summary>
        /// Offset in module's TLS block
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_DTPOFF64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_DTPOFF64);
        
        /// <summary>
        /// Offset in initial TLS block
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_TPOFF64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_TPOFF64);
        
        /// <summary>
        /// 32 bit signed PC relative offset to two GOT entries for GD symbol
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_TLSGD = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_TLSGD);
        
        /// <summary>
        /// 32 bit signed PC relative offset to two GOT entries for LD symbol
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_TLSLD = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_TLSLD);
        
        /// <summary>
        /// Offset in TLS block
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_DTPOFF32 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_DTPOFF32);
        
        /// <summary>
        /// 32 bit signed PC relative offset to GOT entry for IE symbol
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_GOTTPOFF = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_GOTTPOFF);
        
        /// <summary>
        /// Offset in initial TLS block
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_TPOFF32 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_TPOFF32);
        
        /// <summary>
        /// PC relative 64 bit
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_PC64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_PC64);
        
        /// <summary>
        /// 64 bit offset to GOT
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_GOTOFF64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_GOTOFF64);
        
        /// <summary>
        /// 32 bit signed pc relative offset to GOT
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_GOTPC32 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_GOTPC32);
        
        /// <summary>
        /// 64-bit GOT entry offset
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_GOT64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_GOT64);
        
        /// <summary>
        /// 64-bit PC relative offset to GOT entry
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_GOTPCREL64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_GOTPCREL64);
        
        /// <summary>
        /// 64-bit PC relative offset to GOT
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_GOTPC64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_GOTPC64);
        
        /// <summary>
        /// like GOT64, says PLT entry needed
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_GOTPLT64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_GOTPLT64);
        
        /// <summary>
        /// 64-bit GOT relative offset to PLT entry
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_PLTOFF64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_PLTOFF64);
        
        /// <summary>
        /// Size of symbol plus 32-bit addend
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_SIZE32 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_SIZE32);
        
        /// <summary>
        /// Size of symbol plus 64-bit addend
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_SIZE64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_SIZE64);
        
        /// <summary>
        /// GOT offset for TLS descriptor.
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_GOTPC32_TLSDESC = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_GOTPC32_TLSDESC);
        
        /// <summary>
        /// Marker for call through TLS descriptor.
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_TLSDESC_CALL = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_TLSDESC_CALL);
        
        /// <summary>
        /// TLS descriptor.
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_TLSDESC = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_TLSDESC);
        
        /// <summary>
        /// Adjust indirectly by program base
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_IRELATIVE = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_IRELATIVE);
        
        /// <summary>
        /// 64-bit adjust by program base
        /// </summary>
        public static readonly ElfRelocationType R_X86_64_RELATIVE64 = new ElfRelocationType(ElfArch.X86_64, ElfNative.R_X86_64_RELATIVE64);
        
        private string ToStringInternal()
        {
            switch (((ulong)Value << 16) | (ulong)Arch.Value)
            {
                case ((ulong)ElfNative.R_386_NONE << 16) | ElfNative.EM_386 : return "R_386_NONE";
                case ((ulong)ElfNative.R_386_32 << 16) | ElfNative.EM_386 : return "R_386_32";
                case ((ulong)ElfNative.R_386_PC32 << 16) | ElfNative.EM_386 : return "R_386_PC32";
                case ((ulong)ElfNative.R_386_GOT32 << 16) | ElfNative.EM_386 : return "R_386_GOT32";
                case ((ulong)ElfNative.R_386_PLT32 << 16) | ElfNative.EM_386 : return "R_386_PLT32";
                case ((ulong)ElfNative.R_386_COPY << 16) | ElfNative.EM_386 : return "R_386_COPY";
                case ((ulong)ElfNative.R_386_GLOB_DAT << 16) | ElfNative.EM_386 : return "R_386_GLOB_DAT";
                case ((ulong)ElfNative.R_386_JMP_SLOT << 16) | ElfNative.EM_386 : return "R_386_JMP_SLOT";
                case ((ulong)ElfNative.R_386_RELATIVE << 16) | ElfNative.EM_386 : return "R_386_RELATIVE";
                case ((ulong)ElfNative.R_386_GOTOFF << 16) | ElfNative.EM_386 : return "R_386_GOTOFF";
                case ((ulong)ElfNative.R_386_GOTPC << 16) | ElfNative.EM_386 : return "R_386_GOTPC";
                case ((ulong)ElfNative.R_386_32PLT << 16) | ElfNative.EM_386 : return "R_386_32PLT";
                case ((ulong)ElfNative.R_386_TLS_TPOFF << 16) | ElfNative.EM_386 : return "R_386_TLS_TPOFF";
                case ((ulong)ElfNative.R_386_TLS_IE << 16) | ElfNative.EM_386 : return "R_386_TLS_IE";
                case ((ulong)ElfNative.R_386_TLS_GOTIE << 16) | ElfNative.EM_386 : return "R_386_TLS_GOTIE";
                case ((ulong)ElfNative.R_386_TLS_LE << 16) | ElfNative.EM_386 : return "R_386_TLS_LE";
                case ((ulong)ElfNative.R_386_TLS_GD << 16) | ElfNative.EM_386 : return "R_386_TLS_GD";
                case ((ulong)ElfNative.R_386_TLS_LDM << 16) | ElfNative.EM_386 : return "R_386_TLS_LDM";
                case ((ulong)ElfNative.R_386_16 << 16) | ElfNative.EM_386 : return "R_386_16";
                case ((ulong)ElfNative.R_386_PC16 << 16) | ElfNative.EM_386 : return "R_386_PC16";
                case ((ulong)ElfNative.R_386_8 << 16) | ElfNative.EM_386 : return "R_386_8";
                case ((ulong)ElfNative.R_386_PC8 << 16) | ElfNative.EM_386 : return "R_386_PC8";
                case ((ulong)ElfNative.R_386_TLS_GD_32 << 16) | ElfNative.EM_386 : return "R_386_TLS_GD_32";
                case ((ulong)ElfNative.R_386_TLS_GD_PUSH << 16) | ElfNative.EM_386 : return "R_386_TLS_GD_PUSH";
                case ((ulong)ElfNative.R_386_TLS_GD_CALL << 16) | ElfNative.EM_386 : return "R_386_TLS_GD_CALL";
                case ((ulong)ElfNative.R_386_TLS_GD_POP << 16) | ElfNative.EM_386 : return "R_386_TLS_GD_POP";
                case ((ulong)ElfNative.R_386_TLS_LDM_32 << 16) | ElfNative.EM_386 : return "R_386_TLS_LDM_32";
                case ((ulong)ElfNative.R_386_TLS_LDM_PUSH << 16) | ElfNative.EM_386 : return "R_386_TLS_LDM_PUSH";
                case ((ulong)ElfNative.R_386_TLS_LDM_CALL << 16) | ElfNative.EM_386 : return "R_386_TLS_LDM_CALL";
                case ((ulong)ElfNative.R_386_TLS_LDM_POP << 16) | ElfNative.EM_386 : return "R_386_TLS_LDM_POP";
                case ((ulong)ElfNative.R_386_TLS_LDO_32 << 16) | ElfNative.EM_386 : return "R_386_TLS_LDO_32";
                case ((ulong)ElfNative.R_386_TLS_IE_32 << 16) | ElfNative.EM_386 : return "R_386_TLS_IE_32";
                case ((ulong)ElfNative.R_386_TLS_LE_32 << 16) | ElfNative.EM_386 : return "R_386_TLS_LE_32";
                case ((ulong)ElfNative.R_386_TLS_DTPMOD32 << 16) | ElfNative.EM_386 : return "R_386_TLS_DTPMOD32";
                case ((ulong)ElfNative.R_386_TLS_DTPOFF32 << 16) | ElfNative.EM_386 : return "R_386_TLS_DTPOFF32";
                case ((ulong)ElfNative.R_386_TLS_TPOFF32 << 16) | ElfNative.EM_386 : return "R_386_TLS_TPOFF32";
                case ((ulong)ElfNative.R_386_SIZE32 << 16) | ElfNative.EM_386 : return "R_386_SIZE32";
                case ((ulong)ElfNative.R_386_TLS_GOTDESC << 16) | ElfNative.EM_386 : return "R_386_TLS_GOTDESC";
                case ((ulong)ElfNative.R_386_TLS_DESC_CALL << 16) | ElfNative.EM_386 : return "R_386_TLS_DESC_CALL";
                case ((ulong)ElfNative.R_386_TLS_DESC << 16) | ElfNative.EM_386 : return "R_386_TLS_DESC";
                case ((ulong)ElfNative.R_386_IRELATIVE << 16) | ElfNative.EM_386 : return "R_386_IRELATIVE";
                case ((ulong)ElfNative.R_AARCH64_NONE << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_NONE";
                case ((ulong)ElfNative.R_AARCH64_P32_ABS32 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_P32_ABS32";
                case ((ulong)ElfNative.R_AARCH64_P32_COPY << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_P32_COPY";
                case ((ulong)ElfNative.R_AARCH64_P32_GLOB_DAT << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_P32_GLOB_DAT";
                case ((ulong)ElfNative.R_AARCH64_P32_JUMP_SLOT << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_P32_JUMP_SLOT";
                case ((ulong)ElfNative.R_AARCH64_P32_RELATIVE << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_P32_RELATIVE";
                case ((ulong)ElfNative.R_AARCH64_P32_TLS_DTPMOD << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_P32_TLS_DTPMOD";
                case ((ulong)ElfNative.R_AARCH64_P32_TLS_DTPREL << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_P32_TLS_DTPREL";
                case ((ulong)ElfNative.R_AARCH64_P32_TLS_TPREL << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_P32_TLS_TPREL";
                case ((ulong)ElfNative.R_AARCH64_P32_TLSDESC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_P32_TLSDESC";
                case ((ulong)ElfNative.R_AARCH64_P32_IRELATIVE << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_P32_IRELATIVE";
                case ((ulong)ElfNative.R_AARCH64_ABS64 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_ABS64";
                case ((ulong)ElfNative.R_AARCH64_ABS32 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_ABS32";
                case ((ulong)ElfNative.R_AARCH64_ABS16 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_ABS16";
                case ((ulong)ElfNative.R_AARCH64_PREL64 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_PREL64";
                case ((ulong)ElfNative.R_AARCH64_PREL32 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_PREL32";
                case ((ulong)ElfNative.R_AARCH64_PREL16 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_PREL16";
                case ((ulong)ElfNative.R_AARCH64_MOVW_UABS_G0 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_UABS_G0";
                case ((ulong)ElfNative.R_AARCH64_MOVW_UABS_G0_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_UABS_G0_NC";
                case ((ulong)ElfNative.R_AARCH64_MOVW_UABS_G1 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_UABS_G1";
                case ((ulong)ElfNative.R_AARCH64_MOVW_UABS_G1_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_UABS_G1_NC";
                case ((ulong)ElfNative.R_AARCH64_MOVW_UABS_G2 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_UABS_G2";
                case ((ulong)ElfNative.R_AARCH64_MOVW_UABS_G2_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_UABS_G2_NC";
                case ((ulong)ElfNative.R_AARCH64_MOVW_UABS_G3 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_UABS_G3";
                case ((ulong)ElfNative.R_AARCH64_MOVW_SABS_G0 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_SABS_G0";
                case ((ulong)ElfNative.R_AARCH64_MOVW_SABS_G1 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_SABS_G1";
                case ((ulong)ElfNative.R_AARCH64_MOVW_SABS_G2 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_SABS_G2";
                case ((ulong)ElfNative.R_AARCH64_LD_PREL_LO19 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_LD_PREL_LO19";
                case ((ulong)ElfNative.R_AARCH64_ADR_PREL_LO21 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_ADR_PREL_LO21";
                case ((ulong)ElfNative.R_AARCH64_ADR_PREL_PG_HI21 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_ADR_PREL_PG_HI21";
                case ((ulong)ElfNative.R_AARCH64_ADR_PREL_PG_HI21_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_ADR_PREL_PG_HI21_NC";
                case ((ulong)ElfNative.R_AARCH64_ADD_ABS_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_ADD_ABS_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_LDST8_ABS_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_LDST8_ABS_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TSTBR14 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TSTBR14";
                case ((ulong)ElfNative.R_AARCH64_CONDBR19 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_CONDBR19";
                case ((ulong)ElfNative.R_AARCH64_JUMP26 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_JUMP26";
                case ((ulong)ElfNative.R_AARCH64_CALL26 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_CALL26";
                case ((ulong)ElfNative.R_AARCH64_LDST16_ABS_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_LDST16_ABS_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_LDST32_ABS_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_LDST32_ABS_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_LDST64_ABS_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_LDST64_ABS_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_MOVW_PREL_G0 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_PREL_G0";
                case ((ulong)ElfNative.R_AARCH64_MOVW_PREL_G0_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_PREL_G0_NC";
                case ((ulong)ElfNative.R_AARCH64_MOVW_PREL_G1 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_PREL_G1";
                case ((ulong)ElfNative.R_AARCH64_MOVW_PREL_G1_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_PREL_G1_NC";
                case ((ulong)ElfNative.R_AARCH64_MOVW_PREL_G2 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_PREL_G2";
                case ((ulong)ElfNative.R_AARCH64_MOVW_PREL_G2_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_PREL_G2_NC";
                case ((ulong)ElfNative.R_AARCH64_MOVW_PREL_G3 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_PREL_G3";
                case ((ulong)ElfNative.R_AARCH64_LDST128_ABS_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_LDST128_ABS_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_MOVW_GOTOFF_G0 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_GOTOFF_G0";
                case ((ulong)ElfNative.R_AARCH64_MOVW_GOTOFF_G0_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_GOTOFF_G0_NC";
                case ((ulong)ElfNative.R_AARCH64_MOVW_GOTOFF_G1 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_GOTOFF_G1";
                case ((ulong)ElfNative.R_AARCH64_MOVW_GOTOFF_G1_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_GOTOFF_G1_NC";
                case ((ulong)ElfNative.R_AARCH64_MOVW_GOTOFF_G2 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_GOTOFF_G2";
                case ((ulong)ElfNative.R_AARCH64_MOVW_GOTOFF_G2_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_GOTOFF_G2_NC";
                case ((ulong)ElfNative.R_AARCH64_MOVW_GOTOFF_G3 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_MOVW_GOTOFF_G3";
                case ((ulong)ElfNative.R_AARCH64_GOTREL64 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_GOTREL64";
                case ((ulong)ElfNative.R_AARCH64_GOTREL32 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_GOTREL32";
                case ((ulong)ElfNative.R_AARCH64_GOT_LD_PREL19 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_GOT_LD_PREL19";
                case ((ulong)ElfNative.R_AARCH64_LD64_GOTOFF_LO15 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_LD64_GOTOFF_LO15";
                case ((ulong)ElfNative.R_AARCH64_ADR_GOT_PAGE << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_ADR_GOT_PAGE";
                case ((ulong)ElfNative.R_AARCH64_LD64_GOT_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_LD64_GOT_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_LD64_GOTPAGE_LO15 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_LD64_GOTPAGE_LO15";
                case ((ulong)ElfNative.R_AARCH64_TLSGD_ADR_PREL21 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSGD_ADR_PREL21";
                case ((ulong)ElfNative.R_AARCH64_TLSGD_ADR_PAGE21 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSGD_ADR_PAGE21";
                case ((ulong)ElfNative.R_AARCH64_TLSGD_ADD_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSGD_ADD_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSGD_MOVW_G1 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSGD_MOVW_G1";
                case ((ulong)ElfNative.R_AARCH64_TLSGD_MOVW_G0_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSGD_MOVW_G0_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_ADR_PREL21 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_ADR_PREL21";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_ADR_PAGE21 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_ADR_PAGE21";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_ADD_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_ADD_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_MOVW_G1 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_MOVW_G1";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_MOVW_G0_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_MOVW_G0_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_LD_PREL19 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_LD_PREL19";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_MOVW_DTPREL_G2 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_MOVW_DTPREL_G2";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_MOVW_DTPREL_G1 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_MOVW_DTPREL_G1";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_MOVW_DTPREL_G0 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_MOVW_DTPREL_G0";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_ADD_DTPREL_HI12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_ADD_DTPREL_HI12";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_ADD_DTPREL_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_ADD_DTPREL_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_LDST8_DTPREL_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_LDST8_DTPREL_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_LDST16_DTPREL_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_LDST16_DTPREL_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_LDST32_DTPREL_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_LDST32_DTPREL_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_LDST64_DTPREL_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_LDST64_DTPREL_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSIE_MOVW_GOTTPREL_G1 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSIE_MOVW_GOTTPREL_G1";
                case ((ulong)ElfNative.R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21";
                case ((ulong)ElfNative.R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSIE_LD_GOTTPREL_PREL19 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSIE_LD_GOTTPREL_PREL19";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_MOVW_TPREL_G2 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_MOVW_TPREL_G2";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_MOVW_TPREL_G1 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_MOVW_TPREL_G1";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_MOVW_TPREL_G1_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_MOVW_TPREL_G1_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_MOVW_TPREL_G0 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_MOVW_TPREL_G0";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_MOVW_TPREL_G0_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_MOVW_TPREL_G0_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_ADD_TPREL_HI12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_ADD_TPREL_HI12";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_ADD_TPREL_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_ADD_TPREL_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_ADD_TPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_ADD_TPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_LDST8_TPREL_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_LDST8_TPREL_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_LDST16_TPREL_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_LDST16_TPREL_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_LDST32_TPREL_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_LDST32_TPREL_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_LDST64_TPREL_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_LDST64_TPREL_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSDESC_LD_PREL19 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSDESC_LD_PREL19";
                case ((ulong)ElfNative.R_AARCH64_TLSDESC_ADR_PREL21 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSDESC_ADR_PREL21";
                case ((ulong)ElfNative.R_AARCH64_TLSDESC_ADR_PAGE21 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSDESC_ADR_PAGE21";
                case ((ulong)ElfNative.R_AARCH64_TLSDESC_LD64_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSDESC_LD64_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSDESC_ADD_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSDESC_ADD_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSDESC_OFF_G1 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSDESC_OFF_G1";
                case ((ulong)ElfNative.R_AARCH64_TLSDESC_OFF_G0_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSDESC_OFF_G0_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSDESC_LDR << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSDESC_LDR";
                case ((ulong)ElfNative.R_AARCH64_TLSDESC_ADD << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSDESC_ADD";
                case ((ulong)ElfNative.R_AARCH64_TLSDESC_CALL << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSDESC_CALL";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_LDST128_TPREL_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_LDST128_TPREL_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_LDST128_DTPREL_LO12 << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_LDST128_DTPREL_LO12";
                case ((ulong)ElfNative.R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC";
                case ((ulong)ElfNative.R_AARCH64_COPY << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_COPY";
                case ((ulong)ElfNative.R_AARCH64_GLOB_DAT << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_GLOB_DAT";
                case ((ulong)ElfNative.R_AARCH64_JUMP_SLOT << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_JUMP_SLOT";
                case ((ulong)ElfNative.R_AARCH64_RELATIVE << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_RELATIVE";
                case ((ulong)ElfNative.R_AARCH64_TLS_DTPMOD << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLS_DTPMOD";
                case ((ulong)ElfNative.R_AARCH64_TLS_DTPREL << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLS_DTPREL";
                case ((ulong)ElfNative.R_AARCH64_TLS_TPREL << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLS_TPREL";
                case ((ulong)ElfNative.R_AARCH64_TLSDESC << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_TLSDESC";
                case ((ulong)ElfNative.R_AARCH64_IRELATIVE << 16) | ElfNative.EM_AARCH64 : return "R_AARCH64_IRELATIVE";
                case ((ulong)ElfNative.R_ARM_NONE << 16) | ElfNative.EM_ARM : return "R_ARM_NONE";
                case ((ulong)ElfNative.R_ARM_PC24 << 16) | ElfNative.EM_ARM : return "R_ARM_PC24";
                case ((ulong)ElfNative.R_ARM_ABS32 << 16) | ElfNative.EM_ARM : return "R_ARM_ABS32";
                case ((ulong)ElfNative.R_ARM_REL32 << 16) | ElfNative.EM_ARM : return "R_ARM_REL32";
                case ((ulong)ElfNative.R_ARM_PC13 << 16) | ElfNative.EM_ARM : return "R_ARM_PC13";
                case ((ulong)ElfNative.R_ARM_ABS16 << 16) | ElfNative.EM_ARM : return "R_ARM_ABS16";
                case ((ulong)ElfNative.R_ARM_ABS12 << 16) | ElfNative.EM_ARM : return "R_ARM_ABS12";
                case ((ulong)ElfNative.R_ARM_THM_ABS5 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_ABS5";
                case ((ulong)ElfNative.R_ARM_ABS8 << 16) | ElfNative.EM_ARM : return "R_ARM_ABS8";
                case ((ulong)ElfNative.R_ARM_SBREL32 << 16) | ElfNative.EM_ARM : return "R_ARM_SBREL32";
                case ((ulong)ElfNative.R_ARM_THM_PC22 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_PC22";
                case ((ulong)ElfNative.R_ARM_THM_PC8 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_PC8";
                case ((ulong)ElfNative.R_ARM_AMP_VCALL9 << 16) | ElfNative.EM_ARM : return "R_ARM_AMP_VCALL9";
                case ((ulong)ElfNative.R_ARM_SWI24 << 16) | ElfNative.EM_ARM : return "R_ARM_SWI24";
                case ((ulong)ElfNative.R_ARM_THM_SWI8 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_SWI8";
                case ((ulong)ElfNative.R_ARM_XPC25 << 16) | ElfNative.EM_ARM : return "R_ARM_XPC25";
                case ((ulong)ElfNative.R_ARM_THM_XPC22 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_XPC22";
                case ((ulong)ElfNative.R_ARM_TLS_DTPMOD32 << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_DTPMOD32";
                case ((ulong)ElfNative.R_ARM_TLS_DTPOFF32 << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_DTPOFF32";
                case ((ulong)ElfNative.R_ARM_TLS_TPOFF32 << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_TPOFF32";
                case ((ulong)ElfNative.R_ARM_COPY << 16) | ElfNative.EM_ARM : return "R_ARM_COPY";
                case ((ulong)ElfNative.R_ARM_GLOB_DAT << 16) | ElfNative.EM_ARM : return "R_ARM_GLOB_DAT";
                case ((ulong)ElfNative.R_ARM_JUMP_SLOT << 16) | ElfNative.EM_ARM : return "R_ARM_JUMP_SLOT";
                case ((ulong)ElfNative.R_ARM_RELATIVE << 16) | ElfNative.EM_ARM : return "R_ARM_RELATIVE";
                case ((ulong)ElfNative.R_ARM_GOTOFF << 16) | ElfNative.EM_ARM : return "R_ARM_GOTOFF";
                case ((ulong)ElfNative.R_ARM_GOTPC << 16) | ElfNative.EM_ARM : return "R_ARM_GOTPC";
                case ((ulong)ElfNative.R_ARM_GOT32 << 16) | ElfNative.EM_ARM : return "R_ARM_GOT32";
                case ((ulong)ElfNative.R_ARM_PLT32 << 16) | ElfNative.EM_ARM : return "R_ARM_PLT32";
                case ((ulong)ElfNative.R_ARM_CALL << 16) | ElfNative.EM_ARM : return "R_ARM_CALL";
                case ((ulong)ElfNative.R_ARM_JUMP24 << 16) | ElfNative.EM_ARM : return "R_ARM_JUMP24";
                case ((ulong)ElfNative.R_ARM_THM_JUMP24 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_JUMP24";
                case ((ulong)ElfNative.R_ARM_BASE_ABS << 16) | ElfNative.EM_ARM : return "R_ARM_BASE_ABS";
                case ((ulong)ElfNative.R_ARM_ALU_PCREL_7_0 << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_PCREL_7_0";
                case ((ulong)ElfNative.R_ARM_ALU_PCREL_15_8 << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_PCREL_15_8";
                case ((ulong)ElfNative.R_ARM_ALU_PCREL_23_15 << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_PCREL_23_15";
                case ((ulong)ElfNative.R_ARM_LDR_SBREL_11_0 << 16) | ElfNative.EM_ARM : return "R_ARM_LDR_SBREL_11_0";
                case ((ulong)ElfNative.R_ARM_ALU_SBREL_19_12 << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_SBREL_19_12";
                case ((ulong)ElfNative.R_ARM_ALU_SBREL_27_20 << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_SBREL_27_20";
                case ((ulong)ElfNative.R_ARM_TARGET1 << 16) | ElfNative.EM_ARM : return "R_ARM_TARGET1";
                case ((ulong)ElfNative.R_ARM_SBREL31 << 16) | ElfNative.EM_ARM : return "R_ARM_SBREL31";
                case ((ulong)ElfNative.R_ARM_V4BX << 16) | ElfNative.EM_ARM : return "R_ARM_V4BX";
                case ((ulong)ElfNative.R_ARM_TARGET2 << 16) | ElfNative.EM_ARM : return "R_ARM_TARGET2";
                case ((ulong)ElfNative.R_ARM_PREL31 << 16) | ElfNative.EM_ARM : return "R_ARM_PREL31";
                case ((ulong)ElfNative.R_ARM_MOVW_ABS_NC << 16) | ElfNative.EM_ARM : return "R_ARM_MOVW_ABS_NC";
                case ((ulong)ElfNative.R_ARM_MOVT_ABS << 16) | ElfNative.EM_ARM : return "R_ARM_MOVT_ABS";
                case ((ulong)ElfNative.R_ARM_MOVW_PREL_NC << 16) | ElfNative.EM_ARM : return "R_ARM_MOVW_PREL_NC";
                case ((ulong)ElfNative.R_ARM_MOVT_PREL << 16) | ElfNative.EM_ARM : return "R_ARM_MOVT_PREL";
                case ((ulong)ElfNative.R_ARM_THM_MOVW_ABS_NC << 16) | ElfNative.EM_ARM : return "R_ARM_THM_MOVW_ABS_NC";
                case ((ulong)ElfNative.R_ARM_THM_MOVT_ABS << 16) | ElfNative.EM_ARM : return "R_ARM_THM_MOVT_ABS";
                case ((ulong)ElfNative.R_ARM_THM_MOVW_PREL_NC << 16) | ElfNative.EM_ARM : return "R_ARM_THM_MOVW_PREL_NC";
                case ((ulong)ElfNative.R_ARM_THM_MOVT_PREL << 16) | ElfNative.EM_ARM : return "R_ARM_THM_MOVT_PREL";
                case ((ulong)ElfNative.R_ARM_THM_JUMP19 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_JUMP19";
                case ((ulong)ElfNative.R_ARM_THM_JUMP6 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_JUMP6";
                case ((ulong)ElfNative.R_ARM_THM_ALU_PREL_11_0 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_ALU_PREL_11_0";
                case ((ulong)ElfNative.R_ARM_THM_PC12 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_PC12";
                case ((ulong)ElfNative.R_ARM_ABS32_NOI << 16) | ElfNative.EM_ARM : return "R_ARM_ABS32_NOI";
                case ((ulong)ElfNative.R_ARM_REL32_NOI << 16) | ElfNative.EM_ARM : return "R_ARM_REL32_NOI";
                case ((ulong)ElfNative.R_ARM_ALU_PC_G0_NC << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_PC_G0_NC";
                case ((ulong)ElfNative.R_ARM_ALU_PC_G0 << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_PC_G0";
                case ((ulong)ElfNative.R_ARM_ALU_PC_G1_NC << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_PC_G1_NC";
                case ((ulong)ElfNative.R_ARM_ALU_PC_G1 << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_PC_G1";
                case ((ulong)ElfNative.R_ARM_ALU_PC_G2 << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_PC_G2";
                case ((ulong)ElfNative.R_ARM_LDR_PC_G1 << 16) | ElfNative.EM_ARM : return "R_ARM_LDR_PC_G1";
                case ((ulong)ElfNative.R_ARM_LDR_PC_G2 << 16) | ElfNative.EM_ARM : return "R_ARM_LDR_PC_G2";
                case ((ulong)ElfNative.R_ARM_LDRS_PC_G0 << 16) | ElfNative.EM_ARM : return "R_ARM_LDRS_PC_G0";
                case ((ulong)ElfNative.R_ARM_LDRS_PC_G1 << 16) | ElfNative.EM_ARM : return "R_ARM_LDRS_PC_G1";
                case ((ulong)ElfNative.R_ARM_LDRS_PC_G2 << 16) | ElfNative.EM_ARM : return "R_ARM_LDRS_PC_G2";
                case ((ulong)ElfNative.R_ARM_LDC_PC_G0 << 16) | ElfNative.EM_ARM : return "R_ARM_LDC_PC_G0";
                case ((ulong)ElfNative.R_ARM_LDC_PC_G1 << 16) | ElfNative.EM_ARM : return "R_ARM_LDC_PC_G1";
                case ((ulong)ElfNative.R_ARM_LDC_PC_G2 << 16) | ElfNative.EM_ARM : return "R_ARM_LDC_PC_G2";
                case ((ulong)ElfNative.R_ARM_ALU_SB_G0_NC << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_SB_G0_NC";
                case ((ulong)ElfNative.R_ARM_ALU_SB_G0 << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_SB_G0";
                case ((ulong)ElfNative.R_ARM_ALU_SB_G1_NC << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_SB_G1_NC";
                case ((ulong)ElfNative.R_ARM_ALU_SB_G1 << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_SB_G1";
                case ((ulong)ElfNative.R_ARM_ALU_SB_G2 << 16) | ElfNative.EM_ARM : return "R_ARM_ALU_SB_G2";
                case ((ulong)ElfNative.R_ARM_LDR_SB_G0 << 16) | ElfNative.EM_ARM : return "R_ARM_LDR_SB_G0";
                case ((ulong)ElfNative.R_ARM_LDR_SB_G1 << 16) | ElfNative.EM_ARM : return "R_ARM_LDR_SB_G1";
                case ((ulong)ElfNative.R_ARM_LDR_SB_G2 << 16) | ElfNative.EM_ARM : return "R_ARM_LDR_SB_G2";
                case ((ulong)ElfNative.R_ARM_LDRS_SB_G0 << 16) | ElfNative.EM_ARM : return "R_ARM_LDRS_SB_G0";
                case ((ulong)ElfNative.R_ARM_LDRS_SB_G1 << 16) | ElfNative.EM_ARM : return "R_ARM_LDRS_SB_G1";
                case ((ulong)ElfNative.R_ARM_LDRS_SB_G2 << 16) | ElfNative.EM_ARM : return "R_ARM_LDRS_SB_G2";
                case ((ulong)ElfNative.R_ARM_LDC_SB_G0 << 16) | ElfNative.EM_ARM : return "R_ARM_LDC_SB_G0";
                case ((ulong)ElfNative.R_ARM_LDC_SB_G1 << 16) | ElfNative.EM_ARM : return "R_ARM_LDC_SB_G1";
                case ((ulong)ElfNative.R_ARM_LDC_SB_G2 << 16) | ElfNative.EM_ARM : return "R_ARM_LDC_SB_G2";
                case ((ulong)ElfNative.R_ARM_MOVW_BREL_NC << 16) | ElfNative.EM_ARM : return "R_ARM_MOVW_BREL_NC";
                case ((ulong)ElfNative.R_ARM_MOVT_BREL << 16) | ElfNative.EM_ARM : return "R_ARM_MOVT_BREL";
                case ((ulong)ElfNative.R_ARM_MOVW_BREL << 16) | ElfNative.EM_ARM : return "R_ARM_MOVW_BREL";
                case ((ulong)ElfNative.R_ARM_THM_MOVW_BREL_NC << 16) | ElfNative.EM_ARM : return "R_ARM_THM_MOVW_BREL_NC";
                case ((ulong)ElfNative.R_ARM_THM_MOVT_BREL << 16) | ElfNative.EM_ARM : return "R_ARM_THM_MOVT_BREL";
                case ((ulong)ElfNative.R_ARM_THM_MOVW_BREL << 16) | ElfNative.EM_ARM : return "R_ARM_THM_MOVW_BREL";
                case ((ulong)ElfNative.R_ARM_TLS_GOTDESC << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_GOTDESC";
                case ((ulong)ElfNative.R_ARM_TLS_CALL << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_CALL";
                case ((ulong)ElfNative.R_ARM_TLS_DESCSEQ << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_DESCSEQ";
                case ((ulong)ElfNative.R_ARM_THM_TLS_CALL << 16) | ElfNative.EM_ARM : return "R_ARM_THM_TLS_CALL";
                case ((ulong)ElfNative.R_ARM_PLT32_ABS << 16) | ElfNative.EM_ARM : return "R_ARM_PLT32_ABS";
                case ((ulong)ElfNative.R_ARM_GOT_ABS << 16) | ElfNative.EM_ARM : return "R_ARM_GOT_ABS";
                case ((ulong)ElfNative.R_ARM_GOT_PREL << 16) | ElfNative.EM_ARM : return "R_ARM_GOT_PREL";
                case ((ulong)ElfNative.R_ARM_GOT_BREL12 << 16) | ElfNative.EM_ARM : return "R_ARM_GOT_BREL12";
                case ((ulong)ElfNative.R_ARM_GOTOFF12 << 16) | ElfNative.EM_ARM : return "R_ARM_GOTOFF12";
                case ((ulong)ElfNative.R_ARM_GOTRELAX << 16) | ElfNative.EM_ARM : return "R_ARM_GOTRELAX";
                case ((ulong)ElfNative.R_ARM_GNU_VTENTRY << 16) | ElfNative.EM_ARM : return "R_ARM_GNU_VTENTRY";
                case ((ulong)ElfNative.R_ARM_GNU_VTINHERIT << 16) | ElfNative.EM_ARM : return "R_ARM_GNU_VTINHERIT";
                case ((ulong)ElfNative.R_ARM_THM_PC11 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_PC11";
                case ((ulong)ElfNative.R_ARM_THM_PC9 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_PC9";
                case ((ulong)ElfNative.R_ARM_TLS_GD32 << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_GD32";
                case ((ulong)ElfNative.R_ARM_TLS_LDM32 << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_LDM32";
                case ((ulong)ElfNative.R_ARM_TLS_LDO32 << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_LDO32";
                case ((ulong)ElfNative.R_ARM_TLS_IE32 << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_IE32";
                case ((ulong)ElfNative.R_ARM_TLS_LE32 << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_LE32";
                case ((ulong)ElfNative.R_ARM_TLS_LDO12 << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_LDO12";
                case ((ulong)ElfNative.R_ARM_TLS_LE12 << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_LE12";
                case ((ulong)ElfNative.R_ARM_TLS_IE12GP << 16) | ElfNative.EM_ARM : return "R_ARM_TLS_IE12GP";
                case ((ulong)ElfNative.R_ARM_ME_TOO << 16) | ElfNative.EM_ARM : return "R_ARM_ME_TOO";
                case ((ulong)ElfNative.R_ARM_THM_TLS_DESCSEQ << 16) | ElfNative.EM_ARM : return "R_ARM_THM_TLS_DESCSEQ";
                case ((ulong)ElfNative.R_ARM_THM_TLS_DESCSEQ32 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_TLS_DESCSEQ32";
                case ((ulong)ElfNative.R_ARM_THM_GOT_BREL12 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_GOT_BREL12";
                case ((ulong)ElfNative.R_ARM_IRELATIVE << 16) | ElfNative.EM_ARM : return "R_ARM_IRELATIVE";
                case ((ulong)ElfNative.R_ARM_RXPC25 << 16) | ElfNative.EM_ARM : return "R_ARM_RXPC25";
                case ((ulong)ElfNative.R_ARM_RSBREL32 << 16) | ElfNative.EM_ARM : return "R_ARM_RSBREL32";
                case ((ulong)ElfNative.R_ARM_THM_RPC22 << 16) | ElfNative.EM_ARM : return "R_ARM_THM_RPC22";
                case ((ulong)ElfNative.R_ARM_RREL32 << 16) | ElfNative.EM_ARM : return "R_ARM_RREL32";
                case ((ulong)ElfNative.R_ARM_RABS22 << 16) | ElfNative.EM_ARM : return "R_ARM_RABS22";
                case ((ulong)ElfNative.R_ARM_RPC24 << 16) | ElfNative.EM_ARM : return "R_ARM_RPC24";
                case ((ulong)ElfNative.R_ARM_RBASE << 16) | ElfNative.EM_ARM : return "R_ARM_RBASE";
                case ((ulong)ElfNative.R_X86_64_NONE << 16) | ElfNative.EM_X86_64 : return "R_X86_64_NONE";
                case ((ulong)ElfNative.R_X86_64_64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_64";
                case ((ulong)ElfNative.R_X86_64_PC32 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_PC32";
                case ((ulong)ElfNative.R_X86_64_GOT32 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_GOT32";
                case ((ulong)ElfNative.R_X86_64_PLT32 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_PLT32";
                case ((ulong)ElfNative.R_X86_64_COPY << 16) | ElfNative.EM_X86_64 : return "R_X86_64_COPY";
                case ((ulong)ElfNative.R_X86_64_GLOB_DAT << 16) | ElfNative.EM_X86_64 : return "R_X86_64_GLOB_DAT";
                case ((ulong)ElfNative.R_X86_64_JUMP_SLOT << 16) | ElfNative.EM_X86_64 : return "R_X86_64_JUMP_SLOT";
                case ((ulong)ElfNative.R_X86_64_RELATIVE << 16) | ElfNative.EM_X86_64 : return "R_X86_64_RELATIVE";
                case ((ulong)ElfNative.R_X86_64_GOTPCREL << 16) | ElfNative.EM_X86_64 : return "R_X86_64_GOTPCREL";
                case ((ulong)ElfNative.R_X86_64_32 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_32";
                case ((ulong)ElfNative.R_X86_64_32S << 16) | ElfNative.EM_X86_64 : return "R_X86_64_32S";
                case ((ulong)ElfNative.R_X86_64_16 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_16";
                case ((ulong)ElfNative.R_X86_64_PC16 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_PC16";
                case ((ulong)ElfNative.R_X86_64_8 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_8";
                case ((ulong)ElfNative.R_X86_64_PC8 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_PC8";
                case ((ulong)ElfNative.R_X86_64_DTPMOD64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_DTPMOD64";
                case ((ulong)ElfNative.R_X86_64_DTPOFF64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_DTPOFF64";
                case ((ulong)ElfNative.R_X86_64_TPOFF64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_TPOFF64";
                case ((ulong)ElfNative.R_X86_64_TLSGD << 16) | ElfNative.EM_X86_64 : return "R_X86_64_TLSGD";
                case ((ulong)ElfNative.R_X86_64_TLSLD << 16) | ElfNative.EM_X86_64 : return "R_X86_64_TLSLD";
                case ((ulong)ElfNative.R_X86_64_DTPOFF32 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_DTPOFF32";
                case ((ulong)ElfNative.R_X86_64_GOTTPOFF << 16) | ElfNative.EM_X86_64 : return "R_X86_64_GOTTPOFF";
                case ((ulong)ElfNative.R_X86_64_TPOFF32 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_TPOFF32";
                case ((ulong)ElfNative.R_X86_64_PC64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_PC64";
                case ((ulong)ElfNative.R_X86_64_GOTOFF64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_GOTOFF64";
                case ((ulong)ElfNative.R_X86_64_GOTPC32 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_GOTPC32";
                case ((ulong)ElfNative.R_X86_64_GOT64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_GOT64";
                case ((ulong)ElfNative.R_X86_64_GOTPCREL64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_GOTPCREL64";
                case ((ulong)ElfNative.R_X86_64_GOTPC64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_GOTPC64";
                case ((ulong)ElfNative.R_X86_64_GOTPLT64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_GOTPLT64";
                case ((ulong)ElfNative.R_X86_64_PLTOFF64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_PLTOFF64";
                case ((ulong)ElfNative.R_X86_64_SIZE32 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_SIZE32";
                case ((ulong)ElfNative.R_X86_64_SIZE64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_SIZE64";
                case ((ulong)ElfNative.R_X86_64_GOTPC32_TLSDESC << 16) | ElfNative.EM_X86_64 : return "R_X86_64_GOTPC32_TLSDESC";
                case ((ulong)ElfNative.R_X86_64_TLSDESC_CALL << 16) | ElfNative.EM_X86_64 : return "R_X86_64_TLSDESC_CALL";
                case ((ulong)ElfNative.R_X86_64_TLSDESC << 16) | ElfNative.EM_X86_64 : return "R_X86_64_TLSDESC";
                case ((ulong)ElfNative.R_X86_64_IRELATIVE << 16) | ElfNative.EM_X86_64 : return "R_X86_64_IRELATIVE";
                case ((ulong)ElfNative.R_X86_64_RELATIVE64 << 16) | ElfNative.EM_X86_64 : return "R_X86_64_RELATIVE64";
                default: return null;
            }
        }
    }
    
    public readonly partial struct ElfNoteTypeEx
    {
        /// <summary>
        /// Contains copy of prstatus struct
        /// </summary>
        public static readonly ElfNoteTypeEx PRSTATUS = new ElfNoteTypeEx(ElfNative.NT_PRSTATUS);
        
        /// <summary>
        /// Contains copy of fpregset struct
        /// </summary>
        public static readonly ElfNoteTypeEx FPREGSET = new ElfNoteTypeEx(ElfNative.NT_FPREGSET);
        
        /// <summary>
        /// Contains copy of prpsinfo struct
        /// </summary>
        public static readonly ElfNoteTypeEx PRPSINFO = new ElfNoteTypeEx(ElfNative.NT_PRPSINFO);
        
        /// <summary>
        /// Contains copy of prxregset struct
        /// </summary>
        public static readonly ElfNoteTypeEx PRXREG = new ElfNoteTypeEx(ElfNative.NT_PRXREG);
        
        /// <summary>
        /// Contains copy of task structure
        /// </summary>
        public static readonly ElfNoteTypeEx TASKSTRUCT = new ElfNoteTypeEx(ElfNative.NT_TASKSTRUCT);
        
        /// <summary>
        /// String from sysinfo(SI_PLATFORM)
        /// </summary>
        public static readonly ElfNoteTypeEx PLATFORM = new ElfNoteTypeEx(ElfNative.NT_PLATFORM);
        
        /// <summary>
        /// Contains copy of auxv array
        /// </summary>
        public static readonly ElfNoteTypeEx AUXV = new ElfNoteTypeEx(ElfNative.NT_AUXV);
        
        /// <summary>
        /// Contains copy of gwindows struct
        /// </summary>
        public static readonly ElfNoteTypeEx GWINDOWS = new ElfNoteTypeEx(ElfNative.NT_GWINDOWS);
        
        /// <summary>
        /// Contains copy of asrset struct
        /// </summary>
        public static readonly ElfNoteTypeEx ASRS = new ElfNoteTypeEx(ElfNative.NT_ASRS);
        
        /// <summary>
        /// Contains copy of pstatus struct
        /// </summary>
        public static readonly ElfNoteTypeEx PSTATUS = new ElfNoteTypeEx(ElfNative.NT_PSTATUS);
        
        /// <summary>
        /// Contains copy of psinfo struct
        /// </summary>
        public static readonly ElfNoteTypeEx PSINFO = new ElfNoteTypeEx(ElfNative.NT_PSINFO);
        
        /// <summary>
        /// Contains copy of prcred struct
        /// </summary>
        public static readonly ElfNoteTypeEx PRCRED = new ElfNoteTypeEx(ElfNative.NT_PRCRED);
        
        /// <summary>
        /// Contains copy of utsname struct
        /// </summary>
        public static readonly ElfNoteTypeEx UTSNAME = new ElfNoteTypeEx(ElfNative.NT_UTSNAME);
        
        /// <summary>
        /// Contains copy of lwpstatus struct
        /// </summary>
        public static readonly ElfNoteTypeEx LWPSTATUS = new ElfNoteTypeEx(ElfNative.NT_LWPSTATUS);
        
        /// <summary>
        /// Contains copy of lwpinfo struct
        /// </summary>
        public static readonly ElfNoteTypeEx LWPSINFO = new ElfNoteTypeEx(ElfNative.NT_LWPSINFO);
        
        /// <summary>
        /// Contains copy of fprxregset struct
        /// </summary>
        public static readonly ElfNoteTypeEx PRFPXREG = new ElfNoteTypeEx(ElfNative.NT_PRFPXREG);
        
        /// <summary>
        /// Contains copy of siginfo_t, size might increase
        /// </summary>
        public static readonly ElfNoteTypeEx SIGINFO = new ElfNoteTypeEx(ElfNative.NT_SIGINFO);
        
        /// <summary>
        /// Contains information about mapped files
        /// </summary>
        public static readonly ElfNoteTypeEx FILE = new ElfNoteTypeEx(ElfNative.NT_FILE);
        
        /// <summary>
        /// Contains copy of user_fxsr_struct
        /// </summary>
        public static readonly ElfNoteTypeEx PRXFPREG = new ElfNoteTypeEx(ElfNative.NT_PRXFPREG);
        
        /// <summary>
        /// PowerPC Altivec/VMX registers
        /// </summary>
        public static readonly ElfNoteTypeEx PPC_VMX = new ElfNoteTypeEx(ElfNative.NT_PPC_VMX);
        
        /// <summary>
        /// PowerPC SPE/EVR registers
        /// </summary>
        public static readonly ElfNoteTypeEx PPC_SPE = new ElfNoteTypeEx(ElfNative.NT_PPC_SPE);
        
        /// <summary>
        /// PowerPC VSX registers
        /// </summary>
        public static readonly ElfNoteTypeEx PPC_VSX = new ElfNoteTypeEx(ElfNative.NT_PPC_VSX);
        
        /// <summary>
        /// i386 TLS slots (struct user_desc)
        /// </summary>
        public static readonly ElfNoteTypeEx I386_TLS = new ElfNoteTypeEx(ElfNative.NT_386_TLS);
        
        /// <summary>
        /// x86 io permission bitmap (1=deny)
        /// </summary>
        public static readonly ElfNoteTypeEx I386_IOPERM = new ElfNoteTypeEx(ElfNative.NT_386_IOPERM);
        
        /// <summary>
        /// x86 extended state using xsave
        /// </summary>
        public static readonly ElfNoteTypeEx X86_XSTATE = new ElfNoteTypeEx(ElfNative.NT_X86_XSTATE);
        
        /// <summary>
        /// s390 upper register halves
        /// </summary>
        public static readonly ElfNoteTypeEx S390_HIGH_GPRS = new ElfNoteTypeEx(ElfNative.NT_S390_HIGH_GPRS);
        
        /// <summary>
        /// s390 timer register
        /// </summary>
        public static readonly ElfNoteTypeEx S390_TIMER = new ElfNoteTypeEx(ElfNative.NT_S390_TIMER);
        
        /// <summary>
        /// s390 TOD clock comparator register
        /// </summary>
        public static readonly ElfNoteTypeEx S390_TODCMP = new ElfNoteTypeEx(ElfNative.NT_S390_TODCMP);
        
        /// <summary>
        /// s390 TOD programmable register
        /// </summary>
        public static readonly ElfNoteTypeEx S390_TODPREG = new ElfNoteTypeEx(ElfNative.NT_S390_TODPREG);
        
        /// <summary>
        /// s390 control registers
        /// </summary>
        public static readonly ElfNoteTypeEx S390_CTRS = new ElfNoteTypeEx(ElfNative.NT_S390_CTRS);
        
        /// <summary>
        /// s390 prefix register
        /// </summary>
        public static readonly ElfNoteTypeEx S390_PREFIX = new ElfNoteTypeEx(ElfNative.NT_S390_PREFIX);
        
        /// <summary>
        /// s390 breaking event address
        /// </summary>
        public static readonly ElfNoteTypeEx S390_LAST_BREAK = new ElfNoteTypeEx(ElfNative.NT_S390_LAST_BREAK);
        
        /// <summary>
        /// s390 system call restart data
        /// </summary>
        public static readonly ElfNoteTypeEx S390_SYSTEM_CALL = new ElfNoteTypeEx(ElfNative.NT_S390_SYSTEM_CALL);
        
        /// <summary>
        /// s390 transaction diagnostic block
        /// </summary>
        public static readonly ElfNoteTypeEx S390_TDB = new ElfNoteTypeEx(ElfNative.NT_S390_TDB);
        
        /// <summary>
        /// ARM VFP/NEON registers
        /// </summary>
        public static readonly ElfNoteTypeEx ARM_VFP = new ElfNoteTypeEx(ElfNative.NT_ARM_VFP);
        
        /// <summary>
        /// ARM TLS register
        /// </summary>
        public static readonly ElfNoteTypeEx ARM_TLS = new ElfNoteTypeEx(ElfNative.NT_ARM_TLS);
        
        /// <summary>
        /// ARM hardware breakpoint registers
        /// </summary>
        public static readonly ElfNoteTypeEx ARM_HW_BREAK = new ElfNoteTypeEx(ElfNative.NT_ARM_HW_BREAK);
        
        /// <summary>
        /// ARM hardware watchpoint registers
        /// </summary>
        public static readonly ElfNoteTypeEx ARM_HW_WATCH = new ElfNoteTypeEx(ElfNative.NT_ARM_HW_WATCH);
        
        /// <summary>
        /// Contains a version string.
        /// </summary>
        public static readonly ElfNoteTypeEx VERSION = new ElfNoteTypeEx(ElfNative.NT_VERSION);
        
        public static readonly ElfNoteTypeEx GNU_ABI_TAG = new ElfNoteTypeEx(ElfNative.NT_GNU_ABI_TAG);
        
        public static readonly ElfNoteTypeEx GNU_HWCAP = new ElfNoteTypeEx(ElfNative.NT_GNU_HWCAP);
        
        public static readonly ElfNoteTypeEx GNU_BUILD_ID = new ElfNoteTypeEx(ElfNative.NT_GNU_BUILD_ID);
        
        public static readonly ElfNoteTypeEx GNU_GOLD_VERSION = new ElfNoteTypeEx(ElfNative.NT_GNU_GOLD_VERSION);
        
        private string ToStringInternal()
        {
            switch ((uint)Value)
            {
                case ElfNative.NT_PRSTATUS: return "NT_PRSTATUS";
                case ElfNative.NT_FPREGSET: return "NT_FPREGSET";
                case ElfNative.NT_PRPSINFO: return "NT_PRPSINFO";
                case ElfNative.NT_PRXREG: return "NT_PRXREG";
                case ElfNative.NT_PLATFORM: return "NT_PLATFORM";
                case ElfNative.NT_AUXV: return "NT_AUXV";
                case ElfNative.NT_GWINDOWS: return "NT_GWINDOWS";
                case ElfNative.NT_ASRS: return "NT_ASRS";
                case ElfNative.NT_PSTATUS: return "NT_PSTATUS";
                case ElfNative.NT_PSINFO: return "NT_PSINFO";
                case ElfNative.NT_PRCRED: return "NT_PRCRED";
                case ElfNative.NT_UTSNAME: return "NT_UTSNAME";
                case ElfNative.NT_LWPSTATUS: return "NT_LWPSTATUS";
                case ElfNative.NT_LWPSINFO: return "NT_LWPSINFO";
                case ElfNative.NT_PRFPXREG: return "NT_PRFPXREG";
                case ElfNative.NT_SIGINFO: return "NT_SIGINFO";
                case ElfNative.NT_FILE: return "NT_FILE";
                case ElfNative.NT_PRXFPREG: return "NT_PRXFPREG";
                case ElfNative.NT_PPC_VMX: return "NT_PPC_VMX";
                case ElfNative.NT_PPC_SPE: return "NT_PPC_SPE";
                case ElfNative.NT_PPC_VSX: return "NT_PPC_VSX";
                case ElfNative.NT_386_TLS: return "NT_386_TLS";
                case ElfNative.NT_386_IOPERM: return "NT_386_IOPERM";
                case ElfNative.NT_X86_XSTATE: return "NT_X86_XSTATE";
                case ElfNative.NT_S390_HIGH_GPRS: return "NT_S390_HIGH_GPRS";
                case ElfNative.NT_S390_TIMER: return "NT_S390_TIMER";
                case ElfNative.NT_S390_TODCMP: return "NT_S390_TODCMP";
                case ElfNative.NT_S390_TODPREG: return "NT_S390_TODPREG";
                case ElfNative.NT_S390_CTRS: return "NT_S390_CTRS";
                case ElfNative.NT_S390_PREFIX: return "NT_S390_PREFIX";
                case ElfNative.NT_S390_LAST_BREAK: return "NT_S390_LAST_BREAK";
                case ElfNative.NT_S390_SYSTEM_CALL: return "NT_S390_SYSTEM_CALL";
                case ElfNative.NT_S390_TDB: return "NT_S390_TDB";
                case ElfNative.NT_ARM_VFP: return "NT_ARM_VFP";
                case ElfNative.NT_ARM_TLS: return "NT_ARM_TLS";
                case ElfNative.NT_ARM_HW_BREAK: return "NT_ARM_HW_BREAK";
                case ElfNative.NT_ARM_HW_WATCH: return "NT_ARM_HW_WATCH";
                default: return null;
            }
        }
    }
    
    public enum ElfNoteType : uint
    {
        PRSTATUS = ElfNative.NT_PRSTATUS,
        
        FPREGSET = ElfNative.NT_FPREGSET,
        
        PRPSINFO = ElfNative.NT_PRPSINFO,
        
        PRXREG = ElfNative.NT_PRXREG,
        
        TASKSTRUCT = ElfNative.NT_TASKSTRUCT,
        
        PLATFORM = ElfNative.NT_PLATFORM,
        
        AUXV = ElfNative.NT_AUXV,
        
        GWINDOWS = ElfNative.NT_GWINDOWS,
        
        ASRS = ElfNative.NT_ASRS,
        
        PSTATUS = ElfNative.NT_PSTATUS,
        
        PSINFO = ElfNative.NT_PSINFO,
        
        PRCRED = ElfNative.NT_PRCRED,
        
        UTSNAME = ElfNative.NT_UTSNAME,
        
        LWPSTATUS = ElfNative.NT_LWPSTATUS,
        
        LWPSINFO = ElfNative.NT_LWPSINFO,
        
        PRFPXREG = ElfNative.NT_PRFPXREG,
        
        SIGINFO = ElfNative.NT_SIGINFO,
        
        FILE = ElfNative.NT_FILE,
        
        PRXFPREG = ElfNative.NT_PRXFPREG,
        
        PPC_VMX = ElfNative.NT_PPC_VMX,
        
        PPC_SPE = ElfNative.NT_PPC_SPE,
        
        PPC_VSX = ElfNative.NT_PPC_VSX,
        
        I386_TLS = ElfNative.NT_386_TLS,
        
        I386_IOPERM = ElfNative.NT_386_IOPERM,
        
        X86_XSTATE = ElfNative.NT_X86_XSTATE,
        
        S390_HIGH_GPRS = ElfNative.NT_S390_HIGH_GPRS,
        
        S390_TIMER = ElfNative.NT_S390_TIMER,
        
        S390_TODCMP = ElfNative.NT_S390_TODCMP,
        
        S390_TODPREG = ElfNative.NT_S390_TODPREG,
        
        S390_CTRS = ElfNative.NT_S390_CTRS,
        
        S390_PREFIX = ElfNative.NT_S390_PREFIX,
        
        S390_LAST_BREAK = ElfNative.NT_S390_LAST_BREAK,
        
        S390_SYSTEM_CALL = ElfNative.NT_S390_SYSTEM_CALL,
        
        S390_TDB = ElfNative.NT_S390_TDB,
        
        ARM_VFP = ElfNative.NT_ARM_VFP,
        
        ARM_TLS = ElfNative.NT_ARM_TLS,
        
        ARM_HW_BREAK = ElfNative.NT_ARM_HW_BREAK,
        
        ARM_HW_WATCH = ElfNative.NT_ARM_HW_WATCH,
        
        VERSION = ElfNative.NT_VERSION,
        
        GNU_ABI_TAG = ElfNative.NT_GNU_ABI_TAG,
        
        GNU_HWCAP = ElfNative.NT_GNU_HWCAP,
        
        GNU_BUILD_ID = ElfNative.NT_GNU_BUILD_ID,
        
        GNU_GOLD_VERSION = ElfNative.NT_GNU_GOLD_VERSION,
    }
}
