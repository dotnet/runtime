<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <AssemblyName>ilc</AssemblyName>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <OutputType>Exe</OutputType>
    <TargetFramework>$(NetCoreAppToolCurrent)</TargetFramework>
    <NoWarn>8002,NU1701</NoWarn>
    <Platforms>x64;x86</Platforms>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <AppendTargetFrameworkToOutputPath Condition="'$(BuildingInsideVisualStudio)' == 'true'">true</AppendTargetFrameworkToOutputPath>
    <OutputPath>$(RuntimeBinDir)ilc</OutputPath>
    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
    <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
    <Configurations>Debug;Release;Checked</Configurations>
    <UseAppHost>true</UseAppHost>
    <ServerGarbageCollection>true</ServerGarbageCollection>
    <TieredCompilation>false</TieredCompilation>
  </PropertyGroup>

  <PropertyGroup>
    <SelfContained>true</SelfContained>
    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
    <RuntimeIdentifier>$(__DistroRid)</RuntimeIdentifier>

    <!-- DistroRid is injected through environment variables in build scripts. Provide reasonable default
         when the build is invoked directly, e.g. building inside Visual Studio -->
    <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == '' and '$(TargetsWindows)' == 'true'">win-$(TargetArchitecture)</RuntimeIdentifier>
    <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == '' and '$(TargetsLinux)' == 'true'">linux-$(TargetArchitecture)</RuntimeIdentifier>
    <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == '' and '$(TargetsOSX)' == 'true'">osx-$(TargetArchitecture)</RuntimeIdentifier>
  </PropertyGroup>

  <PropertyGroup>
    <ILCompilerVersion>7.0.0-alpha.1.21455.2</ILCompilerVersion>

    <ObjWriterBuildType>$(Configuration)</ObjWriterBuildType>
    <ObjWriterBuildType Condition="'$(ObjWriterBuildType)' == 'Checked'">Debug</ObjWriterBuildType>

    <ObjWriterArtifactPath Condition="'$(TargetsWindows)' == 'true'">$(ArtifactsDir)llvm-project\llvm\build\$(TargetArchitecture)\$(ObjWriterBuildType)\bin\$(LibPrefix)objwriter$(LibSuffix)</ObjWriterArtifactPath>
    <ObjWriterArtifactPath Condition="'$(TargetsWindows)' != 'true'">$(ArtifactsDir)llvm-project\llvm\build\$(TargetArchitecture)\lib\$(LibPrefix)objwriter$(LibSuffix)</ObjWriterArtifactPath>

    <!-- CoreDisTools are used in debugging visualizers. -->
    <IncludeCoreDisTools Condition="'$(Configuration)' != 'Release'">true</IncludeCoreDisTools>
  </PropertyGroup>

  <Import Project="$(RepositoryEngineeringDir)coredistools.targets" Condition="'$(DotNetBuildFromSource)' != 'true' and '$(IncludeCoreDisTools)' == 'true'" />

  <ItemGroup Condition="Exists('$(ObjWriterArtifactPath)')">
    <Content Include="$(ObjWriterArtifactPath)">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Visible>false</Visible>
      <Pack>false</Pack>
    </Content>
  </ItemGroup>

  <ItemGroup Condition="!Exists('$(ObjWriterArtifactPath)')">
    <PackageReference Include="Microsoft.DotNet.ILCompiler">
      <Version>$(ILCompilerVersion)</Version>
    </PackageReference>

    <Content Include="$(NuGetPackageRoot)runtime.$(RuntimeIdentifier).microsoft.dotnet.ilcompiler\$(ILCompilerVersion)\tools\$(LibPrefix)objwriter$(LibSuffix)">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Visible>false</Visible>
      <Pack>false</Pack>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <Content Include="$(RuntimeBinDir)$(LibPrefix)jitinterface_$(TargetArchitecture)$(LibSuffix)">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Visible>false</Visible>
      <Pack>false</Pack>
    </Content>

    <Content Include="$(RuntimeBinDir)$(LibPrefix)clrjit_*_$(TargetArchitecture)$(LibSuffix)">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Visible>false</Visible>
      <Pack>false</Pack>
    </Content>

    <Content Include="$(CoreDisToolsLibrary)" Condition="Exists('$(CoreDisToolsLibrary)') and '$(IncludeCoreDisTools)' == 'true'">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\ILCompiler.DependencyAnalysisFramework\ILCompiler.DependencyAnalysisFramework.csproj" />
    <ProjectReference Include="..\ILCompiler.MetadataTransform\ILCompiler.MetadataTransform.csproj" />
    <ProjectReference Include="..\ILCompiler.RyuJit\ILCompiler.RyuJit.csproj" />
    <ProjectReference Include="..\ILCompiler.TypeSystem\ILCompiler.TypeSystem.csproj" />
    <ProjectReference Include="..\ILCompiler.Compiler\ILCompiler.Compiler.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="..\..\Common\CommandLine\Argument.cs" />
    <Compile Include="..\..\Common\CommandLine\Argument_1.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentCommand.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentCommand_1.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentLexer.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentList_1.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentParser.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentSyntax.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentSyntax_Definers.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentSyntaxException.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentToken.cs" />
    <Compile Include="..\..\Common\CommandLine\CommandLineException.cs" />
    <Compile Include="..\..\Common\CommandLine\CommandLineHelpers.cs" />
    <Compile Include="..\..\Common\CommandLine\Enumerable.cs" />
    <Compile Include="..\..\Common\CommandLine\HelpTextGenerator.cs" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="..\..\Common\CommandLine\Resources\Strings.resx">
      <GenerateSource>true</GenerateSource>
      <ClassName>Internal.CommandLine.Strings</ClassName>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <Compile Remove="repro\*" />
  </ItemGroup>

  <PropertyGroup>
    <TargetOSComponent>unix</TargetOSComponent>
    <TargetOSComponent Condition="'$(TargetsWindows)' == 'true'">win</TargetOSComponent>
    <TargetSpec>$(TargetOSComponent)_$(TargetArchitecture)_$(TargetArchitecture)</TargetSpec>
  </PropertyGroup>

  <!-- On Windows we can re-use PGO-optimized clrjit.dll produced by the build for AOT compilation.
       On Linux renaming the library makes it difficult to debug it. -->
  <ItemGroup Condition="'$(TargetsWindows)' == 'true'">
    <Content Remove="$(RuntimeBinDir)$(LibPrefix)clrjit_$(TargetSpec)$(LibSuffix)" />
    <Content Include="$(RuntimeBinDir)$(LibPrefix)clrjit$(LibSuffix)"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="PreserveNewest"
      Link="$(LibPrefix)clrjit_$(TargetSpec)$(LibSuffix)"
      />
  </ItemGroup>
</Project>
