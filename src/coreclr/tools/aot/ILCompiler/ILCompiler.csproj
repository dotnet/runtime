<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputPath>$(RuntimeBinDir)ilc/</OutputPath>
    <RuntimeIdentifier>$(PackageRID)</RuntimeIdentifier>
  </PropertyGroup>

  <Import Project="ILCompiler.props" />


  <!-- BEGIN: Workaround for https://github.com/dotnet/runtime/issues/67742 -->
  <PropertyGroup Condition="'$(BuildingInsideVisualStudio)' != 'true'">
    <PublishDir>$(RuntimeBinDir)ilc-published/</PublishDir>
    <NativeAotSupported Condition="'$(TargetOS)' != 'windows' and '$(TargetOS)' != 'linux' and '$(TargetOS)' != 'osx'">false</NativeAotSupported>
    <NativeAotSupported Condition="'$(TargetArchitecture)' != 'x64'">false</NativeAotSupported>
    <PublishAot Condition="'$(NativeAotSupported)' == 'true'">true</PublishAot>
    <SysRoot Condition="'$(NativeAotSupported)' == 'true' and '$(CrossBuild)' == 'true' and '$(HostOS)' != 'windows'">$(ROOTFS_DIR)</SysRoot>
    <PublishReadyToRun Condition="'$(NativeAotSupported)' != 'true'">true</PublishReadyToRun>
    <PublishSingleFile Condition="'$(NativeAotSupported)' != 'true'">true</PublishSingleFile>
    <PublishTrimmed Condition="'$(NativeAotSupported)' != 'true'">true</PublishTrimmed>
  </PropertyGroup>

  <!-- TODO: remove this once we pick up an SDK with https://github.com/dotnet/runtime/pull/82645.
       This works around an incorrect ILC host package name when targeting linux-musl-x64 from linux-x64. -->
  <Target Name="_FixIlcHostArch"
          BeforeTargets="ImportRuntimeIlcPackageTarget">
    <PropertyGroup>
      <_hostOS>$(NETCoreSdkPortableRuntimeIdentifier.SubString(0, $(NETCoreSdkPortableRuntimeIdentifier.LastIndexOf('-'))))</_hostOS>
      <OSIdentifier>$(_hostOS)</OSIdentifier>
      <IlcHostPackageName>runtime.$(OSIdentifier)-$(IlcHostArch).Microsoft.DotNet.ILCompiler</IlcHostPackageName>
    </PropertyGroup>
  </Target>

  <!-- Needed for the amd64 -> amd64 musl cross-build to pass the target flag. -->
  <Target Name="_FixIlcTargetTriple"
          AfterTargets="SetupOSSpecificProps"
          Condition="'$(CrossBuild)' == 'true' and '$(HostOS)' != 'windows'">
    <!-- Compute CrossCompileRid, and copy the downstream logic as-is. -->
    <PropertyGroup>
      <CrossCompileRid>$(RuntimeIdentifier)</CrossCompileRid>

      <CrossCompileArch />
      <CrossCompileArch Condition="$(CrossCompileRid.EndsWith('-x64'))">x86_64</CrossCompileArch>
      <CrossCompileArch Condition="$(CrossCompileRid.EndsWith('-arm64')) and '$(_IsApplePlatform)' != 'true'">aarch64</CrossCompileArch>
      <CrossCompileArch Condition="$(CrossCompileRid.EndsWith('-arm64')) and '$(_IsApplePlatform)' == 'true'">arm64</CrossCompileArch>

      <TargetTriple />
      <TargetTriple Condition="'$(CrossCompileArch)' != ''">$(CrossCompileArch)-linux-gnu</TargetTriple>
      <TargetTriple Condition="'$(CrossCompileArch)' != '' and ($(CrossCompileRid.StartsWith('linux-musl')) or $(CrossCompileRid.StartsWith('alpine')))">$(CrossCompileArch)-alpine-linux-musl</TargetTriple>
      <TargetTriple Condition="'$(CrossCompileArch)' != '' and ($(CrossCompileRid.StartsWith('freebsd')))">$(CrossCompileArch)-unknown-freebsd12</TargetTriple>
    </PropertyGroup>

    <ItemGroup>
      <LinkerArg Include="--target=$(TargetTriple)" Condition="'$(TargetOS)' != 'osx' and '$(TargetTriple)' != ''" />
    </ItemGroup>
  </Target>

<Target Name="LocateNativeCompiler"
          Condition="'$(NativeAotSupported)' == 'true' and '$(HostOS)' != 'windows'"
          BeforeTargets="SetupOSSpecificProps">
    <PropertyGroup>
      <CppCompilerAndLinker Condition="'$(CppCompilerAndLinker)' == ''">clang</CppCompilerAndLinker>
      <!-- TODO: change to <LinkerFlavor>lld</LinkerFlavor> once we pick up an SDK with https://github.com/dotnet/runtime/pull/83558. -->
      <UseLLVMLinker Condition="'$(CppCompilerAndLinker)' == 'clang' and '$(TargetOS)' == 'linux'">true</UseLLVMLinker>
    </PropertyGroup>

    <Exec Command="sh -c 'build_arch=&quot;$(TargetArchitecture)&quot; compiler=&quot;$(CppCompilerAndLinker)&quot; . &quot;$(RepositoryEngineeringDir)/common/native/init-compiler.sh&quot; &amp;&amp; echo $CC' 2>/dev/null"
          EchoOff="true"
          ConsoleToMsBuild="true"
          StandardOutputImportance="Low">
      <Output TaskParameter="ConsoleOutput" PropertyName="CppLinker" />
    </Exec>
  </Target>

  <ItemGroup Condition="'$(NativeAotSupported)' == 'true'">
    <CustomLinkerArg Condition="'$(CrossBuild)' == 'true' and '$(IlcHostArch)' == '$(TargetArchitecture)' and '$(_hostOS)' != 'windows'" Include="--gcc-toolchain=$(ROOTFS_DIR)/usr" />
  </ItemGroup>

  <Target Name="PublishCompiler"
          Condition="'$(BuildingInsideVisualStudio)' != 'true'"
          AfterTargets="Build"
          DependsOnTargets="Publish;StompSingleFileHostPath" />

  <!--  HACK: liveBuilds stomps over SingleFileHostSourcePath, setting it to the host that we just built.
        That's unfortunate because it's not the host we're supposed to use here. -->
  <Target Name="StompSingleFileHostPath"
          BeforeTargets="ResolveFrameworkReferences">
    <PropertyGroup>
      <SingleFileHostSourcePath></SingleFileHostSourcePath>
    </PropertyGroup>
  </Target>
  <!-- END: Workaround for https://github.com/dotnet/runtime/issues/67742 -->
</Project>
