<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <AssemblyName>crossgen2</AssemblyName>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <OutputType>Exe</OutputType>
    <TargetFramework>$(NetCoreAppToolCurrent)</TargetFramework>
    <NoWarn>8002,NU1701</NoWarn>
    <Platforms>x64;x86;arm64;arm</Platforms>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <AppendTargetFrameworkToOutputPath Condition="'$(BuildingInsideVisualStudio)' == 'true'">true</AppendTargetFrameworkToOutputPath>
    <OutputPath>$(RuntimeBinDir)/crossgen2</OutputPath>
    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
    <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
    <RuntimeIdentifiers>linux-x64;linux-musl-x64;osx-x64;win-x64</RuntimeIdentifiers>
    <Configurations>Debug;Release;Checked</Configurations>
    <ServerGarbageCollection>true</ServerGarbageCollection>
    <!-- The default value for macOS is false -->
    <UseAppHost>true</UseAppHost>
  </PropertyGroup>

  <ItemGroup Label="Embedded Resources">
    <EmbeddedResource Include="Properties\Resources.resx">
      <GenerateSource>true</GenerateSource>
      <ClassName>System.SR</ClassName>
    </EmbeddedResource>

    <EmbeddedResource Include="..\..\Common\CommandLine\Resources\Strings.resx">
      <GenerateSource>true</GenerateSource>
      <ClassName>Internal.CommandLine.Strings</ClassName>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\ILCompiler.DependencyAnalysisFramework\ILCompiler.DependencyAnalysisFramework.csproj" />
    <ProjectReference Include="..\ILCompiler.TypeSystem.ReadyToRun\ILCompiler.TypeSystem.ReadyToRun.csproj" />
    <ProjectReference Include="..\ILCompiler.ReadyToRun\ILCompiler.ReadyToRun.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="..\..\Common\CommandLine\Argument.cs" />
    <Compile Include="..\..\Common\CommandLine\Argument_1.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentCommand.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentCommand_1.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentLexer.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentList_1.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentParser.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentSyntax.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentSyntax_Definers.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentSyntaxException.cs" />
    <Compile Include="..\..\Common\CommandLine\ArgumentToken.cs" />
    <Compile Include="..\..\Common\CommandLine\CommandLineException.cs" />
    <Compile Include="..\..\Common\CommandLine\CommandLineHelpers.cs" />
    <Compile Include="..\..\Common\CommandLine\Enumerable.cs" />
    <Compile Include="..\..\Common\CommandLine\HelpTextGenerator.cs" />
  </ItemGroup>

  <PropertyGroup>
    <CrossHostArch></CrossHostArch>
    <CrossHostArch Condition="'$(TargetArchitecture)' != 'x64' and '$(BuildArchitecture)' == 'x64'">x64</CrossHostArch>

    <TargetOSComponent>unix</TargetOSComponent>
    <TargetOSComponent Condition="'$(TargetOS)' == 'windows'">win</TargetOSComponent>

    <TargetArchitectureForSharedLibraries>$(TargetArchitecture)</TargetArchitectureForSharedLibraries>
    <TargetArchitectureForSharedLibraries Condition="'$(TargetArchitecture)'=='armel'">arm</TargetArchitectureForSharedLibraries>

    <TargetSpec>$(TargetOSComponent)_$(TargetArchitectureForSharedLibraries)_$(TargetArchitectureForSharedLibraries)</TargetSpec>
    <CrossTargetSpec>$(TargetOSComponent)_$(TargetArchitectureForSharedLibraries)_$(CrossHostArch)</CrossTargetSpec>

    <JitInterfaceLibraryName>$(LibPrefix)jitinterface_$(TargetArchitectureForSharedLibraries)$(LibSuffix)</JitInterfaceLibraryName>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="$(RuntimeBinDir)$(JitInterfaceLibraryName)"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="PreserveNewest"
      Link="%(FileName)%(Extension)"
      />

    <Content Include="$(RuntimeBinDir)$(NativeArchFolder)$(LibPrefix)clrjit_*_$(TargetArchitectureForSharedLibraries)$(LibSuffix)"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="PreserveNewest"
      Link="%(FileName)%(Extension)"
      />
  </ItemGroup>

  <!-- On windows we can re-use the clrjit.dll produced in the build for aot compilation. On Linux
       this works at runtime, but makes it difficult to debug the jit.-->
  <ItemGroup Condition="'$(TargetOS)' == 'windows'">
    <Content Remove="$(RuntimeBinDir)$(LibPrefix)clrjit_$(TargetSpec)$(LibSuffix)" />
    <Content Include="$(RuntimeBinDir)$(NativeArchFolder)$(LibPrefix)clrjit$(LibSuffix)"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="PreserveNewest"
      Link="$(LibPrefix)clrjit_$(TargetSpec)$(LibSuffix)"
      />

    <Content Include="$(RuntimeBinDir)/pgort*.dll"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="PreserveNewest"
      Link="%(FileName)%(Extension)"
      Condition="'$(PgoInstrument)' != ''"
      />

    <PackageReference Include="Microsoft.DiaSymReader.Native"
      Version="$(MicrosoftDiaSymReaderNativeVersion)"
      IsImplicitlyDefined="true"
      ExcludeAssets="all"
      GeneratePathProperty="true"
      />
  </ItemGroup>

  <PropertyGroup Condition="'$(TargetOS)' == 'windows'">
    <!-- DiaSymReader for the host architecture, which is used for cross-compilation -->
    <DiaSymReaderCrossArch>$(CrossHostArch)</DiaSymReaderCrossArch>
    <DiaSymReaderCrossArch Condition="'$(CrossHostArch)' == 'x64'">amd64</DiaSymReaderCrossArch>
    <DiaSymReaderCrossArchFileName>Microsoft.DiaSymReader.Native.$(DiaSymReaderCrossArch).dll</DiaSymReaderCrossArchFileName>
    <DiaSymReaderCrossArchPath>$(PkgMicrosoft_DiaSymReader_Native)\runtimes\win\native\$(DiaSymReaderCrossArchFileName)</DiaSymReaderCrossArchPath>

    <!-- DiaSymReader for the target architecture, which is placed into the package -->
    <DiaSymReaderTargetArch>$(TargetArchitecture)</DiaSymReaderTargetArch>
    <DiaSymReaderTargetArch Condition="'$(TargetArchitecture)' == 'x64'">amd64</DiaSymReaderTargetArch>
    <DiaSymReaderTargetArchFileName>Microsoft.DiaSymReader.Native.$(DiaSymReaderTargetArch).dll</DiaSymReaderTargetArchFileName>
    <DiaSymReaderTargetArchPath>$(PkgMicrosoft_DiaSymReader_Native)\runtimes\win\native\$(DiaSymReaderTargetArchFileName)</DiaSymReaderTargetArchPath>
  </PropertyGroup>

  <ItemGroup Condition="'$(TargetOS)' == 'windows'">
    <Content Include="$(DiaSymReaderTargetArchPath)"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="PreserveNewest"
      Link="%(FileName)%(Extension)"
      />
  </ItemGroup>

  <Target Name="CreateCrossTargetingPackage" AfterTargets="Build" Condition="'$(CrossHostArch)' != ''">
    <PropertyGroup>
      <CrossPackageFolder>$(RuntimeBinDir)$(CrossHostArch)\crossgen2</CrossPackageFolder>
    </PropertyGroup>

    <ItemGroup>
      <!-- The list of files specific to the target architecture, which we need to replace -->
      <TargetArchSpecificFiles Include="$(JitInterfaceLibraryName);$(LibPrefix)clrjit_*$(LibSuffix)" />
      <TargetArchSpecificFiles Include="$(DiaSymReaderTargetArchFileName)" Condition="'$(TargetOS)' == 'windows'" />

      <PackageFile Include="$(RuntimeBinDir)crossgen2\*" Exclude="@(TargetArchSpecificFiles->'$(RuntimeBinDir)crossgen2\%(Identity)')" />
      <PackageFile Include="$(RuntimeBinDir)$(CrossHostArch)\$(LibPrefix)jitinterface_$(CrossHostArch)$(LibSuffix)" />
      <PackageFile Include="$(DiaSymReaderCrossArchPath)" Condition="'$(TargetOS)' == 'windows'" />
    </ItemGroup>

    <MakeDir Directories="$(CrossPackageFolder)" />
    <Copy
      SourceFiles="@(PackageFile)"
      DestinationFiles="@(PackageFile->'$(CrossPackageFolder)\%(FileName)%(Extension)')"
      UseHardLinksIfPossible="true"
      />

    <Copy
      Condition="'$(TargetOS)' != 'windows'"
      SourceFiles="$(RuntimeBinDir)$(CrossHostArch)\$(LibPrefix)clrjit_$(CrossTargetSpec)$(LibSuffix)"
      DestinationFolder="$(CrossPackageFolder)"
      UseHardLinksIfPossible="true"
      />
    <Copy
      Condition="'$(TargetOS)' == 'windows'"
      SourceFiles="$(RuntimeBinDir)$(CrossHostArch)\$(LibPrefix)clrjit$(LibSuffix)"
      DestinationFiles="$(CrossPackageFolder)\$(LibPrefix)clrjit_$(CrossTargetSpec)$(LibSuffix)"
      UseHardLinksIfPossible="true"
      />

  </Target>
</Project>
