// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

/******************************************************************************
 * This file is auto-generated from a template file by the GenerateTests.csx  *
 * script in tests\src\JIT\HardwareIntrinsics.Arm\Shared. In order to make    *
 * changes, please update the corresponding template and run according to the *
 * directions listed in the file.                                             *
 ******************************************************************************/

using System;
using System.Linq;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.Arm;
using Xunit;

namespace JIT.HardwareIntrinsics.Arm
{
    public static partial class Program
    {
        [Fact]
        public static void {TestName}()
        {
            var test = new {TemplateName}BinaryOpTest__{TestName}();

            if (test.IsSupported)
            {
                // Validates basic functionality works, using Unsafe.Read
                test.RunBasicScenario_UnsafeRead();

                if ({LoadIsa}.IsSupported)
                {
                    // Validates basic functionality works, using Load
                    test.RunBasicScenario_Load();
                }

                // Validates calling via reflection works, using Unsafe.Read
                test.RunReflectionScenario_UnsafeRead();

                // Validates passing a local works, using Unsafe.Read
                test.RunLclVarScenario_UnsafeRead();

                // Validates using the same local multiple times works, using Unsafe.Read
                test.RunSameLclVarScenario_UnsafeRead();

                // Validates passing an instance member of a class works
                test.RunClassFldScenario();

                // Validates using the same instance member of a class multiple times works
                test.RunSameClassFldScenario();

                // Validates passing the field of a local struct works
                test.RunStructLclFldScenario();

                // Validates passing an instance member of a struct works
                test.RunStructFldScenario();

                // Validates executing the test inside conditional, with op1 as falseValue
                test.ConditionalSelect_Op1();

                // Validates executing the test inside conditional, with op2 as falseValue
                test.ConditionalSelect_Op2();

                // Validates executing the test inside conditional, with op3 as falseValue
                test.ConditionalSelect_FalseOp();

                // Validates executing the test inside conditional, with op3 as zero
                test.ConditionalSelect_ZeroOp();
            }
            else
            {
                // Validates we throw on unsupported hardware
                test.RunUnsupportedScenario();
            }

            if (!test.Succeeded)
            {
                throw new Exception("One or more scenarios did not complete as expected.");
            }
        }
    }

    public sealed unsafe class {TemplateName}BinaryOpTest__{TestName}
    {
        private struct TestStruct
        {
            public Vector<{Op1BaseType}> _fld1;
            public Vector<{Op2BaseType}> _fld2;

            public static TestStruct Create(Vector<{Op1BaseType}> op1, Vector<{Op2BaseType}> op2)
            {
                var testStruct = new TestStruct();
                testStruct._fld1 = op1;
                testStruct._fld2 = op2;
                return testStruct;
            }

            public void RunStructFldScenario({TemplateName}BinaryOpTest__{TestName} testClass)
            {
                var result = {Isa}.{Method}(_fld1, _fld2);
                testClass.ValidateResult(_fld1, _fld2, result);
            }
        }

        private static readonly int LargestVectorSize = {LargestVectorSize};

        private static readonly int Op1ElementCount = Unsafe.SizeOf<Vector<{Op1BaseType}>>() / sizeof({Op1BaseType});
        private static readonly int Op2ElementCount = Unsafe.SizeOf<Vector<{Op2BaseType}>>() / sizeof({Op2BaseType});
        private static readonly int RetElementCount = Unsafe.SizeOf<Vector<{RetBaseType}>>() / sizeof({RetBaseType});

        private Vector<{RetBaseType}> _mask;
        private Vector<{Op1BaseType}> _fld1;
        private Vector<{Op2BaseType}> _fld2;
        private Vector<{Op2BaseType}> _falseFld;
        private TestLibrary.Vectors.PinnedVector<{Op1BaseType}> _pinnedOp1;
        private TestLibrary.Vectors.PinnedVector<{Op2BaseType}> _pinnedOp2;

        public {TemplateName}BinaryOpTest__{TestName}()
        {
            Succeeded = true;

            _mask = TestLibrary.Vectors.GetRandomMask<{RetBaseType}>();
            _fld1 = TestLibrary.Vectors.GetRandomVector<{Op1BaseType}>();
            _fld2 = TestLibrary.Vectors.GetRandomVector<{Op2BaseType}>();
            _falseFld = _fld2;
            _pinnedOp1 = new TestLibrary.Vectors.PinnedVector<{Op1BaseType}>(_fld1, LargestVectorSize);
            _pinnedOp2 = new TestLibrary.Vectors.PinnedVector<{Op2BaseType}>(_fld2, LargestVectorSize);
        }

        public bool IsSupported => {Isa}.IsSupported;

        public bool Succeeded { get; set; }

        public void RunBasicScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_UnsafeRead));

            var result = {Isa}.{Method}(_pinnedOp1.Value, _pinnedOp2.Value);

            ValidateResult(_pinnedOp1.Value, _pinnedOp2.Value, result);
        }

        public void RunBasicScenario_Load()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_Load));

            Vector<{Op1BaseType}> loadMask = Sve.CreateTrueMask{Op1BaseType}(SveMaskPattern.All);

            var result = {Isa}.{Method}(
                {LoadIsa}.LoadVector(loadMask, ({Op1BaseType}*)(_pinnedOp1.Ptr)),
                {LoadIsa}.LoadVector(loadMask, ({Op2BaseType}*)(_pinnedOp2.Ptr))
            );

            ValidateResult(_pinnedOp1.Value, _pinnedOp2.Value, result);
        }

        public void RunReflectionScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunReflectionScenario_UnsafeRead));

            var result = typeof({Isa}).GetMethod(nameof({Isa}.{Method}), new Type[] { typeof(Vector<{Op1BaseType}>), typeof(Vector<{Op2BaseType}>) })
                                     .Invoke(null, new object[] { _pinnedOp1.Value, _pinnedOp2.Value });

            ValidateResult(_pinnedOp1.Value, _pinnedOp2.Value, (Vector<{RetBaseType}>)(result));
        }

        public void RunLclVarScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunLclVarScenario_UnsafeRead));

            var op1 = _pinnedOp1.Value;
            var op2 = _pinnedOp2.Value;
            var result = {Isa}.{Method}(op1, op2);

            ValidateResult(op1, op2, result);
        }

        public void RunSameLclVarScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunSameLclVarScenario_UnsafeRead));

            var op = _pinnedOp1.Value;
            var op1 = op;
            var op2 = op;
            var result = {Isa}.{Method}(op1, op2);

            ValidateResult(op1, op2, result);
        }

        public void RunClassFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunClassFldScenario));

            var result = {Isa}.{Method}(_fld1, _fld2);

            ValidateResult(_fld1, _fld2, result);
        }

        public void RunSameClassFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunSameClassFldScenario));

            var result = {Isa}.{Method}(_fld1, _fld1);

            ValidateResult(_fld1, _fld1, result);
        }

        public void RunStructLclFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunStructLclFldScenario));

            var test = TestStruct.Create(_fld1, _fld2);
            var result = {Isa}.{Method}(test._fld1, test._fld2);

            ValidateResult(test._fld1, test._fld2, result);
        }

        public void RunStructFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunStructFldScenario));

            var test = TestStruct.Create(_fld1, _fld2);
            test.RunStructFldScenario(this);
        }

        public void ConditionalSelect_Op1()
        {
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_mask - operation in TrueValue");
            ConditionalSelectScenario_TrueValue(_mask, _fld1, _fld2, _fld1);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_zero - operation in TrueValue");
            ConditionalSelectScenario_TrueValue(Vector<{RetBaseType}>.Zero, _fld1, _fld2, _fld1);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_all - operation in TrueValue");
            ConditionalSelectScenario_TrueValue(Vector<{RetBaseType}>.AllBitsSet, _fld1, _fld2, _fld1);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_mask - operation in FalseValue");
            ConditionalSelectScenario_FalseValue(_mask, _fld1, _fld2, _fld1);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_zero - operation in FalseValue");
            ConditionalSelectScenario_FalseValue(Vector<{RetBaseType}>.Zero, _fld1, _fld2, _fld1);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_all - operation in FalseValue");
            ConditionalSelectScenario_FalseValue(Vector<{RetBaseType}>.AllBitsSet, _fld1, _fld2, _fld1);
        }

        public void ConditionalSelect_Op2()
        {
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op2_mask - operation in TrueValue");
            ConditionalSelectScenario_TrueValue(_mask, _fld1, _fld2, _fld2);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op2_zero - operation in TrueValue");
            ConditionalSelectScenario_TrueValue(Vector<{RetBaseType}>.Zero, _fld1, _fld2, _fld2);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op2_all - operation in TrueValue");
            ConditionalSelectScenario_TrueValue(Vector<{RetBaseType}>.AllBitsSet, _fld1, _fld2, _fld2);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op2_mask - operation in FalseValue");
            ConditionalSelectScenario_FalseValue(_mask, _fld1, _fld2, _fld2);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op2_zero - operation in FalseValue");
            ConditionalSelectScenario_FalseValue(Vector<{RetBaseType}>.Zero, _fld1, _fld2, _fld2);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op2_all - operation in FalseValue");
            ConditionalSelectScenario_FalseValue(Vector<{RetBaseType}>.AllBitsSet, _fld1, _fld2, _fld2);
        }

        public void ConditionalSelect_FalseOp()
        {
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_mask - operation in TrueValue");
            ConditionalSelectScenario_TrueValue(_mask, _fld1, _fld2, _falseFld);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_zero - operation in TrueValue");
            ConditionalSelectScenario_TrueValue(Vector<{RetBaseType}>.Zero, _fld1, _fld2, _falseFld);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_all - operation in TrueValue");
            ConditionalSelectScenario_TrueValue(Vector<{RetBaseType}>.AllBitsSet, _fld1, _fld2, _falseFld);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_mask - operation in FalseValue");
            ConditionalSelectScenario_FalseValue(_mask, _fld1, _fld2, _falseFld);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_zero - operation in FalseValue");
            ConditionalSelectScenario_FalseValue(Vector<{RetBaseType}>.Zero, _fld1, _fld2, _falseFld);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_all - operation in FalseValue");
            ConditionalSelectScenario_FalseValue(Vector<{RetBaseType}>.AllBitsSet, _fld1, _fld2, _falseFld);
        }

        public void ConditionalSelect_ZeroOp()
        {
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_mask - operation in TrueValue");
            ConditionalSelectScenario_TrueValue(_mask, _fld1, _fld2, Vector<{RetBaseType}>.Zero);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_zero - operation in TrueValue");
            ConditionalSelectScenario_TrueValue(Vector<{RetBaseType}>.Zero, _fld1, _fld2, Vector<{RetBaseType}>.Zero);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_all - operation in TrueValue");
            ConditionalSelectScenario_TrueValue(Vector<{RetBaseType}>.AllBitsSet, _fld1, _fld2, Vector<{RetBaseType}>.Zero);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_mask - operation in FalseValue");
            ConditionalSelectScenario_FalseValue(_mask, _fld1, _fld2, Vector<{RetBaseType}>.Zero);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_zero - operation in FalseValue");
            ConditionalSelectScenario_FalseValue(Vector<{RetBaseType}>.Zero, _fld1, _fld2, Vector<{RetBaseType}>.Zero);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_all - operation in FalseValue");
            ConditionalSelectScenario_FalseValue(Vector<{RetBaseType}>.AllBitsSet, _fld1, _fld2, Vector<{RetBaseType}>.Zero);
        }

        [method: MethodImpl(MethodImplOptions.AggressiveInlining)]
        private void ConditionalSelectScenario_TrueValue(Vector<{RetBaseType}> mask, Vector<{Op1BaseType}> op1, Vector<{Op2BaseType}> op2, Vector<{RetBaseType}> falseOp)
        {
            var result = Sve.ConditionalSelect(mask, {Isa}.{Method}(op1, op2), falseOp);
            ValidateConditionalSelectResult(mask, op1, op2, falseOp, result);
        }

        [method: MethodImpl(MethodImplOptions.AggressiveInlining)]
        private void ConditionalSelectScenario_FalseValue(Vector<{RetBaseType}> mask, Vector<{Op1BaseType}> op1, Vector<{Op2BaseType}> op2, Vector<{RetBaseType}> trueOp)
        {
            var result = Sve.ConditionalSelect(mask, trueOp, {Isa}.{Method}(op1, op2));
            ValidateConditionalSelectResult(mask, op1, op2, trueOp, result, false);
        }

        public void RunUnsupportedScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunUnsupportedScenario));

            bool succeeded = false;

            try
            {
                RunBasicScenario_UnsafeRead();
            }
            catch (PlatformNotSupportedException)
            {
                succeeded = true;
            }

            if (!succeeded)
            {
                Succeeded = false;
            }
        }

        private void ValidateConditionalSelectResult(
            Vector<{RetBaseType}> maskOp,
            Vector<{Op1BaseType}> leftOp,
            Vector<{Op2BaseType}> rightOp,
            Vector<{RetBaseType}> falseOp,
            Vector<{RetBaseType}> output,
            bool trueMode = true,
            [CallerMemberName] string method = "")
        {
            {RetBaseType}[] mask = new {RetBaseType}[RetElementCount];
            {Op1BaseType}[] left = new {Op1BaseType}[Op1ElementCount];
            {Op1BaseType}[] right = new {Op2BaseType}[Op2ElementCount];
            {RetBaseType}[] falseVal = new {RetBaseType}[RetElementCount];
            {RetBaseType}[] result = new {RetBaseType}[RetElementCount];

            TestLibrary.Vectors.VectorToArray(ref mask, maskOp);
            TestLibrary.Vectors.VectorToArray(ref left, leftOp);
            TestLibrary.Vectors.VectorToArray(ref right, rightOp);
            TestLibrary.Vectors.VectorToArray(ref falseVal, falseOp);
            TestLibrary.Vectors.VectorToArray(ref result, output);

            bool succeeded = true;

            if (trueMode)
            {
                {TemplateValidationLogicForCndSel}
            }
            else
            {
                {RetBaseType}[] trueVal = falseVal;
                {TemplateValidationLogicForCndSel_FalseValue}
            }

            if (!succeeded)
            {
                TestLibrary.TestFramework.LogInformation($"{nameof({Isa})}.{nameof({Isa}.{Method})}<{RetBaseType}>({Op1VectorType}<{Op1BaseType}>, {Op2VectorType}<{Op2BaseType}>): {method} failed:");
                TestLibrary.TestFramework.LogInformation($"    mask: ({string.Join(", ", mask)})");
                TestLibrary.TestFramework.LogInformation($"    left: ({string.Join(", ", left)})");
                TestLibrary.TestFramework.LogInformation($"   right: ({string.Join(", ", right)})");
                TestLibrary.TestFramework.LogInformation($" falseOp: ({string.Join(", ", falseVal)})");
                TestLibrary.TestFramework.LogInformation($"  result: ({string.Join(", ", result)})");
                TestLibrary.TestFramework.LogInformation(string.Empty);

                Succeeded = false;
            }
        }

        private void ValidateResult(Vector<{Op1BaseType}> op1, Vector<{Op2BaseType}> op2, Vector<{RetBaseType}> output, [CallerMemberName] string method = "")
        {
            {Op1BaseType}[] left = new {Op1BaseType}[Op1ElementCount];
            {Op2BaseType}[] right = new {Op2BaseType}[Op2ElementCount];
            {RetBaseType}[] result = new {RetBaseType}[RetElementCount];

            TestLibrary.Vectors.VectorToArray(ref left, op1);
            TestLibrary.Vectors.VectorToArray(ref right, op2);
            TestLibrary.Vectors.VectorToArray(ref result, output);

            bool succeeded = true;

            {TemplateValidationLogic}

            if (!succeeded)
            {
                TestLibrary.TestFramework.LogInformation($"{nameof({Isa})}.{nameof({Isa}.{Method})}<{RetBaseType}>({Op1VectorType}<{Op1BaseType}>, {Op2VectorType}<{Op2BaseType}>): {method} failed:");
                TestLibrary.TestFramework.LogInformation($"    left: ({string.Join(", ", left)})");
                TestLibrary.TestFramework.LogInformation($"   right: ({string.Join(", ", right)})");
                TestLibrary.TestFramework.LogInformation($"  result: ({string.Join(", ", result)})");
                TestLibrary.TestFramework.LogInformation(string.Empty);

                Succeeded = false;
            }
        }
    }
}
