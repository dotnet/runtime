// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

/******************************************************************************
 * This file is auto-generated from a template file by the GenerateTests.csx  *
 * script in tests\src\JIT\HardwareIntrinsics.Arm\Shared. In order to make    *
 * changes, please update the corresponding template and run according to the *
 * directions listed in the file.                                             *
 ******************************************************************************/

using System;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.Arm;
using Xunit;

namespace JIT.HardwareIntrinsics.Arm
{
    public static partial class Program
    {
        [Fact]
        public static void {TestName}()
        {
            var test = new {TemplateName}UnaryOpTest__{TestName}();

            if (test.IsSupported)
            {
                // Validates basic functionality works, using Unsafe.Read
                test.RunBasicScenario_UnsafeRead();

                if ({LoadIsa}.IsSupported)
                {
                    // Validates basic functionality works, using Load
                    test.RunBasicScenario_Load();
                }

                // Validates calling via reflection works, using Unsafe.Read
                test.RunReflectionScenario_UnsafeRead();

                // Validates passing a local works, using Unsafe.Read
                test.RunLclVarScenario_UnsafeRead();

                // Validates passing an instance member of a class works
                test.RunClassFldScenario();

                // Validates passing the field of a local struct works
                test.RunStructLclFldScenario();

                // Validates passing an instance member of a struct works
                test.RunStructFldScenario();
                // Validates executing the test inside conditional, with op1 as falseValue
                test.ConditionalSelect_Op1();
                // Validates executing the test inside conditional, with op3 as falseValue
                test.ConditionalSelect_FalseOp();
                // Validates executing the test inside conditional, with op3 as zero
                test.ConditionalSelect_ZeroOp();

                // Validates basic functionality fails with an invalid imm, using Unsafe.ReadUnaligned
                test.RunBasicScenario_UnsafeRead_InvalidImm();
            }
            else
            {
                // Validates we throw on unsupported hardware
                test.RunUnsupportedScenario();
            }

            if (!test.Succeeded)
            {
                throw new Exception("One or more scenarios did not complete as expected.");
            }
        }
    }

    public sealed unsafe class {TemplateName}UnaryOpTest__{TestName}
    {
        private struct DataTable
        {
            private byte[] inArray;
            private byte[] outArray;

            private GCHandle inHandle;
            private GCHandle outHandle;

            private ulong alignment;

            public DataTable({Op1BaseType}[] inArray, {RetBaseType}[] outArray, int alignment)
            {
                int sizeOfinArray = inArray.Length * Unsafe.SizeOf<{Op1BaseType}>();
                int sizeOfoutArray = outArray.Length * Unsafe.SizeOf<{RetBaseType}>();
                if ((alignment != 64 && alignment != 16 && alignment != 8) || (alignment * 2) < sizeOfinArray || (alignment * 2) < sizeOfoutArray)
                {
                    throw new ArgumentException("Invalid value of alignment");
                }

                this.inArray = new byte[alignment * 2];
                this.outArray = new byte[alignment * 2];

                this.inHandle = GCHandle.Alloc(this.inArray, GCHandleType.Pinned);
                this.outHandle = GCHandle.Alloc(this.outArray, GCHandleType.Pinned);

                this.alignment = (ulong)alignment;

                Unsafe.CopyBlockUnaligned(ref Unsafe.AsRef<byte>(inArrayPtr), ref Unsafe.As<{Op1BaseType}, byte>(ref inArray[0]), (uint)sizeOfinArray);
            }

            public void* inArrayPtr => Align((byte*)(inHandle.AddrOfPinnedObject().ToPointer()), alignment);
            public void* outArrayPtr => Align((byte*)(outHandle.AddrOfPinnedObject().ToPointer()), alignment);

            public void Dispose()
            {
                inHandle.Free();
                outHandle.Free();
            }

            private static unsafe void* Align(byte* buffer, ulong expectedAlignment)
            {
                return (void*)(((ulong)buffer + expectedAlignment - 1) & ~(expectedAlignment - 1));
            }
        }

        private struct TestStruct
        {
            public {Op1VectorType}<{Op1BaseType}> _fld;
            public byte _imm;

            public static TestStruct Create()
            {
                var testStruct = new TestStruct();

                for (var i = 0; i < Op1ElementCount; i++) { _data[i] = {NextValueOp1}; }
                Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op1VectorType}<{Op1BaseType}>, byte>(ref testStruct._fld), ref Unsafe.As<{Op1BaseType}, byte>(ref _data[0]), (uint)Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>());
                testStruct._imm = (byte)({Imm});

                return testStruct;
            }

            public void RunStructFldScenario({TemplateName}UnaryOpTest__{TestName} testClass)
            {
                var result = {Isa}.{Method}(_fld, _imm);

                Unsafe.Write(testClass._dataTable.outArrayPtr, result);
                testClass.ValidateResult(_fld, _imm, testClass._dataTable.outArrayPtr);
            }
        }

        private static readonly int LargestVectorSize = {LargestVectorSize};

        private static readonly int Op1ElementCount = Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>() / sizeof({Op1BaseType});
        private static readonly int RetElementCount = Unsafe.SizeOf<{RetVectorType}<{RetBaseType}>>() / sizeof({RetBaseType});
        private static readonly byte Imm = (byte)({Imm});

        private static {Op1BaseType}[] _maskData = new {Op1BaseType}[Op1ElementCount];
        private static {Op1BaseType}[] _data = new {Op1BaseType}[Op1ElementCount];

        private {Op1VectorType}<{Op1BaseType}> _mask;
        private {Op1VectorType}<{Op1BaseType}> _fld;
        private {Op1VectorType}<{Op1BaseType}> _falseFld;

        private DataTable _dataTable;

        public {TemplateName}UnaryOpTest__{TestName}()
        {
            Succeeded = true;

            for (var i = 0; i < Op1ElementCount; i++) { _maskData[i] = ({Op1BaseType})({NextValueOp1} % 2); }
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op1VectorType}<{Op1BaseType}>, byte>(ref _mask), ref Unsafe.As<{Op1BaseType}, byte>(ref _maskData[0]), (uint)Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>());
            for (var i = 0; i < Op1ElementCount; i++) { _data[i] = {NextValueOp1}; }
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op1VectorType}<{Op1BaseType}>, byte>(ref _fld), ref Unsafe.As<{Op1BaseType}, byte>(ref _data[0]), (uint)Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>());

            for (var i = 0; i < Op1ElementCount; i++) { _data[i] = {NextValueOp1}; }
            _dataTable = new DataTable(_data, new {RetBaseType}[RetElementCount], LargestVectorSize);
        }

        public bool IsSupported => {Isa}.IsSupported;

        public bool Succeeded { get; set; }

        public void RunBasicScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_UnsafeRead));

            var result = {Isa}.{Method}(
                Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArrayPtr),
                Imm
            );

            Unsafe.Write(_dataTable.outArrayPtr, result);
            ValidateResult(_dataTable.inArrayPtr, Imm, _dataTable.outArrayPtr);
        }

        public void RunBasicScenario_UnsafeRead_InvalidImm()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_UnsafeRead_InvalidImm));

            bool succeeded = false;
            try
            {
                var result = {Isa}.{Method}(
                    Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArrayPtr),
                    {InvalidImm}
                );
            }
            catch (ArgumentOutOfRangeException)
            {
                succeeded = true;
            }
        }

        public void RunBasicScenario_Load()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_Load));

            {Op1VectorType}<{Op1BaseType}> loadMask = Sve.CreateTrueMask{RetBaseType}(SveMaskPattern.All);

            var result = {Isa}.{Method}(
                {LoadIsa}.Load{Op1VectorType}(loadMask, ({Op1BaseType}*)(_dataTable.inArrayPtr)),
                Imm
            );

            Unsafe.Write(_dataTable.outArrayPtr, result);
            ValidateResult(_dataTable.inArrayPtr, Imm, _dataTable.outArrayPtr);
        }

        public void RunReflectionScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunReflectionScenario_UnsafeRead));

            var result = typeof({Isa}).GetMethod(nameof({Isa}.{Method}), new Type[] { typeof({Op1VectorType}<{Op1BaseType}>), typeof(byte) })
                                     .Invoke(null, new object[] {
                                        Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArrayPtr),
                                        Imm
                                     });

            Unsafe.Write(_dataTable.outArrayPtr, ({RetVectorType}<{RetBaseType}>)(result));
            ValidateResult(_dataTable.inArrayPtr, Imm, _dataTable.outArrayPtr);
        }

        public void RunLclVarScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunLclVarScenario_UnsafeRead));

            var op = Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArrayPtr);
            var result = {Isa}.{Method}(op, Imm);

            Unsafe.Write(_dataTable.outArrayPtr, result);
            ValidateResult(op, Imm, _dataTable.outArrayPtr);
        }

        public void RunClassFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunClassFldScenario));

            var result = {Isa}.{Method}(_fld, Imm);

            Unsafe.Write(_dataTable.outArrayPtr, result);
            ValidateResult(_fld, Imm, _dataTable.outArrayPtr);
        }

        public void RunStructLclFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunStructLclFldScenario));

            var test = TestStruct.Create();
            var result = {Isa}.{Method}(test._fld, test._imm);

            Unsafe.Write(_dataTable.outArrayPtr, result);
            ValidateResult(test._fld, test._imm, _dataTable.outArrayPtr);
        }

        public void RunStructFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunStructFldScenario));

            var test = TestStruct.Create();
            test.RunStructFldScenario(this);
        }

        public void ConditionalSelect_Op1()
        {
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_mask");
            ConditionalSelectScenario(_mask, _fld, _fld);
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_zero");
            ConditionalSelectScenario({Op1VectorType}<{Op1BaseType}>.Zero, _fld, _fld);
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_all");
            ConditionalSelectScenario({Op1VectorType}<{Op1BaseType}>.AllBitsSet, _fld, _fld);
        }

        public void ConditionalSelect_FalseOp()
        {
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_mask");
            ConditionalSelectScenario(_mask, _fld, _falseFld);
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_zero");
            ConditionalSelectScenario({Op1VectorType}<{Op1BaseType}>.Zero, _fld, _falseFld);
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_all");
            ConditionalSelectScenario({Op1VectorType}<{Op1BaseType}>.AllBitsSet, _fld, _falseFld);
        }

        public void ConditionalSelect_ZeroOp()
        {
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_mask");
            ConditionalSelectScenario(_mask, _fld, {Op1VectorType}<{Op1BaseType}>.Zero);
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_zero");
            ConditionalSelectScenario({Op1VectorType}<{Op1BaseType}>.Zero, _fld, {Op1VectorType}<{Op1BaseType}>.Zero);
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_all");
            ConditionalSelectScenario({Op1VectorType}<{Op1BaseType}>.AllBitsSet, _fld, {Op1VectorType}<{Op1BaseType}>.Zero);
        }

        [method: MethodImpl(MethodImplOptions.AggressiveInlining)]
        private void ConditionalSelectScenario({Op1VectorType}<{Op1BaseType}> mask, {Op1VectorType}<{Op1BaseType}> op, {Op1VectorType}<{Op1BaseType}> falseOp)
        {
            var result = Sve.ConditionalSelect(mask, {Isa}.{Method}(op, Imm), falseOp);
            Unsafe.Write(_dataTable.outArrayPtr, result);
            ValidateConditionalSelectResult(mask, op, falseOp, Imm, _dataTable.outArrayPtr);
        }

        public void RunUnsupportedScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunUnsupportedScenario));

            bool succeeded = false;

            try
            {
                RunBasicScenario_UnsafeRead();
            }
            catch (PlatformNotSupportedException)
            {
                succeeded = true;
            }

            if (!succeeded)
            {
                Succeeded = false;
            }
        }
        private void ValidateConditionalSelectResult({Op1VectorType}<{Op1BaseType}> maskOp, {Op1VectorType}<{Op1BaseType}> firstOp, {Op1VectorType}<{Op1BaseType}> falseOp, byte imm, void* output, [CallerMemberName] string method = "")
        {
            {Op1BaseType}[] mask = new {Op1BaseType}[Op1ElementCount];
            {Op1BaseType}[] first = new {Op1BaseType}[Op1ElementCount];
            {Op1BaseType}[] falseVal = new {Op1BaseType}[Op1ElementCount];
            {RetBaseType}[] result = new {RetBaseType}[RetElementCount];
            Unsafe.WriteUnaligned(ref Unsafe.As<{Op1BaseType}, byte>(ref mask[0]), maskOp);
            Unsafe.WriteUnaligned(ref Unsafe.As<{Op1BaseType}, byte>(ref first[0]), firstOp);
            Unsafe.WriteUnaligned(ref Unsafe.As<{Op1BaseType}, byte>(ref falseVal[0]), falseOp);
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{RetBaseType}, byte>(ref result[0]), ref Unsafe.AsRef<byte>(output), (uint)Unsafe.SizeOf<{RetVectorType}<{RetBaseType}>>());
            bool succeeded = true;
            {TemplateValidationLogicForCndSel}
            if (!succeeded)
            {
                TestLibrary.TestFramework.LogInformation($"{nameof({Isa})}.{nameof({Isa}.{Method})}<{RetBaseType}>({Op1VectorType}<{Op1BaseType}>): {method} failed:");
                TestLibrary.TestFramework.LogInformation($"    mask: ({string.Join(", ", mask)})");
                TestLibrary.TestFramework.LogInformation($"    first: ({string.Join(", ", first)})");
                TestLibrary.TestFramework.LogInformation($" falseOp: ({string.Join(", ", falseVal)})");
                TestLibrary.TestFramework.LogInformation($"  result: ({string.Join(", ", result)})");
                TestLibrary.TestFramework.LogInformation(string.Empty);
                Succeeded = false;
            }
        }

        private void ValidateResult({Op1VectorType}<{Op1BaseType}> op, byte imm, void* result, [CallerMemberName] string method = "")
        {
            {Op1BaseType}[] inArray  = new {Op1BaseType}[Op1ElementCount];
            {RetBaseType}[] outArray = new {RetBaseType}[RetElementCount];

            Unsafe.WriteUnaligned(ref Unsafe.As<{Op1BaseType}, byte>(ref inArray[0]), op);
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{RetBaseType}, byte>(ref outArray[0]), ref Unsafe.AsRef<byte>(result), (uint)Unsafe.SizeOf<{RetVectorType}<{RetBaseType}>>());

            ValidateResult(inArray, imm, outArray, method);
        }

        private void ValidateResult(void* op, byte imm, void* result, [CallerMemberName] string method = "")
        {
            {Op1BaseType}[] inArray  = new {Op1BaseType}[Op1ElementCount];
            {RetBaseType}[] outArray = new {RetBaseType}[RetElementCount];

            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op1BaseType}, byte>(ref inArray[0]), ref Unsafe.AsRef<byte>(op), (uint)Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>());
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{RetBaseType}, byte>(ref outArray[0]), ref Unsafe.AsRef<byte>(result), (uint)Unsafe.SizeOf<{RetVectorType}<{RetBaseType}>>());

            ValidateResult(inArray, imm, outArray, method);
        }

        private void ValidateResult({Op1BaseType}[] firstOp, byte imm, {RetBaseType}[] result, [CallerMemberName] string method = "")
        {
            bool succeeded = true;

            {TemplateValidationLogic}

            if (!succeeded)
            {
                TestLibrary.TestFramework.LogInformation($"{nameof({Isa})}.{nameof({Isa}.{Method})}<{RetBaseType}>({Op1VectorType}<{Op1BaseType}>, byte): {method} failed:");
                TestLibrary.TestFramework.LogInformation($" firstOp: ({string.Join(", ", firstOp)})");
                TestLibrary.TestFramework.LogInformation($"     imm: ({string.Join(", ", imm)})");
                TestLibrary.TestFramework.LogInformation($"  result: ({string.Join(", ", result)})");
                TestLibrary.TestFramework.LogInformation(string.Empty);

                Succeeded = false;
            }
        }
    }
}
