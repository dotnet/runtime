// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

/******************************************************************************
 * This file is auto-generated from a template file by the GenerateTests.csx  *
 * script in tests\src\JIT\HardwareIntrinsics.Arm\Shared. In order to make    *
 * changes, please update the corresponding template and run according to the *
 * directions listed in the file.                                             *
 ******************************************************************************/

using System;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.Arm;
using Xunit;

namespace JIT.HardwareIntrinsics.Arm
{
    public static partial class Program
    {
        [Fact]
        public static void {TestName}()
        {
            var test = new {TemplateName}BinaryOpTest__{TestName}();

            if (test.IsSupported)
            {
                // Validates basic functionality works, using Unsafe.Read
                test.RunBasicScenario_UnsafeRead();

                if ({LoadIsa}.IsSupported)
                {
                    // Validates basic functionality works, using Load
                    test.RunBasicScenario_Load();
                }

                // Validates calling via reflection works, using Unsafe.Read
                test.RunReflectionScenario_UnsafeRead();

                // Validates passing a local works, using Unsafe.Read
                test.RunLclVarScenario_UnsafeRead();

                // Validates passing an instance member of a class works
                test.RunClassFldScenario();

                // Validates passing the field of a local struct works
                test.RunStructLclFldScenario();

                // Validates passing an instance member of a struct works
                test.RunStructFldScenario();
            }
            else
            {
                // Validates we throw on unsupported hardware
                test.RunUnsupportedScenario();
            }

            if (!test.Succeeded)
            {
                throw new Exception("One or more scenarios did not complete as expected.");
            }
        }
    }

    public sealed unsafe class {TemplateName}BinaryOpTest__{TestName}
    {
        private struct DataTable
        {
            private byte[] inArray11;
            private byte[] inArray12;
            private byte[] inArray2;
            private byte[] outArray;

            private GCHandle inHandle11;
            private GCHandle inHandle12;
            private GCHandle inHandle2;
            private GCHandle outHandle;

            private ulong alignment;

            public DataTable({Op1BaseType}[] inArray11, {Op1BaseType}[] inArray12, {Op2BaseType}[] inArray2, {RetBaseType}[] outArray, int alignment)
            {
                int sizeOfinArray11 = inArray11.Length * Unsafe.SizeOf<{Op1BaseType}>();
                int sizeOfinArray12 = inArray12.Length * Unsafe.SizeOf<{Op1BaseType}>();
                int sizeOfinArray2 = inArray2.Length * Unsafe.SizeOf<{Op2BaseType}>();
                int sizeOfoutArray = outArray.Length * Unsafe.SizeOf<{RetBaseType}>();
                if ((alignment != 64 && alignment != 16 && alignment != 8) || (alignment * 2) < sizeOfinArray11 || (alignment * 2) < sizeOfinArray12 || (alignment * 2) < sizeOfinArray2 || (alignment * 2) < sizeOfoutArray)
                {
                    throw new ArgumentException("Invalid value of alignment");
                }

                this.inArray11 = new byte[alignment * 2];
                this.inArray12 = new byte[alignment * 2];
                this.inArray2 = new byte[alignment * 2];
                this.outArray = new byte[alignment * 2];

                this.inHandle11 = GCHandle.Alloc(this.inArray11, GCHandleType.Pinned);
                this.inHandle12 = GCHandle.Alloc(this.inArray12, GCHandleType.Pinned);
                this.inHandle2 = GCHandle.Alloc(this.inArray2, GCHandleType.Pinned);
                this.outHandle = GCHandle.Alloc(this.outArray, GCHandleType.Pinned);

                this.alignment = (ulong)alignment;

                Unsafe.CopyBlockUnaligned(ref Unsafe.AsRef<byte>(inArray11Ptr), ref Unsafe.As<{Op1BaseType}, byte>(ref inArray11[0]), (uint)sizeOfinArray11);
                Unsafe.CopyBlockUnaligned(ref Unsafe.AsRef<byte>(inArray12Ptr), ref Unsafe.As<{Op1BaseType}, byte>(ref inArray12[0]), (uint)sizeOfinArray12);
                Unsafe.CopyBlockUnaligned(ref Unsafe.AsRef<byte>(inArray2Ptr), ref Unsafe.As<{Op2BaseType}, byte>(ref inArray2[0]), (uint)sizeOfinArray2);
            }

            public void* inArray11Ptr => Align((byte*)(inHandle11.AddrOfPinnedObject().ToPointer()), alignment);
            public void* inArray12Ptr => Align((byte*)(inHandle12.AddrOfPinnedObject().ToPointer()), alignment);
            public void* inArray2Ptr => Align((byte*)(inHandle2.AddrOfPinnedObject().ToPointer()), alignment);
            public void* outArrayPtr => Align((byte*)(outHandle.AddrOfPinnedObject().ToPointer()), alignment);

            public void Dispose()
            {
                inHandle11.Free();
                inHandle12.Free();
                inHandle2.Free();
                outHandle.Free();
            }

            private static unsafe void* Align(byte* buffer, ulong expectedAlignment)
            {
                return (void*)(((ulong)buffer + expectedAlignment - 1) & ~(expectedAlignment - 1));
            }
        }

        private struct TestStruct
        {
            public {Op1VectorType}<{Op1BaseType}> _fld11;
            public {Op1VectorType}<{Op1BaseType}> _fld12;
            public {Op2VectorType}<{Op2BaseType}> _fld2;

            public static TestStruct Create()
            {
                var testStruct = new TestStruct();

                for (var i = 0; i < Op11ElementCount; i++) { _data11[i] = {NextValueOp1}; }
                Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op1VectorType}<{Op1BaseType}>, byte>(ref testStruct._fld11), ref Unsafe.As<{Op1BaseType}, byte>(ref _data11[0]), (uint)Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>());
                for (var i = 0; i < Op12ElementCount; i++) { _data12[i] = {NextValueOp1}; }
                Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op1VectorType}<{Op1BaseType}>, byte>(ref testStruct._fld12), ref Unsafe.As<{Op1BaseType}, byte>(ref _data12[0]), (uint)Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>());
                for (var i = 0; i < Op2ElementCount; i++) { _data2[i] = {NextValueOp2}; }
                Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op2VectorType}<{Op2BaseType}>, byte>(ref testStruct._fld2), ref Unsafe.As<{Op2BaseType}, byte>(ref _data2[0]), (uint)Unsafe.SizeOf<{Op2VectorType}<{Op2BaseType}>>());

                return testStruct;
            }

            public void RunStructFldScenario({TemplateName}BinaryOpTest__{TestName} testClass)
            {
                var result = {Isa}.{Method}((_fld11, _fld12), _fld2);

                Unsafe.Write(testClass._dataTable.outArrayPtr, result);
                testClass.ValidateResult(_fld11, _fld12, _fld2, testClass._dataTable.outArrayPtr);
            }
        }

        private static readonly int LargestVectorSize = {LargestVectorSize};

        private static readonly int Op11ElementCount = Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>() / sizeof({Op1BaseType});
        private static readonly int Op12ElementCount = Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>() / sizeof({Op1BaseType});
        private static readonly int Op2ElementCount = Unsafe.SizeOf<{Op2VectorType}<{Op2BaseType}>>() / sizeof({Op2BaseType});
        private static readonly int RetElementCount = Unsafe.SizeOf<{RetVectorType}<{RetBaseType}>>() / sizeof({RetBaseType});

        private static {Op1BaseType}[] _data11 = new {Op1BaseType}[Op11ElementCount];
        private static {Op1BaseType}[] _data12 = new {Op1BaseType}[Op12ElementCount];
        private static {Op2BaseType}[] _data2 = new {Op2BaseType}[Op2ElementCount];

        private {Op1VectorType}<{Op1BaseType}> _fld11;
        private {Op1VectorType}<{Op1BaseType}> _fld12;
        private {Op2VectorType}<{Op2BaseType}> _fld2;

        private DataTable _dataTable;

        public {TemplateName}BinaryOpTest__{TestName}()
        {
            Succeeded = true;

            for (var i = 0; i < Op11ElementCount; i++) { _data11[i] = {NextValueOp1}; }
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op1VectorType}<{Op1BaseType}>, byte>(ref _fld11), ref Unsafe.As<{Op1BaseType}, byte>(ref _data11[0]), (uint)Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>());
            for (var i = 0; i < Op12ElementCount; i++) { _data12[i] = {NextValueOp1}; }
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op1VectorType}<{Op1BaseType}>, byte>(ref _fld12), ref Unsafe.As<{Op1BaseType}, byte>(ref _data12[0]), (uint)Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>());
            for (var i = 0; i < Op2ElementCount; i++) { _data2[i] = {NextValueOp2}; }
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op2VectorType}<{Op2BaseType}>, byte>(ref _fld2), ref Unsafe.As<{Op2BaseType}, byte>(ref _data2[0]), (uint)Unsafe.SizeOf<{Op2VectorType}<{Op2BaseType}>>());

            _dataTable = new DataTable(_data11, _data12, _data2, new {RetBaseType}[RetElementCount], LargestVectorSize);
        }

        public bool IsSupported => {Isa}.IsSupported;

        public bool Succeeded { get; set; }

        public void RunBasicScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_UnsafeRead));

            var result = {Isa}.{Method}(
                (Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArray11Ptr),
                Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArray12Ptr)),
                Unsafe.Read<{Op2VectorType}<{Op2BaseType}>>(_dataTable.inArray2Ptr)
            );

            Unsafe.Write(_dataTable.outArrayPtr, result);
            ValidateResult(_dataTable.inArray11Ptr, _dataTable.inArray12Ptr, _dataTable.inArray2Ptr, _dataTable.outArrayPtr);
        }

        public void RunBasicScenario_Load()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_Load));
            Vector<{Op1BaseType}> loadMask11 = Sve.CreateTrueMask{Op1BaseType}(SveMaskPattern.All);
            Vector<{Op1BaseType}> loadMask12 = Sve.CreateTrueMask{Op1BaseType}(SveMaskPattern.All);
            Vector<{Op2BaseType}> loadMask2 = Sve.CreateTrueMask{Op2BaseType}(SveMaskPattern.All);

            var result = {Isa}.{Method}(
                ({LoadIsa}.Load{Op1VectorType}(loadMask11, ({Op1BaseType}*)(_dataTable.inArray11Ptr)),
                {LoadIsa}.Load{Op1VectorType}(loadMask12, ({Op1BaseType}*)(_dataTable.inArray12Ptr))),
                {LoadIsa}.Load{Op2VectorType}(loadMask2, ({Op2BaseType}*)(_dataTable.inArray2Ptr))
            );

            Unsafe.Write(_dataTable.outArrayPtr, result);
            ValidateResult(_dataTable.inArray11Ptr, _dataTable.inArray12Ptr, _dataTable.inArray2Ptr, _dataTable.outArrayPtr);
        }

        public void RunReflectionScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunReflectionScenario_UnsafeRead));

            var result = typeof({Isa}).GetMethod(nameof({Isa}.{Method}), new Type[] { typeof(({Op1VectorType}<{Op1BaseType}>, {Op1VectorType}<{Op1BaseType}>)), typeof({Op2VectorType}<{Op2BaseType}>) })
                                     .Invoke(null, new object[] {
                                        (Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArray11Ptr),
                                        Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArray12Ptr)),
                                        Unsafe.Read<{Op2VectorType}<{Op2BaseType}>>(_dataTable.inArray2Ptr)
                                     });

            Unsafe.Write(_dataTable.outArrayPtr, ({RetVectorType}<{RetBaseType}>)(result));
            ValidateResult(_dataTable.inArray11Ptr, _dataTable.inArray12Ptr, _dataTable.inArray2Ptr, _dataTable.outArrayPtr);
        }

        public void RunLclVarScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunLclVarScenario_UnsafeRead));

            var op11 = Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArray11Ptr);
            var op12 = Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArray12Ptr);
            var op2 = Unsafe.Read<{Op2VectorType}<{Op2BaseType}>>(_dataTable.inArray2Ptr);
            var result = {Isa}.{Method}((op11, op12), op2);

            Unsafe.Write(_dataTable.outArrayPtr, result);
            ValidateResult(op11, op12, op2, _dataTable.outArrayPtr);
        }

        public void RunClassFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunClassFldScenario));

            var result = {Isa}.{Method}((_fld11, _fld12), _fld2);

            Unsafe.Write(_dataTable.outArrayPtr, result);
            ValidateResult(_fld11, _fld12, _fld2, _dataTable.outArrayPtr);
        }

        public void RunStructLclFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunStructLclFldScenario));

            var test = TestStruct.Create();
            var result = {Isa}.{Method}((test._fld11, test._fld12), test._fld2);

            Unsafe.Write(_dataTable.outArrayPtr, result);
            ValidateResult(test._fld11, test._fld12, test._fld2, _dataTable.outArrayPtr);
        }

        public void RunStructFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunStructFldScenario));

            var test = TestStruct.Create();
            test.RunStructFldScenario(this);
        }

        public void RunUnsupportedScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunUnsupportedScenario));

            bool succeeded = false;

            try
            {
                RunBasicScenario_UnsafeRead();
            }
            catch (PlatformNotSupportedException)
            {
                succeeded = true;
            }

            if (!succeeded)
            {
                Succeeded = false;
            }
        }

        private void ValidateResult({Op1VectorType}<{Op1BaseType}> op11, {Op1VectorType}<{Op1BaseType}> op12, {Op2VectorType}<{Op2BaseType}> op2, void* result, [CallerMemberName] string method = "")
        {
            {Op1BaseType}[] inArray11 = new {Op1BaseType}[Op11ElementCount];
            {Op1BaseType}[] inArray12 = new {Op1BaseType}[Op12ElementCount];
            {Op2BaseType}[] inArray2 = new {Op2BaseType}[Op2ElementCount];
            {RetBaseType}[] outArray = new {RetBaseType}[RetElementCount];

            Unsafe.WriteUnaligned(ref Unsafe.As<{Op1BaseType}, byte>(ref inArray11[0]), op11);
            Unsafe.WriteUnaligned(ref Unsafe.As<{Op1BaseType}, byte>(ref inArray12[0]), op12);
            Unsafe.WriteUnaligned(ref Unsafe.As<{Op2BaseType}, byte>(ref inArray2[0]), op2);
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{RetBaseType}, byte>(ref outArray[0]), ref Unsafe.AsRef<byte>(result), (uint)Unsafe.SizeOf<{RetVectorType}<{RetBaseType}>>());

            ValidateResult(inArray11, inArray12, inArray2, outArray, method);
        }

        private void ValidateResult(void* op11, void* op12, void* op2, void* result, [CallerMemberName] string method = "")
        {
            {Op1BaseType}[] inArray11 = new {Op1BaseType}[Op11ElementCount];
            {Op1BaseType}[] inArray12 = new {Op1BaseType}[Op12ElementCount];
            {Op2BaseType}[] inArray2 = new {Op2BaseType}[Op2ElementCount];
            {RetBaseType}[] outArray = new {RetBaseType}[RetElementCount];

            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op1BaseType}, byte>(ref inArray11[0]), ref Unsafe.AsRef<byte>(op11), (uint)Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>());
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op1BaseType}, byte>(ref inArray12[0]), ref Unsafe.AsRef<byte>(op12), (uint)Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>());
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op2BaseType}, byte>(ref inArray2[0]), ref Unsafe.AsRef<byte>(op2), (uint)Unsafe.SizeOf<{Op2VectorType}<{Op2BaseType}>>());
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{RetBaseType}, byte>(ref outArray[0]), ref Unsafe.AsRef<byte>(result), (uint)Unsafe.SizeOf<{RetVectorType}<{RetBaseType}>>());

            ValidateResult(inArray11, inArray12, inArray2, outArray, method);
        }

        private void ValidateResult({Op1BaseType}[] first, {Op1BaseType}[] second, {Op2BaseType}[] third, {RetBaseType}[] result, [CallerMemberName] string method = "")
        {
            bool succeeded = true;

            {TemplateValidationLogic}

            if (!succeeded)
            {
                TestLibrary.TestFramework.LogInformation($"{nameof({Isa})}.{nameof({Isa}.{Method})}<{RetBaseType}>(({Op1VectorType}<{Op1BaseType}>, {Op1VectorType}<{Op1BaseType}>), {Op2VectorType}<{Op2BaseType}>): {method} failed:");
                TestLibrary.TestFramework.LogInformation($"   first: ({string.Join(", ", first)})");
                TestLibrary.TestFramework.LogInformation($"  second: ({string.Join(", ", second)})");
                TestLibrary.TestFramework.LogInformation($"   third: ({string.Join(", ", third)})");
                TestLibrary.TestFramework.LogInformation($"  result: ({string.Join(", ", result)})");
                TestLibrary.TestFramework.LogInformation(string.Empty);

                Succeeded = false;
            }
        }
    }
}
