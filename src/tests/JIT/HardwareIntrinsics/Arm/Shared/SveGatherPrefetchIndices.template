// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

/******************************************************************************
 * This file is auto-generated from a template file by the GenerateTests.csx  *
 * script in tests\src\JIT\HardwareIntrinsics\Arm\Shared. In order to make    *
 * changes, please update the corresponding template and run according to the *
 * directions listed in the file.                                             *
 ******************************************************************************/

using System;
using System.Numerics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.Arm;
using Xunit;

namespace JIT.HardwareIntrinsics.Arm
{
    public static partial class Program
    {
        [Fact]
        public static void {TestName}()
        {
            var test = new SveGatherPrefetchIndices__{TestName}();

            if (test.IsSupported)
            {
                // Validates basic functionality works, using Unsafe.Read
                test.RunBasicScenario_UnsafeRead();

                // Validates basic functionality works
                test.RunBasicScenario_Load();

                // Validates fully masked out load works.
                test.RunBasicScenario_FalseMask();

                // Validates fully masked out load with invalid address works.
                test.RunBasicScenario_NonFaulting();

                // Validates an invalid immediate fails.
                test.RunBasicScenario_Invalid();

                // Validates calling via reflection works, using Unsafe.Read
                test.RunReflectionScenario_UnsafeRead();

                // Validates passing a local works, using Unsafe.Read
                test.RunLclVarScenario_UnsafeRead();

                // Validates passing an instance member of a class works
                test.RunClassFldScenario();

                // Validates passing the field of a local struct works
                test.RunStructLclFldScenario();

                // Validates passing an instance member of a struct works
                test.RunStructFldScenario();
            }
            else
            {
                // Validates we throw on unsupported hardware
                test.RunUnsupportedScenario();
            }

            if (!test.Succeeded)
            {
                throw new Exception("One or more scenarios did not complete as expected.");
            }
        }
    }

    public sealed unsafe class SveGatherPrefetchIndices__{TestName}
    {
        private struct DataTable
        {
            private byte[] inArray1;
            private byte[] inArray2;
            private byte[] inArray3;

            private GCHandle inHandle1;
            private GCHandle inHandle2;
            private GCHandle inHandle3;

            private ulong alignment;

            public DataTable({Op1BaseType}[] inArray1, byte[] inArray2, {Op3BaseType}[] inArray3, int alignment)
            {
                int sizeOfinArray1 = inArray1.Length * Unsafe.SizeOf<{Op1BaseType}>();
                int sizeOfinArray2 = inArray2.Length * Unsafe.SizeOf<byte>();
                int sizeOfinArray3 = inArray3.Length * Unsafe.SizeOf<{Op3BaseType}>();

                if ((alignment != 64 && alignment != 16 && alignment != 8) || (alignment * 2) < sizeOfinArray1 || (alignment * 2) < sizeOfinArray3 )
                {
                    throw new ArgumentException($"Invalid value of alignment: {alignment}, sizeOfinArray1: {sizeOfinArray1}, sizeOfinArray2: {sizeOfinArray2}, sizeOfinArray3: {sizeOfinArray3},");
                }

                this.inArray1 = new byte[alignment * 2];
                this.inArray2 = new byte[alignment + sizeOfinArray2];
                this.inArray3 = new byte[alignment * 2];

                this.inHandle1 = GCHandle.Alloc(this.inArray1, GCHandleType.Pinned);
                this.inHandle2 = GCHandle.Alloc(this.inArray2, GCHandleType.Pinned);
                this.inHandle3 = GCHandle.Alloc(this.inArray3, GCHandleType.Pinned);

                this.alignment = (ulong)alignment;

                Unsafe.CopyBlockUnaligned(ref Unsafe.AsRef<byte>(inArray1Ptr), ref Unsafe.As<{Op1BaseType}, byte>(ref inArray1[0]), (uint)sizeOfinArray1);
                Unsafe.CopyBlockUnaligned(ref Unsafe.AsRef<byte>(inArray2Ptr), ref Unsafe.As<byte, byte>(ref inArray2[0]), (uint)sizeOfinArray2);
                Unsafe.CopyBlockUnaligned(ref Unsafe.AsRef<byte>(inArray3Ptr), ref Unsafe.As<{Op3BaseType}, byte>(ref inArray3[0]), (uint)sizeOfinArray3);
            }

            public void* inArray1Ptr => Align((byte*)(inHandle1.AddrOfPinnedObject().ToPointer()), alignment);
            public void* inArray2Ptr => Align((byte*)(inHandle2.AddrOfPinnedObject().ToPointer()), alignment);
            public void* inArray3Ptr => Align((byte*)(inHandle3.AddrOfPinnedObject().ToPointer()), alignment);

            public void Dispose()
            {
                inHandle1.Free();
                inHandle2.Free();
                inHandle3.Free();
            }

            private static unsafe void* Align(byte* buffer, ulong expectedAlignment)
            {
                return (void*)(((ulong)buffer + expectedAlignment - 1) & ~(expectedAlignment - 1));
            }
        }

        private struct TestStruct
        {
            public {Op1VectorType}<{Op1BaseType}> _fld1;
            public byte* _fld2;
            public {Op3VectorType}<{Op3BaseType}> _fld3;

            public static TestStruct Create(DataTable _dataTable)
            {
                var testStruct = new TestStruct();

                for (var i = 0; i < Op1ElementCount; i++) { _data1[i] = {NextValueOp1}; }
                for (var i = 0; i < Op2ElementCount; i++) { _data2[i] = 0; }

                // Ensure all values of _data3 fit within the number of _data2 elements
                for (var i = 0; i < Op3ElementCount; i++) { _data3[i] = {NextValueOp3} % ({Op3BaseType})Op2ElementCount; }

                Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op1VectorType}<{Op1BaseType}>, byte>(ref testStruct._fld1), ref Unsafe.As<{Op1BaseType}, byte>(ref _data1[0]), (uint)Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>());
                Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op3VectorType}<{Op3BaseType}>, byte>(ref testStruct._fld3), ref Unsafe.As<{Op3BaseType}, byte>(ref _data3[0]), (uint)Unsafe.SizeOf<{Op3VectorType}<{Op3BaseType}>>());

                testStruct._fld2 = (byte*)_dataTable.inArray2Ptr;

                return testStruct;
            }

            public void RunStructFldScenario(SveGatherPrefetchIndices__{TestName} testClass)
            {
                {Isa}.{Method}(_fld1, _fld2, _fld3, {ValidPrefetch});
            }
        }

        private static readonly int LargestVectorSize = {LargestVectorSize};

        // A large enough buffer to hold many values. Op3 will index into Op2.
        private static readonly int Op2ElementCount = 1024;

        private static readonly int Op1ElementCount = Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>() / sizeof({Op1BaseType});
        private static readonly int Op3ElementCount = Unsafe.SizeOf<{Op3VectorType}<{Op3BaseType}>>() / sizeof({Op3BaseType});

        private static {Op1BaseType}[] _data1 = new {Op1BaseType}[Op1ElementCount];
        private static byte[] _data2 = new byte[Op2ElementCount];
        private static {Op3BaseType}[] _data3 = new {Op3BaseType}[Op3ElementCount];

        private {Op1VectorType}<{Op1BaseType}> _fld1;
        private byte* _fld2;
        private {Op3VectorType}<{Op3BaseType}> _fld3;

        private {Op1VectorType}<{Op1BaseType}> _mask;
        private {Op1VectorType}<{Op1BaseType}> _falseFld;

        private DataTable _dataTable;

        public SveGatherPrefetchIndices__{TestName}()
        {
            Succeeded = true;

            for (var i = 0; i < Op1ElementCount; i++) { _data1[i] = {NextValueOp1}; }
            for (var i = 0; i < Op2ElementCount; i++) { _data2[i] = 0; }

            // Ensure all values of _data3 fit within the number of _data2 elements
            for (var i = 0; i < Op3ElementCount; i++) { _data3[i] = {NextValueOp3} % ({Op3BaseType})Op2ElementCount; }

            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op1VectorType}<{Op1BaseType}>, byte>(ref _fld1), ref Unsafe.As<{Op1BaseType}, byte>(ref _data1[0]), (uint)Unsafe.SizeOf<{Op1VectorType}<{Op1BaseType}>>());
            Unsafe.CopyBlockUnaligned(ref Unsafe.As<{Op3VectorType}<{Op3BaseType}>, byte>(ref _fld3), ref Unsafe.As<{Op3BaseType}, byte>(ref _data3[0]), (uint)Unsafe.SizeOf<{Op3VectorType}<{Op3BaseType}>>());

            _dataTable = new DataTable(_data1, _data2, _data3, LargestVectorSize);

            _fld2 = (byte*)_dataTable.inArray2Ptr;
        }

        public bool IsSupported => {Isa}.IsSupported;

        public bool Succeeded { get; set; }

        public void RunBasicScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_UnsafeRead));

            {Isa}.{Method}(
                Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArray1Ptr),
                (byte*)_dataTable.inArray2Ptr,
                Unsafe.Read<{Op3VectorType}<{Op3BaseType}>>(_dataTable.inArray3Ptr),
                {ValidPrefetch}
            );
        }

        public void RunBasicScenario_Load()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_Load));

            {Op1VectorType}<{Op1BaseType}> loadMask1 = Sve.CreateTrueMask{Op1BaseType}(SveMaskPattern.All);
            {Op3VectorType}<{Op3BaseType}> loadMask3 = Sve.CreateTrueMask{Op3BaseType}(SveMaskPattern.All);

            {Isa}.{Method}(
                {LoadIsa}.Load{Op1VectorType}(loadMask1, ({Op1BaseType}*)(_dataTable.inArray1Ptr)),
                (byte*)_dataTable.inArray2Ptr,
                {LoadIsa}.Load{Op3VectorType}(loadMask3, ({Op3BaseType}*)(_dataTable.inArray3Ptr)),
                {ValidPrefetch}
            );
        }

        public void RunBasicScenario_FalseMask()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_FalseMask));

            {Op1VectorType}<{Op1BaseType}> falseMask = Sve.CreateFalseMask{Op1BaseType}();

            {Isa}.{Method}(
                falseMask,
                (byte*)_dataTable.inArray2Ptr,
                Unsafe.Read<{Op3VectorType}<{Op3BaseType}>>(_dataTable.inArray3Ptr),
                {ValidPrefetch}
            );
        }

        public void RunBasicScenario_NonFaulting()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_NonFaulting));

            {Op1VectorType}<{Op1BaseType}> falseMask = Sve.CreateFalseMask{Op1BaseType}();

            try
            {
                {Isa}.{Method}(
                    falseMask,
                    default,
                    Unsafe.Read<{Op3VectorType}<{Op3BaseType}>>(_dataTable.inArray3Ptr),
                    {ValidPrefetch}
                );
            }
            catch
            {
                Succeeded = false;
            }
        }

        public void RunBasicScenario_Invalid()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_Invalid));

            try
            {
                {Isa}.{Method}(
                    Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArray1Ptr),
                    (byte*)_dataTable.inArray2Ptr,
                    Unsafe.Read<{Op3VectorType}<{Op3BaseType}>>(_dataTable.inArray3Ptr),
                    {InvalidPrefetch}
                    );
                Succeeded = false;
            }
            catch (ArgumentOutOfRangeException)
            {
            }
        }

        public void RunReflectionScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunReflectionScenario_UnsafeRead));

            typeof({Isa}).GetMethod(nameof({Isa}.{Method}), new Type[] { typeof({Op1VectorType}<{Op1BaseType}>), typeof({Op2BaseType}*), typeof({Op3VectorType}<{Op3BaseType}>), typeof({Op4BaseType}) })
                                     .Invoke(null, new object[] {
                                        Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArray1Ptr),
                                        Pointer.Box(_dataTable.inArray2Ptr, typeof(byte*)),
                                        Unsafe.Read<{Op3VectorType}<{Op3BaseType}>>(_dataTable.inArray3Ptr),
                                        {ValidPrefetch}
                                     });
        }

        public void RunLclVarScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunLclVarScenario_UnsafeRead));

            var op1 = Unsafe.Read<{Op1VectorType}<{Op1BaseType}>>(_dataTable.inArray1Ptr);
            var op2 = (byte*)_dataTable.inArray2Ptr;
            var op3 = Unsafe.Read<{Op3VectorType}<{Op3BaseType}>>(_dataTable.inArray3Ptr);
            {Isa}.{Method}(op1, op2, op3, {ValidPrefetch});
        }

        public void RunClassFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunClassFldScenario));

            {Isa}.{Method}(_fld1, _fld2, _fld3, {ValidPrefetch});
        }

        public void RunStructLclFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunStructLclFldScenario));

            var test = TestStruct.Create(_dataTable);
            {Isa}.{Method}(test._fld1, test._fld2, test._fld3, {ValidPrefetch});
        }

        public void RunStructFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunStructFldScenario));

            var test = TestStruct.Create(_dataTable);
            test.RunStructFldScenario(this);
        }

        public void RunUnsupportedScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunUnsupportedScenario));

            Succeeded = false;

            try
            {
                RunBasicScenario_Load();
            }
            catch (PlatformNotSupportedException)
            {
                Succeeded = true;
            }
        }
    }
}