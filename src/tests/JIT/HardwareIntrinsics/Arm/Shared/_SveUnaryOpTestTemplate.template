// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

/******************************************************************************
 * This file is auto-generated from a template file by the GenerateTests.csx  *
 * script in tests\src\JIT\HardwareIntrinsics.Arm\Shared. In order to make    *
 * changes, please update the corresponding template and run according to the *
 * directions listed in the file.                                             *
 ******************************************************************************/

using System;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.Arm;
using Xunit;

namespace JIT.HardwareIntrinsics.Arm
{
    public static partial class Program
    {
        [Fact]
        public static void {TestName}()
        {
            var test = new {TemplateName}UnaryOpTest__{TestName}();
            if (test.IsSupported)
            {
                // Validates basic functionality works, using Unsafe.Read
                test.RunBasicScenario_UnsafeRead();

                // Validates basic functionality works, using Load
                test.RunBasicScenario_Load();

                // Validates calling via reflection works, using Unsafe.Read
                test.RunReflectionScenario_UnsafeRead();

                // Validates passing a local works, using Unsafe.Read
                test.RunLclVarScenario_UnsafeRead();

                // Validates passing an instance member of a class works
                test.RunClassFldScenario();

                // Validates passing the field of a local struct works
                test.RunStructLclFldScenario();

                // Validates passing an instance member of a struct works
                test.RunStructFldScenario();

                // Validates executing the test inside conditional, with op1 as falseValue
                test.ConditionalSelect_Op1();

                // Validates executing the test inside conditional, with op3 as falseValue
                test.ConditionalSelect_FalseOp();

                // Validates executing the test inside conditional, with op3 as zero
                test.ConditionalSelect_ZeroOp();
            }
            else
            {
                // Validates we throw on unsupported hardware
                test.RunUnsupportedScenario();
            }

            if (!test.Succeeded)
            {
                throw new Exception("One or more scenarios did not complete as expected.");
            }
        }
    }

    public sealed unsafe class {TemplateName}UnaryOpTest__{TestName}
    {
        private struct TestStruct
        {
            public Vector<{Op1BaseType}> _fld1;

            public static TestStruct Create(Vector<{Op1BaseType}> vec)
            {
                var testStruct = new TestStruct();
                testStruct._fld1 = vec;
                return testStruct;
            }

            public void RunStructFldScenario({TemplateName}UnaryOpTest__{TestName} testClass)
            {
                var result = {Isa}.{Method}(_fld1);

                testClass.ValidateResult(_fld1, result);
            }
        }

        private static readonly int LargestVectorSize = {LargestVectorSize};

        private static readonly int Op1ElementCount = Unsafe.SizeOf<Vector<{Op1BaseType}>>() / sizeof({Op1BaseType});
        private static readonly int RetElementCount = Unsafe.SizeOf<Vector<{RetBaseType}>>() / sizeof({RetBaseType});

        private Vector<{Op1BaseType}> _mask;
        private Vector<{Op1BaseType}> _fld1;
        private Vector<{Op1BaseType}> _falseFld;
        private TestLibrary.Vectors.PinnedVector<{Op1BaseType}> _pinnedOp1;

        public {TemplateName}UnaryOpTest__{TestName}()
        {
            Succeeded = true;

            _mask = TestLibrary.Vectors.GetRandomMask<{Op1BaseType}>();
            _fld1 = TestLibrary.Vectors.GetRandomVector<{Op1BaseType}>();
            _falseFld = _fld1;
            _pinnedOp1 = new TestLibrary.Vectors.PinnedVector<{Op1BaseType}>(_fld1, LargestVectorSize);
        }

        public bool IsSupported => {Isa}.IsSupported;
        public bool Succeeded;

        public void RunBasicScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_UnsafeRead));

            var result = {Isa}.{Method}(_pinnedOp1.Value);

            ValidateResult(_pinnedOp1.Value, result);
        }

        public void RunBasicScenario_Load()
        {
            if ({LoadIsa}.IsSupported)
            {
                TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_Load));

                Vector<{Op1BaseType}> loadMask = Sve.CreateTrueMask{Op1BaseType}(SveMaskPattern.All);

                var result = {Isa}.{Method}(
                    {LoadIsa}.LoadVector(loadMask, ({Op1BaseType}*)(_pinnedOp1.Ptr))
                );

                ValidateResult(_pinnedOp1.Value, result);
            }
        }

        public void RunReflectionScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunReflectionScenario_UnsafeRead));

            var result = typeof({Isa}).GetMethod(nameof({Isa}.{Method}), new Type[] { typeof(Vector<{Op1BaseType}>) })
                                     .Invoke(null, new object[] { _pinnedOp1.Value });

            ValidateResult(_pinnedOp1.Value, (Vector<{RetBaseType}>)result);
        }

        public void RunLclVarScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunLclVarScenario_UnsafeRead));

            var op1 = _pinnedOp1.Value;
            var result = {Isa}.{Method}(op1);

            ValidateResult(op1, result);
        }

        public void RunClassFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunClassFldScenario));

            var result = {Isa}.{Method}(_fld1);

            ValidateResult(_fld1, result);
        }

        public void RunStructLclFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunStructLclFldScenario));

            var test = TestStruct.Create(_fld1);
            var result = {Isa}.{Method}(test._fld1);

            ValidateResult(test._fld1, result);
        }

        public void RunStructFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunStructFldScenario));

            var test = TestStruct.Create(_fld1);
            test.RunStructFldScenario(this);
        }

        public void ConditionalSelect_Op1()
        {
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_mask - operation in trueValue");
            ConditionalSelectScenario_TrueValue(_mask, _fld1, _fld1);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_zero - operation in trueValue");
            ConditionalSelectScenario_TrueValue(Vector<{Op1BaseType}>.Zero, _fld1, _fld1);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_all - operation in trueValue");
            ConditionalSelectScenario_TrueValue(Vector<{Op1BaseType}>.AllBitsSet, _fld1, _fld1);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_mask - operation in falseValue");
            ConditionalSelectScenario_FalseValue(_mask, _fld1, _fld1);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_zero - operation in falseValue");
            ConditionalSelectScenario_FalseValue(Vector<{Op1BaseType}>.Zero, _fld1, _fld1);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_Op1_all - operation in falseValue");
            ConditionalSelectScenario_FalseValue(Vector<{Op1BaseType}>.AllBitsSet, _fld1, _fld1);
        }

        public void ConditionalSelect_FalseOp()
        {
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_mask - operation in trueValue");
            ConditionalSelectScenario_TrueValue(_mask, _fld1, _falseFld);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_zero - operation in trueValue");
            ConditionalSelectScenario_TrueValue(Vector<{Op1BaseType}>.Zero, _fld1, _falseFld);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_all - operation in trueValue");
            ConditionalSelectScenario_TrueValue(Vector<{Op1BaseType}>.AllBitsSet, _fld1, _falseFld);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_mask - operation in falseValue");
            ConditionalSelectScenario_FalseValue(_mask, _fld1, _falseFld);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_zero - operation in falseValue");
            ConditionalSelectScenario_FalseValue(Vector<{Op1BaseType}>.Zero, _fld1, _falseFld);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_FalseOp_all - operation in falseValue");
            ConditionalSelectScenario_FalseValue(Vector<{Op1BaseType}>.AllBitsSet, _fld1, _falseFld);
        }

        public void ConditionalSelect_ZeroOp()
        {
            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_mask - operation in trueValue");
            ConditionalSelectScenario_TrueValue(_mask, _fld1, Vector<{Op1BaseType}>.Zero);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_zero - operation in trueValue");
            ConditionalSelectScenario_TrueValue(Vector<{Op1BaseType}>.Zero, _fld1, Vector<{Op1BaseType}>.Zero);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_all - operation in trueValue");
            ConditionalSelectScenario_TrueValue(Vector<{Op1BaseType}>.AllBitsSet, _fld1, Vector<{Op1BaseType}>.Zero);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_mask - operation in falseValue");
            ConditionalSelectScenario_FalseValue(_mask, _fld1, Vector<{Op1BaseType}>.Zero);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_zero - operation in falseValue");
            ConditionalSelectScenario_FalseValue(Vector<{Op1BaseType}>.Zero, _fld1, Vector<{Op1BaseType}>.Zero);

            TestLibrary.TestFramework.BeginScenario("ConditionalSelect_ZeroOp_all - operation in falseValue");
            ConditionalSelectScenario_FalseValue(Vector<{Op1BaseType}>.AllBitsSet, _fld1, Vector<{Op1BaseType}>.Zero);
        }

        [method: MethodImpl(MethodImplOptions.AggressiveInlining)]
        private void ConditionalSelectScenario_TrueValue(Vector<{Op1BaseType}> mask, Vector<{Op1BaseType}> op1, Vector<{Op1BaseType}> falseOp)
        {
            var result = Sve.ConditionalSelect(mask, {Isa}.{Method}(op1), falseOp);
            ValidateConditionalSelectResult(mask, op1, falseOp, result);
        }

        [method: MethodImpl(MethodImplOptions.AggressiveInlining)]
        private void ConditionalSelectScenario_FalseValue(Vector<{Op1BaseType}> mask, Vector<{Op1BaseType}> op1, Vector<{Op1BaseType}> trueOp)
        {
            var result = Sve.ConditionalSelect(mask, trueOp, {Isa}.{Method}(op1));
            ValidateConditionalSelectResult(mask, op1, trueOp, result, false);
        }

        public void RunUnsupportedScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunUnsupportedScenario));
            bool succeeded = false;
            try
            {
                RunBasicScenario_UnsafeRead();
            }
            catch (PlatformNotSupportedException)
            {
                succeeded = true;
            }

            if (!succeeded)
            {
                Succeeded = false;
            }
        }

        private void ValidateConditionalSelectResult(
            Vector<{Op1BaseType}> maskOp,
            Vector<{Op1BaseType}> left,
            Vector<{Op1BaseType}> cond,
            Vector<{RetBaseType}> output,
            bool trueMode = true,
            [CallerMemberName] string method = "")
        {
            {Op1BaseType}[] mask = new {Op1BaseType}[Op1ElementCount];
            {Op1BaseType}[] leftOp = new {Op1BaseType}[Op1ElementCount];
            {Op1BaseType}[] condVal = new {Op1BaseType}[Op1ElementCount];
            {RetBaseType}[] result = new {RetBaseType}[RetElementCount];

            TestLibrary.Vectors.VectorToArray(ref mask, maskOp);
            TestLibrary.Vectors.VectorToArray(ref leftOp, left);
            TestLibrary.Vectors.VectorToArray(ref condVal, cond);
            TestLibrary.Vectors.VectorToArray(ref result, output);

            {RetBaseType}[] expected = new {RetBaseType}[RetElementCount];
            for (var i = 0; i < RetElementCount; i++)
            {
                if (trueMode)
                {
                    expected[i] = (mask[i] != 0) ? {GetIterResult} : condVal[i];
                }
                else
                {
                    expected[i] = (mask[i] == 0) ? {GetIterResult} : condVal[i];
                }
            }

            if (!expected.SequenceEqual(result))
            {
                TestLibrary.TestFramework.LogInformation($"{nameof({Isa})}.{nameof({Isa}.{Method})}<{RetBaseType}>(Vector<{Op1BaseType}>, Vector<{Op1BaseType}>): {method} failed:");
                TestLibrary.TestFramework.LogInformation($"    mask: ({string.Join(", ", mask)})");
                TestLibrary.TestFramework.LogInformation($"  leftOp: ({string.Join(", ", leftOp)})");
                TestLibrary.TestFramework.LogInformation($"    cond: ({string.Join(", ", condVal)})");
                TestLibrary.TestFramework.LogInformation($"expected: ({string.Join(", ", expected)})");
                TestLibrary.TestFramework.LogInformation($"  result: ({string.Join(", ", result)})");
                TestLibrary.TestFramework.LogInformation(string.Empty);

                Succeeded = false;
            }
        }

        private void ValidateResult(Vector<{Op1BaseType}> leftOp, Vector<{RetBaseType}> result, [CallerMemberName] string method = "")
        {
            {RetBaseType}[] expected = new {RetBaseType}[RetElementCount];
            {RetBaseType}[] resultArr = new {RetBaseType}[RetElementCount];

            TestLibrary.Vectors.VectorToArray(ref resultArr, result);

            for (int i = 0; i < resultArr.Length; i++)
            {
                expected[i] = {GetIterResult};
            }

            if (!expected.SequenceEqual(resultArr))
            {
                TestLibrary.TestFramework.LogInformation($"{nameof({Isa})}.{nameof({Isa}.{Method})}<{RetBaseType}>(Vector<{Op1BaseType}>): {method} failed:");
                TestLibrary.TestFramework.LogInformation($"  leftOp: ({string.Join(", ", leftOp)})");
                TestLibrary.TestFramework.LogInformation($"expected: ({string.Join(", ", expected)})");
                TestLibrary.TestFramework.LogInformation($"  result: ({string.Join(", ", result)})");
                TestLibrary.TestFramework.LogInformation(string.Empty);

                Succeeded = false;
            }
        }
    }
}
