// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

/******************************************************************************
 * This file is auto-generated from a template file by the GenerateTests.csx  *
 * script in tests\src\JIT\HardwareIntrinsics\X86\Shared. In order to make    *
 * changes, please update the corresponding template and run according to the *
 * directions listed in the file.                                             *
 ******************************************************************************/

using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;

namespace JIT.HardwareIntrinsics.X86
{
    public static partial class Program
    {
        private static void {Method}{RetBaseType}BinRes()
        {
            var test = new ScalarTernOpBinResTest__{Method}{RetBaseType}();

            if (test.IsSupported)
            {
                // Validates basic functionality works, using Unsafe.ReadUnaligned
                test.RunBasicScenario_UnsafeRead();

                // Validates calling via reflection works, using Unsafe.ReadUnaligned
                test.RunReflectionScenario_UnsafeRead();

                // Validates passing a static member works
                test.RunClsVarScenario();

                // Validates passing a local works, using Unsafe.ReadUnaligned
                test.RunLclVarScenario_UnsafeRead();

                // Validates passing the field of a local class works
                test.RunClassLclFldScenario();

                // Validates passing an instance member of a class works
                test.RunClassFldScenario();

                // Validates passing the field of a local struct works
                test.RunStructLclFldScenario();

                // Validates passing an instance member of a struct works
                test.RunStructFldScenario();
            }
            else
            {
                // Validates we throw on unsupported hardware
                test.RunUnsupportedScenario();
            }

            if (!test.Succeeded)
            {
                throw new Exception("One or more scenarios did not complete as expected.");
            }
        }
    }

    public sealed unsafe class ScalarTernOpBinResTest__{Method}{RetBaseType}
    {
        private struct TestStruct
        {
            public {Op1BaseType} _fld1;
            public {Op2BaseType} _fld2;
            public {Op3BaseType} _fld3;

            public static TestStruct Create()
            {
                var testStruct = new TestStruct();

                testStruct._fld1 = {NextValueOp1};
                testStruct._fld2 = {NextValueOp2};
                testStruct._fld3 = {NextValueOp3};

                return testStruct;
            }

            public void RunStructFldScenario(ScalarTernOpBinResTest__{Method}{RetBaseType} testClass)
            {
                {Op3BaseType} buffer = 0;
                var result = {Isa}.{Method}(_fld1, _fld2, &buffer);
                testClass.ValidateResult(_fld1, _fld2, buffer, result);
            }
        }

        private static {Op1BaseType} _data1;
        private static {Op2BaseType} _data2;
        private static {Op3BaseType} _data3;

        private static {Op1BaseType} _clsVar1;
        private static {Op2BaseType} _clsVar2;
        private static {Op3BaseType} _clsVar3;

        private {Op1BaseType} _fld1;
        private {Op2BaseType} _fld2;
        private {Op3BaseType} _fld3;

        static ScalarTernOpBinResTest__{Method}{RetBaseType}()
        {
            _clsVar1 = {NextValueOp1};
            _clsVar2 = {NextValueOp2};
            _clsVar3 = {NextValueOp3};
        }

        public ScalarTernOpBinResTest__{Method}{RetBaseType}()
        {
            Succeeded = true;

            _fld1 = {NextValueOp1};
            _fld2 = {NextValueOp2};
            _fld3 = {NextValueOp3};

            _data1 = {NextValueOp1};
            _data2 = {NextValueOp2};
            _data3 = {NextValueOp3};
        }

        public bool IsSupported => {Isa}.IsSupported;

        public bool Succeeded { get; set; }

        public void RunBasicScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunBasicScenario_UnsafeRead));

            {Op3BaseType} buffer = 0;

            var result = {Isa}.{Method}(
                Unsafe.ReadUnaligned<{Op1BaseType}>(ref Unsafe.As<{Op1BaseType}, byte>(ref _data1)),
                Unsafe.ReadUnaligned<{Op2BaseType}>(ref Unsafe.As<{Op2BaseType}, byte>(ref _data2)),
                &buffer
            );

            ValidateResult(_data1, _data2, buffer, result);
        }

        public void RunReflectionScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunReflectionScenario_UnsafeRead));

            {Op3BaseType} buffer = 0;

            var result = typeof({Isa}).GetMethod(nameof({Isa}.{Method}), new Type[] { typeof({Op1BaseType}), typeof({Op2BaseType}), typeof({Op3BaseType}*) })
                                     .Invoke(null, new object[] {
                                        Unsafe.ReadUnaligned<{Op1BaseType}>(ref Unsafe.As<{Op1BaseType}, byte>(ref _data1)),
                                        Unsafe.ReadUnaligned<{Op2BaseType}>(ref Unsafe.As<{Op2BaseType}, byte>(ref _data2)),
                                        Pointer.Box(&buffer, typeof({Op3BaseType}*))
                                     });

            ValidateResult(_data1, _data2, buffer, ({RetBaseType})result);
        }

        public void RunClsVarScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunClsVarScenario));
            {Op3BaseType} buffer = 0;
            var result = {Isa}.{Method}(
                _clsVar1,
                _clsVar2,
                &buffer
            );

            ValidateResult(_clsVar1, _clsVar2, buffer, result);
        }

        public void RunLclVarScenario_UnsafeRead()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunLclVarScenario_UnsafeRead));

            var data1 = Unsafe.ReadUnaligned<{Op1BaseType}>(ref Unsafe.As<{Op1BaseType}, byte>(ref _data1));
            var data2 = Unsafe.ReadUnaligned<{Op2BaseType}>(ref Unsafe.As<{Op2BaseType}, byte>(ref _data2));
            var data3 = Unsafe.ReadUnaligned<{Op3BaseType}>(ref Unsafe.As<{Op3BaseType}, byte>(ref _data3));
            var result = {Isa}.{Method}(data1, data2, &data3);

            ValidateResult(data1, data2, data3, result);
        }

        public void RunClassLclFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunClassLclFldScenario));

            {Op3BaseType} buffer = 0;

            var test = new ScalarTernOpBinResTest__{Method}{RetBaseType}();
            var result = {Isa}.{Method}(test._fld1, test._fld2, &buffer);

            ValidateResult(test._fld1, test._fld2, buffer, result);
        }

        public void RunClassFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunClassFldScenario));

            {Op3BaseType} buffer = 0;

            var result = {Isa}.{Method}(_fld1, _fld2, &buffer);
            ValidateResult(_fld1, _fld2, buffer, result);
        }

        public void RunStructLclFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunStructLclFldScenario));

            var test = TestStruct.Create();
            var result = {Isa}.{Method}(test._fld1, test._fld2, &test._fld3);

            ValidateResult(test._fld1, test._fld2, test._fld3, result);
        }

        public void RunStructFldScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunStructFldScenario));

            var test = TestStruct.Create();
            test.RunStructFldScenario(this);
        }

        public void RunUnsupportedScenario()
        {
            TestLibrary.TestFramework.BeginScenario(nameof(RunUnsupportedScenario));

            bool succeeded = false;

            try
            {
                RunBasicScenario_UnsafeRead();
            }
            catch (PlatformNotSupportedException)
            {
                succeeded = true;
            }

            if (!succeeded)
            {
                Succeeded = false;
            }
        }

        private void ValidateResult({Op1BaseType} op1, {Op2BaseType} op2, {Op3BaseType} lower, {RetBaseType} higher, [CallerMemberName] string method = "")
        {
            var isUnexpectedResult = false;

            {ValidateResult}

            if (isUnexpectedResult)
            {
                TestLibrary.TestFramework.LogInformation($"{nameof({Isa})}.{nameof({Isa}.{Method})}<{RetBaseType}>({Op1BaseType}, {Op2BaseType}, {Op3BaseType}): {Method} failed:");
                TestLibrary.TestFramework.LogInformation($"   op1: {op1}");
                TestLibrary.TestFramework.LogInformation($"   op2: {op2}");
                TestLibrary.TestFramework.LogInformation($" lower: {lower}");
                TestLibrary.TestFramework.LogInformation($"higher: {higher}");
                TestLibrary.TestFramework.LogInformation(string.Empty);

                Succeeded = false;
            }
        }
    }
}
