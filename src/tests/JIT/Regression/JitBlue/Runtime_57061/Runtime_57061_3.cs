// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// Generated by Fuzzlyn v1.2 on 2021-08-16 22:20:52
// Run on .NET 6.0.0-dev on X86 Windows
// Seed: 15888848110967612195
// Reduced from 235.4 KiB to 1.4 KiB in 00:22:05
// Crashes the runtime
using System.Runtime.CompilerServices;

class C0
{
    public ushort F0;
    public short F1;
    public ulong F2;
    public short F3;
    public C0(ushort f0, ulong f2, short f3)
    {
        F0 = f0;
        F2 = f2;
        F3 = f3;
    }
}

class C1
{
    public uint F1;
}

struct S0
{
    public byte F0;
    public C0 F3;
}

public class Runtime_57061_3
{
    static long s_2;
    static S0[][][] s_3;
    static S0 s_4;
    public static int Main()
    {
        C1 vr3 = default(C1);
        for (int vr4 = 0; vr4 < Bound(); vr4++)
        {
            try
            {
                System.Console.WriteLine(vr3.F1);
            }
            finally
            {
                s_2 = s_2;
            }

            bool vr5 = false;
            if (vr5)
            {
                try
                {
                    vr5 &= 0 == s_4.F3.F1;
                }
                finally
                {
                    var vr6 = new C0(1, 1, 0);
                    var vr7 = new C0(0, 0, 0);
                    S0 vr10 = s_3[0][0][0];
                    byte vr11 = s_4.F0++;
                    uint vr12 = default(uint);
                    var vr8 = (byte)vr12;
                    M4(ref s_3[0][0][0], vr8);
                }
            }
        }

        return 100;
    }

    static uint M4(ref S0 arg2, byte arg3)
    {
        return default(uint);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static int Bound() => 0;
}