// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// Generated by Fuzzlyn v2.5 on 2025-03-23 15:10:25
// Run on X64 Windows
// Seed: 14181260275910254012-vectort,vector128,vector256,x86aes,x86avx,x86avx2,x86avx512bw,x86avx512bwvl,x86avx512cd,x86avx512cdvl,x86avx512dq,x86avx512dqvl,x86avx512f,x86avx512fvl,x86avx512fx64,x86bmi1,x86bmi1x64,x86bmi2,x86bmi2x64,x86fma,x86lzcnt,x86lzcntx64,x86pclmulqdq,x86popcnt,x86popcntx64,x86sse,x86ssex64,x86sse2,x86sse2x64,x86sse3,x86sse41,x86sse41x64,x86sse42,x86sse42x64,x86ssse3,x86x86base
// Reduced from 68.9 KiB to 0.3 KiB in 00:01:38
// Problem() Hits JIT assert in Debug:
// Assertion failed 'genTypeSize(op1) == genTypeSize(simdBaseType)' in 'Program:Main(Fuzzlyn.ExecutionServer.IRuntime)' during 'Lowering nodeinfo' (IL size 20; hash 0xade6b36b; MinOpts)

// Generated by Fuzzlyn v2.5 on 2025-03-23 15:09:24
// Run on X64 Windows
// Seed: 3022985173499088836-vectort,vector128,vector256,x86aes,x86avx,x86avx2,x86avx512bw,x86avx512bwvl,x86avx512cd,x86avx512cdvl,x86avx512dq,x86avx512dqvl,x86avx512f,x86avx512fvl,x86avx512fx64,x86bmi1,x86bmi1x64,x86bmi2,x86bmi2x64,x86fma,x86lzcnt,x86lzcntx64,x86pclmulqdq,x86popcnt,x86popcntx64,x86sse,x86ssex64,x86sse2,x86sse2x64,x86sse3,x86sse41,x86sse41x64,x86sse42,x86sse42x64,x86ssse3,x86x86base
// Reduced from 26.2 KiB to 0.3 KiB in 00:01:05
// Problem2() Hits JIT assert in Debug:
// Assertion failed 'op1->TypeIs(TYP_INT) && (genTypeSize(op1->CastToType()) == genTypeSize(simdBaseType))' in 'Program:Main(Fuzzlyn.ExecutionServer.IRuntime)' during 'Lowering nodeinfo' (IL size 31; hash 0xade6b36b; MinOpts)
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using Xunit;

public class C0
{
    public sbyte F4;
}

public class Runtime_113829
{
    [Fact]
    public static void Problem()
    {
        var vr4 = new C0();
        Vector128.CreateScalar((short)vr4.F4);
    }

    [Fact]
    public static void Problem2()
    {
        if (Sse41.X64.IsSupported)
        {
            var vr7 = Vector128.CreateScalar(2263564149047927034UL);
            Vector256.CreateScalar((short)(sbyte)Sse41.X64.Extract(vr7, 0));
        }
    }
}
