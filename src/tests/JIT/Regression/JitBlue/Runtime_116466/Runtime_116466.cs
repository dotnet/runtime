// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// Generated by Fuzzlyn v3.2 on 2025-06-08 15:45:13
// Run on X64 Linux
// Seed: 5301785820831683815-vectort,vector128,vector256,x86aes,x86avx,x86avx2,x86avx512bw,x86avx512bwvl,x86avx512cd,x86avx512cdvl,x86avx512dq,x86avx512dqvl,x86avx512f,x86avx512fvl,x86avx512fx64,x86bmi1,x86bmi1x64,x86bmi2,x86bmi2x64,x86fma,x86lzcnt,x86lzcntx64,x86pclmulqdq,x86popcnt,x86popcntx64,x86sse,x86ssex64,x86sse2,x86sse2x64,x86sse3,x86sse41,x86sse41x64,x86sse42,x86sse42x64,x86ssse3,x86x86base
// Reduced from 219.4 KiB to 1.8 KiB in 00:06:09
// Debug: Outputs 1
// Release: Outputs 0
using System;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using Xunit;

public class Runtime_116466
{
    static Vector256<uint> s_19;
    [ThreadStatic]
    static sbyte s_25;
    static int s_result;

    [Fact]
    public static int TestEntryPoint()
    {
        s_25 = 123;
        var vr3 = new S0(100);
        var vr4 = new S1();
        M11(vr3, vr4);
        return s_result;
    }

    static short M11(S0 arg0, S1 arg7)
    {
        s_19 = s_19;
        var vr2 = Vector128.CreateScalar(0UL).AsVector();
        return M12(vr2, s_25, arg0);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static short M12(Vector<ulong> arg0, sbyte arg2, S0 arg3)
    {
        short var1 = arg3.F7;
        s_result = var1;
        return arg3.F3;
    }

    struct S0
    {
        public short F3;
        public Vector<ushort> F6;
        public short F7;
        public S0(short f7) : this()
        {
            F7 = f7;
        }
    }

    struct S1
    {
        public S0 F0;
    }
}
