// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// Generated by Fuzzlyn v3.3 on 2025-08-05 00:20:11
// Run on Arm64 Linux
// Seed: 7831934182807398228-vectort,vector64,vector128,armadvsimd,armadvsimdarm64,armaes,armarmbase,armarmbasearm64,armcrc32,armcrc32arm64,armdp,armrdm,armrdmarm64,armsha1,armsha256,armsve,armsve2
// Reduced from 61.3 KiB to 1.3 KiB in 00:00:54
// Debug: Outputs <14533768479604701151, 1>
// Release: Outputs <14533768479604701151, 0>

using System;
using System.Runtime.CompilerServices;
using System.Numerics;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.Arm;
using Xunit;

public class Runtime_118377
{
    public static ulong s_4;
    public static ulong F0 = 1;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Vector<ulong> M4()
    {
        var vr3 = Sve.CreateWhileLessThanMask64Bit(0, 0);
        var vr5 = Vector.Create<ulong>(s_4);
        var vr1 = Sve.CreateBreakPropagateMask(vr3, vr5);
        var vr7 = Vector.Create<ulong>(0);
        return Sve.Add(vr1, vr7);
    }

    [Fact]
    public static void TestEntryPoint()
    {
        if (Sve.IsSupported)
        {
            var vr4 = F0;
            var vr0 = Vector.Create<ulong>(vr4);
            var vr8 = Vector128.CreateScalar(14533768479604701152UL).AsVector();
            var vr10 = F0;
            var vr9 = Vector.Create<ulong>(vr10);
            var vr6 = Sve.AbsoluteDifference(vr8, vr9);
            var vr11 = M4();
            Vector<ulong> var2 = Sve.ConditionalSelect(vr0, vr6, vr11);
            Console.WriteLine(var2);
            Assert.Equal(14533768479604701151UL, var2[0]);
            Assert.Equal(1UL, var2[1]);
        }
    }
}
