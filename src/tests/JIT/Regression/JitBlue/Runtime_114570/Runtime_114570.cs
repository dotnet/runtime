// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// Generated by Fuzzlyn v2.5 on 2025-04-11 19:36:22
// Run on X86 Windows
// Seed: 2880609996874211534-vectort,vector128,vector256,x86aes,x86avx,x86avx2,x86avx512bw,x86avx512bwvl,x86avx512cd,x86avx512cdvl,x86avx512dq,x86avx512dqvl,x86avx512f,x86avx512fvl,x86bmi1,x86bmi2,x86fma,x86lzcnt,x86pclmulqdq,x86popcnt,x86sse,x86sse2,x86sse3,x86sse41,x86sse42,x86ssse3,x86x86base
// Reduced from 130.6 KiB to 0.9 KiB in 00:04:12
// Hits JIT assert in Release:
// Assertion failed 'isContainable || supportsRegOptional' in 'Program:M8():System.Runtime.Intrinsics.Vector128`1[ulong]' during 'Generate code' (IL size 39; hash 0x72979674; FullOpts)
using System;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using Xunit;

public class Runtime_114570
{
    public static IRuntime s_rt = new Runtime();
    public static byte s_1;
    public static Vector128<sbyte> s_17;
    public static uint s_22;

    [Fact]
    public static void Problem()
    {
        if (Bmi1.IsSupported)
        {
            var vr17 = M8();
        }
    }

    public static Vector128<ulong> M8()
    {
        var vr6 = Vector128.Create(0, 0, s_22, 0);
        var vr3 = (ulong)Bmi1.AndNot(0, M23(vr6, ref s_17));
        return Vector128.CreateScalar(vr3);
    }

    public static ref byte M23(Vector128<uint> arg0, ref Vector128<sbyte> arg1)
    {
        s_rt.WriteLine(arg0);
        return ref s_1;
    }
}

public interface IRuntime
{
    void WriteLine<T>(T value);
}

public class Runtime : IRuntime
{
    public void WriteLine<T>(T value) => Console.WriteLine(value);
}