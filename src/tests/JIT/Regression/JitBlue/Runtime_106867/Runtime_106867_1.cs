// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using Xunit;
using System.Runtime.CompilerServices;

// Generated by Fuzzlyn v2.3 on 2024-08-23 10:12:51
// Run on Arm64 Windows
// Seed: 4576767951799510057-vectort,vector64,vector128,armsve
// Reduced from 32.2 KiB to 0.5 KiB in 00:00:25
// Hits JIT assert in Release:
// Assertion failed 'secondId->idReg1() != secondId->idReg3()' in 'Program:Main(Fuzzlyn.ExecutionServer.IRuntime)' during 'Emit code' (IL size 55; hash 0xade6b36b; FullOpts)
//
//     File: C:\dev\dotnet\runtime2\src\coreclr\jit\emitarm64sve.cpp Line: 18600
//
using System;
using System.Numerics;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.Arm;

public class Runtime_106866_2
{
    [Fact]
    public static void TestEntryPoint()
    {
        if (Sve.IsSupported)
        {
            Vector<short> vr4 = default(Vector<short>);
            vr4 = Sve.MultiplyAdd(vr4, vr4, vr4);
            var vr5 = (short)0;
            var vr6 = Vector128.CreateScalar(vr5).AsVector();
            var vr7 = (short)0;
            var vr8 = Sve.ConditionalExtractLastActiveElement(vr6, vr7, vr4);
            Consume(vr8);
        }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static void Consume<T>(T val)
    {
    }
}
