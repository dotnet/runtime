<?xml version="1.0" encoding="utf-8"?>

<!--
***********************************************************************************************
CLRTest.Jit.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file contains the logic for generating command scripts for special GC tests.

WARNING:   When setting properties based on their current state (for example:
           <Foo Condition="'$(Foo)'==''>Bar</Foo>).  Be very careful.  Another script generation
           target might be trying to do the same thing.  It's better to avoid this by instead setting a new property.
           
           Additionally, be careful with itemgroups.  Include will propagate outside of the target too!

***********************************************************************************************
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <BashScriptSnippetGen>$(BashScriptSnippetGen);GetIlasmRoundTripBashScript;GetDisasmCheckBashScript</BashScriptSnippetGen>
    <BatchScriptSnippetGen>$(BatchScriptSnippetGen);GetIlasmRoundTripBatchScript;GetDisasmCheckBatchScript</BatchScriptSnippetGen>
  </PropertyGroup>

  <!--
  ***********************************************************************************************
  ildasm / ilasm round trip testing

  Note: https://github.com/dotnet/runtime/issues/4873 describes an issue with ildasm that requires
  us to use the "/raweh" argument.
  ***********************************************************************************************
  -->

  <Target Name="GetIlasmRoundTripBashScript"
          Returns="$(IlasmRoundTripBashScript);$(BashIlrtTestLaunchCmds)">
    <PropertyGroup>
      <DisassemblyName>$(AssemblyName).dasm.il</DisassemblyName>
      <TargetAssemblyName>$(AssemblyName).asm.dll</TargetAssemblyName>

      <IlasmRoundTripBashScript Condition="'$(CLRTestKind)' == 'RunOnly'"><![CDATA[
# IlasmRoundTrip Script
# For CLRTestKind==RunOnly, we don't do any ilasm round-trip testing. We also need to disable
# ilasm round-trip testing for the project we call, as there might be multiple RunOnly tests
# concurrently invoking the same project, which can lead to race conditions on the ilasm/ildasm commands.
export RunningIlasmRoundTrip=
]]>
      </IlasmRoundTripBashScript>

      <IlasmRoundTripBashScript Condition="'$(CLRTestKind)' == 'BuildAndRun'">
  <![CDATA[
# IlasmRoundTrip Script
# Disable Ilasm round-tripping for Linker tests.
# Todo: Ilasm round-trip on linked binaries.

if [ -z "$DoLink" -a ! -z "$RunningIlasmRoundTrip" ];
then
  echo "$CORE_ROOT/ildasm" -raweh -unicode -out=$(DisassemblyName) $(InputAssemblyName)
  "$CORE_ROOT/ildasm" -raweh -unicode -out=$(DisassemblyName) $(InputAssemblyName)
  ERRORLEVEL=$?
  if [ $ERRORLEVEL -ne 0 ]
  then
    echo EXECUTION OF ILDASM - FAILED $ERRORLEVEL
    exit 1
  fi
  if [ ! -f "$(DisassemblyName)" ]
  then
    echo "EXECUTION OF ILDASM - FAILED $(DisassemblyName) is missing"
    exit 1
  fi

  ilasm_count=1
  while true
  do
    echo "$CORE_ROOT/ilasm" -output=$(TargetAssemblyName) $(_IlasmSwitches) $(DisassemblyName)
    "$CORE_ROOT/ilasm" -output=$(TargetAssemblyName) $(_IlasmSwitches) $(DisassemblyName)
    ERRORLEVEL=$?
    if [ $ERRORLEVEL -eq 0 ]
    then
      break
    fi

    echo EXECUTION $ilasm_count OF ILASM - FAILED with $ERRORLEVEL

    if [ $ilasm_count -eq 3 ]
    then
      break
    fi

    ((ilasm_count++))
    echo Trying again
    sleep 10
  done

  if [ $ERRORLEVEL -ne 0 ]
  then
    exit 1
  fi
fi
]]>
      </IlasmRoundTripBashScript>
      <BashIlrtTestLaunchCmds Condition="'$(CLRTestKind)' == 'BuildAndRun'"><![CDATA[
if [ -z "$DoLink" -a ! -z "$RunningIlasmRoundTrip" ];
then
  echo $LAUNCHER $(TargetAssemblyName) %24(printf "'%s' " "${CLRTestExecutionArguments[@]}")
  $LAUNCHER $(TargetAssemblyName) "${CLRTestExecutionArguments[@]}"
  ERRORLEVEL=$?
  if [ $ERRORLEVEL -ne $CLRTestExpectedExitCode ]
  then
    echo END EXECUTION OF IL{D}ASM BINARY - FAILED $ERRORLEVEL vs $CLRTestExpectedExitCode
    exit 1
  fi
fi
]]>
      </BashIlrtTestLaunchCmds>
    </PropertyGroup>
  </Target>

  <Target Name="GetIlasmRoundTripBatchScript"
          Returns="$(IlasmRoundTripBatchScript);$(BatchIlrtTestLaunchCmds)">
    <PropertyGroup>
      <DisassemblyName>$(AssemblyName).dasm.il</DisassemblyName>
      <TargetAssemblyName>$(AssemblyName).asm.dll</TargetAssemblyName>

      <IlasmRoundTripBatchScript Condition="'$(CLRTestKind)' == 'RunOnly'"><![CDATA[
REM IlasmRoundTrip Script
REM For CLRTestKind==RunOnly, we don't do any ilasm round-trip testing. We also need to disable
REM ilasm round-trip testing for the project we call, as there might be multiple RunOnly tests
REM concurrently invoking the same project, which can lead to race conditions on the ilasm/ildasm commands.
set RunningIlasmRoundTrip=
]]>
      </IlasmRoundTripBatchScript>

      <IlasmRoundTripBatchScript Condition="'$(CLRTestKind)' == 'BuildAndRun'"><![CDATA[
REM IlasmRoundTrip Script
REM Disable Ilasm round-tripping for Linker tests.
REM Todo: Ilasm round-trip on linked binaries.
IF NOT DEFINED DoLink (
  IF DEFINED RunningIlasmRoundTrip (
    ECHO %CORE_ROOT%\ildasm.exe /raweh /unicode /out=$(DisassemblyName) $(InputAssemblyName)
    %CORE_ROOT%\ildasm.exe /raweh /unicode /out=$(DisassemblyName) $(InputAssemblyName)

    IF NOT "!ERRORLEVEL!"=="0" (
      ECHO EXECUTION OF ILDASM - FAILED !ERRORLEVEL!
      Exit /b 1
    )
    IF NOT EXIST $(DisassemblyName) (
      ECHO EXECUTION OF ILDASM - FAILED $(DisassemblyName) is missing
      Exit /b 1
    )

   set ilasm_count=1
:Try_ilasm
    ECHO %CORE_ROOT%\ilasm.exe /output=$(TargetAssemblyName) $(_IlasmSwitches) $(DisassemblyName)
    %CORE_ROOT%\ilasm.exe /output=$(TargetAssemblyName) $(_IlasmSwitches) $(DisassemblyName)
    IF NOT "!ERRORLEVEL!"=="0" (
      ECHO EXECUTION OF ILASM - Try !ilasm_count! FAILED with status !ERRORLEVEL! 
      IF !ilasm_count! LEQ 3 (
        ECHO Trying again
        set /A ilasm_count=ilasm_count+1
        timeout /t 10 /nobreak
        goto :Try_ilasm
      )
      ECHO EXECUTION OF ILASM - FAILED
      Exit /b 1
    )
  )
)
]]>
      </IlasmRoundTripBatchScript>
      <BatchIlrtTestLaunchCmds Condition="'$(CLRTestKind)' == 'BuildAndRun'"><![CDATA[
IF NOT DEFINED DoLink (
  if defined RunningIlasmRoundTrip (
    ECHO %LAUNCHER% $(TargetAssemblyName) %CLRTestExecutionArguments%
    %LAUNCHER% $(TargetAssemblyName) %CLRTestExecutionArguments%
    IF NOT "!ERRORLEVEL!"=="%CLRTestExpectedExitCode%" (
      ECHO END EXECUTION OF IL{D}ASM BINARY - FAILED !ERRORLEVEL! vs %CLRTestExpectedExitCode%
      Exit /b 1
    )
  )
)
]]>
      </BatchIlrtTestLaunchCmds>
    </PropertyGroup>
  </Target>

  <Target Name="GetDisasmCheckData"
          Returns="$(HasDisasmCheck);@(DisasmCheckFiles)">
    <ItemGroup>
      <DisasmCheckFiles Include="%(Compile.Identity)" Condition="'%(Compile.HasDisasmCheck)' == 'true'" />
    </ItemGroup>
    <PropertyGroup>
      <HasDisasmCheck>false</HasDisasmCheck>
      <HasDisasmCheck Condition="@(DisasmCheckFiles->Count()) &gt; 0 And '$(CLRTestKind)' == 'BuildAndRun' And '$(TargetOS)' == 'windows' And '$(TargetArchitecture)' == 'x64'">true</HasDisasmCheck>
    </PropertyGroup>
  </Target>

  <Target Name="PropagateHasDisasmCheckToCopy"
          BeforeTargets="AssignTargetPaths">
    <ItemGroup>
      <Compile Update="@(Compile)"
               Condition="'%(Compile.HasDisasmCheck)' == 'true'"
               CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>

  <Target Name="GetDisasmCheckBashScript"
          Returns="$(HasBashDisasmCheck);$(BashDisasmOutputFile);$(BashDisasmCheckPostCommands)"
          DependsOnTargets="GetDisasmCheckData">
    <PropertyGroup>
      <HasBashDisasmCheck>$(HasDisasmCheck)</HasBashDisasmCheck>

      <BashDisasmOutputFile>/dev/null</BashDisasmOutputFile>
      <BashDisasmOutputFile Condition="'$(HasBashDisasmCheck)' == 'true'">%scriptPath%/__jit_disasm.out</BashDisasmOutputFile>

      <BashDisasmListOutputFile>/dev/null</BashDisasmListOutputFile>
      <BashDisasmListOutputFile Condition="'$(HasBashDisasmCheck)' == 'true'">%scriptPath%/__jit_disasm_list.out</BashDisasmListOutputFile>

      <BashDisasmCheckPostCommands></BashDisasmCheckPostCommands>
      <BashDisasmCheckPostCommands Condition="'$(HasBashDisasmCheck)' == 'true'"><![CDATA[
if [[ -n "$RunningDisasmChecks" ]]
then
@(DisasmCheckFiles -> '  $(ArtifactsDir)bin/SuperFileCheck/$(TargetArchitecture)/$(Configuration)/$(OutputRid)/SuperFileCheck --csharp "%(Identity)" --allow-unused-prefixes --check-prefixes=CHECK,$(TargetArchitecture.ToUpperInvariant()) --input-file "$(BashDisasmOutputFile)"
  ERRORLEVEL=$?
  if [[ $ERRORLEVEL -ne 0 ]]
  then
    echo EXECUTION OF FILECHECK - FAILED $ERRORLEVEL
    exit 1
  fi', '%0a')
fi]]>)
      </BashDisasmCheckPostCommands>

      <CLRTestBashPreCommands Condition="'$(HasBatchDisasmCheck)' == 'true'"><![CDATA[
if [[ -n "$RunningDisasmChecks" ]]
then
@(DisasmCheckFiles -> '  $(ArtifactsDir)bin/SuperFileCheck/$(TargetArchitecture)/$(Configuration)/$(OutputRid)/SuperFileCheck --csharp-list-method-names "%(Identity)" --allow-unused-prefixes --check-prefixes=CHECK,$(TargetArchitecture.ToUpperInvariant()) > "$(BashDisasmListOutputFile)"
  ERRORLEVEL=$?
  export DOTNET_JitDisasm=$(cat $(BashDisasmListOutputFile))
  export DOTNET_JitDiffableDasm=1
  if [[ $ERRORLEVEL -ne 0 ]]
  then
    echo EXECUTION OF FILECHECK - FAILED $ERRORLEVEL
    exit 1
  fi', '%0a')
fi]]>)
      </CLRTestBashPreCommands>
    </PropertyGroup>
  </Target>

  <Target Name="GetDisasmCheckBatchScript"
          Returns="$(HasBatchDisasmCheck);$(BatchDisasmOutputFile);$(BatchDisasmCheckPostCommands)"
          DependsOnTargets="GetDisasmCheckData">
    <PropertyGroup>
      <HasBatchDisasmCheck>$(HasDisasmCheck)</HasBatchDisasmCheck>

      <BatchDisasmOutputFile>NUL</BatchDisasmOutputFile>
      <BatchDisasmOutputFile Condition="'$(HasBatchDisasmCheck)' == 'true'">%scriptPath%\__jit_disasm.out</BatchDisasmOutputFile>

      <BatchDisasmListOutputFile>NUL</BatchDisasmListOutputFile>
      <BatchDisasmListOutputFile Condition="'$(HasBatchDisasmCheck)' == 'true'">%scriptPath%\__jit_disasm_list.out</BatchDisasmListOutputFile>

      <BatchDisasmCheckPostCommands></BatchDisasmCheckPostCommands>
      <BatchDisasmCheckPostCommands Condition="'$(HasBatchDisasmCheck)' == 'true'"><![CDATA[
if DEFINED RunningDisasmChecks (
@(DisasmCheckFiles -> '  $(ArtifactsDir)bin\SuperFileCheck\$(TargetArchitecture)\$(Configuration)\$(OutputRid)\SuperFileCheck.exe --csharp "%(Identity)" --allow-unused-prefixes --check-prefixes=CHECK,$(TargetArchitecture.ToUpperInvariant()) --input-file "$(BatchDisasmOutputFile)"
  IF NOT "!ERRORLEVEL!" == "0" (
    ECHO EXECUTION OF FILECHECK - FAILED !ERRORLEVEL!
    Exit /b 1
  )', '%0d%0a')
)]]>
      </BatchDisasmCheckPostCommands>

      <CLRTestBatchPreCommands Condition="'$(HasBatchDisasmCheck)' == 'true'">
<![CDATA[
      $(CLRTestBatchPreCommands)
if DEFINED RunningDisasmChecks (
@(DisasmCheckFiles -> '  $(ArtifactsDir)bin\SuperFileCheck\$(TargetArchitecture)\$(Configuration)\$(OutputRid)\SuperFileCheck.exe --csharp-list-method-names "%(Identity)" --check-prefixes=CHECK,$(TargetArchitecture.ToUpperInvariant()) > "$(BatchDisasmListOutputFile)"
  set /p DOTNET_JitDisasm= < $(BatchDisasmListOutputFile)
  set DOTNET_JitDiffableDasm=1
  IF NOT "!ERRORLEVEL!" == "0" (
    ECHO EXECUTION OF FILECHECK LISTING METHOD NAMES - FAILED !ERRORLEVEL!
    Exit /b 1
  )', '%0d%0a')
)]]>
      </CLRTestBatchPreCommands>
    </PropertyGroup>
  </Target>

  <PropertyGroup Condition="$(RunWithGcStress) != ''" >
    <CLRTestBatchPreCommands>
<![CDATA[
      $(CLRTestBatchPreCommands)
set COMPlus_GCStress=$(RunWithGcStress)
    ]]>
    </CLRTestBatchPreCommands>
    <BashCLRTestPreCommands>
<![CDATA[
      $(BashCLRTestPreCommands)
export COMPlus_GCStress=$(RunWithGcStress)
    ]]>
    </BashCLRTestPreCommands>
  </PropertyGroup>


</Project> 
