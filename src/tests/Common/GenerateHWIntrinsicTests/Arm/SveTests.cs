// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Collections.Generic;

static class SveTests
{
    public static TestGroup SveInputs = new TestGroup(Isa:"Sve", LoadIsa:"Sve",
    [
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Abs_float",                                                                                         ["Method"] = "Abs",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                       ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "-TestLibrary.Generator.GetSingle()",                                                                                                                                                     ["ValidateIterResult"] = "Helpers.Abs(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.Abs(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Abs_double",                                                                                        ["Method"] = "Abs",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                       ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "-TestLibrary.Generator.GetDouble()",                                                                                                                                                     ["ValidateIterResult"] = "Helpers.Abs(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.Abs(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Abs_sbyte",                                                                                         ["Method"] = "Abs",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                        ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(sbyte)-TestLibrary.Generator.GetSByte()",                                                                                                                                               ["ValidateIterResult"] = "Helpers.Abs(firstOp[i]) != result[i]", ["GetIterResult"] = "(sbyte)Helpers.Abs(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Abs_short",                                                                                         ["Method"] = "Abs",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                        ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(short)-TestLibrary.Generator.GetInt16()",                                                                                                                                               ["ValidateIterResult"] = "Helpers.Abs(firstOp[i]) != result[i]", ["GetIterResult"] = "(short)Helpers.Abs(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Abs_int",                                                                                           ["Method"] = "Abs",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                        ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "-TestLibrary.Generator.GetInt32()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.Abs(firstOp[i]) != result[i]", ["GetIterResult"] = "(int)Helpers.Abs(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Abs_long",                                                                                          ["Method"] = "Abs",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                        ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "-TestLibrary.Generator.GetInt64()",                                                                                                                                                      ["ValidateIterResult"] = "(long)Helpers.Abs(firstOp[i]) != (long)result[i]", ["GetIterResult"] = "(long)Helpers.Abs(leftOp[i])"}),

        ("SveVecBinRetMaskOpConvertTest.template",      new Dictionary<string, string> {["TestName"] = "Sve_AbsoluteCompareGreaterThan_float",                                                         ["Method"] = "AbsoluteCompareGreaterThan",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateIterResult"] = "Helpers.SveAbsoluteCompareGreaterThan(left[i], right[i]) != result[i]",                 ["GetIterResult"] = "Helpers.SveAbsoluteCompareGreaterThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",      new Dictionary<string, string> {["TestName"] = "Sve_AbsoluteCompareGreaterThan_double",                                                        ["Method"] = "AbsoluteCompareGreaterThan",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateIterResult"] = "Helpers.SveAbsoluteCompareGreaterThan(left[i], right[i]) != result[i]",                 ["GetIterResult"] = "Helpers.SveAbsoluteCompareGreaterThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",      new Dictionary<string, string> {["TestName"] = "Sve_AbsoluteCompareGreaterThanOrEqual_float",                                                  ["Method"] = "AbsoluteCompareGreaterThanOrEqual",                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateIterResult"] = "Helpers.SveAbsoluteCompareGreaterThanOrEqual(left[i], right[i]) != result[i]",          ["GetIterResult"] = "Helpers.SveAbsoluteCompareGreaterThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",      new Dictionary<string, string> {["TestName"] = "Sve_AbsoluteCompareGreaterThanOrEqual_double",                                                 ["Method"] = "AbsoluteCompareGreaterThanOrEqual",                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateIterResult"] = "Helpers.SveAbsoluteCompareGreaterThanOrEqual(left[i], right[i]) != result[i]",          ["GetIterResult"] = "Helpers.SveAbsoluteCompareGreaterThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",      new Dictionary<string, string> {["TestName"] = "Sve_AbsoluteCompareLessThan_float",                                                            ["Method"] = "AbsoluteCompareLessThan",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateIterResult"] = "Helpers.SveAbsoluteCompareLessThan(left[i], right[i]) != result[i]",                    ["GetIterResult"] = "Helpers.SveAbsoluteCompareLessThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",      new Dictionary<string, string> {["TestName"] = "Sve_AbsoluteCompareLessThan_double",                                                           ["Method"] = "AbsoluteCompareLessThan",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateIterResult"] = "Helpers.SveAbsoluteCompareLessThan(left[i], right[i]) != result[i]",                    ["GetIterResult"] = "Helpers.SveAbsoluteCompareLessThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",      new Dictionary<string, string> {["TestName"] = "Sve_AbsoluteCompareLessThanOrEqual_float",                                                     ["Method"] = "AbsoluteCompareLessThanOrEqual",                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateIterResult"] = "Helpers.SveAbsoluteCompareLessThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveAbsoluteCompareLessThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",      new Dictionary<string, string> {["TestName"] = "Sve_AbsoluteCompareLessThanOrEqual_double",                                                    ["Method"] = "AbsoluteCompareLessThanOrEqual",                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateIterResult"] = "Helpers.SveAbsoluteCompareLessThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveAbsoluteCompareLessThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),

        ("SveVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AbsoluteDifference_float",                                                                          ["Method"] = "AbsoluteDifference",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateIterResult"] = "BitConverter.SingleToInt32Bits(Helpers.AbsoluteDifference(left[i], right[i])) != BitConverter.SingleToInt32Bits(result[i])",        ["GetIterResult"] = "Helpers.AbsoluteDifference(left[i], right[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AbsoluteDifference_double",                                                                         ["Method"] = "AbsoluteDifference",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",       ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateIterResult"] = "BitConverter.DoubleToInt64Bits(Helpers.AbsoluteDifference(left[i], right[i])) != BitConverter.DoubleToInt64Bits(result[i])",        ["GetIterResult"] = "Helpers.AbsoluteDifference(left[i], right[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AbsoluteDifference_sbyte",                                                                          ["Method"] = "AbsoluteDifference",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(sbyte)TestLibrary.Generator.GetSByte()", ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "Helpers.AbsoluteDifference(left[i], right[i]) != result[i]",        ["GetIterResult"] = "(sbyte)Helpers.AbsoluteDifference(left[i], right[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AbsoluteDifference_short",                                                                          ["Method"] = "AbsoluteDifference",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(short)TestLibrary.Generator.GetInt16()", ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "Helpers.AbsoluteDifference(left[i], right[i]) != result[i]",        ["GetIterResult"] = "(short)Helpers.AbsoluteDifference(left[i], right[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AbsoluteDifference_int",                                                                            ["Method"] = "AbsoluteDifference",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "Helpers.AbsoluteDifference(left[i], right[i]) != result[i]",        ["GetIterResult"] = "(int)Helpers.AbsoluteDifference(left[i], right[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AbsoluteDifference_long",                                                                           ["Method"] = "AbsoluteDifference",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "Helpers.AbsoluteDifference(left[i], right[i]) != result[i]",        ["GetIterResult"] = "(long)Helpers.AbsoluteDifference(left[i], right[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AbsoluteDifference_byte",                                                                           ["Method"] = "AbsoluteDifference",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(byte)TestLibrary.Generator.GetByte()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "Helpers.AbsoluteDifference(left[i], right[i]) != result[i]",        ["GetIterResult"] = "(byte)Helpers.AbsoluteDifference(left[i], right[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AbsoluteDifference_ushort",                                                                         ["Method"] = "AbsoluteDifference",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.AbsoluteDifference(left[i], right[i]) != result[i]",        ["GetIterResult"] = "(ushort)Helpers.AbsoluteDifference(left[i], right[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AbsoluteDifference_uint",                                                                           ["Method"] = "AbsoluteDifference",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.AbsoluteDifference(left[i], right[i]) != result[i]",        ["GetIterResult"] = "(uint)Helpers.AbsoluteDifference(left[i], right[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AbsoluteDifference_ulong",                                                                          ["Method"] = "AbsoluteDifference",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.AbsoluteDifference(left[i], right[i]) != result[i]",        ["GetIterResult"] = "(UInt64)Helpers.AbsoluteDifference(left[i], right[i])", ["ConvertFunc"] = ""}),

        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Add_float",                                                                                         ["Method"] = "Add",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateIterResult"] = "Helpers.Add(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Add(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Add_double",                                                                                        ["Method"] = "Add",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",       ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateIterResult"] = "Helpers.Add(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Add(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Add_sbyte",                                                                                         ["Method"] = "Add",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(sbyte)TestLibrary.Generator.GetSByte()", ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "Helpers.Add(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Add(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Add_short",                                                                                         ["Method"] = "Add",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(short)TestLibrary.Generator.GetInt16()", ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "Helpers.Add(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Add(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Add_int",                                                                                           ["Method"] = "Add",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "Helpers.Add(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Add(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Add_long",                                                                                          ["Method"] = "Add",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "Helpers.Add(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Add(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Add_byte",                                                                                          ["Method"] = "Add",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(byte)TestLibrary.Generator.GetByte()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "Helpers.Add(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Add(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Add_ushort",                                                                                        ["Method"] = "Add",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.Add(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Add(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Add_uint",                                                                                          ["Method"] = "Add",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.Add(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Add(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Add_ulong",                                                                                         ["Method"] = "Add",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.Add(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Add(left[i], right[i])"}),

        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AddAcross_float",                                                                                   ["Method"] = "AddAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.AddAcrossRecursivePairwise(firstOp) != result[0]",                                                                                                          ["ValidateRemainingResults"] = "result[i] != 0.0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AddAcross_double",                                                                                  ["Method"] = "AddAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.AddAcrossRecursivePairwise(firstOp) != result[0]",                                                                                                          ["ValidateRemainingResults"] = "result[i] != 0.0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AddAcross_long_sbyte",                                                                              ["Method"] = "AddAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.AddAcrossWideningLong(firstOp) != result[0]",                                                                                                               ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AddAcross_long_short",                                                                              ["Method"] = "AddAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.AddAcrossWideningLong(firstOp) != result[0]",                                                                                                               ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AddAcross_long_int",                                                                                ["Method"] = "AddAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.AddAcrossWidening(firstOp) != result[0]",                                                                                                                   ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AddAcross_long",                                                                                    ["Method"] = "AddAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.AddAcross(firstOp) != result[0]",                                                                                                                           ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AddAcross_ulong_byte",                                                                              ["Method"] = "AddAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                        ["ValidateReduceOpResult"] = "Helpers.AddAcrossWideningULong(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AddAcross_ulong_ushort",                                                                            ["Method"] = "AddAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.AddAcrossWideningULong(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AddAcross_ulong_uint",                                                                              ["Method"] = "AddAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.AddAcrossWidening(firstOp) != result[0]",                                                                                                                   ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AddAcross_ulong",                                                                                   ["Method"] = "AddAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.AddAcross(firstOp) != result[0]",                                                                                                                           ["ValidateRemainingResults"] = "result[i] != 0"}),

        ("SveVecImmBinOpVecTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_AddRotateComplex_float_0",                                                                          ["Method"] = "AddRotateComplex",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()", ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm"] = "0", ["InvalidImm"] = "2",                   ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.AddRotateComplex(firstOp, secondOp, Imm))", ["GetVectorResult"] = "Helpers.AddRotateComplex(first, second, Imm)"}),
        ("SveVecImmBinOpVecTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_AddRotateComplex_float_1",                                                                          ["Method"] = "AddRotateComplex",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()", ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm"] = "1", ["InvalidImm"] = "2",                   ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.AddRotateComplex(firstOp, secondOp, Imm))", ["GetVectorResult"] = "Helpers.AddRotateComplex(first, second, Imm)"}),
        ("SveVecImmBinOpVecTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_AddRotateComplex_double_0",                                                                         ["Method"] = "AddRotateComplex",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()", ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()", ["NextValueMask"] = "Helpers.getMaskDouble()", ["Imm"] = "0", ["InvalidImm"] = "2",                   ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.AddRotateComplex(firstOp, secondOp, Imm))", ["GetVectorResult"] = "Helpers.AddRotateComplex(first, second, Imm)"}),
        ("SveVecImmBinOpVecTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_AddRotateComplex_double_1",                                                                         ["Method"] = "AddRotateComplex",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()", ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()", ["NextValueMask"] = "Helpers.getMaskDouble()", ["Imm"] = "1", ["InvalidImm"] = "2",                   ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.AddRotateComplex(firstOp, secondOp, Imm))", ["GetVectorResult"] = "Helpers.AddRotateComplex(first, second, Imm)"}),

        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AddSaturate_sbyte",                                                                                 ["Method"] = "AddSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(sbyte)TestLibrary.Generator.GetSByte()", ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "Helpers.AddSaturate(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.AddSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AddSaturate_short",                                                                                 ["Method"] = "AddSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(short)TestLibrary.Generator.GetInt16()", ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "Helpers.AddSaturate(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.AddSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AddSaturate_int",                                                                                   ["Method"] = "AddSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "Helpers.AddSaturate(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.AddSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AddSaturate_long",                                                                                  ["Method"] = "AddSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "Helpers.AddSaturate(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.AddSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AddSaturate_byte",                                                                                  ["Method"] = "AddSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(byte)TestLibrary.Generator.GetByte()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "Helpers.AddSaturate(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.AddSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AddSaturate_ushort",                                                                                ["Method"] = "AddSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.AddSaturate(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.AddSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AddSaturate_uint",                                                                                  ["Method"] = "AddSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.AddSaturate(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.AddSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_AddSaturate_ulong",                                                                                 ["Method"] = "AddSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.AddSaturate(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.AddSaturate(left[i], right[i])"}),

        ("SveVecBinOpTestScalarRet.template", new Dictionary<string, string> { ["TestName"] = "Sve_AddSequentialAcross_float",                                                                         ["Method"] = "AddSequentialAcross",                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",                  ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateScalarResult"] = "result[0] != Helpers.AddSequentialAcross(left, right)"}),
        ("SveVecBinOpTestScalarRet.template", new Dictionary<string, string> { ["TestName"] = "Sve_AddSequentialAcross_double",                                                                        ["Method"] = "AddSequentialAcross",                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",                  ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateScalarResult"] = "result[0] != Helpers.AddSequentialAcross(left, right)"}),

        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_And_sbyte",                                                                                         ["Method"] = "And",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(sbyte)TestLibrary.Generator.GetSByte()", ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "Helpers.And(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.And(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_And_short",                                                                                         ["Method"] = "And",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(short)TestLibrary.Generator.GetInt16()", ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "Helpers.And(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.And(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_And_int",                                                                                           ["Method"] = "And",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "Helpers.And(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.And(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_And_long",                                                                                          ["Method"] = "And",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "Helpers.And(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.And(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_And_byte",                                                                                          ["Method"] = "And",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(byte)TestLibrary.Generator.GetByte()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "Helpers.And(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.And(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_And_ushort",                                                                                        ["Method"] = "And",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.And(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.And(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_And_uint",                                                                                          ["Method"] = "And",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.And(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.And(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_And_ulong",                                                                                         ["Method"] = "And",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.And(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.And(left[i], right[i])"}),

        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AndAcross_sbyte",                                                                                   ["Method"] = "AndAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.AndAcross(firstOp) != result[0]",                                                                                                                           ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AndAcross_short",                                                                                   ["Method"] = "AndAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.AndAcross(firstOp) != result[0]",                                                                                                                           ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AndAcross_int",                                                                                     ["Method"] = "AndAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.AndAcross(firstOp) != result[0]",                                                                                                                           ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AndAcross_long",                                                                                    ["Method"] = "AndAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.AndAcross(firstOp) != result[0]",                                                                                                                           ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AndAcross_byte",                                                                                    ["Method"] = "AndAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                        ["ValidateReduceOpResult"] = "Helpers.AndAcross(firstOp) != result[0]",                                                                                                                           ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AndAcross_ushort",                                                                                  ["Method"] = "AndAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.AndAcross(firstOp) != result[0]",                                                                                                                           ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AndAcross_uint",                                                                                    ["Method"] = "AndAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.AndAcross(firstOp) != result[0]",                                                                                                                           ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_AndAcross_ulong",                                                                                   ["Method"] = "AndAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.AndAcross(firstOp) != result[0]",                                                                                                                           ["ValidateRemainingResults"] = "result[i] != 0"}),

        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_BitwiseClear_sbyte",                                                                                ["Method"] = "BitwiseClear",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(sbyte)TestLibrary.Generator.GetSByte()", ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "Helpers.BitwiseClear(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.BitwiseClear(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_BitwiseClear_short",                                                                                ["Method"] = "BitwiseClear",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(short)TestLibrary.Generator.GetInt16()", ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "Helpers.BitwiseClear(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.BitwiseClear(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_BitwiseClear_int",                                                                                  ["Method"] = "BitwiseClear",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "Helpers.BitwiseClear(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.BitwiseClear(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_BitwiseClear_long",                                                                                 ["Method"] = "BitwiseClear",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "Helpers.BitwiseClear(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.BitwiseClear(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_BitwiseClear_byte",                                                                                 ["Method"] = "BitwiseClear",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(byte)TestLibrary.Generator.GetByte()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "Helpers.BitwiseClear(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.BitwiseClear(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_BitwiseClear_ushort",                                                                               ["Method"] = "BitwiseClear",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.BitwiseClear(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.BitwiseClear(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_BitwiseClear_uint",                                                                                 ["Method"] = "BitwiseClear",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.BitwiseClear(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.BitwiseClear(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_BitwiseClear_ulong",                                                                                ["Method"] = "BitwiseClear",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.BitwiseClear(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.BitwiseClear(left[i], right[i])"}),

        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_BooleanNot_sbyte",                                                                                  ["Method"] = "BooleanNot",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.BooleanNot(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.BooleanNot(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_BooleanNot_short",                                                                                  ["Method"] = "BooleanNot",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.BooleanNot(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.BooleanNot(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_BooleanNot_int",                                                                                    ["Method"] = "BooleanNot",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.BooleanNot(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.BooleanNot(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_BooleanNot_long",                                                                                   ["Method"] = "BooleanNot",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.BooleanNot(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.BooleanNot(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_BooleanNot_byte",                                                                                   ["Method"] = "BooleanNot",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                        ["ValidateIterResult"] = "Helpers.BooleanNot(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.BooleanNot(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_BooleanNot_ushort",                                                                                 ["Method"] = "BooleanNot",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.BooleanNot(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.BooleanNot(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_BooleanNot_uint",                                                                                   ["Method"] = "BooleanNot",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.BooleanNot(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.BooleanNot(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_BooleanNot_ulong",                                                                                  ["Method"] = "BooleanNot",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.BooleanNot(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.BooleanNot(leftOp[i])"}),

        ("SveVecBinOpVecTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Compact_float",                                                                                     ["Method"] = "Compact",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.Compact(left, right))", ["GetVectorResult"] = "Helpers.Compact(left, right)",}),
        ("SveVecBinOpVecTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Compact_double",                                                                                    ["Method"] = "Compact",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.Compact(left, right))", ["GetVectorResult"] = "Helpers.Compact(left, right)",}),
        ("SveVecBinOpVecTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Compact_int",                                                                                       ["Method"] = "Compact",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.Compact(left, right))", ["GetVectorResult"] = "Helpers.Compact(left, right)",}),
        ("SveVecBinOpVecTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Compact_long",                                                                                      ["Method"] = "Compact",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.Compact(left, right))", ["GetVectorResult"] = "Helpers.Compact(left, right)",}),
        ("SveVecBinOpVecTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Compact_uint",                                                                                      ["Method"] = "Compact",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.Compact(left, right))", ["GetVectorResult"] = "Helpers.Compact(left, right)",}),
        ("SveVecBinOpVecTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Compact_ulong",                                                                                     ["Method"] = "Compact",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.Compact(left, right))", ["GetVectorResult"] = "Helpers.Compact(left, right)",}),

        ("SveVecBinRetMaskOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CompareEqual_float",                                                                                ["Method"] = "CompareEqual",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CompareEqual_double",                                                                               ["Method"] = "CompareEqual",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CompareEqual_sbyte",                                                                                ["Method"] = "CompareEqual",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CompareEqual_short",                                                                                ["Method"] = "CompareEqual",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CompareEqual_int",                                                                                  ["Method"] = "CompareEqual",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CompareEqual_long",                                                                                 ["Method"] = "CompareEqual",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CompareEqual_byte",                                                                                 ["Method"] = "CompareEqual",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                         ["ValidateIterResult"] = "Helpers.SveCompareEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CompareEqual_ushort",                                                                               ["Method"] = "CompareEqual",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CompareEqual_uint",                                                                                 ["Method"] = "CompareEqual",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CompareEqual_ulong",                                                                                ["Method"] = "CompareEqual",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),

        ("SveVecBinRetMaskOpConvertTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CompareGreaterThan_float",                                                                          ["Method"] = "CompareGreaterThan",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareGreaterThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CompareGreaterThan_double",                                                                         ["Method"] = "CompareGreaterThan",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareGreaterThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CompareGreaterThan_sbyte",                                                                          ["Method"] = "CompareGreaterThan",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareGreaterThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CompareGreaterThan_short",                                                                          ["Method"] = "CompareGreaterThan",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareGreaterThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CompareGreaterThan_int",                                                                            ["Method"] = "CompareGreaterThan",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareGreaterThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CompareGreaterThan_long",                                                                           ["Method"] = "CompareGreaterThan",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareGreaterThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CompareGreaterThan_byte",                                                                           ["Method"] = "CompareGreaterThan",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                         ["ValidateIterResult"] = "Helpers.SveCompareGreaterThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CompareGreaterThan_ushort",                                                                         ["Method"] = "CompareGreaterThan",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareGreaterThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CompareGreaterThan_uint",                                                                           ["Method"] = "CompareGreaterThan",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareGreaterThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CompareGreaterThan_ulong",                                                                          ["Method"] = "CompareGreaterThan",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareGreaterThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),

        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CompareGreaterThanOrEqual_float",                                                                 ["Method"] = "CompareGreaterThanOrEqual",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CompareGreaterThanOrEqual_double",                                                                ["Method"] = "CompareGreaterThanOrEqual",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CompareGreaterThanOrEqual_sbyte",                                                                 ["Method"] = "CompareGreaterThanOrEqual",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CompareGreaterThanOrEqual_short",                                                                 ["Method"] = "CompareGreaterThanOrEqual",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CompareGreaterThanOrEqual_int",                                                                   ["Method"] = "CompareGreaterThanOrEqual",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CompareGreaterThanOrEqual_long",                                                                  ["Method"] = "CompareGreaterThanOrEqual",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CompareGreaterThanOrEqual_byte",                                                                  ["Method"] = "CompareGreaterThanOrEqual",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                         ["ValidateIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CompareGreaterThanOrEqual_ushort",                                                                ["Method"] = "CompareGreaterThanOrEqual",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CompareGreaterThanOrEqual_uint",                                                                  ["Method"] = "CompareGreaterThanOrEqual",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CompareGreaterThanOrEqual_ulong",                                                                 ["Method"] = "CompareGreaterThanOrEqual",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareGreaterThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),

        ("SveVecBinRetMaskOpConvertTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThan_float",                                                                             ["Method"] = "CompareLessThan",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareLessThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThan_double",                                                                            ["Method"] = "CompareLessThan",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareLessThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThan_sbyte",                                                                             ["Method"] = "CompareLessThan",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareLessThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThan_short",                                                                             ["Method"] = "CompareLessThan",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareLessThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThan_int",                                                                               ["Method"] = "CompareLessThan",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareLessThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThan_long",                                                                              ["Method"] = "CompareLessThan",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareLessThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThan_byte",                                                                              ["Method"] = "CompareLessThan",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                         ["ValidateIterResult"] = "Helpers.SveCompareLessThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThan_ushort",                                                                            ["Method"] = "CompareLessThan",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareLessThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThan_uint",                                                                              ["Method"] = "CompareLessThan",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareLessThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThan_ulong",                                                                             ["Method"] = "CompareLessThan",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareLessThan(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThan(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),

        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThanOrEqual_float",                                                                      ["Method"] = "CompareLessThanOrEqual",                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareLessThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThanOrEqual_double",                                                                     ["Method"] = "CompareLessThanOrEqual",                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareLessThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThanOrEqual_sbyte",                                                                      ["Method"] = "CompareLessThanOrEqual",                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareLessThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThanOrEqual_short",                                                                      ["Method"] = "CompareLessThanOrEqual",                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareLessThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThanOrEqual_int",                                                                        ["Method"] = "CompareLessThanOrEqual",                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareLessThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThanOrEqual_long",                                                                       ["Method"] = "CompareLessThanOrEqual",                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareLessThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThanOrEqual_byte",                                                                       ["Method"] = "CompareLessThanOrEqual",                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                         ["ValidateIterResult"] = "Helpers.SveCompareLessThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThanOrEqual_ushort",                                                                     ["Method"] = "CompareLessThanOrEqual",                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareLessThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThanOrEqual_uint",                                                                       ["Method"] = "CompareLessThanOrEqual",                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareLessThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",new Dictionary<string, string> { ["TestName"] = "Sve_CompareLessThanOrEqual_ulong",                                                                      ["Method"] = "CompareLessThanOrEqual",                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareLessThanOrEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareLessThanOrEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),

        ("SveVecBinRetMaskOpConvertTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_CompareNotEqualTo_float",                                                                           ["Method"] = "CompareNotEqualTo",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareNotEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareNotEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_CompareNotEqualTo_double",                                                                          ["Method"] = "CompareNotEqualTo",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareNotEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareNotEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_CompareNotEqualTo_sbyte",                                                                           ["Method"] = "CompareNotEqualTo",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareNotEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareNotEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_CompareNotEqualTo_short",                                                                           ["Method"] = "CompareNotEqualTo",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareNotEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareNotEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_CompareNotEqualTo_int",                                                                             ["Method"] = "CompareNotEqualTo",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareNotEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareNotEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_CompareNotEqualTo_long",                                                                            ["Method"] = "CompareNotEqualTo",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.SveCompareNotEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareNotEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_CompareNotEqualTo_byte",                                                                            ["Method"] = "CompareNotEqualTo",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                         ["ValidateIterResult"] = "Helpers.SveCompareNotEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareNotEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_CompareNotEqualTo_ushort",                                                                          ["Method"] = "CompareNotEqualTo",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareNotEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareNotEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_CompareNotEqualTo_uint",                                                                            ["Method"] = "CompareNotEqualTo",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareNotEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareNotEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecBinRetMaskOpConvertTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_CompareNotEqualTo_ulong",                                                                           ["Method"] = "CompareNotEqualTo",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareNotEqual(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareNotEqual(leftOp[i], rightOp[i])", ["ConvertFunc"] = ""}),

        ("SveVecBinRetMaskOpConvertTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_CompareUnordered_float",                                                                            ["Method"] = "CompareUnordered",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareUnordered(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareUnordered(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecBinRetMaskOpConvertTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_CompareUnordered_double",                                                                           ["Method"] = "CompareUnordered",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateIterResult"] = "Helpers.SveCompareUnordered(left[i], right[i]) != result[i]",             ["GetIterResult"] = "Helpers.SveCompareUnordered(leftOp[i], rightOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),

        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute16BitAddresses_uint_int",                                                                    ["Method"] = "Compute16BitAddresses",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateIterResult"] = "(left[i] + ((uint)right[i] * 2)) != result[i]",  ["GetIterResult"] = "(left[i] + ((uint)right[i] * 2))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute16BitAddresses_uint",                                                                        ["Method"] = "Compute16BitAddresses",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateIterResult"] = "(left[i] + (right[i] * 2)) != result[i]",        ["GetIterResult"] = "(left[i] + (right[i] * 2))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute16BitAddresses_ulong_long",                                                                  ["Method"] = "Compute16BitAddresses",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateIterResult"] = "(left[i] + ((ulong)right[i] * 2)) != result[i]", ["GetIterResult"] = "(left[i] + ((ulong)right[i] * 2))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute16BitAddresses_ulong",                                                                       ["Method"] = "Compute16BitAddresses",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateIterResult"] = "(left[i] + (right[i] * 2)) != result[i]",        ["GetIterResult"] = "(left[i] + (right[i] * 2))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute32BitAddresses_uint_int",                                                                    ["Method"] = "Compute32BitAddresses",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateIterResult"] = "(left[i] + ((uint)right[i] * 4)) != result[i]",  ["GetIterResult"] = "(left[i] + ((uint)right[i] * 4))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute32BitAddresses_uint",                                                                        ["Method"] = "Compute32BitAddresses",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateIterResult"] = "(left[i] + (right[i] * 4)) != result[i]",        ["GetIterResult"] = "(left[i] + (right[i] * 4))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute32BitAddresses_ulong_long",                                                                  ["Method"] = "Compute32BitAddresses",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateIterResult"] = "(left[i] + ((ulong)right[i] * 4)) != result[i]", ["GetIterResult"] = "(left[i] + ((ulong)right[i] * 4))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute32BitAddresses_ulong",                                                                       ["Method"] = "Compute32BitAddresses",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateIterResult"] = "(left[i] + (right[i] * 4)) != result[i]",        ["GetIterResult"] = "(left[i] + (right[i] * 4))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute64BitAddresses_uint_int",                                                                    ["Method"] = "Compute64BitAddresses",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateIterResult"] = "(left[i] + ((uint)right[i] * 8)) != result[i]",  ["GetIterResult"] = "(left[i] + ((uint)right[i] * 8))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute64BitAddresses_uint",                                                                        ["Method"] = "Compute64BitAddresses",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateIterResult"] = "(left[i] + (right[i] * 8)) != result[i]",        ["GetIterResult"] = "(left[i] + (right[i] * 8))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute64BitAddresses_ulong_long",                                                                  ["Method"] = "Compute64BitAddresses",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateIterResult"] = "(left[i] + ((ulong)right[i] * 8)) != result[i]", ["GetIterResult"] = "(left[i] + ((ulong)right[i] * 8))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute64BitAddresses_ulong",                                                                       ["Method"] = "Compute64BitAddresses",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateIterResult"] = "(left[i] + (right[i] * 8)) != result[i]",        ["GetIterResult"] = "(left[i] + (right[i] * 8))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute8BitAddresses_uint_int",                                                                     ["Method"] = "Compute8BitAddresses",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateIterResult"] = "(left[i] + ((uint)right[i] * 1)) != result[i]",  ["GetIterResult"] = "(left[i] + ((uint)right[i] * 1))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute8BitAddresses_uint",                                                                         ["Method"] = "Compute8BitAddresses",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateIterResult"] = "(left[i] + (right[i] * 1)) != result[i]",        ["GetIterResult"] = "(left[i] + (right[i] * 1))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute8BitAddresses_ulong_long",                                                                   ["Method"] = "Compute8BitAddresses",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateIterResult"] = "(left[i] + ((ulong)right[i] * 1)) != result[i]", ["GetIterResult"] = "(left[i] + ((ulong)right[i] * 1))"}),
        ("SveMaskVecBinOpConvertTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Compute8BitAddresses_ulong",                                                                        ["Method"] = "Compute8BitAddresses",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateIterResult"] = "(left[i] + (right[i] * 1)) != result[i]",        ["GetIterResult"] = "(left[i] + (right[i] * 1))"}),

        ("SveConditionalSelect.template",     new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalSelect_float",                                                                           ["Method"] = "ConditionalSelect",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()",                         ["ValidateIterResult"] = "(firstOp[i] != 0 ? (result[i] != secondOp[i]) : (result[i] != thirdOp[i]))",}),
        ("SveConditionalSelect.template",     new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalSelect_double",                                                                          ["Method"] = "ConditionalSelect",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",       ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()",                         ["ValidateIterResult"] = "(firstOp[i] != 0 ? (result[i] != secondOp[i]) : (result[i] != thirdOp[i]))",}),
        ("SveConditionalSelect.template",     new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalSelect_sbyte",                                                                           ["Method"] = "ConditionalSelect",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "SByte",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetSByte()",                          ["ValidateIterResult"] = "(firstOp[i] != 0 ? (result[i] != secondOp[i]) : (result[i] != thirdOp[i]))",}),
        ("SveConditionalSelect.template",     new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalSelect_short",                                                                           ["Method"] = "ConditionalSelect",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int16",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt16()",                          ["ValidateIterResult"] = "(firstOp[i] != 0 ? (result[i] != secondOp[i]) : (result[i] != thirdOp[i]))",}),
        ("SveConditionalSelect.template",     new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalSelect_int",                                                                             ["Method"] = "ConditionalSelect",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                          ["ValidateIterResult"] = "(firstOp[i] != 0 ? (result[i] != secondOp[i]) : (result[i] != thirdOp[i]))",}),
        ("SveConditionalSelect.template",     new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalSelect_long",                                                                            ["Method"] = "ConditionalSelect",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                          ["ValidateIterResult"] = "(firstOp[i] != 0 ? (result[i] != secondOp[i]) : (result[i] != thirdOp[i]))",}),
        ("SveConditionalSelect.template",     new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalSelect_byte",                                                                            ["Method"] = "ConditionalSelect",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Byte",   ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetByte()",                           ["ValidateIterResult"] = "(firstOp[i] != 0 ? (result[i] != secondOp[i]) : (result[i] != thirdOp[i]))",}),
        ("SveConditionalSelect.template",     new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalSelect_ushort",                                                                          ["Method"] = "ConditionalSelect",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt16", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt16()",                         ["ValidateIterResult"] = "(firstOp[i] != 0 ? (result[i] != secondOp[i]) : (result[i] != thirdOp[i]))",}),
        ("SveConditionalSelect.template",     new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalSelect_uint",                                                                            ["Method"] = "ConditionalSelect",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                         ["ValidateIterResult"] = "(firstOp[i] != 0 ? (result[i] != secondOp[i]) : (result[i] != thirdOp[i]))",}),
        ("SveConditionalSelect.template",     new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalSelect_ulong",                                                                           ["Method"] = "ConditionalSelect",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                         ["ValidateIterResult"] = "(firstOp[i] != 0 ? (result[i] != secondOp[i]) : (result[i] != thirdOp[i]))",}),

        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToDouble_double_float",                                                            ["Method"] = "ConvertToDouble",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToDouble(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToDouble(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToDouble_double_int",                                                              ["Method"] = "ConvertToDouble",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToDouble(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToDouble(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToDouble_double_long",                                                             ["Method"] = "ConvertToDouble",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToDouble(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToDouble(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToDouble_double_uint",                                                             ["Method"] = "ConvertToDouble",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToDouble(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToDouble(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToDouble_double_ulong",                                                            ["Method"] = "ConvertToDouble",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToDouble(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToDouble(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToInt32_int_float",                                                                ["Method"] = "ConvertToInt32",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToInt32(firstOp))",  ["GetVectorResult"] = "Helpers.ConvertToInt32(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToInt32_int_double",                                                               ["Method"] = "ConvertToInt32",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToInt32(firstOp))",  ["GetVectorResult"] = "Helpers.ConvertToInt32(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToInt64_long_float",                                                               ["Method"] = "ConvertToInt64",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToInt64(firstOp))",  ["GetVectorResult"] = "Helpers.ConvertToInt64(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToInt64_long_double",                                                              ["Method"] = "ConvertToInt64",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToInt64(firstOp))",  ["GetVectorResult"] = "Helpers.ConvertToInt64(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToSingle_float_int",                                                               ["Method"] = "ConvertToSingle",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToSingle(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToSingle(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToSingle_float_double",                                                            ["Method"] = "ConvertToSingle",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToSingle(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToSingle(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToSingle_float_long",                                                              ["Method"] = "ConvertToSingle",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToSingle(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToSingle(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToSingle_float_uint",                                                              ["Method"] = "ConvertToSingle",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToSingle(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToSingle(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToSingle_float_ulong",                                                             ["Method"] = "ConvertToSingle",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToSingle(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToSingle(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToUInt32_uint_float",                                                              ["Method"] = "ConvertToUInt32",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToUInt32(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToUInt32(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToUInt32_uint_double",                                                             ["Method"] = "ConvertToUInt32",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToUInt32(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToUInt32(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToUInt64_ulong_float",                                                             ["Method"] = "ConvertToUInt64",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToUInt64(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToUInt64(left)"}),
        ("SveSimpleVecOpDiffRetTypeTestVec.template", new Dictionary<string, string> { ["TestName"] = "Sve_ConvertToUInt64_ulong_double",                                                            ["Method"] = "ConvertToUInt64",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ConvertToUInt64(firstOp))", ["GetVectorResult"] = "Helpers.ConvertToUInt64(left)"}),

        ("ScalarUnOpTest.template",           new Dictionary<string, string> { ["TestName"] = "Sve_Count16BitElements",                                                                                ["Method"] = "Count16BitElements",                                                                                    ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "SveMaskPattern",                                                                                                                   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "SveMaskPattern.All",                                                                                                                                                                     ["ValidateResult"] = "isUnexpectedResult = (result != (UInt64)(Unsafe.SizeOf<Vector<Int16>>() / sizeof(Int16)));",}),
        ("ScalarUnOpTest.template",           new Dictionary<string, string> { ["TestName"] = "Sve_Count32BitElements",                                                                                ["Method"] = "Count32BitElements",                                                                                    ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "SveMaskPattern",                                                                                                                   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "SveMaskPattern.All",                                                                                                                                                                     ["ValidateResult"] = "isUnexpectedResult = (result != (UInt64)(Unsafe.SizeOf<Vector<Int32>>() / sizeof(Int32)));",}),
        ("ScalarUnOpTest.template",           new Dictionary<string, string> { ["TestName"] = "Sve_Count64BitElements",                                                                                ["Method"] = "Count64BitElements",                                                                                    ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "SveMaskPattern",                                                                                                                   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "SveMaskPattern.All",                                                                                                                                                                     ["ValidateResult"] = "isUnexpectedResult = (result != (UInt64)(Unsafe.SizeOf<Vector<Int64>>() / sizeof(Int64)));",}),
        ("ScalarUnOpTest.template",           new Dictionary<string, string> { ["TestName"] = "Sve_Count8BitElements",                                                                                 ["Method"] = "Count8BitElements",                                                                                     ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "SveMaskPattern",                                                                                                                   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "SveMaskPattern.All",                                                                                                                                                                     ["ValidateResult"] = "isUnexpectedResult = (result != (UInt64)(Unsafe.SizeOf<Vector<Byte>>() / sizeof(Byte)));",}),

        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterMask_byte",                                                                ["Method"] = "CreateBreakAfterMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "Byte",      ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "Byte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskByte()",    ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                          ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterMask_ushort",                                                              ["Method"] = "CreateBreakAfterMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "UInt16",    ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "UInt16",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt16()",  ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterMask_uint",                                                                ["Method"] = "CreateBreakAfterMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "UInt32",    ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "UInt32",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterMask_ulong",                                                               ["Method"] = "CreateBreakAfterMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "UInt64",    ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "UInt64",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterMask_sbyte",                                                               ["Method"] = "CreateBreakAfterMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "SByte",     ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "SByte",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskSByte()",   ["NextValueOp2"] = "Helpers.getMaskSByte()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterMask_short",                                                               ["Method"] = "CreateBreakAfterMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "Int16",     ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "Int16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt16()",   ["NextValueOp2"] = "Helpers.getMaskInt16()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterMask_int",                                                                 ["Method"] = "CreateBreakAfterMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "Int32",     ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "Int32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "Helpers.getMaskInt32()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterMask_long",                                                                ["Method"] = "CreateBreakAfterMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "Int64",     ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "Int64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "Helpers.getMaskInt64()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterMask(left, right)"}),

        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterPropagateMask_byte",                                                                ["Method"] = "CreateBreakAfterPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",    ["Op2BaseType"] = "Byte",   ["Op3BaseType"] = "Byte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskByte()",   ["NextValueOp2"] = "Helpers.getMaskByte()",     ["NextValueOp3"] = "Helpers.getMaskByte()",                                              ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterPropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterPropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterPropagateMask_ushort",                                                              ["Method"] = "CreateBreakAfterPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",  ["Op2BaseType"] = "UInt16", ["Op3BaseType"] = "UInt16",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt16()", ["NextValueOp2"] = "Helpers.getMaskUInt16()",   ["NextValueOp3"] = "Helpers.getMaskUInt16()",                                            ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterPropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterPropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterPropagateMask_uint",                                                                ["Method"] = "CreateBreakAfterPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",  ["Op2BaseType"] = "UInt32", ["Op3BaseType"] = "UInt32",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt32()", ["NextValueOp2"] = "Helpers.getMaskUInt32()",   ["NextValueOp3"] = "Helpers.getMaskUInt32()",                                            ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterPropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterPropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterPropagateMask_ulong",                                                               ["Method"] = "CreateBreakAfterPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",  ["Op2BaseType"] = "UInt64", ["Op3BaseType"] = "UInt64",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt64()", ["NextValueOp2"] = "Helpers.getMaskUInt64()",   ["NextValueOp3"] = "Helpers.getMaskUInt64()",                                            ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterPropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterPropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterPropagateMask_sbyte",                                                               ["Method"] = "CreateBreakAfterPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",   ["Op2BaseType"] = "SByte",  ["Op3BaseType"] = "SByte",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskSByte()",  ["NextValueOp2"] = "Helpers.getMaskSByte()",    ["NextValueOp3"] = "Helpers.getMaskSByte()",                                             ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterPropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterPropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterPropagateMask_short",                                                               ["Method"] = "CreateBreakAfterPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",   ["Op2BaseType"] = "Int16",  ["Op3BaseType"] = "Int16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt16()",  ["NextValueOp2"] = "Helpers.getMaskInt16()",    ["NextValueOp3"] = "Helpers.getMaskInt16()",                                             ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterPropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterPropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterPropagateMask_int",                                                                 ["Method"] = "CreateBreakAfterPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",   ["Op2BaseType"] = "Int32",  ["Op3BaseType"] = "Int32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt32()",  ["NextValueOp2"] = "Helpers.getMaskInt32()",    ["NextValueOp3"] = "Helpers.getMaskInt32()",                                             ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterPropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterPropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakAfterPropagateMask_long",                                                                ["Method"] = "CreateBreakAfterPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",   ["Op2BaseType"] = "Int64",  ["Op3BaseType"] = "Int64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt64()",  ["NextValueOp2"] = "Helpers.getMaskInt64()",    ["NextValueOp3"] = "Helpers.getMaskInt64()",                                             ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakAfterPropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakAfterPropagateMask(first, second, third)"}),

        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforeMask_byte",                                                                ["Method"] = "CreateBreakBeforeMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "Byte",      ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "Byte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskByte()",    ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                          ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforeMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforeMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforeMask_ushort",                                                              ["Method"] = "CreateBreakBeforeMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "UInt16",    ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "UInt16",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt16()",  ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforeMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforeMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforeMask_uint",                                                                ["Method"] = "CreateBreakBeforeMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "UInt32",    ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "UInt32",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforeMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforeMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforeMask_ulong",                                                               ["Method"] = "CreateBreakBeforeMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "UInt64",    ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "UInt64",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforeMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforeMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforeMask_sbyte",                                                               ["Method"] = "CreateBreakBeforeMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "SByte",     ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "SByte",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskSByte()",   ["NextValueOp2"] = "Helpers.getMaskSByte()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforeMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforeMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforeMask_short",                                                               ["Method"] = "CreateBreakBeforeMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "Int16",     ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "Int16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt16()",   ["NextValueOp2"] = "Helpers.getMaskInt16()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforeMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforeMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforeMask_int",                                                                 ["Method"] = "CreateBreakBeforeMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "Int32",     ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "Int32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "Helpers.getMaskInt32()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforeMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforeMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforeMask_long",                                                                ["Method"] = "CreateBreakBeforeMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "Int64",     ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "Int64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "Helpers.getMaskInt64()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforeMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforeMask(left, right)"}),

        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforePropagateMask_byte",                                                                ["Method"] = "CreateBreakBeforePropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",    ["Op2BaseType"] = "Byte",   ["Op3BaseType"] = "Byte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskByte()",   ["NextValueOp2"] = "Helpers.getMaskByte()",     ["NextValueOp3"] = "Helpers.getMaskByte()",                                              ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforePropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforePropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforePropagateMask_ushort",                                                              ["Method"] = "CreateBreakBeforePropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",  ["Op2BaseType"] = "UInt16", ["Op3BaseType"] = "UInt16",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt16()", ["NextValueOp2"] = "Helpers.getMaskUInt16()",   ["NextValueOp3"] = "Helpers.getMaskUInt16()",                                            ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforePropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforePropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforePropagateMask_uint",                                                                ["Method"] = "CreateBreakBeforePropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",  ["Op2BaseType"] = "UInt32", ["Op3BaseType"] = "UInt32",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt32()", ["NextValueOp2"] = "Helpers.getMaskUInt32()",   ["NextValueOp3"] = "Helpers.getMaskUInt32()",                                            ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforePropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforePropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforePropagateMask_ulong",                                                               ["Method"] = "CreateBreakBeforePropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",  ["Op2BaseType"] = "UInt64", ["Op3BaseType"] = "UInt64",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt64()", ["NextValueOp2"] = "Helpers.getMaskUInt64()",   ["NextValueOp3"] = "Helpers.getMaskUInt64()",                                            ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforePropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforePropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforePropagateMask_sbyte",                                                               ["Method"] = "CreateBreakBeforePropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",   ["Op2BaseType"] = "SByte",  ["Op3BaseType"] = "SByte",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskSByte()",  ["NextValueOp2"] = "Helpers.getMaskSByte()",    ["NextValueOp3"] = "Helpers.getMaskSByte()",                                             ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforePropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforePropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforePropagateMask_short",                                                               ["Method"] = "CreateBreakBeforePropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",   ["Op2BaseType"] = "Int16",  ["Op3BaseType"] = "Int16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt16()",  ["NextValueOp2"] = "Helpers.getMaskInt16()",    ["NextValueOp3"] = "Helpers.getMaskInt16()",                                             ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforePropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforePropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforePropagateMask_int",                                                                 ["Method"] = "CreateBreakBeforePropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",   ["Op2BaseType"] = "Int32",  ["Op3BaseType"] = "Int32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt32()",  ["NextValueOp2"] = "Helpers.getMaskInt32()",    ["NextValueOp3"] = "Helpers.getMaskInt32()",                                             ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforePropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforePropagateMask(first, second, third)"}),
        ("SveVecTernOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakBeforePropagateMask_long",                                                                ["Method"] = "CreateBreakBeforePropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",   ["Op2BaseType"] = "Int64",  ["Op3BaseType"] = "Int64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt64()",  ["NextValueOp2"] = "Helpers.getMaskInt64()",    ["NextValueOp3"] = "Helpers.getMaskInt64()",                                             ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakBeforePropagateMask(firstOp, secondOp, thirdOp))",        ["GetVectorResult"] = "Helpers.CreateBreakBeforePropagateMask(first, second, third)"}),

        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakPropagateMask_byte",                                                                ["Method"] = "CreateBreakPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "Byte",      ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "Byte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskByte()",    ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                          ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakPropagateMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakPropagateMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakPropagateMask_ushort",                                                              ["Method"] = "CreateBreakPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "UInt16",    ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "UInt16",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt16()",  ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakPropagateMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakPropagateMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakPropagateMask_uint",                                                                ["Method"] = "CreateBreakPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "UInt32",    ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "UInt32",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakPropagateMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakPropagateMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakPropagateMask_ulong",                                                               ["Method"] = "CreateBreakPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "UInt64",    ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "UInt64",                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakPropagateMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakPropagateMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakPropagateMask_sbyte",                                                               ["Method"] = "CreateBreakPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "SByte",     ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "SByte",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskSByte()",   ["NextValueOp2"] = "Helpers.getMaskSByte()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakPropagateMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakPropagateMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakPropagateMask_short",                                                               ["Method"] = "CreateBreakPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "Int16",     ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "Int16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt16()",   ["NextValueOp2"] = "Helpers.getMaskInt16()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakPropagateMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakPropagateMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakPropagateMask_int",                                                                 ["Method"] = "CreateBreakPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "Int32",     ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "Int32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "Helpers.getMaskInt32()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakPropagateMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakPropagateMask(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateBreakPropagateMask_long",                                                                ["Method"] = "CreateBreakPropagateMask",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",   ["Op1BaseType"] = "Int64",     ["Op2VectorType"] = "Vector",       ["Op2BaseType"] = "Int64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "Helpers.getMaskInt64()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateBreakPropagateMask(left, right))",        ["GetVectorResult"] = "Helpers.CreateBreakPropagateMask(left, right)"}),

        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask16Bit_Int32",                                                                     ["Method"] = "CreateWhileLessThanMask16Bit",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",                                   ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (Int32)i, right) != (Int32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask16Bit_Int64",                                                                     ["Method"] = "CreateWhileLessThanMask16Bit",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",                                   ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (Int64)i, right) != (Int64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask16Bit_UInt32",                                                                    ["Method"] = "CreateWhileLessThanMask16Bit",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (UInt32)i, right) != (UInt32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask16Bit_UInt64",                                                                    ["Method"] = "CreateWhileLessThanMask16Bit",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (UInt64)i, right) != (UInt64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask32Bit_Int32",                                                                     ["Method"] = "CreateWhileLessThanMask32Bit",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (Int32)i, right) != (Int32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask32Bit_Int64",                                                                     ["Method"] = "CreateWhileLessThanMask32Bit",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (Int64)i, right) != (Int64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask32Bit_UInt32",                                                                    ["Method"] = "CreateWhileLessThanMask32Bit",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (UInt32)i, right) != (UInt32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask32Bit_UInt64",                                                                    ["Method"] = "CreateWhileLessThanMask32Bit",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (UInt64)i, right) != (UInt64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask64Bit_Int32",                                                                     ["Method"] = "CreateWhileLessThanMask64Bit",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (Int32)i, right) != (Int32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask64Bit_Int64",                                                                     ["Method"] = "CreateWhileLessThanMask64Bit",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (Int64)i, right) != (Int64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask64Bit_UInt32",                                                                    ["Method"] = "CreateWhileLessThanMask64Bit",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (UInt32)i, right) != (UInt32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask64Bit_UInt64",                                                                    ["Method"] = "CreateWhileLessThanMask64Bit",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (UInt64)i, right) != (UInt64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask8Bit_Int32",                                                                      ["Method"] = "CreateWhileLessThanMask8Bit",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",                                     ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (Int32)i, right) != (Int32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask8Bit_Int64",                                                                      ["Method"] = "CreateWhileLessThanMask8Bit",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",                                     ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (Int64)i, right) != (Int64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask8Bit_UInt32",                                                                     ["Method"] = "CreateWhileLessThanMask8Bit",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",                                     ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (UInt32)i, right) != (UInt32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanMask8Bit_UInt64",                                                                     ["Method"] = "CreateWhileLessThanMask8Bit",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",                                     ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanMask(left + (UInt64)i, right) != (UInt64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask16Bit_Int32",                                                              ["Method"] = "CreateWhileLessThanOrEqualMask16Bit",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",                                   ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (Int32)i, right) != (Int32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask16Bit_Int64",                                                              ["Method"] = "CreateWhileLessThanOrEqualMask16Bit",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",                                   ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (Int64)i, right) != (Int64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask16Bit_UInt32",                                                             ["Method"] = "CreateWhileLessThanOrEqualMask16Bit",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (UInt32)i, right) != (UInt32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask16Bit_UInt64",                                                             ["Method"] = "CreateWhileLessThanOrEqualMask16Bit",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (UInt64)i, right) != (UInt64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask32Bit_Int32",                                                              ["Method"] = "CreateWhileLessThanOrEqualMask32Bit",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (Int32)i, right) != (Int32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask32Bit_Int64",                                                              ["Method"] = "CreateWhileLessThanOrEqualMask32Bit",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (Int64)i, right) != (Int64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask32Bit_UInt32",                                                             ["Method"] = "CreateWhileLessThanOrEqualMask32Bit",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (UInt32)i, right) != (UInt32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask32Bit_UInt64",                                                             ["Method"] = "CreateWhileLessThanOrEqualMask32Bit",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (UInt64)i, right) != (UInt64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask64Bit_Int32",                                                              ["Method"] = "CreateWhileLessThanOrEqualMask64Bit",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (Int32)i, right) != (Int32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask64Bit_Int64",                                                              ["Method"] = "CreateWhileLessThanOrEqualMask64Bit",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (Int64)i, right) != (Int64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask64Bit_UInt32",                                                             ["Method"] = "CreateWhileLessThanOrEqualMask64Bit",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (UInt32)i, right) != (UInt32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask64Bit_UInt64",                                                             ["Method"] = "CreateWhileLessThanOrEqualMask64Bit",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (UInt64)i, right) != (UInt64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask8Bit_Int32",                                                               ["Method"] = "CreateWhileLessThanOrEqualMask8Bit",                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",                                     ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (Int32)i, right) != (Int32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask8Bit_Int64",                                                               ["Method"] = "CreateWhileLessThanOrEqualMask8Bit",                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",                                     ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                  ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (Int64)i, right) != (Int64)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask8Bit_UInt32",                                                              ["Method"] = "CreateWhileLessThanOrEqualMask8Bit",                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",                                     ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (UInt32)i, right) != (UInt32)result[i]",}),
        ("ScalarBinOpRetVecTest.template",new Dictionary<string, string> {["TestName"] = "Sve_CreateWhileLessThanOrEqualMask8Bit_UInt64",                                                              ["Method"] = "CreateWhileLessThanOrEqualMask8Bit",                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",                                     ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",                 ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                 ["ValidateIterResult"] = "Helpers.WhileLessThanOrEqualMask(left + (UInt64)i, right) != (UInt64)result[i]",}),

        ("SveVecBinOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_Divide_float",                                                                                           ["Method"] = "Divide",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                              ["ValidateIterResult"] = "Helpers.Divide(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Divide(left[i], right[i])"}),
        ("SveVecBinOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_Divide_double",                                                                                          ["Method"] = "Divide",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",       ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                              ["ValidateIterResult"] = "Helpers.Divide(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Divide(left[i], right[i])"}),

        ("SveVecTernOpFirstArgTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_DotProduct_int",                                                                                 ["Method"] = "DotProduct",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "SByte",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetSByte()",                         ["ValidateIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * i) != result[i]", ["GetIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * i)", ["ConvertFunc"] = ""}),
        ("SveVecTernOpFirstArgTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_DotProduct_long",                                                                                ["Method"] = "DotProduct",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int16",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt16()",                         ["ValidateIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * i) != result[i]", ["GetIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * i)", ["ConvertFunc"] = ""}),
        ("SveVecTernOpFirstArgTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_DotProduct_uint",                                                                                ["Method"] = "DotProduct",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Byte",   ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetByte()",                          ["ValidateIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * i) != result[i]", ["GetIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * i)", ["ConvertFunc"] = ""}),
        ("SveVecTernOpFirstArgTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_DotProduct_ulong",                                                                               ["Method"] = "DotProduct",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt16", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt16()",                        ["ValidateIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * i) != result[i]", ["GetIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * i)", ["ConvertFunc"] = ""}),

        ("SveVecImmTernOpFirstArgTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_DotProductBySelectedScalar_int",                                                              ["Method"] = "DotProductBySelectedScalar",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "SByte",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetSByte()",    ["Imm"] = "2", ["InvalidImm"] = "4",                  ["ValidateIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * Imm) != result[i]", ["GetIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * Imm)", ["ConvertFunc"] = ""}),
        ("SveVecImmTernOpFirstArgTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_DotProductBySelectedScalar_long",                                                             ["Method"] = "DotProductBySelectedScalar",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int16",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt16()",    ["Imm"] = "1", ["InvalidImm"] = "4",                   ["ValidateIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * Imm) != result[i]", ["GetIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * Imm)", ["ConvertFunc"] = ""}),
        ("SveVecImmTernOpFirstArgTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_DotProductBySelectedScalar_uint",                                                             ["Method"] = "DotProductBySelectedScalar",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Byte",   ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetByte()",     ["Imm"] = "1", ["InvalidImm"] = "4",                   ["ValidateIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * Imm) != result[i]", ["GetIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * Imm)", ["ConvertFunc"] = ""}),
        ("SveVecImmTernOpFirstArgTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_DotProductBySelectedScalar_ulong",                                                            ["Method"] = "DotProductBySelectedScalar",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt16", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt16()",   ["Imm"] = "1", ["InvalidImm"] = "4",                   ["ValidateIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * Imm) != result[i]", ["GetIterResult"] = "Helpers.DotProduct(first[i], second, 4 * i, third, 4 * Imm)", ["ConvertFunc"] = ""}),

        ("SveVecTernOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_FusedMultiplyAdd_float",                                                                                 ["Method"] = "FusedMultiplyAdd",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",    ["Op2BaseType"] = "Single",    ["Op3BaseType"] = "Single",  ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",  ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",  ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()",                                 ["ValidateIterResult"] = "BitConverter.SingleToInt32Bits(Helpers.FusedMultiplyAdd(firstOp[i], secondOp[i], thirdOp[i])) != BitConverter.SingleToInt32Bits(result[i])", ["GetIterResult"] = "Helpers.FusedMultiplyAdd(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecTernOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_FusedMultiplyAdd_double",                                                                                ["Method"] = "FusedMultiplyAdd",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",    ["Op2BaseType"] = "Double",    ["Op3BaseType"] = "Double",  ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",  ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",  ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()",                                 ["ValidateIterResult"] = "BitConverter.DoubleToInt64Bits(Helpers.FusedMultiplyAdd(firstOp[i], secondOp[i], thirdOp[i])) != BitConverter.DoubleToInt64Bits(result[i])", ["GetIterResult"] = "Helpers.FusedMultiplyAdd(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),

        ("SveVecImmTernOpTest.template", new Dictionary<string, string> {["TestName"] = "Sve_FusedMultiplyAddBySelectedScalar_float",                                                                  ["Method"] = "FusedMultiplyAddBySelectedScalar",                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()", ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()", ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm"] = "1", ["InvalidImm"] = "4", ["ValidateIterResult"] = "BitConverter.SingleToInt32Bits(Helpers.FusedMultiplyAdd(firstOp[i], secondOp[i], thirdOp[Imm])) != BitConverter.SingleToInt32Bits(result[i])", ["GetIterResult"] = "Helpers.FusedMultiplyAdd(firstOp[i], secondOp[i], thirdOp[Imm])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecImmTernOpTest.template", new Dictionary<string, string> {["TestName"] = "Sve_FusedMultiplyAddBySelectedScalar_double",                                                                 ["Method"] = "FusedMultiplyAddBySelectedScalar",                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()", ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()", ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()", ["NextValueMask"] = "Helpers.getMaskDouble()", ["Imm"] = "0", ["InvalidImm"] = "2", ["ValidateIterResult"] = "BitConverter.DoubleToInt64Bits(Helpers.FusedMultiplyAdd(firstOp[i], secondOp[i], thirdOp[Imm])) != BitConverter.DoubleToInt64Bits(result[i])", ["GetIterResult"] = "Helpers.FusedMultiplyAdd(firstOp[i], secondOp[i], thirdOp[Imm])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),

        ("SveVecTernOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_FusedMultiplyAddNegated_float",                                                                           ["Method"] = "FusedMultiplyAddNegated",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",    ["Op2BaseType"] = "Single",    ["Op3BaseType"] = "Single",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",  ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",  ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()",                                 ["ValidateIterResult"] = "BitConverter.SingleToInt32Bits(Helpers.FusedMultiplyAddNegated(firstOp[i], secondOp[i], thirdOp[i])) != BitConverter.SingleToInt32Bits(result[i])", ["GetIterResult"] = "Helpers.FusedMultiplyAddNegated(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecTernOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_FusedMultiplyAddNegated_double",                                                                          ["Method"] = "FusedMultiplyAddNegated",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",    ["Op2BaseType"] = "Double",    ["Op3BaseType"] = "Double",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",  ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",  ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()",                                 ["ValidateIterResult"] = "BitConverter.DoubleToInt64Bits(Helpers.FusedMultiplyAddNegated(firstOp[i], secondOp[i], thirdOp[i])) != BitConverter.DoubleToInt64Bits(result[i])", ["GetIterResult"] = "Helpers.FusedMultiplyAddNegated(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),

        ("SveVecTernOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_FusedMultiplySubtract_float",                                                                            ["Method"] = "FusedMultiplySubtract",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",    ["Op2BaseType"] = "Single",    ["Op3BaseType"] = "Single",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",  ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",  ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()",                                 ["ValidateIterResult"] = "BitConverter.SingleToInt32Bits(Helpers.FusedMultiplySubtract(firstOp[i], secondOp[i], thirdOp[i])) != BitConverter.SingleToInt32Bits(result[i])", ["GetIterResult"] = "Helpers.FusedMultiplySubtract(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecTernOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_FusedMultiplySubtract_double",                                                                           ["Method"] = "FusedMultiplySubtract",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",    ["Op2BaseType"] = "Double",    ["Op3BaseType"] = "Double",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",  ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",  ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()",                                 ["ValidateIterResult"] = "BitConverter.DoubleToInt64Bits(Helpers.FusedMultiplySubtract(firstOp[i], secondOp[i], thirdOp[i])) != BitConverter.DoubleToInt64Bits(result[i])", ["GetIterResult"] = "Helpers.FusedMultiplySubtract(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),

        ("SveVecImmTernOpTest.template", new Dictionary<string, string> {["TestName"] = "Sve_FusedMultiplySubtractBySelectedScalar_float",                                                             ["Method"] = "FusedMultiplySubtractBySelectedScalar",                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()", ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()", ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm"] = "1", ["InvalidImm"] = "4", ["ValidateIterResult"] = "BitConverter.SingleToInt32Bits(Helpers.FusedMultiplySubtract(firstOp[i], secondOp[i], thirdOp[Imm])) != BitConverter.SingleToInt32Bits(result[i])", ["GetIterResult"] = "Helpers.FusedMultiplySubtract(firstOp[i], secondOp[i], thirdOp[Imm])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecImmTernOpTest.template", new Dictionary<string, string> {["TestName"] = "Sve_FusedMultiplySubtractBySelectedScalar_double",                                                            ["Method"] = "FusedMultiplySubtractBySelectedScalar",                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()", ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()", ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()", ["NextValueMask"] = "Helpers.getMaskDouble()",  ["Imm"] = "0", ["InvalidImm"] = "2", ["ValidateIterResult"] = "BitConverter.DoubleToInt64Bits(Helpers.FusedMultiplySubtract(firstOp[i], secondOp[i], thirdOp[Imm])) != BitConverter.DoubleToInt64Bits(result[i])", ["GetIterResult"] = "Helpers.FusedMultiplySubtract(firstOp[i], secondOp[i], thirdOp[Imm])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),

        ("SveVecTernOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_FusedMultiplySubtractNegated_float",                                                                      ["Method"] = "FusedMultiplySubtractNegated",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",    ["Op2BaseType"] = "Single",    ["Op3BaseType"] = "Single",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",  ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()", ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()",                                 ["ValidateIterResult"] = "BitConverter.SingleToInt32Bits(Helpers.FusedMultiplySubtractNegated(firstOp[i], secondOp[i], thirdOp[i])) != BitConverter.SingleToInt32Bits(result[i])", ["GetIterResult"] = "Helpers.FusedMultiplySubtractNegated(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecTernOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_FusedMultiplySubtractNegated_double",                                                                     ["Method"] = "FusedMultiplySubtractNegated",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",    ["Op2BaseType"] = "Double",    ["Op3BaseType"] = "Double",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",   ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()", ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()",                               ["ValidateIterResult"] = "BitConverter.DoubleToInt64Bits(Helpers.FusedMultiplySubtractNegated(firstOp[i], secondOp[i], thirdOp[i])) != BitConverter.DoubleToInt64Bits(result[i])", ["GetIterResult"] = "Helpers.FusedMultiplySubtractNegated(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),

        ("SveSimpleNoOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_CreateFalseMaskByte_byte",                                                                          ["Method"] = "CreateFalseMaskByte",                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",                                                                                                                                                                                                                                                                                                                                                                                                                                      ["ValidateIterResult"] = "result[i] != 0",}),
        ("SveSimpleNoOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_CreateFalseMaskDouble_double",                                                                      ["Method"] = "CreateFalseMaskDouble",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",                                                                                                                                                                                                                                                                                                                                                                                                                                    ["ValidateIterResult"] = "result[i] != 0",}),
        ("SveSimpleNoOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_CreateFalseMaskInt16_short",                                                                        ["Method"] = "CreateFalseMaskInt16",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",                                                                                                                                                                                                                                                                                                                                                                                                                                     ["ValidateIterResult"] = "result[i] != 0",}),
        ("SveSimpleNoOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_CreateFalseMaskInt32_int",                                                                          ["Method"] = "CreateFalseMaskInt32",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",                                                                                                                                                                                                                                                                                                                                                                                                                                     ["ValidateIterResult"] = "result[i] != 0",}),
        ("SveSimpleNoOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_CreateFalseMaskInt64_long",                                                                         ["Method"] = "CreateFalseMaskInt64",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",                                                                                                                                                                                                                                                                                                                                                                                                                                     ["ValidateIterResult"] = "result[i] != 0",}),
        ("SveSimpleNoOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_CreateFalseMaskSByte_sbyte",                                                                        ["Method"] = "CreateFalseMaskSByte",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",                                                                                                                                                                                                                                                                                                                                                                                                                                     ["ValidateIterResult"] = "result[i] != 0",}),
        ("SveSimpleNoOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_CreateFalseMaskSingle_float",                                                                       ["Method"] = "CreateFalseMaskSingle",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",                                                                                                                                                                                                                                                                                                                                                                                                                                    ["ValidateIterResult"] = "result[i] != 0",}),
        ("SveSimpleNoOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_CreateFalseMaskUInt16_ushort",                                                                      ["Method"] = "CreateFalseMaskUInt16",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",                                                                                                                                                                                                                                                                                                                                                                                                                                    ["ValidateIterResult"] = "result[i] != 0",}),
        ("SveSimpleNoOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_CreateFalseMaskUInt32_uint",                                                                        ["Method"] = "CreateFalseMaskUInt32",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",                                                                                                                                                                                                                                                                                                                                                                                                                                    ["ValidateIterResult"] = "result[i] != 0",}),
        ("SveSimpleNoOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_CreateFalseMaskUInt64_ulong",                                                                       ["Method"] = "CreateFalseMaskUInt64",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",                                                                                                                                                                                                                                                                                                                                                                                                                                    ["ValidateIterResult"] = "result[i] != 0",}),
        ("SveCreateTrueMaskTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CreateTrueMaskByte",                                                                                ["Method"] = "CreateTrueMaskByte",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",                                     ["Op1Type"] = "SveMaskPattern"}),
        ("SveCreateTrueMaskTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CreateTrueMaskDouble",                                                                              ["Method"] = "CreateTrueMaskDouble",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",                                   ["Op1Type"] = "SveMaskPattern"}),
        ("SveCreateTrueMaskTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CreateTrueMaskInt16",                                                                               ["Method"] = "CreateTrueMaskInt16",                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",                                    ["Op1Type"] = "SveMaskPattern"}),
        ("SveCreateTrueMaskTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CreateTrueMaskInt32",                                                                               ["Method"] = "CreateTrueMaskInt32",                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",                                    ["Op1Type"] = "SveMaskPattern"}),
        ("SveCreateTrueMaskTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CreateTrueMaskInt64",                                                                               ["Method"] = "CreateTrueMaskInt64",                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",                                    ["Op1Type"] = "SveMaskPattern"}),
        ("SveCreateTrueMaskTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CreateTrueMaskSByte",                                                                               ["Method"] = "CreateTrueMaskSByte",                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",                                    ["Op1Type"] = "SveMaskPattern"}),
        ("SveCreateTrueMaskTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CreateTrueMaskSingle",                                                                              ["Method"] = "CreateTrueMaskSingle",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",                                   ["Op1Type"] = "SveMaskPattern"}),
        ("SveCreateTrueMaskTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CreateTrueMaskUInt16",                                                                              ["Method"] = "CreateTrueMaskUInt16",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",                                   ["Op1Type"] = "SveMaskPattern"}),
        ("SveCreateTrueMaskTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CreateTrueMaskUInt32",                                                                              ["Method"] = "CreateTrueMaskUInt32",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",                                   ["Op1Type"] = "SveMaskPattern"}),
        ("SveCreateTrueMaskTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_CreateTrueMaskUInt64",                                                                              ["Method"] = "CreateTrueMaskUInt64",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",                                   ["Op1Type"] = "SveMaskPattern"}),

        // ("SveGatherPrefetchVectorBases.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch16Bit_Bases_ushort_uint",                                                       ["Method"] = "GatherPrefetch16Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskUInt16()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                        ["ValidPrefetch"] = "SvePrefetchType.LoadL1NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)100"}),
        // ("SveGatherPrefetchVectorBases.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch16Bit_Bases_short_uint",                                                        ["Method"] = "GatherPrefetch16Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                        ["ValidPrefetch"] = "SvePrefetchType.LoadL2NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)16"}),
        ("SveGatherPrefetchVectorBases.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch16Bit_Bases_ushort_ulong",                                                      ["Method"] = "GatherPrefetch16Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskUInt16()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                        ["ValidPrefetch"] = "SvePrefetchType.StoreL1Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)58"}),
        ("SveGatherPrefetchVectorBases.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch16Bit_Bases_short_ulong",                                                       ["Method"] = "GatherPrefetch16Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                        ["ValidPrefetch"] = "SvePrefetchType.StoreL2NonTemporal", ["InvalidPrefetch"] = "(SvePrefetchType)123"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch16Bit_Indices_ushort_int",                                                          ["Method"] = "GatherPrefetch16Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskUInt16()",                                      ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidPrefetch"] = "SvePrefetchType.LoadL1NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)100"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch16Bit_Indices_short_int",                                                           ["Method"] = "GatherPrefetch16Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskInt16()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidPrefetch"] = "SvePrefetchType.LoadL1Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)54"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch16Bit_Indices_ushort_uint",                                                         ["Method"] = "GatherPrefetch16Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskUInt16()",                                      ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidPrefetch"] = "SvePrefetchType.StoreL3NonTemporal", ["InvalidPrefetch"] = "(SvePrefetchType)32"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch16Bit_Indices_short_uint",                                                          ["Method"] = "GatherPrefetch16Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskInt16()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidPrefetch"] = "SvePrefetchType.LoadL1Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)17"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch16Bit_Indices_ushort_long",                                                         ["Method"] = "GatherPrefetch16Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskUInt16()",                                      ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidPrefetch"] = "SvePrefetchType.StoreL1Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)56"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch16Bit_Indices_short_long",                                                          ["Method"] = "GatherPrefetch16Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskInt16()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidPrefetch"] = "SvePrefetchType.StoreL3Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)123"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch16Bit_Indices_ushort_ulong",                                                        ["Method"] = "GatherPrefetch16Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskUInt16()",                                      ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidPrefetch"] = "SvePrefetchType.LoadL1Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)99"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch16Bit_Indices_short_ulong",                                                         ["Method"] = "GatherPrefetch16Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskInt16()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidPrefetch"] = "SvePrefetchType.LoadL1Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)254"}),
        // ("SveGatherPrefetchVectorBases.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch32Bit_Bases_uint_uint",                                                         ["Method"] = "GatherPrefetch32Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                        ["ValidPrefetch"] = "SvePrefetchType.LoadL1Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)230"}),
        // ("SveGatherPrefetchVectorBases.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch32Bit_Bases_int_uint",                                                          ["Method"] = "GatherPrefetch32Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                        ["ValidPrefetch"] = "SvePrefetchType.LoadL2Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)23"}),
        ("SveGatherPrefetchVectorBases.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch32Bit_Bases_uint_ulong",                                                        ["Method"] = "GatherPrefetch32Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                        ["ValidPrefetch"] = "SvePrefetchType.LoadL3Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)22"}),
        ("SveGatherPrefetchVectorBases.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch32Bit_Bases_int_ulong",                                                         ["Method"] = "GatherPrefetch32Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                        ["ValidPrefetch"] = "SvePrefetchType.StoreL3Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)99"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch32Bit_Indices_uint_int",                                                            ["Method"] = "GatherPrefetch32Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskUInt32()",                                      ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidPrefetch"] = "SvePrefetchType.StoreL1NonTemporal", ["InvalidPrefetch"] = "(SvePrefetchType)16"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch32Bit_Indices_int_int",                                                             ["Method"] = "GatherPrefetch32Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskInt32()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidPrefetch"] = "SvePrefetchType.LoadL1Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)101"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch32Bit_Indices_uint_uint",                                                           ["Method"] = "GatherPrefetch32Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskUInt32()",                                      ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidPrefetch"] = "SvePrefetchType.LoadL2NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)165"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch32Bit_Indices_int_uint",                                                            ["Method"] = "GatherPrefetch32Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskInt32()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidPrefetch"] = "SvePrefetchType.LoadL2NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)82"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch32Bit_Indices_uint_long",                                                           ["Method"] = "GatherPrefetch32Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskUInt32()",                                      ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidPrefetch"] = "SvePrefetchType.StoreL3NonTemporal", ["InvalidPrefetch"] = "(SvePrefetchType)35"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch32Bit_Indices_int_long",                                                            ["Method"] = "GatherPrefetch32Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskInt32()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidPrefetch"] = "SvePrefetchType.LoadL1Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)134"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch32Bit_Indices_uint_ulong",                                                          ["Method"] = "GatherPrefetch32Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskUInt32()",                                      ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidPrefetch"] = "SvePrefetchType.LoadL3NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)35"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch32Bit_Indices_int_ulong",                                                           ["Method"] = "GatherPrefetch32Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskInt32()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidPrefetch"] = "SvePrefetchType.StoreL3NonTemporal", ["InvalidPrefetch"] = "(SvePrefetchType)153"}),
        // ("SveGatherPrefetchVectorBases.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch64Bit_Bases_ulong_uint",                                                        ["Method"] = "GatherPrefetch64Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                        ["ValidPrefetch"] = "SvePrefetchType.StoreL2NonTemporal", ["InvalidPrefetch"] = "(SvePrefetchType)100"}),
        // ("SveGatherPrefetchVectorBases.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch64Bit_Bases_long_uint",                                                         ["Method"] = "GatherPrefetch64Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                        ["ValidPrefetch"] = "SvePrefetchType.StoreL2Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)100"}),
        ("SveGatherPrefetchVectorBases.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch64Bit_Bases_ulong_ulong",                                                       ["Method"] = "GatherPrefetch64Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                        ["ValidPrefetch"] = "SvePrefetchType.LoadL3NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)100"}),
        ("SveGatherPrefetchVectorBases.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch64Bit_Bases_long_ulong",                                                        ["Method"] = "GatherPrefetch64Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                        ["ValidPrefetch"] = "SvePrefetchType.LoadL2NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)100"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch64Bit_Indices_ulong_int",                                                           ["Method"] = "GatherPrefetch64Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskUInt64()",                                      ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidPrefetch"] = "SvePrefetchType.StoreL3Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)242"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch64Bit_Indices_long_int",                                                            ["Method"] = "GatherPrefetch64Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskInt64()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidPrefetch"] = "SvePrefetchType.StoreL1NonTemporal", ["InvalidPrefetch"] = "(SvePrefetchType)232"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch64Bit_Indices_ulong_uint",                                                          ["Method"] = "GatherPrefetch64Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskUInt64()",                                      ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidPrefetch"] = "SvePrefetchType.StoreL1NonTemporal", ["InvalidPrefetch"] = "(SvePrefetchType)223"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch64Bit_Indices_long_uint",                                                           ["Method"] = "GatherPrefetch64Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskInt64()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidPrefetch"] = "SvePrefetchType.LoadL1Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)62"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch64Bit_Indices_ulong_long",                                                          ["Method"] = "GatherPrefetch64Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskUInt64()",                                      ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidPrefetch"] = "SvePrefetchType.StoreL1Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)43"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch64Bit_Indices_long_long",                                                           ["Method"] = "GatherPrefetch64Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskInt64()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidPrefetch"] = "SvePrefetchType.LoadL3NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)166"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch64Bit_Indices_ulong_ulong",                                                         ["Method"] = "GatherPrefetch64Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskUInt64()",                                      ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidPrefetch"] = "SvePrefetchType.LoadL2NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)234"}),
        ("SveGatherPrefetchIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch64Bit_Indices_long_ulong",                                                          ["Method"] = "GatherPrefetch64Bit",                                                                                   ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskInt64()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidPrefetch"] = "SvePrefetchType.StoreL1NonTemporal", ["InvalidPrefetch"] = "(SvePrefetchType)46"}),
        // ("SveGatherPrefetchVectorBases.template",    new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch8Bit_Bases_byte_uint",                                                         ["Method"] = "GatherPrefetch8Bit",                                                                                    ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskByte()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                        ["ValidPrefetch"] = "SvePrefetchType.StoreL2Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)100"}),
        // ("SveGatherPrefetchVectorBases.template",    new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch8Bit_Bases_sbyte_uint",                                                        ["Method"] = "GatherPrefetch8Bit",                                                                                    ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskSByte()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                        ["ValidPrefetch"] = "SvePrefetchType.LoadL3NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)100"}),
        ("SveGatherPrefetchVectorBases.template",    new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch8Bit_Bases_byte_ulong",                                                        ["Method"] = "GatherPrefetch8Bit",                                                                                    ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskByte()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                        ["ValidPrefetch"] = "SvePrefetchType.LoadL1NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)100"}),
        ("SveGatherPrefetchVectorBases.template",    new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch8Bit_Bases_sbyte_ulong",                                                       ["Method"] = "GatherPrefetch8Bit",                                                                                    ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["Op3BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",                              ["NextValueOp1"] = "Helpers.getMaskSByte()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                        ["ValidPrefetch"] = "SvePrefetchType.StoreL2NonTemporal", ["InvalidPrefetch"] = "(SvePrefetchType)100"}),
        ("SveGatherPrefetchIndices.template",    new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch8Bit_Indices_byte_int",                                                            ["Method"] = "GatherPrefetch8Bit",                                                                                    ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                    ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskByte()",                                        ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidPrefetch"] = "SvePrefetchType.StoreL3Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)51"}),
        ("SveGatherPrefetchIndices.template",    new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch8Bit_Indices_sbyte_int",                                                           ["Method"] = "GatherPrefetch8Bit",                                                                                    ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskSByte()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidPrefetch"] = "SvePrefetchType.StoreL1Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)82"}),
        ("SveGatherPrefetchIndices.template",    new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch8Bit_Indices_byte_uint",                                                           ["Method"] = "GatherPrefetch8Bit",                                                                                    ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                    ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskByte()",                                        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidPrefetch"] = "SvePrefetchType.LoadL2Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)236"}),
        ("SveGatherPrefetchIndices.template",    new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch8Bit_Indices_sbyte_uint",                                                          ["Method"] = "GatherPrefetch8Bit",                                                                                    ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskSByte()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidPrefetch"] = "SvePrefetchType.LoadL1NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)45"}),
        ("SveGatherPrefetchIndices.template",    new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch8Bit_Indices_byte_long",                                                           ["Method"] = "GatherPrefetch8Bit",                                                                                    ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                    ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskByte()",                                        ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidPrefetch"] = "SvePrefetchType.LoadL1Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)34"}),
        ("SveGatherPrefetchIndices.template",    new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch8Bit_Indices_sbyte_long",                                                          ["Method"] = "GatherPrefetch8Bit",                                                                                    ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",    ["NextValueOp1"] = "Helpers.getMaskSByte()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidPrefetch"] = "SvePrefetchType.StoreL3NonTemporal", ["InvalidPrefetch"] = "(SvePrefetchType)43"}),
        ("SveGatherPrefetchIndices.template",    new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch8Bit_Indices_byte_ulong",                                                          ["Method"] = "GatherPrefetch8Bit",                                                                                    ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                    ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskByte()",                                        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidPrefetch"] = "SvePrefetchType.StoreL3Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)234"}),
        ("SveGatherPrefetchIndices.template",    new Dictionary<string, string> { ["TestName"] = "Sve_GatherPrefetch8Bit_Indices_sbyte_ulong",                                                         ["Method"] = "GatherPrefetch8Bit",                                                                                    ["RetBaseType"] = "void",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                   ["Op2BaseType"] = "void",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",["Op4BaseType"] = "SvePrefetchType",["LargestVectorSize"] = "64",   ["NextValueOp1"] = "Helpers.getMaskSByte()",                                       ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidPrefetch"] = "SvePrefetchType.StoreL1Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)86"}),

        ("SveVecImmUnOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_DuplicateSelectedScalarToVector_float",                                                             ["Method"] = "DuplicateSelectedScalarToVector",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                              ["InvalidImm"] = "16",   ["Imm"] = "TestLibrary.Generator.GetByte() % 16",  ["ValidateIterResult"] = "result[i] != (imm < Op1ElementCount ? firstOp[imm] : 0)", ["GetIterResult"] = "(Single)(imm < Op1ElementCount ? firstOp[imm] : 0)"}),
        ("SveVecImmUnOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_DuplicateSelectedScalarToVector_double",                                                            ["Method"] = "DuplicateSelectedScalarToVector",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                              ["InvalidImm"] = "8",    ["Imm"] = "TestLibrary.Generator.GetByte() % 8",   ["ValidateIterResult"] = "result[i] != (imm < Op1ElementCount ? firstOp[imm] : 0)", ["GetIterResult"] = "(Double)(imm < Op1ElementCount ? firstOp[imm] : 0)"}),
        ("SveVecImmUnOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_DuplicateSelectedScalarToVector_sbyte",                                                             ["Method"] = "DuplicateSelectedScalarToVector",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                               ["InvalidImm"] = "64",   ["Imm"] = "TestLibrary.Generator.GetByte() % 64",  ["ValidateIterResult"] = "result[i] != (imm < Op1ElementCount ? firstOp[imm] : 0)", ["GetIterResult"] = "(SByte)(imm < Op1ElementCount ? firstOp[imm] : 0)"}),
        ("SveVecImmUnOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_DuplicateSelectedScalarToVector_short",                                                             ["Method"] = "DuplicateSelectedScalarToVector",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                               ["InvalidImm"] = "32",   ["Imm"] = "TestLibrary.Generator.GetByte() % 32",  ["ValidateIterResult"] = "result[i] != (imm < Op1ElementCount ? firstOp[imm] : 0)", ["GetIterResult"] = "(Int16)(imm < Op1ElementCount ? firstOp[imm] : 0)"}),
        ("SveVecImmUnOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_DuplicateSelectedScalarToVector_int",                                                               ["Method"] = "DuplicateSelectedScalarToVector",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                               ["InvalidImm"] = "16",   ["Imm"] = "TestLibrary.Generator.GetByte() % 16",  ["ValidateIterResult"] = "result[i] != (imm < Op1ElementCount ? firstOp[imm] : 0)", ["GetIterResult"] = "(Int32)(imm < Op1ElementCount ? firstOp[imm] : 0)"}),
        ("SveVecImmUnOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_DuplicateSelectedScalarToVector_long",                                                              ["Method"] = "DuplicateSelectedScalarToVector",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                               ["InvalidImm"] = "8",    ["Imm"] = "TestLibrary.Generator.GetByte() % 8",   ["ValidateIterResult"] = "result[i] != (imm < Op1ElementCount ? firstOp[imm] : 0)", ["GetIterResult"] = "(Int64)(imm < Op1ElementCount ? firstOp[imm] : 0)"}),
        ("SveVecImmUnOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_DuplicateSelectedScalarToVector_byte",                                                              ["Method"] = "DuplicateSelectedScalarToVector",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                ["InvalidImm"] = "64",   ["Imm"] = "TestLibrary.Generator.GetByte() % 64",  ["ValidateIterResult"] = "result[i] != (imm < Op1ElementCount ? firstOp[imm] : 0)", ["GetIterResult"] = "(Byte)(imm < Op1ElementCount ? firstOp[imm] : 0)"}),
        ("SveVecImmUnOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_DuplicateSelectedScalarToVector_ushort",                                                            ["Method"] = "DuplicateSelectedScalarToVector",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                              ["InvalidImm"] = "32",   ["Imm"] = "TestLibrary.Generator.GetByte() % 32",  ["ValidateIterResult"] = "result[i] != (imm < Op1ElementCount ? firstOp[imm] : 0)", ["GetIterResult"] = "(UInt16)(imm < Op1ElementCount ? firstOp[imm] : 0)"}),
        ("SveVecImmUnOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_DuplicateSelectedScalarToVector_uint",                                                              ["Method"] = "DuplicateSelectedScalarToVector",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                              ["InvalidImm"] = "16",   ["Imm"] = "TestLibrary.Generator.GetByte() % 16",  ["ValidateIterResult"] = "result[i] != (imm < Op1ElementCount ? firstOp[imm] : 0)", ["GetIterResult"] = "(UInt32)(imm < Op1ElementCount ? firstOp[imm] : 0)"}),
        ("SveVecImmUnOpTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_DuplicateSelectedScalarToVector_ulong",                                                             ["Method"] = "DuplicateSelectedScalarToVector",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                              ["InvalidImm"] = "8",    ["Imm"] = "TestLibrary.Generator.GetByte() % 8",   ["ValidateIterResult"] = "result[i] != (imm < Op1ElementCount ? firstOp[imm] : 0)", ["GetIterResult"] = "(UInt64)(imm < Op1ElementCount ? firstOp[imm] : 0)"}),

        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateMaskForFirstActiveElement_sbyte",                                                                                         ["Method"] = "CreateMaskForFirstActiveElement",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskSByte()",  ["NextValueOp2"] = "Helpers.getMaskSByte()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateMaskForFirstActiveElement(left, right))",        ["GetVectorResult"] = "Helpers.CreateMaskForFirstActiveElement(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateMaskForFirstActiveElement_short",                                                                                         ["Method"] = "CreateMaskForFirstActiveElement",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt16()",  ["NextValueOp2"] = "Helpers.getMaskInt16()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateMaskForFirstActiveElement(left, right))",        ["GetVectorResult"] = "Helpers.CreateMaskForFirstActiveElement(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateMaskForFirstActiveElement_int",                                                                                           ["Method"] = "CreateMaskForFirstActiveElement",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt32()",  ["NextValueOp2"] = "Helpers.getMaskInt32()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateMaskForFirstActiveElement(left, right))",        ["GetVectorResult"] = "Helpers.CreateMaskForFirstActiveElement(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateMaskForFirstActiveElement_long",                                                                                          ["Method"] = "CreateMaskForFirstActiveElement",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskInt64()",  ["NextValueOp2"] = "Helpers.getMaskInt64()",                                                                                         ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateMaskForFirstActiveElement(left, right))",        ["GetVectorResult"] = "Helpers.CreateMaskForFirstActiveElement(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateMaskForFirstActiveElement_byte",                                                                                          ["Method"] = "CreateMaskForFirstActiveElement",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskByte()",   ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                          ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateMaskForFirstActiveElement(left, right))",        ["GetVectorResult"] = "Helpers.CreateMaskForFirstActiveElement(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateMaskForFirstActiveElement_ushort",                                                                                        ["Method"] = "CreateMaskForFirstActiveElement",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt16()", ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateMaskForFirstActiveElement(left, right))",        ["GetVectorResult"] = "Helpers.CreateMaskForFirstActiveElement(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateMaskForFirstActiveElement_uint",                                                                                          ["Method"] = "CreateMaskForFirstActiveElement",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt32()", ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateMaskForFirstActiveElement(left, right))",        ["GetVectorResult"] = "Helpers.CreateMaskForFirstActiveElement(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateMaskForFirstActiveElement_ulong",                                                                                         ["Method"] = "CreateMaskForFirstActiveElement",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt64()", ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateMaskForFirstActiveElement(left, right))",        ["GetVectorResult"] = "Helpers.CreateMaskForFirstActiveElement(left, right)"}),

        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateMaskForNextActiveElement_byte",                                                                                          ["Method"] = "CreateMaskForNextActiveElement",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskByte()",   ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                          ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateMaskForNextActiveElement(left, right))",        ["GetVectorResult"] = "Helpers.CreateMaskForNextActiveElement(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateMaskForNextActiveElement_ushort",                                                                                        ["Method"] = "CreateMaskForNextActiveElement",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt16()", ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateMaskForNextActiveElement(left, right))",        ["GetVectorResult"] = "Helpers.CreateMaskForNextActiveElement(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateMaskForNextActiveElement_uint",                                                                                          ["Method"] = "CreateMaskForNextActiveElement",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt32()", ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateMaskForNextActiveElement(left, right))",        ["GetVectorResult"] = "Helpers.CreateMaskForNextActiveElement(left, right)"}),
        ("SveVecBinOpVecTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_CreateMaskForNextActiveElement_ulong",                                                                                         ["Method"] = "CreateMaskForNextActiveElement",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "Helpers.getMaskUInt64()", ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.CreateMaskForNextActiveElement(left, right))",        ["GetVectorResult"] = "Helpers.CreateMaskForNextActiveElement(left, right)"}),


        ("SveSimpleVecOpNarrowingTest.template", new Dictionary<string, string> {["TestName"] = "Sve_FloatingPointExponentialAccelerator_float_uint",                                                  ["Method"] = "FloatingPointExponentialAccelerator",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateIterResult"] = "BitConverter.SingleToInt32Bits(Helpers.FPExponentialAccelerator(firstOp[i])) != BitConverter.SingleToInt32Bits(result[i])", ["GetIterResult"] = "Helpers.FPExponentialAccelerator(leftOp[i])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveSimpleVecOpNarrowingTest.template", new Dictionary<string, string> {["TestName"] = "Sve_FloatingPointExponentialAccelerator_double_ulong",                                                ["Method"] = "FloatingPointExponentialAccelerator",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateIterResult"] = "BitConverter.DoubleToInt64Bits(Helpers.FPExponentialAccelerator(firstOp[i])) != BitConverter.DoubleToInt64Bits(result[i])", ["GetIterResult"] = "Helpers.FPExponentialAccelerator(leftOp[i])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_byte",                                                                ["Method"] = "ExtractAfterLastActiveElement",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i] != result[i]",               ["GetIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i]",                                                        ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_byte_scalar",                                                         ["Method"] = "ExtractAfterLastActiveElementScalar",                                                                   ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                         ["ValidateScalarResult"] = "Helpers.ExtractAfterLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_short",                                                               ["Method"] = "ExtractAfterLastActiveElement",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i] != result[i]",               ["GetIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i]",                                                        ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_short_scalar",                                                        ["Method"] = "ExtractAfterLastActiveElementScalar",                                                                   ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                        ["ValidateScalarResult"] = "Helpers.ExtractAfterLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_int",                                                                 ["Method"] = "ExtractAfterLastActiveElement",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i] != result[i]",               ["GetIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i]",                                                        ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_int_scalar",                                                          ["Method"] = "ExtractAfterLastActiveElementScalar",                                                                   ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateScalarResult"] = "Helpers.ExtractAfterLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_long",                                                                ["Method"] = "ExtractAfterLastActiveElement",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i] != result[i]",               ["GetIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i]",                                                        ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_long_scalar",                                                         ["Method"] = "ExtractAfterLastActiveElementScalar",                                                                   ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateScalarResult"] = "Helpers.ExtractAfterLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_sbyte",                                                               ["Method"] = "ExtractAfterLastActiveElement",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i] != result[i]",               ["GetIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i]",                                                        ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_sbyte_scalar",                                                        ["Method"] = "ExtractAfterLastActiveElementScalar",                                                                   ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                        ["ValidateScalarResult"] = "Helpers.ExtractAfterLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_ushort",                                                              ["Method"] = "ExtractAfterLastActiveElement",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i] != result[i]",               ["GetIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i]",                                                        ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_ushort_scalar",                                                       ["Method"] = "ExtractAfterLastActiveElementScalar",                                                                   ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                       ["ValidateScalarResult"] = "Helpers.ExtractAfterLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_uint",                                                                ["Method"] = "ExtractAfterLastActiveElement",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i] != result[i]",               ["GetIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i]",                                                        ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_uint_scalar",                                                         ["Method"] = "ExtractAfterLastActiveElementScalar",                                                                   ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateScalarResult"] = "Helpers.ExtractAfterLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_ulong",                                                               ["Method"] = "ExtractAfterLastActiveElement",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i] != result[i]",               ["GetIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i]",                                                        ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_ulong_scalar",                                                        ["Method"] = "ExtractAfterLastActiveElementScalar",                                                                   ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateScalarResult"] = "Helpers.ExtractAfterLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_float",                                                               ["Method"] = "ExtractAfterLastActiveElement",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i] != result[i]",               ["GetIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i]",                                                        ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_float_scalar",                                                        ["Method"] = "ExtractAfterLastActiveElementScalar",                                                                   ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateScalarResult"] = "Helpers.ExtractAfterLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_double",                                                              ["Method"] = "ExtractAfterLastActiveElement",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i] != result[i]",               ["GetIterResult"] = "Helpers.ExtractAfterLastActiveElement(left, right)[i]",                                                        ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractAfterLastActiveElement_double_scalar",                                                       ["Method"] = "ExtractAfterLastActiveElementScalar",                                                                   ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateScalarResult"] = "Helpers.ExtractAfterLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_byte",                                                                     ["Method"] = "ExtractLastActiveElement",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i] != result[i]",                    ["GetIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i]",                                                             ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_byte_scalar",                                                              ["Method"] = "ExtractLastActiveElementScalar",                                                                        ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                         ["ValidateScalarResult"] = "Helpers.ExtractLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_short",                                                                    ["Method"] = "ExtractLastActiveElement",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i] != result[i]",                    ["GetIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i]",                                                             ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_short_scalar",                                                             ["Method"] = "ExtractLastActiveElementScalar",                                                                        ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                        ["ValidateScalarResult"] = "Helpers.ExtractLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_int",                                                                      ["Method"] = "ExtractLastActiveElement",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i] != result[i]",                    ["GetIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i]",                                                             ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_int_scalar",                                                               ["Method"] = "ExtractLastActiveElementScalar",                                                                        ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                        ["ValidateScalarResult"] = "Helpers.ExtractLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_long",                                                                     ["Method"] = "ExtractLastActiveElement",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i] != result[i]",                    ["GetIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i]",                                                             ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_long_scalar",                                                              ["Method"] = "ExtractLastActiveElementScalar",                                                                        ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                        ["ValidateScalarResult"] = "Helpers.ExtractLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_sbyte",                                                                    ["Method"] = "ExtractLastActiveElement",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i] != result[i]",                    ["GetIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i]",                                                             ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_sbyte_scalar",                                                             ["Method"] = "ExtractLastActiveElementScalar",                                                                        ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                        ["ValidateScalarResult"] = "Helpers.ExtractLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_ushort",                                                                   ["Method"] = "ExtractLastActiveElement",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i] != result[i]",                    ["GetIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i]",                                                             ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_ushort_scalar",                                                            ["Method"] = "ExtractLastActiveElementScalar",                                                                        ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                       ["ValidateScalarResult"] = "Helpers.ExtractLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_uint",                                                                     ["Method"] = "ExtractLastActiveElement",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i] != result[i]",                    ["GetIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i]",                                                             ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_uint_scalar",                                                              ["Method"] = "ExtractLastActiveElementScalar",                                                                        ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateScalarResult"] = "Helpers.ExtractLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_ulong",                                                                    ["Method"] = "ExtractLastActiveElement",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i] != result[i]",                    ["GetIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i]",                                                             ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_ulong_scalar",                                                             ["Method"] = "ExtractLastActiveElementScalar",                                                                        ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateScalarResult"] = "Helpers.ExtractLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_float",                                                                    ["Method"] = "ExtractLastActiveElement",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i] != result[i]",                    ["GetIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i]",                                                             ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_float_scalar",                                                             ["Method"] = "ExtractLastActiveElementScalar",                                                                        ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateScalarResult"] = "Helpers.ExtractLastActiveElementScalar(left, right) != result",}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_double",                                                                   ["Method"] = "ExtractLastActiveElement",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i] != result[i]",                    ["GetIterResult"] = "Helpers.ExtractLastActiveElement(left, right)[i]",                                                             ["ConvertFunc"] = " ",}),
        ("SveScalarBinOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ExtractLastActiveElement_double_scalar",                                                            ["Method"] = "ExtractLastActiveElementScalar",                                                                        ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateScalarResult"] = "Helpers.ExtractLastActiveElementScalar(left, right) != result",}),
        ("SveExtractVectorTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_ExtractVector_Byte_1",                                                                               ["Method"] = "ExtractVector",                                                     ["RetVectorType"] = "Vector", ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector", ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector", ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["ElementIndex"] = "1",                                                        ["ValidateIterResult"] = "Helpers.ExtractVector(firstOp, secondOp, ElementIndex, i) != result[i]"}),
        ("SveExtractVectorTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_ExtractVector_Double_1",                                                                             ["Method"] = "ExtractVector",                                                     ["RetVectorType"] = "Vector", ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector", ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector", ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",        ["ElementIndex"] = "1",                                                        ["ValidateIterResult"] = "BitConverter.DoubleToInt64Bits(Helpers.ExtractVector(firstOp, secondOp, ElementIndex, i)) != BitConverter.DoubleToInt64Bits(result[i])"}),
        ("SveExtractVectorTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_ExtractVector_Int16_1",                                                                              ["Method"] = "ExtractVector",                                                     ["RetVectorType"] = "Vector", ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector", ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector", ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["ElementIndex"] = "1",                                                        ["ValidateIterResult"] = "Helpers.ExtractVector(firstOp, secondOp, ElementIndex, i) != result[i]"}),
        ("SveExtractVectorTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_ExtractVector_Int32_1",                                                                              ["Method"] = "ExtractVector",                                                     ["RetVectorType"] = "Vector", ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector", ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector", ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["ElementIndex"] = "1",                                                        ["ValidateIterResult"] = "Helpers.ExtractVector(firstOp, secondOp, ElementIndex, i) != result[i]"}),
        ("SveExtractVectorTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_ExtractVector_Int64_1",                                                                              ["Method"] = "ExtractVector",                                                     ["RetVectorType"] = "Vector", ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector", ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector", ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",         ["ElementIndex"] = "1",                                                        ["ValidateIterResult"] = "Helpers.ExtractVector(firstOp, secondOp, ElementIndex, i) != result[i]"}),
        ("SveExtractVectorTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_ExtractVector_SByte_1",                                                                              ["Method"] = "ExtractVector",                                                     ["RetVectorType"] = "Vector", ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector", ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector", ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["ElementIndex"] = "1",                                                        ["ValidateIterResult"] = "Helpers.ExtractVector(firstOp, secondOp, ElementIndex, i) != result[i]"}),
        ("SveExtractVectorTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_ExtractVector_Single_1",                                                                             ["Method"] = "ExtractVector",                                                     ["RetVectorType"] = "Vector", ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector", ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector", ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",        ["ElementIndex"] = "1",                                                        ["ValidateIterResult"] = "BitConverter.SingleToInt32Bits(Helpers.ExtractVector(firstOp, secondOp, ElementIndex, i)) != BitConverter.SingleToInt32Bits(result[i])"}),
        ("SveExtractVectorTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_ExtractVector_UInt16_1",                                                                             ["Method"] = "ExtractVector",                                                     ["RetVectorType"] = "Vector", ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector", ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector", ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["ElementIndex"] = "1",                                                        ["ValidateIterResult"] = "Helpers.ExtractVector(firstOp, secondOp, ElementIndex, i) != result[i]"}),
        ("SveExtractVectorTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_ExtractVector_UInt32_1",                                                                             ["Method"] = "ExtractVector",                                                     ["RetVectorType"] = "Vector", ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector", ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector", ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["ElementIndex"] = "1",                                                        ["ValidateIterResult"] = "Helpers.ExtractVector(firstOp, secondOp, ElementIndex, i) != result[i]"}),
        ("SveExtractVectorTest.template",        new Dictionary<string, string> { ["TestName"] = "Sve_ExtractVector_UInt64_1",                                                                             ["Method"] = "ExtractVector",                                                     ["RetVectorType"] = "Vector", ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector", ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector", ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["ElementIndex"] = "1",                                                        ["ValidateIterResult"] = "Helpers.ExtractVector(firstOp, secondOp, ElementIndex, i) != result[i]"}),

        ("SveFfrTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_Ffr_byte",                                                                                                            ["VectorBaseType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskByte()"}),
        ("SveFfrTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_Ffr_short",                                                                                                           ["VectorBaseType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt16()"}),
        ("SveFfrTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_Ffr_int",                                                                                                             ["VectorBaseType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()"}),
        ("SveFfrTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_Ffr_long",                                                                                                            ["VectorBaseType"] = "Int64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()"}),
        ("SveFfrTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_Ffr_sbyte",                                                                                                           ["VectorBaseType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSByte()"}),
        ("SveFfrTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_Ffr_ushort",                                                                                                          ["VectorBaseType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt16()"}),
        ("SveFfrTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_Ffr_uint",                                                                                                            ["VectorBaseType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()"}),
        ("SveFfrTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_Ffr_ulong",                                                                                                           ["VectorBaseType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()"}),
        
        // ("SveGatherVectorVectorBases.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Bases_float_uint",                                                                   ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "Single", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueBase"] = "TestLibrary.Generator.GetSingle()"}),
        // ("SveGatherVectorVectorBases.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Bases_int_uint",                                                                     ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueBase"] = "TestLibrary.Generator.GetInt32()"}),
        // ("SveGatherVectorVectorBases.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Bases_uint_uint",                                                                    ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueBase"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorVectorBases.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Bases_double_ulong",                                                                 ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Double", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueBase"] = "TestLibrary.Generator.GetDouble()"}),
        ("SveGatherVectorVectorBases.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Bases_long_ulong",                                                                   ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Int64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueBase"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorVectorBases.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Bases_ulong_ulong",                                                                  ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueBase"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Indices_float_int",                                                                    ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Single", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Indices_int_int",                                                                      ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Indices_uint_int",                                                                     ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Indices_float_uint",                                                                   ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Single", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Indices_int_uint",                                                                     ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Indices_uint_uint",                                                                    ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Indices_double_long",                                                                  ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Double", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",      ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Indices_long_long",                                                                    ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Indices_ulong_long",                                                                   ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Indices_double_ulong",                                                                 ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Double", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",      ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Indices_long_ulong",                                                                   ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVector_Indices_ulong_ulong",                                                                  ["Method"] = "GatherVector",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),

        // ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtend_Bases_int_uint",                                                         ["Method"] = "GatherVectorByteZeroExtend",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()"      ["NextValueBase"] = "TestLibrary.Generator.GetInt32()"}),
        // ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtend_Bases_uint_uint",                                                        ["Method"] = "GatherVectorByteZeroExtend",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()"      ["NextValueBase"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtend_Bases_long_ulong",                                                       ["Method"] = "GatherVectorByteZeroExtend",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtend_Bases_ulong_ulong",                                                      ["Method"] = "GatherVectorByteZeroExtend",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetUInt64()" }),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtend_Indices_int_int",                                                        ["Method"] = "GatherVectorByteZeroExtend",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtend_Indices_uint_int",                                                       ["Method"] = "GatherVectorByteZeroExtend",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtend_Indices_int_uint",                                                       ["Method"] = "GatherVectorByteZeroExtend",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtend_Indices_uint_uint",                                                      ["Method"] = "GatherVectorByteZeroExtend",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtend_Indices_long_long",                                                      ["Method"] = "GatherVectorByteZeroExtend",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtend_Indices_ulong_long",                                                     ["Method"] = "GatherVectorByteZeroExtend",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtend_Indices_long_ulong",                                                     ["Method"] = "GatherVectorByteZeroExtend",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtend_Indices_ulong_ulong",                                                    ["Method"] = "GatherVectorByteZeroExtend",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),

        // ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtend_Bases_int_uint",                                                        ["Method"] = "GatherVectorInt16SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()"      ["NextValueBase"] = "TestLibrary.Generator.GetInt32()}),
        // ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtend_Bases_uint_uint",                                                       ["Method"] = "GatherVectorInt16SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()"      ["NextValueBase"] = "TestLibrary.Generator.GetUInt32()}),
        ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtend_Bases_long_ulong",                                                      ["Method"] = "GatherVectorInt16SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtend_Bases_ulong_ulong",                                                     ["Method"] = "GatherVectorInt16SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtend_Indices_int_int",                                                       ["Method"] = "GatherVectorInt16SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtend_Indices_uint_int",                                                      ["Method"] = "GatherVectorInt16SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtend_Indices_int_uint",                                                      ["Method"] = "GatherVectorInt16SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtend_Indices_uint_uint",                                                     ["Method"] = "GatherVectorInt16SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtend_Indices_long_long",                                                     ["Method"] = "GatherVectorInt16SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtend_Indices_ulong_long",                                                    ["Method"] = "GatherVectorInt16SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtend_Indices_long_ulong",                                                    ["Method"] = "GatherVectorInt16SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtend_Indices_ulong_ulong",                                                   ["Method"] = "GatherVectorInt16SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtend_Indices_int_int",                                        ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtend",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtend_Indices_uint_int",                                       ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtend",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtend_Indices_int_uint",                                       ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtend",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtend_Indices_uint_uint",                                      ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtend",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtend_Indices_long_long",                                      ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtend",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtend_Indices_ulong_long",                                     ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtend",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtend_Indices_long_ulong",                                     ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtend",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtend_Indices_ulong_ulong",                                    ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtend",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt32SignExtend_Bases_long_ulong",                                                      ["Method"] = "GatherVectorInt32SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt32SignExtend_Bases_ulong_ulong",                                                     ["Method"] = "GatherVectorInt32SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt32SignExtend_Indices_long_long",                                                     ["Method"] = "GatherVectorInt32SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt32SignExtend_Indices_ulong_long",                                                    ["Method"] = "GatherVectorInt32SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt32SignExtend_Indices_long_ulong",                                                    ["Method"] = "GatherVectorInt32SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt32SignExtend_Indices_ulong_ulong",                                                   ["Method"] = "GatherVectorInt32SignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt32WithByteOffsetsSignExtend_Indices_long_long",                                      ["Method"] = "GatherVectorInt32WithByteOffsetsSignExtend",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt32WithByteOffsetsSignExtend_Indices_ulong_long",                                     ["Method"] = "GatherVectorInt32WithByteOffsetsSignExtend",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt32WithByteOffsetsSignExtend_Indices_long_ulong",                                     ["Method"] = "GatherVectorInt32WithByteOffsetsSignExtend",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt32WithByteOffsetsSignExtend_Indices_ulong_ulong",                                    ["Method"] = "GatherVectorInt32WithByteOffsetsSignExtend",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),

        // ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorSByteSignExtend_Bases_int_uint",                                                        ["Method"] = "GatherVectorSByteSignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "SByte",     ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",     ["NextValueBase"] = "TestLibrary.Generator.GetInt32()"}),
        // ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorSByteSignExtend_Bases_uint_uint",                                                       ["Method"] = "GatherVectorSByteSignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "SByte",     ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",     ["NextValueBase"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorSByteSignExtend_Bases_long_ulong",                                                      ["Method"] = "GatherVectorSByteSignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorSByteSignExtend_Bases_ulong_ulong",                                                     ["Method"] = "GatherVectorSByteSignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorSByteSignExtend_Indices_int_int",                                                       ["Method"] = "GatherVectorSByteSignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorSByteSignExtend_Indices_uint_int",                                                      ["Method"] = "GatherVectorSByteSignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorSByteSignExtend_Indices_int_uint",                                                      ["Method"] = "GatherVectorSByteSignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorSByteSignExtend_Indices_uint_uint",                                                     ["Method"] = "GatherVectorSByteSignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorSByteSignExtend_Indices_long_long",                                                     ["Method"] = "GatherVectorSByteSignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorSByteSignExtend_Indices_ulong_long",                                                    ["Method"] = "GatherVectorSByteSignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorSByteSignExtend_Indices_long_ulong",                                                    ["Method"] = "GatherVectorSByteSignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorSByteSignExtend_Indices_ulong_ulong",                                                   ["Method"] = "GatherVectorSByteSignExtend",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtend_Indices_int_int",                                       ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtend_Indices_uint_int",                                      ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtend_Indices_int_uint",                                      ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtend_Indices_uint_uint",                                     ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtend_Indices_long_long",                                     ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtend_Indices_ulong_long",                                    ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtend_Indices_long_ulong",                                    ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtend_Indices_ulong_ulong",                                   ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),

        // ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtend_Bases_int_uint",                                                       ["Method"] = "GatherVectorUInt16ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "UInt16",    ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",     ["NextValueBase"] = "TestLibrary.Generator.GetInt32()}),
        // ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtend_Bases_uint_uint",                                                      ["Method"] = "GatherVectorUInt16ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "UInt16",    ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",     ["NextValueBase"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtend_Bases_long_ulong",                                                     ["Method"] = "GatherVectorUInt16ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtend_Bases_ulong_ulong",                                                    ["Method"] = "GatherVectorUInt16ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtend_Indices_int_int",                                                      ["Method"] = "GatherVectorUInt16ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtend_Indices_uint_int",                                                     ["Method"] = "GatherVectorUInt16ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtend_Indices_int_uint",                                                     ["Method"] = "GatherVectorUInt16ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtend_Indices_uint_uint",                                                    ["Method"] = "GatherVectorUInt16ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtend_Indices_long_long",                                                    ["Method"] = "GatherVectorUInt16ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtend_Indices_ulong_long",                                                   ["Method"] = "GatherVectorUInt16ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtend_Indices_long_ulong",                                                   ["Method"] = "GatherVectorUInt16ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtend_Indices_ulong_ulong",                                                  ["Method"] = "GatherVectorUInt16ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtend_Indices_long_long",                                     ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtend_Indices_int_int",                                       ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtend_Indices_ulong_long",                                    ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtend_Indices_uint_int",                                      ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtend_Indices_long_ulong",                                    ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtend_Indices_int_uint",                                      ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtend_Indices_ulong_ulong",                                   ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtend_Indices_uint_uint",                                     ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtend",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),

        ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtend_Bases_long_ulong",                                                     ["Method"] = "GatherVectorUInt32ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetInt64()",}),
        // ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtend_Bases_int_uint",                                                       ["Method"] = "GatherVectorUInt32ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "UInt32",    ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",     ["NextValueBase"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtend_Bases_ulong_ulong",                                                    ["Method"] = "GatherVectorUInt32ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetUInt64()"}),
        // ("SveGatherVectorVectorBases.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtend_Bases_uint_uint",                                                      ["Method"] = "GatherVectorUInt32ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                           ["ExtendedElementType"] = "UInt32",    ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",     ["NextValueBase"] = "TestLibrary.Generator.GetUInt32()}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtend_Indices_long_long",                                                    ["Method"] = "GatherVectorUInt32ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtend_Indices_int_int",                                                      ["Method"] = "GatherVectorUInt32ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtend_Indices_ulong_long",                                                   ["Method"] = "GatherVectorUInt32ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtend_Indices_uint_int",                                                     ["Method"] = "GatherVectorUInt32ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtend_Indices_long_ulong",                                                   ["Method"] = "GatherVectorUInt32ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtend_Indices_int_uint",                                                     ["Method"] = "GatherVectorUInt32ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtend_Indices_ulong_ulong",                                                  ["Method"] = "GatherVectorUInt32ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorIndices.template",    new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtend_Indices_uint_uint",                                                    ["Method"] = "GatherVectorUInt32ZeroExtend",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),

        ("SveGatherVectorFirstFaultingVectorBases.template",            new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorFirstFaulting_Bases_double_ulong",                                                   ["Method"] = "GatherVectorFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Double", ["GetFfrType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetDouble()"}),
        ("SveGatherVectorFirstFaultingVectorBases.template",            new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorFirstFaulting_Bases_long_ulong",                                                     ["Method"] = "GatherVectorFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Int64",  ["GetFfrType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingVectorBases.template",            new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorFirstFaulting_Bases_ulong_ulong",                                                    ["Method"] = "GatherVectorFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "UInt64", ["GetFfrType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueBase"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorFirstFaulting_Indices_float_int",                                                                    ["Method"] = "GatherVectorFirstFaulting",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Single",   ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorFirstFaulting_Indices_int_int",                                                                      ["Method"] = "GatherVectorFirstFaulting",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Int32",    ["GetFfrType"] = "Int32",       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorFirstFaulting_Indices_uint_int",                                                                     ["Method"] = "GatherVectorFirstFaulting",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt32",   ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorFirstFaulting_Indices_float_uint",                                                                   ["Method"] = "GatherVectorFirstFaulting",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Single",   ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorFirstFaulting_Indices_int_uint",                                                                     ["Method"] = "GatherVectorFirstFaulting",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Int32",    ["GetFfrType"] = "Int32",       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorFirstFaulting_Indices_uint_uint",                                                                    ["Method"] = "GatherVectorFirstFaulting",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt32",   ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorFirstFaulting_Indices_double_long",                                                                  ["Method"] = "GatherVectorFirstFaulting",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Double",   ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",      ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorFirstFaulting_Indices_long_long",                                                                    ["Method"] = "GatherVectorFirstFaulting",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int64",    ["GetFfrType"] = "Int64",       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorFirstFaulting_Indices_ulong_long",                                                                   ["Method"] = "GatherVectorFirstFaulting",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt64",   ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorFirstFaulting_Indices_double_ulong",                                                                 ["Method"] = "GatherVectorFirstFaulting",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Double",   ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",      ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorFirstFaulting_Indices_long_ulong",                                                                   ["Method"] = "GatherVectorFirstFaulting",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int64",    ["GetFfrType"] = "Int64",       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorFirstFaulting_Indices_ulong_ulong",                                                                  ["Method"] = "GatherVectorFirstFaulting",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt64",   ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorByteZeroExtendFirstFaulting_Indices_int_int",                                                        ["Method"] = "GatherVectorByteZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Byte",     ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                      ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorByteZeroExtendFirstFaulting_Indices_int_uint",                                                       ["Method"] = "GatherVectorByteZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Byte",     ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                      ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorByteZeroExtendFirstFaulting_Indices_long_long",                                                      ["Method"] = "GatherVectorByteZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Byte",     ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                      ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorByteZeroExtendFirstFaulting_Indices_long_ulong",                                                     ["Method"] = "GatherVectorByteZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Byte",     ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                      ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorByteZeroExtendFirstFaulting_Indices_uint_int",                                                       ["Method"] = "GatherVectorByteZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Byte",     ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                      ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorByteZeroExtendFirstFaulting_Indices_uint_uint",                                                      ["Method"] = "GatherVectorByteZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Byte",     ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                      ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorByteZeroExtendFirstFaulting_Indices_ulong_long",                                                     ["Method"] = "GatherVectorByteZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Byte",     ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                      ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorByteZeroExtendFirstFaulting_Indices_ulong_ulong",                                                    ["Method"] = "GatherVectorByteZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Byte",     ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                      ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16SignExtendFirstFaulting_Indices_int_int",                                                       ["Method"] = "GatherVectorInt16SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16SignExtendFirstFaulting_Indices_int_uint",                                                      ["Method"] = "GatherVectorInt16SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16SignExtendFirstFaulting_Indices_long_long",                                                     ["Method"] = "GatherVectorInt16SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16SignExtendFirstFaulting_Indices_long_ulong",                                                    ["Method"] = "GatherVectorInt16SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16SignExtendFirstFaulting_Indices_uint_int",                                                      ["Method"] = "GatherVectorInt16SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16SignExtendFirstFaulting_Indices_uint_uint",                                                     ["Method"] = "GatherVectorInt16SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16SignExtendFirstFaulting_Indices_ulong_long",                                                    ["Method"] = "GatherVectorInt16SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16SignExtendFirstFaulting_Indices_ulong_ulong",                                                   ["Method"] = "GatherVectorInt16SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting_offsets_int_int",                                        ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting_offsets_int_uint",                                       ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting_offsets_long_long",                                      ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting_offsets_long_ulong",                                     ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting_offsets_uint_int",                                       ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting_offsets_uint_uint",                                      ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting_offsets_ulong_long",                                     ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting_offsets_ulong_ulong",                                    ["Method"] = "GatherVectorInt16WithByteOffsetsSignExtendFirstFaulting",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt32SignExtendFirstFaulting_Indices_long_long",                                                     ["Method"] = "GatherVectorInt32SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int32",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt32SignExtendFirstFaulting_Indices_long_ulong",                                                    ["Method"] = "GatherVectorInt32SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int32",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt32SignExtendFirstFaulting_Indices_ulong_long",                                                    ["Method"] = "GatherVectorInt32SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int32",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt32SignExtendFirstFaulting_Indices_ulong_ulong",                                                   ["Method"] = "GatherVectorInt32SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int32",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt32WithByteOffsetsSignExtendFirstFaulting_offsets_long_long",                                      ["Method"] = "GatherVectorInt32WithByteOffsetsSignExtendFirstFaulting",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int32",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt32WithByteOffsetsSignExtendFirstFaulting_offsets_long_ulong",                                     ["Method"] = "GatherVectorInt32WithByteOffsetsSignExtendFirstFaulting",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int32",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt32WithByteOffsetsSignExtendFirstFaulting_offsets_ulong_long",                                     ["Method"] = "GatherVectorInt32WithByteOffsetsSignExtendFirstFaulting",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Int32",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorInt32WithByteOffsetsSignExtendFirstFaulting_offsets_ulong_ulong",                                    ["Method"] = "GatherVectorInt32WithByteOffsetsSignExtendFirstFaulting",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Int32",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorSByteSignExtendFirstFaulting_Indices_int_int",                                                       ["Method"] = "GatherVectorSByteSignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "SByte",    ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorSByteSignExtendFirstFaulting_Indices_int_uint",                                                      ["Method"] = "GatherVectorSByteSignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "SByte",    ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorSByteSignExtendFirstFaulting_Indices_long_long",                                                     ["Method"] = "GatherVectorSByteSignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "SByte",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorSByteSignExtendFirstFaulting_Indices_long_ulong",                                                    ["Method"] = "GatherVectorSByteSignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "SByte",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorSByteSignExtendFirstFaulting_Indices_uint_int",                                                      ["Method"] = "GatherVectorSByteSignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "SByte",    ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorSByteSignExtendFirstFaulting_Indices_uint_uint",                                                     ["Method"] = "GatherVectorSByteSignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "SByte",    ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorSByteSignExtendFirstFaulting_Indices_ulong_long",                                                    ["Method"] = "GatherVectorSByteSignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "SByte",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorSByteSignExtendFirstFaulting_Indices_ulong_ulong",                                                   ["Method"] = "GatherVectorSByteSignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "SByte",    ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting_offsets_int_int",                                      ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",                                        ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",   ["ConvertFunc"] = "(UInt16)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting_offsets_int_uint",                                     ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",                                       ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",  ["ConvertFunc"] = "(UInt16)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting_offsets_long_long",                                    ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",                                        ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",   ["ConvertFunc"] = "(UInt16)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting_offsets_long_ulong",                                   ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",                                       ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",  ["ConvertFunc"] = "(UInt16)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting_offsets_uint_int",                                     ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",                                        ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",   ["ConvertFunc"] = "(UInt16)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting_offsets_uint_uint",                                    ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",                                       ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",  ["ConvertFunc"] = "(UInt16)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting_offsets_ulong_long",                                   ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",                                        ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",   ["ConvertFunc"] = "(UInt16)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting_offsets_ulong_ulong",                                  ["Method"] = "GatherVectorUInt16WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",                                       ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",  ["ConvertFunc"] = "(UInt16)"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16ZeroExtendFirstFaulting_Indices_int_int",                                                      ["Method"] = "GatherVectorUInt16ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt16",   ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16ZeroExtendFirstFaulting_Indices_int_uint",                                                     ["Method"] = "GatherVectorUInt16ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt16",   ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16ZeroExtendFirstFaulting_Indices_long_long",                                                    ["Method"] = "GatherVectorUInt16ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt16",   ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16ZeroExtendFirstFaulting_Indices_long_ulong",                                                   ["Method"] = "GatherVectorUInt16ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt16",   ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16ZeroExtendFirstFaulting_Indices_uint_int",                                                     ["Method"] = "GatherVectorUInt16ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt16",   ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16ZeroExtendFirstFaulting_Indices_uint_uint",                                                    ["Method"] = "GatherVectorUInt16ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt16",   ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16ZeroExtendFirstFaulting_Indices_ulong_long",                                                   ["Method"] = "GatherVectorUInt16ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt16",   ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt16ZeroExtendFirstFaulting_Indices_ulong_ulong",                                                  ["Method"] = "GatherVectorUInt16ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt16",   ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting_offsets_int_int",                                      ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",                                        ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",   ["ConvertFunc"] = "(UInt32)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting_offsets_int_uint",                                     ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",                                       ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",  ["ConvertFunc"] = "(UInt32)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting_offsets_long_long",                                    ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",                                        ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",   ["ConvertFunc"] = "(UInt32)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting_offsets_long_ulong",                                   ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",                                       ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",  ["ConvertFunc"] = "(UInt32)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting_offsets_uint_int",                                     ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",                                        ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",   ["ConvertFunc"] = "(UInt32)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting_offsets_uint_uint",                                    ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",                                       ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",  ["ConvertFunc"] = "(UInt32)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting_offsets_ulong_long",                                   ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",                                        ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",   ["ConvertFunc"] = "(UInt32)"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template", new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting_offsets_ulong_ulong",                                  ["Method"] = "GatherVectorUInt32WithByteOffsetsZeroExtendFirstFaulting",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",                                       ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",  ["ConvertFunc"] = "(UInt32)"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32ZeroExtendFirstFaulting_Indices_int_int",                                                      ["Method"] = "GatherVectorUInt32ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt32",   ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32ZeroExtendFirstFaulting_Indices_int_uint",                                                     ["Method"] = "GatherVectorUInt32ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt32",   ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32ZeroExtendFirstFaulting_Indices_long_long",                                                    ["Method"] = "GatherVectorUInt32ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt32",   ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32ZeroExtendFirstFaulting_Indices_long_ulong",                                                   ["Method"] = "GatherVectorUInt32ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt32",   ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32ZeroExtendFirstFaulting_Indices_uint_int",                                                     ["Method"] = "GatherVectorUInt32ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "UInt32",   ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32ZeroExtendFirstFaulting_Indices_uint_uint",                                                    ["Method"] = "GatherVectorUInt32ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "UInt32",   ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32ZeroExtendFirstFaulting_Indices_ulong_long",                                                   ["Method"] = "GatherVectorUInt32ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "UInt32",   ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingIndices.template",   new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorUInt32ZeroExtendFirstFaulting_Indices_ulong_ulong",                                                  ["Method"] = "GatherVectorUInt32ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "UInt32",   ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveGatherVectorFirstFaultingVectorBases.template", new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtendFirstFaulting_Bases_long_ulong",                                                      ["Method"] = "GatherVectorByteZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Byte",     ["GetFfrType"] = "UInt64",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueBase"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingVectorBases.template", new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorByteZeroExtendFirstFaulting_Bases_ulong_ulong",                                                     ["Method"] = "GatherVectorByteZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Byte",     ["GetFfrType"] = "UInt64",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueBase"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingVectorBases.template", new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtendFirstFaulting_Bases_long_ulong",                                                     ["Method"] = "GatherVectorInt16SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt64",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueBase"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingVectorBases.template", new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorInt16SignExtendFirstFaulting_Bases_ulong_ulong",                                                    ["Method"] = "GatherVectorInt16SignExtendFirstFaulting",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "Int16",    ["GetFfrType"] = "UInt64",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueBase"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingVectorBases.template", new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtendFirstFaulting_Bases_long_ulong",                                                    ["Method"] = "GatherVectorUInt16ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "UInt16",   ["GetFfrType"] = "UInt64",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueBase"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingVectorBases.template", new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt16ZeroExtendFirstFaulting_Bases_ulong_ulong",                                                   ["Method"] = "GatherVectorUInt16ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "UInt16",   ["GetFfrType"] = "UInt64",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueBase"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveGatherVectorFirstFaultingVectorBases.template", new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtendFirstFaulting_Bases_long_ulong",                                                    ["Method"] = "GatherVectorUInt32ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "UInt32",   ["GetFfrType"] = "UInt64",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueBase"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveGatherVectorFirstFaultingVectorBases.template", new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorUInt32ZeroExtendFirstFaulting_Bases_ulong_ulong",                                                   ["Method"] = "GatherVectorUInt32ZeroExtendFirstFaulting",                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["ExtendedElementType"] = "UInt32",   ["GetFfrType"] = "UInt64",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueBase"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveGatherVectorByteOffsetFirstFaulting.template",new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorWithByteOffsetFirstFaulting_float_int",                                                              ["Method"] = "GatherVectorWithByteOffsetFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",                                        ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template",new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorWithByteOffsetFirstFaulting_int",                                                                    ["Method"] = "GatherVectorWithByteOffsetFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",                                        ["GetFfrType"] = "Int32",       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()", ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsetFirstFaulting.template",new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorWithByteOffsetFirstFaulting_uint_int",                                                               ["Method"] = "GatherVectorWithByteOffsetFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",                                        ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()", ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsetFirstFaulting.template",new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorWithByteOffsetFirstFaulting_float_uint",                                                             ["Method"] = "GatherVectorWithByteOffsetFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",                                       ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template",new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorWithByteOffsetFirstFaulting_int_uint",                                                               ["Method"] = "GatherVectorWithByteOffsetFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",                                       ["GetFfrType"] = "Int32",       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsetFirstFaulting.template",new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorWithByteOffsetFirstFaulting_uint",                                                                   ["Method"] = "GatherVectorWithByteOffsetFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32",                                       ["GetFfrType"] = "UInt32",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsetFirstFaulting.template",new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorWithByteOffsetFirstFaulting_double_long",                                                            ["Method"] = "GatherVectorWithByteOffsetFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",                                        ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",      ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template",new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorWithByteOffsetFirstFaulting_long",                                                                   ["Method"] = "GatherVectorWithByteOffsetFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",                                        ["GetFfrType"] = "Int64",       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()", ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsetFirstFaulting.template",new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorWithByteOffsetFirstFaulting_ulong_long",                                                             ["Method"] = "GatherVectorWithByteOffsetFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",                                        ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()", ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsetFirstFaulting.template",new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorWithByteOffsetFirstFaulting_double_ulong",                                                           ["Method"] = "GatherVectorWithByteOffsetFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",                                       ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",      ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveGatherVectorByteOffsetFirstFaulting.template",new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorWithByteOffsetFirstFaulting_long_ulong",                                                             ["Method"] = "GatherVectorWithByteOffsetFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",                                       ["GetFfrType"] = "Int64",       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                     ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsetFirstFaulting.template",new Dictionary<string, string> { ["TestName"] = "Sve_GatherVectorWithByteOffsetFirstFaulting_ulong",                                                                  ["Method"] = "GatherVectorWithByteOffsetFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64",                                       ["GetFfrType"] = "UInt64",      ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                    ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["ConvertFunc"] = ""}),

        ("SveGatherVectorByteOffsets.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorWithByteOffsets_float_int",                                                             ["Method"] = "GatherVectorWithByteOffsets",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",       ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",      ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveGatherVectorByteOffsets.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorWithByteOffsets_int_int",                                                               ["Method"] = "GatherVectorWithByteOffsets",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",      ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsets.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorWithByteOffsets_uint_int",                                                              ["Method"] = "GatherVectorWithByteOffsets",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",      ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsets.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorWithByteOffsets_float_uint",                                                            ["Method"] = "GatherVectorWithByteOffsets",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",       ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",     ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveGatherVectorByteOffsets.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorWithByteOffsets_int_uint",                                                              ["Method"] = "GatherVectorWithByteOffsets",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",     ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsets.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorWithByteOffsets_uint_uint",                                                             ["Method"] = "GatherVectorWithByteOffsets",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",     ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsets.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorWithByteOffsets_double_long",                                                           ["Method"] = "GatherVectorWithByteOffsets",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",      ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",       ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",      ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveGatherVectorByteOffsets.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorWithByteOffsets_long_long",                                                             ["Method"] = "GatherVectorWithByteOffsets",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",      ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsets.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorWithByteOffsets_ulong_long",                                                            ["Method"] = "GatherVectorWithByteOffsets",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",      ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsets.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorWithByteOffsets_double_ulong",                                                          ["Method"] = "GatherVectorWithByteOffsets",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",      ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",       ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",     ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveGatherVectorByteOffsets.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorWithByteOffsets_long_ulong",                                                            ["Method"] = "GatherVectorWithByteOffsets",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",     ["ConvertFunc"] = ""}),
        ("SveGatherVectorByteOffsets.template",new Dictionary<string, string> {["TestName"] = "Sve_GatherVectorWithByteOffsets_ulong_ulong",                                                           ["Method"] = "GatherVectorWithByteOffsets",                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["ExtendedElementType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",     ["ConvertFunc"] = ""}),

        ("SveVecReduceToScalarBinOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_GetActiveElementCount_byte",                                                                   ["Method"] = "GetActiveElementCount",                                                                                 ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskByte()",        ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                       ["ValidateResult"] = "if (Helpers.MaskBothSet(left, right) != result) succeeded = false;",}),
        ("SveVecReduceToScalarBinOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_GetActiveElementCount_sbyte",                                                                  ["Method"] = "GetActiveElementCount",                                                                                 ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSByte()",       ["NextValueOp2"] = "Helpers.getMaskSByte()",                                                                                      ["ValidateResult"] = "if (Helpers.MaskBothSet(left, right) != result) succeeded = false;",}),
        ("SveVecReduceToScalarBinOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_GetActiveElementCount_short",                                                                  ["Method"] = "GetActiveElementCount",                                                                                 ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt16()",       ["NextValueOp2"] = "Helpers.getMaskInt16()",                                                                                      ["ValidateResult"] = "if (Helpers.MaskBothSet(left, right) != result) succeeded = false;",}),
        ("SveVecReduceToScalarBinOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_GetActiveElementCount_int",                                                                    ["Method"] = "GetActiveElementCount",                                                                                 ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",       ["NextValueOp2"] = "Helpers.getMaskInt32()",                                                                                      ["ValidateResult"] = "if (Helpers.MaskBothSet(left, right) != result) succeeded = false;",}),
        ("SveVecReduceToScalarBinOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_GetActiveElementCount_long",                                                                   ["Method"] = "GetActiveElementCount",                                                                                 ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",       ["NextValueOp2"] = "Helpers.getMaskInt64()",                                                                                      ["ValidateResult"] = "if (Helpers.MaskBothSet(left, right) != result) succeeded = false;",}),
        ("SveVecReduceToScalarBinOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_GetActiveElementCount_float",                                                                  ["Method"] = "GetActiveElementCount",                                                                                 ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",      ["NextValueOp2"] = "Helpers.getMaskSingle()",                                                                                     ["ValidateResult"] = "if (Helpers.MaskBothSet(left, right) != result) succeeded = false;",}),
        ("SveVecReduceToScalarBinOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_GetActiveElementCount_double",                                                                 ["Method"] = "GetActiveElementCount",                                                                                 ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",      ["NextValueOp2"] = "Helpers.getMaskDouble()",                                                                                     ["ValidateResult"] = "if (Helpers.MaskBothSet(left, right) != result) succeeded = false;",}),
        ("SveVecReduceToScalarBinOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_GetActiveElementCount_ushort",                                                                 ["Method"] = "GetActiveElementCount",                                                                                 ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt16()",      ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                     ["ValidateResult"] = "if (Helpers.MaskBothSet(left, right) != result) succeeded = false;",}),
        ("SveVecReduceToScalarBinOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_GetActiveElementCount_uint",                                                                   ["Method"] = "GetActiveElementCount",                                                                                 ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",      ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                     ["ValidateResult"] = "if (Helpers.MaskBothSet(left, right) != result) succeeded = false;",}),
        ("SveVecReduceToScalarBinOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_GetActiveElementCount_ulong",                                                                  ["Method"] = "GetActiveElementCount",                                                                                 ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",      ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                     ["ValidateResult"] = "if (Helpers.MaskBothSet(left, right) != result) succeeded = false;",}),

        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_LeadingSignCount_byte_sbyte",                                                                     ["Method"] = "LeadingSignCount",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.CountLeadingSignBits(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.CountLeadingSignBits(leftOp[i])"}),
        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_LeadingSignCount_ushort_short",                                                                   ["Method"] = "LeadingSignCount",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.CountLeadingSignBits(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.CountLeadingSignBits(leftOp[i])"}),
        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_LeadingSignCount_uint_int",                                                                       ["Method"] = "LeadingSignCount",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.CountLeadingSignBits(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.CountLeadingSignBits(leftOp[i])"}),
        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_LeadingSignCount_ulong_long",                                                                     ["Method"] = "LeadingSignCount",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateIterResult"] = "((ulong)Helpers.CountLeadingSignBits(firstOp[i])) != result[i]", ["GetIterResult"] = "Helpers.CountLeadingSignBits(leftOp[i])"}),
        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_LeadingZeroCount_byte_sbyte",                                                                     ["Method"] = "LeadingZeroCount",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.CountLeadingZeroBits(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.CountLeadingZeroBits(leftOp[i])"}),
        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_LeadingZeroCount_ushort_short",                                                                   ["Method"] = "LeadingZeroCount",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.CountLeadingZeroBits(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.CountLeadingZeroBits(leftOp[i])"}),
        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_LeadingZeroCount_uint_int",                                                                       ["Method"] = "LeadingZeroCount",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.CountLeadingZeroBits(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.CountLeadingZeroBits(leftOp[i])"}),
        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_LeadingZeroCount_ulong_long",                                                                     ["Method"] = "LeadingZeroCount",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateIterResult"] = "((ulong)Helpers.CountLeadingZeroBits(firstOp[i])) != result[i]", ["GetIterResult"] = "Helpers.CountLeadingZeroBits(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_LeadingZeroCount_byte",                                                                           ["Method"] = "LeadingZeroCount",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                        ["ValidateIterResult"] = "Helpers.CountLeadingZeroBits(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.CountLeadingZeroBits(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_LeadingZeroCount_ushort",                                                                         ["Method"] = "LeadingZeroCount",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.CountLeadingZeroBits(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.CountLeadingZeroBits(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_LeadingZeroCount_uint",                                                                           ["Method"] = "LeadingZeroCount",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.CountLeadingZeroBits(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.CountLeadingZeroBits(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_LeadingZeroCount_ulong",                                                                          ["Method"] = "LeadingZeroCount",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.CountLeadingZeroBits(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.CountLeadingZeroBits(leftOp[i])"}),

        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector_float",                                                                                ["Method"] = "LoadVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",             ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector_double",                                                                               ["Method"] = "LoadVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",             ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector_sbyte",                                                                                ["Method"] = "LoadVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                   ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSByte()",              ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector_short",                                                                                ["Method"] = "LoadVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt16()",              ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector_int",                                                                                  ["Method"] = "LoadVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",              ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector_long",                                                                                 ["Method"] = "LoadVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",              ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector_byte",                                                                                 ["Method"] = "LoadVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskByte()",               ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector_ushort",                                                                               ["Method"] = "LoadVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt16()",             ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector_uint",                                                                                 ["Method"] = "LoadVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",             ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector_ulong",                                                                                ["Method"] = "LoadVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",             ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonFaulting_float",                                                            ["Method"] = "LoadVectorNonFaulting",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",      ["Op2BaseType"] = "Single",                                                                                          ["LargestVectorSize"] = "64", ["GetFfrType"] = "UInt32",   ["NextValueOp1"] = "Helpers.getMaskSingle()",     ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",  ["Cast"] = "(float*)",     ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonFaulting_double",                                                           ["Method"] = "LoadVectorNonFaulting",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",      ["Op2BaseType"] = "Double",                                                                                          ["LargestVectorSize"] = "64", ["GetFfrType"] = "UInt64",   ["NextValueOp1"] = "Helpers.getMaskDouble()",     ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",  ["Cast"] = "(double*)",    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonFaulting_sbyte",                                                            ["Method"] = "LoadVectorNonFaulting",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",       ["Op2BaseType"] = "SByte",                                                                                           ["LargestVectorSize"] = "64", ["GetFfrType"] = "SByte",    ["NextValueOp1"] = "Helpers.getMaskSByte()",      ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",   ["Cast"] = "(sbyte*)",     ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonFaulting_short",                                                            ["Method"] = "LoadVectorNonFaulting",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",       ["Op2BaseType"] = "Int16",                                                                                           ["LargestVectorSize"] = "64", ["GetFfrType"] = "Int16",    ["NextValueOp1"] = "Helpers.getMaskInt16()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",   ["Cast"] = "(short*)",     ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonFaulting_int",                                                              ["Method"] = "LoadVectorNonFaulting",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",       ["Op2BaseType"] = "Int32",                                                                                           ["LargestVectorSize"] = "64", ["GetFfrType"] = "Int32",    ["NextValueOp1"] = "Helpers.getMaskInt32()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",   ["Cast"] = "(int*)",       ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonFaulting_long",                                                             ["Method"] = "LoadVectorNonFaulting",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",       ["Op2BaseType"] = "Int64",                                                                                           ["LargestVectorSize"] = "64", ["GetFfrType"] = "Int64",    ["NextValueOp1"] = "Helpers.getMaskInt64()",      ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",   ["Cast"] = "(long*)",      ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonFaulting_byte",                                                             ["Method"] = "LoadVectorNonFaulting",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",        ["Op2BaseType"] = "Byte",                                                                                            ["LargestVectorSize"] = "64", ["GetFfrType"] = "Byte",     ["NextValueOp1"] = "Helpers.getMaskByte()",       ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",    ["Cast"] = "(byte*)",      ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonFaulting_ushort",                                                           ["Method"] = "LoadVectorNonFaulting",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",      ["Op2BaseType"] = "UInt16",                                                                                          ["LargestVectorSize"] = "64", ["GetFfrType"] = "UInt16",   ["NextValueOp1"] = "Helpers.getMaskUInt16()",     ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",  ["Cast"] = "(ushort*)",    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonFaulting_uint",                                                             ["Method"] = "LoadVectorNonFaulting",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",      ["Op2BaseType"] = "UInt32",                                                                                          ["LargestVectorSize"] = "64", ["GetFfrType"] = "UInt32",   ["NextValueOp1"] = "Helpers.getMaskUInt32()",     ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",  ["Cast"] = "(uint*)",      ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonFaulting_ulong",                                                            ["Method"] = "LoadVectorNonFaulting",                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",      ["Op2BaseType"] = "UInt64",                                                                                          ["LargestVectorSize"] = "64", ["GetFfrType"] = "UInt64",   ["NextValueOp1"] = "Helpers.getMaskUInt64()",     ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",  ["Cast"] = "(ulong*)",     ["ValidateIterResult"] = "firstOp[i] != result[i]"}),

        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteZeroExtendFirstFaulting_int",                                                                       ["Method"] = "LoadVectorByteZeroExtendFirstFaulting",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                ["Op2BaseType"] = "Byte",                  ["GetFfrType"] = "Int32",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt32()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteZeroExtendFirstFaulting_long",                                                                      ["Method"] = "LoadVectorByteZeroExtendFirstFaulting",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                ["Op2BaseType"] = "Byte",                  ["GetFfrType"] = "Int64",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt64()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteZeroExtendFirstFaulting_short",                                                                     ["Method"] = "LoadVectorByteZeroExtendFirstFaulting",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                ["Op2BaseType"] = "Byte",                  ["GetFfrType"] = "Int16",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt16()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteZeroExtendFirstFaulting_uint",                                                                      ["Method"] = "LoadVectorByteZeroExtendFirstFaulting",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                               ["Op2BaseType"] = "Byte",                  ["GetFfrType"] = "UInt32",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt32()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteZeroExtendFirstFaulting_ulong",                                                                     ["Method"] = "LoadVectorByteZeroExtendFirstFaulting",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                               ["Op2BaseType"] = "Byte",                  ["GetFfrType"] = "UInt64",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt64()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteZeroExtendFirstFaulting_ushort",                                                                    ["Method"] = "LoadVectorByteZeroExtendFirstFaulting",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                               ["Op2BaseType"] = "Byte",                  ["GetFfrType"] = "UInt16",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt16()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),

        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorFirstFaulting_float",                                                                                   ["Method"] = "LoadVectorFirstFaulting",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",        ["Op2VectorType"] = "Vector",                          ["Op2BaseType"] = "Single",                ["GetFfrType"] = "UInt32",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskSingle()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorFirstFaulting_double",                                                                                  ["Method"] = "LoadVectorFirstFaulting",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",        ["Op2VectorType"] = "Vector",                          ["Op2BaseType"] = "Double",                ["GetFfrType"] = "UInt64",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskDouble()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorFirstFaulting_sbyte",                                                                                   ["Method"] = "LoadVectorFirstFaulting",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",         ["Op2VectorType"] = "Vector",                          ["Op2BaseType"] = "SByte",                 ["GetFfrType"] = "SByte",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskSByte()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorFirstFaulting_short",                                                                                   ["Method"] = "LoadVectorFirstFaulting",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",         ["Op2VectorType"] = "Vector",                          ["Op2BaseType"] = "Int16",                 ["GetFfrType"] = "Int16",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt16()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorFirstFaulting_int",                                                                                     ["Method"] = "LoadVectorFirstFaulting",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",         ["Op2VectorType"] = "Vector",                          ["Op2BaseType"] = "Int32",                 ["GetFfrType"] = "Int32",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt32()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorFirstFaulting_long",                                                                                    ["Method"] = "LoadVectorFirstFaulting",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",         ["Op2VectorType"] = "Vector",                          ["Op2BaseType"] = "Int64",                 ["GetFfrType"] = "Int64",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt64()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorFirstFaulting_byte",                                                                                    ["Method"] = "LoadVectorFirstFaulting",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",          ["Op2VectorType"] = "Vector",                          ["Op2BaseType"] = "Byte",                  ["GetFfrType"] = "Byte",                                                ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskByte()",                                             ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorFirstFaulting_ushort",                                                                                  ["Method"] = "LoadVectorFirstFaulting",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",        ["Op2VectorType"] = "Vector",                          ["Op2BaseType"] = "UInt16",                ["GetFfrType"] = "UInt16",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt16()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorFirstFaulting_uint",                                                                                    ["Method"] = "LoadVectorFirstFaulting",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",        ["Op2VectorType"] = "Vector",                          ["Op2BaseType"] = "UInt32",                ["GetFfrType"] = "UInt32",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt32()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorFirstFaulting_ulong",                                                                                   ["Method"] = "LoadVectorFirstFaulting",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",        ["Op2VectorType"] = "Vector",                          ["Op2BaseType"] = "UInt64",                ["GetFfrType"] = "UInt64",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt64()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorInt16SignExtendFirstFaulting_int",                                                                      ["Method"] = "LoadVectorInt16SignExtendFirstFaulting",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                ["Op2BaseType"] = "Int16",                 ["GetFfrType"] = "Int32",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt32()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorInt16SignExtendFirstFaulting_long",                                                                     ["Method"] = "LoadVectorInt16SignExtendFirstFaulting",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                ["Op2BaseType"] = "Int16",                 ["GetFfrType"] = "Int64",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt64()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorInt16SignExtendFirstFaulting_uint",                                                                     ["Method"] = "LoadVectorInt16SignExtendFirstFaulting",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                               ["Op2BaseType"] = "Int16",                 ["GetFfrType"] = "UInt32",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt32()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorInt16SignExtendFirstFaulting_ulong",                                                                    ["Method"] = "LoadVectorInt16SignExtendFirstFaulting",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                               ["Op2BaseType"] = "Int16",                 ["GetFfrType"] = "UInt64",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt64()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()"}),

        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorInt32SignExtendFirstFaulting_long",                                                                     ["Method"] = "LoadVectorInt32SignExtendFirstFaulting",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                ["Op2BaseType"] = "Int32",                 ["GetFfrType"] = "Int64",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt64()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorInt32SignExtendFirstFaulting_ulong",                                                                    ["Method"] = "LoadVectorInt32SignExtendFirstFaulting",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                               ["Op2BaseType"] = "Int32",                 ["GetFfrType"] = "UInt64",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt64()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()"}),

        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorSByteSignExtendFirstFaulting_int",                                                                      ["Method"] = "LoadVectorSByteSignExtendFirstFaulting",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                ["Op2BaseType"] = "SByte",                 ["GetFfrType"] = "Int32",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt32()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorSByteSignExtendFirstFaulting_long",                                                                     ["Method"] = "LoadVectorSByteSignExtendFirstFaulting",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                ["Op2BaseType"] = "SByte",                 ["GetFfrType"] = "Int64",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt64()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorSByteSignExtendFirstFaulting_short",                                                                    ["Method"] = "LoadVectorSByteSignExtendFirstFaulting",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                ["Op2BaseType"] = "SByte",                 ["GetFfrType"] = "Int16",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt16()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorSByteSignExtendFirstFaulting_uint",                                                                     ["Method"] = "LoadVectorSByteSignExtendFirstFaulting",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                               ["Op2BaseType"] = "SByte",                 ["GetFfrType"] = "UInt32",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt32()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorSByteSignExtendFirstFaulting_ulong",                                                                    ["Method"] = "LoadVectorSByteSignExtendFirstFaulting",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                               ["Op2BaseType"] = "SByte",                 ["GetFfrType"] = "UInt64",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt64()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorSByteSignExtendFirstFaulting_ushort",                                                                   ["Method"] = "LoadVectorSByteSignExtendFirstFaulting",                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                               ["Op2BaseType"] = "SByte",                 ["GetFfrType"] = "UInt16",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt16()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),

        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt16ZeroExtendFirstFaulting_int",                                                                     ["Method"] = "LoadVectorUInt16ZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                ["Op2BaseType"] = "UInt16",                ["GetFfrType"] = "Int32",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt32()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt16ZeroExtendFirstFaulting_long",                                                                    ["Method"] = "LoadVectorUInt16ZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                ["Op2BaseType"] = "UInt16",                ["GetFfrType"] = "Int64",                                               ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt64()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt16ZeroExtendFirstFaulting_uint",                                                                    ["Method"] = "LoadVectorUInt16ZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                               ["Op2BaseType"] = "UInt16",                ["GetFfrType"] = "UInt32",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt32()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt16ZeroExtendFirstFaulting_ulong",                                                                   ["Method"] = "LoadVectorUInt16ZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                               ["Op2BaseType"] = "UInt16",                ["GetFfrType"] = "UInt64",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt64()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()"}),

        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt32ZeroExtendFirstFaulting_long",                                                                    ["Method"] = "LoadVectorUInt32ZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                ["Op2BaseType"] = "UInt32",                ["GetFfrType"] = "Int64" ,                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskInt64()",                                            ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveLoadVectorFirstFaultingTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt32ZeroExtendFirstFaulting_ulong",                                                                   ["Method"] = "LoadVectorUInt32ZeroExtendFirstFaulting",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                               ["Op2BaseType"] = "UInt32",                ["GetFfrType"] = "UInt64",                                              ["LargestVectorSize"] = "64",                               ["NextValueOp1"] = "Helpers.getMaskUInt64()",                                           ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()"}),

        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonTemporal_float",                                                                     ["Method"] = "LoadVectorNonTemporal",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single",                                                   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",  ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonTemporal_double",                                                                    ["Method"] = "LoadVectorNonTemporal",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double",                                                   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",  ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonTemporal_sbyte",                                                                     ["Method"] = "LoadVectorNonTemporal",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                   ["Op2BaseType"] = "SByte",                                                    ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSByte()",   ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonTemporal_short",                                                                     ["Method"] = "LoadVectorNonTemporal",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "Int16",                                                    ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt16()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonTemporal_int",                                                                       ["Method"] = "LoadVectorNonTemporal",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                    ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonTemporal_long",                                                                      ["Method"] = "LoadVectorNonTemporal",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                    ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonTemporal_byte",                                                                      ["Method"] = "LoadVectorNonTemporal",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                    ["Op2BaseType"] = "Byte",                                                     ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskByte()",    ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonTemporal_ushort",                                                                    ["Method"] = "LoadVectorNonTemporal",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "UInt16",                                                   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt16()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonTemporal_uint",                                                                      ["Method"] = "LoadVectorNonTemporal",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorNonTemporal_ulong",                                                                     ["Method"] = "LoadVectorNonTemporal",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector128AndReplicateToVector_float",                                                         ["Method"] = "LoadVector128AndReplicateToVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single",                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",  ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector128AndReplicateToVector_double",                                                        ["Method"] = "LoadVector128AndReplicateToVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double",                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",  ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector128AndReplicateToVector_sbyte",                                                         ["Method"] = "LoadVector128AndReplicateToVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                   ["Op2BaseType"] = "SByte",                                        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSByte()",   ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector128AndReplicateToVector_short",                                                         ["Method"] = "LoadVector128AndReplicateToVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "Int16",                                        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt16()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector128AndReplicateToVector_int",                                                           ["Method"] = "LoadVector128AndReplicateToVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector128AndReplicateToVector_long",                                                          ["Method"] = "LoadVector128AndReplicateToVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector128AndReplicateToVector_byte",                                                          ["Method"] = "LoadVector128AndReplicateToVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                    ["Op2BaseType"] = "Byte",                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskByte()",    ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector128AndReplicateToVector_ushort",                                                        ["Method"] = "LoadVector128AndReplicateToVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "UInt16",                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt16()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector128AndReplicateToVector_uint",                                                          ["Method"] = "LoadVector128AndReplicateToVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVector128AndReplicateToVector_ulong",                                                         ["Method"] = "LoadVector128AndReplicateToVector",                                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveLoadNonFaultingMaskedUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_LoadVectorInt16NonFaultingSignExtendToInt32_int",                                             ["Method"] = "LoadVectorInt16NonFaultingSignExtendToInt32",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",  ["GetFfrType"] = "Int32",         ["Cast"] = "",                                                                            ["ValidateIterResult"] = "firstOp[i] != result[i]",}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_LoadVectorInt16NonFaultingSignExtendToInt64_long",                                            ["Method"] = "LoadVectorInt16NonFaultingSignExtendToInt64",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",  ["GetFfrType"] = "Int64",         ["Cast"] = "",                                                                            ["ValidateIterResult"] = "firstOp[i] != result[i]",}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_LoadVectorInt16NonFaultingSignExtendToUInt32_uint",                                           ["Method"] = "LoadVectorInt16NonFaultingSignExtendToUInt32",                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",  ["GetFfrType"] = "UInt32",        ["Cast"] = "",                                                                            ["ValidateIterResult"] = "((uint)firstOp[i]) != result[i]",}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_LoadVectorInt16NonFaultingSignExtendToUInt64_ulong",                                          ["Method"] = "LoadVectorInt16NonFaultingSignExtendToUInt64",                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",  ["GetFfrType"] = "UInt64",        ["Cast"] = "",                                                                            ["ValidateIterResult"] = "((ulong)firstOp[i]) != result[i]",}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_LoadVectorInt32NonFaultingSignExtendToInt64_long",                                            ["Method"] = "LoadVectorInt32NonFaultingSignExtendToInt64",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",  ["GetFfrType"] = "Int64",         ["Cast"] = "",                                                                            ["ValidateIterResult"] = "firstOp[i] != result[i]",}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_LoadVectorInt32NonFaultingSignExtendToUInt64_ulong",                                          ["Method"] = "LoadVectorInt32NonFaultingSignExtendToUInt64",                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",  ["GetFfrType"] = "UInt64",        ["Cast"] = "",                                                                            ["ValidateIterResult"] = "((ulong)firstOp[i]) != result[i]",}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_LoadVectorSByteNonFaultingSignExtendToInt16_short",                                           ["Method"] = "LoadVectorSByteNonFaultingSignExtendToInt16",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt16()",   ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",  ["GetFfrType"] = "Int16",         ["Cast"] = "",                                                                            ["ValidateIterResult"] = "firstOp[i] != result[i]",}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_LoadVectorSByteNonFaultingSignExtendToInt32_int",                                             ["Method"] = "LoadVectorSByteNonFaultingSignExtendToInt32",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",  ["GetFfrType"] = "Int32",         ["Cast"] = "",                                                                            ["ValidateIterResult"] = "firstOp[i] != result[i]",}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_LoadVectorSByteNonFaultingSignExtendToInt64_long",                                            ["Method"] = "LoadVectorSByteNonFaultingSignExtendToInt64",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",  ["GetFfrType"] = "Int64",         ["Cast"] = "",                                                                            ["ValidateIterResult"] = "firstOp[i] != result[i]",}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_LoadVectorSByteNonFaultingSignExtendToUInt16_ushort",                                         ["Method"] = "LoadVectorSByteNonFaultingSignExtendToUInt16",                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt16()",  ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",  ["GetFfrType"] = "UInt16",        ["Cast"] = "",                                                                            ["ValidateIterResult"] = "((ushort)firstOp[i]) != result[i]",}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_LoadVectorSByteNonFaultingSignExtendToUInt32_uint",                                           ["Method"] = "LoadVectorSByteNonFaultingSignExtendToUInt32",                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",  ["GetFfrType"] = "UInt32",        ["Cast"] = "",                                                                            ["ValidateIterResult"] = "((uint)firstOp[i]) != result[i]",}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_LoadVectorSByteNonFaultingSignExtendToUInt64_ulong",                                          ["Method"] = "LoadVectorSByteNonFaultingSignExtendToUInt64",                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",  ["GetFfrType"] = "UInt64",        ["Cast"] = "",                                                                            ["ValidateIterResult"] = "((ulong)firstOp[i]) != result[i]",}),

        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorInt16SignExtendToInt32",                                                                ["Method"] = "LoadVectorInt16SignExtendToInt32",                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorInt16SignExtendToInt64",                                                                ["Method"] = "LoadVectorInt16SignExtendToInt64",                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorInt16SignExtendToUInt32",                                                               ["Method"] = "LoadVectorInt16SignExtendToUInt32",                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorInt16SignExtendToUInt64",                                                               ["Method"] = "LoadVectorInt16SignExtendToUInt64",                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                      ["ValidateIterResult"] = "(ulong)firstOp[i] != result[i]"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorInt32SignExtendToInt64",                                                                ["Method"] = "LoadVectorInt32SignExtendToInt64",                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorInt32SignExtendToUInt64",                                                               ["Method"] = "LoadVectorInt32SignExtendToUInt64",                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                      ["ValidateIterResult"] = "(ulong)firstOp[i] != result[i]"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorSByteSignExtendToInt16",                                                                ["Method"] = "LoadVectorSByteSignExtendToInt16",                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt16()",   ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorSByteSignExtendToInt32",                                                                ["Method"] = "LoadVectorSByteSignExtendToInt32",                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorSByteSignExtendToInt64",                                                                ["Method"] = "LoadVectorSByteSignExtendToInt64",                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorSByteSignExtendToUInt16",                                                               ["Method"] = "LoadVectorSByteSignExtendToUInt16",                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt16()",  ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorSByteSignExtendToUInt32",                                                               ["Method"] = "LoadVectorSByteSignExtendToUInt32",                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorSByteSignExtendToUInt64",                                                               ["Method"] = "LoadVectorSByteSignExtendToUInt64",                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                      ["ValidateIterResult"] = "(ulong)firstOp[i] != result[i]"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteZeroExtendToInt16",                                                                 ["Method"] = "LoadVectorByteZeroExtendToInt16",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt16()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteZeroExtendToInt32",                                                                 ["Method"] = "LoadVectorByteZeroExtendToInt32",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteZeroExtendToInt64",                                                                 ["Method"] = "LoadVectorByteZeroExtendToInt64",                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteZeroExtendToUInt16",                                                                ["Method"] = "LoadVectorByteZeroExtendToUInt16",                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt16()",  ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteZeroExtendToUInt32",                                                                ["Method"] = "LoadVectorByteZeroExtendToUInt32",                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteZeroExtendToUInt64",                                                                ["Method"] = "LoadVectorByteZeroExtendToUInt64",                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetByte()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt16ZeroExtendToInt32",                                                               ["Method"] = "LoadVectorUInt16ZeroExtendToInt32",                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt16ZeroExtendToInt64",                                                               ["Method"] = "LoadVectorUInt16ZeroExtendToInt64",                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt16ZeroExtendToUInt32",                                                              ["Method"] = "LoadVectorUInt16ZeroExtendToUInt32",                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt16ZeroExtendToUInt64",                                                              ["Method"] = "LoadVectorUInt16ZeroExtendToUInt64",                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt32ZeroExtendToInt64",                                                               ["Method"] = "LoadVectorUInt32ZeroExtendToInt64",                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveLoadVectorMaskedTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt32ZeroExtendToUInt64",                                                              ["Method"] = "LoadVectorUInt32ZeroExtendToUInt64",                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()"}),

        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteNonFaultingZeroExtendToInt16",                                             ["Method"] = "LoadVectorByteNonFaultingZeroExtendToInt16",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt16()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",        ["GetFfrType"] = "Int16",    ["Cast"] = "",                                                                    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteNonFaultingZeroExtendToInt32",                                             ["Method"] = "LoadVectorByteNonFaultingZeroExtendToInt32",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",        ["GetFfrType"] = "Int32",    ["Cast"] = "",                                                                    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteNonFaultingZeroExtendToInt64",                                             ["Method"] = "LoadVectorByteNonFaultingZeroExtendToInt64",                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",        ["GetFfrType"] = "Int64",    ["Cast"] = "",                                                                    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteNonFaultingZeroExtendToUInt16",                                            ["Method"] = "LoadVectorByteNonFaultingZeroExtendToUInt16",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt16()",  ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",        ["GetFfrType"] = "UInt16",   ["Cast"] = "",                                                                    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteNonFaultingZeroExtendToUInt32",                                            ["Method"] = "LoadVectorByteNonFaultingZeroExtendToUInt32",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",        ["GetFfrType"] = "UInt32",   ["Cast"] = "",                                                                    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorByteNonFaultingZeroExtendToUInt64",                                            ["Method"] = "LoadVectorByteNonFaultingZeroExtendToUInt64",                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",        ["GetFfrType"] = "UInt64",   ["Cast"] = "",                                                                    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt16NonFaultingZeroExtendToInt32",                                           ["Method"] = "LoadVectorUInt16NonFaultingZeroExtendToInt32",                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",      ["GetFfrType"] = "Int32",    ["Cast"] = "",                                                                    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt16NonFaultingZeroExtendToInt64",                                           ["Method"] = "LoadVectorUInt16NonFaultingZeroExtendToInt64",                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",      ["GetFfrType"] = "Int64",    ["Cast"] = "",                                                                    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt16NonFaultingZeroExtendToUInt32",                                          ["Method"] = "LoadVectorUInt16NonFaultingZeroExtendToUInt32",                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",      ["GetFfrType"] = "UInt32",   ["Cast"] = "",                                                                    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt16NonFaultingZeroExtendToUInt64",                                          ["Method"] = "LoadVectorUInt16NonFaultingZeroExtendToUInt64",                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",      ["GetFfrType"] = "UInt64",   ["Cast"] = "",                                                                    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt32NonFaultingZeroExtendToInt64",                                           ["Method"] = "LoadVectorUInt32NonFaultingZeroExtendToInt64",                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",      ["GetFfrType"] = "Int64",    ["Cast"] = "",                                                                    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),
        ("SveLoadNonFaultingMaskedUnOpTest.template",    new Dictionary<string, string> { ["TestName"] = "Sve_LoadVectorUInt32NonFaultingZeroExtendToUInt64",                                          ["Method"] = "LoadVectorUInt32NonFaultingZeroExtendToUInt64",                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",      ["GetFfrType"] = "UInt64",   ["Cast"] = "",                                                                    ["ValidateIterResult"] = "firstOp[i] != result[i]"}),

        ("SveLoad2xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load2xVectorAndUnzip_float",                                                                                ["Method"] = "Load2xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 2] || result2[i] != input[i * 2 + 1]"}),
        ("SveLoad2xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load2xVectorAndUnzip_double",                                                                               ["Method"] = "Load2xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 2] || result2[i] != input[i * 2 + 1]"}),
        ("SveLoad2xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load2xVectorAndUnzip_sbyte",                                                                                ["Method"] = "Load2xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                   ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "result1[i] != input[i * 2] || result2[i] != input[i * 2 + 1]"}),
        ("SveLoad2xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load2xVectorAndUnzip_short",                                                                                ["Method"] = "Load2xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "result1[i] != input[i * 2] || result2[i] != input[i * 2 + 1]"}),
        ("SveLoad2xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load2xVectorAndUnzip_int",                                                                                  ["Method"] = "Load2xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "result1[i] != input[i * 2] || result2[i] != input[i * 2 + 1]"}),
        ("SveLoad2xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load2xVectorAndUnzip_long",                                                                                 ["Method"] = "Load2xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "result1[i] != input[i * 2] || result2[i] != input[i * 2 + 1]"}),
        ("SveLoad2xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load2xVectorAndUnzip_byte",                                                                                 ["Method"] = "Load2xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "result1[i] != input[i * 2] || result2[i] != input[i * 2 + 1]"}),
        ("SveLoad2xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load2xVectorAndUnzip_ushort",                                                                               ["Method"] = "Load2xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 2] || result2[i] != input[i * 2 + 1]"}),
        ("SveLoad2xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load2xVectorAndUnzip_uint",                                                                                 ["Method"] = "Load2xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 2] || result2[i] != input[i * 2 + 1]"}),
        ("SveLoad2xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load2xVectorAndUnzip_ulong",                                                                                ["Method"] = "Load2xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 2] || result2[i] != input[i * 2 + 1]"}),
        ("SveLoad3xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load3xVectorAndUnzip_float",                                                                                ["Method"] = "Load3xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 3] || result2[i] != input[i * 3 + 1] || result3[i] != input[i * 3 + 2]"}),
        ("SveLoad3xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load3xVectorAndUnzip_double",                                                                               ["Method"] = "Load3xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 3] || result2[i] != input[i * 3 + 1] || result3[i] != input[i * 3 + 2]"}),
        ("SveLoad3xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load3xVectorAndUnzip_sbyte",                                                                                ["Method"] = "Load3xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                   ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "result1[i] != input[i * 3] || result2[i] != input[i * 3 + 1] || result3[i] != input[i * 3 + 2]"}),
        ("SveLoad3xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load3xVectorAndUnzip_short",                                                                                ["Method"] = "Load3xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "result1[i] != input[i * 3] || result2[i] != input[i * 3 + 1] || result3[i] != input[i * 3 + 2]"}),
        ("SveLoad3xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load3xVectorAndUnzip_int",                                                                                  ["Method"] = "Load3xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "result1[i] != input[i * 3] || result2[i] != input[i * 3 + 1] || result3[i] != input[i * 3 + 2]"}),
        ("SveLoad3xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load3xVectorAndUnzip_long",                                                                                 ["Method"] = "Load3xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "result1[i] != input[i * 3] || result2[i] != input[i * 3 + 1] || result3[i] != input[i * 3 + 2]"}),
        ("SveLoad3xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load3xVectorAndUnzip_byte",                                                                                 ["Method"] = "Load3xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "result1[i] != input[i * 3] || result2[i] != input[i * 3 + 1] || result3[i] != input[i * 3 + 2]"}),
        ("SveLoad3xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load3xVectorAndUnzip_ushort",                                                                               ["Method"] = "Load3xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 3] || result2[i] != input[i * 3 + 1] || result3[i] != input[i * 3 + 2]"}),
        ("SveLoad3xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load3xVectorAndUnzip_uint",                                                                                 ["Method"] = "Load3xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 3] || result2[i] != input[i * 3 + 1] || result3[i] != input[i * 3 + 2]"}),
        ("SveLoad3xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load3xVectorAndUnzip_ulong",                                                                                ["Method"] = "Load3xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 3] || result2[i] != input[i * 3 + 1] || result3[i] != input[i * 3 + 2]"}),
        ("SveLoad4xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load4xVectorAndUnzip_float",                                                                                ["Method"] = "Load4xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 4] || result2[i] != input[i * 4 + 1] || result3[i] != input[i * 4 + 2] || result4[i] != input[i * 4 + 3]"}),
        ("SveLoad4xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load4xVectorAndUnzip_double",                                                                               ["Method"] = "Load4xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 4] || result2[i] != input[i * 4 + 1] || result3[i] != input[i * 4 + 2] || result4[i] != input[i * 4 + 3]"}),
        ("SveLoad4xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load4xVectorAndUnzip_sbyte",                                                                                ["Method"] = "Load4xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                   ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "result1[i] != input[i * 4] || result2[i] != input[i * 4 + 1] || result3[i] != input[i * 4 + 2] || result4[i] != input[i * 4 + 3]"}),
        ("SveLoad4xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load4xVectorAndUnzip_short",                                                                                ["Method"] = "Load4xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "result1[i] != input[i * 4] || result2[i] != input[i * 4 + 1] || result3[i] != input[i * 4 + 2] || result4[i] != input[i * 4 + 3]"}),
        ("SveLoad4xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load4xVectorAndUnzip_int",                                                                                  ["Method"] = "Load4xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "result1[i] != input[i * 4] || result2[i] != input[i * 4 + 1] || result3[i] != input[i * 4 + 2] || result4[i] != input[i * 4 + 3]"}),
        ("SveLoad4xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load4xVectorAndUnzip_long",                                                                                 ["Method"] = "Load4xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "result1[i] != input[i * 4] || result2[i] != input[i * 4 + 1] || result3[i] != input[i * 4 + 2] || result4[i] != input[i * 4 + 3]"}),
        ("SveLoad4xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load4xVectorAndUnzip_byte",                                                                                 ["Method"] = "Load4xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "result1[i] != input[i * 4] || result2[i] != input[i * 4 + 1] || result3[i] != input[i * 4 + 2] || result4[i] != input[i * 4 + 3]"}),
        ("SveLoad4xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load4xVectorAndUnzip_ushort",                                                                               ["Method"] = "Load4xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 4] || result2[i] != input[i * 4 + 1] || result3[i] != input[i * 4 + 2] || result4[i] != input[i * 4 + 3]"}),
        ("SveLoad4xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load4xVectorAndUnzip_uint",                                                                                 ["Method"] = "Load4xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 4] || result2[i] != input[i * 4 + 1] || result3[i] != input[i * 4 + 2] || result4[i] != input[i * 4 + 3]"}),
        ("SveLoad4xVectorAndUnzipTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Load4xVectorAndUnzip_ulong",                                                                                ["Method"] = "Load4xVectorAndUnzip",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "result1[i] != input[i * 4] || result2[i] != input[i * 4 + 1] || result3[i] != input[i * 4 + 2] || result4[i] != input[i * 4 + 3]"}),

        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Max_float",                                                                                         ["Method"] = "Max",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                 ["ValidateIterResult"] = "Helpers.Max(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Max(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Max_double",                                                                                        ["Method"] = "Max",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                 ["ValidateIterResult"] = "Helpers.Max(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Max(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Max_sbyte",                                                                                         ["Method"] = "Max",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                  ["ValidateIterResult"] = "Helpers.Max(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Max(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Max_short",                                                                                         ["Method"] = "Max",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                  ["ValidateIterResult"] = "Helpers.Max(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Max(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Max_int",                                                                                           ["Method"] = "Max",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                  ["ValidateIterResult"] = "Helpers.Max(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Max(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Max_long",                                                                                          ["Method"] = "Max",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                  ["ValidateIterResult"] = "Helpers.Max(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Max(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Max_byte",                                                                                          ["Method"] = "Max",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                   ["ValidateIterResult"] = "Helpers.Max(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Max(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Max_ushort",                                                                                        ["Method"] = "Max",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                 ["ValidateIterResult"] = "Helpers.Max(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Max(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Max_uint",                                                                                          ["Method"] = "Max",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                 ["ValidateIterResult"] = "Helpers.Max(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Max(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Max_ulong",                                                                                         ["Method"] = "Max",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                 ["ValidateIterResult"] = "Helpers.Max(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Max(left[i], right[i])"}),

        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MaxAcross_float",                                                                                   ["Method"] = "MaxAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                 ["ValidateReduceOpResult"] = "Helpers.MaxAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MaxAcross_double",                                                                                  ["Method"] = "MaxAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                 ["ValidateReduceOpResult"] = "Helpers.MaxAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MaxAcross_sbyte",                                                                                   ["Method"] = "MaxAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                  ["ValidateReduceOpResult"] = "Helpers.MaxAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MaxAcross_short",                                                                                   ["Method"] = "MaxAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                  ["ValidateReduceOpResult"] = "Helpers.MaxAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MaxAcross_int",                                                                                     ["Method"] = "MaxAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                  ["ValidateReduceOpResult"] = "Helpers.MaxAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MaxAcross_long",                                                                                    ["Method"] = "MaxAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                  ["ValidateReduceOpResult"] = "Helpers.MaxAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MaxAcross_byte",                                                                                    ["Method"] = "MaxAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                   ["ValidateReduceOpResult"] = "Helpers.MaxAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MaxAcross_ushort",                                                                                  ["Method"] = "MaxAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                 ["ValidateReduceOpResult"] = "Helpers.MaxAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MaxAcross_uint",                                                                                    ["Method"] = "MaxAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                 ["ValidateReduceOpResult"] = "Helpers.MaxAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MaxAcross_ulong",                                                                                   ["Method"] = "MaxAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                 ["ValidateReduceOpResult"] = "Helpers.MaxAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),

        ("SveVecBinOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MaxNumber_float",                                                                                   ["Method"] = "MaxNumber",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                       ["ValidateIterResult"] = "Helpers.Max(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Max(left[i], right[i])"}),
        ("SveVecBinOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MaxNumber_double",                                                                                  ["Method"] = "MaxNumber",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                       ["ValidateIterResult"] = "Helpers.Max(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Max(left[i], right[i])"}),

        ("SveVecReduceUnOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_MaxNumberAcross_float",                                                                             ["Method"] = "MaxNumberAcross",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                 ["ValidateReduceOpResult"] = "Helpers.MaxAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_MaxNumberAcross_double",                                                                            ["Method"] = "MaxNumberAcross",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                 ["ValidateReduceOpResult"] = "Helpers.MaxAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),

        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Min_float",                                                                                         ["Method"] = "Min",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                              ["ValidateIterResult"] = "Helpers.Min(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Min(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Min_double",                                                                                        ["Method"] = "Min",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                              ["ValidateIterResult"] = "Helpers.Min(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Min(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Min_sbyte",                                                                                         ["Method"] = "Min",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                               ["ValidateIterResult"] = "Helpers.Min(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Min(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Min_short",                                                                                         ["Method"] = "Min",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                               ["ValidateIterResult"] = "Helpers.Min(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Min(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Min_int",                                                                                           ["Method"] = "Min",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                               ["ValidateIterResult"] = "Helpers.Min(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Min(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Min_long",                                                                                          ["Method"] = "Min",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                               ["ValidateIterResult"] = "Helpers.Min(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Min(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Min_byte",                                                                                          ["Method"] = "Min",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                ["ValidateIterResult"] = "Helpers.Min(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Min(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Min_ushort",                                                                                        ["Method"] = "Min",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                              ["ValidateIterResult"] = "Helpers.Min(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Min(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Min_uint",                                                                                          ["Method"] = "Min",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                              ["ValidateIterResult"] = "Helpers.Min(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Min(left[i], right[i])"}),
        ("SveVecBinOpTest.template",                   new Dictionary<string, string> { ["TestName"] = "Sve_Min_ulong",                                                                                         ["Method"] = "Min",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                              ["ValidateIterResult"] = "Helpers.Min(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Min(left[i], right[i])"}),

        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MinAcross_float",                                                                                   ["Method"] = "MinAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                               ["ValidateReduceOpResult"] = "Helpers.MinAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MinAcross_double",                                                                                  ["Method"] = "MinAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                               ["ValidateReduceOpResult"] = "Helpers.MinAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MinAcross_sbyte",                                                                                   ["Method"] = "MinAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                ["ValidateReduceOpResult"] = "Helpers.MinAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MinAcross_short",                                                                                   ["Method"] = "MinAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                ["ValidateReduceOpResult"] = "Helpers.MinAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MinAcross_int",                                                                                     ["Method"] = "MinAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                ["ValidateReduceOpResult"] = "Helpers.MinAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MinAcross_long",                                                                                    ["Method"] = "MinAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                ["ValidateReduceOpResult"] = "Helpers.MinAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MinAcross_byte",                                                                                    ["Method"] = "MinAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                 ["ValidateReduceOpResult"] = "Helpers.MinAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MinAcross_ushort",                                                                                  ["Method"] = "MinAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                               ["ValidateReduceOpResult"] = "Helpers.MinAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MinAcross_uint",                                                                                    ["Method"] = "MinAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                               ["ValidateReduceOpResult"] = "Helpers.MinAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MinAcross_ulong",                                                                                   ["Method"] = "MinAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                               ["ValidateReduceOpResult"] = "Helpers.MinAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),

        ("SveVecBinOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MinNumber_float",                                                                                   ["Method"] = "MinNumber",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                               ["ValidateIterResult"] = "Helpers.Min(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Min(left[i], right[i])"}),
        ("SveVecBinOpTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_MinNumber_double",                                                                                  ["Method"] = "MinNumber",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                               ["ValidateIterResult"] = "Helpers.Min(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Min(left[i], right[i])"}),

        ("SveVecReduceUnOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_MinNumberAcross_float",                                                                             ["Method"] = "MinNumberAcross",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                               ["ValidateReduceOpResult"] = "Helpers.MinAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_MinNumberAcross_double",                                                                            ["Method"] = "MinNumberAcross",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "8",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                               ["ValidateReduceOpResult"] = "Helpers.MinAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),

        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Multiply_float",                                                                                         ["Method"] = "Multiply",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateIterResult"] = "Helpers.Multiply(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Multiply(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Multiply_double",                                                                                        ["Method"] = "Multiply",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",       ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateIterResult"] = "Helpers.Multiply(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Multiply(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Multiply_sbyte",                                                                                         ["Method"] = "Multiply",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(sbyte)TestLibrary.Generator.GetSByte()", ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "Helpers.Multiply(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Multiply(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Multiply_short",                                                                                         ["Method"] = "Multiply",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(short)TestLibrary.Generator.GetInt16()", ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "Helpers.Multiply(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Multiply(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Multiply_int",                                                                                           ["Method"] = "Multiply",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "Helpers.Multiply(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Multiply(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Multiply_long",                                                                                          ["Method"] = "Multiply",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "Helpers.Multiply(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Multiply(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Multiply_byte",                                                                                          ["Method"] = "Multiply",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(byte)TestLibrary.Generator.GetByte()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "Helpers.Multiply(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Multiply(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Multiply_ushort",                                                                                        ["Method"] = "Multiply",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.Multiply(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Multiply(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Multiply_uint",                                                                                          ["Method"] = "Multiply",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.Multiply(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Multiply(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Multiply_ulong",                                                                                         ["Method"] = "Multiply",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.Multiply(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Multiply(left[i], right[i])"}),

        ("SveVecTernOpTest.template",           new Dictionary<string, string> { ["TestName"] = "Sve_MultiplyAdd_sbyte",                                                                                 ["Method"] = "MultiplyAdd",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "SByte",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetSByte()",                         ["ValidateIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",           new Dictionary<string, string> { ["TestName"] = "Sve_MultiplyAdd_short",                                                                                 ["Method"] = "MultiplyAdd",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int16",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt16()",                         ["ValidateIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",           new Dictionary<string, string> { ["TestName"] = "Sve_MultiplyAdd_int",                                                                                   ["Method"] = "MultiplyAdd",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidateIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",           new Dictionary<string, string> { ["TestName"] = "Sve_MultiplyAdd_long",                                                                                  ["Method"] = "MultiplyAdd",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidateIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",           new Dictionary<string, string> { ["TestName"] = "Sve_MultiplyAdd_byte",                                                                                  ["Method"] = "MultiplyAdd",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Byte",   ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetByte()",                          ["ValidateIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",           new Dictionary<string, string> { ["TestName"] = "Sve_MultiplyAdd_ushort",                                                                                ["Method"] = "MultiplyAdd",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt16", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt16()",                        ["ValidateIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",           new Dictionary<string, string> { ["TestName"] = "Sve_MultiplyAdd_uint",                                                                                  ["Method"] = "MultiplyAdd",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidateIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",           new Dictionary<string, string> { ["TestName"] = "Sve_MultiplyAdd_ulong",                                                                                 ["Method"] = "MultiplyAdd",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidateIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplyAdd(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),

        ("SveVecImmTernOpVecTest.template",     new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplex_float_0",                                                                 ["Method"] = "MultiplyAddRotateComplex",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm"] = "0", ["InvalidImm"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplex(firstOp, secondOp, thirdOp, Imm))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplex(first, second, third, Imm)"}),
        ("SveVecImmTernOpVecTest.template",     new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplex_float_1",                                                                 ["Method"] = "MultiplyAddRotateComplex",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm"] = "1", ["InvalidImm"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplex(firstOp, secondOp, thirdOp, Imm))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplex(first, second, third, Imm)"}),
        ("SveVecImmTernOpVecTest.template",     new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplex_float_2",                                                                 ["Method"] = "MultiplyAddRotateComplex",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm"] = "2", ["InvalidImm"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplex(firstOp, secondOp, thirdOp, Imm))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplex(first, second, third, Imm)"}),
        ("SveVecImmTernOpVecTest.template",     new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplex_float_3",                                                                 ["Method"] = "MultiplyAddRotateComplex",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm"] = "3", ["InvalidImm"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplex(firstOp, secondOp, thirdOp, Imm))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplex(first, second, third, Imm)"}),
        ("SveVecImmTernOpVecTest.template",     new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplex_double_0",                                                                ["Method"] = "MultiplyAddRotateComplex",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",["NextValueOp3"] = "TestLibrary.Generator.GetDouble()", ["NextValueMask"] = "Helpers.getMaskDouble()", ["Imm"] = "0", ["InvalidImm"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplex(firstOp, secondOp, thirdOp, Imm))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplex(first, second, third, Imm)"}),
        ("SveVecImmTernOpVecTest.template",     new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplex_double_1",                                                                ["Method"] = "MultiplyAddRotateComplex",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",["NextValueOp3"] = "TestLibrary.Generator.GetDouble()", ["NextValueMask"] = "Helpers.getMaskDouble()", ["Imm"] = "1", ["InvalidImm"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplex(firstOp, secondOp, thirdOp, Imm))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplex(first, second, third, Imm)"}),
        ("SveVecImmTernOpVecTest.template",     new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplex_double_2",                                                                ["Method"] = "MultiplyAddRotateComplex",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",["NextValueOp3"] = "TestLibrary.Generator.GetDouble()", ["NextValueMask"] = "Helpers.getMaskDouble()", ["Imm"] = "2", ["InvalidImm"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplex(firstOp, secondOp, thirdOp, Imm))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplex(first, second, third, Imm)"}),
        ("SveVecImmTernOpVecTest.template",     new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplex_double_3",                                                                ["Method"] = "MultiplyAddRotateComplex",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",["NextValueOp3"] = "TestLibrary.Generator.GetDouble()", ["NextValueMask"] = "Helpers.getMaskDouble()", ["Imm"] = "3", ["InvalidImm"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplex(firstOp, secondOp, thirdOp, Imm))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplex(first, second, third, Imm)"}),

        ("SveVecImm2TernOpVecTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplexBySelectedScalar_float_0_0",                                               ["Method"] = "MultiplyAddRotateComplexBySelectedScalar",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm1"] = "0", ["Imm2"] = "0", ["InvalidImm1"] = "2", ["InvalidImm2"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplexBySelectedScalar(firstOp, secondOp, thirdOp, Imm1, Imm2))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplexBySelectedScalar(first, second, third, Imm1, Imm2)"}),
        ("SveVecImm2TernOpVecTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplexBySelectedScalar_float_0_1",                                               ["Method"] = "MultiplyAddRotateComplexBySelectedScalar",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm1"] = "0", ["Imm2"] = "1", ["InvalidImm1"] = "2", ["InvalidImm2"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplexBySelectedScalar(firstOp, secondOp, thirdOp, Imm1, Imm2))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplexBySelectedScalar(first, second, third, Imm1, Imm2)"}),
        ("SveVecImm2TernOpVecTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplexBySelectedScalar_float_0_2",                                               ["Method"] = "MultiplyAddRotateComplexBySelectedScalar",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm1"] = "0", ["Imm2"] = "2", ["InvalidImm1"] = "2", ["InvalidImm2"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplexBySelectedScalar(firstOp, secondOp, thirdOp, Imm1, Imm2))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplexBySelectedScalar(first, second, third, Imm1, Imm2)"}),
        ("SveVecImm2TernOpVecTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplexBySelectedScalar_float_0_3",                                               ["Method"] = "MultiplyAddRotateComplexBySelectedScalar",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm1"] = "0", ["Imm2"] = "3", ["InvalidImm1"] = "2", ["InvalidImm2"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplexBySelectedScalar(firstOp, secondOp, thirdOp, Imm1, Imm2))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplexBySelectedScalar(first, second, third, Imm1, Imm2)"}),
        ("SveVecImm2TernOpVecTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplexBySelectedScalar_float_1_0",                                               ["Method"] = "MultiplyAddRotateComplexBySelectedScalar",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm1"] = "1", ["Imm2"] = "0", ["InvalidImm1"] = "2", ["InvalidImm2"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplexBySelectedScalar(firstOp, secondOp, thirdOp, Imm1, Imm2))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplexBySelectedScalar(first, second, third, Imm1, Imm2)"}),
        ("SveVecImm2TernOpVecTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplexBySelectedScalar_float_1_1",                                               ["Method"] = "MultiplyAddRotateComplexBySelectedScalar",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm1"] = "1", ["Imm2"] = "1", ["InvalidImm1"] = "2", ["InvalidImm2"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplexBySelectedScalar(firstOp, secondOp, thirdOp, Imm1, Imm2))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplexBySelectedScalar(first, second, third, Imm1, Imm2)"}),
        ("SveVecImm2TernOpVecTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplexBySelectedScalar_float_1_2",                                               ["Method"] = "MultiplyAddRotateComplexBySelectedScalar",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm1"] = "1", ["Imm2"] = "2", ["InvalidImm1"] = "2", ["InvalidImm2"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplexBySelectedScalar(firstOp, secondOp, thirdOp, Imm1, Imm2))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplexBySelectedScalar(first, second, third, Imm1, Imm2)"}),
        ("SveVecImm2TernOpVecTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_MultiplyAddRotateComplexBySelectedScalar_float_1_3",                                               ["Method"] = "MultiplyAddRotateComplexBySelectedScalar",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single",["LargestVectorSize"] = "64",["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",["NextValueOp3"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm1"] = "1", ["Imm2"] = "3", ["InvalidImm1"] = "2", ["InvalidImm2"] = "4", ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.MultiplyAddRotateComplexBySelectedScalar(firstOp, secondOp, thirdOp, Imm1, Imm2))", ["GetVectorResult"] = "Helpers.MultiplyAddRotateComplexBySelectedScalar(first, second, third, Imm1, Imm2)"}),

        ("SveVecImmBinOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_MultiplyBySelectedScalar_float",                                                                        ["Method"] = "MultiplyBySelectedScalar",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",   ["Op3VectorType"] = "Vector",   ["Op3BaseType"] = "Single",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",      ["NextValueMask"] = "Helpers.getMaskSingle()",  ["Imm"] = "1", ["InvalidImm"] = "4", ["ValidateIterResult"] = "BitConverter.SingleToInt32Bits(Helpers.Multiply(firstOp[i], secondOp[Imm])) != BitConverter.SingleToInt32Bits(result[i])",["GetIterResult"] = "Helpers.Multiply(firstOp[i], secondOp[Imm])", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecImmBinOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_MultiplyBySelectedScalar_double",                                                                       ["Method"] = "MultiplyBySelectedScalar",                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",   ["Op3VectorType"] = "Vector",   ["Op3BaseType"] = "Double",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",      ["NextValueMask"] = "Helpers.getMaskDouble()",  ["Imm"] = "0", ["InvalidImm"] = "2", ["ValidateIterResult"] = "BitConverter.DoubleToInt64Bits(Helpers.Multiply(firstOp[i], secondOp[Imm])) != BitConverter.DoubleToInt64Bits(result[i])",["GetIterResult"] = "Helpers.Multiply(firstOp[i], secondOp[Imm])", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),

        ("SveVecBinOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_MultiplyExtended_float",                                                                                ["Method"] = "MultiplyExtended",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                              ["ValidateIterResult"] = "Helpers.MultiplyExtended(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplyExtended(left[i], right[i])"}),
        ("SveVecBinOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_MultiplyExtended_double",                                                                               ["Method"] = "MultiplyExtended",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",       ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                              ["ValidateIterResult"] = "Helpers.MultiplyExtended(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplyExtended(left[i], right[i])"}),

        ("SveVecTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_MultiplySubtract_sbyte",                                                                                ["Method"] = "MultiplySubtract",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "SByte",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetSByte()",                         ["ValidateIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_MultiplySubtract_short",                                                                                ["Method"] = "MultiplySubtract",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int16",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt16()",                         ["ValidateIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_MultiplySubtract_int",                                                                                  ["Method"] = "MultiplySubtract",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidateIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_MultiplySubtract_long",                                                                                 ["Method"] = "MultiplySubtract",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidateIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_MultiplySubtract_byte",                                                                                 ["Method"] = "MultiplySubtract",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Byte",   ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetByte()",                          ["ValidateIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_MultiplySubtract_ushort",                                                                               ["Method"] = "MultiplySubtract",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt16", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt16()",                        ["ValidateIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_MultiplySubtract_uint",                                                                                 ["Method"] = "MultiplySubtract",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidateIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),
        ("SveVecTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_MultiplySubtract_ulong",                                                                                ["Method"] = "MultiplySubtract",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidateIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i]) != result[i]", ["GetIterResult"] = "Helpers.MultiplySubtract(firstOp[i], secondOp[i], thirdOp[i])", ["ConvertFunc"] = ""}),

        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Negate_float",                                                                                         ["Method"] = "Negate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                       ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "-TestLibrary.Generator.GetSingle()",                                                                                                                                                     ["ValidateIterResult"] = "-firstOp[i] != result[i]", ["GetIterResult"] = "-leftOp[i]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Negate_double",                                                                                        ["Method"] = "Negate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                       ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "-TestLibrary.Generator.GetDouble()",                                                                                                                                                     ["ValidateIterResult"] = "-firstOp[i] != result[i]", ["GetIterResult"] = "-leftOp[i]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Negate_sbyte",                                                                                         ["Method"] = "Negate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                        ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(sbyte)-TestLibrary.Generator.GetSByte()",                                                                                                                                               ["ValidateIterResult"] = "-firstOp[i] != result[i]", ["GetIterResult"] = "(sbyte)-leftOp[i]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Negate_short",                                                                                         ["Method"] = "Negate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                        ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(short)-TestLibrary.Generator.GetInt16()",                                                                                                                                               ["ValidateIterResult"] = "-firstOp[i] != result[i]", ["GetIterResult"] = "(short)-leftOp[i]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Negate_int",                                                                                           ["Method"] = "Negate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                        ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "-TestLibrary.Generator.GetInt32()",                                                                                                                                                      ["ValidateIterResult"] = "-firstOp[i] != result[i]", ["GetIterResult"] = "(int)-leftOp[i]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Negate_long",                                                                                          ["Method"] = "Negate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                        ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "-TestLibrary.Generator.GetInt64()",                                                                                                                                                      ["ValidateIterResult"] = "(long)-firstOp[i] != (long)result[i]", ["GetIterResult"] = "(long)-leftOp[i]"}),

        ("SveVecAndScalarOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_InsertIntoShiftedVector_float",                                                                     ["Method"] = "InsertIntoShiftedVector",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ShiftAndInsert(firstOp, secondOp))",}),
        ("SveVecAndScalarOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_InsertIntoShiftedVector_double",                                                                    ["Method"] = "InsertIntoShiftedVector",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ShiftAndInsert(firstOp, secondOp))",}),
        ("SveVecAndScalarOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_InsertIntoShiftedVector_sbyte",                                                                     ["Method"] = "InsertIntoShiftedVector",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ShiftAndInsert(firstOp, secondOp))",}),
        ("SveVecAndScalarOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_InsertIntoShiftedVector_short",                                                                     ["Method"] = "InsertIntoShiftedVector",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ShiftAndInsert(firstOp, secondOp))",}),
        ("SveVecAndScalarOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_InsertIntoShiftedVector_int",                                                                       ["Method"] = "InsertIntoShiftedVector",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ShiftAndInsert(firstOp, secondOp))",}),
        ("SveVecAndScalarOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_InsertIntoShiftedVector_long",                                                                      ["Method"] = "InsertIntoShiftedVector",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ShiftAndInsert(firstOp, secondOp))",}),
        ("SveVecAndScalarOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_InsertIntoShiftedVector_byte",                                                                      ["Method"] = "InsertIntoShiftedVector",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                        ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ShiftAndInsert(firstOp, secondOp))",}),
        ("SveVecAndScalarOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_InsertIntoShiftedVector_ushort",                                                                    ["Method"] = "InsertIntoShiftedVector",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ShiftAndInsert(firstOp, secondOp))",}),
        ("SveVecAndScalarOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_InsertIntoShiftedVector_uint",                                                                      ["Method"] = "InsertIntoShiftedVector",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ShiftAndInsert(firstOp, secondOp))",}),
        ("SveVecAndScalarOpTest.template",    new Dictionary<string, string> {["TestName"] = "Sve_InsertIntoShiftedVector_ulong",                                                                     ["Method"] = "InsertIntoShiftedVector",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateVectorResult"] = "!result.SequenceEqual(Helpers.ShiftAndInsert(firstOp, secondOp))",}),

        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Not_sbyte",                                                                                         ["Method"] = "Not",                                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.Not(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.Not(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Not_short",                                                                                         ["Method"] = "Not",                                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.Not(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.Not(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Not_int",                                                                                           ["Method"] = "Not",                                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.Not(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.Not(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Not_long",                                                                                          ["Method"] = "Not",                                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.Not(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.Not(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Not_byte",                                                                                          ["Method"] = "Not",                                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                        ["ValidateIterResult"] = "Helpers.Not(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.Not(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Not_ushort",                                                                                        ["Method"] = "Not",                                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.Not(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.Not(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Not_uint",                                                                                          ["Method"] = "Not",                                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.Not(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.Not(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Not_ulong",                                                                                         ["Method"] = "Not",                                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.Not(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.Not(leftOp[i])"}),

        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Or_sbyte",                                                                                          ["Method"] = "Or",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(sbyte)TestLibrary.Generator.GetSByte()", ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "Helpers.Or(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Or(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Or_short",                                                                                          ["Method"] = "Or",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(short)TestLibrary.Generator.GetInt16()", ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "Helpers.Or(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Or(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Or_int",                                                                                            ["Method"] = "Or",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "Helpers.Or(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Or(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Or_long",                                                                                           ["Method"] = "Or",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "Helpers.Or(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Or(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Or_byte",                                                                                           ["Method"] = "Or",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(byte)TestLibrary.Generator.GetByte()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "Helpers.Or(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Or(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Or_ushort",                                                                                         ["Method"] = "Or",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.Or(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Or(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Or_uint",                                                                                           ["Method"] = "Or",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.Or(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Or(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Or_ulong",                                                                                          ["Method"] = "Or",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.Or(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Or(left[i], right[i])"}),

        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_OrAcross_sbyte",                                                                                    ["Method"] = "OrAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.OrAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_OrAcross_short",                                                                                    ["Method"] = "OrAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.OrAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_OrAcross_int",                                                                                      ["Method"] = "OrAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.OrAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_OrAcross_long",                                                                                     ["Method"] = "OrAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.OrAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_OrAcross_byte",                                                                                     ["Method"] = "OrAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                        ["ValidateReduceOpResult"] = "Helpers.OrAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_OrAcross_ushort",                                                                                   ["Method"] = "OrAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.OrAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_OrAcross_uint",                                                                                     ["Method"] = "OrAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.OrAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_OrAcross_ulong",                                                                                    ["Method"] = "OrAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.OrAcross(firstOp) != result[0]",                                                                                                              ["ValidateRemainingResults"] = "result[i] != 0"}),

        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_PopCount_uint_float",                                                                             ["Method"] = "PopCount",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                      ["ValidateIterResult"] = "(uint)Helpers.BitCount(firstOp[i]) != result[i]",   ["GetIterResult"] = "(uint)Helpers.BitCount(leftOp[i])"}),
        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_PopCount_ulong_double",                                                                           ["Method"] = "PopCount",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                      ["ValidateIterResult"] = "(ulong)Helpers.BitCount(firstOp[i]) != result[i]",  ["GetIterResult"] = "(ulong)Helpers.BitCount(leftOp[i])"}),
        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_PopCount_byte_sbyte",                                                                             ["Method"] = "PopCount",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateIterResult"] = "(byte)Helpers.BitCount(firstOp[i]) != result[i]",   ["GetIterResult"] = "(byte)Helpers.BitCount(leftOp[i])"}),
        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_PopCount_ushort_short",                                                                           ["Method"] = "PopCount",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateIterResult"] = "(ushort)Helpers.BitCount(firstOp[i]) != result[i]", ["GetIterResult"] = "(ushort)Helpers.BitCount(leftOp[i])"}),
        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_PopCount_uint_int",                                                                               ["Method"] = "PopCount",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateIterResult"] = "(uint)Helpers.BitCount(firstOp[i]) != result[i]",   ["GetIterResult"] = "(uint)Helpers.BitCount(leftOp[i])"}),
        ("SveMasklessSimpleVecOpTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_PopCount_ulong_long",                                                                             ["Method"] = "PopCount",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateIterResult"] = "(ulong)Helpers.BitCount(firstOp[i]) != result[i]",  ["GetIterResult"] = "(ulong)Helpers.BitCount(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_PopCount_byte",                                                                                   ["Method"] = "PopCount",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                        ["ValidateIterResult"] = "Helpers.BitCount(firstOp[i]) != result[i]",         ["GetIterResult"] = "Helpers.BitCount(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_PopCount_ushort",                                                                                 ["Method"] = "PopCount",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.BitCount(firstOp[i]) != result[i]",         ["GetIterResult"] = "Helpers.BitCount(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_PopCount_uint",                                                                                   ["Method"] = "PopCount",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.BitCount(firstOp[i]) != result[i]",         ["GetIterResult"] = "Helpers.BitCount(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_PopCount_ulong",                                                                                  ["Method"] = "PopCount",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateIterResult"] = "Helpers.BitCount(firstOp[i]) != result[i]",         ["GetIterResult"] = "Helpers.BitCount(leftOp[i])"}),
        ("SvePrefetchTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Prefetch16Bit",                                                                                      ["Method"] = "Prefetch16Bit",                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                        ["LargestVectorSize"] = "64", ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()", ["ValidPrefetch"] = "SvePrefetchType.LoadL2NonTemporal",  ["InvalidPrefetch"] = "(SvePrefetchType)18"}),
        ("SvePrefetchTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Prefetch32Bit",                                                                                      ["Method"] = "Prefetch32Bit",                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                        ["LargestVectorSize"] = "64", ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()", ["ValidPrefetch"] = "SvePrefetchType.StoreL3Temporal",    ["InvalidPrefetch"] = "(SvePrefetchType)20"}),
        ("SvePrefetchTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Prefetch64Bit",                                                                                      ["Method"] = "Prefetch64Bit",                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                        ["LargestVectorSize"] = "64", ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()", ["ValidPrefetch"] = "SvePrefetchType.StoreL1NonTemporal", ["InvalidPrefetch"] = "(SvePrefetchType)87"}),
        ("SvePrefetchTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Prefetch8Bit",                                                                                      ["Method"] = "Prefetch8Bit",                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                          ["LargestVectorSize"] = "64", ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",   ["ValidPrefetch"] = "SvePrefetchType.LoadL1Temporal",     ["InvalidPrefetch"] = "(SvePrefetchType)100"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseBits_byte",                                                                                  ["Method"] = "ReverseBits",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.ReverseElementBits(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElementBits(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseBits_short",                                                                                 ["Method"] = "ReverseBits",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReverseElementBits(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElementBits(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseBits_int",                                                                                   ["Method"] = "ReverseBits",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReverseElementBits(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElementBits(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseBits_long",                                                                                  ["Method"] = "ReverseBits",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReverseElementBits(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElementBits(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseBits_sbyte",                                                                                 ["Method"] = "ReverseBits",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReverseElementBits(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElementBits(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseBits_ushort",                                                                                ["Method"] = "ReverseBits",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                      ["ValidateIterResult"] = "result[i] != Helpers.ReverseElementBits(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElementBits(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseBits_uint",                                                                                  ["Method"] = "ReverseBits",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateIterResult"] = "result[i] != Helpers.ReverseElementBits(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElementBits(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseBits_ulong",                                                                                 ["Method"] = "ReverseBits",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateIterResult"] = "result[i] != Helpers.ReverseElementBits(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElementBits(leftOp[i])"}),

        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy16BitElementCount_int",                                                         ["Method"] = "SaturatingDecrementBy16BitElementCount",                                                                ["RetBaseType"] = "Int32",                                    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["Imm"] = "(Byte)2",  ["Imm2"] = "SveMaskPattern.LargestPowerOf2",    ["InvalidImm"] = "(Byte)0",   ["InvalidImm2"] = "(SveMaskPattern)35",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((int)data, (int)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy16BitElementCount_long",                                                        ["Method"] = "SaturatingDecrementBy16BitElementCount",                                                                ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["Imm"] = "(Byte)12", ["Imm2"] = "SveMaskPattern.VectorCount1",       ["InvalidImm"] = "(Byte)19",  ["InvalidImm2"] = "(SveMaskPattern)37",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((long)data, (long)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy16BitElementCount_uint",                                                        ["Method"] = "SaturatingDecrementBy16BitElementCount",                                                                ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["Imm"] = "(Byte)5",  ["Imm2"] = "SveMaskPattern.VectorCount2",       ["InvalidImm"] = "(Byte)25",  ["InvalidImm2"] = "(SveMaskPattern)46",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((uint)data, (uint)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy16BitElementCount_ulong",                                                       ["Method"] = "SaturatingDecrementBy16BitElementCount",                                                                ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["Imm"] = "(Byte)7",  ["Imm2"] = "SveMaskPattern.VectorCount3",       ["InvalidImm"] = "(Byte)255", ["InvalidImm2"] = "(SveMaskPattern)50",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((ulong)data, (ulong)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2))));",}),
        ("SveVecImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy16BitElementCount_vector_short",                                                ["Method"] = "SaturatingDecrementBy16BitElementCount",                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["Imm"] = "(Byte)10", ["Imm2"] = "SveMaskPattern.VectorCount4",       ["InvalidImm"] = "(Byte)65",  ["InvalidImm2"] = "(SveMaskPattern)90",  ["ValidateIterResult"] = "result[i] != Helpers.SubtractSaturate((short)firstOp[i], (short)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2)))",}),
        ("SveVecImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy16BitElementCount_vector_ushort",                                               ["Method"] = "SaturatingDecrementBy16BitElementCount",                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["Imm"] = "(Byte)1",  ["Imm2"] = "SveMaskPattern.VectorCount5",       ["InvalidImm"] = "(Byte)72",  ["InvalidImm2"] = "(SveMaskPattern)35",  ["ValidateIterResult"] = "result[i] != Helpers.SubtractSaturate((ushort)firstOp[i], (ushort)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2)))",}),

        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy32BitElementCount_int",                                                         ["Method"] = "SaturatingDecrementBy32BitElementCount",                                                                ["RetBaseType"] = "Int32",                                    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["Imm"] = "(Byte)1",  ["Imm2"] = "SveMaskPattern.VectorCount6",       ["InvalidImm"] = "(Byte)17",  ["InvalidImm2"] = "(SveMaskPattern)32",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((int)data, (int)(imm1 * Helpers.NumberOfElementsInVectorInt32(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy32BitElementCount_long",                                                        ["Method"] = "SaturatingDecrementBy32BitElementCount",                                                                ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["Imm"] = "(Byte)2",  ["Imm2"] = "SveMaskPattern.VectorCount7",       ["InvalidImm"] = "(Byte)19",  ["InvalidImm2"] = "(SveMaskPattern)33",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((long)data, (long)(imm1 * Helpers.NumberOfElementsInVectorInt32(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy32BitElementCount_uint",                                                        ["Method"] = "SaturatingDecrementBy32BitElementCount",                                                                ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["Imm"] = "(Byte)3",  ["Imm2"] = "SveMaskPattern.VectorCount8",       ["InvalidImm"] = "(Byte)25",  ["InvalidImm2"] = "(SveMaskPattern)34",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((uint)data, (uint)(imm1 * Helpers.NumberOfElementsInVectorInt32(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy32BitElementCount_ulong",                                                       ["Method"] = "SaturatingDecrementBy32BitElementCount",                                                                ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["Imm"] = "(Byte)4",  ["Imm2"] = "SveMaskPattern.VectorCount32",      ["InvalidImm"] = "(Byte)26",  ["InvalidImm2"] = "(SveMaskPattern)35",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((ulong)data, (ulong)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2))));",}),
        ("SveVecImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy32BitElementCount_vector_int",                                                  ["Method"] = "SaturatingDecrementBy32BitElementCount",                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["Imm"] = "(Byte)5",  ["Imm2"] = "SveMaskPattern.VectorCount64",      ["InvalidImm"] = "(Byte)27",  ["InvalidImm2"] = "(SveMaskPattern)36",  ["ValidateIterResult"] = "result[i] != Helpers.SubtractSaturate((int)firstOp[i], (int)(imm1 * Helpers.NumberOfElementsInVectorInt32(imm2)))",}),
        ("SveVecImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy32BitElementCount_vector_uint",                                                 ["Method"] = "SaturatingDecrementBy32BitElementCount",                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["Imm"] = "(Byte)6",  ["Imm2"] = "SveMaskPattern.VectorCount128",     ["InvalidImm"] = "(Byte)18",  ["InvalidImm2"] = "(SveMaskPattern)37",  ["ValidateIterResult"] = "result[i] != Helpers.SubtractSaturate((uint)firstOp[i], (uint)(imm1 * Helpers.NumberOfElementsInVectorInt32(imm2)))",}),

        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy64BitElementCount_int",                                                         ["Method"] = "SaturatingDecrementBy64BitElementCount",                                                                ["RetBaseType"] = "Int32",                                    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["Imm"] = "(Byte)7",  ["Imm2"] = "SveMaskPattern.VectorCount256",     ["InvalidImm"] = "(Byte)34",  ["InvalidImm2"] = "(SveMaskPattern)135", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((int)data, (int)(imm1 * Helpers.NumberOfElementsInVectorInt64(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy64BitElementCount_long",                                                        ["Method"] = "SaturatingDecrementBy64BitElementCount",                                                                ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["Imm"] = "(Byte)8",  ["Imm2"] = "SveMaskPattern.LargestMultipleOf4", ["InvalidImm"] = "(Byte)35",  ["InvalidImm2"] = "(SveMaskPattern)125", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((long)data, (long)(imm1 * Helpers.NumberOfElementsInVectorInt64(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy64BitElementCount_uint",                                                        ["Method"] = "SaturatingDecrementBy64BitElementCount",                                                                ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["Imm"] = "(Byte)9",  ["Imm2"] = "SveMaskPattern.LargestMultipleOf3", ["InvalidImm"] = "(Byte)36",  ["InvalidImm2"] = "(SveMaskPattern)115", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((uint)data, (uint)(imm1 * Helpers.NumberOfElementsInVectorInt64(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy64BitElementCount_ulong",                                                       ["Method"] = "SaturatingDecrementBy64BitElementCount",                                                                ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["Imm"] = "(Byte)10", ["Imm2"] = "SveMaskPattern.All",                ["InvalidImm"] = "(Byte)37",  ["InvalidImm2"] = "(SveMaskPattern)145", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((ulong)data, (ulong)(imm1 * Helpers.NumberOfElementsInVectorInt64(imm2))));",}),
        ("SveVecImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy64BitElementCount_vector_long",                                                 ["Method"] = "SaturatingDecrementBy64BitElementCount",                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["Imm"] = "(Byte)11", ["Imm2"] = "SveMaskPattern.VectorCount7",       ["InvalidImm"] = "(Byte)38",  ["InvalidImm2"] = "(SveMaskPattern)155", ["ValidateIterResult"] = "result[i] != Helpers.SubtractSaturate((long)firstOp[i], (long)(imm1 * Helpers.NumberOfElementsInVectorInt64(imm2)))",}),
        ("SveVecImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy64BitElementCount_vector_ulong",                                                ["Method"] = "SaturatingDecrementBy64BitElementCount",                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["Imm"] = "(Byte)12", ["Imm2"] = "SveMaskPattern.LargestPowerOf2",    ["InvalidImm"] = "(Byte)39",  ["InvalidImm2"] = "(SveMaskPattern)165", ["ValidateIterResult"] = "result[i] != Helpers.SubtractSaturate((ulong)firstOp[i], (ulong)(imm1 * Helpers.NumberOfElementsInVectorInt64(imm2)))",}),

        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy8BitElementCount_int",                                                          ["Method"] = "SaturatingDecrementBy8BitElementCount",                                                                 ["RetBaseType"] = "Int32",                                    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["Imm"] = "(Byte)13", ["Imm2"] = "SveMaskPattern.VectorCount4",       ["InvalidImm"] = "(Byte)89",  ["InvalidImm2"] = "(SveMaskPattern)206", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((int)data, (int)(imm1 * Helpers.NumberOfElementsInVectorInt8(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy8BitElementCount_long",                                                         ["Method"] = "SaturatingDecrementBy8BitElementCount",                                                                 ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["Imm"] = "(Byte)14", ["Imm2"] = "SveMaskPattern.LargestPowerOf2",    ["InvalidImm"] = "(Byte)0",   ["InvalidImm2"] = "(SveMaskPattern)207", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((long)data, (long)(imm1 * Helpers.NumberOfElementsInVectorInt8(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy8BitElementCount_uint",                                                         ["Method"] = "SaturatingDecrementBy8BitElementCount",                                                                 ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["Imm"] = "(Byte)15", ["Imm2"] = "SveMaskPattern.VectorCount6",       ["InvalidImm"] = "(Byte)91",  ["InvalidImm2"] = "(SveMaskPattern)208", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((uint)data, (uint)(imm1 * Helpers.NumberOfElementsInVectorInt8(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementBy8BitElementCount_ulong",                                                        ["Method"] = "SaturatingDecrementBy8BitElementCount",                                                                 ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["Imm"] = "(Byte)16", ["Imm2"] = "SveMaskPattern.All",                ["InvalidImm"] = "(Byte)92",  ["InvalidImm2"] = "(SveMaskPattern)209", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.SubtractSaturate((ulong)data, (ulong)(imm1 * Helpers.NumberOfElementsInVectorInt8(imm2))));",}),

        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_int_byte",                                           ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                         ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (int)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_int_ushort",                                         ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (int)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_int_uint",                                           ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (int)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_int_ulong",                                          ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (int)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_long_byte",                                          ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                         ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (long)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_long_ushort",                                        ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (long)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_long_uint",                                          ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (long)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_long_ulong",                                         ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (long)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_uint_byte",                                          ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                         ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (uint)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_uint_ushort",                                        ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (uint)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_uint_uint",                                          ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (uint)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_uint_ulong",                                         ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (uint)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_ulong_byte",                                         ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                         ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (ulong)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_ulong_ushort",                                       ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (ulong)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_ulong_uint",                                         ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (ulong)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_ulong_ulong",                                        ["Method"] = "SaturatingDecrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.SubtractSaturate(left, (ulong)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveMasklessVecBinOpTest.template",  new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_vector_short",                                               ["Method"] = "SaturatingDecrementByActiveElementCount",                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                                        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "Helpers.getMaskInt16()",                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.SubtractSaturate(left[i], (short)Helpers.NumberOfActiveElementsInMask(right))",          ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], Helpers.NumberOfActiveElementsInMask(right))"}),
        ("SveMasklessVecBinOpTest.template",  new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_vector_int",                                                 ["Method"] = "SaturatingDecrementByActiveElementCount",                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                                        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "Helpers.getMaskInt32()",                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.SubtractSaturate(left[i], (int)Helpers.NumberOfActiveElementsInMask(right))",          ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], Helpers.NumberOfActiveElementsInMask(right))"}),
        ("SveMasklessVecBinOpTest.template",  new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_vector_long",                                                ["Method"] = "SaturatingDecrementByActiveElementCount",                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                                        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "Helpers.getMaskInt64()",                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.SubtractSaturate(left[i], (long)Helpers.NumberOfActiveElementsInMask(right))",          ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], Helpers.NumberOfActiveElementsInMask(right))"}),
        ("SveMasklessVecBinOpTest.template",  new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_vector_ushort",                                              ["Method"] = "SaturatingDecrementByActiveElementCount",                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.SubtractSaturate(left[i], (ushort)Helpers.NumberOfActiveElementsInMask(right))",          ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], Helpers.NumberOfActiveElementsInMask(right))"}),
        ("SveMasklessVecBinOpTest.template",  new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_vector_uint",                                                ["Method"] = "SaturatingDecrementByActiveElementCount",                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.SubtractSaturate(left[i], (uint)Helpers.NumberOfActiveElementsInMask(right))",          ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], Helpers.NumberOfActiveElementsInMask(right))"}),
        ("SveMasklessVecBinOpTest.template",  new Dictionary<string, string> {["TestName"] = "Sve_SaturatingDecrementByActiveElementCount_vector_ulong",                                               ["Method"] = "SaturatingDecrementByActiveElementCount",                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.SubtractSaturate(left[i], (ulong)(Helpers.NumberOfActiveElementsInMask(right)))", ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], (ulong)(Helpers.NumberOfActiveElementsInMask(right)))"}),

        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy16BitElementCount_int",                                                         ["Method"] = "SaturatingIncrementBy16BitElementCount",                                                                ["RetBaseType"] = "Int32",                                    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["Imm"] = "(Byte)15", ["Imm2"] = "SveMaskPattern.VectorCount4",       ["InvalidImm"] = "(Byte)98",  ["InvalidImm2"] = "(SveMaskPattern)241", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((int)data, (int)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy16BitElementCount_long",                                                        ["Method"] = "SaturatingIncrementBy16BitElementCount",                                                                ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["Imm"] = "(Byte)14", ["Imm2"] = "SveMaskPattern.All",                ["InvalidImm"] = "(Byte)99",  ["InvalidImm2"] = "(SveMaskPattern)242", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((long)data, (long)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy16BitElementCount_uint",                                                        ["Method"] = "SaturatingIncrementBy16BitElementCount",                                                                ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["Imm"] = "(Byte)13", ["Imm2"] = "SveMaskPattern.VectorCount256",     ["InvalidImm"] = "(Byte)101", ["InvalidImm2"] = "(SveMaskPattern)243", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((uint)data, (uint)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy16BitElementCount_ulong",                                                       ["Method"] = "SaturatingIncrementBy16BitElementCount",                                                                ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["Imm"] = "(Byte)12", ["Imm2"] = "SveMaskPattern.VectorCount32",      ["InvalidImm"] = "(Byte)118", ["InvalidImm2"] = "(SveMaskPattern)50",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((ulong)data, (ulong)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2))));",}),
        ("SveVecImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy16BitElementCount_vector_short",                                                ["Method"] = "SaturatingIncrementBy16BitElementCount",                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["Imm"] = "(Byte)11", ["Imm2"] = "SveMaskPattern.VectorCount4",       ["InvalidImm"] = "(Byte)118", ["InvalidImm2"] = "(SveMaskPattern)60",  ["ValidateIterResult"] = "result[i] != Helpers.AddSaturate((short)firstOp[i], (short)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2)))",}),
        ("SveVecImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy16BitElementCount_vector_ushort",                                               ["Method"] = "SaturatingIncrementBy16BitElementCount",                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["Imm"] = "(Byte)10", ["Imm2"] = "SveMaskPattern.VectorCount64",      ["InvalidImm"] = "(Byte)123", ["InvalidImm2"] = "(SveMaskPattern)70",  ["ValidateIterResult"] = "result[i] != Helpers.AddSaturate((ushort)firstOp[i], (ushort)(imm1 * Helpers.NumberOfElementsInVectorInt16(imm2)))",}),

        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy32BitElementCount_int",                                                         ["Method"] = "SaturatingIncrementBy32BitElementCount",                                                                ["RetBaseType"] = "Int32",                                    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["Imm"] = "(Byte)9",  ["Imm2"] = "SveMaskPattern.VectorCount5",       ["InvalidImm"] = "(Byte)201", ["InvalidImm2"] = "(SveMaskPattern)80",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((int)data, (int)(imm1 * Helpers.NumberOfElementsInVectorInt32(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy32BitElementCount_long",                                                        ["Method"] = "SaturatingIncrementBy32BitElementCount",                                                                ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["Imm"] = "(Byte)8",  ["Imm2"] = "SveMaskPattern.All",                ["InvalidImm"] = "(Byte)202", ["InvalidImm2"] = "(SveMaskPattern)128",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((long)data, (long)(imm1 * Helpers.NumberOfElementsInVectorInt32(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy32BitElementCount_uint",                                                        ["Method"] = "SaturatingIncrementBy32BitElementCount",                                                                ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["Imm"] = "(Byte)7",  ["Imm2"] = "SveMaskPattern.LargestPowerOf2",    ["InvalidImm"] = "(Byte)207", ["InvalidImm2"] = "(SveMaskPattern)255",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((uint)data, (uint)(imm1 * Helpers.NumberOfElementsInVectorInt32(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy32BitElementCount_ulong",                                                       ["Method"] = "SaturatingIncrementBy32BitElementCount",                                                                ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["Imm"] = "(Byte)6",  ["Imm2"] = "SveMaskPattern.All",                ["InvalidImm"] = "(Byte)220", ["InvalidImm2"] = "(SveMaskPattern)99",  ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((ulong)data, (ulong)(imm1 * Helpers.NumberOfElementsInVectorInt32(imm2))));",}),
        ("SveVecImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy32BitElementCount_vector_int",                                                  ["Method"] = "SaturatingIncrementBy32BitElementCount",                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["Imm"] = "(Byte)5",  ["Imm2"] = "SveMaskPattern.LargestMultipleOf4", ["InvalidImm"] = "(Byte)221", ["InvalidImm2"] = "(SveMaskPattern)76",  ["ValidateIterResult"] = "result[i] != Helpers.AddSaturate((int)firstOp[i], (int)(imm1 * Helpers.NumberOfElementsInVectorInt32(imm2)))",}),
        ("SveVecImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy32BitElementCount_vector_uint",                                                 ["Method"] = "SaturatingIncrementBy32BitElementCount",                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["Imm"] = "(Byte)4",  ["Imm2"] = "SveMaskPattern.LargestMultipleOf3", ["InvalidImm"] = "(Byte)240", ["InvalidImm2"] = "(SveMaskPattern)32",  ["ValidateIterResult"] = "result[i] != Helpers.AddSaturate((uint)firstOp[i], (uint)(imm1 * Helpers.NumberOfElementsInVectorInt32(imm2)))",}),

        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy64BitElementCount_int",                                                         ["Method"] = "SaturatingIncrementBy64BitElementCount",                                                                ["RetBaseType"] = "Int32",                                    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["Imm"] = "(Byte)3",  ["Imm2"] = "SveMaskPattern.VectorCount64",      ["InvalidImm"] = "(Byte)241", ["InvalidImm2"] = "(SveMaskPattern)105", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((int)data, (int)(imm1 * Helpers.NumberOfElementsInVectorInt64(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy64BitElementCount_long",                                                        ["Method"] = "SaturatingIncrementBy64BitElementCount",                                                                ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["Imm"] = "(Byte)2",  ["Imm2"] = "SveMaskPattern.VectorCount4",       ["InvalidImm"] = "(Byte)255", ["InvalidImm2"] = "(SveMaskPattern)108", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((long)data, (long)(imm1 * Helpers.NumberOfElementsInVectorInt64(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy64BitElementCount_uint",                                                        ["Method"] = "SaturatingIncrementBy64BitElementCount",                                                                ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["Imm"] = "(Byte)1",  ["Imm2"] = "SveMaskPattern.VectorCount6",       ["InvalidImm"] = "(Byte)243", ["InvalidImm2"] = "(SveMaskPattern)109", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((uint)data, (uint)(imm1 * Helpers.NumberOfElementsInVectorInt64(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy64BitElementCount_ulong",                                                       ["Method"] = "SaturatingIncrementBy64BitElementCount",                                                                ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["Imm"] = "(Byte)2",  ["Imm2"] = "SveMaskPattern.LargestMultipleOf3", ["InvalidImm"] = "(Byte)19",  ["InvalidImm2"] = "(SveMaskPattern)101", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((ulong)data, (ulong)(imm1 * Helpers.NumberOfElementsInVectorInt64(imm2))));",}),
        ("SveVecImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy64BitElementCount_vector_long",                                                 ["Method"] = "SaturatingIncrementBy64BitElementCount",                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["Imm"] = "(Byte)2",  ["Imm2"] = "SveMaskPattern.LargestPowerOf2",    ["InvalidImm"] = "(Byte)56",  ["InvalidImm2"] = "(SveMaskPattern)109", ["ValidateIterResult"] = "result[i] != Helpers.AddSaturate((long)firstOp[i], (long)(imm1 * Helpers.NumberOfElementsInVectorInt64(imm2)))",}),
        ("SveVecImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy64BitElementCount_vector_ulong",                                                ["Method"] = "SaturatingIncrementBy64BitElementCount",                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["Imm"] = "(Byte)2",  ["Imm2"] = "SveMaskPattern.VectorCount8",       ["InvalidImm"] = "(Byte)75",  ["InvalidImm2"] = "(SveMaskPattern)154", ["ValidateIterResult"] = "result[i] != Helpers.AddSaturate((ulong)firstOp[i], (ulong)(imm1 * Helpers.NumberOfElementsInVectorInt64(imm2)))",}),

        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy8BitElementCount_int",                                                          ["Method"] = "SaturatingIncrementBy8BitElementCount",                                                                 ["RetBaseType"] = "Int32",                                    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["Imm"] = "(Byte)2",  ["Imm2"] = "SveMaskPattern.VectorCount8",       ["InvalidImm"] = "(Byte)100", ["InvalidImm2"] = "(SveMaskPattern)235", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((int)data, (int)(imm1 * Helpers.NumberOfElementsInVectorInt8(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy8BitElementCount_long",                                                         ["Method"] = "SaturatingIncrementBy8BitElementCount",                                                                 ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["Imm"] = "(Byte)2",  ["Imm2"] = "SveMaskPattern.VectorCount4",       ["InvalidImm"] = "(Byte)99",  ["InvalidImm2"] = "(SveMaskPattern)123", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((long)data, (long)(imm1 * Helpers.NumberOfElementsInVectorInt8(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy8BitElementCount_uint",                                                         ["Method"] = "SaturatingIncrementBy8BitElementCount",                                                                 ["RetBaseType"] = "UInt32",                                   ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["Imm"] = "(Byte)2",  ["Imm2"] = "SveMaskPattern.VectorCount5",       ["InvalidImm"] = "(Byte)98",  ["InvalidImm2"] = "(SveMaskPattern)232", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((uint)data, (uint)(imm1 * Helpers.NumberOfElementsInVectorInt8(imm2))));",}),
        ("ScalarImm2UnOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementBy8BitElementCount_ulong",                                                        ["Method"] = "SaturatingIncrementBy8BitElementCount",                                                                 ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",                                    ["Op3BaseType"] = "SveMaskPattern", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["Imm"] = "(Byte)2",  ["Imm2"] = "SveMaskPattern.All",                ["InvalidImm"] = "(Byte)97",  ["InvalidImm2"] = "(SveMaskPattern)234", ["ValidateResult"] = "isUnexpectedResult = (result != Helpers.AddSaturate((ulong)data, (ulong)(imm1 * Helpers.NumberOfElementsInVectorInt8(imm2))));",}),

        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_int_byte",                                           ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                         ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (int)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_int_ushort",                                         ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (int)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_int_uint",                                           ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (int)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_int_ulong",                                          ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (int)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_long_byte",                                          ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                         ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (long)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_long_ushort",                                        ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (long)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_long_uint",                                          ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (long)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_long_ulong",                                         ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "Int64",                                    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (long)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_uint_byte",                                          ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                         ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (uint)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_uint_ushort",                                        ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (uint)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_uint_uint",                                          ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (uint)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_uint_ulong",                                         ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (uint)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_ulong_byte",                                         ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "Helpers.getMaskByte()",                                                                                         ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (ulong)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_ulong_ushort",                                       ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (ulong)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_ulong_uint",                                         ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (ulong)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveSaturatingByActiveElementCount.template",new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_ulong_ulong",                                        ["Method"] = "SaturatingIncrementByActiveElementCount",                                                               ["RetBaseType"] = "UInt64",                                   ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                       ["ValidateResult"] = "succeeded = (result == Helpers.AddSaturate(left, (ulong)Helpers.NumberOfActiveElementsInMask(right)));",}),
        ("SveMasklessVecBinOpTest.template",  new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_vector_short",                                               ["Method"] = "SaturatingIncrementByActiveElementCount",                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                                        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "Helpers.getMaskInt16()",                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.AddSaturate(left[i], (short)Helpers.NumberOfActiveElementsInMask(right))",          ["GetIterResult"] = "Helpers.AddSaturate(left[i], Helpers.NumberOfActiveElementsInMask(right))"}),
        ("SveMasklessVecBinOpTest.template",  new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_vector_int",                                                 ["Method"] = "SaturatingIncrementByActiveElementCount",                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                                        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "Helpers.getMaskInt32()",                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.AddSaturate(left[i], (int)Helpers.NumberOfActiveElementsInMask(right))",          ["GetIterResult"] = "Helpers.AddSaturate(left[i], Helpers.NumberOfActiveElementsInMask(right))"}),
        ("SveMasklessVecBinOpTest.template",  new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_vector_long",                                                ["Method"] = "SaturatingIncrementByActiveElementCount",                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                                        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "Helpers.getMaskInt64()",                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.AddSaturate(left[i], (long)Helpers.NumberOfActiveElementsInMask(right))",          ["GetIterResult"] = "Helpers.AddSaturate(left[i], Helpers.NumberOfActiveElementsInMask(right))"}),
        ("SveMasklessVecBinOpTest.template",  new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_vector_ushort",                                              ["Method"] = "SaturatingIncrementByActiveElementCount",                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "Helpers.getMaskUInt16()",                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.AddSaturate(left[i], (ushort)Helpers.NumberOfActiveElementsInMask(right))",          ["GetIterResult"] = "Helpers.AddSaturate(left[i], Helpers.NumberOfActiveElementsInMask(right))"}),
        ("SveMasklessVecBinOpTest.template",  new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_vector_uint",                                                ["Method"] = "SaturatingIncrementByActiveElementCount",                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "Helpers.getMaskUInt32()",                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.AddSaturate(left[i], (uint)Helpers.NumberOfActiveElementsInMask(right))",          ["GetIterResult"] = "Helpers.AddSaturate(left[i], Helpers.NumberOfActiveElementsInMask(right))"}),
        ("SveMasklessVecBinOpTest.template",  new Dictionary<string, string> {["TestName"] = "Sve_SaturatingIncrementByActiveElementCount_vector_ulong",                                               ["Method"] = "SaturatingIncrementByActiveElementCount",                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "Helpers.getMaskUInt64()",                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.AddSaturate(left[i], (ulong)(Helpers.NumberOfActiveElementsInMask(right)))", ["GetIterResult"] = "Helpers.AddSaturate(left[i], (ulong)(Helpers.NumberOfActiveElementsInMask(right)))"}),

        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_Scale_float_int",                                                                                 ["Method"] = "Scale",                                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                                        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                              ["ValidateEntry"] = "result[i] != Helpers.Scale(left[i], right[i])"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_Scale_double_long",                                                                               ["Method"] = "Scale",                                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                                        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                              ["ValidateEntry"] = "result[i] != Helpers.Scale(left[i], right[i])"}),

        ("SveScatterVectorBases.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_bases_double_ulong",                                                                   ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["NarrowingType"] = "Double",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()"}),
        ("SveScatterVectorBases.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_bases_long_ulong",                                                                     ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["NarrowingType"] = "Int64",         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorBases.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_bases_ulong_ulong",                                                                    ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["NarrowingType"] = "UInt64",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_indices_double_long",                                                                  ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetDouble()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_indices_double_ulong",                                                                 ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetDouble()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_indices_int_int",                                                                      ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int32",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",  ["NextValueOp4"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_indices_int_uint",                                                                     ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt32",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp4"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_indices_long_long",                                                                    ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_indices_long_ulong",                                                                   ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_indices_float_int",                                                                    ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int32",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",  ["NextValueOp4"] = "TestLibrary.Generator.GetSingle()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_indices_float_uint",                                                                   ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt32",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp4"] = "TestLibrary.Generator.GetSingle()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_indices_uint_int",                                                                     ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int32",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",  ["NextValueOp4"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_indices_uint_uint",                                                                    ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt32",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp4"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_indices_ulong_long",                                                                   ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter_indices_ulong_ulong",                                                                  ["Method"] = "Scatter",                                                                                                                            ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),

        // ("SveScatterVectorBases.template",      new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitNarrowing_int_uint",                                                               ["Method"] = "Scatter16BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                  ["NarrowingType"] = "Int16",         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",                   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveScatterVectorBases.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitNarrowing_long_ulong",                                                             ["Method"] = "Scatter16BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["NarrowingType"] = "Int16",         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        // ("SveScatterVectorBases.template",      new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitNarrowing_uint_uint",                                                              ["Method"] = "Scatter16BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                  ["NarrowingType"] = "UInt16",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",                  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveScatterVectorBases.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitNarrowing_ulong_ulong",                                                            ["Method"] = "Scatter16BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["NarrowingType"] = "UInt16",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitNarrowing_indices_int_int",                                                        ["Method"] = "Scatter16BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int32",           ["Op4VectorType"] = "Vector",    ["Op4BaseType"] = "Int32",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",  ["NextValueOp4"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitNarrowing_indices_int_uint",                                                       ["Method"] = "Scatter16BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt32",          ["Op4VectorType"] = "Vector",    ["Op4BaseType"] = "Int32",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp4"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitNarrowing_indices_long_long",                                                      ["Method"] = "Scatter16BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["Op4VectorType"] = "Vector",    ["Op4BaseType"] = "Int64",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitNarrowing_indices_long_ulong",                                                     ["Method"] = "Scatter16BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["Op4VectorType"] = "Vector",    ["Op4BaseType"] = "Int64",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitNarrowing_indices_uint_int",                                                       ["Method"] = "Scatter16BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int32",           ["Op4VectorType"] = "Vector",    ["Op4BaseType"] = "UInt32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",  ["NextValueOp4"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitNarrowing_indices_uint_uint",                                                      ["Method"] = "Scatter16BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt32",          ["Op4VectorType"] = "Vector",    ["Op4BaseType"] = "UInt32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp4"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitNarrowing_indices_ulong_long",                                                     ["Method"] = "Scatter16BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["Op4VectorType"] = "Vector",    ["Op4BaseType"] = "UInt64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitNarrowing_indices_ulong_ulong",                                                    ["Method"] = "Scatter16BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["Op4VectorType"] = "Vector",    ["Op4BaseType"] = "UInt64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitWithByteOffsets_int_int",                                                          ["Method"] = "Scatter16BitWithByteOffsetsNarrowing",                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int32",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",  ["NextValueOp4"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitWithByteOffsets_int_uint",                                                         ["Method"] = "Scatter16BitWithByteOffsetsNarrowing",                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int16",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt32",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp4"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitWithByteOffsets_uint_int",                                                         ["Method"] = "Scatter16BitWithByteOffsetsNarrowing",                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int32",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",  ["NextValueOp4"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitWithByteOffsets_uint_uint",                                                        ["Method"] = "Scatter16BitWithByteOffsetsNarrowing",                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt16",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt32",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp4"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitWithByteOffsets_long_long",                                                        ["Method"] = "Scatter16BitWithByteOffsetsNarrowing",                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitWithByteOffsets_long_ulong",                                                       ["Method"] = "Scatter16BitWithByteOffsetsNarrowing",                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int16",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitWithByteOffsets_ulong_long",                                                       ["Method"] = "Scatter16BitWithByteOffsetsNarrowing",                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter16BitWithByteOffsets_ulong_ulong",                                                      ["Method"] = "Scatter16BitWithByteOffsetsNarrowing",                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt16",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveScatterVectorBases.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Scatter32BitNarrowing_long_ulong",                                                             ["Method"] = "Scatter32BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["NarrowingType"] = "Int32",         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorBases.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Scatter32BitNarrowing_ulong_ulong",                                                            ["Method"] = "Scatter32BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["NarrowingType"] = "UInt32",        ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter32BitNarrowing_indices_long_long",                                                      ["Method"] = "Scatter32BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["Op4VectorType"] = "Vector",    ["Op4BaseType"] = "Int64",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter32BitNarrowing_indices_long_ulong",                                                     ["Method"] = "Scatter32BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["Op4VectorType"] = "Vector",    ["Op4BaseType"] = "Int64",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter32BitNarrowing_indices_ulong_long",                                                     ["Method"] = "Scatter32BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["Op4VectorType"] = "Vector",    ["Op4BaseType"] = "UInt64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter32BitNarrowing_indices_ulong_ulong",                                                    ["Method"] = "Scatter32BitNarrowing",                                                                                                              ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["Op4VectorType"] = "Vector",    ["Op4BaseType"] = "UInt64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter32BitWithByteOffsets_long_long",                                                        ["Method"] = "Scatter32BitWithByteOffsetsNarrowing",                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter32BitWithByteOffsets_long_ulong",                                                       ["Method"] = "Scatter32BitWithByteOffsetsNarrowing",                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int32",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter32BitWithByteOffsets_ulong_long",                                                       ["Method"] = "Scatter32BitWithByteOffsetsNarrowing",                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter32BitWithByteOffsets_ulong_ulong",                                                      ["Method"] = "Scatter32BitWithByteOffsetsNarrowing",                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt32",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),

        // ("SveScatterVectorBases.template",      new Dictionary<string, string> { ["TestName"] = "Sve_Scatter8BitNarrowing_int_uint",                                                                ["Method"] = "Scatter8BitNarrowing",                                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                  ["NarrowingType"] = "Byte",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",                   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveScatterVectorBases.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Scatter8BitNarrowing_long_ulong",                                                              ["Method"] = "Scatter8BitNarrowing",                                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["NarrowingType"] = "Byte",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()"}),
        // ("SveScatterVectorBases.template",      new Dictionary<string, string> { ["TestName"] = "Sve_Scatter8BitNarrowing_uint_uint",                                                               ["Method"] = "Scatter8BitNarrowing",                                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                  ["NarrowingType"] = "Byte",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",                  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveScatterVectorBases.template",         new Dictionary<string, string> { ["TestName"] = "Sve_Scatter8BitNarrowing_ulong_ulong",                                                             ["Method"] = "Scatter8BitNarrowing",                                                                                                               ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                  ["NarrowingType"] = "Byte",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter8BitWithByteOffsets_int_int",                                                           ["Method"] = "Scatter8BitWithByteOffsetsNarrowing",                                                                                                ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "SByte",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int32",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",  ["NextValueOp4"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter8BitWithByteOffsets_int_uint",                                                          ["Method"] = "Scatter8BitWithByteOffsetsNarrowing",                                                                                                ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "SByte",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt32",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp4"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter8BitWithByteOffsets_uint_int",                                                          ["Method"] = "Scatter8BitWithByteOffsetsNarrowing",                                                                                                ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",     ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int32",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",  ["NextValueOp4"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter8BitWithByteOffsets_uint_uint",                                                         ["Method"] = "Scatter8BitWithByteOffsetsNarrowing",                                                                                                ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "Byte",     ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt32",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp4"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter8BitWithByteOffsets_long_long",                                                         ["Method"] = "Scatter8BitWithByteOffsetsNarrowing",                                                                                                ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "SByte",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter8BitWithByteOffsets_long_ulong",                                                        ["Method"] = "Scatter8BitWithByteOffsetsNarrowing",                                                                                                ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "SByte",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter8BitWithByteOffsets_ulong_long",                                                        ["Method"] = "Scatter8BitWithByteOffsetsNarrowing",                                                                                                ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",     ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_Scatter8BitWithByteOffsets_ulong_ulong",                                                       ["Method"] = "Scatter8BitWithByteOffsetsNarrowing",                                                                                                ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "Byte",     ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ScatterWithByteOffsets_double_long",                                                           ["Method"] = "ScatterWithByteOffsets",                                                                                                             ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetDouble()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ScatterWithByteOffsets_double_ulong",                                                          ["Method"] = "ScatterWithByteOffsets",                                                                                                             ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskDouble()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetDouble()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ScatterWithByteOffsets_int_int",                                                               ["Method"] = "ScatterWithByteOffsets",                                                                                                             ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int32",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",  ["NextValueOp4"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ScatterWithByteOffsets_int_uint",                                                              ["Method"] = "ScatterWithByteOffsets",                                                                                                             ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt32",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt32()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp4"] = "TestLibrary.Generator.GetInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ScatterWithByteOffsets_long_long",                                                             ["Method"] = "ScatterWithByteOffsets",                                                                                                             ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ScatterWithByteOffsets_long_ulong",                                                            ["Method"] = "ScatterWithByteOffsets",                                                                                                             ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",    ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskInt64()",                   ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ScatterWithByteOffsets_float_int",                                                             ["Method"] = "ScatterWithByteOffsets",                                                                                                             ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int32",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",  ["NextValueOp4"] = "TestLibrary.Generator.GetSingle()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ScatterWithByteOffsets_float_uint",                                                            ["Method"] = "ScatterWithByteOffsets",                                                                                                             ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt32",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskSingle()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp4"] = "TestLibrary.Generator.GetSingle()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ScatterWithByteOffsets_uint_int",                                                              ["Method"] = "ScatterWithByteOffsets",                                                                                                             ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int32",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",  ["NextValueOp4"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ScatterWithByteOffsets_uint_uint",                                                             ["Method"] = "ScatterWithByteOffsets",                                                                                                             ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt32",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt32()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()", ["NextValueOp4"] = "TestLibrary.Generator.GetUInt32()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ScatterWithByteOffsets_ulong_long",                                                            ["Method"] = "ScatterWithByteOffsets",                                                                                                             ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "Int64",           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",  ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),
        ("SveScatterVectorOffsets.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ScatterWithByteOffsets_ulong_ulong",                                                           ["Method"] = "ScatterWithByteOffsets",                                                                                                             ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64",   ["Op3VectorType"] = "Vector",  ["Op3BaseType"] = "UInt64",          ["LargestVectorSize"] = "64", ["NextValueOp1"] = "Helpers.getMaskUInt64()",                  ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()", ["NextValueOp4"] = "TestLibrary.Generator.GetUInt64()"}),

        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_sbyte_byte",                                                                  ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                        ["ValidateIterResult"] = "(sbyte)Helpers.ShiftLeft<byte>((byte)left[i], (ulong)right[i]) != result[i]",                                 ["GetIterResult"] = "(sbyte)Helpers.ShiftLeft<byte>((byte)left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_short_ushort",                                                                ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                      ["ValidateIterResult"] = "(short)Helpers.ShiftLeft<ushort>((ushort)left[i], (ulong)right[i]) != result[i]",                             ["GetIterResult"] = "(short)Helpers.ShiftLeft<ushort>((ushort)left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_int_uint",                                                                    ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                      ["ValidateIterResult"] = "(int)Helpers.ShiftLeft<uint>((uint)left[i], (ulong)right[i]) != result[i]",                                   ["GetIterResult"] = "(int)Helpers.ShiftLeft<uint>((uint)left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_long_ulong",                                                                  ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "(long)Helpers.ShiftLeft<ulong>((ulong)left[i], (ulong)right[i]) != result[i]",                                ["GetIterResult"] = "(long)Helpers.ShiftLeft<ulong>((ulong)left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_byte",                                                                        ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                        ["ValidateIterResult"] = "Helpers.ShiftLeft<byte>(left[i], (ulong)right[i]) != result[i]",                                              ["GetIterResult"] = "Helpers.ShiftLeft<byte>(left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_ushort",                                                                      ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                      ["ValidateIterResult"] = "Helpers.ShiftLeft<ushort>(left[i], (ulong)right[i]) != result[i]",                                            ["GetIterResult"] = "Helpers.ShiftLeft<ushort>(left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_uint",                                                                        ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                      ["ValidateIterResult"] = "Helpers.ShiftLeft<uint>(left[i], (ulong)right[i]) != result[i]",                                              ["GetIterResult"] = "Helpers.ShiftLeft<uint>(left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_ulong",                                                                       ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "Helpers.ShiftLeft<ulong>(left[i], right[i]) != result[i]",                                                    ["GetIterResult"] = "Helpers.ShiftLeft<ulong>(left[i], right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_sbyte_ulong",                                                                 ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "(sbyte)Helpers.ShiftLeft<byte>((byte)left[i], right[(i * sizeof(byte)) / sizeof(ulong)]) != result[i]",       ["GetIterResult"] = "(sbyte)Helpers.ShiftLeft<byte>((byte)left[i], right[(i * sizeof(byte)) / sizeof(ulong)])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_short_ulong",                                                                 ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "(short)Helpers.ShiftLeft<ushort>((ushort)left[i], right[(i * sizeof(ushort)) / sizeof(ulong)]) != result[i]", ["GetIterResult"] = "(short)Helpers.ShiftLeft<ushort>((ushort)left[i], right[(i * sizeof(ushort)) / sizeof(ulong)])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_int_ulong",                                                                   ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "(int)Helpers.ShiftLeft<uint>((uint)left[i], right[(i * sizeof(uint)) / sizeof(ulong)]) != result[i]",         ["GetIterResult"] = "(int)Helpers.ShiftLeft<uint>((uint)left[i], right[(i * sizeof(uint)) / sizeof(ulong)])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_byte_ulong",                                                                  ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "Helpers.ShiftLeft<byte>(left[i], right[(i * sizeof(byte)) / sizeof(ulong)]) != result[i]",                    ["GetIterResult"] = "Helpers.ShiftLeft<byte>(left[i], right[(i * sizeof(byte)) / sizeof(ulong)])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_ushort_ulong",                                                                ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "Helpers.ShiftLeft<ushort>(left[i], right[(i * sizeof(ushort)) / sizeof(ulong)]) != result[i]",                ["GetIterResult"] = "Helpers.ShiftLeft<ushort>(left[i], right[(i * sizeof(ushort)) / sizeof(ulong)])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftLeftLogical_uint_ulong",                                                                  ["Method"] = "ShiftLeftLogical",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "Helpers.ShiftLeft<uint>(left[i], right[(i * sizeof(uint)) / sizeof(ulong)]) != result[i]",                    ["GetIterResult"] = "Helpers.ShiftLeft<uint>(left[i], right[(i * sizeof(uint)) / sizeof(ulong)])"}),

        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightArithmetic_sbyte_byte",                                                              ["Method"] = "ShiftRightArithmetic",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                        ["ValidateIterResult"] = "Helpers.ShiftRight<sbyte>(left[i], (ulong)right[i]) != result[i]",                                            ["GetIterResult"] = "Helpers.ShiftRight<sbyte>(left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightArithmetic_short_ushort",                                                            ["Method"] = "ShiftRightArithmetic",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                      ["ValidateIterResult"] = "Helpers.ShiftRight<short>(left[i], (ulong)right[i]) != result[i]",                                            ["GetIterResult"] = "Helpers.ShiftRight<short>(left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightArithmetic_int_uint",                                                                ["Method"] = "ShiftRightArithmetic",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                      ["ValidateIterResult"] = "Helpers.ShiftRight<int>(left[i], (ulong)right[i]) != result[i]",                                              ["GetIterResult"] = "Helpers.ShiftRight<int>(left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightArithmetic_long_ulong",                                                              ["Method"] = "ShiftRightArithmetic",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "Helpers.ShiftRight<long>(left[i], right[i]) != result[i]",                                                    ["GetIterResult"] = "Helpers.ShiftRight<long>(left[i], right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightArithmetic_sbyte_ulong",                                                             ["Method"] = "ShiftRightArithmetic",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "Helpers.ShiftRight<sbyte>(left[i], right[(i * sizeof(sbyte)) / sizeof(ulong)]) != result[i]",                 ["GetIterResult"] = "Helpers.ShiftRight<sbyte>(left[i], right[(i * sizeof(sbyte)) / sizeof(ulong)])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightArithmetic_short_ulong",                                                             ["Method"] = "ShiftRightArithmetic",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "Helpers.ShiftRight<short>(left[i], right[(i * sizeof(short)) / sizeof(ulong)]) != result[i]",                 ["GetIterResult"] = "Helpers.ShiftRight<short>(left[i], right[(i * sizeof(short)) / sizeof(ulong)])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightArithmetic_int_ulong",                                                               ["Method"] = "ShiftRightArithmetic",                                                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "Helpers.ShiftRight<int>(left[i], right[(i * sizeof(int)) / sizeof(ulong)]) != result[i]",                     ["GetIterResult"] = "Helpers.ShiftRight<int>(left[i], right[(i * sizeof(int)) / sizeof(ulong)])"}),

        ("SveVecImmUnOpTest.template",             new Dictionary<string, string> {["TestName"] = "Sve_ShiftRightArithmeticForDivide_sbyte",                                                           ["Method"] = "ShiftRightArithmeticForDivide",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                                     ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["InvalidImm"] = "0", ["Imm"] = "(TestLibrary.Generator.GetByte() % 8) + 1",                                 ["ValidateIterResult"] = "Helpers.ShiftRight<sbyte>(firstOp[i], (ulong)imm) != result[i]",                                              ["GetIterResult"] = "Helpers.ShiftRight<sbyte>(firstOp[i], (ulong)imm)"}),
        ("SveVecImmUnOpTest.template",             new Dictionary<string, string> {["TestName"] = "Sve_ShiftRightArithmeticForDivide_short",                                                           ["Method"] = "ShiftRightArithmeticForDivide",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                                     ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["InvalidImm"] = "0", ["Imm"] = "(TestLibrary.Generator.GetByte() % 16) + 1",                                ["ValidateIterResult"] = "Helpers.ShiftRight<short>(firstOp[i], (ulong)imm) != result[i]",                                              ["GetIterResult"] = "Helpers.ShiftRight<short>(firstOp[i], (ulong)imm)"}),
        ("SveVecImmUnOpTest.template",             new Dictionary<string, string> {["TestName"] = "Sve_ShiftRightArithmeticForDivide_int",                                                             ["Method"] = "ShiftRightArithmeticForDivide",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                                     ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["InvalidImm"] = "0", ["Imm"] = "(TestLibrary.Generator.GetByte() % 32) + 1",                                ["ValidateIterResult"] = "Helpers.ShiftRight<int>(firstOp[i], (ulong)imm) != result[i]",                                                ["GetIterResult"] = "Helpers.ShiftRight<int>(firstOp[i], (ulong)imm)"}),
        ("SveVecImmUnOpTest.template",             new Dictionary<string, string> {["TestName"] = "Sve_ShiftRightArithmeticForDivide_long",                                                            ["Method"] = "ShiftRightArithmeticForDivide",                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                                     ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["InvalidImm"] = "0", ["Imm"] = "(TestLibrary.Generator.GetByte() % 64) + 1",                                ["ValidateIterResult"] = "Helpers.ShiftRight<long>(firstOp[i], (ulong)imm) != result[i]",                                               ["GetIterResult"] = "Helpers.ShiftRight<long>(firstOp[i], (ulong)imm)"}),

        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightLogical_byte",                                                                       ["Method"] = "ShiftRightLogical",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                         ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                        ["ValidateIterResult"] = "Helpers.ShiftRight<byte>(left[i], (ulong)right[i]) != result[i]",                                             ["GetIterResult"] = "Helpers.ShiftRight<byte>(left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightLogical_ushort",                                                                     ["Method"] = "ShiftRightLogical",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                      ["ValidateIterResult"] = "Helpers.ShiftRight<ushort>(left[i], (ulong)right[i]) != result[i]",                                           ["GetIterResult"] = "Helpers.ShiftRight<ushort>(left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightLogical_uint",                                                                       ["Method"] = "ShiftRightLogical",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                      ["ValidateIterResult"] = "Helpers.ShiftRight<uint>(left[i], (ulong)right[i]) != result[i]",                                             ["GetIterResult"] = "Helpers.ShiftRight<uint>(left[i], (ulong)right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightLogical_ulong",                                                                      ["Method"] = "ShiftRightLogical",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "Helpers.ShiftRight<ulong>(left[i], right[i]) != result[i]",                                                   ["GetIterResult"] = "Helpers.ShiftRight<ulong>(left[i], right[i])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightLogical_byte_ulong",                                                                 ["Method"] = "ShiftRightLogical",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "Helpers.ShiftRight<byte>(left[i], right[(i * sizeof(byte)) / sizeof(ulong)]) != result[i]",                   ["GetIterResult"] = "Helpers.ShiftRight<byte>(left[i], right[(i * sizeof(byte)) / sizeof(ulong)])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightLogical_ushort_ulong",                                                               ["Method"] = "ShiftRightLogical",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "Helpers.ShiftRight<ushort>(left[i], right[(i * sizeof(ushort)) / sizeof(ulong)]) != result[i]",               ["GetIterResult"] = "Helpers.ShiftRight<ushort>(left[i], right[(i * sizeof(ushort)) / sizeof(ulong)])"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ShiftRightLogical_uint_ulong",                                                                 ["Method"] = "ShiftRightLogical",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                                       ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                      ["ValidateIterResult"] = "Helpers.ShiftRight<uint>(left[i], right[(i * sizeof(uint)) / sizeof(ulong)]) != result[i]",                   ["GetIterResult"] = "Helpers.ShiftRight<uint>(left[i], right[(i * sizeof(uint)) / sizeof(ulong)])"}),

        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_SignExtend16_int",                                                                                  ["Method"] = "SignExtend16",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                   ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.SignExtend<int>(firstOp[i], 16, false)", ["GetIterResult"] = "Helpers.SignExtend<int>(leftOp[i], 16, false)"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_SignExtend16_long",                                                                                 ["Method"] = "SignExtend16",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                   ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.SignExtend<long>(firstOp[i], 16, false)", ["GetIterResult"] = "Helpers.SignExtend<long>(leftOp[i], 16, false)"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_SignExtend32_long",                                                                                 ["Method"] = "SignExtend32",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                   ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.SignExtend<long>(firstOp[i], 32, false)", ["GetIterResult"] = "Helpers.SignExtend<long>(leftOp[i], 32, false)"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_SignExtend8_short",                                                                                 ["Method"] = "SignExtend8",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                   ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.SignExtend<short>(firstOp[i], 8, false)", ["GetIterResult"] = "Helpers.SignExtend<short>(leftOp[i], 8, false)"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_SignExtend8_int",                                                                                   ["Method"] = "SignExtend8",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                   ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.SignExtend<int>(firstOp[i], 8, false)", ["GetIterResult"] = "Helpers.SignExtend<int>(leftOp[i], 8, false)"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_SignExtend8_long",                                                                                  ["Method"] = "SignExtend8",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                   ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.SignExtend<long>(firstOp[i], 8, false)", ["GetIterResult"] = "Helpers.SignExtend<long>(leftOp[i], 8, false)"}),

        ("SveVecReduceUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_SignExtendWideningLower_short_sbyte",                                                               ["Method"] = "SignExtendWideningLower",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.SignExtendWidening(firstOp[0]) != result[0]", ["ValidateRemainingResults"] = "Helpers.SignExtendWidening(firstOp[i]) != result[i]"}),
        ("SveVecReduceUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_SignExtendWideningLower_int_short",                                                                 ["Method"] = "SignExtendWideningLower",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.SignExtendWidening(firstOp[0]) != result[0]", ["ValidateRemainingResults"] = "Helpers.SignExtendWidening(firstOp[i]) != result[i]"}),
        ("SveVecReduceUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_SignExtendWideningLower_long_int",                                                                  ["Method"] = "SignExtendWideningLower",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.SignExtendWidening(firstOp[0]) != result[0]", ["ValidateRemainingResults"] = "Helpers.SignExtendWidening(firstOp[i]) != result[i]"}),
        ("SveVecReduceUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_SignExtendWideningUpper_short_sbyte",                                                               ["Method"] = "SignExtendWideningUpper",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.SignExtendWideningUpper(firstOp, 0) != result[0]", ["ValidateRemainingResults"] = "Helpers.SignExtendWideningUpper(firstOp, i) != result[i]"}),
        ("SveVecReduceUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_SignExtendWideningUpper_int_short",                                                                 ["Method"] = "SignExtendWideningUpper",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.SignExtendWideningUpper(firstOp, 0) != result[0]", ["ValidateRemainingResults"] = "Helpers.SignExtendWideningUpper(firstOp, i) != result[i]"}),
        ("SveVecReduceUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_SignExtendWideningUpper_long_int",                                                                  ["Method"] = "SignExtendWideningUpper",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.SignExtendWideningUpper(firstOp, 0) != result[0]", ["ValidateRemainingResults"] = "Helpers.SignExtendWideningUpper(firstOp, i) != result[i]"}),

        ("SveSimpleVecOpTest.template",                  new Dictionary<string, string> { ["TestName"] = "Sve_Sqrt_float",                                                                             ["Method"] = "Sqrt",                                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                                 ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                  ["ValidateIterResult"] = "result[i] != Helpers.Sqrt(firstOp[i])", ["GetIterResult"] = "Helpers.Sqrt(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",                  new Dictionary<string, string> { ["TestName"] = "Sve_Sqrt_double",                                                                            ["Method"] = "Sqrt",                                                                ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                                 ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                  ["ValidateIterResult"] = "result[i] != Helpers.Sqrt(firstOp[i])", ["GetIterResult"] = "Helpers.Sqrt(leftOp[i])"}),

        ("SveVecImmBinOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_TrigonometricMultiplyAddCoefficient_float_0",                                                        ["Method"] = "TrigonometricMultiplyAddCoefficient",                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm"] = "0", ["InvalidImm"] = "8",    ["ValidateIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) && (Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) != result[i])", ["GetIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) ? Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) : result[i]"}),
        ("SveVecImmBinOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_TrigonometricMultiplyAddCoefficient_float_2",                                                        ["Method"] = "TrigonometricMultiplyAddCoefficient",                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm"] = "2", ["InvalidImm"] = "8",    ["ValidateIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) && (Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) != result[i])", ["GetIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) ? Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) : result[i]"}),
        ("SveVecImmBinOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_TrigonometricMultiplyAddCoefficient_float_4",                                                        ["Method"] = "TrigonometricMultiplyAddCoefficient",                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm"] = "4", ["InvalidImm"] = "8",    ["ValidateIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) && (Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) != result[i])", ["GetIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) ? Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) : result[i]"}),
        ("SveVecImmBinOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_TrigonometricMultiplyAddCoefficient_float_6",                                                        ["Method"] = "TrigonometricMultiplyAddCoefficient",                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()", ["NextValueMask"] = "Helpers.getMaskSingle()", ["Imm"] = "6", ["InvalidImm"] = "8",    ["ValidateIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) && (Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) != result[i])", ["GetIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) ? Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) : result[i]"}),
        ("SveVecImmBinOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_TrigonometricMultiplyAddCoefficient_double_1",                                                       ["Method"] = "TrigonometricMultiplyAddCoefficient",                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()", ["NextValueMask"] = "Helpers.getMaskDouble()", ["Imm"] = "1", ["InvalidImm"] = "8",    ["ValidateIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) && (Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) != result[i])", ["GetIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) ? Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) : result[i]"}),
        ("SveVecImmBinOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_TrigonometricMultiplyAddCoefficient_double_3",                                                       ["Method"] = "TrigonometricMultiplyAddCoefficient",                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()", ["NextValueMask"] = "Helpers.getMaskDouble()", ["Imm"] = "3", ["InvalidImm"] = "8",    ["ValidateIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) && (Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) != result[i])", ["GetIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) ? Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) : result[i]"}),
        ("SveVecImmBinOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_TrigonometricMultiplyAddCoefficient_double_5",                                                       ["Method"] = "TrigonometricMultiplyAddCoefficient",                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()", ["NextValueMask"] = "Helpers.getMaskDouble()", ["Imm"] = "5", ["InvalidImm"] = "8",    ["ValidateIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) && (Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) != result[i])", ["GetIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) ? Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) : result[i]"}),
        ("SveVecImmBinOpTest.template",       new Dictionary<string, string> {["TestName"] = "Sve_TrigonometricMultiplyAddCoefficient_double_7",                                                       ["Method"] = "TrigonometricMultiplyAddCoefficient",                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()", ["NextValueMask"] = "Helpers.getMaskDouble()", ["Imm"] = "7", ["InvalidImm"] = "8",    ["ValidateIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) && (Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) != result[i])", ["GetIterResult"] = "((firstOp[i] <= (Math.PI / 4)) && (firstOp[i] > (-Math.PI / 4))) ? Helpers.TrigonometricMultiplyAddCoefficient(firstOp[i], secondOp[i], Imm) : result[i]"}),

        ("SveVecTernOpMaskedTest.template",   new Dictionary<string, string> { ["TestName"] = "Sve_Splice_float",                                                                                      ["Method"] = "Splice",                                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.Splice(first, second, maskArray, i)",  ["GetIterResult"] = "Helpers.Splice(left, right, mask, i)", ["ConvertFunc"] = "BitConverter.SingleToInt32Bits"}),
        ("SveVecTernOpMaskedTest.template",   new Dictionary<string, string> { ["TestName"] = "Sve_Splice_double",                                                                                     ["Method"] = "Splice",                                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.Splice(first, second, maskArray, i)",  ["GetIterResult"] = "Helpers.Splice(left, right, mask, i)", ["ConvertFunc"] = "BitConverter.DoubleToInt64Bits"}),
        ("SveVecTernOpMaskedTest.template",   new Dictionary<string, string> { ["TestName"] = "Sve_Splice_sbyte",                                                                                      ["Method"] = "Splice",                                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "result[i] != Helpers.Splice(first, second, maskArray, i)",  ["GetIterResult"] = "Helpers.Splice(left, right, mask, i)", ["ConvertFunc"] = ""}),
        ("SveVecTernOpMaskedTest.template",   new Dictionary<string, string> { ["TestName"] = "Sve_Splice_short",                                                                                      ["Method"] = "Splice",                                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "result[i] != Helpers.Splice(first, second, maskArray, i)",  ["GetIterResult"] = "Helpers.Splice(left, right, mask, i)", ["ConvertFunc"] = ""}),
        ("SveVecTernOpMaskedTest.template",   new Dictionary<string, string> { ["TestName"] = "Sve_Splice_int",                                                                                        ["Method"] = "Splice",                                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "result[i] != Helpers.Splice(first, second, maskArray, i)",  ["GetIterResult"] = "Helpers.Splice(left, right, mask, i)", ["ConvertFunc"] = ""}),
        ("SveVecTernOpMaskedTest.template",   new Dictionary<string, string> { ["TestName"] = "Sve_Splice_long",                                                                                       ["Method"] = "Splice",                                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "result[i] != Helpers.Splice(first, second, maskArray, i)",  ["GetIterResult"] = "Helpers.Splice(left, right, mask, i)", ["ConvertFunc"] = ""}),
        ("SveVecTernOpMaskedTest.template",   new Dictionary<string, string> { ["TestName"] = "Sve_Splice_byte",                                                                                       ["Method"] = "Splice",                                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "result[i] != Helpers.Splice(first, second, maskArray, i)",  ["GetIterResult"] = "Helpers.Splice(left, right, mask, i)", ["ConvertFunc"] = ""}),
        ("SveVecTernOpMaskedTest.template",   new Dictionary<string, string> { ["TestName"] = "Sve_Splice_ushort",                                                                                     ["Method"] = "Splice",                                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.Splice(first, second, maskArray, i)",  ["GetIterResult"] = "Helpers.Splice(left, right, mask, i)", ["ConvertFunc"] = ""}),
        ("SveVecTernOpMaskedTest.template",   new Dictionary<string, string> { ["TestName"] = "Sve_Splice_uint",                                                                                       ["Method"] = "Splice",                                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.Splice(first, second, maskArray, i)",  ["GetIterResult"] = "Helpers.Splice(left, right, mask, i)", ["ConvertFunc"] = ""}),
        ("SveVecTernOpMaskedTest.template",   new Dictionary<string, string> { ["TestName"] = "Sve_Splice_ulong",                                                                                      ["Method"] = "Splice",                                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.Splice(first, second, maskArray, i)",  ["GetIterResult"] = "Helpers.Splice(left, right, mask, i)", ["ConvertFunc"] = ""}),

        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Subtract_float",                                                                                    ["Method"] = "Subtract",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",       ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateIterResult"] = "Helpers.Subtract(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Subtract(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Subtract_double",                                                                                   ["Method"] = "Subtract",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",       ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateIterResult"] = "Helpers.Subtract(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Subtract(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Subtract_sbyte",                                                                                    ["Method"] = "Subtract",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(sbyte)TestLibrary.Generator.GetSByte()", ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "Helpers.Subtract(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Subtract(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Subtract_short",                                                                                    ["Method"] = "Subtract",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(short)TestLibrary.Generator.GetInt16()", ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "Helpers.Subtract(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Subtract(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Subtract_int",                                                                                      ["Method"] = "Subtract",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "Helpers.Subtract(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Subtract(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Subtract_long",                                                                                     ["Method"] = "Subtract",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "Helpers.Subtract(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Subtract(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Subtract_byte",                                                                                     ["Method"] = "Subtract",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(byte)TestLibrary.Generator.GetByte()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "Helpers.Subtract(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Subtract(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Subtract_ushort",                                                                                   ["Method"] = "Subtract",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.Subtract(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Subtract(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Subtract_uint",                                                                                     ["Method"] = "Subtract",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.Subtract(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Subtract(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Subtract_ulong",                                                                                    ["Method"] = "Subtract",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.Subtract(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.Subtract(left[i], right[i])"}),

        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_SubtractSaturate_sbyte",                                                                            ["Method"] = "SubtractSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(sbyte)TestLibrary.Generator.GetSByte()", ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "Helpers.SubtractSaturate(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_SubtractSaturate_short",                                                                            ["Method"] = "SubtractSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(short)TestLibrary.Generator.GetInt16()", ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "Helpers.SubtractSaturate(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_SubtractSaturate_int",                                                                              ["Method"] = "SubtractSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "Helpers.SubtractSaturate(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_SubtractSaturate_long",                                                                             ["Method"] = "SubtractSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "Helpers.SubtractSaturate(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_SubtractSaturate_byte",                                                                             ["Method"] = "SubtractSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(byte)TestLibrary.Generator.GetByte()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "Helpers.SubtractSaturate(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_SubtractSaturate_ushort",                                                                           ["Method"] = "SubtractSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.SubtractSaturate(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_SubtractSaturate_uint",                                                                             ["Method"] = "SubtractSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.SubtractSaturate(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_SubtractSaturate_ulong",                                                                            ["Method"] = "SubtractSaturate",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.SubtractSaturate(left[i], right[i]) != result[i]", ["GetIterResult"] = "Helpers.SubtractSaturate(left[i], right[i])"}),

        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Xor_sbyte",                                                                                         ["Method"] = "Xor",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(sbyte)TestLibrary.Generator.GetSByte()", ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateIterResult"] = "Helpers.Xor(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Xor(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Xor_short",                                                                                         ["Method"] = "Xor",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(short)TestLibrary.Generator.GetInt16()", ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateIterResult"] = "Helpers.Xor(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Xor(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Xor_int",                                                                                           ["Method"] = "Xor",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateIterResult"] = "Helpers.Xor(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Xor(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Xor_long",                                                                                          ["Method"] = "Xor",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateIterResult"] = "Helpers.Xor(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Xor(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Xor_byte",                                                                                          ["Method"] = "Xor",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "(byte)TestLibrary.Generator.GetByte()",   ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateIterResult"] = "Helpers.Xor(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Xor(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Xor_ushort",                                                                                        ["Method"] = "Xor",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateIterResult"] = "Helpers.Xor(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Xor(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Xor_uint",                                                                                          ["Method"] = "Xor",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateIterResult"] = "Helpers.Xor(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Xor(left[i], right[i])"}),
        ("SveVecBinOpTest.template",          new Dictionary<string, string> { ["TestName"] = "Sve_Xor_ulong",                                                                                         ["Method"] = "Xor",                                                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",       ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateIterResult"] = "Helpers.Xor(left[i], right[i]) != result[i]",        ["GetIterResult"] = "Helpers.Xor(left[i], right[i])"}),

        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_XorAcross_sbyte",                                                                                   ["Method"] = "XorAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.XorAcross(firstOp) != result[0]",                                                                                                            ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_XorAcross_short",                                                                                   ["Method"] = "XorAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.XorAcross(firstOp) != result[0]",                                                                                                            ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_XorAcross_int",                                                                                     ["Method"] = "XorAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.XorAcross(firstOp) != result[0]",                                                                                                            ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_XorAcross_long",                                                                                    ["Method"] = "XorAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                       ["ValidateReduceOpResult"] = "Helpers.XorAcross(firstOp) != result[0]",                                                                                                            ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_XorAcross_byte",                                                                                    ["Method"] = "XorAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                        ["ValidateReduceOpResult"] = "Helpers.XorAcross(firstOp) != result[0]",                                                                                                            ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_XorAcross_ushort",                                                                                  ["Method"] = "XorAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.XorAcross(firstOp) != result[0]",                                                                                                            ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_XorAcross_uint",                                                                                    ["Method"] = "XorAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.XorAcross(firstOp) != result[0]",                                                                                                            ["ValidateRemainingResults"] = "result[i] != 0"}),
        ("SveVecReduceUnOpTest.template",     new Dictionary<string, string> { ["TestName"] = "Sve_XorAcross_ulong",                                                                                   ["Method"] = "XorAcross",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                      ["ValidateReduceOpResult"] = "Helpers.XorAcross(firstOp) != result[0]",                                                                                                            ["ValidateRemainingResults"] = "result[i] != 0"}),

        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> {["TestName"] = "Sve_TrigonometricSelectCoefficient_float_uint",                                                     ["Method"] = "TrigonometricSelectCoefficient",                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateIterResult"] = "((left[i] <= (Math.PI / 4)) && (left[i] > (-Math.PI / 4))) && (Helpers.TrigonometricSelectCoefficient(left[i], right[i]) != result[i])", ["GetIterResult"] = "((left[i] <= (Math.PI / 4)) && (left[i] > (-Math.PI / 4))) ? Helpers.TrigonometricSelectCoefficient(left[i], right[i]) : result[i]"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> {["TestName"] = "Sve_TrigonometricSelectCoefficient_double_ulong",                                                   ["Method"] = "TrigonometricSelectCoefficient",                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateIterResult"] = "((left[i] <= (Math.PI / 4)) && (left[i] > (-Math.PI / 4))) && (Helpers.TrigonometricSelectCoefficient(left[i], right[i]) != result[i])", ["GetIterResult"] = "((left[i] <= (Math.PI / 4)) && (left[i] > (-Math.PI / 4))) ? Helpers.TrigonometricSelectCoefficient(left[i], right[i]) : result[i]"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> {["TestName"] = "Sve_TrigonometricStartingValue_float_uint",                                                         ["Method"] = "TrigonometricStartingValue",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                       ["ValidateIterResult"] = "((left[i] <= (Math.PI / 4)) && (left[i] > (-Math.PI / 4))) && (Helpers.TrigonometricStartingValue(left[i], right[i]) != result[i])",     ["GetIterResult"] = "((left[i] <= (Math.PI / 4)) && (left[i] > (-Math.PI / 4))) ? Helpers.TrigonometricStartingValue(left[i], right[i]) : result[i]"}),
        ("SveVecBinOpDifferentTypesTest.template", new Dictionary<string, string> {["TestName"] = "Sve_TrigonometricStartingValue_double_ulong",                                                       ["Method"] = "TrigonometricStartingValue",                                           ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                       ["ValidateIterResult"] = "((left[i] <= (Math.PI / 4)) && (left[i] > (-Math.PI / 4))) && (Helpers.TrigonometricStartingValue(left[i], right[i]) != result[i])",     ["GetIterResult"] = "((left[i] <= (Math.PI / 4)) && (left[i] > (-Math.PI / 4))) ? Helpers.TrigonometricStartingValue(left[i], right[i]) : result[i]"}),

        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipEven_float",                                                                                   ["Method"] = "UnzipEven",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateEntry"] = "result[index] != left[i] || result[index + half] != right[i]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipEven_double",                                                                                  ["Method"] = "UnzipEven",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateEntry"] = "result[index] != left[i] || result[index + half] != right[i]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipEven_sbyte",                                                                                   ["Method"] = "UnzipEven",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateEntry"] = "result[index] != left[i] || result[index + half] != right[i]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipEven_short",                                                                                   ["Method"] = "UnzipEven",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateEntry"] = "result[index] != left[i] || result[index + half] != right[i]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipEven_int",                                                                                     ["Method"] = "UnzipEven",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateEntry"] = "result[index] != left[i] || result[index + half] != right[i]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipEven_long",                                                                                    ["Method"] = "UnzipEven",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateEntry"] = "result[index] != left[i] || result[index + half] != right[i]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipEven_byte",                                                                                    ["Method"] = "UnzipEven",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateEntry"] = "result[index] != left[i] || result[index + half] != right[i]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipEven_ushort",                                                                                  ["Method"] = "UnzipEven",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateEntry"] = "result[index] != left[i] || result[index + half] != right[i]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipEven_uint",                                                                                    ["Method"] = "UnzipEven",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateEntry"] = "result[index] != left[i] || result[index + half] != right[i]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipEven_ulong",                                                                                   ["Method"] = "UnzipEven",                                                            ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateEntry"] = "result[index] != left[i] || result[index + half] != right[i]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipOdd_float",                                                                                    ["Method"] = "UnzipOdd",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateEntry"] = "result[index] != left[i + 1] || result[index + half] != right[i + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipOdd_double",                                                                                   ["Method"] = "UnzipOdd",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateEntry"] = "result[index] != left[i + 1] || result[index + half] != right[i + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipOdd_sbyte",                                                                                    ["Method"] = "UnzipOdd",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateEntry"] = "result[index] != left[i + 1] || result[index + half] != right[i + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipOdd_short",                                                                                    ["Method"] = "UnzipOdd",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateEntry"] = "result[index] != left[i + 1] || result[index + half] != right[i + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipOdd_int",                                                                                      ["Method"] = "UnzipOdd",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateEntry"] = "result[index] != left[i + 1] || result[index + half] != right[i + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipOdd_long",                                                                                     ["Method"] = "UnzipOdd",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateEntry"] = "result[index] != left[i + 1] || result[index + half] != right[i + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipOdd_byte",                                                                                     ["Method"] = "UnzipOdd",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateEntry"] = "result[index] != left[i + 1] || result[index + half] != right[i + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipOdd_ushort",                                                                                   ["Method"] = "UnzipOdd",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateEntry"] = "result[index] != left[i + 1] || result[index + half] != right[i + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipOdd_uint",                                                                                     ["Method"] = "UnzipOdd",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateEntry"] = "result[index] != left[i + 1] || result[index + half] != right[i + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_UnzipOdd_ulong",                                                                                    ["Method"] = "UnzipOdd",                                                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateEntry"] = "result[index] != left[i + 1] || result[index + half] != right[i + 1]"}),

        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_VectorTableLookup_float",                                                                         ["Method"] = "VectorTableLookup",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "(UInt32) (TestLibrary.Generator.GetUInt32() % (UInt32)(Op2ElementCount * 2))",                                                      ["ValidateEntry"] = "(right[i] < (UInt32) RetElementCount) ? (result[i] != left[right[i]]) : (result[i] != 0)"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_VectorTableLookup_double",                                                                        ["Method"] = "VectorTableLookup",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "(UInt64) (TestLibrary.Generator.GetUInt64() % (UInt64)(Op2ElementCount * 2))",                                                      ["ValidateEntry"] = "(right[i] < (UInt64) RetElementCount) ? (result[i] != left[right[i]]) : (result[i] != 0)"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_VectorTableLookup_sbyte",                                                                         ["Method"] = "VectorTableLookup",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "(Byte) (TestLibrary.Generator.GetByte() % (Byte) (Op2ElementCount * 2))",                                                      ["ValidateEntry"] = "(right[i] < (Byte)   RetElementCount) ? (result[i] != left[right[i]]) : (result[i] != 0)"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_VectorTableLookup_short",                                                                         ["Method"] = "VectorTableLookup",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "(UInt16) (TestLibrary.Generator.GetUInt16() % (UInt16)(Op2ElementCount * 2))",                                                      ["ValidateEntry"] = "(right[i] < (UInt16) RetElementCount) ? (result[i] != left[right[i]]) : (result[i] != 0)"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_VectorTableLookup_int",                                                                           ["Method"] = "VectorTableLookup",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "(UInt32) (TestLibrary.Generator.GetUInt32() % (UInt32)(Op2ElementCount * 2))",                                                      ["ValidateEntry"] = "(right[i] < (UInt32) RetElementCount) ? (result[i] != left[right[i]]) : (result[i] != 0)"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_VectorTableLookup_long",                                                                          ["Method"] = "VectorTableLookup",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "(UInt64) (TestLibrary.Generator.GetUInt64() % (UInt64)(Op2ElementCount * 2))",                                                      ["ValidateEntry"] = "(right[i] < (UInt64) RetElementCount) ? (result[i] != left[right[i]]) : (result[i] != 0)"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_VectorTableLookup_byte",                                                                          ["Method"] = "VectorTableLookup",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "(Byte) (TestLibrary.Generator.GetByte() % (Byte) (Op2ElementCount * 2))",                                                      ["ValidateEntry"] = "(right[i] < (Byte)   RetElementCount) ? (result[i] != left[right[i]]) : (result[i] != 0)"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_VectorTableLookup_ushort",                                                                        ["Method"] = "VectorTableLookup",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "(UInt16) (TestLibrary.Generator.GetUInt16() % (UInt16)(Op2ElementCount * 2))",                                                      ["ValidateEntry"] = "(right[i] < (UInt16) RetElementCount) ? (result[i] != left[right[i]]) : (result[i] != 0)"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_VectorTableLookup_uint",                                                                          ["Method"] = "VectorTableLookup",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "(UInt32) (TestLibrary.Generator.GetUInt32() % (UInt32)(Op2ElementCount * 2))",                                                      ["ValidateEntry"] = "(right[i] < (UInt32) RetElementCount) ? (result[i] != left[right[i]]) : (result[i] != 0)"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_VectorTableLookup_ulong",                                                                         ["Method"] = "VectorTableLookup",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "(UInt64) (TestLibrary.Generator.GetUInt64() % (UInt64)(Op2ElementCount * 2))",                                                      ["ValidateEntry"] = "(right[i] < (UInt64) RetElementCount) ? (result[i] != left[right[i]]) : (result[i] != 0)"}),

        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ZeroExtend16_uint",                                                                                 ["Method"] = "ZeroExtend16",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.SignExtend<uint>(firstOp[i], 16, true)", ["GetIterResult"] = "Helpers.SignExtend<uint>(leftOp[i], 16, true)"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ZeroExtend16_ulong",                                                                                ["Method"] = "ZeroExtend16",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "(TestLibrary.Generator.GetUInt64() & 0x3FFFFFFFFFFFFFFF)",                                                                                                                                ["ValidateIterResult"] = "result[i] != Helpers.SignExtend<ulong>(firstOp[i], 16, true)", ["GetIterResult"] = "Helpers.SignExtend<ulong>(leftOp[i], 16, true)"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ZeroExtend32_ulong",                                                                                ["Method"] = "ZeroExtend32",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "(TestLibrary.Generator.GetUInt64() & 0x3FFFFFFFFFFFFFFF)",                                                                                                                                ["ValidateIterResult"] = "result[i] != Helpers.SignExtend<ulong>(firstOp[i], 32, true)", ["GetIterResult"] = "Helpers.SignExtend<ulong>(leftOp[i], 32, true)"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ZeroExtend8_ushort",                                                                                ["Method"] = "ZeroExtend8",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.SignExtend<ushort>(firstOp[i], 8, true)", ["GetIterResult"] = "Helpers.SignExtend<ushort>(leftOp[i], 8, true)"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ZeroExtend8_uint",                                                                                  ["Method"] = "ZeroExtend8",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.SignExtend<uint>(firstOp[i], 8, true)", ["GetIterResult"] = "Helpers.SignExtend<uint>(leftOp[i], 8, true)"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ZeroExtend8_ulong",                                                                                 ["Method"] = "ZeroExtend8",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "(TestLibrary.Generator.GetUInt64() & 0x3FFFFFFFFFFFFFFF)",                                                                                                                                ["ValidateIterResult"] = "result[i] != Helpers.SignExtend<ulong>(firstOp[i], 8, true)", ["GetIterResult"] = "Helpers.SignExtend<ulong>(leftOp[i], 8, true)"}),

        ("SveVecReduceUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_ZeroExtendWideningLower_ushort_byte",                                                               ["Method"] = "ZeroExtendWideningLower",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                              ["ValidateReduceOpResult"] = "Helpers.ZeroExtendWidening(firstOp[0]) != result[0]", ["ValidateRemainingResults"] = "Helpers.ZeroExtendWidening(firstOp[i]) != result[i]"}),
        ("SveVecReduceUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_ZeroExtendWideningLower_uint_ushort",                                                               ["Method"] = "ZeroExtendWideningLower",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                            ["ValidateReduceOpResult"] = "Helpers.ZeroExtendWidening(firstOp[0]) != result[0]", ["ValidateRemainingResults"] = "Helpers.ZeroExtendWidening(firstOp[i]) != result[i]"}),
        ("SveVecReduceUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_ZeroExtendWideningLower_ulong_uint",                                                                ["Method"] = "ZeroExtendWideningLower",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                            ["ValidateReduceOpResult"] = "Helpers.ZeroExtendWidening(firstOp[0]) != result[0]", ["ValidateRemainingResults"] = "Helpers.ZeroExtendWidening(firstOp[i]) != result[i]"}),
        ("SveVecReduceUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_ZeroExtendWideningUpper_ushort_byte",                                                               ["Method"] = "ZeroExtendWideningUpper",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                              ["ValidateReduceOpResult"] = "Helpers.ZeroExtendWideningUpper(firstOp, 0) != result[0]", ["ValidateRemainingResults"] = "Helpers.ZeroExtendWideningUpper(firstOp, i) != result[i]"}),
        ("SveVecReduceUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_ZeroExtendWideningUpper_uint_ushort",                                                               ["Method"] = "ZeroExtendWideningUpper",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                            ["ValidateReduceOpResult"] = "Helpers.ZeroExtendWideningUpper(firstOp, 0) != result[0]", ["ValidateRemainingResults"] = "Helpers.ZeroExtendWideningUpper(firstOp, i) != result[i]"}),
        ("SveVecReduceUnOpTest.template",new Dictionary<string, string> {["TestName"] = "Sve_ZeroExtendWideningUpper_ulong_uint",                                                                ["Method"] = "ZeroExtendWideningUpper",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64",  ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                            ["ValidateReduceOpResult"] = "Helpers.ZeroExtendWideningUpper(firstOp, 0) != result[0]", ["ValidateRemainingResults"] = "Helpers.ZeroExtendWideningUpper(firstOp, i) != result[i]"}),

        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_float",                                                    ["Method"] = "ConditionalExtractAfterLastActiveElement",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",             ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(first, second, third)[i]",             ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_float_scalar",                                             ["Method"] = "ConditionalExtractAfterLastActiveElement",                                                              ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()",                        ["ValidateScalarResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_double",                                                   ["Method"] = "ConditionalExtractAfterLastActiveElement",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",             ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(first, second, third)[i]",             ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_double_scalar",                                            ["Method"] = "ConditionalExtractAfterLastActiveElement",                                                              ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()",                        ["ValidateScalarResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_sbyte",                                                    ["Method"] = "ConditionalExtractAfterLastActiveElement",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetSByte()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",             ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(first, second, third)[i]",             ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_sbyte_scalar",                                             ["Method"] = "ConditionalExtractAfterLastActiveElement",                                                              ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                   ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetSByte()",                         ["ValidateScalarResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_short",                                                    ["Method"] = "ConditionalExtractAfterLastActiveElement",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt16()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",             ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(first, second, third)[i]",             ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_short_scalar",                                             ["Method"] = "ConditionalExtractAfterLastActiveElement",                                                              ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt16()",                         ["ValidateScalarResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_int",                                                      ["Method"] = "ConditionalExtractAfterLastActiveElement",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",             ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(first, second, third)[i]",             ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_int_scalar",                                               ["Method"] = "ConditionalExtractAfterLastActiveElement",                                                              ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidateScalarResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_long",                                                     ["Method"] = "ConditionalExtractAfterLastActiveElement",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",             ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(first, second, third)[i]",             ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_long_scalar",                                              ["Method"] = "ConditionalExtractAfterLastActiveElement",                                                              ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidateScalarResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_byte",                                                     ["Method"] = "ConditionalExtractAfterLastActiveElement",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetByte()",                          ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",             ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(first, second, third)[i]",             ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_byte_scalar",                                              ["Method"] = "ConditionalExtractAfterLastActiveElement",                                                              ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                    ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetByte()",                          ["ValidateScalarResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_ushort",                                                   ["Method"] = "ConditionalExtractAfterLastActiveElement",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt16()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",             ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(first, second, third)[i]",             ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_ushort_scalar",                                            ["Method"] = "ConditionalExtractAfterLastActiveElement",                                                              ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt16()",                        ["ValidateScalarResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_uint",                                                     ["Method"] = "ConditionalExtractAfterLastActiveElement",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",             ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(first, second, third)[i]",             ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_uint_scalar",                                              ["Method"] = "ConditionalExtractAfterLastActiveElement",                                                              ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidateScalarResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_ulong",                                                    ["Method"] = "ConditionalExtractAfterLastActiveElement",                             ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",             ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(first, second, third)[i]",             ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElement_ulong_scalar",                                             ["Method"] = "ConditionalExtractAfterLastActiveElement",                                                              ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidateScalarResult"] = "Helpers.ConditionalExtractAfterLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElementAndReplicate_float",                                        ["Method"] = "ConditionalExtractAfterLastActiveElementAndReplicate",                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]", ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(first, second, third)[i]", ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElementAndReplicate_double",                                       ["Method"] = "ConditionalExtractAfterLastActiveElementAndReplicate",                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]", ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(first, second, third)[i]", ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElementAndReplicate_sbyte",                                        ["Method"] = "ConditionalExtractAfterLastActiveElementAndReplicate",                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetSByte()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]", ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(first, second, third)[i]", ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElementAndReplicate_short",                                        ["Method"] = "ConditionalExtractAfterLastActiveElementAndReplicate",                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt16()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]", ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(first, second, third)[i]", ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElementAndReplicate_int",                                          ["Method"] = "ConditionalExtractAfterLastActiveElementAndReplicate",                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]", ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(first, second, third)[i]", ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElementAndReplicate_long",                                         ["Method"] = "ConditionalExtractAfterLastActiveElementAndReplicate",                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]", ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(first, second, third)[i]", ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElementAndReplicate_byte",                                         ["Method"] = "ConditionalExtractAfterLastActiveElementAndReplicate",                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetByte()",                          ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]", ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(first, second, third)[i]", ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElementAndReplicate_ushort",                                       ["Method"] = "ConditionalExtractAfterLastActiveElementAndReplicate",                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt16()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]", ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(first, second, third)[i]", ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElementAndReplicate_uint",                                         ["Method"] = "ConditionalExtractAfterLastActiveElementAndReplicate",                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]", ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(first, second, third)[i]", ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractAfterLastActiveElementAndReplicate_ulong",                                        ["Method"] = "ConditionalExtractAfterLastActiveElementAndReplicate",                 ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]", ["GetIterResult"] = "Helpers.ConditionalExtractAfterLastActiveElementAndReplicate(first, second, third)[i]", ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_float",                                                         ["Method"] = "ConditionalExtractLastActiveElement",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",                  ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElement(first, second, third)[i]",                  ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_float_scalar",                                                  ["Method"] = "ConditionalExtractLastActiveElement",                                                                   ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                  ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()",                        ["ValidateScalarResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_double",                                                        ["Method"] = "ConditionalExtractLastActiveElement",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",                  ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElement(first, second, third)[i]",                  ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_double_scalar",                                                 ["Method"] = "ConditionalExtractLastActiveElement",                                                                   ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                  ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()",                        ["ValidateScalarResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_sbyte",                                                         ["Method"] = "ConditionalExtractLastActiveElement",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetSByte()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",                  ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElement(first, second, third)[i]",                  ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_sbyte_scalar",                                                  ["Method"] = "ConditionalExtractLastActiveElement",                                                                   ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                   ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetSByte()",                         ["ValidateScalarResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_short",                                                         ["Method"] = "ConditionalExtractLastActiveElement",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt16()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",                  ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElement(first, second, third)[i]",                  ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_short_scalar",                                                  ["Method"] = "ConditionalExtractLastActiveElement",                                                                   ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                   ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt16()",                         ["ValidateScalarResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_int",                                                           ["Method"] = "ConditionalExtractLastActiveElement",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",                  ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElement(first, second, third)[i]",                  ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_int_scalar",                                                    ["Method"] = "ConditionalExtractLastActiveElement",                                                                   ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                   ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidateScalarResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_long",                                                          ["Method"] = "ConditionalExtractLastActiveElement",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",                  ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElement(first, second, third)[i]",                  ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_long_scalar",                                                   ["Method"] = "ConditionalExtractLastActiveElement",                                                                   ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                   ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidateScalarResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_byte",                                                          ["Method"] = "ConditionalExtractLastActiveElement",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetByte()",                          ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",                  ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElement(first, second, third)[i]",                  ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_byte_scalar",                                                   ["Method"] = "ConditionalExtractLastActiveElement",                                                                   ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                    ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetByte()",                          ["ValidateScalarResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_ushort",                                                        ["Method"] = "ConditionalExtractLastActiveElement",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt16()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",                  ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElement(first, second, third)[i]",                  ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_ushort_scalar",                                                 ["Method"] = "ConditionalExtractLastActiveElement",                                                                   ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                  ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt16()",                        ["ValidateScalarResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_uint",                                                          ["Method"] = "ConditionalExtractLastActiveElement",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",                  ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElement(first, second, third)[i]",                  ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_uint_scalar",                                                   ["Method"] = "ConditionalExtractLastActiveElement",                                                                   ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                  ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidateScalarResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_ulong",                                                         ["Method"] = "ConditionalExtractLastActiveElement",                                  ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp)[i] != result[i]",                  ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElement(first, second, third)[i]",                  ["ConvertFunc"] = " ",}),
        ("SveScalarTernOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElement_ulong_scalar",                                                  ["Method"] = "ConditionalExtractLastActiveElement",                                                                   ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                  ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidateScalarResult"] = "Helpers.ConditionalExtractLastActiveElement(firstOp, secondOp, thirdOp) != result",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElementAndReplicate_float",                                             ["Method"] = "ConditionalExtractLastActiveElementAndReplicate",                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Single", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp3"] = "TestLibrary.Generator.GetSingle()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]",      ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(first, second, third)[i]",      ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElementAndReplicate_double",                                            ["Method"] = "ConditionalExtractLastActiveElementAndReplicate",                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Double", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp3"] = "TestLibrary.Generator.GetDouble()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]",      ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(first, second, third)[i]",      ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElementAndReplicate_sbyte",                                             ["Method"] = "ConditionalExtractLastActiveElementAndReplicate",                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "SByte",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp3"] = "TestLibrary.Generator.GetSByte()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]",      ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(first, second, third)[i]",      ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElementAndReplicate_short",                                             ["Method"] = "ConditionalExtractLastActiveElementAndReplicate",                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int16",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt16()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]",      ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(first, second, third)[i]",      ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElementAndReplicate_int",                                               ["Method"] = "ConditionalExtractLastActiveElementAndReplicate",                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int32",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt32()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]",      ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(first, second, third)[i]",      ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElementAndReplicate_long",                                              ["Method"] = "ConditionalExtractLastActiveElementAndReplicate",                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",  ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Int64",  ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp3"] = "TestLibrary.Generator.GetInt64()",                         ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]",      ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(first, second, third)[i]",      ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElementAndReplicate_byte",                                              ["Method"] = "ConditionalExtractLastActiveElementAndReplicate",                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",   ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "Byte",   ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp3"] = "TestLibrary.Generator.GetByte()",                          ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]",      ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(first, second, third)[i]",      ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElementAndReplicate_ushort",                                            ["Method"] = "ConditionalExtractLastActiveElementAndReplicate",                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt16", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt16()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]",      ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(first, second, third)[i]",      ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElementAndReplicate_uint",                                              ["Method"] = "ConditionalExtractLastActiveElementAndReplicate",                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt32", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt32()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]",      ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(first, second, third)[i]",      ["ConvertFunc"] = " ",}),
        ("SveVecTernOpTest.template",         new Dictionary<string, string> { ["TestName"] = "Sve_ConditionalExtractLastActiveElementAndReplicate_ulong",                                             ["Method"] = "ConditionalExtractLastActiveElementAndReplicate",                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64", ["Op3VectorType"] = "Vector",    ["Op3BaseType"] = "UInt64", ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp3"] = "TestLibrary.Generator.GetUInt64()",                        ["ValidateIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(firstOp, secondOp, thirdOp)[i] != result[i]",      ["GetIterResult"] = "Helpers.ConditionalExtractLastActiveElementAndReplicate(first, second, third)[i]",      ["ConvertFunc"] = " ",}),

        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipHigh_float",                                                                                     ["Method"] = "ZipHigh",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateEntry"] = "result[i] != left[index + half] || result[i + 1] != right[index + half]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipHigh_double",                                                                                    ["Method"] = "ZipHigh",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateEntry"] = "result[i] != left[index + half] || result[i + 1] != right[index + half]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipHigh_sbyte",                                                                                     ["Method"] = "ZipHigh",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateEntry"] = "result[i] != left[index + half] || result[i + 1] != right[index + half]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipHigh_short",                                                                                     ["Method"] = "ZipHigh",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateEntry"] = "result[i] != left[index + half] || result[i + 1] != right[index + half]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipHigh_int",                                                                                       ["Method"] = "ZipHigh",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateEntry"] = "result[i] != left[index + half] || result[i + 1] != right[index + half]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipHigh_long",                                                                                      ["Method"] = "ZipHigh",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateEntry"] = "result[i] != left[index + half] || result[i + 1] != right[index + half]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipHigh_byte",                                                                                      ["Method"] = "ZipHigh",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateEntry"] = "result[i] != left[index + half] || result[i + 1] != right[index + half]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipHigh_ushort",                                                                                    ["Method"] = "ZipHigh",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateEntry"] = "result[i] != left[index + half] || result[i + 1] != right[index + half]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipHigh_uint",                                                                                      ["Method"] = "ZipHigh",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateEntry"] = "result[i] != left[index + half] || result[i + 1] != right[index + half]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipHigh_ulong",                                                                                     ["Method"] = "ZipHigh",                                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateEntry"] = "result[i] != left[index + half] || result[i + 1] != right[index + half]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipLow_float",                                                                                      ["Method"] = "ZipLow",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateEntry"] = "result[i] != left[index] || result[i + 1] != right[index]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipLow_double",                                                                                     ["Method"] = "ZipLow",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateEntry"] = "result[i] != left[index] || result[i + 1] != right[index]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipLow_sbyte",                                                                                      ["Method"] = "ZipLow",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateEntry"] = "result[i] != left[index] || result[i + 1] != right[index]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipLow_short",                                                                                      ["Method"] = "ZipLow",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateEntry"] = "result[i] != left[index] || result[i + 1] != right[index]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipLow_int",                                                                                        ["Method"] = "ZipLow",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateEntry"] = "result[i] != left[index] || result[i + 1] != right[index]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipLow_long",                                                                                       ["Method"] = "ZipLow",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateEntry"] = "result[i] != left[index] || result[i + 1] != right[index]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipLow_byte",                                                                                       ["Method"] = "ZipLow",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateEntry"] = "result[i] != left[index] || result[i + 1] != right[index]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipLow_ushort",                                                                                     ["Method"] = "ZipLow",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateEntry"] = "result[i] != left[index] || result[i + 1] != right[index]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipLow_uint",                                                                                       ["Method"] = "ZipLow",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateEntry"] = "result[i] != left[index] || result[i + 1] != right[index]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ZipLow_ulong",                                                                                      ["Method"] = "ZipLow",                                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateEntry"] = "result[i] != left[index] || result[i + 1] != right[index]"}),

        ("SveStoreTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZip_float",                                                                                 ["Method"] = "StoreAndZip",                                                                                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZip_double",                                                                                ["Method"] = "StoreAndZip",                                                                                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZip_sbyte",                                                                                 ["Method"] = "StoreAndZip",                                                                                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZip_short",                                                                                 ["Method"] = "StoreAndZip",                                                                                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZip_int",                                                                                   ["Method"] = "StoreAndZip",                                                                                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZip_long",                                                                                  ["Method"] = "StoreAndZip",                                                                                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZip_byte",                                                                                  ["Method"] = "StoreAndZip",                                                                                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                         ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZip_ushort",                                                                                ["Method"] = "StoreAndZip",                                                                                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZip_uint",                                                                                  ["Method"] = "StoreAndZip",                                                                                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreTest.template",             new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZip_ulong",                                                                                 ["Method"] = "StoreAndZip",                                                                                                                        ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreAndZipTestx2.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx2_float",                                                                               ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i]))"}),
        ("SveStoreAndZipTestx2.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx2_double",                                                                              ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i]))"}),
        ("SveStoreAndZipTestx2.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx2_sbyte",                                                                               ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                        ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i]))"}),
        ("SveStoreAndZipTestx2.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx2_short",                                                                               ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                        ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i]))"}),
        ("SveStoreAndZipTestx2.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx2_int",                                                                                 ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                        ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i]))"}),
        ("SveStoreAndZipTestx2.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx2_long",                                                                                ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                        ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i]))"}),
        ("SveStoreAndZipTestx2.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx2_byte",                                                                                ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                         ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i]))"}),
        ("SveStoreAndZipTestx2.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx2_ushort",                                                                              ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i]))"}),
        ("SveStoreAndZipTestx2.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx2_uint",                                                                                ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i]))"}),
        ("SveStoreAndZipTestx2.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx2_ulong",                                                                               ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i]))"}),
        ("SveStoreAndZipTestx3.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx3_float",                                                                               ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "Single", ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i]))"}),
        ("SveStoreAndZipTestx3.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx3_double",                                                                              ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "Double", ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i]))"}),
        ("SveStoreAndZipTestx3.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx3_sbyte",                                                                               ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "SByte",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                        ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i]))"}),
        ("SveStoreAndZipTestx3.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx3_short",                                                                               ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "Int16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                        ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i]))"}),
        ("SveStoreAndZipTestx3.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx3_int",                                                                                 ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "Int32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                        ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i]))"}),
        ("SveStoreAndZipTestx3.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx3_long",                                                                                ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "Int64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                        ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i]))"}),
        ("SveStoreAndZipTestx3.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx3_byte",                                                                                ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "Byte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                         ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i]))"}),
        ("SveStoreAndZipTestx3.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx3_ushort",                                                                              ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "UInt16", ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i]))"}),
        ("SveStoreAndZipTestx3.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx3_uint",                                                                                ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "UInt32", ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i]))"}),
        ("SveStoreAndZipTestx3.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx3_ulong",                                                                               ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "UInt64", ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i]))"}),
        ("SveStoreAndZipTestx4.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx4_float",                                                                               ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "Single", ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0 || result[index + 3] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i] || result[index + 3] != fourth[i]))"}),
        ("SveStoreAndZipTestx4.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx4_double",                                                                              ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "Double", ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0 || result[index + 3] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i] || result[index + 3] != fourth[i]))"}),
        ("SveStoreAndZipTestx4.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx4_sbyte",                                                                               ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "SByte",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                        ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0 || result[index + 3] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i] || result[index + 3] != fourth[i]))"}),
        ("SveStoreAndZipTestx4.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx4_short",                                                                               ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "Int16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                        ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0 || result[index + 3] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i] || result[index + 3] != fourth[i]))"}),
        ("SveStoreAndZipTestx4.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx4_int",                                                                                 ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "Int32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                        ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0 || result[index + 3] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i] || result[index + 3] != fourth[i]))"}),
        ("SveStoreAndZipTestx4.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx4_long",                                                                                ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "Int64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                        ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0 || result[index + 3] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i] || result[index + 3] != fourth[i]))"}),
        ("SveStoreAndZipTestx4.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx4_byte",                                                                                ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "Byte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                         ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0 || result[index + 3] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i] || result[index + 3] != fourth[i]))"}),
        ("SveStoreAndZipTestx4.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx4_ushort",                                                                              ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "UInt16", ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0 || result[index + 3] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i] || result[index + 3] != fourth[i]))"}),
        ("SveStoreAndZipTestx4.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx4_uint",                                                                                ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "UInt32", ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0 || result[index + 3] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i] || result[index + 3] != fourth[i]))"}),
        ("SveStoreAndZipTestx4.template",     new Dictionary<string, string> { ["TestName"] = "Sve_StoreAndZipx4_ulong",                                                                               ["Method"] = "StoreAndZip",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] =  "UInt64", ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                       ["ValidateEntry"] = "(maskArray[i] == 0 && (result[index] != 0 || result[index + 1] != 0 || result[index + 2] != 0 || result[index + 3] != 0)) || (maskArray[i] == 1 && (result[index] != first[i] || result[index + 1] != second[i] || result[index + 2] != third[i] || result[index + 3] != fourth[i]))"}),

        ("SveStoreNarrowTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_StoreNarrow_short_sbyte",                                                                           ["Method"] = "StoreNarrowing",                                                                                                                     ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != (SByte)first[i])"}),
        ("SveStoreNarrowTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_StoreNarrow_int_sbyte",                                                                             ["Method"] = "StoreNarrowing",                                                                                                                     ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != (SByte)first[i])"}),
        ("SveStoreNarrowTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_StoreNarrow_int_short",                                                                             ["Method"] = "StoreNarrowing",                                                                                                                     ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != (Int16)first[i])"}),
        ("SveStoreNarrowTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_StoreNarrow_long_sbyte",                                                                            ["Method"] = "StoreNarrowing",                                                                                                                     ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != (SByte)first[i])"}),
        ("SveStoreNarrowTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_StoreNarrow_long_short",                                                                            ["Method"] = "StoreNarrowing",                                                                                                                     ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != (Int16)first[i])"}),
        ("SveStoreNarrowTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_StoreNarrow_long_int",                                                                              ["Method"] = "StoreNarrowing",                                                                                                                     ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != (Int32)first[i])"}),
        ("SveStoreNarrowTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_StoreNarrow_ushort_byte",                                                                           ["Method"] = "StoreNarrowing",                                                                                                                     ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != (Byte)first[i])"}),
        ("SveStoreNarrowTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_StoreNarrow_uint_byte",                                                                             ["Method"] = "StoreNarrowing",                                                                                                                     ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != (Byte)first[i])"}),
        ("SveStoreNarrowTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_StoreNarrow_uint_ushort",                                                                           ["Method"] = "StoreNarrowing",                                                                                                                     ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != (UInt16)first[i])"}),
        ("SveStoreNarrowTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_StoreNarrow_ulong_byte",                                                                            ["Method"] = "StoreNarrowing",                                                                                                                     ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != (Byte)first[i])"}),
        ("SveStoreNarrowTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_StoreNarrow_ulong_ushort",                                                                          ["Method"] = "StoreNarrowing",                                                                                                                     ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != (UInt16)first[i])"}),
        ("SveStoreNarrowTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_StoreNarrow_ulong_uint",                                                                            ["Method"] = "StoreNarrowing",                                                                                                                     ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != (UInt32)first[i])"}),

        ("SveStoreNonTemporalTest.template",  new Dictionary<string, string> { ["TestName"] = "Sve_StoreNonTemporal_float",                                                                            ["Method"] = "StoreNonTemporal",                                                                                                                   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreNonTemporalTest.template",  new Dictionary<string, string> { ["TestName"] = "Sve_StoreNonTemporal_double",                                                                           ["Method"] = "StoreNonTemporal",                                                                                                                   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreNonTemporalTest.template",  new Dictionary<string, string> { ["TestName"] = "Sve_StoreNonTemporal_sbyte",                                                                            ["Method"] = "StoreNonTemporal",                                                                                                                   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreNonTemporalTest.template",  new Dictionary<string, string> { ["TestName"] = "Sve_StoreNonTemporal_short",                                                                            ["Method"] = "StoreNonTemporal",                                                                                                                   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreNonTemporalTest.template",  new Dictionary<string, string> { ["TestName"] = "Sve_StoreNonTemporal_int",                                                                              ["Method"] = "StoreNonTemporal",                                                                                                                   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreNonTemporalTest.template",  new Dictionary<string, string> { ["TestName"] = "Sve_StoreNonTemporal_long",                                                                             ["Method"] = "StoreNonTemporal",                                                                                                                   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                        ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreNonTemporalTest.template",  new Dictionary<string, string> { ["TestName"] = "Sve_StoreNonTemporal_byte",                                                                             ["Method"] = "StoreNonTemporal",                                                                                                                   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                         ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreNonTemporalTest.template",  new Dictionary<string, string> { ["TestName"] = "Sve_StoreNonTemporal_ushort",                                                                           ["Method"] = "StoreNonTemporal",                                                                                                                   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreNonTemporalTest.template",  new Dictionary<string, string> { ["TestName"] = "Sve_StoreNonTemporal_uint",                                                                             ["Method"] = "StoreNonTemporal",                                                                                                                   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),
        ("SveStoreNonTemporalTest.template",  new Dictionary<string, string> { ["TestName"] = "Sve_StoreNonTemporal_ulong",                                                                            ["Method"] = "StoreNonTemporal",                                                                                                                   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                       ["ValidateIterResult"] = "(maskArray[i] == 0 && result[i] != 0) || (maskArray[i] == 1 && result[i] != first[i])"}),

        ("SveSimpleVecOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ReciprocalEstimate_float",                                                                           ["Method"] = "ReciprocalEstimate",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReciprocalEstimate(firstOp[i])",     ["GetIterResult"] = "Helpers.ReciprocalEstimate(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ReciprocalEstimate_double",                                                                          ["Method"] = "ReciprocalEstimate",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReciprocalEstimate(firstOp[i])",     ["GetIterResult"] = "Helpers.ReciprocalEstimate(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ReciprocalExponent_float",                                                                           ["Method"] = "ReciprocalExponent",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReciprocalExponent(firstOp[i])",     ["GetIterResult"] = "Helpers.ReciprocalExponent(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ReciprocalExponent_double",                                                                          ["Method"] = "ReciprocalExponent",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReciprocalExponent(firstOp[i])",     ["GetIterResult"] = "Helpers.ReciprocalExponent(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ReciprocalSqrtEstimate_float",                                                                       ["Method"] = "ReciprocalSqrtEstimate",                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReciprocalSqrtEstimate(firstOp[i])", ["GetIterResult"] = "Helpers.ReciprocalSqrtEstimate(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_ReciprocalSqrtEstimate_double",                                                                      ["Method"] = "ReciprocalSqrtEstimate",                                               ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReciprocalSqrtEstimate(firstOp[i])", ["GetIterResult"] = "Helpers.ReciprocalSqrtEstimate(leftOp[i])"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ReciprocalSqrtStep_float",                                                                        ["Method"] = "ReciprocalSqrtStep",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateEntry"] = "result[i] != Helpers.FPReciprocalSqrtStepFused(left[i], right[i])"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ReciprocalSqrtStep_double",                                                                       ["Method"] = "ReciprocalSqrtStep",                                                   ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateEntry"] = "result[i] != Helpers.FPReciprocalSqrtStepFused(left[i], right[i])"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ReciprocalStep_float",                                                                            ["Method"] = "ReciprocalStep",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateEntry"] = "result[i] != Helpers.FPReciprocalStepFused(left[i], right[i])"}),
        ("SveVecBinaryOpValidateTest.template", new Dictionary<string, string> { ["TestName"] = "Sve_ReciprocalStep_double",                                                                           ["Method"] = "ReciprocalStep",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateEntry"] = "result[i] != Helpers.FPReciprocalStepFused(left[i], right[i])"}),

        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement_float",                                                                              ["Method"] = "ReverseElement",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != firstOp[RetElementCount - i - 1]", ["GetIterResult"] = "leftOp[RetElementCount - i - 1]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement_double",                                                                             ["Method"] = "ReverseElement",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != firstOp[RetElementCount - i - 1]", ["GetIterResult"] = "leftOp[RetElementCount - i - 1]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement_sbyte",                                                                              ["Method"] = "ReverseElement",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",                                                                                                                                                        ["ValidateIterResult"] = "result[i] != firstOp[RetElementCount - i - 1]", ["GetIterResult"] = "leftOp[RetElementCount - i - 1]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement_short",                                                                              ["Method"] = "ReverseElement",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                        ["ValidateIterResult"] = "result[i] != firstOp[RetElementCount - i - 1]", ["GetIterResult"] = "leftOp[RetElementCount - i - 1]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement_int",                                                                                ["Method"] = "ReverseElement",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                        ["ValidateIterResult"] = "result[i] != firstOp[RetElementCount - i - 1]", ["GetIterResult"] = "leftOp[RetElementCount - i - 1]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement_long",                                                                               ["Method"] = "ReverseElement",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                        ["ValidateIterResult"] = "result[i] != firstOp[RetElementCount - i - 1]", ["GetIterResult"] = "leftOp[RetElementCount - i - 1]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement_byte",                                                                               ["Method"] = "ReverseElement",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",                                                                                                                             ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",                                                                                                                                                         ["ValidateIterResult"] = "result[i] != firstOp[RetElementCount - i - 1]", ["GetIterResult"] = "leftOp[RetElementCount - i - 1]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement_ushort",                                                                             ["Method"] = "ReverseElement",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != firstOp[RetElementCount - i - 1]", ["GetIterResult"] = "leftOp[RetElementCount - i - 1]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement_uint",                                                                               ["Method"] = "ReverseElement",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != firstOp[RetElementCount - i - 1]", ["GetIterResult"] = "leftOp[RetElementCount - i - 1]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement_ulong",                                                                              ["Method"] = "ReverseElement",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != firstOp[RetElementCount - i - 1]", ["GetIterResult"] = "leftOp[RetElementCount - i - 1]"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement8_short",                                                                             ["Method"] = "ReverseElement8",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",                                                                                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.ReverseElement8(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElement8(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement8_int",                                                                               ["Method"] = "ReverseElement8",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.ReverseElement8(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElement8(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement8_long",                                                                              ["Method"] = "ReverseElement8",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.ReverseElement8(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElement8(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement8_ushort",                                                                            ["Method"] = "ReverseElement8",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReverseElement8(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElement8(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement8_uint",                                                                              ["Method"] = "ReverseElement8",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReverseElement8(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElement8(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement8_ulong",                                                                             ["Method"] = "ReverseElement8",                                                      ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReverseElement8(firstOp[i])",  ["GetIterResult"] = "Helpers.ReverseElement8(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement16_int",                                                                              ["Method"] = "ReverseElement16",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",                                                                                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.ReverseElement16(firstOp[i])", ["GetIterResult"] = "Helpers.ReverseElement16(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement16_long",                                                                             ["Method"] = "ReverseElement16",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.ReverseElement16(firstOp[i])", ["GetIterResult"] = "Helpers.ReverseElement16(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement16_uint",                                                                             ["Method"] = "ReverseElement16",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReverseElement16(firstOp[i])", ["GetIterResult"] = "Helpers.ReverseElement16(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement16_ulong",                                                                            ["Method"] = "ReverseElement16",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReverseElement16(firstOp[i])", ["GetIterResult"] = "Helpers.ReverseElement16(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement32_long",                                                                             ["Method"] = "ReverseElement32",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",                                                                                                                            ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",                                                                                                                                                        ["ValidateIterResult"] = "result[i] != Helpers.ReverseElement32(firstOp[i])", ["GetIterResult"] = "Helpers.ReverseElement32(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_ReverseElement32_ulong",                                                                            ["Method"] = "ReverseElement32",                                                     ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",                                                                                                                                                       ["ValidateIterResult"] = "result[i] != Helpers.ReverseElement32(firstOp[i])", ["GetIterResult"] = "Helpers.ReverseElement32(leftOp[i])"}),

        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_RoundAwayFromZero_float",                                                                           ["Method"] = "RoundAwayFromZero",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.RoundAwayFromZero(firstOp[i]) != result[i]",        ["GetIterResult"] = "Helpers.RoundAwayFromZero(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_RoundAwayFromZero_double",                                                                          ["Method"] = "RoundAwayFromZero",                                                    ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.RoundAwayFromZero(firstOp[i]) != result[i]",       ["GetIterResult"] = "Helpers.RoundAwayFromZero(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_RoundToNearest_float",                                                                              ["Method"] = "RoundToNearest",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.RoundToNearest(firstOp[i]) != result[i]",          ["GetIterResult"] = "Helpers.RoundToNearest(leftOp[i])"}),
            ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_RoundToNearest_double",                                                                             ["Method"] = "RoundToNearest",                                                       ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.RoundToNearest(firstOp[i]) != result[i]",          ["GetIterResult"] = "Helpers.RoundToNearest(leftOp[i])"}),
            ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_RoundToNegativeInfinity_float",                                                                     ["Method"] = "RoundToNegativeInfinity",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.RoundToNegativeInfinity(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.RoundToNegativeInfinity(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_RoundToNegativeInfinity_double",                                                                    ["Method"] = "RoundToNegativeInfinity",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.RoundToNegativeInfinity(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.RoundToNegativeInfinity(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_RoundToPositiveInfinity_float",                                                                     ["Method"] = "RoundToPositiveInfinity",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.RoundToPositiveInfinity(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.RoundToPositiveInfinity(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_RoundToPositiveInfinity_double",                                                                    ["Method"] = "RoundToPositiveInfinity",                                              ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.RoundToPositiveInfinity(firstOp[i]) != result[i]", ["GetIterResult"] = "Helpers.RoundToPositiveInfinity(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_RoundToZero_float",                                                                                 ["Method"] = "RoundToZero",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.RoundToZero(firstOp[i]) != result[i]",             ["GetIterResult"] = "Helpers.RoundToZero(leftOp[i])"}),
        ("SveSimpleVecOpTest.template",       new Dictionary<string, string> { ["TestName"] = "Sve_RoundToZero_double",                                                                                ["Method"] = "RoundToZero",                                                          ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double",                                                                                                                           ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",                                                                                                                                                       ["ValidateIterResult"] = "Helpers.RoundToZero(firstOp[i]) != result[i]",             ["GetIterResult"] = "Helpers.RoundToZero(leftOp[i])"}),

        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestAnyTrue_sbyte",                                                                                 ["Method"] = "TestAnyTrue",                                                        ["MaskBaseType"] = "SByte",   ["Op1Value"] = "Helpers.InitVector<SByte>(_ => Helpers.getMaskSByte())",   ["Op2Value"] = "Helpers.InitVector<SByte>(_ => Helpers.getMaskSByte())",                         ["ValidateEntry"] = "TestAnyTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestAnyTrue_short",                                                                                 ["Method"] = "TestAnyTrue",                                                        ["MaskBaseType"] = "Int16",   ["Op1Value"] = "Helpers.InitVector<Int16>(_ => Helpers.getMaskInt16())",   ["Op2Value"] = "Helpers.InitVector<Int16>(_ => Helpers.getMaskInt16())",                         ["ValidateEntry"] = "TestAnyTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestAnyTrue_int",                                                                                   ["Method"] = "TestAnyTrue",                                                        ["MaskBaseType"] = "Int32",   ["Op1Value"] = "Helpers.InitVector<Int32>(_ => Helpers.getMaskInt32())",   ["Op2Value"] = "Helpers.InitVector<Int32>(_ => Helpers.getMaskInt32())",                         ["ValidateEntry"] = "TestAnyTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestAnyTrue_long",                                                                                  ["Method"] = "TestAnyTrue",                                                        ["MaskBaseType"] = "Int64",   ["Op1Value"] = "Helpers.InitVector<Int64>(_ => Helpers.getMaskInt64())",   ["Op2Value"] = "Helpers.InitVector<Int64>(_ => Helpers.getMaskInt64())",                         ["ValidateEntry"] = "TestAnyTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestAnyTrue_byte",                                                                                  ["Method"] = "TestAnyTrue",                                                        ["MaskBaseType"] = "Byte",    ["Op1Value"] = "Helpers.InitVector<Byte>(_ => Helpers.getMaskByte())",     ["Op2Value"] = "Helpers.InitVector<Byte>(_ => Helpers.getMaskByte())",                           ["ValidateEntry"] = "TestAnyTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestAnyTrue_ushort",                                                                                ["Method"] = "TestAnyTrue",                                                        ["MaskBaseType"] = "UInt16",  ["Op1Value"] = "Helpers.InitVector<UInt16>(_ => Helpers.getMaskUInt16())", ["Op2Value"] = "Helpers.InitVector<UInt16>(_ => Helpers.getMaskUInt16())",                       ["ValidateEntry"] = "TestAnyTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestAnyTrue_uint",                                                                                  ["Method"] = "TestAnyTrue",                                                        ["MaskBaseType"] = "UInt32",  ["Op1Value"] = "Helpers.InitVector<UInt32>(_ => Helpers.getMaskUInt32())", ["Op2Value"] = "Helpers.InitVector<UInt32>(_ => Helpers.getMaskUInt32())",                       ["ValidateEntry"] = "TestAnyTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestAnyTrue_ulong",                                                                                 ["Method"] = "TestAnyTrue",                                                        ["MaskBaseType"] = "UInt64",  ["Op1Value"] = "Helpers.InitVector<UInt64>(_ => Helpers.getMaskUInt64())", ["Op2Value"] = "Helpers.InitVector<UInt64>(_ => Helpers.getMaskUInt64())",                       ["ValidateEntry"] = "TestAnyTrue(op1, op2) != result"}),

        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestFirstTrue_sbyte",                                                                               ["Method"] = "TestFirstTrue",                                                        ["MaskBaseType"] = "SByte",   ["Op1Value"] = "Helpers.InitVector<SByte>(_ => Helpers.getMaskSByte())",     ["Op2Value"] = "Helpers.InitVector<SByte>(_ => Helpers.getMaskSByte())",               ["ValidateEntry"] = "TestFirstTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestFirstTrue_short",                                                                               ["Method"] = "TestFirstTrue",                                                        ["MaskBaseType"] = "Int16",   ["Op1Value"] = "Helpers.InitVector<Int16>(_ => Helpers.getMaskInt16())",     ["Op2Value"] = "Helpers.InitVector<Int16>(_ => Helpers.getMaskInt16())",               ["ValidateEntry"] = "TestFirstTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestFirstTrue_int",                                                                                 ["Method"] = "TestFirstTrue",                                                        ["MaskBaseType"] = "Int32",   ["Op1Value"] = "Helpers.InitVector<Int32>(_ => Helpers.getMaskInt32())",     ["Op2Value"] = "Helpers.InitVector<Int32>(_ => Helpers.getMaskInt32())",               ["ValidateEntry"] = "TestFirstTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestFirstTrue_long",                                                                                ["Method"] = "TestFirstTrue",                                                        ["MaskBaseType"] = "Int64",   ["Op1Value"] = "Helpers.InitVector<Int64>(_ => Helpers.getMaskInt64())",     ["Op2Value"] = "Helpers.InitVector<Int64>(_ => Helpers.getMaskInt64())",               ["ValidateEntry"] = "TestFirstTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestFirstTrue_byte",                                                                                ["Method"] = "TestFirstTrue",                                                        ["MaskBaseType"] = "Byte",    ["Op1Value"] = "Helpers.InitVector<Byte>(_ => Helpers.getMaskByte())",       ["Op2Value"] = "Helpers.InitVector<Byte>(_ => Helpers.getMaskByte())",                 ["ValidateEntry"] = "TestFirstTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestFirstTrue_ushort",                                                                              ["Method"] = "TestFirstTrue",                                                        ["MaskBaseType"] = "UInt16",  ["Op1Value"] = "Helpers.InitVector<UInt16>(_ => Helpers.getMaskUInt16())",   ["Op2Value"] = "Helpers.InitVector<UInt16>(_ => Helpers.getMaskUInt16())",             ["ValidateEntry"] = "TestFirstTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestFirstTrue_uint",                                                                                ["Method"] = "TestFirstTrue",                                                        ["MaskBaseType"] = "UInt32",  ["Op1Value"] = "Helpers.InitVector<UInt32>(_ => Helpers.getMaskUInt32())",   ["Op2Value"] = "Helpers.InitVector<UInt32>(_ => Helpers.getMaskUInt32())",             ["ValidateEntry"] = "TestFirstTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestFirstTrue_ulong",                                                                               ["Method"] = "TestFirstTrue",                                                        ["MaskBaseType"] = "UInt64",  ["Op1Value"] = "Helpers.InitVector<UInt64>(_ => Helpers.getMaskUInt64())",   ["Op2Value"] = "Helpers.InitVector<UInt64>(_ => Helpers.getMaskUInt64())",             ["ValidateEntry"] = "TestFirstTrue(op1, op2) != result"}),

        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestLastTrue_sbyte",                                                                                ["Method"] = "TestLastTrue",                                                        ["MaskBaseType"] = "SByte",   ["Op1Value"] = "Helpers.InitVector<SByte>(_ => Helpers.getMaskSByte())",      ["Op2Value"] = "Helpers.InitVector<SByte>(_ => Helpers.getMaskSByte())",               ["ValidateEntry"] = "TestLastTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestLastTrue_short",                                                                                ["Method"] = "TestLastTrue",                                                        ["MaskBaseType"] = "Int16",   ["Op1Value"] = "Helpers.InitVector<Int16>(_ => Helpers.getMaskInt16())",      ["Op2Value"] = "Helpers.InitVector<Int16>(_ => Helpers.getMaskInt16())",               ["ValidateEntry"] = "TestLastTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestLastTrue_int",                                                                                  ["Method"] = "TestLastTrue",                                                        ["MaskBaseType"] = "Int32",   ["Op1Value"] = "Helpers.InitVector<Int32>(_ => Helpers.getMaskInt32())",      ["Op2Value"] = "Helpers.InitVector<Int32>(_ => Helpers.getMaskInt32())",               ["ValidateEntry"] = "TestLastTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestLastTrue_long",                                                                                 ["Method"] = "TestLastTrue",                                                        ["MaskBaseType"] = "Int64",   ["Op1Value"] = "Helpers.InitVector<Int64>(_ => Helpers.getMaskInt64())",      ["Op2Value"] = "Helpers.InitVector<Int64>(_ => Helpers.getMaskInt64())",               ["ValidateEntry"] = "TestLastTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestLastTrue_byte",                                                                                 ["Method"] = "TestLastTrue",                                                        ["MaskBaseType"] = "Byte",    ["Op1Value"] = "Helpers.InitVector<Byte>(_ => Helpers.getMaskByte())",        ["Op2Value"] = "Helpers.InitVector<Byte>(_ => Helpers.getMaskByte())",                 ["ValidateEntry"] = "TestLastTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestLastTrue_ushort",                                                                               ["Method"] = "TestLastTrue",                                                        ["MaskBaseType"] = "UInt16",  ["Op1Value"] = "Helpers.InitVector<UInt16>(_ => Helpers.getMaskUInt16())",    ["Op2Value"] = "Helpers.InitVector<UInt16>(_ => Helpers.getMaskUInt16())",             ["ValidateEntry"] = "TestLastTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestLastTrue_uint",                                                                                 ["Method"] = "TestLastTrue",                                                        ["MaskBaseType"] = "UInt32",  ["Op1Value"] = "Helpers.InitVector<UInt32>(_ => Helpers.getMaskUInt32())",    ["Op2Value"] = "Helpers.InitVector<UInt32>(_ => Helpers.getMaskUInt32())",             ["ValidateEntry"] = "TestLastTrue(op1, op2) != result"}),
        ("SveTestTest.template",              new Dictionary<string, string> { ["TestName"] = "Sve_TestLastTrue_ulong",                                                                                ["Method"] = "TestLastTrue",                                                        ["MaskBaseType"] = "UInt64",  ["Op1Value"] = "Helpers.InitVector<UInt64>(_ => Helpers.getMaskUInt64())",    ["Op2Value"] = "Helpers.InitVector<UInt64>(_ => Helpers.getMaskUInt64())",             ["ValidateEntry"] = "TestLastTrue(op1, op2) != result"}),

        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeEven_float",                                                                               ["Method"] = "TransposeEven",                                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateEntry"] = "result[i] != left[index * 2] || result[i + 1] != right[index * 2]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeEven_double",                                                                              ["Method"] = "TransposeEven",                                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateEntry"] = "result[i] != left[index * 2] || result[i + 1] != right[index * 2]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeEven_sbyte",                                                                               ["Method"] = "TransposeEven",                                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateEntry"] = "result[i] != left[index * 2] || result[i + 1] != right[index * 2]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeEven_short",                                                                               ["Method"] = "TransposeEven",                                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateEntry"] = "result[i] != left[index * 2] || result[i + 1] != right[index * 2]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeEven_int",                                                                                 ["Method"] = "TransposeEven",                                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateEntry"] = "result[i] != left[index * 2] || result[i + 1] != right[index * 2]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeEven_long",                                                                                ["Method"] = "TransposeEven",                                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateEntry"] = "result[i] != left[index * 2] || result[i + 1] != right[index * 2]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeEven_byte",                                                                                ["Method"] = "TransposeEven",                                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateEntry"] = "result[i] != left[index * 2] || result[i + 1] != right[index * 2]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeEven_ushort",                                                                              ["Method"] = "TransposeEven",                                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateEntry"] = "result[i] != left[index * 2] || result[i + 1] != right[index * 2]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeEven_uint",                                                                                ["Method"] = "TransposeEven",                                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateEntry"] = "result[i] != left[index * 2] || result[i + 1] != right[index * 2]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeEven_ulong",                                                                               ["Method"] = "TransposeEven",                                                        ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateEntry"] = "result[i] != left[index * 2] || result[i + 1] != right[index * 2]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeOdd_float",                                                                                ["Method"] = "TransposeOdd",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Single",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Single", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Single",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSingle()",        ["NextValueOp2"] = "TestLibrary.Generator.GetSingle()",                                                                                        ["ValidateEntry"] = "result[i] != left[index * 2 + 1] || result[i + 1] != right[index * 2 + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeOdd_double",                                                                               ["Method"] = "TransposeOdd",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Double",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Double", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Double",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetDouble()",        ["NextValueOp2"] = "TestLibrary.Generator.GetDouble()",                                                                                        ["ValidateEntry"] = "result[i] != left[index * 2 + 1] || result[i + 1] != right[index * 2 + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeOdd_sbyte",                                                                                ["Method"] = "TransposeOdd",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "SByte",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "SByte",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "SByte",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetSByte()",         ["NextValueOp2"] = "TestLibrary.Generator.GetSByte()",                                                                                         ["ValidateEntry"] = "result[i] != left[index * 2 + 1] || result[i + 1] != right[index * 2 + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeOdd_short",                                                                                ["Method"] = "TransposeOdd",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int16",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int16",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int16",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt16()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt16()",                                                                                         ["ValidateEntry"] = "result[i] != left[index * 2 + 1] || result[i + 1] != right[index * 2 + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeOdd_int",                                                                                  ["Method"] = "TransposeOdd",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int32",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int32",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int32",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt32()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt32()",                                                                                         ["ValidateEntry"] = "result[i] != left[index * 2 + 1] || result[i + 1] != right[index * 2 + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeOdd_long",                                                                                 ["Method"] = "TransposeOdd",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Int64",   ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Int64",  ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Int64",                                                               ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetInt64()",         ["NextValueOp2"] = "TestLibrary.Generator.GetInt64()",                                                                                         ["ValidateEntry"] = "result[i] != left[index * 2 + 1] || result[i + 1] != right[index * 2 + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeOdd_byte",                                                                                 ["Method"] = "TransposeOdd",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "Byte",    ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "Byte",   ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "Byte",                                                                ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetByte()",          ["NextValueOp2"] = "TestLibrary.Generator.GetByte()",                                                                                          ["ValidateEntry"] = "result[i] != left[index * 2 + 1] || result[i + 1] != right[index * 2 + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeOdd_ushort",                                                                               ["Method"] = "TransposeOdd",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt16",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt16", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt16",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt16()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt16()",                                                                                        ["ValidateEntry"] = "result[i] != left[index * 2 + 1] || result[i + 1] != right[index * 2 + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeOdd_uint",                                                                                 ["Method"] = "TransposeOdd",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt32",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt32", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt32",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt32()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt32()",                                                                                        ["ValidateEntry"] = "result[i] != left[index * 2 + 1] || result[i + 1] != right[index * 2 + 1]"}),
        ("SveVecPairBinOpTest.template",      new Dictionary<string, string> { ["TestName"] = "Sve_TransposeOdd_ulong",                                                                                ["Method"] = "TransposeOdd",                                                         ["RetVectorType"] = "Vector",    ["RetBaseType"] = "UInt64",  ["Op1VectorType"] = "Vector",    ["Op1BaseType"] = "UInt64", ["Op2VectorType"] = "Vector",    ["Op2BaseType"] = "UInt64",                                                              ["LargestVectorSize"] = "64", ["NextValueOp1"] = "TestLibrary.Generator.GetUInt64()",        ["NextValueOp2"] = "TestLibrary.Generator.GetUInt64()",                                                                                        ["ValidateEntry"] = "result[i] != left[index * 2 + 1] || result[i + 1] != right[index * 2 + 1]"}),
    ]);
}
