<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworkIdentifier>.NETCoreApp</TargetFrameworkIdentifier>
    <OutputType>exe</OutputType>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <JitOptimizationSensitive>true</JitOptimizationSensitive>
    <!-- The test launches a secondary process and process launch creates
    an infinite event loop in the SocketAsyncEngine on Linux. Since
    runincontext loads even framework assemblies into the unloadable
    context, locals in this loop prevent unloading -->
    <UnloadabilityIncompatible>true</UnloadabilityIncompatible>
    <!-- Times out -->
    <GCStressIncompatible Condition="'$(TargetArchitecture)' == 'arm64' and '$(TargetOS)' == 'OSX'">true</GCStressIncompatible>
  </PropertyGroup>
  <PropertyGroup>
    <!-- On Linux arm coreclr, the updated tracing/eventpipe/common/Microsoft.Diagnostics.NETCore.Client/Microsoft.Diagnostics.NETCore.Client.csproj project
         does not yet work for several eventpipe runtime tests. We segment those tests with the following property and symbol -->
    <UseUpdatedNETCoreClient Condition="!('$(TargetOS)' == 'Linux' And '$(TargetArchitecture)' == 'arm' And '$(RuntimeFlavor)' == 'coreclr')">true</UseUpdatedNETCoreClient>
    <DefineConstants Condition="'$(UseUpdatedNETCoreClient)' == 'true'">$(DefineConstants);UPDATED_NETCORE_CLIENT</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(MSBuildProjectName).cs" />
    <ProjectReference Include="../common/common.csproj" />
    <ProjectReference Condition="'$(UseUpdatedNETCoreClient)' == 'true'" Include="../common/Microsoft.Diagnostics.NETCore.Client/Microsoft.Diagnostics.NETCore.Client.csproj" />
  </ItemGroup>
</Project>
