// FIXME: SIMD causes compile errors on WASI
#ifdef HOST_BROWSER
#ifndef INTERP_WASM_SIMD_INTRINSIC_V_P
#define INTERP_WASM_SIMD_INTRINSIC_V_P(name, arg1, c_intrinsic, wasm_opcode) INTERP_SIMD_INTRINSIC_P_P(INTERP_SIMD_INTRINSIC_ ## name ## arg1, _mono_interp_simd_ ## c_intrinsic, wasm_opcode)
#endif
#ifndef INTERP_WASM_SIMD_INTRINSIC_V_V
#define INTERP_WASM_SIMD_INTRINSIC_V_V(name, arg1, c_intrinsic, wasm_opcode) INTERP_SIMD_INTRINSIC_P_P(INTERP_SIMD_INTRINSIC_ ## name ## arg1, _mono_interp_simd_ ## c_intrinsic, wasm_opcode)
#endif
#ifndef INTERP_WASM_SIMD_INTRINSIC_V_C1
#define INTERP_WASM_SIMD_INTRINSIC_V_C1(name, arg1, c_function, wasm_opcode) INTERP_SIMD_INTRINSIC_P_P(INTERP_SIMD_INTRINSIC_ ## name ## arg1, c_function, wasm_opcode)
#endif
#ifndef INTERP_WASM_SIMD_INTRINSIC_I_V
#define INTERP_WASM_SIMD_INTRINSIC_I_V(name, arg1, c_intrinsic, wasm_opcode) INTERP_SIMD_INTRINSIC_P_P(INTERP_SIMD_INTRINSIC_ ## name ## arg1, _mono_interp_simd_ ## c_intrinsic, wasm_opcode)
#endif
#ifndef INTERP_WASM_SIMD_INTRINSIC_V_VV
#define INTERP_WASM_SIMD_INTRINSIC_V_VV(name, arg1, c_intrinsic, wasm_opcode) INTERP_SIMD_INTRINSIC_P_PP(INTERP_SIMD_INTRINSIC_ ## name ## arg1, _mono_interp_simd_ ## c_intrinsic, wasm_opcode)
#endif
#ifndef INTERP_WASM_SIMD_INTRINSIC_V_VI
#define INTERP_WASM_SIMD_INTRINSIC_V_VI(name, arg1, c_intrinsic, wasm_opcode) INTERP_SIMD_INTRINSIC_P_PP(INTERP_SIMD_INTRINSIC_ ## name ## arg1, _mono_interp_simd_ ## c_intrinsic, wasm_opcode)
#endif
#ifndef INTERP_WASM_SIMD_INTRINSIC_V_C2
#define INTERP_WASM_SIMD_INTRINSIC_V_C2(name, arg1, c_function, wasm_opcode) INTERP_SIMD_INTRINSIC_P_PP(INTERP_SIMD_INTRINSIC_ ## name ## arg1, c_function, wasm_opcode)
#endif
#ifndef INTERP_WASM_SIMD_INTRINSIC_V_VVV
#define INTERP_WASM_SIMD_INTRINSIC_V_VVV(name, arg1, c_intrinsic, wasm_opcode) INTERP_SIMD_INTRINSIC_P_PPP(INTERP_SIMD_INTRINSIC_ ## name ## arg1, _mono_interp_simd_ ## c_intrinsic, wasm_opcode)
#endif
#ifndef INTERP_WASM_SIMD_INTRINSIC_V_C3
#define INTERP_WASM_SIMD_INTRINSIC_V_C3(name, arg1, c_function, wasm_opcode) INTERP_SIMD_INTRINSIC_P_PPP(INTERP_SIMD_INTRINSIC_ ## name ## arg1, c_function, wasm_opcode)
#endif
#else // HOST_BROWSER
#define INTERP_WASM_SIMD_INTRINSIC_V_P(name, arg1, c_intrinsic, wasm_opcode)
#define INTERP_WASM_SIMD_INTRINSIC_V_V(name, arg1, c_intrinsic, wasm_opcode)
#define INTERP_WASM_SIMD_INTRINSIC_V_C1(name, arg1, c_function, wasm_opcode)
#define INTERP_WASM_SIMD_INTRINSIC_I_V(name, arg1, c_intrinsic, wasm_opcode)
#define INTERP_WASM_SIMD_INTRINSIC_V_VV(name, arg1, c_intrinsic, wasm_opcode)
#define INTERP_WASM_SIMD_INTRINSIC_V_VI(name, arg1, c_intrinsic, wasm_opcode)
#define INTERP_WASM_SIMD_INTRINSIC_V_C2(name, arg1, c_function, wasm_opcode)
#define INTERP_WASM_SIMD_INTRINSIC_V_VVV(name, arg1, c_intrinsic, wasm_opcode)
#define INTERP_WASM_SIMD_INTRINSIC_V_C3(name, arg1, c_function, wasm_opcode)
#endif // HOST_BROWSER

// The third argument is the wasm opcode that corresponds to this simd intrinsic, if any.
// Specify -1 if there is no exact 1:1 mapping (the opcode can still be implemented manually in the jiterpreter.)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I1_ADD, interp_v128_i1_op_addition, 110)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I2_ADD, interp_v128_i2_op_addition, 142)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I4_ADD, interp_v128_i4_op_addition, 174)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_R4_ADD, interp_v128_r4_op_addition, 228)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I1_SUB, interp_v128_i1_op_subtraction, 113)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I2_SUB, interp_v128_i2_op_subtraction, 145)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I4_SUB, interp_v128_i4_op_subtraction, 177)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_R4_SUB, interp_v128_r4_op_subtraction, 229)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_BITWISE_AND, interp_v128_op_bitwise_and, 78)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_BITWISE_OR, interp_v128_op_bitwise_or, 80)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_BITWISE_EQUALITY, interp_v128_op_bitwise_equality, -1)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_BITWISE_INEQUALITY, interp_v128_op_bitwise_inequality, -1)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_R4_FLOAT_EQUALITY, interp_v128_r4_float_equality, -1)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_R8_FLOAT_EQUALITY, interp_v128_r8_float_equality, -1)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_EXCLUSIVE_OR, interp_v128_op_exclusive_or, 81)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I1_MULTIPLY, interp_v128_i1_op_multiply, -1)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I2_MULTIPLY, interp_v128_i2_op_multiply, 149)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I4_MULTIPLY, interp_v128_i4_op_multiply, 181)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_R4_MULTIPLY, interp_v128_r4_op_multiply, 230)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_R4_DIVISION, interp_v128_r4_op_division, 231)

INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I1_NEGATION, interp_v128_i1_op_negation, 97)
INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I2_NEGATION, interp_v128_i2_op_negation, 129)
INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I4_NEGATION, interp_v128_i4_op_negation, 161)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I1_LEFT_SHIFT, interp_v128_i1_op_left_shift, 107)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I2_LEFT_SHIFT, interp_v128_i2_op_left_shift, 139)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I4_LEFT_SHIFT, interp_v128_i4_op_left_shift, 171)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I8_LEFT_SHIFT, interp_v128_i8_op_left_shift, 203)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I1_RIGHT_SHIFT, interp_v128_i1_op_right_shift, 108)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I2_RIGHT_SHIFT, interp_v128_i2_op_right_shift, 140)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I4_RIGHT_SHIFT, interp_v128_i4_op_right_shift, 172)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I1_URIGHT_SHIFT, interp_v128_i1_op_uright_shift, 109)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I2_URIGHT_SHIFT, interp_v128_i2_op_uright_shift, 141)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I4_URIGHT_SHIFT, interp_v128_i4_op_uright_shift, 173)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I8_URIGHT_SHIFT, interp_v128_i8_op_uright_shift, 205)

INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_ONES_COMPLEMENT, interp_v128_op_ones_complement, 77)

INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_U2_WIDEN_LOWER, interp_v128_u2_widen_lower, 137)
INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_U2_WIDEN_UPPER, interp_v128_u2_widen_upper, 138)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_U1_NARROW, interp_v128_u1_narrow, 102)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_U1_GREATER_THAN, interp_v128_u1_greater_than, 40)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I1_LESS_THAN, interp_v128_i1_less_than, 37)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_U1_LESS_THAN, interp_v128_u1_less_than, 38)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I2_LESS_THAN, interp_v128_i2_less_than, 47)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I1_EQUALS, interp_v128_i1_equals, 35)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I2_EQUALS, interp_v128_i2_equals, 45)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I4_EQUALS, interp_v128_i4_equals, 55)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_R4_EQUALS, interp_v128_r4_equals, 65)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I8_EQUALS, interp_v128_i8_equals, 214)

INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I1_CREATE_SCALAR, interp_v128_i1_create_scalar, -1)
INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I2_CREATE_SCALAR, interp_v128_i2_create_scalar, -1)
INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I4_CREATE_SCALAR, interp_v128_i4_create_scalar, -1)
INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I8_CREATE_SCALAR, interp_v128_i8_create_scalar, -1)

INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I1_EXTRACT_MSB, interp_v128_i1_extract_msb, -1)
INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I2_EXTRACT_MSB, interp_v128_i2_extract_msb, -1)
INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I4_EXTRACT_MSB, interp_v128_i4_extract_msb, -1)
INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I8_EXTRACT_MSB, interp_v128_i8_extract_msb, -1)

// wasm opcode is 0 because it has a different calling convention
INTERP_SIMD_INTRINSIC_P_PPP (INTERP_SIMD_INTRINSIC_V128_CONDITIONAL_SELECT, interp_v128_conditional_select, -1)

INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I1_CREATE, interp_v128_i1_create, -1)
INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I2_CREATE, interp_v128_i2_create, -1)
INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I4_CREATE, interp_v128_i4_create, -1)
INTERP_SIMD_INTRINSIC_P_P (INTERP_SIMD_INTRINSIC_V128_I8_CREATE, interp_v128_i8_create, -1)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_AND_NOT, interp_v128_and_not, 79)

INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_U2_LESS_THAN_EQUAL, interp_v128_u2_less_than_equal, 52)

// wasm only has a swizzle opcode for i8x16, none of the others
// jiterp has special handling for i1 shuffles to secure a v8 optimization
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I1_SHUFFLE, interp_v128_i1_shuffle, -1)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I2_SHUFFLE, interp_v128_i2_shuffle, -1)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I4_SHUFFLE, interp_v128_i4_shuffle, -1)
INTERP_SIMD_INTRINSIC_P_PP (INTERP_SIMD_INTRINSIC_V128_I8_SHUFFLE, interp_v128_i8_shuffle, -1)

// Wasm PackedSimd (see PackedSimd.cs)
// We automatically generate C wrappers around clang's wasm simd intrinsics for each of these intrinsics
// Last two arguments are the name of the clang C intrinsic and the wasm simd opcode for the operation.
// The first argument is the name of the corresponding method(s) and must be a case sensitive match.
// The second argument specifies the type(s) that are valid in the first argument slot for the method.
// ANY = all types, X4 == 4-byte type (I4/U4/R4), D4 == 4-byte integer (I4/U4), and you can use I/R/U
// For the VV and VVV versions, all the relevant signatures are symmetric, so we only specify one type,
//  i.e. 'V_VV(Add, D1)' -> Add(Vector128<byte>, Vector128<byte>).
// For VI the second arg is always Int32 so that is omitted as well.
// The V_C1/C2/C3 variants use hand-written C functions with the interp intrinsic calling convention.
// Method names here are case sensitive and must match the names in PackedSimd.cs.

INTERP_WASM_SIMD_INTRINSIC_V_P  (Splat, X1, wasm_v128_load8_splat, 0x07)
INTERP_WASM_SIMD_INTRINSIC_V_P  (Splat, X2, wasm_v128_load16_splat, 0x08)
INTERP_WASM_SIMD_INTRINSIC_V_P  (Splat, X4, wasm_v128_load32_splat, 0x09)
INTERP_WASM_SIMD_INTRINSIC_V_P  (Splat, X8, wasm_v128_load64_splat, 0x0a)
INTERP_WASM_SIMD_INTRINSIC_V_C2 (ExtractScalar, I1, interp_packedsimd_extractscalar_i1, 0x15)
INTERP_WASM_SIMD_INTRINSIC_V_C2 (ExtractScalar, U1, interp_packedsimd_extractscalar_u1, 0x16)
INTERP_WASM_SIMD_INTRINSIC_V_C2 (ExtractScalar, I2, interp_packedsimd_extractscalar_i2, 0x18)
INTERP_WASM_SIMD_INTRINSIC_V_C2 (ExtractScalar, U2, interp_packedsimd_extractscalar_u2, 0x19)
INTERP_WASM_SIMD_INTRINSIC_V_C2 (ExtractScalar, D4, interp_packedsimd_extractscalar_i4, 0x1b)
INTERP_WASM_SIMD_INTRINSIC_V_C2 (ExtractScalar, D8, interp_packedsimd_extractscalar_i8, 0x1d)
INTERP_WASM_SIMD_INTRINSIC_V_C2 (ExtractScalar, R4, interp_packedsimd_extractscalar_r4, 0x1f)
INTERP_WASM_SIMD_INTRINSIC_V_C2 (ExtractScalar, R8, interp_packedsimd_extractscalar_r8, 0x21)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (ReplaceScalar, D1, interp_packedsimd_replacescalar_i1, 0x17)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (ReplaceScalar, D2, interp_packedsimd_replacescalar_i2, 0x1a)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (ReplaceScalar, D4, interp_packedsimd_replacescalar_i4, 0x1c)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (ReplaceScalar, D8, interp_packedsimd_replacescalar_i8, 0x1e)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (ReplaceScalar, R4, interp_packedsimd_replacescalar_r4, 0x20)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (ReplaceScalar, R8, interp_packedsimd_replacescalar_r8, 0x22)
// Shuffle has a dedicated implementation in the jiterpreter so the wasm opcode is -1
INTERP_WASM_SIMD_INTRINSIC_V_C3 (Shuffle, D1, interp_packedsimd_shuffle, -1)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Swizzle, D1, wasm_i8x16_swizzle, 0x0e)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Add, D1, wasm_i8x16_add, 0x6e)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Add, D2, wasm_i16x8_add, 0x8e)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Add, D4, wasm_i32x4_add, 0xae)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Add, D8, wasm_i64x2_add, 0xce)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Add, R4, wasm_f32x4_add, 0xe4)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Add, R8, wasm_f64x2_add, 0xf0)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Subtract, D1, wasm_i8x16_sub, 0x71)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Subtract, D2, wasm_i16x8_sub, 0x91)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Subtract, D4, wasm_i32x4_sub, 0xb1)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Subtract, D8, wasm_i64x2_sub, 0xd1)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Subtract, R4, wasm_f32x4_sub, 0xe5)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Subtract, R8, wasm_f64x2_sub, 0xf1)
// There is no i8x16 mul opcode
INTERP_WASM_SIMD_INTRINSIC_V_VV (Multiply, D2, wasm_i16x8_mul, 0x95)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Multiply, D4, wasm_i32x4_mul, 0xb5)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Multiply, D8, wasm_i64x2_mul, 0xd5)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Multiply, R4, wasm_f32x4_mul, 0xe6)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Multiply, R8, wasm_f64x2_mul, 0xf2)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Divide, R4, wasm_f32x4_div, 0xe7)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Divide, R8, wasm_f64x2_div, 0xf3)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Dot, I2, wasm_i32x4_dot_i16x8, 0xba)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Negate, D1, wasm_i8x16_neg, 0x61)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Negate, D2, wasm_i16x8_neg, 0x81)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Negate, D4, wasm_i32x4_neg, 0xa1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Negate, D8, wasm_i64x2_neg, 0xc1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Negate, R4, wasm_f32x4_neg, 0xe1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Negate, R8, wasm_f64x2_neg, 0xed)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Sqrt, R4, wasm_f32x4_sqrt, 0xe3)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Sqrt, R8, wasm_f64x2_sqrt, 0xef)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Ceiling, R4, wasm_f32x4_ceil, 0x67)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Ceiling, R8, wasm_f64x2_ceil, 0x74)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Floor, R4, wasm_f32x4_floor, 0x68)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Floor, R8, wasm_f64x2_floor, 0x75)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Truncate, R4, wasm_f32x4_trunc, 0x69)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Truncate, R8, wasm_f64x2_trunc, 0x7a)
INTERP_WASM_SIMD_INTRINSIC_V_V  (RoundToNearest, R4, wasm_f32x4_nearest, 0x6a)
INTERP_WASM_SIMD_INTRINSIC_V_V  (RoundToNearest, R8, wasm_f64x2_nearest, 0x94)
INTERP_WASM_SIMD_INTRINSIC_V_VI (ShiftLeft, D1, wasm_i8x16_shl, 0x6b)
INTERP_WASM_SIMD_INTRINSIC_V_VI (ShiftLeft, D2, wasm_i16x8_shl, 0x8b)
INTERP_WASM_SIMD_INTRINSIC_V_VI (ShiftLeft, D4, wasm_i32x4_shl, 0xab)
INTERP_WASM_SIMD_INTRINSIC_V_VI (ShiftLeft, D8, wasm_i64x2_shl, 0xcb)
INTERP_WASM_SIMD_INTRINSIC_V_VI (ShiftRightArithmetic, D1, wasm_i8x16_shr, 0x6c)
INTERP_WASM_SIMD_INTRINSIC_V_VI (ShiftRightArithmetic, D2, wasm_i16x8_shr, 0x8c)
INTERP_WASM_SIMD_INTRINSIC_V_VI (ShiftRightArithmetic, D4, wasm_i32x4_shr, 0xac)
INTERP_WASM_SIMD_INTRINSIC_V_VI (ShiftRightArithmetic, D8, wasm_i64x2_shr, 0xcc)
INTERP_WASM_SIMD_INTRINSIC_V_VI (ShiftRightLogical, D1, wasm_u8x16_shr, 0x6d)
INTERP_WASM_SIMD_INTRINSIC_V_VI (ShiftRightLogical, D2, wasm_u16x8_shr, 0x8d)
INTERP_WASM_SIMD_INTRINSIC_V_VI (ShiftRightLogical, D4, wasm_u32x4_shr, 0xad)
INTERP_WASM_SIMD_INTRINSIC_V_VI (ShiftRightLogical, D8, wasm_u64x2_shr, 0xcd)
INTERP_WASM_SIMD_INTRINSIC_V_VV (And, ANY, wasm_v128_and, 0x4e)
INTERP_WASM_SIMD_INTRINSIC_V_VV (AndNot, ANY, wasm_v128_andnot, 0x4f)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Not, ANY, wasm_v128_not, 0x4d)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Or,  ANY, wasm_v128_or,  0x50)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Xor, ANY, wasm_v128_xor, 0x51)
INTERP_WASM_SIMD_INTRINSIC_V_VVV(BitwiseSelect, ANY, wasm_v128_bitselect, 0x52)
INTERP_WASM_SIMD_INTRINSIC_I_V  (AnyTrue, ANY, wasm_v128_any_true, 0x53)
INTERP_WASM_SIMD_INTRINSIC_I_V  (AllTrue, D1, wasm_i8x16_all_true, 0x63)
INTERP_WASM_SIMD_INTRINSIC_I_V  (AllTrue, D2, wasm_i16x8_all_true, 0x83)
INTERP_WASM_SIMD_INTRINSIC_I_V  (AllTrue, D4, wasm_i32x4_all_true, 0xa3)
INTERP_WASM_SIMD_INTRINSIC_I_V  (AllTrue, D8, wasm_i64x2_all_true, 0xc3)
INTERP_WASM_SIMD_INTRINSIC_V_V  (PopCount, U1, wasm_i8x16_popcnt, 0x62)
INTERP_WASM_SIMD_INTRINSIC_I_V  (Bitmask, D1, wasm_i8x16_bitmask, 0x64)
INTERP_WASM_SIMD_INTRINSIC_I_V  (Bitmask, D2, wasm_i16x8_bitmask, 0x84)
INTERP_WASM_SIMD_INTRINSIC_I_V  (Bitmask, D4, wasm_i32x4_bitmask, 0xa4)
INTERP_WASM_SIMD_INTRINSIC_I_V  (Bitmask, D8, wasm_i64x2_bitmask, 0xc4)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareEqual, D1, wasm_i8x16_eq, 0x23)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareEqual, D2, wasm_i16x8_eq, 0x2d)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareEqual, D4, wasm_i32x4_eq, 0x37)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareEqual, D8, wasm_i64x2_eq, 0xd6)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareEqual, R4, wasm_f32x4_eq, 0x41)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareEqual, R8, wasm_f64x2_eq, 0x47)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareNotEqual, D1, wasm_i8x16_ne, 0x24)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareNotEqual, D2, wasm_i16x8_ne, 0x2e)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareNotEqual, D4, wasm_i32x4_ne, 0x38)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareNotEqual, D8, wasm_i64x2_ne, 0xd7)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareNotEqual, R4, wasm_f32x4_ne, 0x42)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareNotEqual, R8, wasm_f64x2_ne, 0x48)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThan, I1, wasm_i8x16_lt, 0x25)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThan, U1, wasm_u8x16_lt, 0x26)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThan, I2, wasm_i16x8_lt, 0x2f)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThan, U2, wasm_u16x8_lt, 0x30)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThan, I4, wasm_i32x4_lt, 0x39)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThan, U4, wasm_u32x4_lt, 0x3a)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThan, I8, wasm_i64x2_lt, 0xd8)
// INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThan, U8, wasm_u64x2_lt, -1)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThan, R4, wasm_f32x4_lt, 0x43)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThan, R8, wasm_f64x2_lt, 0x49)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThanOrEqual, I1, wasm_i8x16_le, 0x29)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThanOrEqual, U1, wasm_u8x16_le, 0x2a)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThanOrEqual, I2, wasm_i16x8_le, 0x33)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThanOrEqual, U2, wasm_u16x8_le, 0x34)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThanOrEqual, I4, wasm_i32x4_le, 0x3d)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThanOrEqual, U4, wasm_u32x4_le, 0x3e)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThanOrEqual, I8, wasm_i64x2_le, 0xda)
// INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThanOrEqual, U8, wasm_u64x2_le, -1)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThanOrEqual, R4, wasm_f32x4_le, 0x45)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareLessThanOrEqual, R8, wasm_f64x2_le, 0x4b)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThan, I1, wasm_i8x16_gt, 0x27)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThan, U1, wasm_u8x16_gt, 0x28)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThan, I2, wasm_i16x8_gt, 0x31)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThan, U2, wasm_u16x8_gt, 0x32)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThan, I4, wasm_i32x4_gt, 0x3b)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThan, U4, wasm_u32x4_gt, 0x3c)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThan, I8, wasm_i64x2_gt, 0xd9)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThan, R4, wasm_f32x4_gt, 0x44)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThan, R8, wasm_f64x2_gt, 0x4a)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThanOrEqual, I1, wasm_i8x16_ge, 0x2b)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThanOrEqual, U1, wasm_u8x16_ge, 0x2c)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThanOrEqual, I2, wasm_i16x8_ge, 0x35)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThanOrEqual, U2, wasm_u16x8_ge, 0x36)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThanOrEqual, I4, wasm_i32x4_ge, 0x3f)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThanOrEqual, U4, wasm_u32x4_ge, 0x40)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThanOrEqual, I8, wasm_i64x2_ge, 0xdb)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThanOrEqual, R4, wasm_f32x4_ge, 0x46)
INTERP_WASM_SIMD_INTRINSIC_V_VV (CompareGreaterThanOrEqual, R8, wasm_f64x2_ge, 0x4c)
INTERP_WASM_SIMD_INTRINSIC_V_VV (ConvertNarrowingSaturateSigned, I2, wasm_i8x16_narrow_i16x8, 0x65)
INTERP_WASM_SIMD_INTRINSIC_V_VV (ConvertNarrowingSaturateSigned, I4, wasm_i16x8_narrow_i32x4, 0x85)
INTERP_WASM_SIMD_INTRINSIC_V_VV (ConvertNarrowingSaturateUnsigned, I2, wasm_u8x16_narrow_i16x8, 0x66)
INTERP_WASM_SIMD_INTRINSIC_V_VV (ConvertNarrowingSaturateUnsigned, I4, wasm_u16x8_narrow_i32x4, 0x86)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyWideningLower, I1, wasm_i16x8_extmul_low_i8x16, 0x9c)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyWideningLower, I2, wasm_i32x4_extmul_low_i16x8, 0xbc)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyWideningLower, I4, wasm_i64x2_extmul_low_i32x4, 0xdc)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyWideningLower, U1, wasm_u16x8_extmul_low_u8x16, 0x9e)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyWideningLower, U2, wasm_u32x4_extmul_low_u16x8, 0xbe)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyWideningLower, U4, wasm_u64x2_extmul_low_u32x4, 0xde)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyWideningUpper, I1, wasm_i16x8_extmul_high_i8x16, 0x9d)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyWideningUpper, I2, wasm_i32x4_extmul_high_i16x8, 0xbd)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyWideningUpper, I4, wasm_i64x2_extmul_high_i32x4, 0xdd)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyWideningUpper, U1, wasm_u16x8_extmul_high_u8x16, 0x9f)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyWideningUpper, U2, wasm_u32x4_extmul_high_u16x8, 0xbf)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyWideningUpper, U4, wasm_u64x2_extmul_high_u32x4, 0xdf)
INTERP_WASM_SIMD_INTRINSIC_V_V  (AddPairwiseWidening, I1, wasm_i16x8_extadd_pairwise_i8x16, 0x7c)
INTERP_WASM_SIMD_INTRINSIC_V_V  (AddPairwiseWidening, U1, wasm_u16x8_extadd_pairwise_u8x16, 0x7d)
INTERP_WASM_SIMD_INTRINSIC_V_V  (AddPairwiseWidening, I2, wasm_i32x4_extadd_pairwise_i16x8, 0x7e)
INTERP_WASM_SIMD_INTRINSIC_V_V  (AddPairwiseWidening, U2, wasm_u32x4_extadd_pairwise_u16x8, 0x7f)
INTERP_WASM_SIMD_INTRINSIC_V_VV (AddSaturate, I1, wasm_i8x16_add_sat, 0x6f)
INTERP_WASM_SIMD_INTRINSIC_V_VV (AddSaturate, U1, wasm_u8x16_add_sat, 0x70)
INTERP_WASM_SIMD_INTRINSIC_V_VV (AddSaturate, I2, wasm_i16x8_add_sat, 0x8f)
INTERP_WASM_SIMD_INTRINSIC_V_VV (AddSaturate, U2, wasm_u16x8_add_sat, 0x90)
INTERP_WASM_SIMD_INTRINSIC_V_VV (SubtractSaturate, I1, wasm_i8x16_sub_sat, 0x72)
INTERP_WASM_SIMD_INTRINSIC_V_VV (SubtractSaturate, U1, wasm_u8x16_sub_sat, 0x73)
INTERP_WASM_SIMD_INTRINSIC_V_VV (SubtractSaturate, I2, wasm_i16x8_sub_sat, 0x92)
INTERP_WASM_SIMD_INTRINSIC_V_VV (SubtractSaturate, U2, wasm_u16x8_sub_sat, 0x93)
INTERP_WASM_SIMD_INTRINSIC_V_VV (MultiplyRoundedSaturateQ15, I2, wasm_i16x8_q15mulr_sat, 0x82)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Min, I1, wasm_i8x16_min, 0x76)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Min, I2, wasm_i16x8_min, 0x96)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Min, I4, wasm_i32x4_min, 0xb6)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Min, U1, wasm_u8x16_min, 0x77)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Min, U2, wasm_u16x8_min, 0x97)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Min, U4, wasm_u32x4_min, 0xb7)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Max, I1, wasm_i8x16_max, 0x78)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Max, I2, wasm_i16x8_max, 0x98)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Max, I4, wasm_i32x4_max, 0xb8)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Max, U1, wasm_u8x16_max, 0x79)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Max, U2, wasm_u16x8_max, 0x99)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Max, U4, wasm_u32x4_max, 0xb9)
INTERP_WASM_SIMD_INTRINSIC_V_VV (AverageRounded, U1, wasm_u8x16_avgr, 0x7b)
INTERP_WASM_SIMD_INTRINSIC_V_VV (AverageRounded, U2, wasm_u16x8_avgr, 0x9b)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Abs, I1, wasm_i8x16_abs, 0x60)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Abs, I2, wasm_i16x8_abs, 0x80)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Abs, I4, wasm_i32x4_abs, 0xa0)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Abs, I8, wasm_i64x2_abs, 0xc0)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Abs, R4, wasm_f32x4_abs, 0xe0)
INTERP_WASM_SIMD_INTRINSIC_V_V  (Abs, R8, wasm_f64x2_abs, 0xec)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Min, R4, wasm_f32x4_min, 0xe8)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Min, R8, wasm_f64x2_min, 0xf4)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Max, R4, wasm_f32x4_max, 0xe9)
INTERP_WASM_SIMD_INTRINSIC_V_VV (Max, R8, wasm_f64x2_max, 0xf5)
INTERP_WASM_SIMD_INTRINSIC_V_VV (PseudoMin, R4, wasm_f32x4_pmin, 0xea)
INTERP_WASM_SIMD_INTRINSIC_V_VV (PseudoMin, R8, wasm_f64x2_pmin, 0xf6)
INTERP_WASM_SIMD_INTRINSIC_V_VV (PseudoMax, R4, wasm_f32x4_pmax, 0xeb)
INTERP_WASM_SIMD_INTRINSIC_V_VV (PseudoMax, R8, wasm_f64x2_pmax, 0xf7)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ConvertToSingle, I4, wasm_f32x4_convert_i32x4, 0xfa)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ConvertToSingle, U4, wasm_f32x4_convert_u32x4, 0xfb)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ConvertToSingle, R8, wasm_f32x4_demote_f64x2_zero, 0x5e)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ConvertToDoubleLower, I4, wasm_f64x2_convert_low_i32x4, 0xfe)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ConvertToDoubleLower, U4, wasm_f64x2_convert_low_u32x4, 0xff)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ConvertToDoubleLower, R8, wasm_f64x2_promote_low_f32x4, 0x5f)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ConvertToInt32Saturate, R4, wasm_i32x4_trunc_sat_f32x4, 0xf8)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ConvertToUInt32Saturate, R4, wasm_u32x4_trunc_sat_f32x4, 0xf9)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ConvertToInt32Saturate, R8, wasm_i32x4_trunc_sat_f64x2_zero, 0xfc)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ConvertToUInt32Saturate, R8, wasm_u32x4_trunc_sat_f64x2_zero, 0xfd)
INTERP_WASM_SIMD_INTRINSIC_V_V  (SignExtendWideningLower, D1, wasm_i16x8_extend_low_i8x16, -1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (SignExtendWideningLower, D2, wasm_i32x4_extend_low_i16x8, -1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (SignExtendWideningLower, D4, wasm_i64x2_extend_low_i32x4, -1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (SignExtendWideningUpper, D1, wasm_i16x8_extend_high_i8x16, -1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (SignExtendWideningUpper, D2, wasm_i32x4_extend_high_i16x8, -1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (SignExtendWideningUpper, D4, wasm_i64x2_extend_high_i32x4, -1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ZeroExtendWideningLower, D1, wasm_u16x8_extend_low_u8x16, -1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ZeroExtendWideningLower, D2, wasm_u32x4_extend_low_u16x8, -1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ZeroExtendWideningLower, D4, wasm_u64x2_extend_low_u32x4, -1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ZeroExtendWideningUpper, D1, wasm_u16x8_extend_high_u8x16, -1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ZeroExtendWideningUpper, D2, wasm_u32x4_extend_high_u16x8, -1)
INTERP_WASM_SIMD_INTRINSIC_V_V  (ZeroExtendWideningUpper, D4, wasm_u64x2_extend_high_u32x4, -1)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadVector128, ANY, interp_packedsimd_load128, 0x0)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadScalarVector128, X4, interp_packedsimd_load32_zero, 0x5c)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadScalarVector128, X8, interp_packedsimd_load64_zero, 0x5d)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadScalarAndSplatVector128, X1, interp_packedsimd_load8_splat, 0x07)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadScalarAndSplatVector128, X2, interp_packedsimd_load16_splat, 0x08)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadScalarAndSplatVector128, X4, interp_packedsimd_load32_splat, 0x09)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadScalarAndSplatVector128, X8, interp_packedsimd_load64_splat, 0x0a)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadWideningVector128, I1, interp_packedsimd_load8x8_s, 0x01)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadWideningVector128, U1, interp_packedsimd_load8x8_u, 0x02)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadWideningVector128, I2, interp_packedsimd_load16x4_s, 0x03)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadWideningVector128, U2, interp_packedsimd_load16x4_u, 0x04)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadWideningVector128, I4, interp_packedsimd_load32x2_s, 0x05)
INTERP_WASM_SIMD_INTRINSIC_V_C1 (LoadWideningVector128, U4, interp_packedsimd_load32x2_u, 0x06)
// FIXME: Specify opcodes and add jiterp support
INTERP_WASM_SIMD_INTRINSIC_V_C3 (LoadScalarAndInsert, X1, interp_packedsimd_load8_lane, -1)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (LoadScalarAndInsert, X2, interp_packedsimd_load16_lane, -1)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (LoadScalarAndInsert, X4, interp_packedsimd_load32_lane, -1)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (LoadScalarAndInsert, X8, interp_packedsimd_load64_lane, -1)
// HACK: These store methods don't return a value but the custom calling convention is sufficient
INTERP_WASM_SIMD_INTRINSIC_V_C2 (Store, ANY, interp_packedsimd_store, -1)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (StoreSelectedScalar, X1, interp_packedsimd_store8_lane, 0x58)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (StoreSelectedScalar, X2, interp_packedsimd_store16_lane, 0x59)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (StoreSelectedScalar, X4, interp_packedsimd_store32_lane, 0x5a)
INTERP_WASM_SIMD_INTRINSIC_V_C3 (StoreSelectedScalar, X8, interp_packedsimd_store64_lane, 0x5b)
