<Project Sdk="Microsoft.NET.Sdk" DefaultTargets="WasmBuildApp">
  <PropertyGroup>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <NoWarn>219</NoWarn>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <RunAnalyzers>false</RunAnalyzers>
    <WasmBuildAppDependsOn>PrepareForWasmBuildApp;$(WasmBuildAppDependsOn)</WasmBuildAppDependsOn>
    <WasmGenerateAppBundle>true</WasmGenerateAppBundle>
    <OutputType>library</OutputType>
    <WasmEmitSymbolMap>true</WasmEmitSymbolMap>
  </PropertyGroup>

  <ItemGroup>
    <WasmExtraFilesToDeploy Include="debugger-driver.html" />
    <WasmExtraFilesToDeploy Include="non-wasm-page.html" />
    <WasmExtraFilesToDeploy Include="wasm-page-without-assets.html" />
    <WasmExtraFilesToDeploy Include="other.js" />
    <WasmExtraFilesToDeploy Include="weather.json" />

    <!-- We want to bundle these assemblies, so build them first -->
    <ProjectReference Include="..\lazy-debugger-test\lazy-debugger-test.csproj" Private="true"/>
    <ProjectReference Include="..\lazy-debugger-test-embedded\lazy-debugger-test-embedded.csproj" Private="true"/>
    <ProjectReference Include="..\library-dependency-debugger-test1\library-dependency-debugger-test1.csproj" Private="true"/>
    <ProjectReference Include="..\library-dependency-debugger-test2\library-dependency-debugger-test2.csproj" Private="true"/>
    <ProjectReference Include="..\debugger-test-with-source-link\debugger-test-with-source-link.csproj" Private="true"/>
    <ProjectReference Include="..\ApplyUpdateReferencedAssembly\ApplyUpdateReferencedAssembly.csproj" />
    <ProjectReference Include="..\debugger-test-with-full-debug-type\debugger-test-with-full-debug-type.csproj" Private="true"/>
    <ProjectReference Include="..\debugger-test-special-char-in-path-#@\debugger-test-special-char-in-path.csproj" Private="true"/>
  </ItemGroup>

  <Target Name="PrepareForWasmBuildApp" DependsOnTargets="Build">
    <Error Condition="!Exists('$(MicrosoftNetCoreAppRuntimePackRidDir)native')"
           Text="Cannot find %24(MicrosoftNetCoreAppRuntimePackRidDir)=$(MicrosoftNetCoreAppRuntimePackRidDir)native. Make sure to set the runtime configuration with %24(RuntimeConfiguration). Current value: $(RuntimeConfiguration)" />

    <PropertyGroup>
      <EnableDefaultWasmAssembliesToBundle>false</EnableDefaultWasmAssembliesToBundle>    
      <WasmAppDir>$(AppDir)</WasmAppDir>
      <WasmMainJSPath>debugger-main.js</WasmMainJSPath>
      <!-- like is used on blazor -->
      <WasmDebugLevel Condition="'$(WasmDebugLevel)'==''">-1</WasmDebugLevel>

      <WasmResolveAssembliesBeforeBuild>true</WasmResolveAssembliesBeforeBuild>
    </PropertyGroup>

    <ItemGroup>
      <WasmAssembliesToBundle Include="$(OutDir)\$(TargetFileName)" />
      <WasmAssembliesToBundle Include="$(OutDir)\debugger-test-with-source-link.dll" />
      <WasmAssembliesToBundle Include="$(OutDir)\debugger-test-with-full-debug-type.dll" />
      <WasmAssemblySearchPaths Include="$(MicrosoftNetCoreAppRuntimePackRidDir)native"/>
      <WasmAssemblySearchPaths Include="$(MicrosoftNetCoreAppRuntimePackRidDir)lib\$(NetCoreAppCurrent)"/>
      <WasmAssembliesToBundle Include="$(OutDir)\debugger-test-special-char-in-path.dll" />

      <WasmExtraFilesToDeploy Include="@(ReferenceCopyLocalPaths)" />
    </ItemGroup>
  </Target>
  <Target Name="PreserveEnCAssembliesFromLinking"
          Condition="'$(TargetOS)' == 'Browser' and '$(EnableAggressiveTrimming)' == 'true'"
          BeforeTargets="ConfigureTrimming">
    <ItemGroup>
      <!-- Don't modify EnC test assemblies -->
      <TrimmerRootAssembly
          Condition="$([System.String]::Copy('%(ResolvedFileToPublish.FileName)%(ResolvedFileToPublish.Extension)').EndsWith('ApplyUpdateReferencedAssembly.dll'))"
          Include="%(ResolvedFileToPublish.FullPath)" />
    </ItemGroup>
  </Target>
  <Target Name="IncludeDeltasInWasmBundle"
          BeforeTargets="PrepareForWasmBuildApp"
          Condition="'$(TargetOS)' == 'Browser'">
    <ItemGroup>
      <!-- FIXME: this belongs in eng/testing/tests.wasm.targets -->
      <!-- FIXME: Can we do something on the Content items in the referenced projects themselves to get this for free? -->
      <WasmFilesToIncludeInFileSystem Include="@(PublishItemsOutputGroupOutputs)"
                                      Condition="$([System.String]::new('%(PublishItemsOutputGroupOutputs.Identity)').EndsWith('.dmeta'))" />
      <WasmFilesToIncludeInFileSystem Include="@(PublishItemsOutputGroupOutputs)"
                                      Condition="$([System.String]::new('%(PublishItemsOutputGroupOutputs.Identity)').EndsWith('.dil'))" />
      <WasmFilesToIncludeInFileSystem Include="@(PublishItemsOutputGroupOutputs)"
                                      Condition="$([System.String]::new('%(PublishItemsOutputGroupOutputs.Identity)').EndsWith('.dpdb'))" />
    </ItemGroup>
  </Target>

  <Import Project="$(MonoProjectRoot)\wasm\build\WasmApp.InTree.targets" />
</Project>
