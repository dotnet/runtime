@page "/"
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Http.Connections;
@using System.Web;
@inject NavigationManager NavigationManager
@implements IDisposable

<h1>Chat Room</h1>
<div>
    @foreach (var chatMessage in chatMessages)
    {
        <p>@chatMessage</p>
    }
</div>

@code {
    private string _hubUrl = string.Empty;
    private HubConnection? _hubConnection;
    private string message = string.Empty;
    private string transport = string.Empty;
    private string scenario = string.Empty;
    private List<string> chatMessages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        GetQueryParameters();
        await Connect();
        if (_hubConnection == null)
        {
            throw new Exception($"Hub connection is not initialized for transport={transport}");
        }

        // wait one second before activating the test scenario
        await Task.Delay(1000);
        switch (scenario.ToLower())
        {
            case "signalrpassmessages":
                await SignalRPassMessages();
                break;
            default:
                await FailAndExit($"{scenario} is invalid test scenario name");
                break;
        }
    }

    private async Task SignalRPassMessages() =>
        await Task.Run(async () =>
            {
                Helper.TestOutputWriteLine($"Client: sends message={message} with CurrentManagedThreadId={Environment.CurrentManagedThreadId}");
                await _hubConnection.SendAsync(
                    "SendMessage",
                    message,
                    Environment.CurrentManagedThreadId);
            });

    private void GetQueryParameters()
    {
        var uri = new Uri(NavigationManager.Uri);
        if (string.IsNullOrEmpty(uri.Query))
        {
            throw new Exception("Query string with parameters 'test', 'message' and 'transport' are required");
        }
        var parameters = HttpUtility.ParseQueryString(uri.Query);
        if (parameters == null)
        {
            throw new Exception("Query string with parameters  'test', 'message' and 'transport' are required");
        }
        scenario = Helper.GetValue(parameters, "test");
        transport = Helper.GetValue(parameters, "transport");
        message = $"[{transport} {Helper.GetValue(parameters, "message")}]" ;
    }

    private async Task Connect()
    {
        _hubUrl = NavigationManager.BaseUri + "chathub";
        HttpTransportType httpTransportType = Helper.StringToTransportType(transport);
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl, options =>
                {
                    options.Transports = httpTransportType;
                })
            .Build();

        _hubConnection.On<string>("ReceiveMessage", async (message) =>
        {
            chatMessages.Add(message);
            await SucceedAndExit(message);
        });

        await _hubConnection.StartAsync();
    }

    private async Task SucceedAndExit(string message)
    {
        Helper.TestOutputWriteLine($"Client: sends confirmation of receiving the reply from server = {message}, tread receiving the reply = {Environment.CurrentManagedThreadId}");
        // on this message server calls "Environment.Exit(0)"
        await _hubConnection.SendAsync("ConfirmClientReceivedMessageAndExitWithSuccess", message);
        await DisposeHubConnection();
        Console.WriteLine($"WASM EXIT 0");
    }

    private async Task FailAndExit(string message)
    {
        int code = 1;
        await _hubConnection.SendAsync("Exit", code);
        await DisposeHubConnection();
        Console.WriteLine($"WASM EXIT {code}");
        throw new Exception(message);
    }

    public void Dispose() => DisposeHubConnection().GetAwaiter().GetResult();

    private async Task DisposeHubConnection()
    {
        Console.WriteLine("DisposeHubConnection");
        if (_hubConnection != null)
        {
            _hubConnection.Remove("ReceiveMessage");
            await _hubConnection.DisposeAsync();
            _hubConnection = null;
        }
    }
}
