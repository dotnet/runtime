<Project>
  <UsingTask TaskName="WasmAppBuilder" AssemblyFile="$(WasmAppBuilderTasksAssemblyPath)" />
  <UsingTask TaskName="WasmLoadAssembliesAndReferences" AssemblyFile="$(WasmAppBuilderTasksAssemblyPath)" />

  <!--
      Required public items/properties:
      - $(WasmMainJSPath)
      - @(WasmAssembliesToBundle)    - list of assemblies to package as the wasm app
          - %(_InternalForceInterpret) metadata   - if true, then skips this assembly from the AOT step.
                                                    Error for this to be set with AOTMode=LLVMOnly

      - $(EMSDK_PATH)      - points to the emscripten sdk location.

      Public properties (optional):
      - $(WasmAppDir)        - AppBundle dir (Defaults to `$(OutputPath)\$(Configuration)\AppBundle`)
      - $(WasmMainAssemblyFileName)- Defaults to $(TargetFileName)
      - $(WasmBuildNative)   - Whenever to build the native executable. Defaults to false.
      - $(WasmNativeStrip)   - Whenever to strip the native executable. Defaults to true.
      - $(WasmLinkIcalls)    - Whenever to link out unused icalls. Defaults to $(WasmBuildNative).
      - $(RunAOTCompilation) - Defaults to false.

      - $(WasmDebugLevel)
                              > 0 enables debugging and sets the debug log level to debug_level
                              == 0 disables debugging and enables interpreter optimizations
                              < 0 enabled debugging and disables debug logging.

      - $(WasmNativeDebugSymbols) - Build with native debug symbols, useful only with `$(RunAOTCompilation)`, or `$(WasmBuildNative)`
                                    Defaults to true.
      - $(WasmDedup)         - Whenever to dedup generic instances when using AOT. Defaults to true.

      - $(WasmProfilers)     - Profilers to use
      - $(AOTMode)           - Defaults to `LLVMOnlyInterp`
      - $(AOTProfilePath)    - profile data file to be used for profile-guided optimization
      - $(InvariantGlobalization)       - Whenever to disable ICU. Defaults to false.

      - $(WasmResolveAssembliesBeforeBuild) - Resolve the assembly dependencies. Defaults to false
      - $(WasmAssemblySearchPaths)          - used for resolving assembly dependencies
      - $(WasmSkipMissingAssemblies)        - Don't fail on any missing dependencies

      - $(WasmGenerateAppBundle)            - Controls whether an app bundle should be generated.
                                              Defaults to true.
                                              This is useful for projects that want to handle their own
                                              packaging, or app bundle generation, eg. Blazor.

      - $(WasmStripAOTAssemblies)           - Whether to run `mono-cil-strip` on the assemblies.
                                              Always set to false!

      - $(WasmBuildAppAfterThisTarget)      - This target is used as `AfterTargets` for `WasmBuildApp. this
                                              is what triggers the wasm app building. Defaults to `Publish`.

      - $(EmccVerbose)                      - Set to false to disable verbose emcc output.

      - $(EmccLinkOptimizationFlag)         - Optimization flag to use for the link step
      - $(EmccCompileOptimizationFlag)      - Optimization flag to use for compiling native files

      - $(EmccFlags)                        - Emcc flags used for both compiling native files, and linking
      - $(EmccExtraLDFlags)                 - Extra emcc flags for linking
      - $(EmccExtraCFlags)                  - Extra emcc flags for compiling native files


      Public items:
      - @(WasmExtraFilesToDeploy) - Files to copy to $(WasmAppDir).
                                    (relative path can be set via %(TargetPath) metadata)
      - @(WasmFilesToIncludeInFileSystem) - Files to include in the vfs
      - @(WasmNativeAsset)        - Native files to be added to `NativeAssets` in the bundle.

      - @(WasmExtraConfig)        - json elements to add to `mono-config.json`
                                    Eg. <WasmExtraConfig Include="enable_profiler" Value="true" />

                                    - Value attribute can have a number, bool, quoted string, or json string

                                    <WasmExtraConfig Include="json" Value="{ &quot;abc&quot;: 4 }" />
                                    <WasmExtraConfig Include="string_val" Value="&quot;abc&quot;" />
                                    <WasmExtraConfig Include="string_with_json" Value="&quot;{ &quot;abc&quot;: 4 }&quot;" />
  -->

  <PropertyGroup>
    <WasmDedup Condition="'$(WasmDedup)' == ''">false</WasmDedup>

    <!--<WasmStripAOTAssemblies Condition="'$(AOTMode)' == 'LLVMOnlyInterp'">false</WasmStripAOTAssemblies>-->
    <!--<WasmStripAOTAssemblies Condition="'$(WasmStripAOTAssemblies)' == ''">$(RunAOTCompilation)</WasmStripAOTAssemblies>-->
    <WasmStripAOTAssemblies>false</WasmStripAOTAssemblies>

    <MicrosoftNetCoreAppRuntimePackDir Condition="'$(MicrosoftNetCoreAppRuntimePackDir)' == ''">$([MSBuild]::NormalizeDirectory($(NuGetPackageRoot), 'microsoft.netcore.app.runtime.mono.browser-wasm', '$(BundledNETCoreAppPackageVersion)'))</MicrosoftNetCoreAppRuntimePackDir>
    <MicrosoftNetCoreAppRuntimePackRidDir Condition="'$(MicrosoftNetCoreAppRuntimePackRidDir)' == ''">$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackDir), 'runtimes', 'browser-wasm'))</MicrosoftNetCoreAppRuntimePackRidDir>
    <MicrosoftNetCoreAppRuntimePackRidDir>$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackRidDir)))</MicrosoftNetCoreAppRuntimePackRidDir>
    <MicrosoftNetCoreAppRuntimePackRidNativeDir>$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackRidDir), 'native'))</MicrosoftNetCoreAppRuntimePackRidNativeDir>

    <_BeforeWasmBuildAppDependsOn />
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)WasmApp.Native.targets" />

  <!-- Having this separate target allows users to cleanly add After/BeforeTargets for this -->
  <Target Name="WasmBuildApp" AfterTargets="$(WasmBuildAppAfterThisTarget)" />

  <Target Name="_WasmCoreBuild" BeforeTargets="WasmBuildApp" DependsOnTargets="$(WasmBuildAppDependsOn)" />

  <Target Name="_BeforeWasmBuildApp" DependsOnTargets="$(_BeforeWasmBuildAppDependsOn)">
    <Error Condition="'$(IntermediateOutputPath)' == ''" Text="%24(IntermediateOutputPath) property needs to be set" />
    <Error Condition="!Exists('$(MicrosoftNetCoreAppRuntimePackRidDir)')" Text="MicrosoftNetCoreAppRuntimePackRidDir=$(MicrosoftNetCoreAppRuntimePackRidDir) doesn't exist" />
    <Error Condition="@(WasmAssembliesToBundle->Count()) == 0" Text="WasmAssembliesToBundle item is empty. No assemblies to process" />

    <PropertyGroup>
      <WasmGenerateAppBundle Condition="'$(WasmGenerateAppBundle)' == ''">true</WasmGenerateAppBundle>
      <WasmAppDir Condition="'$(WasmAppDir)' == ''">$([MSBuild]::NormalizeDirectory($(OutputPath), 'AppBundle'))</WasmAppDir>
      <WasmMainAssemblyFileName Condition="'$(WasmMainAssemblyFileName)' == ''">$(TargetFileName)</WasmMainAssemblyFileName>

      <WasmAppDir>$([MSBuild]::NormalizeDirectory($(WasmAppDir)))</WasmAppDir>
      <!-- emcc, and mono-aot-cross don't like relative paths for output files -->
      <_WasmIntermediateOutputPath>$([MSBuild]::NormalizeDirectory($(IntermediateOutputPath), 'wasm'))</_WasmIntermediateOutputPath>
    </PropertyGroup>

    <MakeDir Directories="$(_WasmIntermediateOutputPath)" />
    <ItemGroup>
      <_WasmAssembliesInternal Include="@(WasmAssembliesToBundle->Distinct())" />

      <_WasmSatelliteAssemblies Include="@(_WasmAssembliesInternal)" />
      <_WasmSatelliteAssemblies Remove="@(_WasmSatelliteAssemblies)" Condition="!$([System.String]::Copy('%(Identity)').EndsWith('.resources.dll'))" />
      <!-- FIXME: Only include the ones with valid culture name -->
      <_WasmSatelliteAssemblies CultureName="$([System.IO.Directory]::GetParent('%(Identity)').Name)" />

      <_WasmAssembliesInternal Remove="@(_WasmSatelliteAssemblies)" />
    </ItemGroup>
  </Target>

  <Target Name="_WasmGenerateAppBundle" Condition="'$(WasmGenerateAppBundle)' == 'true'">
    <Error Condition="'$(WasmMainJSPath)' == ''" Text="%24(WasmMainJSPath) property needs to be set" />

    <PropertyGroup>
      <WasmIcuDataFileName Condition="'$(InvariantGlobalization)' != 'true'">icudt.dat</WasmIcuDataFileName>

      <_HasDotnetWasm Condition="'%(WasmNativeAsset.FileName)%(WasmNativeAsset.Extension)' == 'dotnet.wasm'">true</_HasDotnetWasm>
      <_HasDotnetJs Condition="'%(WasmNativeAsset.FileName)%(WasmNativeAsset.Extension)' == 'dotnet.js'">true</_HasDotnetJs>
    </PropertyGroup>

    <ItemGroup>
      <!-- If dotnet.{wasm,js} weren't added already (eg. AOT can add them), then add the default ones -->
      <WasmNativeAsset Include="$(MicrosoftNetCoreAppRuntimePackRidNativeDir)dotnet.wasm" Condition="'$(_HasDotnetWasm)' != 'true'" />
      <WasmNativeAsset Include="$(MicrosoftNetCoreAppRuntimePackRidNativeDir)dotnet.js" Condition="'$(_HasDotnetJs)' != 'true'" />

      <WasmNativeAsset Include="$(MicrosoftNetCoreAppRuntimePackRidNativeDir)$(WasmIcuDataFileName)" Condition="'$(InvariantGlobalization)' != 'true'" />
      <WasmNativeAsset Include="$(MicrosoftNetCoreAppRuntimePackRidNativeDir)dotnet.timezones.blat" />
    </ItemGroup>

    <WasmAppBuilder
      AppDir="$(WasmAppDir)"
      MainJS="$(WasmMainJSPath)"
      Assemblies="@(_WasmAssembliesInternal)"
      InvariantGlobalization="$(InvariantGlobalization)"
      SatelliteAssemblies="@(_WasmSatelliteAssemblies)"
      FilesToIncludeInFileSystem="@(WasmFilesToIncludeInFileSystem)"
      IcuDataFileName="$(WasmIcuDataFileName)"
      RemoteSources="@(WasmRemoteSources)"
      ExtraFilesToDeploy="@(WasmExtraFilesToDeploy)"
      ExtraConfig="@(WasmExtraConfig)"
      NativeAssets="@(WasmNativeAsset)"
      DebugLevel="$(WasmDebugLevel)">
      <Output TaskParameter="FileWrites" ItemName="FileWrites" />
    </WasmAppBuilder>

    <CallTarget Targets="_GenerateRunV8Script" Condition="'$(WasmGenerateRunV8Script)' == 'true'" />
  </Target>

  <Target Name="_GenerateRunV8Script">
    <PropertyGroup>
      <WasmRunV8ScriptPath Condition="'$(WasmRunV8ScriptPath)' == ''">$(WasmAppDir)run-v8.sh</WasmRunV8ScriptPath>
    </PropertyGroup>

    <Error Condition="'$(WasmMainAssemblyFileName)' == ''" Text="%24(WasmMainAssemblyFileName) property needs to be set for generating $(WasmRunV8ScriptPath)." />
    <WriteLinesToFile
      File="$(WasmRunV8ScriptPath)"
      Lines="v8 --expose_wasm runtime.js -- ${RUNTIME_ARGS} --run $(WasmMainAssemblyFileName) $*"
      Overwrite="true">
    </WriteLinesToFile>

    <ItemGroup>
      <FileWrites Include="$(WasmRunV8ScriptPath)" />
    </ItemGroup>

    <Exec Condition="'$(OS)' != 'Windows_NT'" Command="chmod a+x $(WasmRunV8ScriptPath)" />
  </Target>

  <Target Name="_WasmResolveReferences" Condition="'$(WasmResolveAssembliesBeforeBuild)' == 'true'">
    <WasmLoadAssembliesAndReferences
      Assemblies="@(_WasmAssembliesInternal)"
      AssemblySearchPaths="@(WasmAssemblySearchPaths)"
      SkipMissingAssemblies="$(WasmSkipMissingAssemblies)">
      <Output TaskParameter="ReferencedAssemblies" ItemName="_TmpWasmAssemblies" />
    </WasmLoadAssembliesAndReferences>

    <ItemGroup>
      <_WasmAssembliesInternal Remove="@(_WasmAssembliesInternal)" />
      <_WasmAssembliesInternal Include="@(_TmpWasmAssemblies)" />
    </ItemGroup>
  </Target>

  <Target Name="_AfterWasmBuildApp">
    <ItemGroup>
      <WasmAssembliesFinal Include="@(_WasmAssembliesInternal)" LlvmBitCodeFile="" />
    </ItemGroup>
  </Target>
</Project>
