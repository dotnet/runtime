<Project>
  <UsingTask TaskName="MonoAOTCompiler" AssemblyFile="$(MonoAOTCompilerTasksAssemblyPath)" />
  <UsingTask TaskName="WasmAppBuilder" AssemblyFile="$(WasmAppBuilderTasksAssemblyPath)" />
  <UsingTask TaskName="WasmAOT" AssemblyFile="$(WasmAppBuilderTasksAssemblyPath)" />
  <UsingTask TaskName="WasmLoadAssembliesAndReferences" AssemblyFile="$(WasmAppBuilderTasksAssemblyPath)" />
  <UsingTask TaskName="PInvokeTableGenerator" AssemblyFile="$(WasmAppBuilderTasksAssemblyPath)" />

  <!--
      Public properties (required):
      - $(WasmBuildDir)    - Directory where build artifacts are stored (required if WasmBuildNative==true)
      - $(WasmAppDir)      - AppBundle dir
      - $(WasmMainAssemblyPath)
      - $(WasmMainJSPath)
      - $(EMSDK_PATH)      - points to the emscripten sdk location.

      Public properties (optional):
      - $(WasmBuildNative)   - Whenever to build the native executable. Defaults to false.
      - $(WasmNativeStrip)   - Whenever to strip the native executable. Defaults to true.
      - $(RunAOTCompilation) - Defaults to false.
      - $(WasmDebugLevel)

      - $(WasmProfilers)     - Profilers to use
      - $(AOTMode)           - Defaults to `LLVMOnly`
      - $(AOTProfilePath)    - profile data file to be used for profile-guided optimization
      - $(WasmInvariantGlobalization)

      - $(WasmResolveAssembliesBeforeBuild) - Resolve the assembly dependencies. Defaults to false
      - $(WasmAssemblySearchPaths)          - used for resolving assembly dependencies
      - $(WasmSkipMissingAssemblies)        - Don't fail on any missing dependencies

      Public items:
      - @(WasmExtraFilesToDeploy) - Files to copy to $(WasmBuildDir).
                                    (relative path can be set via %(TargetPath) metadata)
      - @(WasmSatelliteAssemblies)
      - @(WasmFilesToIncludeInFileSystem) - Files to include in the vfs

      - @(WasmExtraConfig)        - json elements to add to `mono-config.js`
                                    Eg. <WasmExtraConfig Include="enable_profiler" Value="true" />

                                    - Value attribute can have a number, bool, quoted string, or json string

                                    <WasmExtraConfig Include="json" Value="{ &quot;abc&quot;: 4 }" />
                                    <WasmExtraConfig Include="string_val" Value="&quot;abc&quot;" />
                                    <WasmExtraConfig Include="string_with_json" Value="&quot;{ &quot;abc&quot;: 4 }&quot;" />
  -->

  <PropertyGroup>
    <WasmBuildNative Condition="'$(WasmBuildNative)' == ''">false</WasmBuildNative>
    <WasmBuildNative Condition="'$(RunAOTCompilation)' == 'true'">true</WasmBuildNative>
    <WasmNativeStrip>true</WasmNativeStrip>
  </PropertyGroup>

  <Target Name="WasmBuildApp" AfterTargets="Publish" />

  <Target Name="_WasmAotCompileApp" Condition="'$(RunAOTCompilation)' == 'true'">
    <ItemGroup>
      <MonoAOTCompilerDefaultAotArguments Include="no-opt" />
      <MonoAOTCompilerDefaultAotArguments Include="static" />
      <MonoAOTCompilerDefaultAotArguments Include="direct-icalls" />
      <MonoAOTCompilerDefaultAotArguments Include="deterministic" />
    </ItemGroup>
    <ItemGroup>
      <_AotInputAssemblies Include="@(_WasmAssemblies->Distinct())">
        <AotArguments>@(MonoAOTCompilerDefaultAotArguments, ';')</AotArguments>
        <ProcessArguments>@(MonoAOTCompilerDefaultProcessArguments, ';')</ProcessArguments>
      </_AotInputAssemblies>

      <_WasmAssemblies Remove="@(_WasmAssemblies)" />
    </ItemGroup>
    <PropertyGroup>
      <AOTMode Condition="'$(AOTMode)' == '' and '$(AOTProfilePath)' != ''">AotInterp</AOTMode>
      <AOTMode Condition="'$(AOTMode)' == ''">LLVMOnly</AOTMode>
    </PropertyGroup>

    <MonoAOTCompiler
      CompilerBinaryPath="$(MicrosoftNetCoreAppRuntimePackRidDir)native\cross\$(PackageRID)\mono-aot-cross"
      Mode="$(AOTMode)"
      OutputType="AsmOnly"
      Assemblies="@(_AotInputAssemblies)"
      UseAotDataFile="false"
      AOTProfilePath="$(AOTProfilePath)"
      Profilers="$(WasmProfilers)"
      AotModulesTablePath="$(WasmBuildDir)driver-gen.c"
      UseLLVM="true"
      DisableParallelAot="true"
      LLVMPath="$(EMSDK_PATH)\upstream\bin">
      <Output TaskParameter="CompiledAssemblies" ItemName="_WasmAssemblies" />
      <Output TaskParameter="FileWrites" ItemName="FileWrites" />
    </MonoAOTCompiler>
  </Target>

  <Target Name="_WasmResolveReferences" Condition="'$(WasmResolveAssembliesBeforeBuild)' == 'true'">
    <WasmLoadAssembliesAndReferences
      Assemblies="@(_WasmAssemblies)"
      AssemblySearchPaths="@(WasmAssemblySearchPaths)"
      SkipMissingAssemblies="$(WasmSkipMissingAssemblies)">
      <Output TaskParameter="ReferencedAssemblies" ItemName="_TmpWasmAssemblies" />
    </WasmLoadAssembliesAndReferences>

    <ItemGroup>
      <_WasmAssemblies Remove="@(_WasmAssemblies)" />
      <_WasmAssemblies Include="@(_TmpWasmAssemblies)" />
    </ItemGroup>
  </Target>

  <Target Name="_BeforeWasmBuildApp">
      <Error Condition="'$(WasmMainAssemblyPath)' == ''" Text="%24(WasmMainAssemblyPath) property needs to be set" />
      <Error Condition="!Exists('$(WasmMainAssemblyPath)')" Text="WasmMainAssemblyPath=$(WasmMainAssemblyPath) does not exist" />
      <Error Condition="'$(WasmAppDir)' == ''" Text="%24(WasmAppDir) property needs to be set" />
      <Error Condition="'$(WasmBuildNative)' == 'true' and '$(WasmBuildDir)' == ''" Text="%24(WasmBuildDir) property needs to be set" />
      <Error Condition="!Exists('$(MicrosoftNetCoreAppRuntimePackRidDir)')" Text="MicrosoftNetCoreAppRuntimePackRidDir=$(MicrosoftNetCoreAppRuntimePackRidDir) doesn't exist" />
      <Error Condition="'$(WasmMainJSPath)' == ''" Text="%24(WasmMainJSPath) property needs to be set" />
      <ItemGroup>
          <_WasmAssemblies Include="$(WasmMainAssemblyPath);@(WasmAssembliesToBundle)" />
      </ItemGroup>
  </Target>

  <Target Name="_WasmBuildApp" BeforeTargets="WasmBuildApp" DependsOnTargets="$(WasmBuildAppDependsOn)">
    <WasmAppBuilder
      AppDir="$(WasmAppDir)"
      MicrosoftNetCoreAppRuntimePackDir="$(MicrosoftNetCoreAppRuntimePackRidDir)"
      MainJS="$(WasmMainJSPath)"
      Assemblies="@(_WasmAssemblies)"
      InvariantGlobalization="$(WasmInvariantGlobalization)"
      SatelliteAssemblies="@(WasmSatelliteAssemblies)"
      FilesToIncludeInFileSystem="@(WasmFilesToIncludeInFileSystem)"
      IcuDataFileName="$(WasmIcuDataFileName)"
      RemoteSources="@(WasmRemoteSources)"
      ExtraFilesToDeploy="@(WasmExtraFilesToDeploy)"
      ExtraConfig="@(WasmExtraConfig)"
      DebugLevel="$(WasmDebugLevel)">
      <Output TaskParameter="FileWrites" ItemName="FileWrites" />
    </WasmAppBuilder>

    <CallTarget Targets="_GenerateRunV8Script" Condition="'$(WasmGenerateRunV8Script)' == 'true'" />
  </Target>

  <Target Name="_AfterWasmBuildApp" AfterTargets="_WasmBuildApp">
    <!-- Run mono-cil-strip on the assemblies -->
    <!-- TODO: replace this with a linker task -->
    <ItemGroup>
      <_managedAppAssemblies Include="$(WasmAppDir)managed\*.dll"/>
    </ItemGroup>
    <!-- '$(ArchiveTests)' != 'true' is to skip on CI for now -->
    <Exec Condition="'$(RunAOTCompilation)' == 'true' and '$(ArchiveTests)' != 'true'" Command="mono-cil-strip -q %(_managedAppAssemblies.Identity)" />
  </Target>

  <Target Name="_WasmBuildNative" DependsOnTargets="_WasmAotCompileApp;_GenerateDriverGenC" Condition="'$(WasmBuildNative)' == 'true'">
    <PropertyGroup>
      <EmccFlagsFile>$(MicrosoftNetCoreAppRuntimePackRidDir)native\src\emcc-flags.txt</EmccFlagsFile>
      <RuntimeEmccVersionFile>$(MicrosoftNetCoreAppRuntimePackRidDir)native\src\emcc-version.txt</RuntimeEmccVersionFile>
      <EmccPublishVersionFile>$(WasmBuildDir)emcc-version.txt</EmccPublishVersionFile>
    </PropertyGroup>
    <ReadLinesFromFile File="$(EmccFlagsFile)">
        <Output TaskParameter="Lines" PropertyName="_DefaultEmccFlags" />
    </ReadLinesFromFile>

    <PropertyGroup>
      <EmccFlags>$(_DefaultEmccFlags) $(EmccFlags)</EmccFlags>
      <EmccFlags>$(EmccFlags) -s DISABLE_EXCEPTION_CATCHING=0</EmccFlags>
      <EmccFlags Condition="'$(RunAOTCompilation)' == 'true'">$(EmccFlags) -DENABLE_AOT=1 -DDRIVER_GEN=1</EmccFlags>
      <_EmsdkEnvSourceCommand>source $(EMSDK_PATH)/emsdk_env.sh &gt; /dev/null 2&gt;&amp;1</_EmsdkEnvSourceCommand>
      <_EmccCommand>$(_EmsdkEnvSourceCommand) &amp;&amp; emcc</_EmccCommand>
    </PropertyGroup>

    <ReadLinesFromFile File="$(RuntimeEmccVersionFile)">
        <Output TaskParameter="Lines" PropertyName="RuntimeEmccVersion" />
    </ReadLinesFromFile>

    <Exec Command="bash -c '$(_EmccCommand) --version | head -1 > emcc-version.txt'" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(WasmBuildDir)" />
    <ReadLinesFromFile File="$(EmccPublishVersionFile)">
        <Output TaskParameter="Lines" PropertyName="EmccVersion" />
    </ReadLinesFromFile>
    <Error Condition="'$(RuntimeEmccVersion)' != '$(EmccVersion)'" Text="Emscripten version mismatch, expected '$(RuntimeEmccVersion)', got '$(EmccVersion)'"/>

   <ItemGroup>
      <_WasmPInvokeModules Include="libSystem.Native" />
      <_WasmPInvokeModules Include="libSystem.IO.Compression.Native" />
      <_WasmPInvokeModules Include="libSystem.Globalization.Native" />
      <_WasmPInvokeAssemblies Include="$(WasmBuildDir)\*.dll" />
   </ItemGroup>
   <!--This pinvoke-table.h will be used instead of the one in the runtime pack because of -I$(WasmBuildDir) -->
   <PInvokeTableGenerator
     Modules="@(_WasmPInvokeModules)"
     Assemblies="@(_WasmPInvokeAssemblies)"
     OutputPath="$(WasmBuildDir)pinvoke-table.h" />

   <ItemGroup>
     <_WasmObjects Include="libmono-ee-interp.a"/>
     <_WasmObjects Include="libmonosgen-2.0.a"/>
     <_WasmObjects Include="libmono-ilgen.a"/>
     <_WasmObjects Include="libmono-icall-table.a"/>
     <_WasmObjects Include="libSystem.Native.a"/>
     <_WasmObjects Include="libSystem.IO.Compression.Native.a"/>
     <_WasmObjects Include="libmono-profiler-aot.a"/>
     <_WasmObjects Include="libicuuc.a"/>
     <_WasmObjects Include="libicui18n.a"/>
     <_WasmObjects Include="driver.o"/>
     <_WasmObjects Include="pinvoke.o"/>
     <_WasmObjects Include="corebindings.o"/>
   </ItemGroup>

   <PropertyGroup>
     <_WasmIncludeDir>$(MicrosoftNetCoreAppRuntimePackRidDir)native/include</_WasmIncludeDir>
     <_WasmSrcDir>$(MicrosoftNetCoreAppRuntimePackRidDir)native/src</_WasmSrcDir>
     <EmccCFlags>$(EmccFlags) -DCORE_BINDINGS -DGEN_PINVOKE=1 -I$(WasmBuildDir) -I$(_WasmIncludeDir)/mono-2.0 -I$(_WasmIncludeDir)/wasm</EmccCFlags>
     <EmccLDFlags>$(EmccFlags) -s TOTAL_MEMORY=536870912</EmccLDFlags>
   </PropertyGroup>

    <Exec Command="bash -c '$(_EmccCommand) $(EmccCFlags) $(_WasmSrcDir)/driver.c -c -o driver.o'" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(WasmBuildDir)" StandardOutputImportance="Low" />
    <Exec Command="bash -c '$(_EmccCommand) $(EmccCFlags) $(_WasmSrcDir)/corebindings.c -c -o corebindings.o'" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(WasmBuildDir)" StandardOutputImportance="Low" />
    <Exec Command="bash -c '$(_EmccCommand) $(EmccCFlags) $(_WasmSrcDir)/pinvoke.c -c -o pinvoke.o'" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(WasmBuildDir)" StandardOutputImportance="Low" />
    <Exec Command="bash -c '$(_EmccCommand) $(EmccLDFlags) --js-library $(_WasmSrcDir)/library_mono.js --js-library $(_WasmSrcDir)/binding_support.js --js-library $(_WasmSrcDir)/dotnet_support.js --js-library $(_WasmSrcDir)/pal_random.js @(_WasmAssemblies->'%(LlvmBitcodeFile)', ' ') @(_WasmObjects, ' ') -o dotnet.js'" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(WasmBuildDir)" StandardOutputImportance="Low" />
    <Exec Condition="'$(WasmNativeStrip)' == 'true'" Command="bash -c '$(EMSDK_PATH)/upstream/bin/wasm-opt --strip-dwarf dotnet.wasm -o dotnet.wasm'" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(WasmBuildDir)" />
  </Target>

  <Target Name="_GenerateDriverGenC" Condition="'$(RunAOTCompilation)' != 'true' and '$(WasmProfilers)' != ''">
    <PropertyGroup>
      <EmccFlags>$(EmccFlags) -DDRIVER_GEN=1</EmccFlags>
      <InitAotProfilerCmd>
void mono_profiler_init_aot (const char *desc)%3B
EMSCRIPTEN_KEEPALIVE void mono_wasm_load_profiler_aot (const char *desc) { mono_profiler_init_aot (desc)%3B }
      </InitAotProfilerCmd>

      <_DriverGenCPath>$(WasmBuildDir)driver-gen.c</_DriverGenCPath>
    </PropertyGroup>

    <Message Text="Generating $(_DriverGenCPath)" Importance="Low" />
    <WriteLinesToFile File="$(_DriverGenCPath)" Overwrite="true" Lines="$(InitAotProfilerCmd)" />

    <ItemGroup>
        <FileWrites Include="$(_DriverGenCPath)" />
    </ItemGroup>
  </Target>

  <Target Name="_GenerateRunV8Script">
    <PropertyGroup>
      <WasmRunV8ScriptPath Condition="'$(WasmRunV8ScriptPath)' == ''">$(WasmAppDir)run-v8.sh</WasmRunV8ScriptPath>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(WasmRunV8ScriptPath)"
      Lines="v8 --expose_wasm runtime.js -- --run $([System.IO.Path]::GetFileName('$(WasmMainAssemblyPath)')) $*"
      Overwrite="true">
    </WriteLinesToFile>

    <ItemGroup>
      <FileWrites Include="$(WasmRunV8ScriptPath)" />
    </ItemGroup>

    <Exec Command="chmod a+x $(WasmRunV8ScriptPath)" />
  </Target>
</Project>
