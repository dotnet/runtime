<Project>
  <UsingTask TaskName="AppleAppBuilderTask" 
             AssemblyFile="$(AppleAppBuilderTasksAssemblyPath)" />
  <UsingTask Condition="'$(RunAOTCompilation)' == 'true'"
             TaskName="ILStrip"
             AssemblyFile="$(MonoTargetsTasksAssemblyPath)" />

  <PropertyGroup>
    <!-- Unable to properly integrate nativelib into app build, so not supported for now. -->
    <AppleGenerateAppBundle Condition="'$(_IsLibraryMode)' == 'true'">false</AppleGenerateAppBundle>
  </PropertyGroup>

  <Target Name="AppleBuildApp" AfterTargets="$(AppleBuildAppAfterThisTarget)" />

  <Target Name="_AppleCoreBuild" BeforeTargets="AppleBuildApp" DependsOnTargets="$(AppleBuildAppDependsOn)" />

  <Target Name="_InitializeCommonProperties">
    <Error Condition="'$(IntermediateOutputPath)' == ''" Text="%24(IntermediateOutputPath) property needs to be set" />
    <Error Condition="('$(TargetOS)' == 'ios' or '$(TargetOS)' == 'tvos' or '$(TargetOS)' == 'maccatalyst') and '$(DevTeamProvisioning)' == ''"
           Text="'DevTeamProvisioning' needs to be set for device builds. Set it to 'adhoc' to sign with an adhoc key, or '-' to skip signing all together.." />

    <PropertyGroup>
      <_MobileIntermediateOutputPath>$([MSBuild]::NormalizeDirectory($(IntermediateOutputPath), 'mobile'))</_MobileIntermediateOutputPath>
    </PropertyGroup>
    <PropertyGroup>
      <BundleDir>$(AppleAppBundleDir)</BundleDir>
      <_MonoHeaderPath>$(MicrosoftNetCoreAppRuntimePackNativeDir)include\mono-2.0</_MonoHeaderPath>
      <_AotModuleTablePath>$(AppleAppBundleDir)\modules.m</_AotModuleTablePath>
    </PropertyGroup>

    <PropertyGroup>
      <_TargetsDevice Condition="'$(TargetOS)' == 'ios' or '$(TargetOS)' == 'tvos'">true</_TargetsDevice>
    </PropertyGroup>

    <!-- 
      LibraryBuilder takes the approach of accepting items to help what is being linked
      as opposed to figuring it out in the task.
    -->

    <!-- common linker arguments for app and library builds -->
    <ItemGroup>
      <_CommonLinkerArgs Include="-framework Foundation" />
      <_CommonLinkerArgs Include="-framework GSS" />
      <_CommonLinkerArgs Include="-framework Security" />
      <_CommonLinkerArgs Include="-framework UIKit" />
      <_CommonLinkerArgs Include="-lz" />
      <_CommonLinkerArgs Include="-lc++" />
      <_CommonLinkerArgs Include="-liconv" />
    </ItemGroup>

    <ItemGroup Condition="'$(_IsLibraryMode)' == 'true'">
      <!-- add all non stub libs first -->
      <!-- if runtimecompoents is empty, exclude -static.a and include -stub-static.a instead -->
      <!-- if runtimecomponents is *, we're ok because all -static.a is included -->
      <!-- if runtimecomponents is a list, add to items and only pull in -static.a -->
      <!-- libmonosgen needs to be statically linked always -->
      <_UsedComponents 
        Condition="'$(RuntimeComponents)' != '' and '$(RuntimeComponents)' != '*'"
        Include="$(RuntimeComponents)" />

      <_RuntimeLibraries 
        Condition="'$(_TargetsDevice)' == 'true'"
        Include="$(AppleAppDir)\*.a"
        Exclude="$(AppleAppDir)\*-stub-static.a" />
      <_RuntimeLibraries 
        Condition="'$(_TargetsDevice)' == ''"
        Include="$(AppleAppDir)\*.dylib;$(AppleAppDir)\libmonosgen*.a;$(AppleAppDir)\*-static.a"
        Exclude="$(AppleAppDir)\libmonosgen*.dylib;$(AppleAppDir)\*-stub-static.a" />

      <!-- and not contains %(_UsedComponents)-static*.a -->
      <!-- if count > 0, remove all *-static components except in _UsedComponents -->
      <!-- if count > 0, include all stubs except the ones in _UsedComponents -->
      <_RuntimeLibraries
        Condition="'@(_UsedComponents->Count())' &gt; 0"
        Remove="$(AppleAppDir)\libmono-component-*-static.a" />
      <_RuntimeLibraries
        Condition="'@(_UsedComponents->Count())' &gt; 0"
        Include="$(AppleAppDir)\*-stub-static.a" />
      <_RuntimeLibraries
        Condition="'@(_UsedComponents->Count())' == 0"
        Remove="$(AppleAppDir)\*-static.a" />
      <_RuntimeLibraries
        Condition="'@(_UsedComponents->Count())' == 0"
        Include="$(AppleAppDir)\*-stub-static.a" />
    </ItemGroup>

    <!-- 
      This exists for the time being in order to support runtime initialization in library mode.
      It will go away once we have support for auto initialization.  
    -->
    <ItemGroup Condition="'$(_IsLibraryMode)' == 'true'">
      <_RuntimeSymbolsToKeep Include="
_register_aot_modules;
_mono_jit_init_version;
_mono_jit_exec;
_mono_assembly_get_name;
_mono_assembly_name_get_culture;
_mono_assembly_name_get_name;
_mono_assembly_open;
_mono_class_get_method_from_name;
_mono_class_get_name;
_mono_class_get_namespace;
_mono_debug_init;
_mono_dllmap_insert;
_mono_domain_get;
_mono_gc_init_finalizer_thread;
_mono_get_exception_class;
_mono_install_assembly_preload_hook;
_mono_install_load_aot_data_hook;
_mono_install_unhandled_exception_hook;
_mono_jit_cleanup;
_mono_jit_parse_options;
_mono_jit_set_aot_mode;
_mono_object_get_class;
_mono_object_get_virtual_method;
_mono_runtime_invoke;
_mono_set_crash_chaining;
_mono_set_signal_chaining;
_mono_string_to_utf8;
_mono_trace_set_log_handler;
_monovm_initialize;
_monovm_runtimeconfig_initialize;" />
    </ItemGroup>
  </Target>

  <Target Name="_BeforeAppleBuildApp">
    <PropertyGroup>
      <_AppleRuntimeConfigFilePath Condition="'$(_AppleRuntimeConfigFilePath)' == ''">$([MSBuild]::NormalizePath($(AppleAppDir), '$(AssemblyName).runtimeconfig.json'))</_AppleRuntimeConfigFilePath>
      <_ParsedRuntimeConfigFilePath Condition="'$(_ParsedRuntimeConfigFilePath)' == ''">$([MSBuild]::NormalizePath($(AppleAppDir), 'runtimeconfig.bin'))</_ParsedRuntimeConfigFilePath>
    </PropertyGroup>

    <RemoveDir Directories="$(AppleAppBundleDir)" />
  </Target>

  <Target Name="_AppleResolveReferences">
    <ItemGroup>
      <_AppleAssembliesInternal Remove="@(_AppleAssembliesInternal)" />
      <_AppleAssembliesInternal Include="@(AppleAssembliesToBundle)">
        <_InternalForceInterpret>%(AppleAssembliesToBundle._InternalForceInterpret)</_InternalForceInterpret>
        <_IsNative>%(AppleAssembliesToBundle._IsNative)</_IsNative>
      </_AppleAssembliesInternal>
    </ItemGroup>
  </Target>

  <Target Name="_AppleAotCompileApp"
          Condition="'$(RunAOTCompilation)' == 'true'">

    <PropertyGroup>
      <_AOTMode Condition="'$(UseMonoJustInterp)' != 'true'">Full</_AOTMode>
      <_AOTMode Condition="'$(UseMonoJustInterp)' == 'true'">JustInterp</_AOTMode>
    </PropertyGroup>

    <PropertyGroup>
      <_EnableUnmanagedCallersOnlyMethodsExport Condition="'$(_IsLibraryMode)' == 'true'">true</_EnableUnmanagedCallersOnlyMethodsExport>
    </PropertyGroup>

    <ItemGroup>
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'arm64' and '$(TargetOS)' != 'maccatalyst'" Include="mtriple=arm64-ios" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'arm64' and '$(TargetOS)' == 'maccatalyst'" Include="mtriple=arm64-apple-ios14.2-macabi" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'arm'" Include="mtriple=armv7-ios" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'x64' and '$(TargetOS)' != 'maccatalyst'" Include="mtriple=x86_64-ios" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'x64' and '$(TargetOS)' == 'maccatalyst'" Include="mtriple=x86_64-apple-ios13.5-macabi" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'x86'" Include="mtriple=i386-ios" />
      <MonoAOTCompilerDefaultAotArguments Include="static" />
      <MonoAOTCompilerDefaultAotArguments Include="dwarfdebug" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'arm64' or '$(TargetArchitecture)' == 'arm'" Include="mattr=+crc" /> <!-- enable System.Runtime.Intrinsics.Arm (Crc32 and ArmBase for now) -->
      <MonoAOTCompilerDefaultAotArguments Include="direct-icalls" />

      <MonoAOTCompilerDefaultAotArguments Include="nimt-trampolines=2000" />
      <MonoAOTCompilerDefaultAotArguments Include="ntrampolines=40000" />
      <MonoAOTCompilerDefaultAotArguments Include="nrgctx-fetch-trampolines=256" />
      <MonoAOTCompilerDefaultAotArguments Include="ngsharedvt-trampolines=4400" />
      <MonoAOTCompilerDefaultAotArguments Include="nftnptr-arg-trampolines=4000" />
      <MonoAOTCompilerDefaultAotArguments Include="nrgctx-trampolines=40000" />

      <MonoAOTCompilerDefaultProcessArguments Include="-O=gsharedvt" />
    </ItemGroup>

    <PropertyGroup>
      <AotArguments>@(MonoAOTCompilerDefaultAotArguments, ';')</AotArguments>
      <ProcessArguments>@(MonoAOTCompilerDefaultProcessArguments, ';')</ProcessArguments>
    </PropertyGroup>

    <ItemGroup>
      <_AotExcludeAssemblies Include="*System.Runtime.WindowsRuntime.dll" />

      <_AotInputAssemblies Include="@(_AppleAssembliesInternal)" 
                           Condition="'%(_AppleAssembliesInternal._InternalForceInterpret)' != 'true'">
        <AotArguments>$(AotArguments)</AotArguments>
        <ProcessArguments>$(ProcessArguments)</ProcessArguments>
      </_AotInputAssemblies>

      <_AOT_InternalForceInterpretAssemblies Include="@(_AppleAssembliesInternal->WithMetadataValue('_InternalForceInterpret', 'true'))" />
      <_AppleAssembliesInternal Remove="@(_AppleAssembliesInternal)" />
    </ItemGroup>
    
    <MakeDir Directories="$(_MobileIntermediateOutputPath)" />

    <MonoAOTCompiler Condition="'$(RunAOTCompilation)' == 'true'"
        AotModulesTablePath="$(_AotModuleTablePath)"
        AotModulesTableLanguage="ObjC"
        Assemblies="@(_AotInputAssemblies)"
        CompilerBinaryPath="@(MonoAotCrossCompiler->WithMetadataValue('RuntimeIdentifier','$(TargetOS.ToLowerInvariant())-$(TargetArchitecture.ToLowerInvariant())'))"
        EnableUnmanagedCallersOnlyMethodsExport="$(_EnableUnmanagedCallersOnlyMethodsExport)"
        IntermediateOutputPath="$(_MobileIntermediateOutputPath)"
        LLVMPath="$(MonoAotCrossDir)"
        Mode="$(_AOTMode)"
        OutputDir="$(_MobileIntermediateOutputPath)"
        OutputType="AsmOnly"
        UseLLVM="$(MonoEnableLLVM)">
        <Output TaskParameter="CompiledAssemblies" ItemName="_AppleAssembliesInternal" />
    </MonoAOTCompiler>

    <ILStrip Condition="'$(ShouldILStrip)' == 'true'" Assemblies="@(_AppleAssembliesInternal)" />

    <ItemGroup>
      <_AppleAssembliesInternal Include="@(_AOT_InternalForceInterpretAssemblies)" />
      <AppAssembliesInternal Include="@(_AppleAssembliesInternal)" />
    </ItemGroup>
  </Target>


  <Target Name="_AppleGenerateAppBundle" 
          Condition="'$(AppleGenerateAppBundle)' == 'true'"
          DependsOnTargets="_AppleGenerateRuntimeConfig">
    <!-- Run App bundler, it uses AOT libs (if needed), link all native bits, compile simple UI (written in ObjC)
         and produce an app bundle (with xcode project) -->

    <PropertyGroup>
      <RuntimeComponents Condition="'$(RuntimeComponents)' == ''">marshal-ilgen</RuntimeComponents>
    </PropertyGroup>

    <ItemGroup>
      <_ExtraAppLinkerArgs Include="@(_CommonLinkerArgs)" />
    </ItemGroup>

    <Error Condition="'$(NativeMainSource)' != '' and !Exists('$(NativeMainSource)')" Text="Project property NativeMainSource is defined, but the specified file: '$(NativeMainSource)' does not exist." />

    <AppleAppBuilderTask
      AppDir="$(AppleAppDir)"
      Arch="$(TargetArchitecture)"
      Assemblies="@(_AppleAssembliesInternal)"
      BuildAppBundle="$(GenerateXcodeProject)"
      DevTeamProvisioning="$(DevTeamProvisioning)"
      DiagnosticPorts="$(DiagnosticPorts)"
      EnableAppSandbox="$(EnableAppSandbox)"
      ExtraLinkerArguments="@(_ExtraAppLinkerArgs)"
      ForceAOT="$(RunAOTCompilation)"
      ForceInterpreter="$(MonoForceInterpreter)"
      GenerateCMakeProject="$(GenerateCMakeProject)"
      GenerateXcodeProject="$(GenerateXcodeProject)"
      InvariantGlobalization="$(InvariantGlobalization)"
      MainLibraryFileName="$(MainLibraryFileName)"
      MonoRuntimeHeaders="$(_MonoHeaderPath)"
      NativeMainSource="$(NativeMainSource)"
      Optimized="$(Optimized)"
      OutputDirectory="$(AppleAppBundleDir)"
      ProjectName="$(AssemblyName)"
      RuntimeComponents="$(RuntimeComponents)"
      TargetOS="$(TargetOS)"
      UseConsoleUITemplate="True">
        <Output TaskParameter="AppBundlePath" PropertyName="AppBundlePath" />
        <Output TaskParameter="XcodeProjectPath" PropertyName="XcodeProjectPath" />
    </AppleAppBuilderTask>

    <Message Importance="High" Text="Xcode: $(XcodeProjectPath)" Condition="'$(GenerateXcodeProject)' == 'true'" />
    <Message Importance="High" Text="App: $(AppBundlePath)" Condition="'$(GenerateXcodeProject)' == 'true'"/>
  </Target>

  <Target Name="_AfterAppleBuildApp">
    
  </Target>

  <Target Name="_AppleGenerateRuntimeConfig"
          Inputs="$(_AppleRuntimeConfigFilePath)"
          Outputs="$(_ParsedRuntimeConfigFilePath)"
          Condition="Exists('$(_AppleRuntimeConfigFilePath)')">
    <ItemGroup>
      <_RuntimeConfigReservedProperties Include="RUNTIME_IDENTIFIER"/>
      <_RuntimeConfigReservedProperties Include="APP_CONTEXT_BASE_DIRECTORY"/>
    </ItemGroup>

    <RuntimeConfigParserTask
        RuntimeConfigFile="$(_AppleRuntimeConfigFilePath)"
        OutputFile="$(_ParsedRuntimeConfigFilePath)"
        RuntimeConfigReservedProperties="@(_RuntimeConfigReservedProperties)">
    </RuntimeConfigParserTask>
  </Target>
</Project>