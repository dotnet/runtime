<!--
    AppleBuild.LocalBuild* files are meant for projects that want to use
    a local build of `dotnet/runtime` repo.

    Two ways to use this:

    1. Use a local runtime build from the source directory:
        Required properties to be set:

        $(RuntimeSrcDir)       - path to the runtime checkout. This should have already been
                                 built, and so should have `artifacts` directory.

        $(RuntimeConfig)       - This is the config that the above checkout was built with.
                                 This can be different from the configuration for the user project.

    2. Use a local directory which has all the tasks, targets, runtimepack available

        Required properties to be set:

        $(AppleBuildSupportDir)
-->
<Project>
  <Import Project="$(MSBuildThisFileDirectory)AppleBuild.targets" />
  <UsingTask TaskName="MonoAOTCompiler" AssemblyFile="$(MonoAOTCompilerTasksAssemblyPath)" />
  <UsingTask TaskName="RuntimeConfigParserTask" AssemblyFile="$(MonoTargetsTasksAssemblyPath)" />

  <PropertyGroup>
    <PublishTrimmed>true</PublishTrimmed>
    <TrimMode>link</TrimMode>
  </PropertyGroup>

  <PropertyGroup>
    <GenerateXcodeProject>true</GenerateXcodeProject>
    <GenerateCMakeProject>false</GenerateCMakeProject>
  </PropertyGroup>

  <PropertyGroup Condition="'$(EnableAggressiveTrimming)' == 'true'">
    <!-- Suppress trimming warnings as these are tests -->
    <SuppressTrimAnalysisWarnings>true</SuppressTrimAnalysisWarnings>
    <NoWarn>$(NoWarn);IL2103;IL2105;IL2025;IL2111</NoWarn>
  </PropertyGroup>

  <!-- This .targets file is also imported by the runtime Trimming tests, and we want to be able to manually configure trimming in them so this
  should be considered if we ever want to change the Condition of the ConfigureTrimming target -->
  <Target Name="ConfigureTrimming" Condition="'$(UseNativeAOTRuntime)' != 'true' and '$(EnableAggressiveTrimming)' == 'true' and '$(SkipConfigureTrimming)' != 'true'">
    <ItemGroup>
      <!-- Mark all the assemblies for link. We will explicitly mark the non-trimmable ones -->
      <AppleAssembliesToBundle TrimMode="$(TrimMode)" />

      <!-- Don't trim the main assembly.
           TrimMode="" is needed so the root assemblies are correctly identified -->
      <AppleAssembliesToBundle TrimMode="" Condition="'%(FileName)' == '$(AssemblyName)'" />

      <TrimmerRootAssembly
          Condition="'%(AppleAssembliesToBundle.FileName)%(AppleAssembliesToBundle.Extension)' == '$(AssemblyName).dll'"
          Include="%(AppleAssembliesToBundle.Identity)" />
      <!-- PrepareForILLink target sets the IntermediateAssembly as an entry point for ILLink
          which doesn't exist at the path when BuildTestsOnHelix -->
      <IntermediateAssembly Remove="@(IntermediateAssembly)" />

      <ManagedAssemblyToLink Include="@(AppleAssembliesToBundle)">
        <RelativePath>%(Filename)%(Extension)</RelativePath>
      </ManagedAssemblyToLink>
    </ItemGroup>
  </Target>

  <!-- Use local runtime pack -->
  <Target Name="UpdateRuntimePack" AfterTargets="ResolveFrameworkReferences" DependsOnTargets="_PrepareAndValidateAppleInputs;ConfigureTrimming">
    <ItemGroup>
      <ResolvedRuntimePack PackageDirectory="$(MicrosoftNetCoreAppRuntimePackLocationToUse)"
                           Condition="'$(MicrosoftNetCoreAppRuntimePackLocationToUse)' != '' and
                                      '%(ResolvedRuntimePack.FrameworkName)' == 'Microsoft.NETCore.App'" />
    </ItemGroup>
    <Message Text="Used runtime pack: %(ResolvedRuntimePack.PackageDirectory)" Importance="high" />
  </Target>

  <!-- the actual properties need to get set in the props, so because UsingTasks depend on those. -->
  <Target Name="_PrepareAndValidateAppleInputs">
    <Error Condition="'$(RuntimeSrcDir)' == '' and '$(AppleBuildSupportDir)' == ''"
           Text="Both %24(RuntimeSrcDir) and %24(AppleBuildSupportDir) are not set. Either one of them needs to be set to use local runtime builds" />

    <Error Condition="'$(RuntimeSrcDir)' != '' and '$(AppleBuildSupportDir)' != ''"
           Text="Both %24(RuntimeSrcDir) and %24(AppleBuildSupportDir) are set. " />

    <Error Condition="'$(RuntimeSrcDir)' != '' and '$(RuntimeConfig)' == ''"
           Text="%24(RuntimeSrcDir) is set, but %24(RuntimeConfig) is not" />

    <PropertyGroup>
      <MicrosoftNetCoreAppRuntimePackDir>$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackLocationToUse)))</MicrosoftNetCoreAppRuntimePackDir>
      <MicrosoftNetCoreAppRuntimePackRidDir>$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackDir), 'runtimes', '$(TargetOS)-$(TargetArchitecture.ToLowerInvariant())'))</MicrosoftNetCoreAppRuntimePackRidDir>
      <AppleAppBuilderTasksAssemblyPath>$([MSBuild]::NormalizePath('$(AppleAppBuilderDir)', 'AppleAppBuilder.dll'))</AppleAppBuilderTasksAssemblyPath>
      <LibraryBuilderTasksAssemblyPath>$([MSBuild]::NormalizePath('$(LibraryBuilderDir)', 'LibraryBuilder.dll'))</LibraryBuilderTasksAssemblyPath>
      <MonoAOTCompilerTasksAssemblyPath>$([MSBuild]::NormalizePath('$(MonoAOTCompilerDir)', 'MonoAOTCompiler.dll'))</MonoAOTCompilerTasksAssemblyPath>
      <MonoTargetsTasksAssemblyPath>$([MSBuild]::NormalizePath('$(MonoTargetsTasksDir)', 'RuntimeConfigParser.dll'))</MonoTargetsTasksAssemblyPath>
    </PropertyGroup>

    <Error Condition="!Exists('$(MicrosoftNetCoreAppRuntimePackRidDir)')"
           Text="Cannot find runtime pack at $(MicrosoftNetCoreAppRuntimePackRidDir). Make sure you have the correct %24(RuntimeConfig) set" />
  </Target>
</Project>
