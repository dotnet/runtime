<Project>
  <PropertyGroup>
    <AndroidGenerateAppBundle Condition="'$(AndroidGenerateAppBundle)' == '' and '$(GenerateAppBundle)' != ''">$(GenerateAppBundle)</AndroidGenerateAppBundle>
    <AndroidGenerateAppBundle Condition="'$(AndroidGenerateAppBundle)' == ''">true</AndroidGenerateAppBundle>
    <!-- Unable to properly integrate nativelib into app build, so not supported for now. -->
    <AndroidGenerateAppBundle Condition="'$(_IsLibraryMode)' == 'true'">false</AndroidGenerateAppBundle>

    <EnableDefaultAssembliesToBundle Condition="'$(EnableDefaultAssembliesToBundle)' == ''">false</EnableDefaultAssembliesToBundle>
  </PropertyGroup>

  <UsingTask Condition="'$(AndroidGenerateAppBundle)' == 'true'"
             TaskName="AndroidAppBuilderTask"
             AssemblyFile="$(AndroidAppBuilderTasksAssemblyPath)" />

  <Target Name="AndroidBuild" AfterTargets="$(AndroidBuildAfterThisTarget)" />

  <Target Name="_AndroidCoreBuild" BeforeTargets="AndroidBuild" DependsOnTargets="$(AndroidBuildDependsOn)" />

  <Target Name="_InitializeCommonProperties">
    <Error Condition="'$(IntermediateOutputPath)' == ''" Text="%24(IntermediateOutputPath) property needs to be set" />

    <PropertyGroup>
      <_MobileIntermediateOutputPath>$([MSBuild]::NormalizeDirectory($(IntermediateOutputPath), 'mobile'))</_MobileIntermediateOutputPath>
      <TargetArchitecture Condition="'$(TargetArchitecture)' == ''">$(PlatformTarget)</TargetArchitecture>
    </PropertyGroup>

    <PropertyGroup>
      <MicrosoftNetCoreAppRuntimePackDir Condition="'$(MicrosoftNetCoreAppRuntimePackDir)' == ''">%(ResolvedRuntimePack.PackageDirectory)</MicrosoftNetCoreAppRuntimePackDir>
      <MicrosoftNetCoreAppRuntimePackRidDir Condition="'$(MicrosoftNetCoreAppRuntimePackRidDir)' == ''">$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackDir), 'runtimes', '$(TargetOS)-$(TargetArchitecture)'))</MicrosoftNetCoreAppRuntimePackRidDir>
      <MicrosoftNetCoreAppRuntimePackRidDir>$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackRidDir)))</MicrosoftNetCoreAppRuntimePackRidDir>
      <MicrosoftNetCoreAppRuntimePackRidNativeDir>$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackRidDir), 'native'))</MicrosoftNetCoreAppRuntimePackRidNativeDir>
    </PropertyGroup>

    <PropertyGroup>
      <AndroidBuildDir Condition="'$(AndroidBuildDir)' == ''">$([MSBuild]::NormalizeDirectory($(PublishDir)))</AndroidBuildDir>
      <AndroidBundleDir Condition="'$(AndroidBundleDir)' == ''">$([MSBuild]::NormalizeDirectory('$(OutDir)', 'Bundle'))</AndroidBundleDir>

      <BundleDir>$(AndroidBundleDir)</BundleDir>
      <_MonoHeaderPath>$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackRidNativeDir), 'include', 'mono-2.0'))</_MonoHeaderPath>
      <_AotModuleTablePath>$(AndroidBundleDir)\modules.c</_AotModuleTablePath>
    </PropertyGroup>

    <PropertyGroup>
      <RuntimeComponents Condition="'$(RuntimeComponents)' == ''" >marshal-ilgen</RuntimeComponents>
    </PropertyGroup>

    <ItemGroup Condition="'$(_IsLibraryMode)' == 'true'">
      <!-- add all non stub libs first -->
      <!-- if RuntimeComponents is empty, exclude -static.a and include -stub-static.a instead -->
      <!-- if RuntimeComponents is *, we're ok because all -static.a is included -->
      <!-- if RuntimeComponents is a list, add to items and only pull in -static.a -->

      <_UsedComponents 
        Condition="'$(RuntimeComponents)' != '' and '$(RuntimeComponents)' != '*'"
        Include="$(RuntimeComponents)" />

      <_RuntimeLibraries 
        Include="$(AndroidBuildDir)\*-stub-static.a" />
      <_RuntimeLibraries 
        Include="$(AndroidBuildDir)\*.a"
        Exclude="$(AndroidBuildDir)\*-static.a" />

      <_RuntimeLibraries Remove="$(AndroidBuildDir)\libmono-component-%(_UsedComponents.Identity)-stub-static.a" />
      <_RuntimeLibraries Include="$(AndroidBuildDir)\libmono-component-%(_UsedComponents.Identity)-static.a" />
    </ItemGroup>
  </Target>

  <Target Name="_BeforeAndroidBuild">
    <PropertyGroup>
      <_AndroidRuntimeConfigFilePath Condition="'$(_AndroidRuntimeConfigFilePath)' == ''">$([MSBuild]::NormalizePath($(AndroidBuildDir), '$(AssemblyName).runtimeconfig.json'))</_AndroidRuntimeConfigFilePath>
      <_ParsedRuntimeConfigFilePath Condition="'$(_ParsedRuntimeConfigFilePath)' == ''">$([MSBuild]::NormalizePath($(AndroidBuildDir), 'runtimeconfig.bin'))</_ParsedRuntimeConfigFilePath>
    </PropertyGroup>

    <RemoveDir Directories="$(AndroidBundleDir)" />
  </Target>

  <Target Name="_AndroidResolveReferences">
    <ItemGroup Condition="'$(EnableDefaultAssembliesToBundle)' == 'true'">
      <AndroidAssembliesToBundle Remove="@(AndroidAssembliesToBundle)" />
      <AndroidAssembliesToBundle Include="$(PublishDir)\**\*.dll" />
    </ItemGroup>

    <ItemGroup>
      <_AssembliesToBundleInternal Remove="@(_AssembliesToBundleInternal)" />
      <_AssembliesToBundleInternal Include="@(AndroidAssembliesToBundle)">
        <_InternalForceInterpret>%(AndroidAssembliesToBundle._InternalForceInterpret)</_InternalForceInterpret>
        <_IsNative>%(AndroidAssembliesToBundle._IsNative)</_IsNative>
      </_AssembliesToBundleInternal>
    </ItemGroup>
  </Target>

  <Target Name="_AndroidBeforeAotCompile">
    <PropertyGroup>
      <_AOTMode Condition="'$(UseMonoJustInterp)' != 'true'">Normal</_AOTMode>
      <_AOTMode Condition="'$(UseMonoJustInterp)' == 'true'">JustInterp</_AOTMode>
      <_AOTMode Condition="'$(ForceFullAOT)' == 'true'">Full</_AOTMode>
    </PropertyGroup>

    <PropertyGroup Condition="'$(_IsLibraryMode)' == 'true'">
      <_UsesRuntimeInitCallback>$(UsesRuntimeInitCallback)</_UsesRuntimeInitCallback>
      <_UsesRuntimeInitCallback Condition="'$(_UsesRuntimeInitCallback)' == ''">true</_UsesRuntimeInitCallback>
    </PropertyGroup>

    <ItemGroup>
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'arm'" Include="mtriple=armv7-linux-gnueabi" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'arm64'" Include="mtriple=aarch64-linux-android" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'x86'" Include="mtriple=i686-linux-android" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'x64'" Include="mtriple=x86_64-linux-android" />

      <MonoAOTCompilerDefaultAotArguments Include="static" />
      <MonoAOTCompilerDefaultAotArguments Include="dwarfdebug" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(_IsLibraryMode)' == 'true'" Include="direct-icalls" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(_UsesRuntimeInitCallback)' == 'true' and $(CustomRuntimeInitCallback) == ''" Include="runtime-init-callback" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(_UsesRuntimeInitCallback)' == 'true' and $(CustomRuntimeInitCallback) != ''" Include="runtime-init-callback=$(CustomRuntimeInitCallback)" />

      <MonoAOTCompilerDefaultAotArguments Include="nimt-trampolines=2000" />
      <MonoAOTCompilerDefaultAotArguments Include="ntrampolines=10000" />
      <MonoAOTCompilerDefaultAotArguments Include="nrgctx-fetch-trampolines=256" />
      <MonoAOTCompilerDefaultAotArguments Include="ngsharedvt-trampolines=4400" />
      <MonoAOTCompilerDefaultAotArguments Include="nftnptr-arg-trampolines=4000" />
      <MonoAOTCompilerDefaultAotArguments Include="nrgctx-trampolines=31000" />
    </ItemGroup>

    <PropertyGroup>
      <AotArguments>@(MonoAOTCompilerDefaultAotArguments, ';')</AotArguments>
      <ProcessArguments>@(MonoAOTCompilerDefaultProcessArguments, ';')</ProcessArguments>
    </PropertyGroup>

    <ItemGroup>
      <_AotInputAssemblies Include="@(_AssembliesToBundleInternal)"
                           Condition="'%(_AssembliesToBundleInternal._InternalForceInterpret)' != 'true'">
        <AotArguments>$(AotArguments)</AotArguments>
        <ProcessArguments>$(ProcessArguments)</ProcessArguments>
      </_AotInputAssemblies>

      <_AOT_InternalForceInterpretAssemblies Include="@(_AssembliesToBundleInternal->WithMetadataValue('_InternalForceInterpret', 'true'))" />
      <_AssembliesToBundleInternal Remove="@(_AssembliesToBundleInternal)" />
    </ItemGroup>

    <MakeDir Directories="$(_MobileIntermediateOutputPath)" />
  </Target>

  <Target Name="_AndroidPrepareProfiledAot"
          Condition="'$(NetTraceFilePath)' != '' and '$(ForceFullAOT)' != 'true'"
          DependsOnTargets="_AndroidBeforeAotCompile">
    <PropertyGroup>
      <_ToolPath>$([System.IO.Path]::GetDirectoryName('$(DotnetPgoToolPath)'))</_ToolPath>
    </PropertyGroup>

    <NetTraceToMibcConverter
      ToolPath="$(_ToolPath)"
      Assemblies="@(_AotInputAssemblies)"
      NetTraceFilePath="$(NetTraceFilePath)"
      OutputDir="$(_MobileIntermediateOutputPath)">
      <Output TaskParameter="MibcFilePath" ItemName="ProfiledAOTProfilePaths" />
    </NetTraceToMibcConverter>
  </Target>

  <Target Name="_AndroidAotCompile"
          Condition="'$(RunAOTCompilation)' == 'true'"
          DependsOnTargets="_AndroidBeforeAotCompile">

    <PropertyGroup Condition="'$(_IsLibraryMode)' == 'true'">
      <_EnableUnmanagedCallersOnlyMethodsExport>true</_EnableUnmanagedCallersOnlyMethodsExport>
      <_UseAotDataFile>$(UseAotDataFile)</_UseAotDataFile>
      <_UseAotDataFile Condition="'$(_UseAotDataFile)' == ''">false</_UseAotDataFile>
    </PropertyGroup>

    <ItemGroup>
      <ProfiledAOTProfilePaths Include="$(MibcFilePath)" />
    </ItemGroup>

    <!-- 
      In order for the runtime to work when static linking, we must supply 
      a list of direct pinvokes otherwise the runtime will crash
    -->
    <ItemGroup Condition="'$(_IsLibraryMode)' == 'true'">
      <DirectPInvokes Include="libSystem.Native" />
      <DirectPInvokes Include="libSystem.IO.Compression.Native" />
      <DirectPInvokes Include="libSystem.Security.Cryptography.Native.Android" />
    </ItemGroup>

    <MonoAOTCompiler
        AotModulesTablePath="$(_AotModuleTablePath)"
        Assemblies="@(_AotInputAssemblies)"
        CompilerBinaryPath="@(MonoAotCrossCompiler->WithMetadataValue('RuntimeIdentifier','$(TargetOS.ToLowerInvariant())-$(TargetArchitecture.ToLowerInvariant())'))"
        DirectPInvokes="@(DirectPInvokes)"
        DirectPInvokeLists="@(DirectPInvokeLists)"
        EnableUnmanagedCallersOnlyMethodsExport="$(_EnableUnmanagedCallersOnlyMethodsExport)"
        IntermediateOutputPath="$(_MobileIntermediateOutputPath)"
        LLVMPath="$(MonoAotCrossDir)"
        MibcProfilePath="@(ProfiledAOTProfilePaths)"
        Mode="$(_AOTMode)"
        OutputDir="$(_MobileIntermediateOutputPath)"
        OutputType="AsmOnly"
        UseAotDataFile="$(_UseAotDataFile)"
        UseLLVM="$(MonoEnableLLVM)">
        <Output TaskParameter="CompiledAssemblies" ItemName="_AssembliesToBundleInternal" />
    </MonoAOTCompiler>

    <ItemGroup>
      <_AssembliesToBundleInternal Include="@(_AOT_InternalForceInterpretAssemblies)" />
    </ItemGroup>
  </Target>


  <Target
    Name="_AndroidGenerateAppBundle"
    Condition="$(AndroidGenerateAppBundle) == 'true'"
    DependsOnTargets="_AndroidGenerateRuntimeConfig">

    <ItemGroup Condition="'$(_IsLibraryMode)' == 'true'">
      <_NativeDependencies Include="$(LibraryOutputPath)" />
    </ItemGroup>

    <AndroidAppBuilderTask
        AppDir="$(AndroidBuildDir)"
        Assemblies="@(_AssembliesToBundleInternal)"
        DiagnosticPorts="$(DiagnosticPorts)"
        EnvironmentVariables="@(AndroidEnv)"
        ExtraLinkerArguments="@(ExtraAppLinkerArgs)"
        ForceAOT="$(RunAOTCompilation)"
        ForceFullAOT="$(ForceFullAOT)"
        ForceInterpreter="$(MonoForceInterpreter)"
        IsLibraryMode="$(_IsLibraryMode)"
        MainLibraryFileName="$(MainLibraryFileName)"
        MonoRuntimeHeaders="$(_MonoHeaderPath)"
        NativeDependencies="@(_NativeDependencies)"
        OutputDir="$(AndroidBundleDir)"
        ProjectName="$(AssemblyName)"
        RuntimeComponents="$(RuntimeComponents)"
        RuntimeIdentifier="$(RuntimeIdentifier)"
        StripDebugSymbols="False">
        <Output TaskParameter="ApkBundlePath" PropertyName="ApkBundlePath" />
        <Output TaskParameter="ApkPackageId"  PropertyName="ApkPackageId" />
    </AndroidAppBuilderTask>

    <Message Importance="High" Text="PackageId:       $(ApkPackageId)"/>
    <Message Importance="High" Text="Instrumentation: net.dot.MonoRunner"/>
    <Message Importance="High" Text="Apk:             $(ApkBundlePath)"/>
  </Target>

  <Target Name="_AfterAndroidBuild">

  </Target>

  <Target Name="_AndroidGenerateRuntimeConfig"
          Inputs="$(_AndroidRuntimeConfigFilePath)"
          Outputs="$(_ParsedRuntimeConfigFilePath)"
          Condition="Exists('$(_AndroidRuntimeConfigFilePath)')">
    <ItemGroup>
      <_RuntimeConfigReservedProperties Include="RUNTIME_IDENTIFIER"/>
      <_RuntimeConfigReservedProperties Include="APP_CONTEXT_BASE_DIRECTORY"/>
    </ItemGroup>

    <RuntimeConfigParserTask
        RuntimeConfigFile="$(_AndroidRuntimeConfigFilePath)"
        OutputFile="$(_ParsedRuntimeConfigFilePath)"
        RuntimeConfigReservedProperties="@(_RuntimeConfigReservedProperties)">
    </RuntimeConfigParserTask>
  </Target>
</Project>
