<Project>
  <UsingTask TaskName="AndroidAppBuilderTask" 
             AssemblyFile="$(AndroidAppBuilderTasksAssemblyPath)" />

  <Target Name="AndroidBuildApp" AfterTargets="$(AndroidBuildAppAfterThisTarget)" />

  <Target Name="_AndroidCoreBuild" BeforeTargets="AndroidBuildApp" DependsOnTargets="$(AndroidBuildAppDependsOn)" />

  <Target Name="_InitializeCommonProperties">
    <Error Condition="'$(IntermediateOutputPath)' == ''" Text="%24(IntermediateOutputPath) property needs to be set" />

    <PropertyGroup>
      <_MobileIntermediateOutputPath>$([MSBuild]::NormalizeDirectory($(IntermediateOutputPath), 'mobile'))</_MobileIntermediateOutputPath>
    </PropertyGroup>

    <PropertyGroup>
      <BundleDir>$(AndroidAppBundleDir)</BundleDir>
      <_MonoHeaderPath>$(MicrosoftNetCoreAppRuntimePackNativeDir)include\mono-2.0</_MonoHeaderPath>
      <_AotModuleTablePath>$(AndroidAppBundleDir)\modules.c</_AotModuleTablePath>
    </PropertyGroup>

    <PropertyGroup>
      <_RuntimeSymbolsToKeep>
register_aot_modules
mono_jit_init_version
mono_jit_exec
mono_assembly_get_name
mono_assembly_name_get_culture
mono_assembly_name_get_name
mono_assembly_open
mono_class_get_method_from_name
mono_class_get_name
mono_class_get_namespace
mono_debug_init
mono_dllmap_insert
mono_domain_get
mono_gc_init_finalizer_thread
mono_get_exception_class
mono_install_assembly_preload_hook
mono_install_load_aot_data_hook
mono_install_unhandled_exception_hook
mono_jit_cleanup
mono_jit_parse_options
mono_jit_set_aot_mode
mono_object_get_class
mono_object_get_virtual_method
mono_runtime_invoke
mono_set_crash_chaining
mono_set_signal_chaining
mono_string_to_utf8
mono_trace_set_log_handler
monovm_initialize
monovm_runtimeconfig_initialize
mono_aot_register_module
mono_polling_required
mono_thread_interruption_request_flag

      </_RuntimeSymbolsToKeep>
    </PropertyGroup>

    <ItemGroup>
      <!-- static vs dylibs -->
      <!-- add all non stub libs first -->
      <!-- if runtimecompoents is empty, exclude -static.a and include -stub-static.a instead -->
      <!-- if runtimecomponents is *, we're ok because all -static.a is included -->
      <!-- if runtimecomponents is a list, add to items and only pull in -static.a -->
      <!-- libmonosgen needs to be statically linked always -->
      <_UsedComponents 
        Condition="'$(RuntimeComponents)' != '' and '$(RuntimeComponents)' != '*'"
        Include="$(RuntimeComponents)" />

      <_RuntimeLibraries 
        Condition="'$(_TargetsDevice)' == 'true'"
        Include="$(AndroidAppDir)\*.a"
        Exclude="$(AndroidAppDir)\*-stub-static.a" />
      <_RuntimeLibraries 
        Condition="'$(_TargetsDevice)' == ''"
        Include="$(AndroidAppDir)\*.dylib;$(AndroidAppDir)\libmonosgen*.a;$(AndroidAppDir)\*-static.a"
        Exclude="$(AndroidAppDir)\libmonosgen*.dylib;$(AndroidAppDir)\*-stub-static.a" />

      <!-- and not contains %(_UsedComponents)-static*.a -->
      <!-- if count > 0, remove all *-static components except in _UsedComponents -->
      <!-- if count > 0, include all stubs except the ones in _UsedComponents -->
      <_RuntimeLibraries
        Condition="'@(_UsedComponents->Count())' &gt; 0"
        Remove="$(AndroidAppDir)\libmono-component-*-static.a" />
      <_RuntimeLibraries
        Condition="'@(_UsedComponents->Count())' &gt; 0"
        Include="$(AndroidAppDir)\*-stub-static.a" />
      <_RuntimeLibraries
        Condition="'@(_UsedComponents->Count())' == 0"
        Remove="$(AndroidAppDir)\*-static.a" />
      <_RuntimeLibraries
        Condition="'@(_UsedComponents->Count())' == 0"
        Include="$(AndroidAppDir)\*-stub-static.a" />
    </ItemGroup>

    <!-- common linker arguments for app and library builds -->
    <ItemGroup>
      <_CommonLinkerArgs Include="libz.so" />
      <_CommonLinkerArgs Include="log" />
      <_CommonLinkerArgs Include="-u GlobalizationNative_LoadICU" />
      <_CommonLinkerArgs Include="-u GlobalizationNative_GetLatestJapaneseEra" />
      <_CommonLinkerArgs Include="-u GlobalizationNative_ChangeCase" />
      <_CommonLinkerArgs Include="-u GlobalizationNative_CloseSortHandle" />
      <_CommonLinkerArgs Include="-u GlobalizationNative_GetLocales" />
      <_CommonLinkerArgs Include="-u GlobalizationNative_GetLocaleInfoInt" />
      <_CommonLinkerArgs Include="-u GlobalizationNative_GetLocaleTimeFormat" />
      <_CommonLinkerArgs Include="-u GlobalizationNative_ToUnicode" />
      <_CommonLinkerArgs Include="-u GlobalizationNative_NormalizeString" />
      <_CommonLinkerArgs Include="-u GlobalizationNative_GetTimeZoneDisplayName" />
    </ItemGroup>
  </Target>

  <Target Name="_BeforeAndroidBuildApp">
    <PropertyGroup>
      <_AndroidRuntimeConfigFilePath Condition="'$(_AndroidRuntimeConfigFilePath)' == ''">$([MSBuild]::NormalizePath($(AndroidAppDir), '$(AssemblyName).runtimeconfig.json'))</_AndroidRuntimeConfigFilePath>
      <_ParsedRuntimeConfigFilePath Condition="'$(_ParsedRuntimeConfigFilePath)' == ''">$([MSBuild]::NormalizePath($(AndroidAppDir), 'runtimeconfig.bin'))</_ParsedRuntimeConfigFilePath>
    </PropertyGroup>

    <RemoveDir Directories="$(AndroidAppBundleDir)" />
  </Target>

  <Target Name="_AndroidResolveReferences">
    <ItemGroup>
      <_AndroidAssembliesInternal Remove="@(_AndroidAssembliesInternal)" />
      <_AndroidAssembliesInternal Include="@(AndroidAssembliesToBundle)">
        <_InternalForceInterpret>%(AndroidAssembliesToBundle._InternalForceInterpret)</_InternalForceInterpret>
        <_IsNative>%(AndroidAssembliesToBundle._IsNative)</_IsNative>
      </_AndroidAssembliesInternal>
    </ItemGroup>
  </Target>

  <Target Name="_AndroidBeforeAotCompileApp">
    <PropertyGroup>
      <_AOTMode Condition="'$(UseMonoJustInterp)' != 'true'">Normal</_AOTMode>
      <_AOTMode Condition="'$(UseMonoJustInterp)' == 'true'">JustInterp</_AOTMode>
      <_AOTMode Condition="'$(ForceFullAOT)' == 'true'">Full</_AOTMode>
    </PropertyGroup>

    <ItemGroup>
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'arm'" Include="mtriple=armv7-linux-gnueabi" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'arm64'" Include="mtriple=aarch64-linux-android" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'x86'" Include="mtriple=i686-linux-android" />
      <MonoAOTCompilerDefaultAotArguments Condition="'$(TargetArchitecture)' == 'x64'" Include="mtriple=x86_64-linux-android" />
  
      <MonoAOTCompilerDefaultAotArguments Include="static" />
      <MonoAOTCompilerDefaultAotArguments Include="dwarfdebug" />

      <MonoAOTCompilerDefaultAotArguments Include="nimt-trampolines=2000" />
      <MonoAOTCompilerDefaultAotArguments Include="ntrampolines=10000" />
      <MonoAOTCompilerDefaultAotArguments Include="nrgctx-fetch-trampolines=256" />
      <MonoAOTCompilerDefaultAotArguments Include="ngsharedvt-trampolines=4400" />
      <MonoAOTCompilerDefaultAotArguments Include="nftnptr-arg-trampolines=4000" />
      <MonoAOTCompilerDefaultAotArguments Include="nrgctx-trampolines=31000" />
    </ItemGroup>

    <PropertyGroup>
      <AotArguments>@(MonoAOTCompilerDefaultAotArguments, ';')</AotArguments>
      <ProcessArguments>@(MonoAOTCompilerDefaultProcessArguments, ';')</ProcessArguments>
    </PropertyGroup>

    <ItemGroup>
      <_AotInputAssemblies Include="@(_AndroidAssembliesInternal)" 
                           Condition="'%(_AndroidAssembliesInternal._InternalForceInterpret)' != 'true'">
        <AotArguments>$(AotArguments)</AotArguments>
        <ProcessArguments>$(ProcessArguments)</ProcessArguments>
      </_AotInputAssemblies>

      <_AOT_InternalForceInterpretAssemblies Include="@(_AndroidAssembliesInternal->WithMetadataValue('_InternalForceInterpret', 'true'))" />
      <_AndroidAssembliesInternal Remove="@(_AndroidAssembliesInternal)" />
    </ItemGroup>
    
    <MakeDir Directories="$(_MobileIntermediateOutputPath)" />
  </Target>

  <Target Name="_AndroidPrepareProfiledAot"
          Condition="'$(NetTraceFilePath)' != '' and '$(ForceFullAOT)' != 'true'"
          DependsOnTargets="_AndroidBeforeAotCompileApp">
    <PropertyGroup>
      <_ToolPath>$([System.IO.Path]::GetDirectoryName('$(DotnetPgoToolPath)'))</_ToolPath>
    </PropertyGroup>

    <NetTraceToMibcConverter
      ToolPath="$(_ToolPath)"
      Assemblies="@(_AotInputAssemblies)"
      NetTraceFilePath="$(NetTraceFilePath)"
      OutputDir="$(_MobileIntermediateOutputPath)">
      <Output TaskParameter="MibcFilePath" ItemName="ProfiledAOTProfilePaths" />
    </NetTraceToMibcConverter>
  </Target>

  <Target Name="_AndroidAotCompileApp"
          Condition="'$(RunAOTCompilation)' == 'true'"
          DependsOnTargets="_AndroidBeforeAotCompileApp">

    <ItemGroup>
      <ProfiledAOTProfilePaths Include="$(MibcFilePath)" />
    </ItemGroup>

    <PropertyGroup>
      <_EnableUnmanagedCallersOnlyMethodsExport Condition="'$(NativeLibrary)' != ''">true</_EnableUnmanagedCallersOnlyMethodsExport>
    </PropertyGroup>

    <MonoAOTCompiler
        AotModulesTablePath="$(_AotModuleTablePath)"
        Assemblies="@(_AotInputAssemblies)"
        CompilerBinaryPath="@(MonoAotCrossCompiler->WithMetadataValue('RuntimeIdentifier','$(TargetOS.ToLowerInvariant())-$(TargetArchitecture.ToLowerInvariant())'))"
        EnableUnmanagedCallersOnlyMethodsExport="$(_EnableUnmanagedCallersOnlyMethodsExport)"
        IntermediateOutputPath="$(_MobileIntermediateOutputPath)"
        LLVMPath="$(MonoAotCrossDir)"
        MibcProfilePath="@(ProfiledAOTProfilePaths)"
        Mode="$(_AOTMode)"
        OutputDir="$(_MobileIntermediateOutputPath)"
        OutputType="AsmOnly"
        UseLLVM="$(MonoEnableLLVM)">
        <Output TaskParameter="CompiledAssemblies" ItemName="_AndroidAssembliesInternal" />
    </MonoAOTCompiler>

    <ItemGroup>
      <_AndroidAssembliesInternal Include="@(_AOT_InternalForceInterpretAssemblies)" />
      <AppAssembliesInternal Include="@(_AndroidAssembliesInternal)" />
    </ItemGroup>
  </Target>


  <Target Name="_AndroidGenerateAppBundle" 
          Condition="'$(GenerateAppBundle)' == 'true'"
          DependsOnTargets="_AndroidGenerateRuntimeConfig">

    <PropertyGroup>
      <RuntimeComponents Condition="'$(RuntimeComponents)' == ''" >marshal-ilgen</RuntimeComponents>
    </PropertyGroup>

    <AndroidAppBuilderTask
        RuntimeIdentifier="$(RuntimeIdentifier)"
        ProjectName="$(AssemblyName)"
        MonoRuntimeHeaders="$(_MonoHeaderPath)"
        Assemblies="@(_AndroidAssembliesInternal)"
        MainLibraryFileName="$(MainLibraryFileName)"
        IncludeNetworkSecurityConfig="$(IncludeNetworkSecurityConfig)"
        EnvironmentVariables="@(AndroidEnv)"
        ForceAOT="$(RunAOTCompilation)"
        ForceFullAOT="$(ForceFullAOT)"
        ForceInterpreter="$(MonoForceInterpreter)"
        StripDebugSymbols="False"
        RuntimeComponents="$(RuntimeComponents)"
        DiagnosticPorts="$(DiagnosticPorts)"
        OutputDir="$(AndroidAppBundleDir)"
        AppDir="$(AndroidAppDir)">
        <Output TaskParameter="ApkPackageId"  PropertyName="ApkPackageId" />
        <Output TaskParameter="ApkBundlePath" PropertyName="ApkBundlePath" />
    </AndroidAppBuilderTask>

    <Message Importance="High" Text="PackageId:       $(ApkPackageId)"/>
    <Message Importance="High" Text="Instrumentation: net.dot.MonoRunner"/>
    <Message Importance="High" Text="Apk:             $(ApkBundlePath)"/>
  </Target>

  <Target Name="_AfterAndroidBuildApp">
    
  </Target>

  <Target Name="_AndroidGenerateRuntimeConfig"
          Inputs="$(_AndroidRuntimeConfigFilePath)"
          Outputs="$(_ParsedRuntimeConfigFilePath)"
          Condition="Exists('$(_AndroidRuntimeConfigFilePath)')">
    <ItemGroup>
      <_RuntimeConfigReservedProperties Include="RUNTIME_IDENTIFIER"/>
      <_RuntimeConfigReservedProperties Include="APP_CONTEXT_BASE_DIRECTORY"/>
    </ItemGroup>

    <RuntimeConfigParserTask
        RuntimeConfigFile="$(_AndroidRuntimeConfigFilePath)"
        OutputFile="$(_ParsedRuntimeConfigFilePath)"
        RuntimeConfigReservedProperties="@(_RuntimeConfigReservedProperties)">
    </RuntimeConfigParserTask>
  </Target>
</Project>