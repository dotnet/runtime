<Project>

    <PropertyGroup>
    <_MicrosoftNetCoreAppRefDir>$(AppRefDir)\</_MicrosoftNetCoreAppRefDir>
  </PropertyGroup>

  <Target Name="PrintRuntimePackLocation" AfterTargets="UpdateTargetingAndRuntimePack">
    <Message Text="Used runtime pack: %(ResolvedRuntimePack.PackageDirectory)" Importance="high" />
  </Target>

  <Target Name="PrintRuntimePackPath" BeforeTargets="Publish">
    <Message Text="** MicrosoftNetCoreAppRuntimePackDir : %(ResolvedRuntimePack.PackageDirectory)" Importance="High" />
  </Target>

  <!-- SDK tries to download runtime packs when RuntimeIdentifier is set, remove them from PackageDownload item. -->
  <!-- <Target Name="RemoveRuntimePackFromDownloadItem"
          AfterTargets="ProcessFrameworkReferences"
          Condition="'$(WasmNativeWorkload)' == 'true'">
    <ItemGroup>
      <PackageDownload Remove="@(PackageDownload)"
                       Condition="'$(UsePackageDownload)' == 'true' and $([System.String]::Copy('%(Identity)').StartsWith('Microsoft.NETCore.App.Runtime'))" />
      <PackageReference Remove="@(PackageReference)"
                        Condition="'$(UsePackageDownload)' != 'true' and $([System.String]::Copy('%(Identity)').StartsWith('Microsoft.NETCore.App.Runtime'))" />
    </ItemGroup>
  </Target> -->

  <!-- Use local targeting pack for NetCoreAppCurrent. -->
  <Target Name="UpdateTargetingAndRuntimePack"
          AfterTargets="ResolveFrameworkReferences">
    <ItemGroup>
      <ResolvedTargetingPack Path="$(_MicrosoftNetCoreAppRefDir.TrimEnd('/\'))"
                             NuGetPackageVersion="$(RuntimePackInWorkloadVersion)"
                             PackageDirectory="$(_MicrosoftNetCoreAppRefDir.TrimEnd('/\'))"
                             Condition="'%(ResolvedTargetingPack.RuntimeFrameworkName)' == 'Microsoft.NETCore.App'" />
      <ResolvedRuntimePack
                            Update="Microsoft.NETCore.App.Runtime.Mono.android-arm64"
                            FrameworkName="Microsoft.NETCore.App"
                            NuGetPackageId="Microsoft.NETCore.App.Runtime.Mono.android-arm64"
                            NuGetPackageVersion="$(RuntimePackInWorkloadVersion)"
                            PackageDirectory="$(NetCoreTargetingPackRoot)\Microsoft.NETCore.App.Runtime.Mono.android-arm64\$(RuntimePackInWorkloadVersion)"
                            RuntimeIdentifier="android-arm64" />

       <ResolvedFrameworkReference Update="Microsoft.NETCore.App"
                                   TargetingPackPath="$(_MicrosoftNetCoreAppRefDir.TrimEnd('/\'))"
                                   RuntimePackName="Microsoft.NETCore.App.Runtime.Mono.android-arm64"
                                   RuntimePackVersion="$(RuntimePackInWorkloadVersion)"
                                   RuntimePackPath="$(NetCoreTargetingPackRoot)\Microsoft.NETCore.App.Runtime.Mono.android-arm64\$(RuntimePackInWorkloadVersion)"
                                   RuntimeIdentifier="android-arm64" />
    </ItemGroup>
  </Target>

  <!-- Update the local targeting pack's version as it's written into the runtimeconfig.json file to select the right framework. -->
  <Target Name="UpdateRuntimeFrameworkVersion"
          AfterTargets="ResolveTargetingPackAssets"
          Condition="'false' == 'true'">
    <ItemGroup>
      <RuntimeFramework Version="$(RuntimePackInWorkloadVersion)"
                        Condition="'%(RuntimeFramework.FrameworkName)' == 'Microsoft.NETCore.App'" />
    </ItemGroup>
  </Target>

  <!-- Filter out conflicting implicit assembly references. -->
  <Target Name="FilterImplicitAssemblyReferences"
          Condition="'$(DisableImplicitAssemblyReferences)' != 'true' and 'false' == 'true'"
          DependsOnTargets="ResolveProjectReferences"
          AfterTargets="ResolveTargetingPackAssets">
    <ItemGroup>
      <_targetingPackReferenceExclusion Include="$(TargetName)" />
      <_targetingPackReferenceExclusion Include="@(_ResolvedProjectReferencePaths->'%(Filename)')" />
      <_targetingPackReferenceExclusion Include="@(DefaultReferenceExclusion)" />
    </ItemGroup>

    <ItemGroup>
      <_targetingPackReferenceWithExclusion Include="@(Reference)">
        <Exclusion>%(_targetingPackReferenceExclusion.Identity)</Exclusion>
      </_targetingPackReferenceWithExclusion>
      <Reference Remove="@(_targetingPackReferenceWithExclusion)"
                 Condition="'%(_targetingPackReferenceWithExclusion.ExternallyResolved)' == 'true' and '%(_targetingPackReferenceWithExclusion.Filename)' == '%(_targetingPackReferenceWithExclusion.Exclusion)'" />
    </ItemGroup>
  </Target>
</Project>
