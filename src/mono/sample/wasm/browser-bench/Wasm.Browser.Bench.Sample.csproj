<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>$(NetCoreAppCurrent)</TargetFramework>
    <!-- don't need to run this on helix -->
    <WasmCopyAppZipToHelixTestDir>false</WasmCopyAppZipToHelixTestDir>
    <SuppressTrimAnalysisWarnings>true</SuppressTrimAnalysisWarnings>
    <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>
    <EnableAggressiveTrimming Condition="'$(EnableAOTAndTrimming)' != ''">$(EnableAOTAndTrimming)</EnableAggressiveTrimming>
    <PublishTrimmed Condition="'$(EnableAOTAndTrimming)' != ''">$(EnableAOTAndTrimming)</PublishTrimmed>
    <RunAOTCompilation Condition="'$(EnableAOTAndTrimming)' != ''">$(EnableAOTAndTrimming)</RunAOTCompilation>
    <WasmRuntimeAssetsLocation>./</WasmRuntimeAssetsLocation>
  </PropertyGroup>

  <!-- NativeAOT -->
  <PropertyGroup Condition="'$(UsingNativeAOT)' == 'true'">
    <PublishTrimmed>true</PublishTrimmed>
    <PublishDir>$(MSBuildThisFileDirectory)/bin/$(Configuration)/AppBundle</PublishDir>
    <DebugType>none</DebugType>
    <RestoreAdditionalProjectSources>$(RestoreAdditionalProjectSources);https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-experimental/nuget/v3/index.json</RestoreAdditionalProjectSources>
    <UsingBrowserRuntimeWorkload>false</UsingBrowserRuntimeWorkload>
    <UsingWasiRuntimeWorkload>false</UsingWasiRuntimeWorkload>
    <UsingEmscriptenWorkload>true</UsingEmscriptenWorkload>
    <DotNetJsApi>true</DotNetJsApi>
    <_ExeExt Condition="$([MSBuild]::IsOSPlatform('WINDOWS'))">.exe</_ExeExt>
  </PropertyGroup>
  <ItemGroup Condition="'$(UsingNativeAOT)' == 'true'">
    <PackageReference Include="Microsoft.DotNet.ILCompiler.LLVM" Version="$(ProductVersion)-*" />
    <PackageReference Include="runtime.$(ToolsRID).Microsoft.DotNet.ILCompiler.LLVM" Version="$(ProductVersion)-*" />
    <!-- TODO: Can be removed when emscripten workload refactoring is aligned with NativeAOT -->
    <EmscriptenEnvVars Include="DOTNET_EMSCRIPTEN_LLVM_ROOT=$(EmscriptenSdkToolsPath)bin" />
    <EmscriptenEnvVars Include="DOTNET_EMSCRIPTEN_BINARYEN_ROOT=$(EmscriptenSdkToolsPath)" />
    <EmscriptenEnvVars Include="DOTNET_EMSCRIPTEN_NODE_JS=$([MSBuild]::NormalizePath($(EmscriptenNodeToolsPath), 'bin', 'node$(_ExeExt)'))" />
    <EmscriptenEnvVars Include="EM_FROZEN_CACHE=1" />
    <EmscriptenEnvVars Include="EM_CACHE=$(WasmCachePath)" Condition="'$(WasmCachePath)' != ''" />
  </ItemGroup>
  <!-- /NativeAOT -->

  <ItemGroup>
    <WasmExtraFilesToDeploy Include="index.html" />
    <WasmExtraFilesToDeploy Include="main.js" />
    <WasmExtraFilesToDeploy Include="appstart-frame.html" />
    <WasmExtraFilesToDeploy Include="frame-main.js" />
    <WasmExtraFilesToDeploy Include="style.css" />
    <Compile Remove="Console/Console.cs" />
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="$(MicrosoftBuildUtilitiesCoreVersion)" ExcludeAssets="runtime" />
  </ItemGroup>

  <Target Name="RunSample" DependsOnTargets="RunSampleWithBrowserAndSimpleServer" />
  <UsingTask TaskName="GetNugetConfigTask" AssemblyFile="$(OutputPath)Wasm.Browser.Bench.Sample.dll" />

  <Target Name="SetWBTSdksPath" DependsOnTargets="BuildWBT">
    <ItemGroup>
      <ArtifactsDotnetLatestSdks Include="$(ArtifactsDir)bin/dotnet-latest/sdk/*/*" />
    </ItemGroup>
    <PropertyGroup>
      <WBTSdksPath>%(ArtifactsDotnetLatestSdks.RootDir)%(ArtifactsDotnetLatestSdks.Directory)Sdks</WBTSdksPath>
    </PropertyGroup>
  </Target>

  <Target Name="SetNugetConfigContent">
    <GetNugetConfigTask
      InputFile="$(MonoProjectRoot)wasm/Wasm.Build.Tests/data/nuget10.config"
      ArtifactsDir="$(ArtifactsDir)"
      Configuration="$(Configuration)">
      <Output TaskParameter="NugetConfigContent" PropertyName="NugetConfigContent"/>
    </GetNugetConfigTask>
  </Target>

  <PropertyGroup>
    <NugetPackagesPath>$(MSBuildThisFileDirectory)nugetPackages</NugetPackagesPath>
  </PropertyGroup>

  <Target Name="BuildWBT" Condition="!Exists('$(ArtifactsDir)bin/dotnet-latest')">
    <PropertyGroup>
      <_ScriptExt Condition="'$(OS)' == 'Windows_NT'">.cmd</_ScriptExt>
      <_ScriptExt Condition="'$(OS)' != 'Windows_NT'">.sh</_ScriptExt>
      <_Dotnet>$(RepoRoot)dotnet$(_ScriptExt)</_Dotnet>
    </PropertyGroup>

    <Exec IgnoreExitCode="true" Command="$(_Dotnet) build $(MonoProjectRoot)wasm/Wasm.Build.Tests/Wasm.Build.Tests.csproj -c $(Configuration) -t:InstallWorkloadUsingArtifacts -p:TargetOS=browser -p:TargetArchitecture=wasm $(BuildAdditionalArgs)" />
    <RemoveDir Directories="$(NugetPackagesPath)" />
    <MakeDir Directories="$(NugetPackagesPath)" />
  </Target>

  <Target Name="PrepareBlazorTemplate" Condition="!Exists('$(MonoProjectRoot)sample/wasm/blazor-frame/blazor')" DependsOnTargets="SetWBTSdksPath;SetNugetConfigContent">
    <ItemGroup>
        <OverrideFiles Include="$(MonoProjectRoot)wasm/Wasm.Build.Tests/data/WasmOverridePacks.targets" />
        <OverrideFiles Include="$(MonoProjectRoot)wasm/Wasm.Build.Tests/data/Blazor.Directory.Build.targets" />
        <OverrideDestFiles Include="$(MonoProjectRoot)sample/wasm/blazor-frame/blazor/WasmOverridePacks.targets" />
        <OverrideDestFiles Include="$(MonoProjectRoot)sample/wasm/blazor-frame/blazor/Directory.Build.targets" />
    </ItemGroup>

    <MakeDir Directories="$(MonoProjectRoot)sample/wasm/blazor-frame/blazor"/>
    <Copy SourceFiles="@(OverrideFiles)" DestinationFiles="@(OverrideDestFiles)" UseSymbolicLinksIfPossible="true" OverwriteReadOnlyFiles="true" />

    <WriteLinesToFile
        File="$(MSBuildThisFileDirectory)../blazor-frame/blazor/nuget.config"
        Overwrite="true"
        Lines="$(NugetConfigContent)" />

    <Exec EnvironmentVariables="MSBuildSDKsPath=$(WBTSdksPath);NUGET_PACKAGES=$(NugetPackagesPath);DOTNET_ROOT=$(ArtifactsDir)bin/dotnet-latest;PATH=$(ArtifactsDir)bin/dotnet-latest:$(PATH)" WorkingDirectory="$(MSBuildThisFileDirectory)../blazor-frame/blazor" Command="dotnet new blazorwasm" />
    <Exec WorkingDirectory="$(MSBuildThisFileDirectory)../blazor-frame" Command="git apply blazor-frame.diff" />
  </Target>

  <Target Name="BuildBlazorFrame" AfterTargets="BuildSampleInTree" Condition="'$(BlazorStartup)' == 'true'" DependsOnTargets="SetWBTSdksPath;BuildWBT;PrepareBlazorTemplate">
    <Exec EnvironmentVariables="MSBuildSDKsPath=$(WBTSdksPath);NUGET_PACKAGES=$(NugetPackagesPath);DOTNET_ROOT=$(ArtifactsDir)bin/dotnet-latest;PATH=$(ArtifactsDir)bin/dotnet-latest:$(PATH)" WorkingDirectory="$(MSBuildThisFileDirectory)../blazor-frame/blazor" Command="dotnet publish blazor.csproj -c $(Configuration) -p:WBTOverrideRuntimePack=true -p:TargetOS=browser -p:TargetArchitecture=wasm $(BuildAdditionalArgs)" />

    <ItemGroup>
      <BlazorSourceFiles Include="$(MSBuildThisFileDirectory)../blazor-frame/blazor/bin/$(Configuration)/$(NetCoreAppCurrent)/publish/wwwroot/blazor-template/**/*.*"/>
    </ItemGroup>

    <Copy
        SourceFiles="@(BlazorSourceFiles)"
        DestinationFolder="$(MSBuildThisFileDirectory)/bin/$(Configuration)/AppBundle/blazor-template/%(RecursiveDir)" />
  </Target>

  <Target Name="PrepareBrowserTemplate" Condition="!Exists('$(MonoProjectRoot)sample/wasm/browser-frame/browser-frame')" DependsOnTargets="SetWBTSdksPath;SetNugetConfigContent">
    <ItemGroup>
        <OverrideFiles Include="$(MonoProjectRoot)wasm/Wasm.Build.Tests/data/WasmOverridePacks.targets" />
        <OverrideFiles Include="$(MonoProjectRoot)wasm/Wasm.Build.Tests/data/Blazor.Directory.Build.targets" />
        <OverrideFiles Include="$(MonoProjectRoot)sample/wasm/browser-frame/AppStart.cs" />
        <OverrideFiles Include="$(MonoProjectRoot)sample/wasm/browser-frame/frame.js" />
        <OverrideDestFiles Include="$(MonoProjectRoot)sample/wasm/browser-frame/browser-frame/WasmOverridePacks.targets" />
        <OverrideDestFiles Include="$(MonoProjectRoot)sample/wasm/browser-frame/browser-frame/Directory.Build.targets" />
        <OverrideDestFiles Include="$(MonoProjectRoot)sample/wasm/browser-frame/browser-frame/AppStart.cs" />
        <OverrideDestFiles Include="$(MonoProjectRoot)sample/wasm/browser-frame/browser-frame/wwwroot/frame.js" />
    </ItemGroup>

    <MakeDir Directories="$(MonoProjectRoot)sample/wasm/blazor-frame/browser-frame"/>
    <Copy SourceFiles="@(OverrideFiles)" DestinationFiles="@(OverrideDestFiles)" UseSymbolicLinksIfPossible="true" OverwriteReadOnlyFiles="true" />

    <WriteLinesToFile
        File="$(MSBuildThisFileDirectory)../browser-frame/browser-frame/nuget.config"
        Overwrite="true"
        Lines="$(NugetConfigContent)" />

    <Exec EnvironmentVariables="MSBuildSDKsPath=$(WBTSdksPath);NUGET_PACKAGES=$(NugetPackagesPath);DOTNET_ROOT=$(ArtifactsDir)bin/dotnet-latest;PATH=$(ArtifactsDir)bin/dotnet-latest:$(PATH)" WorkingDirectory="$(MSBuildThisFileDirectory)../browser-frame/browser-frame/" Command="dotnet new wasmbrowser" />
    <Exec WorkingDirectory="$(MSBuildThisFileDirectory)../browser-frame" Command="git apply browser-frame.diff" />
  </Target>

  <Target Name="BuildBrowserFrame" AfterTargets="BuildSampleInTree" Condition="'$(BrowserStartup)' == 'true'" DependsOnTargets="SetWBTSdksPath;BuildWBT;PrepareBrowserTemplate">

    <Exec EnvironmentVariables="MSBuildSDKsPath=$(WBTSdksPath);NUGET_PACKAGES=$(NugetPackagesPath);DOTNET_ROOT=$(ArtifactsDir)bin/dotnet-latest;PATH=$(ArtifactsDir)bin/dotnet-latest:$(PATH)" WorkingDirectory="$(MSBuildThisFileDirectory)../browser-frame/browser-frame" Command="dotnet publish browser-frame.csproj -c $(Configuration) -p:WBTOverrideRuntimePack=true -p:TargetOS=browser -p:TargetArchitecture=wasm $(BuildAdditionalArgs)" />

    <ItemGroup>
      <BrowserSourceFiles Include="$(MSBuildThisFileDirectory)../browser-frame/browser-frame/bin/$(Configuration)/$(NetCoreAppCurrent)/publish/wwwroot/**/*.*"/>
    </ItemGroup>

    <Copy
        SourceFiles="@(BrowserSourceFiles)"
        DestinationFolder="$(MSBuildThisFileDirectory)/bin/$(Configuration)/AppBundle/browser-template/%(RecursiveDir)" />
  </Target>
</Project>
