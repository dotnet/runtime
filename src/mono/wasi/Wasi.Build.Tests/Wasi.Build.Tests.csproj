<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>$(NetCoreAppToolCurrent)</TargetFramework>
    <RuntimeIdentifierForWorkloadTesting>wasi-wasm</RuntimeIdentifierForWorkloadTesting>
    <SkipXunitTrimmerDescriptor>true</SkipXunitTrimmerDescriptor>
    <IsTestProject>true</IsTestProject>
    <EnableDefaultItems>true</EnableDefaultItems>
    <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
    <DefineConstants Condition="'$(ContinuousIntegrationBuild)' != 'true'">TEST_DEBUG_CONFIG_ALSO</DefineConstants>
    <!-- This project should not build against the live built .NETCoreApp targeting pack as it contributes to the build itself. -->
    <UseLocalTargetingRuntimePack>false</UseLocalTargetingRuntimePack>

    <TestUsingWorkloads Condition="'$(TestUsingWorkloads)' == ''">true</TestUsingWorkloads>
    <!-- these are imported in this project instead -->
    <SkipWorkloadsTestingTargetsImport>false</SkipWorkloadsTestingTargetsImport>
    <InstallWorkloadForTesting>true</InstallWorkloadForTesting>

    <!-- don't run any wasm build steps -->
    <IsWasiProject>false</IsWasiProject>
    <UseDefaultTestHost>true</UseDefaultTestHost>

    <EnableRunSettingsSupport>false</EnableRunSettingsSupport>
    <DefineConstants>TARGET_WASI</DefineConstants>
    <_MonoSrcWasmDir>$([MSBuild]::NormalizeDirectory($(MonoProjectRoot), 'wasm'))</_MonoSrcWasmDir>
  </PropertyGroup>

  <Import Project="$(RepositoryEngineeringDir)testing\workloads-testing.targets" />

  <PropertyGroup>
    <RunScriptInputName Condition="'$(OS)' == 'Windows_NT'">RunScriptTemplate.cmd</RunScriptInputName>
    <RunScriptInputName Condition="'$(OS)' != 'Windows_NT'">RunScriptTemplate.sh</RunScriptInputName>

    <RunScriptInputPath>$(_MonoSrcWasmDir)Wasm.Build.Tests\data\$(RunScriptInputName)</RunScriptInputPath>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(_MonoSrcWasmDir)Wasm.Build.Tests\Common\*.cs" />

    <None Include="..\testassets\**\*" Link="testassets\%(RecursiveDir)%(FileName)%(Extension)" CopyToOutputDirectory="PreserveNewest" />
    <None Include="data\**\*" Link="data\%(RecursiveDir)%(FileName)%(Extension)" CopyToOutputDirectory="PreserveNewest" />
    <None Include="$(_MonoSrcWasmDir)Wasm.Build.Tests\data\nuget*" Link="data\%(RecursiveDir)%(FileName)%(Extension)" CopyToOutputDirectory="PreserveNewest" />
    <None Include="$(_MonoSrcWasmDir)Wasm.Build.Tests\data\WasmOverridePacks.targets" Link="data\%(RecursiveDir)%(FileName)%(Extension)" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <Target Name="UpdateRunScriptCommands" BeforeTargets="GenerateRunScript" DependsOnTargets="_SetPackageVersionForWorkloadsTesting">
    <Error Condition="'$(TestUsingWorkloads)' == 'true' and '$(PackageVersionForWorkloadManifests)' == ''"
           Text="%24(PackageVersionForWorkloadManifests) is not set. PackageVersion=$(PackageVersion)." />

    <Error Condition="'$(SdkWithWorkloadForTestingPath)' == ''" Text="%24(SdkWithWorkloadForTestingPath) is not set" />

    <PropertyGroup>
      <_SdkWithWorkloadForTestingDirName>$([System.IO.Path]::GetDirectoryName($(SdkWithWorkloadForTestingPath)))</_SdkWithWorkloadForTestingDirName>
      <_SdkWithWorkloadForTestingDirName>$([System.IO.Path]::GetFilename($(_SdkWithWorkloadForTestingDirName)))</_SdkWithWorkloadForTestingDirName>
    </PropertyGroup>

    <ItemGroup Condition="'$(TestUsingWorkloads)' == 'true'">
      <RunScriptCommands Condition="'$(OS)' != 'Windows_NT'" Include="export WORKLOAD_PACKS_VER=$(PackageVersionForWorkloadManifests)" />
      <RunScriptCommands Condition="'$(OS)' == 'Windows_NT'" Include="set WORKLOAD_PACKS_VER=$(PackageVersionForWorkloadManifests)" />
    </ItemGroup>

    <ItemGroup Condition="'$(ContinuousIntegrationBuild)' == 'true'">
      <!-- TEST_USING_WORKLOADS - this is set per helix job, in sendtohelixhelp.proj -->
      <RunScriptCommands Condition="'$(OS)' != 'Windows_NT'" Include="export BASE_DIR=%24{HELIX_CORRELATION_PAYLOAD}" />
      <RunScriptCommands Condition="'$(OS)' == 'Windows_NT'" Include="set BASE_DIR=%HELIX_CORRELATION_PAYLOAD%" />
    </ItemGroup>

    <PropertyGroup>
      <_TestCategoryFilter Condition="'$(TestUsingWorkloads)' == 'true'">&amp;Category!=no-workload</_TestCategoryFilter>
      <_TestCategoryFilter Condition="'$(TestUsingWorkloads)' != 'true'">&amp;Category=no-workload</_TestCategoryFilter>
    </PropertyGroup>

    <ItemGroup Condition="'$(ContinuousIntegrationBuild)' != 'true'">
      <RunScriptCommands Condition="'$(OS)' != 'Windows_NT'" Include="export TEST_USING_WORKLOADS=$(TestUsingWorkloads)" />
      <RunScriptCommands Condition="'$(OS)' == 'Windows_NT'" Include="set TEST_USING_WORKLOADS=$(TestUsingWorkloads)" />

      <RunScriptCommands Condition="'$(OS)' != 'Windows_NT'" Include="export SDK_DIR_NAME=$(_SdkWithWorkloadForTestingDirName)" />
      <RunScriptCommands Condition="'$(OS)' == 'Windows_NT'" Include="set SDK_DIR_NAME=$(_SdkWithWorkloadForTestingDirName)" />

      <RunScriptCommands Condition="'$(OS)' != 'Windows_NT'" Include="export &quot;TestCategoryFilter=$(_TestCategoryFilter)&quot;" />
      <RunScriptCommands Condition="'$(OS)' == 'Windows_NT'" Include="set &quot;TestCategoryFilter=$(_TestCategoryFilter)&quot;" />

      <RunScriptCommands Condition="'$(OS)' != 'Windows_NT'" Include="export BASE_DIR=$(ArtifactsBinDir)" />
      <RunScriptCommands Condition="'$(OS)' == 'Windows_NT'" Include="set BASE_DIR=$(ArtifactsBinDir)" />

      <RunScriptCommands Condition="'$(OS)' != 'Windows_NT'" Include="export BUILT_NUGETS_PATH=$(LibrariesShippingPackagesDir)/" />
      <RunScriptCommands Condition="'$(OS)' == 'Windows_NT'" Include="set BUILT_NUGETS_PATH=$(LibrariesShippingPackagesDir)" />

      <RunScriptCommands Condition="'$(OS)' != 'Windows_NT'" Include="export PATH=$(WasmtimeDir):%24PATH" />
      <RunScriptCommands Condition="'$(OS)' == 'Windows_NT'" Include="set PATH=$(WasmtimeDir);%PATH%" />
    </ItemGroup>

    <ItemGroup>
      <_RuntimePackVersions Include="$(PackageVersion)" EnvVarName="RUNTIME_PACK_VER9" />
      <_RuntimePackVersions Include="$(PackageVersionNet8)" EnvVarName="RUNTIME_PACK_VER8" Condition="'$(PackageVersionNet8)' != ''" />
      <_RuntimePackVersions Include="$(PackageVersion)" EnvVarName="RUNTIME_PACK_VER8" Condition="'$(PackageVersionNet8)' == ''" />

      <RunScriptCommands Condition="'$(OS)' != 'Windows_NT'" Include="export %(_RuntimePackVersions.EnvVarName)=&quot;%(_RuntimePackVersions.Identity)&quot;" />
      <RunScriptCommands Condition="'$(OS)' == 'Windows_NT'" Include="set &quot;%(_RuntimePackVersions.EnvVarName)=%(_RuntimePackVersions.Identity)&quot;" />

      <RunScriptCommands Condition="'$(OS)' != 'Windows_NT'" Include="set_env_vars" />
      <RunScriptCommands Condition="'$(OS)' == 'Windows_NT'" Include="CALL :SetEnvVars" />

      <TestFilter Condition="'$(XUnitMethodName)' != ''" Include="DisplayName=$(XUnitMethodName)" />
      <TestFilter Condition="'$(XUnitClassName)' != ''" Include="FullyQualifiedName~$(XUnitClassName)" />
      <TestFilter Include="Category!=IgnoreForCI" />
      <!-- this allows use of test attributes from dotnet.xunitextensions -->
      <TestFilter Include="Category!=failing" />
      <TestFilter Include="$(ExtraTestFilter)" />
    </ItemGroup>

    <PropertyGroup>
      <RunScriptCommand Condition="'$(OS)' != 'Windows_NT'">dotnet test $(AssemblyName).dll</RunScriptCommand>
      <RunScriptCommand Condition="'$(OS)' == 'Windows_NT'">dotnet.exe exec xunit.console.dll $(AssemblyName).dll</RunScriptCommand>

      <RunScriptCommand Condition="'$(OS)' != 'Windows_NT'">$(RunScriptCommand) --results-directory &quot;%24XHARNESS_OUT&quot;</RunScriptCommand>
      <RunScriptCommand Condition="'$(OS)' == 'Windows_NT'">$(RunScriptCommand) --results-directory &quot;%XHARNESS_OUT%&quot;</RunScriptCommand>

      <RunScriptCommand>$(RunScriptCommand) --nologo</RunScriptCommand>
      <RunScriptCommand>$(RunScriptCommand) &quot;-l:trx%3BLogFileName=testResults.trx&quot;</RunScriptCommand>

      <RunScriptCommand Condition="'$(ContinuousIntegrationBuild)' == 'true' and '$(OS)' != 'Windows_NT'">$(RunScriptCommand) %24HELIX_XUNIT_ARGS</RunScriptCommand>
      <RunScriptCommand Condition="'$(ContinuousIntegrationBuild)' == 'true' and '$(OS)' == 'Windows_NT'">$(RunScriptCommand) %HELIX_XUNIT_ARGS%</RunScriptCommand>

      <RunScriptCommand Condition="'$(ContinuousIntegrationBuild)' == 'true' and '$(OS)' == 'Windows_NT'">$(RunScriptCommand) -parallel none</RunScriptCommand>
      <RunScriptCommand>$(RunScriptCommand) --logger "console;verbosity=normal"</RunScriptCommand>

      <RunScriptCommand Condition="'$(OS)' != 'Windows_NT'">$(RunScriptCommand) --filter &quot;@(TestFilter, '&amp;')%24TestCategoryFilter&quot;</RunScriptCommand>
      <RunScriptCommand Condition="'$(OS)' == 'Windows_NT'">$(RunScriptCommand) --filter &quot;@(TestFilter, '&amp;')%TestCategoryFilter%&quot;</RunScriptCommand>
    </PropertyGroup>
  </Target>
</Project>
