<Project>
  <UsingTask TaskName="Microsoft.WebAssembly.Build.Tasks.WasiAppBuilder" AssemblyFile="$(WasmAppBuilderTasksAssemblyPath)" />
  <UsingTask TaskName="Microsoft.WebAssembly.Build.Tasks.WasmLoadAssembliesAndReferences" AssemblyFile="$(WasmAppBuilderTasksAssemblyPath)" />

  <!--
      Required public items/properties:
      - $(EMSDK_PATH)      - points to the emscripten sdk location.

      Public properties (optional):
      - $(WasmAppDir)        - AppBundle dir (Defaults to `$(OutputPath)\$(Configuration)\AppBundle`)
      - $(WasmMainAssemblyFileName)- Defaults to $(TargetFileName)
      - $(WasmBuildNative)   - Whether to build the native executable. Defaults to false.
      - $(WasmNativeStrip)   - Whether to strip the native executable. Defaults to true.
      - $(WasmLinkIcalls)    - Whether to link out unused icalls. Defaults to $(WasmBuildNative).
      - $(RunAOTCompilation) - Defaults to false.

      - $(WasmDebugLevel)
                              > 0 enables debugging and sets the debug log level to debugLevel
                              == 0 disables debugging and enables interpreter optimizations
                              < 0 enabled debugging and disables debug logging.

      - $(WasmNativeDebugSymbols) - Build with native debug symbols, useful only with `$(RunAOTCompilation)`, or `$(WasmBuildNative)`
                                    Defaults to true.
      - $(WasmEmitSymbolMap)      - Generates a `dotnet.js.symbols` file with a map of wasm function number to name.
      - $(WasmDedup)         - Whether to dedup generic instances when using AOT. Defaults to true.

      - $(WasmProfilers)     - Profilers to use
      - $(AOTProfilePath)    - profile data file to be used for profile-guided optimization
      - $(InvariantGlobalization)       - Whether to disable ICU. Defaults to false.
      - $(InvariantTimezone)            - Whether to disable Timezone database. Defaults to false.

      - $(WasmResolveAssembliesBeforeBuild) - Resolve the assembly dependencies. Defaults to false
      - $(WasmAssemblySearchPaths)          - used for resolving assembly dependencies
      - $(WasmSkipMissingAssemblies)        - Don't fail on any missing dependencies

      - $(WasmGenerateAppBundle)            - Controls whether an app bundle should be generated.
                                              Defaults to true.
                                              This is useful for projects that want to handle their own
                                              packaging, or app bundle generation, eg. Blazor.

      - $(WasmStripAOTAssemblies)           - Whether to run `mono-cil-strip` on the assemblies.
                                              Always set to false!

      - $(EmccVerbose)                      - Set to false to disable verbose emcc output.

      - $(EmccLinkOptimizationFlag)         - Optimization flag to use for the link step
      - $(EmccCompileOptimizationFlag)      - Optimization flag to use for compiling native files

      - $(WasmBuildAppAfterThisTarget)      - This target is used as `AfterTargets` for `WasmBuildApp. this
                                              is what triggers the wasm app building. Defaults to `Build`.
      - $(WasmTriggerPublishAppAfterThisTarget) - This target is used as `AfterTargets` for `WasmTriggerPublishApp.
                                                  Defaults to `Publish`.

      - $(EnableDefaultWasmAssembliesToBundle) - Get list of assemblies to bundle automatically. Defaults to true.
      - $(WasmBuildOnlyAfterPublish)        - Causes relinking to be done only for Publish. Defaults to false.
      - $(RunAOTCompilationAfterBuild)      - Run AOT compilation even after Build. By default, it is run only for publish.
                                              Defaults to false.
      - $(WasmAotProfilePath)               - Path to an AOT profile file.
      - $(WasmEnableExceptionHandling)      - Enable support for the WASM Exception Handling feature.
      - $(WasmEnableSIMD)                   - Enable support for the WASM SIMD feature.

      Public items:
      - @(WasmExtraFilesToDeploy) - Files to copy to $(WasmAppDir).
                                    (relative path can be set via %(TargetPath) metadata)
      - @(WasmFilesToIncludeInFileSystem) - Files to include in the vfs
      - @(WasmNativeAsset)        - Native files to be added to `NativeAssets` in the bundle.

      - @(WasmExtraConfig)        - json elements to add to `mono-config.json`
                                    Eg. <WasmExtraConfig Include="xxx" Value="true" />

                                    - Value attribute can have a number, bool, quoted string, or json string

                                    <WasmExtraConfig Include="json" Value="{ &quot;abc&quot;: 4 }" />
                                    <WasmExtraConfig Include="string_val" Value="&quot;abc&quot;" />
                                    <WasmExtraConfig Include="string_with_json" Value="&quot;{ &quot;abc&quot;: 4 }&quot;" />
      - @(EmccExportedRuntimeMethod) - Extra method for emcc flag EXPORTED_RUNTIME_METHODS
      - @(EmccExportedFunction)      - Extra function for emcc flag EXPORTED_FUNCTIONS
  -->

  <PropertyGroup>
    <WasmDedup Condition="'$(WasmDedup)' == ''">false</WasmDedup>
    <WasmEnableExceptionHandling Condition="'$(WasmEnableExceptionHandling)' == ''">false</WasmEnableExceptionHandling>
    <WasmEnableSIMD Condition="'$(WasmEnableSIMD)' == ''">false</WasmEnableSIMD>

    <!--<WasmStripAOTAssemblies Condition="'$(AOTMode)' == 'LLVMOnlyInterp'">false</WasmStripAOTAssemblies>-->
    <!--<WasmStripAOTAssemblies Condition="'$(WasmStripAOTAssemblies)' == ''">$(RunAOTCompilation)</WasmStripAOTAssemblies>-->
    <WasmStripAOTAssemblies>false</WasmStripAOTAssemblies>

    <_BeforeWasmBuildAppDependsOn />

    <IsWasiProject Condition="'$(IsWasiProject)' == '' and '$(RuntimeIdentifier)' == 'wasi-wasm' and '$(OutputType)' != 'Library'">true</IsWasiProject>
    <IsBrowserWasmProject Condition="'$(IsBrowserWasmProject)' == '' and '$(RuntimeIdentifier)' == 'browser-wasm' and '$(OutputType)' != 'Library'">true</IsBrowserWasmProject>
    <IsWasmProject Condition="'$(IsWasmProject)' == '' and ('$(IsWasiProject)' == 'true' or '$(IsBrowserWasmProject)' == 'true')">true</IsWasmProject>

    <WasmBuildAppAfterThisTarget Condition="'$(WasmBuildAppAfterThisTarget)' == '' and '$(DisableAutoWasmBuildApp)' != 'true'">Build</WasmBuildAppAfterThisTarget>

    <WasmTriggerPublishAppAfterThisTarget Condition="'$(DisableAutoWasmPublishApp)' != 'true' and '$(WasmBuildingForNestedPublish)' != 'true'">Publish</WasmTriggerPublishAppAfterThisTarget>
    <_WasmNestedPublishAppPreTarget Condition="'$(DisableAutoWasmPublishApp)' != 'true'">Publish</_WasmNestedPublishAppPreTarget>

    <EnableDefaultWasmAssembliesToBundle Condition="'$(EnableDefaultWasmAssembliesToBundle)' == ''">true</EnableDefaultWasmAssembliesToBundle>
    <WasmBuildOnlyAfterPublish Condition="'$(WasmBuildOnlyAfterPublish)' == '' and ('$(DeployOnBuild)' == 'true' or '$(_IsPublishing)' == 'true')">true</WasmBuildOnlyAfterPublish>
    <WasmGenerateAppBundle Condition="'$(WasmGenerateAppBundle)' == '' and '$(OutputType)' != 'Library'">true</WasmGenerateAppBundle>
    <WasmGenerateAppBundle Condition="'$(WasmGenerateAppBundle)' == ''">false</WasmGenerateAppBundle>

    <!-- FIXME: can't set to true because
      /workspaces/runtime/.dotnet/sdk/7.0.100-rc.1.22431.12/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(135,5): error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'wasi-wasm'.
    -->
    <UseAppHost Condition="'$(IsWasiProject)' == 'true'">false</UseAppHost>
    <SelfContained Condition="'$(IsWasiProject)' == 'true'">true</SelfContained>
    <TrimMode Condition="'$(TrimMode)' == ''">partial</TrimMode>

    <!-- Temporarily `false`, till sdk gets a fix for supporting the new file -->
    <WasmEmitSymbolMap Condition="'$(WasmEmitSymbolMap)' == '' and '$(RunAOTCompilation)' != 'true'">false</WasmEmitSymbolMap>

    <!-- if DebuggerSupport==true, then ensure that WasmDebugLevel isn't disabling debugging -->
    <WasmDebugLevel Condition="('$(WasmDebugLevel)' == '' or '$(WasmDebugLevel)' == '0') and ('$(DebuggerSupport)' == 'true' or '$(Configuration)' == 'Debug')">-1</WasmDebugLevel>

    <WasmSingleFileBundle Condition="'$(WasmSingleFileBundle)' == ''">false</WasmSingleFileBundle>
    <WasmBuildNative Condition="'$(WasmBuildNative)' == '' and '$(WasmSingleFileBundle)' == 'true'">true</WasmBuildNative>
    <WasmBuildNative Condition="'$(WasmBuildNative)' == '' and '$(InvariantGlobalization)' == 'true'">true</WasmBuildNative>
    <WasmBuildNative Condition="'$(WasmBuildNative)' == '' and '$(InvariantTimezone)' == 'true'">true</WasmBuildNative>

    <WasiBundleAssemblies Condition="'$(WasiBundleAssemblies)' == ''">true</WasiBundleAssemblies>
    <WasiRunner Condition="'$(WasiRunner)' == ''">wasmtime</WasiRunner>
  </PropertyGroup>

  <ItemGroup>
    <SupportedPlatform Condition="'$(IsWasiProject)' == 'true'"        Remove="@(SupportedPlatform)" />
    <SupportedPlatform Condition="'$(IsBrowserWasmProject)' == 'true'" Include="browser" />
    <SupportedPlatform Condition="'$(IsWasiProject)' == 'true'"        Include="wasi" />
  </ItemGroup>

  <PropertyGroup Label="Identify app bundle directory to run from">
    <!-- Allow running from custom WasmAppDir -->
    <_AppBundleDirForRunCommand Condition="'$(WasmAppDir)' != ''">$(WasmAppDir)</_AppBundleDirForRunCommand>

    <!--
      This is the default path. We have to build it explicitly because
      RuntimeIdentifierInference.targets is imported after this file, and
      updates OutputPath to include the RID. So, we don't have the correct
      final OutputPath here. But we need it for `dotnet run` to work, as it
      just reads the RunCommand after evaluation.

      The path might not have been created yet, for example when creating a new project in VS, so don't use an Exists() check
    -->

    <!-- This is the only case where OutputPath needs an additional part -->
    <_AppBundleDirForRunCommand Condition="'$(_AppBundleDirForRunCommand)' == '' and '$(UseArtifactsOutput)' == '' and '$(AppendRuntimeIdentifierToOutputPath)' != 'false'">$([System.IO.Path]::Combine($(OutputPath), 'wasi-wasm', 'AppBundle'))</_AppBundleDirForRunCommand>

    <!--
      In case of UseArtifactsOutput==true, the path is like `OutputPath=./bin/wc0/debug_browser-wasm/`. And
      it remains the same even if `AppendRuntimeIdentifierToOutputPath`==true .
    -->
    <_AppBundleDirForRunCommand Condition="'$(_AppBundleDirForRunCommand)' == ''">$([System.IO.Path]::Combine($(OutputPath), 'AppBundle'))</_AppBundleDirForRunCommand>

    <!-- Ensure the path is absolute. In case of VS, the cwd might not be the correct one, so explicitly
         use $(MSBuildProjectDirectory). -->
    <_AppBundleDirForRunCommand Condition="'$(_AppBundleDirForRunCommand)' != '' and !$([System.IO.Path]::IsPathRooted($(_AppBundleDirForRunCommand)))">$([System.IO.Path]::Combine($(MSBuildProjectDirectory), $(_AppBundleDirForRunCommand)))</_AppBundleDirForRunCommand>
 </PropertyGroup>

  <PropertyGroup Condition="'$(WasmGenerateAppBundle)' == 'true'">
    <RunCommand Condition="'$(DOTNET_HOST_PATH)' != '' and Exists($(DOTNET_HOST_PATH))">$(DOTNET_HOST_PATH)</RunCommand>
    <RunCommand Condition="'$(RunCommand)' == ''">dotnet</RunCommand>

    <_RuntimeConfigJsonPath>$([MSBuild]::NormalizePath($(_AppBundleDirForRunCommand), '$(AssemblyName).runtimeconfig.json'))</_RuntimeConfigJsonPath>
    <RunArguments Condition="'$(RunArguments)' == ''">exec &quot;$([MSBuild]::NormalizePath($(WasmAppHostDir), 'WasmAppHost.dll'))&quot; --runtime-config &quot;$(_RuntimeConfigJsonPath)&quot; $(WasmHostArguments)</RunArguments>
    <RunWorkingDirectory Condition="'$(RunWorkingDirectory)' == ''">$(_AppBundleDirForRunCommand)</RunWorkingDirectory>
  </PropertyGroup>

  <!-- PUBLISH -->

  <Target Name="WasmTriggerPublishApp"
          AfterTargets="$(WasmTriggerPublishAppAfterThisTarget)"
          Condition="'$(IsWasiProject)' == 'true' and '$(WasmBuildingForNestedPublish)' != 'true' and '$(IsCrossTargetingBuild)' != 'true'">

    <!-- Use a unique property, so the already run wasm targets can also run -->
    <MSBuild Projects="$(MSBuildProjectFile)"
             Targets="WasmNestedPublishApp"
             Properties="_WasmInNestedPublish_UniqueProperty_XYZ=true;;WasmBuildingForNestedPublish=true;DeployOnBuild=">
      <Output TaskParameter="TargetOutputs" ItemName="WasmNestedPublishAppResultItems" />
    </MSBuild>

    <ItemGroup>
      <WasmAssembliesFinal Remove="@(WasmAssembliesFinal)" />
      <WasmAssembliesFinal Include="@(WasmNestedPublishAppResultItems)" Condition="'%(WasmNestedPublishAppResultItems.OriginalItemName)' == 'WasmAssembliesFinal'" />

      <WasmNativeAsset Remove="@(WasmNativeAsset)" />
      <WasmNativeAsset Include="@(WasmNestedPublishAppResultItems)" Condition="'%(WasmNestedPublishAppResultItems.OriginalItemName)' == 'WasmNativeAsset'" />

      <FileWrites Include="@(WasmNestedPublishAppResultItems)" Condition="'%(WasmNestedPublishAppResultItems.OriginalItemName)' == 'FileWrites'" />
    </ItemGroup>
  </Target>

  <!-- Public target. Do not depend on this target, as it is meant to be run by a msbuild task -->
  <Target Name="WasmNestedPublishApp"
          DependsOnTargets="ResolveRuntimePackAssets;$(_WasmNestedPublishAppPreTarget);$(WasmNestedPublishAppDependsOn)"
          Condition="'$(WasmBuildingForNestedPublish)' == 'true'"
          Returns="@(WasmNativeAsset);@(WasmAssembliesFinal);@(FileWrites)">

    <ItemGroup>
      <WasmNativeAsset OriginalItemName="WasmNativeAsset" />
      <WasmAssembliesFinal OriginalItemName="WasmAssembliesFinal" />
      <FileWrites OriginalItemName="FileWrites" />
    </ItemGroup>
  </Target>

  <Target Name="_PrepareForNestedPublish" Condition="'$(WasmBuildingForNestedPublish)' == 'true'">
    <PropertyGroup>
      <_WasmRuntimeConfigFilePath Condition="$([System.String]::new(%(PublishItemsOutputGroupOutputs.Identity)).EndsWith('$(AssemblyName).runtimeconfig.json'))">@(PublishItemsOutputGroupOutputs)</_WasmRuntimeConfigFilePath>
    </PropertyGroup>

    <ItemGroup Condition="'$(EnableDefaultWasmAssembliesToBundle)' == 'true' and '$(DisableAutoWasmPublishApp)' != 'true'">
      <WasmAssembliesToBundle Remove="@(WasmAssembliesToBundle)" />
      <WasmAssembliesToBundle Include="$(PublishDir)\**\*.dll" />
    </ItemGroup>

    <PropertyGroup Condition="'$(_WasmRuntimeConfigFilePath)' == ''">
      <_WasmRuntimeConfigFilePath Condition="$([System.String]::new(%(PublishItemsOutputGroupOutputs.Identity)).EndsWith('$(AssemblyName).runtimeconfig.json'))">@(PublishItemsOutputGroupOutputs)</_WasmRuntimeConfigFilePath>
    </PropertyGroup>
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)WasmApp.Native.targets" Condition="'$(IsBrowserWasmProject)' == 'true'" />
  <Import Project="$(MSBuildThisFileDirectory)WasiApp.Native.targets" Condition="'$(IsWasiProject)' == 'true'" />

  <!-- public target for Build -->
  <Target Name="WasmBuildApp"
          AfterTargets="$(WasmBuildAppAfterThisTarget)"
          DependsOnTargets="$(WasmBuildAppDependsOn)"
          Condition="'$(IsWasiProject)' == 'true' and '$(WasmBuildingForNestedPublish)' == '' and '$(WasmBuildOnlyAfterPublish)' != 'true' and '$(IsCrossTargetingBuild)' != 'true'" />

  <Target Name="_InitializeCommonProperties">
    <Error Condition="'$(MicrosoftNetCoreAppRuntimePackDir)' == '' and ('%(ResolvedRuntimePack.PackageDirectory)' == '' or !Exists(%(ResolvedRuntimePack.PackageDirectory)))"
           Text="%24(MicrosoftNetCoreAppRuntimePackDir)='', and cannot find %25(ResolvedRuntimePack.PackageDirectory)=%(ResolvedRuntimePack.PackageDirectory). One of these need to be set to a valid path" />
    <Error Condition="'$(IntermediateOutputPath)' == ''" Text="%24(IntermediateOutputPath) property needs to be set" />

    <PropertyGroup>
      <MicrosoftNetCoreAppRuntimePackDir Condition="'$(MicrosoftNetCoreAppRuntimePackDir)' == ''">%(ResolvedRuntimePack.PackageDirectory)</MicrosoftNetCoreAppRuntimePackDir>
      <MicrosoftNetCoreAppRuntimePackRidDir Condition="'$(MicrosoftNetCoreAppRuntimePackRidDir)' == ''">$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackDir), 'runtimes', $(RuntimeIdentifier)))</MicrosoftNetCoreAppRuntimePackRidDir>
      <MicrosoftNetCoreAppRuntimePackRidDir>$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackRidDir)))</MicrosoftNetCoreAppRuntimePackRidDir>
      <MicrosoftNetCoreAppRuntimePackRidNativeDir>$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackRidDir), 'native'))</MicrosoftNetCoreAppRuntimePackRidNativeDir>

      <_WasmRuntimePackIncludeDir>$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackRidNativeDir), 'include'))</_WasmRuntimePackIncludeDir>
      <_WasmRuntimePackSrcDir>$([MSBuild]::NormalizeDirectory($(MicrosoftNetCoreAppRuntimePackRidNativeDir), 'src'))</_WasmRuntimePackSrcDir>

      <_WasmIntermediateOutputPath Condition="'$(WasmBuildingForNestedPublish)' == ''">$([MSBuild]::NormalizeDirectory($(IntermediateOutputPath), 'wasm', 'for-build'))</_WasmIntermediateOutputPath>
      <_WasmIntermediateOutputPath Condition="'$(WasmBuildingForNestedPublish)' != ''">$([MSBuild]::NormalizeDirectory($(IntermediateOutputPath), 'wasm', 'for-publish'))</_WasmIntermediateOutputPath>

      <_DriverGenCPath>$(_WasmIntermediateOutputPath)driver-gen.c</_DriverGenCPath>
      <_WasmShouldAOT Condition="'$(WasmBuildingForNestedPublish)' == 'true' and '$(RunAOTCompilation)' == 'true'">true</_WasmShouldAOT>
      <_WasmShouldAOT Condition="'$(RunAOTCompilationAfterBuild)' == 'true' and '$(RunAOTCompilation)' == 'true'">true</_WasmShouldAOT>
      <_WasmShouldAOT Condition="'$(_WasmShouldAOT)' == ''">false</_WasmShouldAOT>
    </PropertyGroup>

    <ItemGroup Condition="'$(MicrosoftNetCoreAppRuntimePackRidLibTfmDir)' == ''">
      <!-- find the path with the assemblies, so we don't have to hardcode the tfm.
           Cannot use System.Private.Corelib since that is in a different directory -->
      <_SystemRuntimePathItem Include="$(MicrosoftNetCoreAppRuntimePackRidDir)\lib\net*\System.Runtime.dll" />
    </ItemGroup>

    <Error Condition="'$(MicrosoftNetCoreAppRuntimePackRidLibTfmDir)' == '' and @(_SystemRuntimePathItem->Count()) == 0" Text="Could not find System.Runtime.dll in $(MicrosoftNetCoreAppRuntimePackRidDir). This is likely a setup issue." />
    <Error Condition="'$(MicrosoftNetCoreAppRuntimePackRidLibTfmDir)' == '' and @(_SystemRuntimePathItem->Count()) > 1" Text="Found more than one System.Runtime.dll. This is likely a setup issue." />

    <PropertyGroup Condition="'$(MicrosoftNetCoreAppRuntimePackRidLibTfmDir)' == ''">
      <MicrosoftNetCoreAppRuntimePackRidLibTfmDir>$([System.IO.Path]::GetDirectoryName(%(_SystemRuntimePathItem.Identity)))</MicrosoftNetCoreAppRuntimePackRidLibTfmDir>
    </PropertyGroup>

    <!-- FIXME: move to a emscripten init target -->
    <MakeDir Directories="$(WasmCachePath)" Condition="'$(IsBrowserWasmProject)' == 'true' and '$(WasmCachePath)' != '' and !Exists($(WasmCachePath))" />
    <MakeDir Directories="$(_WasmIntermediateOutputPath)" />
  </Target>

  <Target Name="_PrepareForAfterBuild" Condition="'$(WasmBuildingForNestedPublish)' != 'true'">
    <ItemGroup Condition="'$(EnableDefaultWasmAssembliesToBundle)' == 'true'">
      <WasmAssembliesToBundle Include="@(ReferenceCopyLocalPaths);@(MainAssembly)" Condition="'%(ReferenceCopyLocalPaths.Extension)' == '.dll'" />
    </ItemGroup>
  </Target>

  <Target Name="_BeforeWasmBuildApp" DependsOnTargets="$(_BeforeWasmBuildAppDependsOn)">
    <Error Condition="!Exists('$(MicrosoftNetCoreAppRuntimePackRidDir)')" Text="MicrosoftNetCoreAppRuntimePackRidDir=$(MicrosoftNetCoreAppRuntimePackRidDir) doesn't exist" />
    <Error Condition="@(WasmAssembliesToBundle->Count()) == 0" Text="WasmAssembliesToBundle item is empty. No assemblies to process" />

    <PropertyGroup>
      <WasmAppDir Condition="'$(WasmAppDir)' == ''">$([MSBuild]::NormalizeDirectory($(OutputPath), 'AppBundle'))</WasmAppDir>
      <WasmMainAssemblyFileName Condition="'$(WasmMainAssemblyFileName)' == ''">$(TargetFileName)</WasmMainAssemblyFileName>
      <_WasmOutputFileName Condition="'$(WasmSingleFileBundle)' == 'true'">$([System.IO.Path]::GetFileNameWithoutExtension('$(WasmMainAssemblyFileName)')).wasm</_WasmOutputFileName>
      <_WasmOutputFileName Condition="'$(WasmSingleFileBundle)' != 'true'">dotnet.wasm</_WasmOutputFileName>
      <_WasmOutputFileName>$([System.IO.Path]::Combine($(_WasmIntermediateOutputPath), $(_WasmOutputFileName)))</_WasmOutputFileName>

      <WasmAppDir>$([MSBuild]::NormalizeDirectory($(WasmAppDir)))</WasmAppDir>

      <_MainAssemblyPath Condition="'%(WasmAssembliesToBundle.FileName)' == $(AssemblyName) and '%(WasmAssembliesToBundle.Extension)' == '.dll' and $(WasmGenerateAppBundle) == 'true'">%(WasmAssembliesToBundle.Identity)</_MainAssemblyPath>
      <_WasmRuntimeConfigFilePath Condition="'$(_WasmRuntimeConfigFilePath)' == '' and $(_MainAssemblyPath) != ''">$([System.IO.Path]::ChangeExtension($(_MainAssemblyPath), '.runtimeconfig.json'))</_WasmRuntimeConfigFilePath>
      <_ParsedRuntimeConfigFilePath Condition="'$(_WasmRuntimeConfigFilePath)' != ''">$([System.IO.Path]::GetDirectoryName($(_WasmRuntimeConfigFilePath)))\runtimeconfig.bin</_ParsedRuntimeConfigFilePath>
    </PropertyGroup>

    <Message Condition="'$(WasmGenerateAppBundle)' == 'true' and $(_MainAssemblyPath) == ''"
             Text="Could not find %24(AssemblyName)=$(AssemblyName).dll in the assemblies to be bundled."
             Importance="Low" />

    <Message Condition="'$(WasmGenerateAppBundle)' == 'true' and $(_WasmRuntimeConfigFilePath) != '' and !Exists($(_WasmRuntimeConfigFilePath))"
             Text="Could not find $(_WasmRuntimeConfigFilePath) for $(_MainAssemblyPath)."
             Importance="Low" />

    <ItemGroup>
      <_WasmAssembliesInternal Remove="@(_WasmAssembliesInternal)" />
      <_WasmAssembliesInternal Include="@(WasmAssembliesToBundle->Distinct())" WasmRole="assembly" />

      <_WasmSatelliteAssemblies Remove="@(_WasmSatelliteAssemblies)" />
      <_WasmSatelliteAssemblies Include="@(_WasmAssembliesInternal)" />
      <_WasmSatelliteAssemblies Remove="@(_WasmSatelliteAssemblies)" Condition="!$([System.String]::Copy('%(Identity)').EndsWith('.resources.dll'))" />
      <!-- FIXME: Only include the ones with valid culture name -->
      <_WasmSatelliteAssemblies CultureName="$([System.IO.Directory]::GetParent('%(Identity)').Name)" WasmRole="SatelliteAssembly" />

      <_WasmAssembliesInternal Remove="@(_WasmSatelliteAssemblies)" />
    </ItemGroup>
  </Target>

  <Target Name="_WasmGenerateRuntimeConfig"
          Inputs="$(_WasmRuntimeConfigFilePath)"
          Outputs="$(_ParsedRuntimeConfigFilePath)"
          Condition="Exists('$(_WasmRuntimeConfigFilePath)')">
    <ItemGroup>
      <_RuntimeConfigReservedProperties Include="RUNTIME_IDENTIFIER"/>
      <_RuntimeConfigReservedProperties Include="APP_CONTEXT_BASE_DIRECTORY"/>
    </ItemGroup>

    <RuntimeConfigParserTask
        RuntimeConfigFile="$(_WasmRuntimeConfigFilePath)"
        OutputFile="$(_ParsedRuntimeConfigFilePath)"
        RuntimeConfigReservedProperties="@(_RuntimeConfigReservedProperties)">
    </RuntimeConfigParserTask>

    <ItemGroup>
      <WasmFilesToIncludeInFileSystem Include="$(_ParsedRuntimeConfigFilePath)" />
    </ItemGroup>
  </Target>

  <Target Name="_GetWasiGenerateAppBundleDependencies">
    <PropertyGroup>
      <_HasDotnetWasm Condition="'%(WasmNativeAsset.FileName)%(WasmNativeAsset.Extension)' == 'dotnet.wasm'">true</_HasDotnetWasm>
    </PropertyGroup>

    <ItemGroup Condition="'$(InvariantGlobalization)' == 'true' or '$(WasmSingleFileBundle)' == 'true'">
      <ReferenceCopyLocalPaths Remove="$(MicrosoftNetCoreAppRuntimePackRidNativeDir)icudt.dat" />
    </ItemGroup>
    <ItemGroup Condition="'$(WasmBuildNative)' == 'true'">
      <ReferenceCopyLocalPaths Remove="$(MicrosoftNetCoreAppRuntimePackRidNativeDir)dotnet.wasm" />
    </ItemGroup>
    <ItemGroup Condition="'$(WasmBuildNative)' != 'true'">
      <!-- Add the default ones when we don't compile one -->
      <WasmNativeAsset Include="$(MicrosoftNetCoreAppRuntimePackRidNativeDir)dotnet.wasm"/>
      <WasmFilesToIncludeInFileSystem Include="@(WasmNativeAsset)" Condition="'%(WasmNativeAsset.FileName)%(WasmNativeAsset.Extension)' == 'dotnet.js.symbols'" />
    </ItemGroup>

    <ItemGroup Condition="'$(InvariantGlobalization)' != 'true' and '$(WasmSingleFileBundle)' != 'true'">
      <WasmIcuDataFileNames Include="$(MicrosoftNetCoreAppRuntimePackRidNativeDir)icudt.dat"/>
      <WasmNativeAsset Include="@(WasmIcuDataFileNames)"/>
    </ItemGroup>
  </Target>

  <Target Name="_WasiGenerateAppBundle"
          Inputs="@(_WasmAssembliesInternal);@(WasmNativeAsset)"
          Outputs="$(WasmAppDir)\.stamp"
          Condition="'$(WasmGenerateAppBundle)' == 'true'"
          DependsOnTargets="_WasmGenerateRuntimeConfig;_GetWasiGenerateAppBundleDependencies;_WasiDefaultGenerateAppBundle;_GenerateRunWasmtimeScript">
  </Target>


  <Target Name="_WasiDefaultGenerateAppBundle">

    <WasiAppBuilder
      AppDir="$(WasmAppDir)"
      Assemblies="@(_WasmAssembliesInternal)"
      MainAssemblyName="$(WasmMainAssemblyFileName)"
      IsSingleFileBundle="$(WasmSingleFileBundle)"
      HostConfigs="@(HostConfig)"
      RuntimeArgsForHost="@(WasmMonoRuntimeArgs)"
      DefaultHostConfig="$(DefaultWasmHostConfig)"
      InvariantGlobalization="$(InvariantGlobalization)"
      SatelliteAssemblies="@(_WasmSatelliteAssemblies)"
      IcuDataFileNames="@(WasmIcuDataFileNames)"
      FilesToIncludeInFileSystem="@(WasmFilesToIncludeInFileSystem)"
      ExtraFilesToDeploy="@(WasmExtraFilesToDeploy)"
      NativeAssets="@(WasmNativeAsset)"
      DebugLevel="$(WasmDebugLevel)"
      />
  </Target>

  <Target Name="_GenerateRunWasmtimeScript">
    <PropertyGroup>
      <WasmRunWasmtimeScriptPath Condition="'$(WasmRunWasmtimeScriptPath)' == ''">$(WasmAppDir)run-wasmtime.sh</WasmRunWasmtimeScriptPath>
      <_ScriptContent Condition="'$(WasmSingleFileBundle)' == 'true'">wasmtime run $([System.IO.Path]::GetFileNameWithoutExtension($(WasmMainAssemblyFileName))).wasm $*</_ScriptContent>
      <_ScriptContent Condition="'$(WasmSingleFileBundle)' != 'true'">wasmtime run --dir . dotnet.wasm $([System.IO.Path]::GetFileNameWithoutExtension($(WasmMainAssemblyFileName))) $*</_ScriptContent>
    </PropertyGroup>

    <Error Condition="'$(WasmMainAssemblyFileName)' == ''" Text="%24(WasmMainAssemblyFileName) property needs to be set for generating $(WasmRunWasmtimeScriptPath)." />
    <WriteLinesToFile
      File="$(WasmRunWasmtimeScriptPath)"
      Lines="$(_ScriptContent)"
      Overwrite="true" />

    <ItemGroup>
      <FileWrites Include="$(WasmRunWasmtimeScriptPath)" />
    </ItemGroup>

    <Exec Condition="'$(OS)' != 'Windows_NT'" Command="chmod a+x &quot;$(WasmRunWasmtimeScriptPath)&quot;" />
  </Target>

  <Target Name="_WasmResolveReferences" Condition="'$(WasmResolveAssembliesBeforeBuild)' == 'true'">
    <WasmLoadAssembliesAndReferences
      Assemblies="@(_WasmAssembliesInternal)"
      AssemblySearchPaths="@(WasmAssemblySearchPaths)"
      SkipMissingAssemblies="$(WasmSkipMissingAssemblies)">
      <Output TaskParameter="ReferencedAssemblies" ItemName="_TmpWasmAssemblies" />
    </WasmLoadAssembliesAndReferences>

    <ItemGroup>
      <_WasmAssembliesInternal Remove="@(_WasmAssembliesInternal)" />
      <_WasmAssembliesInternal Include="@(_TmpWasmAssemblies)" />
    </ItemGroup>
  </Target>

  <Target Name="_AfterWasmBuildApp">
    <ItemGroup>
      <WasmAssembliesFinal Include="@(_WasmAssembliesInternal)" LlvmBitCodeFile="" />
    </ItemGroup>
  </Target>
</Project>
