<Project DefaultTargets="Build">
  <Import Project="Directory.Build.props" />

  <PropertyGroup>
    <MonoCrossDir Condition="'$(MonoCrossDir)' == '' and '$(ROOTFS_DIR)' != ''">$(ROOTFS_DIR)</MonoCrossDir>
    <DotNetExec Condition="'$(OS)' == 'Windows_NT'">dotnet.exe</DotNetExec>
    <DotNetExec Condition="'$(DotNetExec)' == ''">dotnet</DotNetExec>
    <LocalDotnetDir>$(RepoRoot).dotnet</LocalDotnetDir>
    <LocalDotnet>$(LocalDotnetDir)\$(DotNetExec)</LocalDotnet>
    <LocalMonoDotnetDir>$(RepoRoot).dotnet-mono</LocalMonoDotnetDir>
    <LocalMonoDotnet>$(LocalMonoDotnetDir)\$(DotNetExec)</LocalMonoDotnet>
    <ScriptExt Condition="'$(OS)' == 'Windows_NT'">.cmd</ScriptExt>
    <ScriptExt Condition="'$(OS)' != 'Windows_NT'">.sh</ScriptExt>
    <CoreClrFileName Condition="'$(TargetsWindows)' == 'true'">coreclr.dll</CoreClrFileName>
    <CoreClrFileName Condition="'$(TargetsOSX)' == 'true'">libcoreclr.dylib</CoreClrFileName>
    <CoreClrFileName Condition="'$(CoreClrFileName)' == ''">libcoreclr.so</CoreClrFileName>
    <MonoFileName Condition="'$(TargetsiOS)' == 'true'">libmono.dylib</MonoFileName>
    <MonoFileName Condition="'$(TargetstvOS)' == 'true'">libmono.dylib</MonoFileName>
    <MonoFileName Condition="'$(TargetsAndroid)' == 'true'">libmonosgen-2.0.so</MonoFileName>
    <MonoStaticFileName Condition="'$(TargetsiOS)' == 'true'">libmono.a</MonoStaticFileName>
    <MonoStaticFileName Condition="'$(TargetstvOS)' == 'true'">libmono.a</MonoStaticFileName>
    <MonoStaticFileName Condition="'$(TargetsAndroid)' == 'true'">libmonosgen-2.0.a</MonoStaticFileName>
    <MonoFileName Condition="'$(TargetsWASM)' == 'true'">libmono.a</MonoFileName>
    <MonoStaticFileName Condition="'$(TargetsWASM)' == 'true'">libmono.a</MonoStaticFileName>
    <MonoFileName Condition="'$(MonoFileName)' == ''">$(CoreClrFileName)</MonoFileName>
    <CoreClrTestConfig Condition="'$(CoreClrTestConfig)' == ''">$(Configuration)</CoreClrTestConfig>
    <LibrariesTestConfig Condition="'$(LibrariesTestConfig)' == ''">$(Configuration)</LibrariesTestConfig>
    <CoreClrTestCoreRoot>$(ArtifactsDir)tests\coreclr\$(TargetOS).$(Platform).$(CoreClrTestConfig)\Tests\Core_Root</CoreClrTestCoreRoot>
    <LibrariesTesthostRoot>$(ArtifactsDir)bin\testhost\$(NetCoreAppCurrent)-$(TargetOS)-$(LibrariesTestConfig)-$(Platform)\</LibrariesTesthostRoot>
    <LibrariesTesthostRuntimeDir>$(LibrariesTesthostRoot)shared\Microsoft.NETCore.App\$(ProductVersion)\</LibrariesTesthostRuntimeDir>
    <XcodeDir Condition="'$(XcodeDir)' == ''">/Applications/Xcode.app/Contents/Developer</XcodeDir>
    <BuildMonoAOTCrossCompiler Condition="'$(TargetsiOS)' == 'true' and '$(TargetsiOSSimulator)' != 'true'">true</BuildMonoAOTCrossCompiler>
    <BuildMonoAOTCrossCompiler Condition="'$(TargetstvOS)' == 'true' and '$(TargetstvOSSimulator)' != 'true'">true</BuildMonoAOTCrossCompiler>
  </PropertyGroup>

  <!-- OSX/iOS/tvOS/Android/Linux Mono runtime build -->
  <Target Name="ConfigureMonoRuntimeUnix" Condition="'$(OS)' != 'Windows_NT'" Inputs="$(MonoProjectRoot)configure.ac" Outputs="$(MonoObjDir)config.h">

    <!-- Sanity checks -->
    <Error Condition="'$(TargetstvOS)' == 'true' and '$(Platform)' != 'x64' and '$(Platform)' != 'arm64'" Text="Error: Invalid platform for $(TargetOS): $(Platform)." />
    <Error Condition="'$(TargetsiOS)' == 'true' and '$(Platform)' != 'x64' and '$(Platform)' != 'arm64' and '$(Platform)' != 'arm'" Text="Error: Invalid platform for $(TargetOS): $(Platform)." />
    <Error Condition="('$(TargetsiOS)' == 'true' or '$(TargetstvOS)' == 'true') and !$([MSBuild]::IsOSPlatform('OSX'))" Text="Error: $(TargetOS) can only be built on macOS." />
    <Error Condition="'$(TargetsAndroid)' == 'true' and '$(Platform)' != 'x64' and '$(Platform)' != 'x86' and '$(Platform)' != 'arm64' and '$(Platform)' != 'arm'" Text="Error: Invalid platform for $(TargetOS): $(Platform)." />
    <Error Condition="'$(TargetsAndroid)' == 'true' and '$(ANDROID_NDK_HOME)' == ''" Text="Error: You need to set the ANDROID_NDK_HOME environment variable pointing to the Android NDK root." />

    <!-- Common options -->
    <ItemGroup>
      <_MonoConfigureParams Include="--with-core=only" />
      <_MonoConfigureParams Include="--enable-maintainer-mode" />
      <_MonoConfigureParams Include="--enable-compile-warnings" />
      <_MonoConfigureParams Include="--prefix=$(MonoObjDir)out" />
      <_MonoConfigureParams Condition="'$(MonoEnableLLVM)' == 'true'" Include="--with-llvm=$(MonoLLVMDir)" /> <!-- TODO: integrate for iOS/Android -->
      <_MonoConfigureParams Condition="'$(MonoEnableCXX)' == 'true'" Include="--enable-cxx" />
    </ItemGroup>

    <!-- Debug specific options -->
    <ItemGroup Condition="'$(Configuration)' == 'Debug'">
      <_MonoConfigureParams Include="--enable-checked-build=private_types" />

      <_MonoCFLAGS Include="-O0" />
      <_MonoCFLAGS Include="-ggdb3" />
      <_MonoCFLAGS Include="-fno-omit-frame-pointer" />

      <_MonoCXXFLAGS Include="-O0" />
      <_MonoCXXFLAGS Include="-ggdb3" />
      <_MonoCXXFLAGS Include="-fno-omit-frame-pointer" />
    </ItemGroup>

    <!-- Release specific options -->
    <ItemGroup Condition="'$(Configuration)' == 'Release'">
      <_MonoCFLAGS Include="-O2" />
      <_MonoCFLAGS Include="-g" />

      <_MonoCXXFLAGS Include="-O2" />
      <_MonoCXXFLAGS Include="-g" />
    </ItemGroup>

    <!-- We build LLVM bits for x64 without C++11 ABI -->
    <ItemGroup Condition="'$(HostArch)' == 'x64' and '$(MonoEnableLLVM)' == 'true' and '$(MonoLLVMUseCxx11Abi)' != 'true'">
      <_MonoCXXFLAGS Include="-D_GLIBCXX_USE_CXX11_ABI=0" />
    </ItemGroup>

    <!-- tvOS device specific options -->
    <ItemGroup Condition="'$(TargetstvOS)' == 'true' and '$(TargetstvOSSimulator)' != 'true'">
      <_MonoConfigureParams Condition="'$(Platform)' == 'arm64'" Include="--host=aarch64-apple-darwin10" />
      <_MonoConfigureParams Include="--disable-boehm" />
      <_MonoConfigureParams Include="--disable-btls" />
      <_MonoConfigureParams Include="--disable-executables" />
      <_MonoConfigureParams Include="--disable-icall-tables" />
      <_MonoConfigureParams Include="--disable-iconv" />
      <_MonoConfigureParams Include="--disable-mcs-build" />
      <_MonoConfigureParams Include="--disable-nls" />
      <_MonoConfigureParams Include="--disable-visibility-hidden" />
      <_MonoConfigureParams Include="--enable-dtrace=no" />
      <_MonoConfigureParams Include="--enable-icall-export" />
      <_MonoConfigureParams Include="--enable-maintainer-mode" />
      <_MonoConfigureParams Include="--enable-minimal=ssa,com,interpreter,jit,portability,assembly_remapping,attach,verifier,full_messages,appdomains,security,sgen_remset,sgen_marksweep_par,sgen_marksweep_fixed,sgen_marksweep_fixed_par,sgen_copying,logging,remoting,shared_perfcounters,gac" />
      <_MonoConfigureParams Include="--enable-monotouch" />
      <_MonoConfigureParams Include="--with-lazy-gc-thread-creation=yes" />
      <_MonoConfigureParams Include="--with-tls=pthread" />
      <_MonoConfigureParams Include="--without-ikvm-native" />
      <_MonoConfigureParams Include="--without-sigaltstack" />
      <_MonoConfigureParams Include="--disable-cooperative-suspend" />
      <_MonoConfigureParams Include="--disable-hybrid-suspend" />
      <_MonoConfigureParams Include="--enable-llvm-runtime" />
      <_MonoConfigureParams Include="--with-bitcode=yes" />

      <_MonoAC_VARS Include="ac_cv_c_bigendian=no" />
      <_MonoAC_VARS Include="ac_cv_func_fstatat=no" />
      <_MonoAC_VARS Include="ac_cv_func_readlinkat=no" />
      <_MonoAC_VARS Include="ac_cv_func_getpwuid_r=no" />
      <_MonoAC_VARS Include="ac_cv_func_posix_getpwuid_r=yes" />
      <_MonoAC_VARS Include="ac_cv_header_curses_h=no" />
      <_MonoAC_VARS Include="ac_cv_header_localcharset_h=no" />
      <_MonoAC_VARS Include="ac_cv_header_sys_user_h=no" />
      <_MonoAC_VARS Include="ac_cv_func_getentropy=no" />
      <_MonoAC_VARS Include="ac_cv_func_futimens=no" />
      <_MonoAC_VARS Include="ac_cv_func_utimensat=no" />
      <_MonoAC_VARS Include="ac_cv_func_shm_open_working_with_mmap=no" />
      <_MonoAC_VARS Include="mono_cv_sizeof_sunpath=104" />
      <_MonoAC_VARS Include="mono_cv_uscore=yes" />
      <_MonoAC_VARS Include="ac_cv_func_system=no" />
      <_MonoAC_VARS Include="ac_cv_func_pthread_kill=no" />
      <_MonoAC_VARS Include="ac_cv_func_kill=no" />
      <_MonoAC_VARS Include="ac_cv_func_sigaction=no" />
      <_MonoAC_VARS Include="ac_cv_func_fork=no" />
      <_MonoAC_VARS Include="ac_cv_func_execv=no" />
      <_MonoAC_VARS Include="ac_cv_func_execve=no" />
      <_MonoAC_VARS Include="ac_cv_func_execvp=no" />
      <_MonoAC_VARS Include="ac_cv_func_signal=no" />

      <_MonoCFLAGS Condition="'$(Platform)' == 'arm64'" Include="-arch arm64" />
      <_MonoCFLAGS Include="-isysroot $(XcodeDir)/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS$(tvOSVersion).sdk" />
      <_MonoCFLAGS Include="-mtvos-version-min=$(tvOSVersionMin)" />
      <_MonoCFLAGS Include="-Wl,-application_extension" />
      <_MonoCFLAGS Include="-fexceptions" />
      <_MonoCFLAGS Include="-fembed-bitcode" />
      <_MonoCFLAGS Include="-fno-gnu-inline-asm" />

      <_MonoCXXFLAGS Condition="'$(Platform)' == 'arm64'" Include="-arch arm64" />
      <_MonoCXXFLAGS Include="-isysroot $(XcodeDir)/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS$(tvOSVersion).sdk" />
      <_MonoCXXFLAGS Include="-mtvos-version-min=$(tvOSVersionMin)" />
      <_MonoCXXFLAGS Include="-Wl,-application_extension" />
      <_MonoCXXFLAGS Include="-fexceptions" />
      <_MonoCXXFLAGS Include="-fembed-bitcode" />
      <_MonoCXXFLAGS Include="-fno-gnu-inline-asm" />

      <_MonoCPPFLAGS Condition="'$(Platform)' == 'arm64'" Include="-arch arm64" />
      <_MonoCPPFLAGS Include="-isysroot $(XcodeDir)/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS$(tvOSVersion).sdk" />
      <_MonoCPPFLAGS Include="-mtvos-version-min=$(tvOSVersionMin)" />
      <_MonoCPPFLAGS Include="-DMONOTOUCH=1" />
      <_MonoCPPFLAGS Include="-DSMALL_CONFIG" />
      <_MonoCPPFLAGS Include="-D_XOPEN_SOURCE" />
      <_MonoCPPFLAGS Include="-DHOST_IOS" />
      <_MonoCPPFLAGS Include="-DHOST_TVOS" />
      <_MonoCPPFLAGS Include="-DHAVE_LARGE_FILE_SUPPORT=1" />

      <_MonoLDFLAGS Condition="'$(Platform)' == 'arm64'" Include="-arch arm64" />
      <_MonoLDFLAGS Include="-Wl,-no_weak_imports" />
      <_MonoLDFLAGS Include="-Wl,-bitcode_bundle" />
      <_MonoLDFLAGS Include="-framework CoreFoundation" />
      <_MonoLDFLAGS Include="-lobjc" />
      <_MonoLDFLAGS Include="-lc++" />


      <!-- AOT cross-compiler configuration -->
      <_MonoAotCrossConfigureParams Include="--host=x86_64-apple-darwin10" />
      <_MonoAotCrossConfigureParams Condition="'$(Platform)' == 'arm64'" Include="--target=aarch64-darwin" />
      <_MonoAotCrossConfigureParams Include="--with-cross-offsets=$(MonoObjDir)cross/offsets-$(Platform)-darwin.h" />
      <_MonoAotCrossConfigureParams Include="--with-core=only" />  <!-- TODO: remove duplication with main configure params -->
      <_MonoAotCrossConfigureParams Include="--enable-maintainer-mode" />
      <_MonoAotCrossConfigureParams Include="--enable-compile-warnings" />
      <_MonoAotCrossConfigureParams Include="--prefix=$(MonoObjDir)cross/out" />
      <_MonoAotCrossConfigureParams Include="--disable-boehm" />
      <_MonoAotCrossConfigureParams Include="--disable-btls" />
      <_MonoAotCrossConfigureParams Include="--disable-iconv" />
      <_MonoAotCrossConfigureParams Include="--disable-libraries" />
      <_MonoAotCrossConfigureParams Include="--disable-mcs-build" />
      <_MonoAotCrossConfigureParams Include="--disable-nls" />
      <_MonoAotCrossConfigureParams Include="--enable-dtrace=no" />
      <_MonoAotCrossConfigureParams Include="--enable-icall-symbol-map" />
      <_MonoAotCrossConfigureParams Include="--enable-minimal=com,remoting" />
      <_MonoAotCrossConfigureParams Include="--enable-monotouch" />
      <_MonoAotCrossConfigureParams Include="--disable-crash-reporting" />
      <!--<_MonoAotCrossConfigureParams Include="with-llvm=/Users/alexander/dev/mono2/sdks/out/llvm-llvm64" /> --> <!-- TODO -->

      <_MonoAotCrossAC_VARS Include="ac_cv_func_shm_open_working_with_mmap=no" />

      <_MonoAotCrossCFLAGS Include="-O2" />
      <_MonoAotCrossCFLAGS Include="-g" />
      <_MonoAotCrossCFLAGS Include="-isysroot $(XcodeDir)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX$(macOSVersion).sdk" />
      <_MonoAotCrossCFLAGS Include="-mmacosx-version-min=$(macOSVersionMin)" />
      <_MonoAotCrossCFLAGS Include="-Qunused-arguments" />
      <_MonoAotCrossCFLAGS Include="-m64" />

      <_MonoAotCrossCXXFLAGS Include="-O2" />
      <_MonoAotCrossCXXFLAGS Include="-g" />
      <_MonoAotCrossCXXFLAGS Include="-isysroot $(XcodeDir)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX$(macOSVersion).sdk" />
      <_MonoAotCrossCXXFLAGS Include="-mmacosx-version-min=$(macOSVersionMin)" />
      <_MonoAotCrossCXXFLAGS Include="-Qunused-arguments" />
      <_MonoAotCrossCXXFLAGS Include="-stdlib=libc++" />
      <_MonoAotCrossCXXFLAGS Include="-m64" />

      <_MonoAotCrossCPPFLAGS Include="-O2" />
      <_MonoAotCrossCPPFLAGS Include="-g" />
      <_MonoAotCrossCPPFLAGS Include="-DMONOTOUCH=1" />
      <_MonoAotCrossCPPFLAGS Include="-m64" />

      <_MonoAotCrossCXXPPFLAGS Include="-O2" />
      <_MonoAotCrossCXXPPFLAGS Include="-g" />
      <_MonoAotCrossCXXPPFLAGS Include="-m64" />

      <_MonoAotCrossLDFLAGS Include="-stdlib=libc++" />

      <_MonoAotCrossOffsetsToolParams Condition="'$(Platform)' == 'arm64'" Include="--abi=aarch64-apple-darwin10" />
      <_MonoAotCrossOffsetsToolParams Include="--netcore" />
      <_MonoAotCrossOffsetsToolParams Include="--targetdir=&quot;$(MonoObjDir)&quot;" />
      <_MonoAotCrossOffsetsToolParams Include="--monodir=&quot;$(MonoProjectRoot)&quot;" />
      <_MonoAotCrossOffsetsToolParams Include="--outfile=&quot;$(MonoObjDir)cross/offsets-$(Platform)-darwin.h&quot;" />
      <_MonoAotCrossOffsetsToolParams Include="--libclang=&quot;$(XcodeDir)/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib&quot;" />
      <_MonoAotCrossOffsetsToolParams Include="--sysroot=&quot;$(XcodeDir)/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS$(tvOSVersion).sdk&quot;" />
    </ItemGroup>

    <!-- tvOS simulator specific options -->
    <ItemGroup Condition="'$(TargetstvOS)' == 'true' and '$(TargetstvOSSimulator)' == 'true'">
      <_MonoConfigureParams Include="--host=x86_64-apple-darwin10" />
      <_MonoConfigureParams Include="--disable-boehm" />
      <_MonoConfigureParams Include="--disable-btls" />
      <_MonoConfigureParams Include="--disable-executables" />
      <_MonoConfigureParams Include="--disable-iconv" />
      <_MonoConfigureParams Include="--disable-mcs-build" />
      <_MonoConfigureParams Include="--disable-nls" />
      <_MonoConfigureParams Include="--disable-visibility-hidden" />
      <_MonoConfigureParams Include="--enable-maintainer-mode" />
      <_MonoConfigureParams Include="--enable-minimal=com,remoting,shared_perfcounters,gac" />
      <_MonoConfigureParams Include="--enable-monotouch" />
      <_MonoConfigureParams Include="--with-tls=pthread" />
      <_MonoConfigureParams Include="--without-ikvm-native" />
      <_MonoConfigureParams Include="--disable-cooperative-suspend" />
      <_MonoConfigureParams Include="--disable-hybrid-suspend" />
      <_MonoConfigureParams Include="--disable-crash-reporting" />

      <_MonoAC_VARS Include="ac_cv_func_clock_nanosleep=no" />
      <_MonoAC_VARS Include="ac_cv_func_fstatat=no" />
      <_MonoAC_VARS Include="ac_cv_func_readlinkat=no" />
      <_MonoAC_VARS Include="ac_cv_func_system=no" />
      <_MonoAC_VARS Include="ac_cv_func_getentropy=no" />
      <_MonoAC_VARS Include="ac_cv_func_futimens=no" />
      <_MonoAC_VARS Include="ac_cv_func_utimensat=no" />
      <_MonoAC_VARS Include="ac_cv_func_shm_open_working_with_mmap=no" />
      <_MonoAC_VARS Include="mono_cv_uscore=yes" />
      <_MonoAC_VARS Include="ac_cv_func_pthread_kill=no" />
      <_MonoAC_VARS Include="ac_cv_func_kill=no" />
      <_MonoAC_VARS Include="ac_cv_func_sigaction=no" />
      <_MonoAC_VARS Include="ac_cv_func_fork=no" />
      <_MonoAC_VARS Include="ac_cv_func_execv=no" />
      <_MonoAC_VARS Include="ac_cv_func_execve=no" />
      <_MonoAC_VARS Include="ac_cv_func_execvp=no" />
      <_MonoAC_VARS Include="ac_cv_func_signal=no" />

      <_MonoCFLAGS Include="-arch x86_64" />
      <_MonoCFLAGS Include="-m64" />
      <_MonoCFLAGS Include="-isysroot $(XcodeDir)/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator$(tvOSVersion).sdk" />
      <_MonoCFLAGS Include="-mtvos-simulator-version-min=$(tvOSVersionMin)" />
      <_MonoCFLAGS Include="-Wl,-application_extension" />

      <_MonoCXXFLAGS Include="-arch x86_64" />
      <_MonoCXXFLAGS Include="-m64" />
      <_MonoCXXFLAGS Include="-isysroot $(XcodeDir)/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator$(tvOSVersion).sdk" />
      <_MonoCXXFLAGS Include="-mtvos-simulator-version-min=$(tvOSVersionMin)" />
      <_MonoCXXFLAGS Include="-Wl,-application_extension" />

      <_MonoCPPFLAGS Include="-arch x86_64" />
      <_MonoCPPFLAGS Include="-m64" />
      <_MonoCPPFLAGS Include="-isysroot $(XcodeDir)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator$(iOSVersion).sdk" />
      <_MonoCPPFLAGS Include="-mtvos-simulator-version-min=$(tvOSVersionMin)" />
      <_MonoCPPFLAGS Include="-Wl,-application_extension" />
      <_MonoCPPFLAGS Include="-DMONOTOUCH=1" />
      <_MonoCPPFLAGS Include="-DHOST_IOS" />
      <_MonoCPPFLAGS Include="-DHOST_TVOS" />
    </ItemGroup>

    <!-- iOS device specific options -->
    <ItemGroup Condition="'$(TargetsiOS)' == 'true' and '$(TargetsiOSSimulator)' != 'true'">
      <_MonoConfigureParams Condition="'$(Platform)' == 'arm64'" Include="--host=aarch64-apple-darwin10" />
      <_MonoConfigureParams Condition="'$(Platform)' == 'arm'" Include="--host=arm-apple-darwin10" />
      <_MonoConfigureParams Include="--disable-boehm" />
      <_MonoConfigureParams Include="--disable-btls" />
      <_MonoConfigureParams Include="--disable-executables" />
      <_MonoConfigureParams Include="--disable-icall-tables" />
      <_MonoConfigureParams Include="--disable-iconv" />
      <_MonoConfigureParams Include="--disable-mcs-build" />
      <_MonoConfigureParams Include="--disable-nls" />
      <_MonoConfigureParams Include="--disable-visibility-hidden" />
      <_MonoConfigureParams Include="--enable-dtrace=no" />
      <_MonoConfigureParams Include="--enable-icall-export" />
      <_MonoConfigureParams Include="--enable-maintainer-mode" />
      <_MonoConfigureParams Include="--enable-minimal=ssa,com,interpreter,jit,portability,assembly_remapping,attach,verifier,full_messages,appdomains,security,sgen_remset,sgen_marksweep_par,sgen_marksweep_fixed,sgen_marksweep_fixed_par,sgen_copying,logging,remoting,shared_perfcounters,gac" />
      <_MonoConfigureParams Include="--enable-monotouch" />
      <_MonoConfigureParams Include="--with-lazy-gc-thread-creation=yes" />
      <_MonoConfigureParams Include="--with-tls=pthread" />
      <_MonoConfigureParams Include="--without-ikvm-native" />
      <_MonoConfigureParams Include="--without-sigaltstack" />
      <_MonoConfigureParams Include="--disable-cooperative-suspend" />
      <_MonoConfigureParams Include="--disable-hybrid-suspend" />
      <_MonoConfigureParams Include="--disable-crash-reporting" />

      <_MonoAC_VARS Include="ac_cv_c_bigendian=no" />
      <_MonoAC_VARS Include="ac_cv_func_fstatat=no" />
      <_MonoAC_VARS Include="ac_cv_func_readlinkat=no" />
      <_MonoAC_VARS Include="ac_cv_func_getpwuid_r=no" />
      <_MonoAC_VARS Include="ac_cv_func_posix_getpwuid_r=yes" />
      <_MonoAC_VARS Include="ac_cv_header_curses_h=no" />
      <_MonoAC_VARS Include="ac_cv_header_localcharset_h=no" />
      <_MonoAC_VARS Include="ac_cv_header_sys_user_h=no" />
      <_MonoAC_VARS Include="ac_cv_func_getentropy=no" />
      <_MonoAC_VARS Include="ac_cv_func_futimens=no" />
      <_MonoAC_VARS Include="ac_cv_func_utimensat=no" />
      <_MonoAC_VARS Include="ac_cv_func_shm_open_working_with_mmap=no" />
      <_MonoAC_VARS Include="mono_cv_sizeof_sunpath=104" />
      <_MonoAC_VARS Include="mono_cv_uscore=yes" />

      <_MonoCFLAGS Condition="'$(Platform)' == 'arm64'" Include="-arch arm64" />
      <_MonoCFLAGS Condition="'$(Platform)' == 'arm'" Include="-arch armv7" />
      <_MonoCFLAGS Condition="'$(Platform)' == 'arm'" Include="-arch armv7s" />
      <_MonoCFLAGS Include="-isysroot $(XcodeDir)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS$(iOSVersion).sdk" />
      <_MonoCFLAGS Include="-miphoneos-version-min=$(iOSVersionMin)" />
      <_MonoCFLAGS Include="-Wl,-application_extension" />
      <_MonoCFLAGS Include="-fexceptions" />

      <_MonoCXXFLAGS Condition="'$(Platform)' == 'arm64'" Include="-arch arm64" />
      <_MonoCXXFLAGS Condition="'$(Platform)' == 'arm'" Include="-arch armv7" />
      <_MonoCXXFLAGS Condition="'$(Platform)' == 'arm'" Include="-arch armv7s" />
      <_MonoCXXFLAGS Include="-isysroot $(XcodeDir)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS$(iOSVersion).sdk" />
      <_MonoCXXFLAGS Include="-miphoneos-version-min=$(iOSVersionMin)" />
      <_MonoCXXFLAGS Include="-Wl,-application_extension" />

      <_MonoCPPFLAGS Condition="'$(Platform)' == 'arm64'" Include="-arch arm64" />
      <_MonoCPPFLAGS Condition="'$(Platform)' == 'arm'" Include="-arch armv7" />
       <!-- Intentionally disabled since multiple -arch cause issues during configure.ac C-preprocessor detection. Shouldn't have an effect on the actual build. -->
      <!--<_MonoCPPFLAGS Condition="'$(Platform)' == 'arm'" Include="-arch armv7s" />-->
      <_MonoCPPFLAGS Include="-isysroot $(XcodeDir)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS$(iOSVersion).sdk" />
      <_MonoCPPFLAGS Include="-miphoneos-version-min=$(iOSVersionMin)" />
      <_MonoCPPFLAGS Include="-DMONOTOUCH=1" />
      <_MonoCPPFLAGS Include="-DSMALL_CONFIG" />
      <_MonoCPPFLAGS Include="-D_XOPEN_SOURCE" />
      <_MonoCPPFLAGS Include="-DHOST_IOS" />
      <_MonoCPPFLAGS Include="-DHAVE_LARGE_FILE_SUPPORT=1" />

      <_MonoLDFLAGS Condition="'$(Platform)' == 'arm64'" Include="-arch arm64" />
      <_MonoLDFLAGS Condition="'$(Platform)' == 'arm'" Include="-arch armv7" />
      <_MonoLDFLAGS Condition="'$(Platform)' == 'arm'" Include="-arch armv7s" />
      <_MonoLDFLAGS Include="-Wl,-no_weak_imports" />
      <_MonoLDFLAGS Include="-framework CoreFoundation" />
      <_MonoLDFLAGS Include="-lobjc" />
      <_MonoLDFLAGS Include="-lc++" />


      <!-- AOT cross-compiler configuration -->
      <_MonoAotCrossConfigureParams Include="--host=x86_64-apple-darwin10" />
      <_MonoAotCrossConfigureParams Condition="'$(Platform)' == 'arm64'" Include="--target=aarch64-darwin" />
      <_MonoAotCrossConfigureParams Condition="'$(Platform)' == 'arm'" Include="--target=arm-darwin" />
      <_MonoAotCrossConfigureParams Include="--with-cross-offsets=$(MonoObjDir)cross/offsets-$(Platform)-darwin.h" />
      <_MonoAotCrossConfigureParams Include="--with-core=only" />  <!-- TODO: remove duplication with main configure params -->
      <_MonoAotCrossConfigureParams Include="--enable-maintainer-mode" />
      <_MonoAotCrossConfigureParams Include="--enable-compile-warnings" />
      <_MonoAotCrossConfigureParams Include="--prefix=$(MonoObjDir)cross/out" />
      <_MonoAotCrossConfigureParams Include="--disable-boehm" />
      <_MonoAotCrossConfigureParams Include="--disable-btls" />
      <_MonoAotCrossConfigureParams Include="--disable-iconv" />
      <_MonoAotCrossConfigureParams Include="--disable-libraries" />
      <_MonoAotCrossConfigureParams Include="--disable-mcs-build" />
      <_MonoAotCrossConfigureParams Include="--disable-nls" />
      <_MonoAotCrossConfigureParams Include="--enable-dtrace=no" />
      <_MonoAotCrossConfigureParams Include="--enable-icall-symbol-map" />
      <_MonoAotCrossConfigureParams Include="--enable-minimal=com,remoting" />
      <_MonoAotCrossConfigureParams Include="--enable-monotouch" />
      <_MonoAotCrossConfigureParams Include="--disable-crash-reporting" />
      <!--<_MonoAotCrossConfigureParams Include="with-llvm=/Users/alexander/dev/mono2/sdks/out/llvm-llvm64" /> --> <!-- TODO -->

      <_MonoAotCrossAC_VARS Include="ac_cv_func_shm_open_working_with_mmap=no" />

      <_MonoAotCrossCFLAGS Include="-O2" />
      <_MonoAotCrossCFLAGS Include="-g" />
      <_MonoAotCrossCFLAGS Include="-isysroot $(XcodeDir)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX$(macOSVersion).sdk" />
      <_MonoAotCrossCFLAGS Include="-mmacosx-version-min=$(macOSVersionMin)" />
      <_MonoAotCrossCFLAGS Include="-Qunused-arguments" />
      <_MonoAotCrossCFLAGS Include="-m64" />

      <_MonoAotCrossCXXFLAGS Include="-O2" />
      <_MonoAotCrossCXXFLAGS Include="-g" />
      <_MonoAotCrossCXXFLAGS Include="-isysroot $(XcodeDir)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX$(macOSVersion).sdk" />
      <_MonoAotCrossCXXFLAGS Include="-mmacosx-version-min=$(macOSVersionMin)" />
      <_MonoAotCrossCXXFLAGS Include="-Qunused-arguments" />
      <_MonoAotCrossCXXFLAGS Include="-stdlib=libc++" />
      <_MonoAotCrossCXXFLAGS Include="-m64" />

      <_MonoAotCrossCPPFLAGS Include="-O2" />
      <_MonoAotCrossCPPFLAGS Include="-g" />
      <_MonoAotCrossCPPFLAGS Include="-DMONOTOUCH=1" />
      <_MonoAotCrossCPPFLAGS Include="-m64" />

      <_MonoAotCrossCXXPPFLAGS Include="-O2" />
      <_MonoAotCrossCXXPPFLAGS Include="-g" />
      <_MonoAotCrossCXXPPFLAGS Include="-m64" />

      <_MonoAotCrossLDFLAGS Include="-stdlib=libc++" />

      <_MonoAotCrossOffsetsToolParams Condition="'$(Platform)' == 'arm64'" Include="--abi=aarch64-apple-darwin10" />
      <_MonoAotCrossOffsetsToolParams Condition="'$(Platform)' == 'arm'" Include="--abi=arm-apple-darwin10" />
      <_MonoAotCrossOffsetsToolParams Include="--netcore" />
      <_MonoAotCrossOffsetsToolParams Include="--targetdir=&quot;$(MonoObjDir)&quot;" />
      <_MonoAotCrossOffsetsToolParams Include="--monodir=&quot;$(MonoProjectRoot)&quot;" />
      <_MonoAotCrossOffsetsToolParams Include="--outfile=&quot;$(MonoObjDir)cross/offsets-$(Platform)-darwin.h&quot;" />
      <_MonoAotCrossOffsetsToolParams Include="--libclang=&quot;$(XcodeDir)/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib&quot;" />
      <_MonoAotCrossOffsetsToolParams Include="--sysroot=&quot;$(XcodeDir)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS$(iOSVersion).sdk&quot;" />
    </ItemGroup>

    <!-- iOS simulator specific options -->
    <ItemGroup Condition="'$(TargetsiOS)' == 'true' and '$(TargetsiOSSimulator)' == 'true'">
      <_MonoConfigureParams Include="--host=x86_64-apple-darwin10" />
      <_MonoConfigureParams Include="--disable-boehm" />
      <_MonoConfigureParams Include="--disable-btls" />
      <_MonoConfigureParams Include="--disable-executables" />
      <_MonoConfigureParams Include="--disable-iconv" />
      <_MonoConfigureParams Include="--disable-mcs-build" />
      <_MonoConfigureParams Include="--disable-nls" />
      <_MonoConfigureParams Include="--disable-visibility-hidden" />
      <_MonoConfigureParams Include="--enable-maintainer-mode" />
      <_MonoConfigureParams Include="--enable-minimal=com,remoting,shared_perfcounters,gac" />
      <_MonoConfigureParams Include="--enable-monotouch" />
      <_MonoConfigureParams Include="--with-tls=pthread" />
      <_MonoConfigureParams Include="--without-ikvm-native" />
      <_MonoConfigureParams Include="--disable-cooperative-suspend" />
      <_MonoConfigureParams Include="--disable-hybrid-suspend" />
      <_MonoConfigureParams Include="--disable-crash-reporting" />

      <_MonoAC_VARS Include="ac_cv_func_clock_nanosleep=no" />
      <_MonoAC_VARS Include="ac_cv_func_fstatat=no" />
      <_MonoAC_VARS Include="ac_cv_func_readlinkat=no" />
      <_MonoAC_VARS Include="ac_cv_func_system=no" />
      <_MonoAC_VARS Include="ac_cv_func_getentropy=no" />
      <_MonoAC_VARS Include="ac_cv_func_futimens=no" />
      <_MonoAC_VARS Include="ac_cv_func_utimensat=no" />
      <_MonoAC_VARS Include="ac_cv_func_shm_open_working_with_mmap=no" />
      <_MonoAC_VARS Include="mono_cv_uscore=yes" />

      <_MonoCFLAGS Include="-arch x86_64" />
      <_MonoCFLAGS Include="-m64" />
      <_MonoCFLAGS Include="-isysroot $(XcodeDir)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator$(iOSVersion).sdk" />
      <_MonoCFLAGS Include="-mios-simulator-version-min=$(iOSVersionMin)" />
      <_MonoCFLAGS Include="-Wl,-application_extension" />

      <_MonoCXXFLAGS Include="-arch x86_64" />
      <_MonoCXXFLAGS Include="-m64" />
      <_MonoCXXFLAGS Include="-isysroot $(XcodeDir)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator$(iOSVersion).sdk" />
      <_MonoCXXFLAGS Include="-mios-simulator-version-min=$(iOSVersionMin)" />
      <_MonoCXXFLAGS Include="-Wl,-application_extension" />

      <_MonoCPPFLAGS Include="-arch x86_64" />
      <_MonoCPPFLAGS Include="-m64" />
      <_MonoCPPFLAGS Include="-isysroot $(XcodeDir)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator$(iOSVersion).sdk" />
      <_MonoCPPFLAGS Include="-mios-simulator-version-min=$(iOSVersionMin)" />
      <_MonoCPPFLAGS Include="-Wl,-application_extension" />
      <_MonoCPPFLAGS Include="-DMONOTOUCH=1" />
      <_MonoCPPFLAGS Include="-DHOST_IOS" />
    </ItemGroup>

    <!-- Android specific options -->
    <ItemGroup Condition="'$(TargetsAndroid)' == 'true'">
      <_MonoConfigureParams Condition="'$(Platform)' == 'arm64'" Include="--host=aarch64-linux-android" />
      <_MonoConfigureParams Condition="'$(Platform)' == 'arm'" Include="--host=armv5-linux-androideabi" />
      <_MonoConfigureParams Condition="'$(Platform)' == 'x86'" Include="--host=i686-linux-android" />
      <_MonoConfigureParams Condition="'$(Platform)' == 'x64'" Include="--host=x86_64-linux-android" />
      <_MonoConfigureParams Include="--disable-boehm" />
      <_MonoConfigureParams Include="--disable-executables" />
      <_MonoConfigureParams Include="--disable-iconv" />
      <_MonoConfigureParams Include="--disable-mcs-build" />
      <_MonoConfigureParams Include="--disable-nls" />
      <_MonoConfigureParams Include="--enable-maintainer-mode" />
      <_MonoConfigureParams Include="--enable-minimal=ssa,portability,attach,verifier,full_messages,sgen_remset,sgen_marksweep_par,sgen_marksweep_fixed,sgen_marksweep_fixed_par,sgen_copying,logging,security,shared_handles,interpreter,,gac,cfgdir_config" />
      <_MonoConfigureParams Include="--enable-monodroid" />
      <_MonoConfigureParams Include="--enable-dynamic-btls" />
      <_MonoConfigureParams Include="--with-btls-android-ndk=$(ANDROID_NDK_HOME)" />
      <_MonoConfigureParams Include="--with-btls-android-api=$(AndroidApiVersion)" />
      <_MonoConfigureParams Include="--with-btls-android-ndk-asm-workaround" />
      <_MonoConfigureParams Include="--with-btls-android-cmake-toolchain=$(ANDROID_NDK_HOME)/build/cmake/android.toolchain.cmake" />
      <_MonoConfigureParams Include="--with-sigaltstack=yes" />
      <_MonoConfigureParams Include="--with-tls=pthread" />
      <_MonoConfigureParams Include="--without-ikvm-native" />
      <_MonoConfigureParams Include="--disable-cooperative-suspend" />
      <_MonoConfigureParams Include="--disable-hybrid-suspend" />
      <_MonoConfigureParams Include="--disable-crash-reporting" />

      <_MonoAC_VARS Include="ac_cv_func_shm_open_working_with_mmap=no" />
      <_MonoAC_VARS Include="ac_cv_func_sched_getaffinity=no" />
      <_MonoAC_VARS Include="ac_cv_func_sched_setaffinity=no" />
      <_MonoAC_VARS Include="mono_cv_uscore=yes" />

      <_MonoCFLAGS Condition="'$(Platform)' == 'arm'" Include="-march=armv7-a" />
      <_MonoCFLAGS Condition="'$(Platform)' == 'arm'" Include="-mtune=cortex-a8" />
      <_MonoCFLAGS Condition="'$(Platform)' == 'arm'" Include="-mfpu=vfp" />
      <_MonoCFLAGS Condition="'$(Platform)' == 'arm'" Include="-mfloat-abi=softfp" />
      <_MonoCFLAGS Condition="'$(Platform)' == 'arm64' or '$(Platform)' == 'arm'" Include="-fpic" />
      <_MonoCFLAGS Include="-fstack-protector" />

      <_MonoCXXFLAGS Condition="'$(Platform)' == 'arm'" Include="-march=armv7-a" />
      <_MonoCXXFLAGS Condition="'$(Platform)' == 'arm'" Include="-mtune=cortex-a8" />
      <_MonoCXXFLAGS Condition="'$(Platform)' == 'arm'" Include="-mfpu=vfp" />
      <_MonoCXXFLAGS Condition="'$(Platform)' == 'arm'" Include="-mfloat-abi=softfp" />
      <_MonoCXXFLAGS Condition="'$(Platform)' == 'arm64' or '$(Platform)' == 'arm'" Include="-fpic" />
      <_MonoCXXFLAGS Include="-fstack-protector" />

      <_MonoCPPFLAGS Condition="'$(Platform)' == 'arm64'" Include="-DANDROID64" />
      <_MonoCPPFLAGS Condition="'$(Platform)' == 'arm64'" Include="-I$(ANDROID_NDK_HOME)/sysroot/usr/include/aarch64-linux-android" />
      <_MonoCPPFLAGS Condition="'$(Platform)' == 'arm'" Include="-I$(ANDROID_NDK_HOME)/sysroot/usr/include/arm-linux-androideabi" />
      <_MonoCPPFLAGS Condition="'$(Platform)' == 'x64'" Include="-I$(ANDROID_NDK_HOME)/sysroot/usr/include/x86_64-linux-android" />
      <_MonoCPPFLAGS Condition="'$(Platform)' == 'x86'" Include="-I$(ANDROID_NDK_HOME)/sysroot/usr/include/i686-linux-android" />
      <_MonoCPPFLAGS Condition="'$(Platform)' == 'x64'" Include="-m64" />
      <_MonoCPPFLAGS Condition="'$(Platform)' == 'x86'" Include="-m32" />
      <_MonoCPPFLAGS Condition="'$(Platform)' == 'arm64' or '$(Platform)' == 'x64'" Include="-DL_cuserid=9" />
      <_MonoCPPFLAGS Condition="'$(Platform)' == 'arm64' or '$(Platform)' == 'arm'" Include="-D__POSIX_VISIBLE=201002" />
      <_MonoCPPFLAGS Condition="'$(Platform)' == 'arm64' or '$(Platform)' == 'arm'" Include="-DSK_RELEASE" />
      <_MonoCPPFLAGS Condition="'$(Platform)' == 'arm64' or '$(Platform)' == 'arm'" Include="-DNDEBUG" />
      <_MonoCPPFLAGS Condition="'$(Platform)' == 'arm64' or '$(Platform)' == 'arm'" Include="-UDEBUG" />
      <_MonoCPPFLAGS Include="-I$(ANDROID_NDK_HOME)/sysroot/usr/include" />
      <_MonoCPPFLAGS Include="-DMONODROID=1" />
      <_MonoCPPFLAGS Include="-D__ANDROID_API__=$(AndroidApiVersion)" />

      <_MonoCXXCPPFLAGS Condition="'$(Platform)' == 'arm64'" Include="-DANDROID64" />
      <_MonoCXXCPPFLAGS Condition="'$(Platform)' == 'arm64'" Include="-I$(ANDROID_NDK_HOME)/sysroot/usr/include/aarch64-linux-android" />
      <_MonoCXXCPPFLAGS Condition="'$(Platform)' == 'arm'" Include="-I$(ANDROID_NDK_HOME)/sysroot/usr/include/arm-linux-androideabi" />
      <_MonoCXXCPPFLAGS Condition="'$(Platform)' == 'x64'" Include="-I$(ANDROID_NDK_HOME)/sysroot/usr/include/x86_64-linux-android" />
      <_MonoCXXCPPFLAGS Condition="'$(Platform)' == 'x86'" Include="-I$(ANDROID_NDK_HOME)/sysroot/usr/include/i686-linux-android" />
      <_MonoCXXCPPFLAGS Condition="'$(Platform)' == 'x64'" Include="-m64" />
      <_MonoCXXCPPFLAGS Condition="'$(Platform)' == 'x86'" Include="-m32" />
      <_MonoCXXCPPFLAGS Condition="'$(Platform)' == 'arm64' or '$(Platform)' == 'x64'" Include="-DL_cuserid=9" />
      <_MonoCXXCPPFLAGS Condition="'$(Platform)' == 'arm64' or '$(Platform)' == 'arm'" Include="-D__POSIX_VISIBLE=201002" />
      <_MonoCXXCPPFLAGS Condition="'$(Platform)' == 'arm64' or '$(Platform)' == 'arm'" Include="-DSK_RELEASE" />
      <_MonoCXXCPPFLAGS Condition="'$(Platform)' == 'arm64' or '$(Platform)' == 'arm'" Include="-DNDEBUG" />
      <_MonoCXXCPPFLAGS Condition="'$(Platform)' == 'arm64' or '$(Platform)' == 'arm'" Include="-UDEBUG" />
      <_MonoCXXCPPFLAGS Include="-I$(ANDROID_NDK_HOME)/sysroot/usr/include" />
      <_MonoCXXCPPFLAGS Include="-DMONODROID=1" />
      <_MonoCXXCPPFLAGS Include="-D__ANDROID_API__=$(AndroidApiVersion)" />

      <_MonoLDFLAGS Condition="'$(Platform)' == 'arm64'" Include="-L$(ANDROID_NDK_HOME)/platforms/android-$(AndroidApiVersion)/arch-arm64/usr/lib" />
      <_MonoLDFLAGS Condition="'$(Platform)' == 'arm64'" Include="-Wl,-rpath-link=$(ANDROID_NDK_HOME)/platforms/android-$(AndroidApiVersion)/arch-arm64/usr/lib,-dynamic-linker=/system/bin/linker" />
      <_MonoLDFLAGS Condition="'$(Platform)' == 'arm'" Include="-L$(ANDROID_NDK_HOME)/platforms/android-$(AndroidApiVersion)/arch-arm/usr/lib" />
      <_MonoLDFLAGS Condition="'$(Platform)' == 'arm'" Include="-Wl,-rpath-link=$(ANDROID_NDK_HOME)/platforms/android-$(AndroidApiVersion)/arch-arm/usr/lib,-dynamic-linker=/system/bin/linker" />
      <_MonoLDFLAGS Condition="'$(Platform)' == 'arm'" Include="-Wl,--fix-cortex-a8" />
      <_MonoLDFLAGS Condition="'$(Platform)' == 'x86'" Include="-L$(ANDROID_NDK_HOME)/platforms/android-$(AndroidApiVersion)/arch-x86/usr/lib" />
      <_MonoLDFLAGS Condition="'$(Platform)' == 'x86'" Include="-Wl,-rpath-link=$(ANDROID_NDK_HOME)/platforms/android-$(AndroidApiVersion)/arch-x86/usr/lib,-dynamic-linker=/system/bin/linker" />
      <_MonoLDFLAGS Condition="'$(Platform)' == 'x64'" Include="-L$(ANDROID_NDK_HOME)/platforms/android-$(AndroidApiVersion)/arch-x86_64/usr/lib" />
      <_MonoLDFLAGS Condition="'$(Platform)' == 'x64'" Include="-Wl,-rpath-link=$(ANDROID_NDK_HOME)/platforms/android-$(AndroidApiVersion)/arch-x86_64/usr/lib,-dynamic-linker=/system/bin/linker" />
      <_MonoLDFLAGS Include="-z now" />
      <_MonoLDFLAGS Include="-z relro" />
      <_MonoLDFLAGS Include="-z noexecstack" />
      <_MonoLDFLAGS Include="-ldl" />
      <_MonoLDFLAGS Include="-lm" />
      <_MonoLDFLAGS Include="-llog" />
      <_MonoLDFLAGS Include="-lc" />
      <_MonoLDFLAGS Include="-lgcc" />
    </ItemGroup>

    <!-- iOS device/simulator specific options -->
    <PropertyGroup Condition="'$(TargetsiOS)' == 'true'">
      <_MonoCCOption>CC="$(XcodeDir)/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"</_MonoCCOption>
      <_MonoCXXOption>CXX="$(XcodeDir)/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++"</_MonoCXXOption>
      <_MonoAROption>AR=""</_MonoAROption>
      <_MonoASOption>AS=""</_MonoASOption>
      <_MonoCPPOption>CPP=""</_MonoCPPOption>
      <_MonoCXXCPPOption>CXXCPP=""</_MonoCXXCPPOption>
      <_MonoDLLTOOLOption>DLLTOOL=""</_MonoDLLTOOLOption>
      <_MonoLDOption>LD=""</_MonoLDOption>
      <_MonoOBJDUMPOption>OBJDUMP=""</_MonoOBJDUMPOption>
      <_MonoRANLIBOption>RANLIB=""</_MonoRANLIBOption>
      <_MonoCMAKEOption>CMAKE=""</_MonoCMAKEOption>
      <_MonoSTRIPOption>STRIP=""</_MonoSTRIPOption>
    </PropertyGroup>

    <!-- Android specific options -->
    <PropertyGroup Condition="'$(TargetsAndroid)' == 'true'">
      <_MonoAndroidTargetTuple Condition="'$(Platform)' == 'x64'" >x86_64-linux-android</_MonoAndroidTargetTuple>
      <_MonoAndroidTargetTuple Condition="'$(Platform)' == 'x86'" >i686-linux-android</_MonoAndroidTargetTuple>
      <_MonoAndroidTargetTuple Condition="'$(Platform)' == 'arm64'" >aarch64-linux-android</_MonoAndroidTargetTuple>
      <_MonoAndroidTargetTuple Condition="'$(Platform)' == 'arm'" >arm-linux-androideabi</_MonoAndroidTargetTuple>

      <_MonoAndroidBuildHost Condition="$([MSBuild]::IsOSPlatform('OSX'))">darwin-x86_64</_MonoAndroidBuildHost>
      <_MonoAndroidBuildHost Condition="$([MSBuild]::IsOSPlatform('Linux'))">linux-x86_64</_MonoAndroidBuildHost>

      <_MonoAndroidToolchainPrefix>$(ANDROID_NDK_HOME)/toolchains/llvm/prebuilt/$(_MonoAndroidBuildHost)/bin/$(_MonoAndroidTargetTuple)</_MonoAndroidToolchainPrefix>
      <_MonoAndroidToolchainPrefixClang Condition="'$(Platform)' == 'arm'">$(ANDROID_NDK_HOME)/toolchains/llvm/prebuilt/$(_MonoAndroidBuildHost)/bin/armv7a-linux-androideabi$(AndroidApiVersion)</_MonoAndroidToolchainPrefixClang>
      <_MonoAndroidToolchainPrefixClang Condition="'$(Platform)' != 'arm'">$(_MonoAndroidToolchainPrefix)$(AndroidApiVersion)</_MonoAndroidToolchainPrefixClang>

      <_MonoCCOption>CC="$(_MonoAndroidToolchainPrefixClang)-clang"</_MonoCCOption>
      <_MonoCXXOption>CXX="$(_MonoAndroidToolchainPrefixClang)-clang++"</_MonoCXXOption>
      <_MonoAROption>AR="$(_MonoAndroidToolchainPrefix)-ar"</_MonoAROption>
      <_MonoASOption>AS="$(_MonoAndroidToolchainPrefix)-as"</_MonoASOption>
      <_MonoCPPOption>CPP="$(_MonoAndroidToolchainPrefixClang)-clang -E"</_MonoCPPOption>
      <_MonoCXXCPPOption>CXXCPP="$(_MonoAndroidToolchainPrefixClang)-clang++ -E"</_MonoCXXCPPOption>
      <_MonoDLLTOOLOption>DLLTOOL=""</_MonoDLLTOOLOption>
      <_MonoLDOption>LD="$(_MonoAndroidToolchainPrefix)-ld"</_MonoLDOption>
      <_MonoOBJDUMPOption>OBJDUMP="$(_MonoAndroidToolchainPrefix)-objdump"</_MonoOBJDUMPOption>
      <_MonoRANLIBOption>RANLIB="$(_MonoAndroidToolchainPrefix)-ranlib"</_MonoRANLIBOption>
      <_MonoCMAKEOption>CMAKE=""</_MonoCMAKEOption>
      <_MonoSTRIPOption>STRIP="$(_MonoAndroidToolchainPrefix)-strip"</_MonoSTRIPOption>
    </PropertyGroup>

    <!-- ARM Linux cross build options -->
    <PropertyGroup Condition="'$(TargetsAndroid)' != 'true' and '$(MonoCrossDir)' != '' and ('$(TargetArchitecture)' == 'arm' Or '$(TargetArchitecture)' == 'arm64')">
      <_MonoTuple Condition="'$(TargetArchitecture)' == 'arm64'">aarch64-linux-gnu</_MonoTuple>
      <_MonoTuple Condition="'$(TargetArchitecture)' == 'arm'">arm-linux-gnueabihf</_MonoTuple>

      <_MonoRANLIBOption>RANLIB="$(_MonoTuple)-ranlib"</_MonoRANLIBOption>
      <_MonoAROption>AR="$(_MonoTuple)-ar"</_MonoAROption>
      <_MonoASOption>AS="$(_MonoTuple)-as"</_MonoASOption>
      <_MonoLDOption>LD="$(_MonoTuple)-ld"</_MonoLDOption>
      <_MonoSTRIPOption>STRIP="$(_MonoTuple)-strip"</_MonoSTRIPOption>
    </PropertyGroup>

    <Error Condition="'$(TargetsWASM)' == 'true' and '$(EMSDK_PATH)' == ''" Text="The EMSDK_PATH environment variable should be set pointing to the emscripten SDK root dir."/>

    <!-- WASM specific options -->
    <ItemGroup Condition="'$(TargetsWASM)' == 'true'">
      <_MonoConfigureParams Include="--host=wasm32"/>
      <_MonoConfigureParams Include="--disable-boehm" />
      <_MonoConfigureParams Include="--disable-btls" />
      <_MonoConfigureParams Include="--disable-executables" />
      <_MonoConfigureParams Include="--disable-iconv" />
      <_MonoConfigureParams Include="--disable-mcs-build" />
      <_MonoConfigureParams Include="--disable-nls" />
      <_MonoConfigureParams Include="--disable-visibility-hidden" />
      <_MonoConfigureParams Include="--with-lazy-gc-thread-creation=yes" />
      <_MonoConfigureParams Include="--enable-maintainer-mode" />
      <_MonoConfigureParams Include="--enable-llvm-runtime"/>
      <_MonoConfigureParams Include="--enable-icall-export"/>
      <_MonoConfigureParams Include="--disable-icall-tables"/>
      <_MonoConfigureParams Include="--disable-crash-reporting"/>
      <_MonoConfigureParams Include="--with-bitcode=yes"/>
      <_MonoConfigureParams Include="--enable-minimal=ssa,com,jit,reflection_emit_save,portability,assembly_remapping,attach,verifier,full_messages,appdomains,security,sgen_marksweep_conc,sgen_split_nursery,sgen_gc_bridge,logging,remoting,shared_perfcounters,sgen_debug_helpers,soft_debug,interpreter,assert_messages,cleanup,mdb,gac"/>
      <!-- FIXME: -Os -->
      <_MonoCFLAGS Include="-fexceptions" />
      <_MonoCXXFLAGS Include="-fexceptions -s DISABLE_EXCEPTION_CATCHING=0" />
      <_MonoAC_VARS Include="ac_cv_func_shm_open_working_with_mmap=no" />
    </ItemGroup>

    <!-- Linux options -->
    <ItemGroup Condition="'$(TargetsLinux)' == true">
      <_MonoCFLAGS Include="-Wl,--build-id" />
      <_MonoCXXFLAGS Include="-Wl,--build-id" />
    </ItemGroup>

    <ItemGroup Condition="'$(MonoCrossDir)' != '' and ('$(TargetArchitecture)' == 'arm' Or '$(TargetArchitecture)' == 'arm64')">
      <_MonoConfigureParams Include="--host=$(_MonoTuple)" />
      <_MonoConfigureParams Include="--target=$(_MonoTuple)" />

      <_MonoCFLAGS Include="--sysroot=$(MonoCrossDir)" />
      <_MonoCFLAGS Include="--target=$(_MonoTuple)" />

      <_MonoCXXFLAGS Include="--sysroot=$(MonoCrossDir)" />
      <_MonoCXXFLAGS Include="--target=$(_MonoTuple)" />

      <_MonoLDFLAGS Include="--sysroot=$(MonoCrossDir)" />
      <_MonoLDFLAGS Include="--target=$(_MonoTuple)" />

      <_MonoCCLDFLAGS Include="-XCClinker" />
      <_MonoCCLDFLAGS Include="--target=$(_MonoTuple)" />
    </ItemGroup>

    <!-- Common options -->
    <PropertyGroup>
      <_MonoCFLAGSOption Condition="@(_MonoCFLAGS->Count()) &gt; 0">CFLAGS="@(_MonoCFLAGS, ' ')"</_MonoCFLAGSOption>
      <_MonoCXXFLAGSOption Condition="@(_MonoCXXFLAGS->Count()) &gt; 0">CXXFLAGS="@(_MonoCXXFLAGS, ' ')"</_MonoCXXFLAGSOption>
      <_MonoCPPFLAGSOption Condition="@(_MonoCPPFLAGS->Count()) &gt; 0">CPPFLAGS="@(_MonoCPPFLAGS, ' ')"</_MonoCPPFLAGSOption>
      <_MonoCXXCPPFLAGSOption Condition="@(_MonoCXXCPPFLAGS->Count()) &gt; 0">CXXCPPFLAGS="@(_MonoCXXCPPFLAGS, ' ')"</_MonoCXXCPPFLAGSOption>
      <_MonoLDFLAGSOption Condition="@(_MonoLDFLAGS->Count()) &gt; 0">LDFLAGS="@(_MonoLDFLAGS, ' ')"</_MonoLDFLAGSOption>
      <_MonoCCLDFLAGSOption Condition="@(_MonoCCLDFLAGS->Count()) &gt; 0">CCLDFLAGS="@(_MonoCCLDFLAGS, ' ')"</_MonoCCLDFLAGSOption>

      <_MonoConfigureOptions>@(_MonoConfigureParams, ' ') @(_MonoAC_VARS, ' ') $(_MonoCFLAGSOption) $(_MonoCXXFLAGSOption) $(_MonoCPPFLAGSOption) $(_MonoCXXCPPFLAGSOption) $(_MonoLDFLAGSOption) $(_MonoCCLDFLAGSOption) $(_MonoCCOption) $(_MonoCXXOption) $(_MonoAROption) $(_MonoASOption) $(_MonoCPPOption) $(_MonoCXXCPPOption) $(_MonoDLLTOOLOption) $(_MonoLDOption) $(_MonoOBJDUMPOption) $(_MonoRANLIBOption) $(_MonoCMAKEOption) $(_MonoSTRIPOption)</_MonoConfigureOptions>
      <_MonoConfigureCommand Condition="'$(_MonoCCOption)' == '' and '$(_MonoCXXOption)' == ''">bash -c 'source $(RepositoryEngineeringDir)native/init-compiler.sh $(Platform) clang &amp;&amp; $(MonoProjectRoot)configure $(_MonoConfigureOptions)'</_MonoConfigureCommand>
      <_MonoConfigureCommand Condition="'$(_MonoCCOption)' != '' and '$(_MonoCXXOption)' != ''">$(MonoProjectRoot)configure $(_MonoConfigureOptions)</_MonoConfigureCommand>
      <_MonoConfigureCommand Condition="'$(TargetsWASM)' == 'true'">bash -c 'source $(EMSDK_PATH)/emsdk_env.sh &amp;&amp; emconfigure $(MonoProjectRoot)configure $(_MonoConfigureOptions)'</_MonoConfigureCommand>
    </PropertyGroup>

    <!-- AOT cross-compiler specific options -->
    <PropertyGroup Condition="'$(BuildMonoAOTCrossCompiler)' == 'true'">
      <_MonoAotCrossCFLAGSOption Condition="@(_MonoAotCrossCFLAGS->Count()) &gt; 0">CFLAGS="@(_MonoAotCrossCFLAGS, ' ')"</_MonoAotCrossCFLAGSOption>
      <_MonoAotCrossCXXFLAGSOption Condition="@(_MonoAotCrossCXXFLAGS->Count()) &gt; 0">CXXFLAGS="@(_MonoAotCrossCXXFLAGS, ' ')"</_MonoAotCrossCXXFLAGSOption>
      <_MonoAotCrossCPPFLAGSOption Condition="@(_MonoAotCrossCPPFLAGS->Count()) &gt; 0">CPPFLAGS="@(_MonoAotCrossCPPFLAGS, ' ')"</_MonoAotCrossCPPFLAGSOption>
      <_MonoAotCrossCXXCPPFLAGSOption Condition="@(_MonoAotCrossCXXCPPFLAGS->Count()) &gt; 0">CXXCPPFLAGS="@(_MonoAotCrossCXXCPPFLAGS, ' ')"</_MonoAotCrossCXXCPPFLAGSOption>
      <_MonoAotCrossLDFLAGSOption Condition="@(_MonoAotCrossLDFLAGS->Count()) &gt; 0">LDFLAGS="@(_MonoAotCrossLDFLAGS, ' ')"</_MonoAotCrossLDFLAGSOption>
      <_MonoAotCrossCCLDFLAGSOption Condition="@(_MonoAotCrossCCLDFLAGS->Count()) &gt; 0">CCLDFLAGS="@(_MonoAotCrossCCLDFLAGS, ' ')"</_MonoAotCrossCCLDFLAGSOption>

      <_MonoAotCrossConfigureCommand>$(MonoProjectRoot)configure @(_MonoAotCrossConfigureParams, ' ') @(_MonoAotCrossAC_VARS, ' ') $(_MonoAotCrossCFLAGSOption) $(_MonoAotCrossCXXFLAGSOption) $(_MonoAotCrossCPPFLAGSOption) $(_MonoAotCrossCXXCPPFLAGSOption) $(_MonoAotCrossLDFLAGSOption) $(_MonoAotCrossCCLDFLAGSOption) $(_MonoCCOption) $(_MonoCXXOption) $(_MonoAROption) $(_MonoASOption) $(_MonoCPPOption) $(_MonoCXXCPPOption) $(_MonoDLLTOOLOption) $(_MonoLDOption) $(_MonoOBJDUMPOption) $(_MonoRANLIBOption) $(_MonoCMAKEOption) $(_MonoSTRIPOption)</_MonoAotCrossConfigureCommand>
      <_MonoAotCrossOffsetsCommand>python3 $(MonoProjectRoot)mono/tools/offsets-tool/offsets-tool.py @(_MonoAotCrossOffsetsToolParams, ' ')</_MonoAotCrossOffsetsCommand>
    </PropertyGroup>

    <!-- Configure target runtime -->
    <MakeDir Directories="$(MonoObjDir)" />
    <Message Text="--- Configuring Mono with '$(_MonoConfigureCommand)' ---" Importance="High" />
    <Exec Command="NOCONFIGURE=1 $(MonoProjectRoot)autogen.sh" IgnoreStandardErrorWarningFormat="true"/>
    <Exec Command="$(_MonoConfigureCommand)" WorkingDirectory="$(MonoObjDir)" IgnoreStandardErrorWarningFormat="true" />
    <Touch Files="$(MonoObjDir)config.h" />

    <!-- Configure AOT cross compiler (if available) -->
    <MakeDir Condition="'$(_MonoAotCrossConfigureCommand)' != ''" Directories="$(MonoObjDir)/cross" />
    <Message Condition="'$(_MonoAotCrossOffsetsCommand)' != ''" Text="--- Generating Mono AOT cross-compiler offsets file with '$(_MonoAotCrossOffsetsCommand)' ---" Importance="High" />
    <Exec Condition="'$(_MonoAotCrossOffsetsCommand)' != ''" Command="$(_MonoAotCrossOffsetsCommand)" IgnoreStandardErrorWarningFormat="true" />

    <Message Condition="'$(_MonoAotCrossConfigureCommand)' != ''" Text="--- Configuring Mono AOT cross-compiler with '$(_MonoAotCrossConfigureCommand)' ---" Importance="High" />
    <Exec Condition="'$(_MonoAotCrossConfigureCommand)' != ''" Command="$(_MonoAotCrossConfigureCommand)" WorkingDirectory="$(MonoObjDir)cross" IgnoreStandardErrorWarningFormat="true" />
    <Touch Condition="'$(_MonoAotCrossConfigureCommand)' != ''" Files="$(MonoObjDir)cross/config.h" />
  </Target>

  <Target Name="BuildMonoRuntimeUnix" Condition="'$(OS)' != 'Windows_NT'" DependsOnTargets="ConfigureMonoRuntimeUnix">
    <Message Text="--- Building Mono ---" Importance="High" />
    <Exec Condition="'$(TargetsWASM)' != 'true'" Command="make -j$([System.Environment]::ProcessorCount)" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(MonoObjDir)" />
    <Exec Condition="'$(TargetsWASM)' == 'true'" Command="bash -c 'source $(EMSDK_PATH)/emsdk_env.sh &amp;&amp; make -j$([System.Environment]::ProcessorCount)'" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(MonoObjDir)" />
    <Exec Condition="'$(TargetstvOS)' == 'true' or '$(TargetsiOS)' == 'true' or '$(TargetsAndroid)' == 'true'" Command="make install -j$([System.Environment]::ProcessorCount)" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(MonoObjDir)" />

    <Message Condition="'$(BuildMonoAOTCrossCompiler)' == 'true'" Text="--- Building Mono AOT cross-compiler ---" Importance="High" />
    <Exec Condition="'$(BuildMonoAOTCrossCompiler)' == 'true'" Command="make -j$([System.Environment]::ProcessorCount)" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(MonoObjDir)cross" />
    <Exec Condition="'$(BuildMonoAOTCrossCompiler)' == 'true'" Command="make install -j$([System.Environment]::ProcessorCount)" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(MonoObjDir)cross" />
  </Target>

  <!-- Windows Mono runtime build -->
  <Target Name="BuildMonoRuntimeWindows" Condition="'$(OS)' == 'Windows_NT'">

    <!-- Sanity checks -->
    <Error Condition="'$(TargetsiOS)' == 'true' or '$(TargetstvOS)' == 'true'" Text="Error: Mono runtime for $(TargetOS) can't be built on Windows." />

    <ItemGroup>
      <_MonoBuildParams Include="/p:MONO_BUILD_DIR_PREFIX=&quot;&quot;$(MonoObjDir)&quot;&quot;" />
      <_MonoBuildParams Include="/p:MONO_ENABLE_NETCORE=true" />
      <_MonoBuildParams Include="/p:MONO_USE_STATIC_C_RUNTIME=true" />
      <_MonoBuildParams Include="/p:CL_MPCount=$([System.Environment]::ProcessorCount)" />
      <_MonoBuildParams Include="/v:minimal" />
      <_MonoBuildParams Condition="$(MonoEnableLLVM) == true" Include="/p:MONO_ENABLE_LLVM=true" />
      <_MonoBuildParams Condition="$(MonoEnableLLVM) == true" Include="/p:MONO_EXTERNAL_LLVM_CONFIG=&quot;&quot;$(MonoLLVMDir)\bin\llvm-config.exe&quot;&quot;" />
    </ItemGroup>
    <PropertyGroup>
      <_MonoBuildPlatform Condition="'$(Platform)' == 'x64'">x64</_MonoBuildPlatform>
      <_MonoBuildPlatform Condition="'$(Platform)' == 'x86'">win32</_MonoBuildPlatform>

      <_MonoBuildCommand>msvc\run-msbuild.bat build $(_MonoBuildPlatform) $(Configuration) sgen &quot;@(_MonoBuildParams, ' ')&quot; msvc\mono-netcore.sln</_MonoBuildCommand>
    </PropertyGroup>

    <Message Text="--- Building Mono ---" Importance="High" />
    <Exec Command="$(_MonoBuildCommand)" IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <!-- Precompile (AssembliesToPrecompile) using (MonoExec) -->
  <Target Name="PrecompileAssembly">
   <PropertyGroup>
      <EnvVars Condition="'$(OS)' == 'Windows_NT'">set MONO_ENV_OPTIONS=--aot=mcpu=native &amp; $(EnvVars)</EnvVars>
      <EnvVars Condition="'$(OS)' != 'Windows_NT'">export MONO_ENV_OPTIONS=--aot=mcpu=native &amp;&amp; $(EnvVars)</EnvVars>
    </PropertyGroup>
    <Exec Command="$(EnvVars) $(MonoExec) %(AssembliesToPrecompile.Identity)" ContinueOnError="WarnAndContinue" />
  </Target>

  <!-- Precompile (AOT) managed libs in .dotnet-mono\shared\Microsoft.NETCore.App\**\*.dll -->
  <Target Name="PrecompileLocalMonoDotnetBcl" DependsOnTargets="PrepareLocalMonoDotnetBclForAot;PrecompileAssembly" />
  <Target Name="PrepareLocalMonoDotnetBclForAot" DependsOnTargets="PatchLocalMonoDotnet">
    <PropertyGroup>
      <MonoExec>$(LocalMonoDotnet)</MonoExec>
    </PropertyGroup>
    <ItemGroup>
      <AssembliesToPrecompile 
          Include="$(LocalMonoDotnetDir)\shared\Microsoft.NETCore.App\**\*.dll"
          Exclude="$(LocalMonoDotnetDir)\shared\Microsoft.NETCore.App\**\System.Runtime.WindowsRuntime.dll" />
    </ItemGroup>
  </Target>

  <!-- Precompile (AOT) $(ArtifactsDir)bin\**\*Tests\**\System.*.dll -->
  <Target Name="PrecompileLibrariesTests" DependsOnTargets="PrepareLibrariesTestsForAot;PrecompileAssembly" />
  <Target Name="PrepareLibrariesTestsForAot" DependsOnTargets="PatchLibrariesTesthost">
    <PropertyGroup>
      <MonoExec>$(LibrariesTesthostRoot)$(DotNetExec)</MonoExec>
    </PropertyGroup>
    <ItemGroup>
      <AssembliesToPrecompile
          Include="$(ArtifactsDir)bin\**\*Tests\**\System.*.dll" />
    </ItemGroup>
  </Target>

  <!-- Precompile (AOT) $(ArtifactsDir)bin\**\*Tests\**\System.*.dll -->
  <Target Name="PrecompileTesthostLibraries" DependsOnTargets="PrepareTesthostLibrariesForAot;PrecompileAssembly" />
  <Target Name="PrepareTesthostLibrariesForAot" DependsOnTargets="PatchLibrariesTesthost">
    <PropertyGroup>
      <MonoExec>$(LibrariesTesthostRoot)$(DotNetExec)</MonoExec>
    </PropertyGroup>
    <ItemGroup>
      <AssembliesToPrecompile
          Include="$(LibrariesTesthostRuntimeDir)\System.*.dll" />
    </ItemGroup>
  </Target>

  <!-- Copy Mono runtime bits to $(Destination) -->
  <Target Name="CopyMonoRuntimeFilesFromArtifactsToDestination">
    <ItemGroup>
      <_MonoRuntimeArtifacts Include="$(BinDir)\*.*" />
    </ItemGroup>
    <Error Condition="'$(Destination)' == ''" Text="Destination should not be empty" />
    <Error Condition="@(_MonoRuntimeArtifacts->Count()) &lt; 2" Text="Mono artifacts were not found at $(BinDir)" />
    <Message Text="Copying Mono Runtime artifacts from '$(BinDir)' to '$(Destination)'.'" Importance="High" />
    <Copy SourceFiles="@(_MonoRuntimeArtifacts)" 
          DestinationFolder="$(Destination)"
          OverwriteReadOnlyFiles="true" />
  </Target>

  <Target Name="CloneLocalDotnet" DependsOnTargets="ValidateLocalDotnet">
    <ItemGroup>
      <_LocalDotnetFiles Include="$(LocalDotnetDir)\**\*.*" />
    </ItemGroup>
    <!-- copy .dotnet to .dotnet-mono if it doesn't exist -->
    <Copy SourceFiles="@(_LocalDotnetFiles)"
          DestinationFolder="$(LocalMonoDotnetDir)\%(RecursiveDir)"
          SkipUnchangedFiles="true" />
  </Target>

  <!-- Copy Mono runtime bits to the local .dotnet-mono (clone of .dotnet) dir for local experiments (temp solution) -->
  <Target Name="PatchLocalMonoDotnet" DependsOnTargets="CloneLocalDotnet">
      <MSBuild Projects ="$(MSBuildProjectFullPath)"
               Properties="Destination=$([System.IO.Directory]::GetDirectories('$(LocalMonoDotnetDir)\shared\Microsoft.NETCore.App')[0])"
               Targets="CopyMonoRuntimeFilesFromArtifactsToDestination" />
  </Target>

  <!-- Copy Mono runtime bits to the coreclr's Core_Root in order to run runtime tests -->
  <Target Name="PatchCoreClrCoreRoot" DependsOnTargets="ValidateLocalDotnet">
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Properties="Destination=$(CoreClrTestCoreRoot)"
             Targets="CopyMonoRuntimeFilesFromArtifactsToDestination" />
  </Target>

  <!-- Copy Mono runtime bits to the coreclr's Core_Root in order to run runtime tests -->
  <Target Name="PatchLibrariesTesthost" DependsOnTargets="ValidateLocalDotnet">
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Properties="Destination=$(LibrariesTesthostRuntimeDir)"
             Targets="CopyMonoRuntimeFilesFromArtifactsToDestination" />
  </Target>

  <!-- Copy Coreclr runtime bits back to Core_Root -->
  <Target Name="RestoreCoreClrCoreRoot" DependsOnTargets="ValidateLocalDotnet">
    <Copy SourceFiles="$(CoreCLRArtifactsPath)\System.Private.CoreLib.dll"
          DestinationFiles="$(CoreClrTestCoreRoot)\System.Private.CoreLib.dll" />
    <Copy SourceFiles="$(CoreCLRArtifactsPath)\$(CoreClrFileName)"
          DestinationFiles="$(CoreClrTestCoreRoot)\$(CoreClrFileName)" />
  </Target>

  <!-- Run netcore\sample\HelloWorld sample using Mono Runtime -->
  <Target Name="RunSample" DependsOnTargets="PatchLocalMonoDotnet">
     <PropertyGroup>
      <SampleDir>$(MonoProjectRoot)netcore\sample\HelloWorld</SampleDir>
      <EnvVars Condition="'$(OS)' == 'Windows_NT'">set COMPlus_DebugWriteToStdErr=1 &amp; $(EnvVars)</EnvVars>
      <EnvVars Condition="'$(OS)' != 'Windows_NT'">export COMPlus_DebugWriteToStdErr=1 &amp;&amp; $(EnvVars)</EnvVars>
    </PropertyGroup>
    <Exec Command="$(EnvVars) $(LocalMonoDotnet) run -c $(Configuration) -p $(SampleDir)" />
  </Target>

  <!-- Run CoreCLR runtime test using testhost -->
  <Target Name="RunCoreClrTest" DependsOnTargets="ValidateLocalDotnet;PatchCoreClrCoreRoot">
    <Error Condition="$(CoreClrTest) == ''" Text="'CoreClrTest' is not set. E.g. set it to `$(ArtifactsDir)tests/coreclr/$(TargetOS).$(Platform).$(CoreClrTestConfig)/JIT/opt/InstructionCombining/DivToMul/DivToMul$(ScriptExt)` in order to run DivToMul test." />
    <Exec Command="$(CoreClrTest) -coreroot=&quot;$(CoreClrTestCoreRoot)&quot;"/>
  </Target>

  <!-- Run coreclr tests using runtest.py -->
  <Target Name="RunCoreClrTests" DependsOnTargets="ValidateLocalDotnet;PatchCoreClrCoreRoot">
    <Exec Condition="'$(OS)' == 'Windows_NT'" Command="$(MonoProjectRoot)..\coreclr\tests\runtest.cmd $(CoreClrTestConfig)" ContinueOnError="ErrorAndContinue" />
    <Exec Condition="'$(OS)' != 'Windows_NT'" Command="$(MonoProjectRoot)../coreclr/tests/./runtest.sh $(CoreClrTestConfig)" ContinueOnError="ErrorAndContinue" />
  </Target>

  <!-- Run Libraries tests using testhost -->
  <Target Name="RunLibrariesTest" DependsOnTargets="PatchLibrariesTesthost">
    <Error Condition="$(LibraryToTest) == ''" Text="LibraryToTest variable is not set" />
    <Error Condition="$(LibraryToTest.EndsWith('.Tests'))" Text="LibraryToTest should not end with .Tests, e.g. just 'System.Runtime'" />
    <MSBuild Projects="$(RepoRoot)src\libraries\$(LibraryToTest)\tests\$(LibraryToTest).Tests.csproj" 
             Properties="Configuration=$(LibrariesTestConfig)" Targets="Test" />
  </Target>

  <Target Name="RunBenchmarks" DependsOnTargets="PatchLocalMonoDotnet">
    <Error Condition="$(BenchmarksRepo) == ''" Text="BenchmarksRepo variable is not set" />
    <Exec WorkingDirectory="$(BenchmarksRepo)\src\benchmarks\micro" Command="$(LocalDotnet) run -c Release -f $(NetCoreAppCurrent) --cli $(LocalMonoDotnet)" />
  </Target>

  <Target Name="ValidateLocalDotnet">
    <Error Condition="$([System.IO.Directory]::GetDirectories('$(LocalDotnetDir)\shared\Microsoft.NETCore.App').Length) > 1" Text="$(LocalDotnetDir) contains more than one SDK, please delete unused ones." />
    <Error Condition="Exists('$(LocalMonoDotnetDir)') AND $([System.IO.Directory]::GetDirectories('$(LocalMonoDotnetDir)\shared\Microsoft.NETCore.App').Length) > 1" Text="$(LocalMonoDotnetDir) contains more than one SDK, please delete unused ones." />
    <Error Condition="!Exists('$(LocalDotnet)')" Text="'$(LocalDotnet)' doesn't exist." />
  </Target>

  <Import Project="Directory.Build.targets" />

  <!-- Ordering matters! Overwriting the Build target. -->
  <!-- General targets -->
  <Target Name="Build" DependsOnTargets="BuildMonoRuntimeUnix;BuildMonoRuntimeWindows">
    <PropertyGroup>
      <_MonoRuntimeFilePath Condition="'$(TargetsWindows)' == 'true' and '$(Platform)' == 'x64'">$(MonoObjDir)x64\Bin\$(Configuration)\mono-2.0-sgen.dll</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(TargetsWindows)' == 'true' and '$(Platform)' == 'x86'">$(MonoObjDir)Win32\Bin\$(Configuration)\mono-2.0-sgen.dll</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(TargetsOSX)' == 'true'">$(MonoObjDir)mono\mini\.libs\libmonosgen-2.0.dylib</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(TargetsiOS)' == 'true'">$(MonoObjDir)out\lib\libmonosgen-2.0.dylib</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(TargetstvOS)' == 'true'">$(MonoObjDir)out\lib\libmonosgen-2.0.dylib</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(TargetsAndroid)' == 'true'">$(MonoObjDir)out\lib\libmonosgen-2.0.so</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(TargetsWASM)' == 'true'">$(MonoObjDir)mono\mini\.libs\libmonosgen-2.0.a</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(_MonoRuntimeFilePath)' == ''">$(MonoObjDir)mono\mini\.libs\libmonosgen-2.0.so</_MonoRuntimeFilePath>
      <_MonoRuntimeStaticFilePath Condition="'$(TargetsiOS)' == 'true' or '$(TargetstvOS)' == 'true' or '$(TargetsAndroid)' == 'true'">$(MonoObjDir)out\lib\libmonosgen-2.0.a</_MonoRuntimeStaticFilePath>
      <_MonoAotCrossFilePath Condition="'$(TargetsiOS)' == 'true' and '$(Platform)' == 'arm64'">$(MonoObjDir)cross\out\bin\aarch64-darwin-mono-sgen</_MonoAotCrossFilePath>
      <_MonoAotCrossFilePath Condition="'$(TargetsiOS)' == 'true' and '$(Platform)' == 'arm'">$(MonoObjDir)cross\out\bin\arm-darwin-mono-sgen</_MonoAotCrossFilePath>
      <_MonoAotCrossFilePath Condition="'$(TargetstvOS)' == 'true' and '$(Platform)' == 'arm64'">$(MonoObjDir)cross\out\bin\aarch64-darwin-mono-sgen</_MonoAotCrossFilePath>
    </PropertyGroup>

    <!-- Copy Mono runtime files to artifacts directory -->
    <ItemGroup>
      <_MonoRuntimeArtifacts Include="$(_MonoRuntimeFilePath)">
        <Destination>$(BinDir)$(MonoFileName)</Destination>
      </_MonoRuntimeArtifacts>
      <_MonoRuntimeArtifacts Include="$(_MonoRuntimeStaticFilePath)">
        <Destination>$(BinDir)$(MonoStaticFileName)</Destination>
      </_MonoRuntimeArtifacts>
      <_MonoRuntimeArtifacts Include="$(_MonoAotCrossFilePath)">
        <Destination>$(BinDir)cross\mono-aot-cross</Destination>
      </_MonoRuntimeArtifacts>
      <_MonoIncludeArtifacts Include="$(MonoObjDir)out\include\**" />
    </ItemGroup>

    <Copy SourceFiles="@(_MonoRuntimeArtifacts)"
          DestinationFiles="%(_MonoRuntimeArtifacts.Destination)"
          SkipUnchangedFiles="true" />

    <Copy SourceFiles="@(_MonoIncludeArtifacts)"
          DestinationFiles="@(_MonoIncludeArtifacts->'$(BinDir)include\%(RecursiveDir)%(Filename)%(Extension)')"
          SkipUnchangedFiles="true"
          Condition="'$(TargetsiOS)' == 'true' or '$(TargetstvOS)' == 'true' or'$(TargetsAndroid)' == 'true' or '$(TargetsWASM)' == 'true'"/>

    <Exec Condition="'$(TargetsOSX)' == 'true' or '$(TargetsiOS)' == 'true' or '$(TargetstvOS)' == 'true'" Command="install_name_tool -id @rpath/$(MonoFileName) $(BinDir)$(MonoFileName)" />
  </Target>

</Project>
