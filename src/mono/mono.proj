<Project>
  <Import Project="Directory.Build.props" />
  <Import Project="Directory.Build.targets" />

  <PropertyGroup>
    <MonoObjDir>$(ArtifactsObjDir)mono/$(PlatformConfigPathPart)/</MonoObjDir>
    <MonoEnableLLVM Condition=" '$(MonoEnableLLVM)' == '' ">false</MonoEnableLLVM>
    <DotNetExec Condition="'$(OS)' == 'Windows_NT'">dotnet.exe</DotNetExec>
    <DotNetExec Condition="'$(DotNetExec)' == ''">dotnet</DotNetExec>
    <LocalDotnetDir>..\..\.dotnet</LocalDotnetDir>
    <LocalDotnet>$(LocalDotnetDir)\$(DotNetExec)</LocalDotnet>
    <ScriptExt Condition="'$(OS)' == 'Windows_NT'">.cmd</ScriptExt>
    <ScriptExt Condition="'$(OS)' != 'Windows_NT'">.sh</ScriptExt>
    <_CoreClrFileName Condition="'$(TargetsWindows)' == 'true'">coreclr.dll</_CoreClrFileName>
    <_CoreClrFileName Condition="'$(TargetsOSX)' == 'true'">libcoreclr.dylib</_CoreClrFileName>
    <_CoreClrFileName Condition="'$(_CoreClrFileName)' == ''">libcoreclr.so</_CoreClrFileName>
    <CoreClrTestConfig Condition="'$(CoreClrTestConfig)' == ''">$(Configuration)</CoreClrTestConfig>
    <CoreClrTestCoreRoot>$(ArtifactsDir)tests\coreclr\$(OSGroup).$(Platform).$(CoreClrTestConfig)\Tests\Core_Root</CoreClrTestCoreRoot>
  </PropertyGroup>

  <!-- OSX/Linux Mono runtime build -->
  <Target Name="ConfigureMonoRuntimeUnix" Condition="'$(OS)' != 'Windows_NT'" Inputs="$(MonoProjectRoot)configure.ac" Outputs="$(MonoObjDir)config.h">
      <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
        <_MonoExtraCFLAGS>-O0 -ggdb3 -fno-omit-frame-pointer</_MonoExtraCFLAGS>
        <_MonoExtraCXXFLAGS>-O0 -ggdb3 -fno-omit-frame-pointer</_MonoExtraCXXFLAGS>
        <_MonoConfigureParams>--enable-checked-build=private_types</_MonoConfigureParams>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
        <_MonoExtraCFLAGS>-O2 -g</_MonoExtraCFLAGS>
        <_MonoExtraCXXFLAGS>-O2 -g</_MonoExtraCXXFLAGS>
    </PropertyGroup>
    <PropertyGroup>
        <_MonoConfigureParams Condition="$(MonoEnableLLVM) == true">$(_MonoConfigureParams) --enable--llvm </_MonoConfigureParams>
        <_MonoConfigureParams>$(_MonoConfigureParams) --with-core=only CC=clang CXX=clang++ CFLAGS="$(_MonoExtraCFLAGS)" CXXFLAGS="$(_MonoExtraCXXFLAGS)"</_MonoConfigureParams>
    </PropertyGroup>

    <Message Text="Configuring Mono with '$(_MonoConfigureParams)'" Importance="High" />
    <MakeDir Directories="$(MonoObjDir)" />
    <Exec Command="NOCONFIGURE=1 $(MonoProjectRoot)autogen.sh" />
    <Exec Command="$(MonoProjectRoot)configure $(_MonoConfigureParams)" WorkingDirectory="$(MonoObjDir)" />
    <Touch Files="$(MonoObjDir)config.h" />
  </Target>

  <Target Name="BuildMonoRuntimeUnix" Condition="'$(OS)' != 'Windows_NT'" DependsOnTargets="ConfigureMonoRuntimeUnix">
    <Exec Command="make -j8" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(MonoObjDir)" />
  </Target>

  <!-- Windows Mono runtime build -->
  <Target Name="BuildMonoRuntimeWindows" Condition="'$(OS)' == 'Windows_NT'">
    <PropertyGroup>
        <_MonoBuildParams>/p:MONO_BUILD_DIR_PREFIX=&quot;&quot;$(MonoObjDir)&quot;&quot; /p:MONO_ENABLE_NETCORE=true /p:CL_MPCount=8 /v:minimal</_MonoBuildParams>
        <_MonoBuildParams Condition="$(MonoEnableLLVM) == true">/p:MONO_ENABLE_LLVM=true $(_MonoBuildParams)</_MonoBuildParams>
        <_MonoBuildPlatform Condition="'$(Platform)' == 'x64'">x64</_MonoBuildPlatform>
        <_MonoBuildPlatform Condition="'$(Platform)' == 'x86'">win32</_MonoBuildPlatform>
    </PropertyGroup>
    <Exec Command="msvc\run-msbuild.bat build $(_MonoBuildPlatform) $(Configuration) sgen &quot;$(_MonoBuildParams)&quot; msvc\mono-netcore.sln" IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <!-- General targets -->
  <Target Name="Build" DependsOnTargets="BuildMonoRuntimeUnix;BuildMonoRuntimeWindows">
    <PropertyGroup>
      <_MonoRuntimeFilePath Condition="'$(TargetsWindows)' == 'true' and '$(Platform)' == 'x64'">$(MonoObjDir)x64\Bin\$(Configuration)\mono-2.0-sgen.dll</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(TargetsWindows)' == 'true' and '$(Platform)' == 'x86'">$(MonoObjDir)Win32\Bin\$(Configuration)\mono-2.0-sgen.dll</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(TargetsOSX)' == 'true'">$(MonoObjDir)mono\mini\.libs\libmonosgen-2.0.dylib</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(_MonoRuntimeFilePath)' == ''">$(MonoObjDir)mono\mini\.libs\libmonosgen-2.0.so</_MonoRuntimeFilePath>
    </PropertyGroup>

    <!-- Copy Mono runtime files to artifacts directory -->
    <ItemGroup>
      <_MonoRuntimeArtifacts Include="$(_MonoRuntimeFilePath)">
        <Destination>$(BinDir)$(_CoreClrFileName)</Destination>
      </_MonoRuntimeArtifacts>
    </ItemGroup>

    <Copy SourceFiles="@(_MonoRuntimeArtifacts)"
          DestinationFiles="%(_MonoRuntimeArtifacts.Destination)"
          SkipUnchangedFiles="true" />

  </Target>

  <Target Name="Restore">
    <MSBuild Projects="$(MonoProjectRoot)netcore\nuget\packages.builds" Targets="Restore" />
  </Target>

  <Target Name="Pack">
    <MSBuild Projects="$(MonoProjectRoot)netcore\nuget\packages.builds" Targets="Build" />
  </Target>

  <Target Name="Test" />

  <!-- Copy Mono runtime bits to the local .dotnet dir for local experiments (temp solution) -->
  <Target Name="PatchLocalDotnet" DependsOnTargets="ValidateLocalDotnet">
    <PropertyGroup>
      <LocalDotnetRuntimeDir>$([System.IO.Directory]::GetDirectories("$(LocalDotnetDir)\shared\Microsoft.NETCore.App")[0])</LocalDotnetRuntimeDir>
    </PropertyGroup>
    <ItemGroup>
      <_MonoRuntimeArtifacts Include="$(BinDir)\*.*" />
    </ItemGroup>
    <Copy SourceFiles="$(_MonoRuntimeArtifacts)"
          DestinationFolder="$(LocalDotnetRuntimeDir)"
          SkipUnchangedFiles="true" />
  </Target>

  <!-- Copy Coreclr runtime bits to the local .dotnet dir -->
  <Target Name="RestoreLocalDotnet" DependsOnTargets="ValidateLocalDotnet">
    <Copy SourceFiles="$(CoreCLRArtifactsPath)\System.Private.CoreLib.dll"
          DestinationFiles="$(LocalDotnetRuntimeDir)\System.Private.CoreLib.dll" />
    <Copy SourceFiles="$(CoreCLRArtifactsPath)\$(_CoreClrFileName)"
          DestinationFiles="$(LocalDotnetRuntimeDir)\$(_CoreClrFileName)" />
  </Target>

  <!-- Copy Mono runtime bits to the coreclr's Core_Root in order to run runtime tests -->
  <Target Name="PatchCoreClrCoreRoot" DependsOnTargets="ValidateLocalDotnet">
    <Error Condition="!Exists('$(CoreClrTestCoreRoot)')" Text="Core_Root ($(CoreClrTestCoreRoot)) doesn't exist. Have you built coreclr tests in $(CoreClrTestConfig) configuration?" />
    <ItemGroup>
      <_MonoRuntimeArtifacts Include="$(BinDir)\*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(_MonoRuntimeArtifacts)"
          DestinationFolder="$(CoreClrTestCoreRoot)" 
          SkipUnchangedFiles="true"/>
  </Target>

  <!-- Copy Coreclr runtime bits back to Core_Root -->
  <Target Name="RestoreCoreClrCoreRoot" DependsOnTargets="ValidateLocalDotnet">
    <Copy SourceFiles="$(CoreCLRArtifactsPath)\System.Private.CoreLib.dll"
          DestinationFiles="$(CoreClrTestCoreRoot)\System.Private.CoreLib.dll" />
    <Copy SourceFiles="$(CoreCLRArtifactsPath)\$(_CoreClrFileName)"
          DestinationFiles="$(CoreClrTestCoreRoot)\$(_CoreClrFileName)" />
  </Target>

  <!-- Run netcore\sample\HelloWorld sample using Mono Runtime -->
  <Target Name="RunSample" DependsOnTargets="PatchLocalDotnet">
    <Exec Command="$(LocalDotnet) run -c Release -f $(NetCoreAppCurrent) -p $(MonoProjectRoot)netcore\sample\HelloWorld" />
  </Target>

  <!-- Run CoreCLR runtime test using testhost -->
  <Target Name="RunCoreClrTest" DependsOnTargets="ValidateLocalDotnet;PatchCoreClrCoreRoot">
    <Error Condition="$(CoreClrTest) == ''" Text="'CoreClrTest' is not set. E.g. set it to `$(ArtifactsDir)tests/coreclr/$(OSGroup).$(Platform).$(CoreClrTestConfig)/JIT/opt/InstructionCombining/DivToMul/DivToMul$(ScriptExt)` in order to run DivToMul test." />
    <Exec Command="$(CoreClrTest) -coreroot=&quot;$(CoreClrTestCoreRoot)&quot;"/>
  </Target>

  <!-- Make sure coreclr tests are built (in $(CoreClrTestConfig) configuration), e.g. 
    *nix: `cd ../coreclr && ./build.sh -release && ./build-testh.sh -release` 
    Windows: `cd ../coreclr && build.cmd -release` -->
  <Target Name="RunCoreClrTests" DependsOnTargets="ValidateLocalDotnet;PatchCoreClrCoreRoot">
    <ItemGroup>	
        <CoreClrTests Include="$(ArtifactsDir)tests\coreclr\$(OSGroup).$(Platform).$(CoreClrTestConfig)\**\*$(ScriptExt)" />	
    </ItemGroup>	
    <Exec Condition="'$(OS)' == 'Windows_NT'" Command="&quot;%(CoreClrTests.Identity)&quot; -coreroot &quot;$(CoreClrTestCoreRoot)&quot;" ContinueOnError="WarnAndContinue" />
    <Exec Condition="'$(OS)' != 'Windows_NT'" Command="bash &quot;%(CoreClrTests.Identity)&quot; -coreroot=&quot;$(CoreClrTestCoreRoot)&quot;" ContinueOnError="WarnAndContinue" />
  </Target>

  <!-- Show summary for coreclr tests -->
  <Target Name="CoreClrTestsSummary">
    <Exec Command="python $(MonoProjectRoot)..\coreclr\tests\runtest.py --analyze_results_only -test_location $(ArtifactsDir)tests\coreclr\$(OSGroup).$(Platform).$(CoreClrTestConfig) -build_type $(CoreClrTestConfig)" />
  </Target>

  <Target Name="RunBenchmarks">
    <Error Condition="$(BenchmarksRepo) == ''" Text="BenchmarksRepo variable is not set" />
    <Exec WorkingDirectory="$(BenchmarksRepo)\src\benchmarks\micro" Command="$(LocalDotnet) run -c Release -f $(NetCoreAppCurrent) --cli $(LocalDotnet)" />
  </Target>

  <Target Name="ValidateLocalDotnet">
    <Error Condition="!Exists('$(LocalDotnet)')" Text="'$(LocalDotnet)' doesn't exist." />
  </Target>

</Project>
