<Project>

  <PropertyGroup>
    <ProducesDotNetReleaseShippingAssets>true</ProducesDotNetReleaseShippingAssets>
    <PublishDependsOnTargets>$(PublishDependsOnTargets);_PublishInstallers</PublishDependsOnTargets>
  </PropertyGroup>

  <ItemGroup>
    <_InstallersToPublish Remove="@(_InstallersToPublish)" />
    <_InstallersToPublish Include="$(ArtifactsPackagesDir)**\*.tar.gz" UploadPathSegment="Runtime" Condition="'$(DotNetBuildRepo)' == 'true'" />
    <_InstallersToPublish Include="$(ArtifactsPackagesDir)**\*.zip" UploadPathSegment="Runtime" Condition="'$(DotNetBuildRepo)' == 'true'" />
    <_InstallersToPublish Include="$(ArtifactsPackagesDir)**\*.deb" UploadPathSegment="Runtime" Condition="'$(DotNetBuildRepo)' == 'true'" />
    <_InstallersToPublish Include="$(ArtifactsPackagesDir)**\*.rpm" UploadPathSegment="Runtime" Condition="'$(DotNetBuildRepo)' == 'true'" />
    <_InstallersToPublish Include="$(ArtifactsPackagesDir)**\*.exe" UploadPathSegment="Runtime" Condition="'$(DotNetBuildRepo)' == 'true'" />
    <_InstallersToPublish Include="$(ArtifactsPackagesDir)**\*.msi" UploadPathSegment="Runtime" Condition="'$(DotNetBuildRepo)' == 'true'" />
  </ItemGroup>

  <Target Name="_PublishInstallers">

    <ItemGroup>
      <_SymbolsArchive Include="$(ArtifactsPackagesDir)**\Symbols.runtime.tar.gz" Condition="'$(DotNetBuildFromSource)' == 'true'" />
      <!-- Exclude Symbols archive as it is already included, with correct blob path, in Publish.proj. -->
      <_InstallersToPublish Remove="@(_SymbolsArchive)" Condition="'$(DotNetBuildFromSource)' == 'true'" />
    </ItemGroup>

    <!-- Discover the runtime package version from dotnet-runtime-<version-<Rid>.<Extension> archive. -->
    <PropertyGroup>
      <_RuntimeFilenamePrefix>dotnet-runtime-</_RuntimeFilenamePrefix>
      <_PackageRid>$(OutputRID)</_PackageRid>
      <!-- Use TargetRid if OutputRID isn't available, i.e. on Windows. -->
      <_PackageRid Condition="'$(_PackageRid)' == ''">$(TargetRid)</_PackageRid>
    </PropertyGroup>
    <ItemGroup>
      <_RuntimeArchiveItem Include="$(ArtifactsPackagesDir)**\$(_RuntimeFilenamePrefix)*$(_PackageRid)$(ArchiveExtension)" />
      <_RuntimeInternalArchiveItem Include="$(ArtifactsPackagesDir)**\dotnet-runtime-internal*$(_PackageRid)$(ArchiveExtension)" />
      <_RuntimeArchiveItem Remove="@(_RuntimeInternalArchiveItem)" />
    </ItemGroup>

    <!-- Extract runtime version from runtime archive filename. -->
    <PropertyGroup>
      <_RuntimeArchiveFilename>%(_RuntimeArchiveItem.Filename)%(_RuntimeArchiveItem.Extension)</_RuntimeArchiveFilename>
      <_RuntimeVersion>$(_RuntimeArchiveFilename.Replace('$(_RuntimeFilenamePrefix)','').Replace('-$(_PackageRid)$(ArchiveExtension)',''))</_RuntimeVersion>
    </PropertyGroup>

    <ItemGroup>
      <!-- Do not push .nupkg files from Linux and macOS builds. They'll be packed up separately and signed on Windows.
           Do not remove if post build sign is true, as we avoid the xplat codesign jobs, and need to have
           the nupkgs pushed. Do not do this if building from source, since we want the source build intermediate package
           to be published. Use DotNetBuildRepo as DotNetBuildFromSource is only set in the internal source build,
           and Build.proj is invoked from the wrapper build. -->
      <ItemsToPushToBlobFeed Remove="@(ItemsToPushToBlobFeed)" Condition="'$(OS)' != 'Windows_NT' and '$(PostBuildSign)' != 'true' and '$(DotNetBuildRepo)' != 'true'" />

      <ItemsToPushToBlobFeed Include="@(_InstallersToPublish)">
        <ManifestArtifactData>NonShipping=false</ManifestArtifactData>
        <PublishFlatContainer>true</PublishFlatContainer>
        <RelativeBlobPath>%(_InstallersToPublish.UploadPathSegment)/$(_RuntimeVersion)/%(Filename)%(Extension)</RelativeBlobPath>
      </ItemsToPushToBlobFeed>
    </ItemGroup>
  </Target>

</Project>
