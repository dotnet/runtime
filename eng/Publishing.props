<Project>
  <Import Project="$(MSBuildThisFileDirectory)OSArch.props" />
  <Import Project="$(MSBuildThisFileDirectory)RuntimeIdentifier.props" />

  <PropertyGroup>
    <ProducesDotNetReleaseShippingAssets>true</ProducesDotNetReleaseShippingAssets>
    <!-- This avoids creating VS.*.symbols.nupkg packages that are identical to the original package. -->
    <AutoGenerateSymbolPackages>false</AutoGenerateSymbolPackages>
    <!-- Except for jobs that set a specific asset manifest file name as a global property, set the manifest name based on the package RID. -->
    <AssetManifestFileName>$(PackageRID).xml</AssetManifestFileName>
    <!-- Reset the file path now that we may have changed the name. -->
    <AssetManifestFilePath>$(ArtifactsLogDir)AssetManifest\$(AssetManifestFileName)</AssetManifestFilePath>
  </PropertyGroup>

  <!--
    Mark assets as Vertical visibility when building in the VMR
  -->
  <ItemGroup Condition="'$(DotNetBuildOrchestrator)' == 'true'">
    <Artifact Condition="'$(OutputRID)' != '$(NETCoreSdkRuntimeIdentifier)'"
              Update="$(ArtifactsPackagesDir)**\runtime.$(NETCoreSdkRuntimeIdentifier).Microsoft.NETCore.ILAsm.*.nupkg"
              Visibility="Vertical"
              IsShipping="false" />
    <Artifact Condition="'$(OutputRID)' != '$(NETCoreSdkRuntimeIdentifier)'"
              Update="$(ArtifactsPackagesDir)**\runtime.$(NETCoreSdkRuntimeIdentifier).Microsoft.NETCore.ILDAsm.*.nupkg"
              Visibility="Vertical"
              IsShipping="false" />
    <Artifact Condition="'$(RuntimeFlavor)' != 'Mono' and '$(OutputRID)' != '$(NETCoreSdkRuntimeIdentifier)'"
              Update="$(ArtifactsPackagesDir)**\Microsoft.NETCore.App.Crossgen2.$(NETCoreSdkRuntimeIdentifier).*.nupkg"
              Visibility="Vertical"
              IsShipping="false" />
    <Artifact Condition="'$(RuntimeFlavor)' != 'Mono' and '$(OutputRID)' != '$(NETCoreSdkRuntimeIdentifier)'"
              Update="$(ArtifactsPackagesDir)**\runtime.$(NETCoreSDKRuntimeIdentifier).Microsoft.DotNet.ILCompiler.*.nupkg"
              Visibility="Vertical"
              IsShipping="false" />
  </ItemGroup>

  <!--
    Filter out the RID-specific (Runtime) nupkgs for this RID.
    Every job will publish their RID-specific packages.
    For non-RID-specific packages, we have various rules:

    - A job can specify PublishAllPackages=true to publish all packages it produces.
      We have specific jobs that produce RID-agnostic packages or packages for multiple RIDs set this property.
      In Source-Build scenarios, we want to publish all packages from here as source-build legs are fully self-contained.
    - For some target RIDs, we also include specific RID-agnostic packages.
  -->
  <ItemGroup>
    <ThisRidPackages Include="$(ArtifactsPackagesDir)**\*.$(PackageRID).*.nupkg" />
    <OtherPackages Include="$(ArtifactsPackagesDir)**\*.nupkg" Exclude="@(RidSpecificPackages)" />
    
    <PackagesToPublishFromThisJob Include="@(ThisRidPackages)" />
    <PackagesToPublishFromThisJob Include="@(OtherPackages)" Condition="'$(PublishAllPackages)' == 'true' or '$(DotNetBuildSourceOnly)' == 'true'" />
  </ItemGroup>

  <ItemGroup Condition="'$(PackageRID)' == 'ios-arm64'">
    <PackagesToPublishFromThisJob
      Include="$(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.iOS.Sample.Mono.*.nupkg;
               $(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.LibraryBuilder.Sdk.*.nupkg;
               $(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.MonoAOTCompiler.Task.*.nupkg;
               $(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.MonoTargets.Sdk.*.nupkg" />
  </ItemGroup>
  <ItemGroup Condition="'$(PackageRID)' == 'android-arm64'">
    <PackagesToPublishFromThisJob
      Include="$(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.Android.Sample.Mono.*.nupkg" />
  </ItemGroup>
  <ItemGroup Condition="'$(PackageRID)' == 'wasi-wasm'">
    <PackagesToPublishFromThisJob
      Include="$(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.WebAssembly.Wasi.Sdk.*.nupkg" />
  </ItemGroup>
  <ItemGroup Condition="'$(PackageRID)' == 'browser-wasm' and '$(WasmEnableThreads)' != 'true'">
    <PackagesToPublishFromThisJob
      Include="$(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.WebAssembly.Sdk.*.nupkg;
               $(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.WebAssembly.Templates.net10.*.nupkg;
               $(ArtifactsPackagesDir)**\Microsoft.NET.Sdk.WebAssembly.Pack.*.nupkg;
               $(ArtifactsPackagesDir)**\Microsoft.NET.Workload.Mono.ToolChain.*.nupkg" />
  </ItemGroup>

  <ItemGroup>
    <PackagesToSkipFromThisJob Include="@(Artifact)" Exclude="@(PackagesToPublishFromThisJob)" />
    <!--
      In non-VMR builds, we can skip publishing RID-agnostic packages entirely when we're not the lane that is supposed to publish them.
      In VMR builds, we need to publish them for upstack jobs to consume.
    -->
    <Artifact Update="@(PackagesToSkipFromThisJob)" SkipPublish="true" Condition="'$(DotNetBuildOrchestrator)' != 'true'" />
    <Artifact Update="@(PackagesToSkipFromThisJob)" Visibility="Vertical" Condition="'$(DotNetBuildOrchestrator)' == 'true'" />
  </ItemGroup>

  <!-- Include any additional packages specified by the job here. -->
  <Target Name="IncludeAdditionalSpecificPackages" BeforeTargets="BeforePublish" Inputs="@(AdditionalSpecificPackagesToPublish)" Outputs="@(AdditionalSpecificPackagesToPublish->'%(Identity).batching')">
    <ItemGroup>
      <Artifact Condition="$([System.String]::new('%(Filename)').StartsWith('%(AdditionalSpecificPackagesToPublish.Identity)'))"
                SkipPublish="false"
                Visibility="$(DefaultArtifactVisibility)" />
    </ItemGroup>
  </Target>

  <!-- Set the subpath of workloads zip files -->
  <ItemGroup>
    <Artifact Update="$(ArtifactsPackagesDir)**\Workload.VSDrop.*.zip" SubBlobFolder="workloads" />
  </ItemGroup>

  <Target Name="GetNonStableProductVersion">
    <!-- Retrieve the non-stable runtime pack product version.
         Don't stabilize the package version in order to retrieve the VersionSuffix. -->
    <MSBuild Projects="$(RepoRoot)src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Runtime.CoreCLR.sfxproj"
             Targets="ReturnProductVersion"
             Properties="IsShipping=false;
                         Crossgen2SdkOverridePropsPath=;
                         Crossgen2SdkOverrideTargetsPath=">
      <Output TaskParameter="TargetOutputs" PropertyName="NonStableProductVersion" />
    </MSBuild>
  </Target>

  <!--
    Only generate the productVersion.txt and runtime-productVersion.txt files when we're building
    either the full VMR repo or not building in the VMR infrastructure.
    This ensures that we don't produce these files in the "Repo source build" builds,
    but we do produce them in both the VMR and the runtime official build.
  -->
  <PropertyGroup>
    <ShouldGenerateProductVersionFiles Condition="'$(DotNetBuildOrchestrator)' == 'true'">true</ShouldGenerateProductVersionFiles>
  </PropertyGroup>

  <Target Name="GenerateProductVersionFiles"
          DependsOnTargets="GetNonStableProductVersion"
          BeforeTargets="PublishToAzureDevOpsArtifacts"
          Condition="'$(ShouldGenerateProductVersionFiles)' == 'true'">
    <!-- Retrieve the runtime pack product version. -->
    <MSBuild Projects="$(RepoRoot)src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Runtime.CoreCLR.sfxproj"
             Targets="ReturnProductVersion"
             Properties="Crossgen2SdkOverridePropsPath=;
                         Crossgen2SdkOverrideTargetsPath=">
      <Output TaskParameter="TargetOutputs" PropertyName="ProductVersionForVersionsFile" />
    </MSBuild>

    <ItemGroup>
      <ProductVersionFile Include="$(ArtifactsShippingPackagesDir)productVersion.txt" />
      <ProductVersionFile Include="$(ArtifactsShippingPackagesDir)runtime-productVersion.txt" />
    </ItemGroup>

    <!-- Generate productVersion.txt file containing the product version. -->
    <WriteLinesToFile File="%(ProductVersionFile.Identity)"
                      Lines="$(ProductVersionForVersionsFile)"
                      Overwrite="true"
                      Encoding="ASCII" />

    <ItemGroup>
      <Artifact Include="@(ProductVersionFile)"
                RelativeBlobPath="Runtime/$(NonStableProductVersion)/%(Filename)%(Extension)" />
    </ItemGroup>
  </Target>

  <Target Name="AddRelativeBlobPathToInstallerArtifacts"
          DependsOnTargets="GetNonStableProductVersion"
          BeforeTargets="PublishToAzureDevOpsArtifacts"
          AfterTargets="GenerateChecksumsFromArtifacts">
    <ItemGroup>
      <Artifact Condition="'%(Artifact.PublishFlatContainer)' == 'true' and '%(Artifact.RelativeBlobPath)' == ''"
                RelativeBlobPath="Runtime/$(NonStableProductVersion)/%(Artifact.SubBlobFolder)%(Filename)%(Extension)" />
    </ItemGroup>
  </Target>
</Project>
