parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osSubgroup: ''
  container: ''
  framework: netcoreapp5.0 # Specify the appropriate framework when running release branches (ie netcoreapp3.0 for release/3.0)

### Perf job

### Each perf job depends on a corresponding build job with the same
### buildConfig and archType.

jobs:
- template: /eng/common/templates/job/performance.yml
  parameters:
    # Compute job name from template parameters
    jobName: ${{ format('perfbuild_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
    displayName: ${{ format('Performance {0}{1} {2} {3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
    pool: 
      # Hosted Linux Build Pool
      ${{ if eq(parameters.osGroup, 'Linux') }}:
        pool:  Hosted Ubuntu 1604
        queue: Ubuntu.1804.Amd64.Open
        osGroup: Linux
      # Hosted Windows Build Pool
      ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
        pool: Hosted VS2017
        queue: BuildPool.Windows.10.Amd64.VS2017.Open
        osGroup: Windows_NT

    # Test job depends on the corresponding build job
    dependsOn: ${{ format('build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
      
    ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      extraSetupParameters: -CoreRootDirectory $(Build.SourcesDirectory)\bin\tests\${{ parameters.osGroup }}.${{ parameters.archType }}.Release\Tests\Core_Root -Architecture ${{ parameters.archType }}
    ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      extraSetupParameters: --corerootdirectory $(Build.SourcesDirectory)/bin/tests/${{ parameters.osGroup }}.${{ parameters.archType }}.Release/Tests/Core_Root --architecture ${{ parameters.archType }}

    frameworks:
      - ${{ parameters.framework }}
    steps:
    # Extra steps that will be passed to the performance template and run before sending the job to helix (all of which is done in the template)

    # Download product binaries directory
    - task: DownloadBuildArtifacts@0
      displayName: Download product build
      inputs:
        buildType: current
        downloadType: single
        artifactName: ${{ format('BinDir_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        downloadPath: $(System.ArtifactsDirectory)


    # Populate Product directory
    - task: CopyFiles@2
      displayName: Populate Product directory
      inputs:
        sourceFolder: $(System.ArtifactsDirectory)/${{ format('BinDir_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/bin/Product/${{ parameters.osGroup }}.${{ parameters.archType }}.Release

    # Create Core_Root
    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - script: ./build-test.sh ${{ parameters.buildConfig }} ${{ parameters.archType }} generatelayoutonly
        displayName: Create Core_Root
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      # TODO: add generatelayoutonly to build-test.cmd.
      - script: build-test.cmd ${{ parameters.buildConfig }} ${{ parameters.archType }} skipmanaged skipnative
        displayName: Create Core_Root