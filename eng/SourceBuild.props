<Project>

  <PropertyGroup>
    <GitHubRepositoryName>runtime</GitHubRepositoryName>
  </PropertyGroup>

  <!-- Set up the dotnet/runtime source-build command. -->
  <PropertyGroup>
    <BaseInnerSourceBuildCommand>./build.sh</BaseInnerSourceBuildCommand>

    <SourceBuildPortable>true</SourceBuildPortable>
    <SourceBuildPortable Condition="'$(SourceBuildNonPortable)' == 'true'">false</SourceBuildPortable>

    <!-- If TargetRid not specified, detect RID based on portability. -->
    <TargetRid Condition="'$(TargetRid)' == '' and '$(SourceBuildNonPortable)' == 'true'">$([System.Runtime.InteropServices.RuntimeInformation]::RuntimeIdentifier)</TargetRid>
    <TargetRid Condition="'$(TargetRid)' == ''">$(__DistroRid)</TargetRid>

    <!-- Split e.g. 'fedora.33-x64' into 'fedora.33' and 'x64'. -->
    <_targetRidPlatformIndex>$(TargetRid.LastIndexOf('-'))</_targetRidPlatformIndex>
    <RuntimeOS>$(TargetRid.Substring(0, $(_targetRidPlatformIndex)))</RuntimeOS>
    <TargetArch>$(TargetRid.Substring($(_targetRidPlatformIndex)).TrimStart('-'))</TargetArch>

    <!-- BaseRidOS is an expected known rid in the graph that TargetRid is compatible with. -->
    <BaseRidOS Condition="'$(BaseRidOS)' == ''">linux</BaseRidOS>

    <LogVerbosity Condition="'$(LogVerbosity)' == ''">minimal</LogVerbosity>
  </PropertyGroup>

  <Target Name="GetRuntimeSourceBuildCommandConfiguration"
          BeforeTargets="GetSourceBuildCommandConfiguration">
    <PropertyGroup>
      <InnerBuildArgs>$(InnerBuildArgs) --arch $(TargetArch)</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) --configuration $(Configuration)</InnerBuildArgs>
      <InnerBuildArgs Condition="'$(SourceBuildNonPortable)' == 'true'">$(InnerBuildArgs) --allconfigurations</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) --verbosity $(LogVerbosity)</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) --nodereuse false</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) --warnAsError false</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) --outputrid $(TargetRid)</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) --portablebuild $(SourceBuildPortable)</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) /p:NoPgoOptimize=true</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) /p:KeepNativeSymbols=true</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) /p:RuntimeOS=$(RuntimeOS)</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) /p:BuildDebPackage=false</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) /p:EnableNgenOptimization=false</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) /p:AdditionalRuntimeIdentifierParent=$(BaseRidOS)</InnerBuildArgs>
    </PropertyGroup>
  </Target>

  <Target Name="CategorizeRuntimeSupplementalArtifacts"
          BeforeTargets="GetCategorizedIntermediateNupkgContents">
    <ItemGroup>
      <!--
        Runtime artifacts are too large to fit into a single package (Azure DevOps feeds 500 mb constraint).
        Split large components into separate packages.
      -->
      <IntermediateNupkgArtifactFile Include="$(CurrentRepoSourceBuildArtifactsPackagesDir)Shipping\dotnet-runtime-*.tar.gz" Category="runtime" />

      <IntermediateNupkgArtifactFile Include="$(CurrentRepoSourceBuildArtifactsPackagesDir)Shipping\*Microsoft.DotNet.ILCompiler.*.nupkg" Category="ILCompiler" />

      <IntermediateNupkgArtifactFile
        Include="
          $(CurrentRepoSourceBuildArtifactsPackagesDir)Shipping\dotnet-crossgen2-*.tar.gz;
          $(CurrentRepoSourceBuildArtifactsPackagesDir)Shipping\Microsoft.NETCore.App.Crossgen2.*.nupkg"
        Category="Crossgen2Pack" />
    </ItemGroup>
  </Target>

</Project>
