<Project>
  <PropertyGroup Condition="'$(DisableImplicitFrameworkReferences)' != 'true' and
                            '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and
                            $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), '$(NETCoreAppCurrentVersion)'))">
    <_UseLocalTargetingRuntimePack>true</_UseLocalTargetingRuntimePack>
    <EnableTargetingPackDownload>false</EnableTargetingPackDownload>
    <GenerateErrorForMissingTargetingPacks>false</GenerateErrorForMissingTargetingPacks>
  </PropertyGroup>

  <!-- Add Known* items if the SDK doesn't support the TargetFramework yet. -->
  <ItemGroup Condition="'$(_UseLocalTargetingRuntimePack)' == 'true'">
    <KnownFrameworkReference Include="$(SharedFrameworkName)"
                             DefaultRuntimeFrameworkVersion="$(ProductVersion)"
                             IsTrimmable="true"
                             LatestRuntimeFrameworkVersion="$(ProductVersion)"
                             RuntimeFrameworkName="$(SharedFrameworkName)"
                             RuntimePackNamePatterns="$(SharedFrameworkName).Runtime.**RID**"
                             RuntimePackRuntimeIdentifiers="linux-arm;linux-arm64;linux-musl-arm64;linux-musl-x64;linux-x64;osx-x64;rhel.6-x64;tizen.4.0.0-armel;tizen.5.0.0-armel;win-arm;win-arm64;win-x64;win-x86;ios-arm64;ios-arm;ios-x64;ios-x86;tvos-arm64;tvos-x64;android-arm64;android-arm;android-x64;android-x86;browser-wasm"
                             TargetFramework="$(NetCoreAppCurrent)"
                             TargetingPackName="$(SharedFrameworkName).Ref"
                             TargetingPackVersion="$(ProductVersion)"
                             Condition="'@(KnownFrameworkReference)' == '' or !@(KnownFrameworkReference->AnyHaveMetadataValue('TargetFramework', '$(NetCoreAppCurrent)'))" />
    <KnownAppHostPack Include="$(SharedFrameworkName)" 
                      AppHostPackNamePattern="$(SharedFrameworkName).Host.**RID**"
                      AppHostPackVersion="$(ProductVersion)"
                      AppHostRuntimeIdentifiers="linux-arm;linux-arm64;linux-musl-arm64;linux-musl-x64;linux-x64;osx-x64;rhel.6-x64;tizen.4.0.0-armel;tizen.5.0.0-armel;win-arm;win-arm64;win-x64;win-x86"
                      TargetFramework="$(NetCoreAppCurrent)"
                      Condition="'@(KnownAppHostPack)' == '' or !@(KnownAppHostPack->AnyHaveMetadataValue('TargetFramework', '$(NetCoreAppCurrent)'))" />
    <KnownCrossgen2Pack Include="$(SharedFrameworkName).Crossgen2"
                        TargetFramework="$(NetCoreAppCurrent)"
                        Crossgen2PackNamePattern="$(SharedFrameworkName).Crossgen2.**RID**"
                        Crossgen2PackVersion="$(ProductVersion)"
                        Crossgen2RuntimeIdentifiers="linux-musl-x64;linux-x64;win-x64"
                        Condition="'@(KnownCrossgen2Pack)' == '' or !@(KnownCrossgen2Pack->AnyHaveMetadataValue('TargetFramework', '$(NetCoreAppCurrent)'))" />
  </ItemGroup>

  <!-- .NETCoreApp 2.x DisableImplicitAssemblyReferences support. -->
  <Choose>
    <When Condition="'$(DisableImplicitAssemblyReferences)' == 'true' and
                     '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and
                     $([MSBuild]::VersionLessThan($(TargetFrameworkVersion), '3.0'))">
    <PropertyGroup>
      <MicrosoftNetCoreAppRefPackRefDir>$(PkgMicrosoft_NETCore_App)\ref\netcoreapp$(TargetFrameworkVersion.TrimStart('v'))\</MicrosoftNetCoreAppRefPackRefDir>
    </PropertyGroup>
    <ItemGroup>
      <PackageReference Update="Microsoft.NETCore.App"
                        ExcludeAssets="all"
                        GeneratePathProperty="true" />
    </ItemGroup>
    </When>
  </Choose>

  <!-- Simple name references will be resolved from the targeting pack folders and should never be copied to the output. -->
  <ItemGroup>
    <Reference Update="@(Reference)">
      <Private Condition="'%(Reference.Extension)' != '.dll'">false</Private>
    </Reference>
  </ItemGroup>

  <!-- .NETCoreApp > 2.x DisableImplicitAssemblyReferences support. -->
  <Target Name="RemoveFrameworkReferences"
          BeforeTargets="_HandlePackageFileConflicts"
          AfterTargets="ResolveTargetingPackAssets"
          Condition="'$(DisableImplicitAssemblyReferences)' == 'true' and
                     '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and
                     $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), '3.0'))">
    <!-- Point MicrosoftNetCoreAppRefPackRefDir to the acquired targeting pack to use it later for AssemblySearchPaths resolution. -->
    <PropertyGroup Condition="'$(_UseLocalTargetingRuntimePack)' != 'true'">
      <_NetCoreAppTargetFrameworkIdentifier Condition="$([MSBuild]::VersionLessThan($(TargetFrameworkVersion), '5.0'))">netcoreapp</_NetCoreAppTargetFrameworkIdentifier>
      <_NetCoreAppTargetFrameworkIdentifier Condition="$([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), '5.0'))">net</_NetCoreAppTargetFrameworkIdentifier>
      <MicrosoftNetCoreAppRefPackRefDir>%(ResolvedFrameworkReference.TargetingPackPath)\ref\$(_NetCoreAppTargetFrameworkIdentifier)$(TargetFrameworkVersion.TrimStart('v'))\</MicrosoftNetCoreAppRefPackRefDir>
    </PropertyGroup>
    <ItemGroup>
      <Reference Remove="@(Reference)"
                 Condition="'%(Reference.FrameworkReferenceName)' == '$(SharedFrameworkName)'" />
    </ItemGroup>
  </Target>

  <!-- Add the resolved targeting pack to the assembly search path. -->
  <Target Name="UseTargetingPackForAssemblySearchPaths"
          BeforeTargets="ResolveAssemblyReferences;
                         DesignTimeResolveAssemblyReferences"
          Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'">
    <PropertyGroup>
      <AssemblySearchPaths>$(AssemblySearchPaths);$(MicrosoftNetCoreAppRefPackRefDir.TrimEnd('/\'))</AssemblySearchPaths>
      <DesignTimeAssemblySearchPaths>$(DesignTimeAssemblySearchPaths);$(MicrosoftNetCoreAppRefPackRefDir.TrimEnd('/\'))</DesignTimeAssemblySearchPaths>
    </PropertyGroup>
  </Target>

  <!-- SDK tries to download runtime packs when RuntimeIdentifier is set, remove them from PackageDownload item. -->
  <Target Name="RemoveRuntimePackFromDownloadItem"
          Condition="'$(_UseLocalTargetingRuntimePack)' == 'true'"
          AfterTargets="ProcessFrameworkReferences">
    <ItemGroup>
      <PackageDownload Remove="@(PackageDownload)"
                       Condition="'$(UsePackageDownload)' == 'true' and $([System.String]::Copy('%(Identity)').StartsWith('$(SharedFrameworkName).Runtime'))" />
      <PackageReference Remove="@(PackageReference)"
                        Condition="'$(UsePackageDownload)' != 'true' and $([System.String]::Copy('%(Identity)').StartsWith('$(SharedFrameworkName).Runtime'))" />
    </ItemGroup>
  </Target>

  <!-- Use local targeting pack for NetCoreAppCurrent. -->
  <Target Name="UpdateTargetingAndRuntimePack"
          Condition="'$(_UseLocalTargetingRuntimePack)' == 'true'"
          AfterTargets="ResolveFrameworkReferences">
    <ItemGroup>
      <ResolvedTargetingPack Path="$(MicrosoftNetCoreAppRefPackDir.TrimEnd('/\'))"
                             NuGetPackageVersion="$(ProductVersion)"
                             PackageDirectory="$(MicrosoftNetCoreAppRefPackDir.TrimEnd('/\'))"
                             Condition="'%(ResolvedTargetingPack.RuntimeFrameworkName)' == '$(SharedFrameworkName)' and
                                        Exists('$(MicrosoftNetCoreAppRefPackDataDir)FrameworkList.xml')" />
      <ResolvedRuntimePack PackageDirectory="$(MicrosoftNetCoreAppRuntimePackDir)"
                           Condition="'%(ResolvedRuntimePack.FrameworkName)' == '$(SharedFrameworkName)'" />
      <ResolvedFrameworkReference TargetingPackPath="$(MicrosoftNetCoreAppRefPackDir.TrimEnd('/\'))"
                                  TargetingPackVersion="$(ProductVersion)"
                                  Condition="'%(Identity)' == '$(SharedFrameworkName)'" />
    </ItemGroup>
  </Target>

  <!-- Update the local targeting pack's version as it's written into the runtimeconfig.json file to select the shared framework. -->
  <Target Name="UpdateRuntimeFrameworkVersion"
          Condition="'$(_UseLocalTargetingRuntimePack)' == 'true'"
          AfterTargets="ResolveTargetingPackAssets">
    <ItemGroup>
      <RuntimeFramework Version="$(ProductVersion)"
                        Condition="'%(RuntimeFramework.FrameworkName)' == '$(SharedFrameworkName)'" />
    </ItemGroup>
  </Target>
  
  <!-- Filter out conflicting implicit assembly references. -->
  <Target Name="FilterImplicitAssemblyReferences"
          Condition="'$(DisableImplicitAssemblyReferences)' != 'true'"
          DependsOnTargets="ResolveProjectReferences"
          AfterTargets="ResolveTargetingPackAssets">
    <ItemGroup>
      <_targetingPackReferenceExclusion Include="$(TargetName)" />
      <_targetingPackReferenceExclusion Include="@(_ResolvedProjectReferencePaths->'%(Filename)')" />
      <_targetingPackReferenceExclusion Include="@(DefaultReferenceExclusion)" />
    </ItemGroup>

    <ItemGroup>
      <_targetingPackReferenceWithExclusion Include="@(Reference)">
        <Exclusion>%(_targetingPackReferenceExclusion.Identity)</Exclusion>
      </_targetingPackReferenceWithExclusion>
      <Reference Remove="@(_targetingPackReferenceWithExclusion)"
                 Condition="'%(_targetingPackReferenceWithExclusion.ExternallyResolved)' == 'true' and '%(_targetingPackReferenceWithExclusion.Filename)' == '%(_targetingPackReferenceWithExclusion.Exclusion)'" />
    </ItemGroup>
  </Target>
</Project>
