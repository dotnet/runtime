<!--
  The following properties need to be set for this logic to work correctly:
  - ProductVersion
  - NetCoreAppCurrent
  - NetCoreAppCurrentVersion
  - MicrosoftNetCoreAppFrameworkName
  - MicrosoftNetCoreAppRefPackDir
  - optional: MicrosoftNetCoreAppRuntimePackDir
  - optional: AppHostSourcePath & SingleFileHostSourcePath
-->

<Project>
  <PropertyGroup>
    <LocalFrameworkOverrideName>$(MicrosoftNetCoreAppFrameworkName)</LocalFrameworkOverrideName>
    <TargetingpacksTargetsImported>true</TargetingpacksTargetsImported>
  </PropertyGroup>

  <PropertyGroup Condition="'$(DisableImplicitFrameworkReferences)' != 'true' and
                            '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and
                            '$(TargetFrameworkVersion)' == 'v$(NetCoreAppCurrentVersion)'">
    <UseLocalTargetingRuntimePack Condition="'$(UseLocalTargetingRuntimePack)' == ''">true</UseLocalTargetingRuntimePack>
    <UseLocalAppHostPack Condition="'$(UseLocalAppHostPack)' == ''">$(UseLocalTargetingRuntimePack)</UseLocalAppHostPack>
    <EnableTargetingPackDownload>false</EnableTargetingPackDownload>
    <!-- TODO: Enable when a 8.0.100 SDK is consumed
    <EnableRuntimePackDownload>false</EnableRuntimePackDownload>
    <EnableAppHostPackDownload>false</EnableAppHostPackDownload>
    -->
    <GenerateErrorForMissingTargetingPacks>false</GenerateErrorForMissingTargetingPacks>
  </PropertyGroup>

  <!-- Add Known* items if the SDK doesn't support the TargetFramework yet. -->
  <ItemGroup Condition="'$(UseLocalTargetingRuntimePack)' == 'true'">
    <KnownFrameworkReference Include="$(LocalFrameworkOverrideName)"
                             DefaultRuntimeFrameworkVersion="$(ProductVersion)"
                             LatestRuntimeFrameworkVersion="$(ProductVersion)"
                             RuntimeFrameworkName="$(LocalFrameworkOverrideName)"
                             RuntimePackNamePatterns="$(LocalFrameworkOverrideName).Runtime.**RID**"
                             RuntimePackRuntimeIdentifiers="linux-arm;linux-arm64;linux-musl-arm64;linux-musl-x64;linux-x64;osx-x64;rhel.6-x64;tizen.4.0.0-armel;tizen.5.0.0-armel;win-arm64;win-x64;win-x86;linux-musl-arm;osx-arm64;maccatalyst-x64;maccatalyst-arm64;linux-s390x;linux-bionic-arm;linux-bionic-arm64;linux-bionic-x64;linux-bionic-x86"
                             TargetFramework="$(NetCoreAppCurrent)"
                             TargetingPackName="$(LocalFrameworkOverrideName).Ref"
                             TargetingPackVersion="$(ProductVersion)"
                             Condition="'@(KnownFrameworkReference)' == '' or !@(KnownFrameworkReference->AnyHaveMetadataValue('TargetFramework', '$(NetCoreAppCurrent)'))" />
    <KnownRuntimePack Include="$(LocalFrameworkOverrideName)"
                      TargetFramework="$(NetCoreAppCurrent)"
                      RuntimeFrameworkName="$(LocalFrameworkOverrideName)"
                      LatestRuntimeFrameworkVersion="$(ProductVersion)"
                      RuntimePackNamePatterns="$(LocalFrameworkOverrideName).Runtime.Mono.**RID**"
                      RuntimePackRuntimeIdentifiers="linux-arm;linux-arm64;linux-musl-arm64;linux-musl-x64;linux-x64;osx-x64;rhel.6-x64;win-arm64;win-x64;win-x86;linux-musl-arm;osx-arm64;maccatalyst-x64;maccatalyst-arm64;linux-s390x;linux-bionic-arm;linux-bionic-arm64;linux-bionic-x64;linux-bionic-x86;browser-wasm;wasi-wasm;ios-arm64;iossimulator-arm64;iossimulator-x64;tvos-arm64;tvossimulator-arm64;tvossimulator-x64;android-arm64;android-arm;android-x64;android-x86"
                      RuntimePackLabels="Mono"
                      Condition="'@(KnownRuntimePack)' == '' or !@(KnownRuntimePack->AnyHaveMetadataValue('TargetFramework', '$(NetCoreAppCurrent)'))"/>
    <KnownCrossgen2Pack Include="$(LocalFrameworkOverrideName).Crossgen2"
                        TargetFramework="$(NetCoreAppCurrent)"
                        Crossgen2PackNamePattern="$(LocalFrameworkOverrideName).Crossgen2.**RID**"
                        Crossgen2PackVersion="$(ProductVersion)"
                        Crossgen2RuntimeIdentifiers="linux-musl-x64;linux-x64;win-x64;linux-arm;linux-arm64;linux-musl-arm;linux-musl-arm64;osx-arm64;osx-x64;win-arm64;win-x86"
                        Condition="'@(KnownCrossgen2Pack)' == '' or !@(KnownCrossgen2Pack->AnyHaveMetadataValue('TargetFramework', '$(NetCoreAppCurrent)'))" />
    <KnownILCompilerPack Include="Microsoft.DotNet.ILCompiler"
                         ILCompilerPackNamePattern="runtime.**RID**.Microsoft.DotNet.ILCompiler"
                         TargetFramework="$(NetCoreAppCurrent)"
                         ILCompilerPackVersion="$(ProductVersion)"
                         ILCompilerRuntimeIdentifiers="linux-musl-x64;linux-x64;win-x64;linux-arm;linux-arm64;linux-musl-arm;linux-musl-arm64;osx-arm64;osx-x64;win-arm64;win-x86"
                         Condition="'@(KnownILCompilerPack)' == '' or !@(KnownILCompilerPack->AnyHaveMetadataValue('TargetFramework', '$(NetCoreAppCurrent)'))" />
  </ItemGroup>

  <ItemGroup Condition="'$(UseLocalAppHostPack)' == 'true'">
    <KnownAppHostPack Include="$(LocalFrameworkOverrideName)"
                      ExcludedRuntimeIdentifiers="android"
                      AppHostPackNamePattern="$(LocalFrameworkOverrideName).Host.**RID**"
                      AppHostPackVersion="$(ProductVersion)"
                      AppHostRuntimeIdentifiers="linux-arm;linux-arm64;linux-musl-arm64;linux-musl-x64;linux-x64;osx-x64;rhel.6-x64;tizen.4.0.0-armel;tizen.5.0.0-armel;win-arm64;win-x64;win-x86;linux-musl-arm;osx-arm64;linux-s390x;linux-bionic-arm;linux-bionic-arm64;linux-bionic-x64;linux-bionic-x86"
                      TargetFramework="$(NetCoreAppCurrent)"
                      Condition="'@(KnownAppHostPack)' == '' or !@(KnownAppHostPack->AnyHaveMetadataValue('TargetFramework', '$(NetCoreAppCurrent)'))" />
  </ItemGroup>

  <!-- Simple name references will be resolved from the targeting pack folders and should never be copied to the output. -->
  <ItemGroup>
    <Reference Update="@(Reference)">
      <Private Condition="'%(Reference.Extension)' != '.dll'">false</Private>
    </Reference>
  </ItemGroup>

  <!-- Add the resolved targeting pack to the assembly search path. -->
  <Target Name="UseTargetingPackForAssemblySearchPaths"
          BeforeTargets="ResolveAssemblyReferences;
                         DesignTimeResolveAssemblyReferences"
          Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' and
                     '$(TargetFrameworkVersion)' == 'v$(NetCoreAppCurrentVersion)' and
                     '$(DisableImplicitFrameworkReferences)' == 'true'">
    <PropertyGroup>
      <AssemblySearchPaths>$(AssemblySearchPaths);$(MicrosoftNetCoreAppRefPackRefDir.TrimEnd('/\'))</AssemblySearchPaths>
      <DesignTimeAssemblySearchPaths>$(DesignTimeAssemblySearchPaths);$(MicrosoftNetCoreAppRefPackRefDir.TrimEnd('/\'))</DesignTimeAssemblySearchPaths>
    </PropertyGroup>
  </Target>

  <!-- 
    SDK tries to download runtime packs when RuntimeIdentifier is set, remove them from PackageDownload item.
    TODO: Remove this target when an 8.0.100 SDK is consumed that respects EnableRuntimePackDownload.
   -->
  <Target Name="RemoveRuntimePackFromDownloadItem"
          Condition="'$(UseLocalTargetingRuntimePack)' == 'true'"
          AfterTargets="ProcessFrameworkReferences">
    <ItemGroup>
      <PackageDownload Remove="@(PackageDownload)"
                       Condition="'$(UsePackageDownload)' == 'true' and $([System.String]::Copy('%(Identity)').StartsWith('$(LocalFrameworkOverrideName).Runtime'))" />
      <PackageReference Remove="@(PackageReference)"
                        Condition="'$(UsePackageDownload)' != 'true' and $([System.String]::Copy('%(Identity)').StartsWith('$(LocalFrameworkOverrideName).Runtime'))" />
      <PackageDownload Remove="@(PackageDownload)"
                       Condition="'$(UsePackageDownload)' == 'true' and $([System.String]::Copy('%(Identity)').EndsWith('Microsoft.DotNet.ILCompiler'))" />
      <PackageReference Remove="@(PackageReference)"
                        Condition="'$(UsePackageDownload)' != 'true' and $([System.String]::Copy('%(Identity)').EndsWith('Microsoft.DotNet.ILCompiler'))" />
    </ItemGroup>
  </Target>

  <!-- 
    TODO: Remove this target when an 8.0.100 SDK is consumed that respects EnableAppHostPackDownload.
   -->
  <Target Name="RemoveAppHostPackFromDownloadItem"
          Condition="'$(UseLocalAppHostPack)' == 'true'"
          AfterTargets="ProcessFrameworkReferences">
    <ItemGroup>
      <PackageDownload Remove="@(PackageDownload)"
                       Condition="'$(UsePackageDownload)' == 'true' and $([System.String]::Copy('%(Identity)').StartsWith('$(LocalFrameworkOverrideName).Host'))" />
      <PackageReference Remove="@(PackageReference)"
                        Condition="'$(UsePackageDownload)' != 'true' and $([System.String]::Copy('%(Identity)').StartsWith('$(LocalFrameworkOverrideName).Host'))" />
    </ItemGroup>
  </Target>

  <!-- Use local targeting/runtime pack for NetCoreAppCurrent. -->
  <Target Name="UpdateLocalTargetingAndRuntimePack"
          Condition="'$(UseLocalTargetingRuntimePack)' == 'true'"
          AfterTargets="ResolveFrameworkReferences">
    <Error Text="The shared framework must be built before the local targeting pack can be consumed."
           Condition="!Exists('$(MicrosoftNetCoreAppRefPackDir)data\FrameworkList.xml')" />
    
    <ItemGroup>
      <ResolvedTargetingPack Path="$(MicrosoftNetCoreAppRefPackDir.TrimEnd('/\'))"
                             NuGetPackageVersion="$(ProductVersion)"
                             PackageDirectory="$(MicrosoftNetCoreAppRefPackDir.TrimEnd('/\'))"
                             Condition="'%(ResolvedTargetingPack.RuntimeFrameworkName)' == '$(LocalFrameworkOverrideName)'" />
      <ResolvedRuntimePack PackageDirectory="$(MicrosoftNetCoreAppRuntimePackDir)"
                           Condition="'$(MicrosoftNetCoreAppRuntimePackDir)' != '' and
                                      '%(ResolvedRuntimePack.FrameworkName)' == '$(LocalFrameworkOverrideName)'" />
      <ResolvedFrameworkReference TargetingPackPath="$(MicrosoftNetCoreAppRefPackDir.TrimEnd('/\'))"
                                  TargetingPackVersion="$(ProductVersion)"
                                  Condition="'%(Identity)' == '$(LocalFrameworkOverrideName)'">
        <RuntimePackPath Condition="'$(MicrosoftNetCoreAppRuntimePackDir)' != ''">$(MicrosoftNetCoreAppRuntimePackDir)</RuntimePackPath>
      </ResolvedFrameworkReference>
    </ItemGroup>
  </Target>

  <!-- Use local app host pack for NetCoreAppCurrent. -->
  <Target Name="UpdateLocalAppHostPack"
          Condition="'$(UseLocalAppHostPack)' == 'true'"
          AfterTargets="ResolveFrameworkReferences">
    <ItemGroup>
      <ResolvedAppHostPack Path="$(AppHostSourcePath)"
                           PackageDirectory="$([System.IO.Path]::GetDirectoryName('$(AppHostSourcePath)'))"
                           PathInPackage="$([System.IO.Path]::GetFileName('$(AppHostSourcePath)'))"
                           Condition="'$(AppHostSourcePath)' != ''" />
      <ResolvedSingleFileHostPack Path="$(SingleFileHostSourcePath)"
                                  PackageDirectory="$([System.IO.Path]::GetDirectoryName('$(SingleFileHostSourcePath)'))"
                                  PathInPackage="$([System.IO.Path]::GetFileName('$(SingleFileHostSourcePath)'))"
                                  Condition="'$(SingleFileHostSourcePath)' != ''" />
    </ItemGroup>
  </Target>

  <!-- Update the local targeting pack's version as it's written into the runtimeconfig.json file to select the right framework. -->
  <Target Name="UpdateRuntimeFrameworkVersion"
          Condition="'$(UseLocalTargetingRuntimePack)' == 'true'"
          AfterTargets="ResolveTargetingPackAssets">
    <ItemGroup>
      <RuntimeFramework Version="$(ProductVersion)"
                        Condition="'%(RuntimeFramework.FrameworkName)' == '$(LocalFrameworkOverrideName)'" />
    </ItemGroup>
  </Target>
</Project>
