<Project>

  <PropertyGroup>
    <EnableLibraryImportGenerator Condition="'$(EnableLibraryImportGenerator)' == ''
                        and '$(MSBuildProjectName)' == 'System.Private.CoreLib'">true</EnableLibraryImportGenerator>
    <IncludeLibraryImportGeneratorSources Condition="'$(IncludeLibraryImportGeneratorSources)' == ''">true</IncludeLibraryImportGeneratorSources>
  </PropertyGroup>
  <ItemGroup>
    <EnabledGenerators Include="LibraryImportGenerator" Condition="'$(EnableLibraryImportGenerator)' == 'true'" />
    <!-- If the current project is not System.Private.CoreLib, we enable the LibraryImportGenerator source generator
         when the project is a C# source project that either:
         - references System.Private.CoreLib, or
         - references System.Runtime.InteropServices -->
    <EnabledGenerators Include="LibraryImportGenerator"
                       Condition="'$(EnableLibraryImportGenerator)' == ''
                        and '$(IsSourceProject)' == 'true'
                        and '$(MSBuildProjectExtension)' == '.csproj'
                        and (
                          ('@(Reference)' != ''
                            and @(Reference->AnyHaveMetadataValue('Identity', 'System.Runtime.InteropServices')))
                          or ('@(ProjectReference)' != ''
                            and @(ProjectReference->AnyHaveMetadataValue('Identity', '$(CoreLibProject)')))
                          or ('$(NetCoreAppCurrentTargetFrameworkMoniker)' == '$(TargetFrameworkMoniker)'
                            and '$(DisableImplicitAssemblyReferences)' == 'false'))" />
    <EnabledGenerators Include="LibraryImportGenerator"
                       Condition="'$(EnableLibraryImportGenerator)' == ''
                        and '$(IsSourceProject)' == 'true'
                        and '$(MSBuildProjectExtension)' == '.csproj'
                        and ('$(TargetFrameworkIdentifier)' == '.NETStandard' or '$(TargetFrameworkIdentifier)' == '.NETFramework' or ('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionLessThan($(TargetFrameworkVersion), '$(NetCoreAppCurrentVersion)'))))" />
  </ItemGroup>

  <!-- Use this complex ItemGroup-based filtering to add the ProjectReference to make sure dotnet/runtime stays compatible with NuGet Static Graph Restore. -->
  <ItemGroup Condition="'@(EnabledGenerators)' != ''
                        and @(EnabledGenerators->AnyHaveMetadataValue('Identity', 'LibraryImportGenerator'))">
    <ProjectReference
      Include="$(LibrariesProjectRoot)System.Runtime.InteropServices\gen\LibraryImportGenerator\LibraryImportGenerator.csproj"
      OutputItemType="Analyzer"
      ReferenceOutputAssembly="false" />
    <ProjectReference
      Include="$(LibrariesProjectRoot)System.Runtime.InteropServices\gen\Microsoft.Interop.SourceGeneration\Microsoft.Interop.SourceGeneration.csproj"
      OutputItemType="Analyzer"
      ReferenceOutputAssembly="false" />
  </ItemGroup>
  <ItemGroup Condition="'@(EnabledGenerators)' != ''
                        and @(EnabledGenerators->AnyHaveMetadataValue('Identity', 'LibraryImportGenerator'))
                        and '$(IncludeLibraryImportGeneratorSources)' == 'true'">

    <!-- Only add the following files if we are not on the latest TFM. -->
    <Compile Condition="'$(NetCoreAppCurrentTargetFrameworkMoniker)' != '$(TargetFrameworkMoniker)'"
             Include="$(CoreLibSharedDir)System\Runtime\InteropServices\LibraryImportAttribute.cs" />
    <Compile Condition="'$(NetCoreAppCurrentTargetFrameworkMoniker)' != '$(TargetFrameworkMoniker)'"
             Include="$(CoreLibSharedDir)System\Runtime\InteropServices\StringMarshalling.cs" />

    <!-- Only add the following files if we are on the latest TFM (that is, net7) and the project is SPCL or has references to System.Runtime.CompilerServices.Unsafe and System.Memory -->
    <Compile Condition="'$(NetCoreAppCurrentTargetFrameworkMoniker)' == '$(TargetFrameworkMoniker)'
                        and (
                          '$(MSBuildProjectName)' == 'System.Private.CoreLib'
                          or '$(EnableLibraryImportGenerator)' == 'true'
                          or ('@(Reference)' != ''
                            and @(Reference->AnyHaveMetadataValue('Identity', 'System.Memory')))
                          or ('@(ProjectReference)' != ''
                            and @(ProjectReference->AnyHaveMetadataValue('Identity', '$(CoreLibProject)'))))" Include="$(LibrariesProjectRoot)Common\src\System\Runtime\InteropServices\ArrayMarshaller.cs" />
  </ItemGroup>

  <ItemGroup>
    <EnabledGenerators Include="RegexGenerator" Condition="'$(EnableRegexGenerator)' == 'true'" />
  </ItemGroup>

  <!-- Use this complex ItemGroup-based filtering to add the ProjectReference to make sure dotnet/runtime stays compatible with NuGet Static Graph Restore. -->
  <ItemGroup Condition="'@(EnabledGenerators)' != ''
                        and @(EnabledGenerators->AnyHaveMetadataValue('Identity', 'RegexGenerator'))">
    <ProjectReference
      Include="$(LibrariesProjectRoot)System.Text.RegularExpressions/gen/System.Text.RegularExpressions.Generator.csproj"
      OutputItemType="Analyzer"
      ReferenceOutputAssembly="false" />
  </ItemGroup>

  <Target Name="ConfigureGenerators"
          DependsOnTargets="ConfigureLibraryImportGenerator"
          BeforeTargets="CoreCompile" />

  <!-- Microsoft.Interop.LibraryImportGenerator -->
  <Target Name="ConfigureLibraryImportGenerator"
          Condition="'@(EnabledGenerators)' != '' and @(EnabledGenerators->AnyHaveMetadataValue('Identity', 'LibraryImportGenerator'))"
          DependsOnTargets="ResolveProjectReferences"
          BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun">
    <PropertyGroup>
        <LibraryImportGenerator_UseMarshalType>true</LibraryImportGenerator_UseMarshalType>
    </PropertyGroup>
  </Target>

  <Import Project="$(LibrariesProjectRoot)System.Runtime.InteropServices/gen/LibraryImportGenerator/Microsoft.Interop.LibraryImportGenerator.props" />
</Project>
