<Project>
  <!-- Accept override paths for live artifacts. -->
  <PropertyGroup>
    <CoreCLRArtifactsPath Condition="'$(CoreCLROverridePath)' != ''">$([MSBuild]::NormalizeDirectory('$(CoreCLROverridePath)'))</CoreCLRArtifactsPath>
    <MonoArtifactsPath Condition="'$(MonoOverridePath)' != ''">$([MSBuild]::NormalizeDirectory('$(MonoOverridePath)'))</MonoArtifactsPath>
    <LibrariesArtifactsPath Condition="'$(LibrariesOverridePath)' != ''">$([MSBuild]::NormalizeDirectory('$(LibrariesOverridePath)'))</LibrariesArtifactsPath>
    <LibrariesAllConfigurationsArtifactsPath Condition="'$(LibrariesAllConfigurationsOverridePath)' != ''">$([MSBuild]::NormalizeDirectory('$(LibrariesAllConfigurationsOverridePath)'))</LibrariesAllConfigurationsArtifactsPath>

    <!-- Honor the RuntimeArtifactsPath property. -->
    <CoreCLRArtifactsPath Condition="'$(CoreCLRArtifactsPath)' == '' and '$(RuntimeArtifactsPath)' != ''">$([MSBuild]::NormalizeDirectory('$(RuntimeArtifactsPath)'))</CoreCLRArtifactsPath>
    <MonoArtifactsPath Condition="'$(MonoArtifactsPath)' == '' and '$(RuntimeArtifactsPath)' != ''">$([MSBuild]::NormalizeDirectory('$(RuntimeArtifactsPath)'))</MonoArtifactsPath>
    <LibrariesTargetOSConfigurationArchitecture Condition="'$(LibrariesTargetOSConfigurationArchitecture)' == ''">$(TargetOS)-$(LibrariesConfiguration)-$(TargetArchitecture)</LibrariesTargetOSConfigurationArchitecture>
  </PropertyGroup>

  <!-- Set up default live asset paths if no overrides provided. -->
  <PropertyGroup>
    <CoreCLRArtifactsPath Condition="'$(CoreCLRArtifactsPath)' == ''">$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'artifacts', 'bin', 'coreclr', '$(TargetOS).$(TargetArchitecture).$(CoreCLRConfiguration)'))</CoreCLRArtifactsPath>
    <MonoArtifactsPath Condition="'$(MonoArtifactsPath)' == ''">$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'artifacts', 'bin', 'mono', '$(TargetOS).$(TargetArchitecture).$(MonoConfiguration)'))</MonoArtifactsPath>
    <LibrariesArtifactsPath Condition="'$(LibrariesArtifactsPath)' == ''">$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'artifacts'))</LibrariesArtifactsPath>
    <LibrariesAllConfigurationsArtifactsPath Condition="'$(LibrariesAllConfigurationsArtifactsPath)' == ''">$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'artifacts'))</LibrariesAllConfigurationsArtifactsPath>
  </PropertyGroup>

  <!-- Set up artifact subpaths. -->
  <PropertyGroup>
    <CoreCLRSharedFrameworkDir>$([MSBuild]::NormalizeDirectory('$(CoreCLRArtifactsPath)', 'sharedFramework'))</CoreCLRSharedFrameworkDir>
    <CoreCLRCrossgen2Dir>$([MSBuild]::NormalizeDirectory('$(CoreCLRArtifactsPath)', 'crossgen2'))</CoreCLRCrossgen2Dir>

    <MonoCrossAOTDir>$([MSBuild]::NormalizeDirectory('$(MonoArtifactsPath)', 'cross'))</MonoCrossAOTDir>

    <LibrariesPackagesDir>$([MSBuild]::NormalizeDirectory('$(LibrariesArtifactsPath)', 'packages', '$(LibrariesConfiguration)'))</LibrariesPackagesDir>
    <LibrariesShippingPackagesDir>$([MSBuild]::NormalizeDirectory('$(LibrariesPackagesDir)', 'Shipping'))</LibrariesShippingPackagesDir>
    <LibrariesNonShippingPackagesDir>$([MSBuild]::NormalizeDirectory('$(LibrariesPackagesDir)', 'NonShipping'))</LibrariesNonShippingPackagesDir>

    <LibrariesAllConfigPackagesDir>$([MSBuild]::NormalizeDirectory('$(LibrariesAllConfigurationsArtifactsPath)', 'packages', '$(LibrariesConfiguration)'))</LibrariesAllConfigPackagesDir>
    <LibrariesAllConfigShippingPackagesDir>$([MSBuild]::NormalizeDirectory('$(LibrariesAllConfigPackagesDir)', 'Shipping'))</LibrariesAllConfigShippingPackagesDir>
    <LibrariesAllConfigNonShippingPackagesDir>$([MSBuild]::NormalizeDirectory('$(LibrariesAllConfigPackagesDir)', 'NonShipping'))</LibrariesAllConfigNonShippingPackagesDir>

    <LibrariesSharedFrameworkRefArtifactsPath Condition="'$(LibrariesSharedFrameworkRefArtifactsPath)' == ''">$([MSBuild]::NormalizeDirectory('$(LibrariesArtifactsPath)', 'bin', 'ref', 'microsoft.netcore.app', '$(LibrariesConfiguration)'))</LibrariesSharedFrameworkRefArtifactsPath>
    <LibrariesAllRefArtifactsPath Condition="'$(LibrariesAllRefArtifactsPath)' == ''">$([MSBuild]::NormalizeDirectory('$(LibrariesArtifactsPath)', 'bin', 'ref', '$(NetCoreAppCurrent)'))</LibrariesAllRefArtifactsPath>
    <LibrariesSharedFrameworkBinArtifactsPath Condition="'$(LibrariesSharedFrameworkBinArtifactsPath)' == ''">$([MSBuild]::NormalizeDirectory('$(LibrariesArtifactsPath)', 'bin', 'pkg', '$(NetCoreAppCurrent)', 'runtime'))$(LibrariesTargetOSConfigurationArchitecture)\</LibrariesSharedFrameworkBinArtifactsPath>
    <LibrariesAllBinArtifactsPath Condition="'$(LibrariesAllBinArtifactsPath)' == ''">$([MSBuild]::NormalizeDirectory('$(LibrariesArtifactsPath)', 'bin', 'runtime'))$(NetCoreAppCurrent)-$(LibrariesTargetOSConfigurationArchitecture)\</LibrariesAllBinArtifactsPath>
    <LibrariesNativeArtifactsPath Condition="'$(LibrariesNativeArtifactsPath)' == ''">$([MSBuild]::NormalizeDirectory('$(LibrariesArtifactsPath)', 'bin', 'native'))$(NetCoreAppCurrent)-$(LibrariesTargetOSConfigurationArchitecture)\</LibrariesNativeArtifactsPath>

    <CoreCLRCrossTargetComponentDirName Condition="'$(TargetArchitecture)' == 'arm64' and '$(BuildArchitecture)' != 'arm64'">x64</CoreCLRCrossTargetComponentDirName>
    <CoreCLRCrossTargetComponentDirName Condition="'$(TargetArchitecture)' == 'arm' and '$(BuildArchitecture)' != 'arm' and '$(TargetsWindows)' == 'true'">x86</CoreCLRCrossTargetComponentDirName>
    <CoreCLRCrossTargetComponentDirName Condition="'$(TargetArchitecture)' == 'arm' and '$(BuildArchitecture)' != 'arm' and '$(TargetsLinux)' == 'true'">x64</CoreCLRCrossTargetComponentDirName>
    <CoreCLRCrossTargetComponentDirName Condition="'$(TargetArchitecture)' == 'armel' and '$(BuildArchitecture)' != 'armel' and '$(TargetsLinux)' == 'true'">x64</CoreCLRCrossTargetComponentDirName>
  </PropertyGroup>

  <Target Name="ResolveRuntimeFilesFromLocalBuild">
    <Error Condition="!Exists('$(CoreCLRArtifactsPath)') and '$(RuntimeFlavor)' == 'CoreCLR'" Text="The CoreCLR artifacts path does not exist '$(CoreCLRArtifactsPath)'. The 'clr' subset must be built before building this project." />
    <Error Condition="!Exists('$(MonoArtifactsPath)') and '$(RuntimeFlavor)' == 'Mono'" Text="The Mono artifacts path does not exist '$(MonoArtifactsPath)'. The 'mono' subset must be built before building this project." />

    <PropertyGroup Condition="'$(RuntimeFlavor)' == 'CoreCLR'">
      <CoreCLRArtifactsPath>$([MSBuild]::NormalizeDirectory('$(CoreCLRArtifactsPath)'))</CoreCLRArtifactsPath>
      <CoreCLRArtifactsPdbDir>$([MSBuild]::NormalizeDirectory('$(CoreCLRArtifactsPath)','PDB'))</CoreCLRArtifactsPdbDir>
      <!--
        Even though CoreCLRSharedFrameworkDir is statically initialized, set it again in case the
        value is different after CoreCLRArtifactsPath is normalized.
      -->
      <CoreCLRSharedFrameworkDir>$([MSBuild]::NormalizeDirectory('$(CoreCLRArtifactsPath)','sharedFramework'))</CoreCLRSharedFrameworkDir>
      <CoreCLRSharedFrameworkPdbDir>$([MSBuild]::NormalizeDirectory('$(CoreCLRSharedFrameworkDir)','PDB'))</CoreCLRSharedFrameworkPdbDir>
      <CoreCLRCrossTargetComponentDir
        Condition="'$(CoreCLRCrossTargetComponentDirName)' != ''">$([MSBuild]::NormalizeDirectory('$(CoreCLRArtifactsPath)','$(CoreCLRCrossTargetComponentDirName)','sharedFramework'))</CoreCLRCrossTargetComponentDir>
    </PropertyGroup>
    <PropertyGroup Condition="'$(RuntimeFlavor)' == 'Mono'">
      <MonoArtifactsPath>$([MSBuild]::NormalizeDirectory('$(MonoArtifactsPath)'))</MonoArtifactsPath>
    </PropertyGroup>

    <ItemGroup Condition="'$(RuntimeFlavor)' == 'CoreCLR'">
      <RuntimeFiles Include="$(CoreCLRSharedFrameworkDir)*.*" />
      <CoreCLRCrossTargetFiles Condition="'$(CoreCLRCrossTargetComponentDir)' != ''" Include="$(CoreCLRCrossTargetComponentDir)*.*" IsNative="true" />
      <RuntimeFiles Include="$(CoreCLRArtifactsPath)Redist/**/*.dll" />
      <RuntimeFiles>
        <IsNative>true</IsNative>
      </RuntimeFiles>
      <_systemPrivateCoreLib Include="$(CoreCLRArtifactsPath)System.Private.CoreLib.dll"
                             Condition="Exists('$(CoreCLRArtifactsPath)System.Private.CoreLib.dll')" />
      <_systemPrivateCoreLib Include="$(CoreCLRArtifactsPath)IL/System.Private.CoreLib.dll"
                             Condition="Exists('$(CoreCLRArtifactsPath)IL/System.Private.CoreLib.dll') and '@(_systemPrivateCoreLib)' == ''" />
      <RuntimeFiles Include="@(_systemPrivateCoreLib)" />
      <RuntimeFiles
        Include="
          $(CoreCLRSharedFrameworkPdbDir)*.pdb;
          $(CoreCLRSharedFrameworkPdbDir)*.dbg;
          $(CoreCLRSharedFrameworkPdbDir)*.dwarf" IsNative="true" />
      <RuntimeFiles
        Include="$(CoreCLRArtifactsPdbDir)System.Private.CoreLib.pdb" />
      <RuntimeFiles Condition="Exists('$(CoreCLRArtifactsPdbDir)System.Private.CoreLib.ni.pdb')"
        Include="$(CoreCLRArtifactsPdbDir)System.Private.CoreLib.ni.pdb" />

      <CoreCLRCrossTargetFiles Condition="'$(CoreCLRCrossTargetComponentDir)' != ''"
        Include="
          $(CoreCLRSharedFrameworkPdbDir)*.pdb;
          $(CoreCLRSharedFrameworkPdbDir)*.dbg;
          $(CoreCLRSharedFrameworkPdbDir)*.dwarf" />

      <CoreCLRCrossTargetFiles>
        <TargetPath>runtime/$(CoreCLRCrossTargetComponentDirName)_$(TargetArchitecture)/native</TargetPath>
        <IsNative>true</IsNative>
      </CoreCLRCrossTargetFiles>
    </ItemGroup>
    <ItemGroup Condition="'$(RuntimeFlavor)' == 'Mono'">
      <RuntimeFiles Include="$(MonoArtifactsPath)\*.*" />
      <RuntimeFiles>
        <IsNative>true</IsNative>
      </RuntimeFiles>

      <MonoCrossFiles Condition="'$(TargetsMobile)' == 'true'"
        Include="$(MonoArtifactsPath)\cross\**\*.*" />
      <MonoIncludeFiles Condition="'$(TargetsMobile)' == 'true'"
        Include="$(MonoArtifactsPath)\include\**\*.*" />
    </ItemGroup>

    <Error Condition="'@(RuntimeFiles)' == ''" Text="The '$(RuntimeFlavor)' subset must be built before building this project." />
  </Target>

  <Target Name="EnsureLocalArtifactsExist">
    <Error Condition="!Exists('$(LibrariesSharedFrameworkRefArtifactsPath)')" Text="The 'libs' subset must be built before building this project. Missing artifacts: $(LibrariesSharedFrameworkRefArtifactsPath)" />
    <Error Condition="'$(IncludeOOBLibraries)' == 'true' and !Exists('$(LibrariesAllRefArtifactsPath)')" Text="The 'libs' subset must be built before building this project. Missing artifacts: $(LibrariesAllRefArtifactsPath)" />
  </Target>

  <!--
    Ensure artifacts exist for the more advanced paths. If the configuration is '*', don't emit
    these errors: it isn't a local dev scenario.
  -->
  <Target Name="EnsureLocalOSGroupConfigurationArchitectureSpecificArtifactsExist"
          Condition="'$(LibrariesTargetOSConfigurationArchitecture)' != '*'">
    <Error Condition="!Exists('$(LibrariesSharedFrameworkBinArtifactsPath)')" Text="The 'libs' subset must be built before building this project. Missing artifacts: $(LibrariesSharedFrameworkBinArtifactsPath)" />
    <Error Condition="'$(IncludeOOBLibraries)' == 'true' and !Exists('$(LibrariesAllBinArtifactsPath)')" Text="The 'libs' subset must be built before building this project. Missing artifacts: $(LibrariesAllBinArtifactsPath)" />
    <Error Condition="!Exists('$(LibrariesNativeArtifactsPath)')" Text="The 'libs' subset must be built before building this project. Missing artifacts: $(LibrariesNativeArtifactsPath)" />
  </Target>

  <Target Name="ResolveLibrariesFromLocalBuild"
          DependsOnTargets="
            EnsureLocalArtifactsExist;
            EnsureLocalOSGroupConfigurationArchitectureSpecificArtifactsExist">
    <ItemGroup>
      <LibrariesRefAssemblies Condition="'$(IncludeOOBLibraries)' != 'true'" Include="$(LibrariesSharedFrameworkRefArtifactsPath)*.dll;$(LibrariesSharedFrameworkRefArtifactsPath)*.pdb" />
      <LibrariesRefAssemblies Condition="'$(IncludeOOBLibraries)' == 'true'" Include="$(LibrariesAllRefArtifactsPath)*.dll;$(LibrariesAllRefArtifactsPath)*.pdb" />
      <LibrariesRuntimeFiles Condition="'$(IncludeOOBLibraries)' != 'true'" Include="
        $(LibrariesSharedFrameworkBinArtifactsPath)*.dll;
        $(LibrariesSharedFrameworkBinArtifactsPath)*.pdb"
        IsNative="" />
      <LibrariesRuntimeFiles Condition="'$(IncludeOOBLibraries)' == 'true'" Include="
        $(LibrariesAllBinArtifactsPath)*.dll;
        $(LibrariesAllBinArtifactsPath)*.pdb"
        IsNative="" />
      <ExcludeNativeLibrariesRuntimeFiles Condition="'$(IncludeOOBLibraries)' != 'true'"
                                          Include="$(LibrariesNativeArtifactsPath)libSystem.IO.Ports.Native.*" />
      <LibrariesRuntimeFiles Include="
        $(LibrariesNativeArtifactsPath)*.dll;
        $(LibrariesNativeArtifactsPath)*.dylib;
        $(LibrariesNativeArtifactsPath)*.a;
        $(LibrariesNativeArtifactsPath)*.so;
        $(LibrariesNativeArtifactsPath)*.dbg;
        $(LibrariesNativeArtifactsPath)*.dwarf;
        $(LibrariesNativeArtifactsPath)*.pdb"
        IsNative="true"
        Exclude="@(ExcludeNativeLibrariesRuntimeFiles)" />
      <LibrariesRuntimeFiles Condition="'$(TargetOS)' == 'Browser'"
                             Include="
        $(LibrariesNativeArtifactsPath)dotnet.js;
        $(LibrariesNativeArtifactsPath)dotnet.wasm;
        $(LibrariesNativeArtifactsPath)dotnet.timezones.blat;
        $(LibrariesNativeArtifactsPath)*.dat;"
        IsNative="true" />
      <LibrariesRuntimeFiles Condition="'$(TargetOS)' == 'Browser'"
                             Include="
        $(LibrariesNativeArtifactsPath)src\*.c;
        $(LibrariesNativeArtifactsPath)src\*.js;
        $(LibrariesNativeArtifactsPath)src\emcc-flags.txt;
        $(LibrariesNativeArtifactsPath)src\emcc-version.txt;"
        NativeSubDirectory="src"
        IsNative="true" />
      <LibrariesRuntimeFiles Condition="'$(TargetOS)' == 'Browser'"
                             Include="
        $(LibrariesNativeArtifactsPath)include\wasm\*.h;"
        NativeSubDirectory="include\wasm"
        IsNative="true" />
    </ItemGroup>

    <Error Condition="'@(LibrariesRefAssemblies)' == ''" Text="The 'libs' subset must be built before building this project." />
    <Error Condition="'@(LibrariesRuntimeFiles)' == ''" Text="The 'libs' subset must be built before building this project." />
  </Target>

  <PropertyGroup>
    <LiveRuntimeIdentifierGraphPath>$(RuntimeIdGraphDefinitionFile)</LiveRuntimeIdentifierGraphPath>
    <BundledRuntimeIdentifierGraphFile>$(LiveRuntimeIdentifierGraphPath)</BundledRuntimeIdentifierGraphFile>
  </PropertyGroup>
</Project>
