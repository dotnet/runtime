parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osSubgroup: ''
  managedTestBuildOsGroup: ''
  managedTestBuildOsSubgroup: ''
  container: ''
  testGroup: ''
  readyToRun: false
  helixQueues: ''
  # If true, run the corefx tests instead of the coreclr ones
  corefxTests: false
  stagedBuild: false
  displayNameArgs: ''
  runInUnloadableContext: false

### Test run job

### Each test run job depends on a corresponding test build job with the same
### buildConfig and archType.

jobs:
- template: xplat-test-job.yml
  parameters:
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    osSubgroup: ${{ parameters.osSubgroup }}
    managedTestBuildOsGroup: ${{ parameters.managedTestBuildOsGroup }}
    managedTestBuildOsSubgroup: ${{ parameters.managedTestBuildOsSubgroup }}
    container: ${{ parameters.container }}
    testGroup: ${{ parameters.testGroup }}
    readyToRun: ${{ parameters.readyToRun }}
    corefxTests: ${{ parameters.corefxTests }}
    stagedBuild: ${{ parameters.stagedBuild }}
    helixType: 'build/tests/'

    # Test jobs should continue on error for internal builds
    ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      continueOnError: true

    # Compute job name from template parameters
    ${{ if and(eq(parameters.testGroup, 'innerloop'), eq(parameters.displayNameArgs, '')) }}:
      name: 'run_test_p0_${{ parameters.osGroup }}${{ parameters.osSubgroup }}_${{ parameters.archType }}_${{ parameters.buildConfig }}'
      dependsOn:
      - 'build_test_p0_${{ parameters.managedTestBuildOsGroup }}${{ parameters.managedTestBuildOsSubgroup }}_${{ parameters.archType }}_${{parameters.buildConfig }}'
      - ${{ if ne(parameters.stagedBuild, true) }}:
        - ${{ format('build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
      displayName: 'Run Test Pri0 ${{ parameters.osGroup }}${{ parameters.osSubgroup }} ${{ parameters.archType }} ${{ parameters.buildConfig }}'

    ${{ if and(ne(parameters.testGroup, 'innerloop'), eq(parameters.displayNameArgs, '')) }}:
      name: 'run_test_p1_${{ parameters.osGroup }}${{ parameters.osSubgroup }}_${{ parameters.archType }}_${{ parameters.buildConfig }}'
      dependsOn:
      - 'build_test_p1_${{ parameters.managedTestBuildOsGroup }}${{ parameters.managedTestBuildOsSubgroup }}_${{ parameters.archType }}_${{parameters.buildConfig }}'
      - ${{ if ne(parameters.stagedBuild, true) }}:
        - ${{ format('build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
      displayName: 'Run Test Pri1 ${{ parameters.osGroup }}${{ parameters.osSubgroup }} ${{ parameters.archType }} ${{ parameters.buildConfig }}'

    ${{ if and(eq(parameters.testGroup, 'innerloop'), ne(parameters.displayNameArgs, '')) }}:
      name: 'run_test_p0_${{ parameters.displayNameArgs }}_${{ parameters.osGroup }}${{ parameters.osSubgroup }}_${{ parameters.archType }}_${{ parameters.buildConfig }}'
      dependsOn:
      - 'build_test_p0_${{ parameters.displayNameArgs }}_${{ parameters.managedTestBuildOsGroup }}${{ parameters.managedTestBuildOsSubgroup }}_${{ parameters.archType }}_${{parameters.buildConfig }}'      
      - ${{ if ne(parameters.stagedBuild, true) }}:
        - ${{ format('build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
      displayName: 'Run Test Pri0 ${{ parameters.displayNameArgs }} ${{ parameters.osGroup }}${{ parameters.osSubgroup }} ${{ parameters.archType }} ${{ parameters.buildConfig }}'

    ${{ if and(ne(parameters.testGroup, 'innerloop'), ne(parameters.displayNameArgs, '')) }}:
      name: 'run_test_p1_${{ parameters.displayNameArgs }}_${{ parameters.osGroup }}${{ parameters.osSubgroup }}_${{ parameters.archType }}_${{ parameters.buildConfig }}'
      dependsOn:
      - 'build_test_p1_${{ parameters.displayNameArgs }}_${{ parameters.managedTestBuildOsGroup }}${{ parameters.managedTestBuildOsSubgroup }}_${{ parameters.archType }}_${{parameters.buildConfig }}'      
      - ${{ if ne(parameters.stagedBuild, true) }}:
        - ${{ format('build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
      displayName: 'Run Test Pri1 ${{ parameters.displayNameArgs }} ${{ parameters.osGroup }}${{ parameters.osSubgroup }} ${{ parameters.archType }} ${{ parameters.buildConfig }}'

    variables:
    - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      - group: DotNet-HelixApi-Access

    # TODO: update these numbers as they were determined long ago
    ${{ if eq(parameters.testGroup, 'innerloop') }}:
      timeoutInMinutes: 150
    ${{ if in(parameters.testGroup, 'outerloop') }}:
      timeoutInMinutes: 270
    ${{ if in(parameters.testGroup, 'gc-longrunning') }}:
      timeoutInMinutes: 480
    ${{ if in(parameters.testGroup, 'jitstress', 'jitstress-isas-arm', 'jitstressregs-x86', 'jitstressregs', 'jitstress2-jitstressregs', 'gcstress0x3-gcstress0xc') }}:
      timeoutInMinutes: 390
    ${{ if in(parameters.testGroup, 'jitstress-isas-x86', 'gcstress-extra', 'r2r-extra') }}:
      timeoutInMinutes: 510

    steps:

    # Download and unzip managed test artifacts
    - template: /eng/download-artifact-step.yml
      parameters:
        downloadFolder: '$(binTestsPath)/tmp'
        unpackFolder: '$(testRootFolderPath)'
        artifactFileName: '$(testArtifactName)$(archiveExtension)'
        artifactName: '$(testArtifactName)'
        displayName: 'managed test artifacts (built on ${{ parameters.managedTestBuildOsGroup }}${{ parameters.managedTestBuildOsSubgroup }})'


    # Download and unzip test build tree
    - template: /eng/download-artifact-step.yml
      parameters:
        downloadFolder: '$(binTestsPath)/tmp'
        unpackFolder: '$(testBuildRootFolderPath)'
        cleanUnpackFolder: false
        artifactFileName: '$(testBuildArtifactName)$(archiveExtension)'
        artifactName: '$(testBuildArtifactName)'
        displayName: 'test build tree'


    # Download product binaries directory
    - task: DownloadBuildArtifacts@0
      displayName: Download product build
      inputs:
        buildType: current
        downloadType: single
        artifactName: 'BinDir_$(osGroup)$(osSubgroup)_$(archType)_$(buildConfig)'
        downloadPath: '$(System.ArtifactsDirectory)'


    # Populate Product directory
    - task: CopyFiles@2
      displayName: Populate Product directory
      inputs:
        sourceFolder: '$(System.ArtifactsDirectory)/BinDir_$(osGroup)$(osSubgroup)_$(archType)_$(buildConfig)'
        contents: '**'
        targetFolder: '$(Build.SourcesDirectory)/bin/Product/$(osGroup).$(archType).$(buildConfigUpper)'


    # Download and unzip the Microsoft.NET.Sdk.IL package needed for traversing
    # ilproj test projects during copynativeonly.
    - ${{ if ne(parameters.corefxTests, true) }}:
      - template: /eng/download-artifact-step.yml
        parameters:
          downloadFolder: '$(binTestsPath)/tmp'
          unpackFolder: '$(microsoftNetSdkIlFolderPath)'
          artifactFileName: '$(microsoftNetSdkIlArtifactName)$(archiveExtension)'
          artifactName: '$(microsoftNetSdkIlArtifactName)'
          displayName: 'Microsoft.NET.Sdk.IL package'


    # Download and unzip native test artifacts
    - template: /eng/download-artifact-step.yml
      parameters:
        downloadFolder: '$(binTestsPath)/tmp'
        unpackFolder: '$(testNativeRootFolderPath)'
        artifactFileName: '$(testNativeArtifactName)$(archiveExtension)'
        artifactName: '$(testNativeArtifactName)'
        displayName: 'native test artifacts'


    # Publish native test components to test output folder. Sadly we cannot do this
    # during product build (so that we could zip up the files in their final test location
    # and directly unzip them there after download). Unfortunately the logic to copy
    # the native artifacts to the final test folders is dependent on availability of the
    # managed test artifacts.
    - ${{ if ne(parameters.corefxTests, true) }}:
      - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
        - script: ./build-test.sh copynativeonly $(buildConfig) $(archType) $(priorityArg)
          displayName: Copy native test components to test output folder
      - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
        - script: build-test.cmd copynativeonly $(buildConfig) $(archType) $(priorityArg)
          displayName: Copy native test components to test output folder


    # Send tests to Helix
    - template: /eng/send-to-helix-step.yml
      parameters:
        displayName: Send tests to Helix
        buildConfig: $(buildConfigUpper)
        archType: ${{ parameters.archType }}
        osGroup: ${{ parameters.osGroup }}

        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          creator: $(Build.DefinitionName)

        helixBuild: $(Build.BuildNumber)
        helixSource: $(_HelixSource)

        # REVIEW: not sure why "cli" is part of the names here. Leave it for the ones that already had it,
        # but don't add it to new ones.
        ${{ if and(eq(parameters.corefxTests, true), eq(parameters.readyToRun, true)) }}:
          helixType: 'test/functional/r2r_corefx/'
        ${{ if and(eq(parameters.corefxTests, true), ne(parameters.readyToRun, true)) }}:
          helixType: 'test/functional/corefx/'
        ${{ if and(ne(parameters.corefxTests, true), eq(parameters.readyToRun, true)) }}:
          helixType: 'test/functional/r2r/cli/'
        ${{ if and(ne(parameters.corefxTests, true), ne(parameters.readyToRun, true)) }}:
          helixType: 'test/functional/cli/'

        helixQueues: ${{ parameters.helixQueues }}

        # This tests whether an array is empty
        ${{ if eq(join('', parameters.helixQueues), '') }}:
          condition: false

        publishTestResults: true

        # Set job timeouts
        #
        # "timeoutPerTestCollectionInMinutes" is the time needed for the "biggest" xUnit test collection to complete.
        # In case xUnit test wrappers get refactored this number should also be adjusted.
        #
        # "timeoutPerTestInMinutes" corresponds to individual test running time. This is implemented by setting
        # the __TestTimeout variable, which is later read by the coreclr xunit test wrapper code (the code in the
        # xunit test dlls that invokes the actual tests). Note this doesn't apply to CoreFX testing.

        ${{ if and(eq(parameters.corefxTests, true), eq(parameters.testGroup, 'innerloop')) }}:
          timeoutPerTestCollectionInMinutes: 120
        ${{ if and(ne(parameters.corefxTests, true), eq(parameters.testGroup, 'innerloop')) }}:
          timeoutPerTestCollectionInMinutes: 30
          timeoutPerTestInMinutes: 10
        ${{ if in(parameters.testGroup, 'outerloop') }}:
          timeoutPerTestCollectionInMinutes: 120
          timeoutPerTestInMinutes: 10
        ${{ if in(parameters.testGroup, 'gc-longrunning') }}:
          timeoutPerTestCollectionInMinutes: 360
          # gc reliability may take up to 2 hours to shutdown. Some scenarios have very long iteration times.
          timeoutPerTestInMinutes: 240
        ${{ if in(parameters.testGroup, 'jitstress', 'jitstress-isas-arm', 'jitstress-isas-x86', 'jitstressregs-x86', 'jitstressregs', 'jitstress2-jitstressregs', 'jitelthookenabled' ) }}:
          timeoutPerTestCollectionInMinutes: 120
          timeoutPerTestInMinutes: 30
        ${{ if in(parameters.testGroup, 'gcstress0x3-gcstress0xc') }}:
          timeoutPerTestCollectionInMinutes: 240
          timeoutPerTestInMinutes: 60
        ${{ if in(parameters.testGroup, 'gcstress-extra', 'r2r-extra') }}:
          timeoutPerTestCollectionInMinutes: 300
          timeoutPerTestInMinutes: 90

        runCrossGen: ${{ parameters.readyToRun }}
        runInUnloadableContext: ${{ parameters.runInUnloadableContext }}

        ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          # Access token variable for internal project from the
          # DotNet-HelixApi-Access variable group
          helixAccessToken: $(HelixApiAccessToken)

        # Choose which tests to send to Helix: CoreFX or CoreCLR.
        ${{ if eq(parameters.corefxTests, true) }}:
          helixProjectArguments: 'eng/helixcorefxtests.proj'
        ${{ if ne(parameters.corefxTests, true) }}:
          helixProjectArguments: 'tests/helixpublishwitharcade.proj'

        ${{ if in(parameters.testGroup, 'innerloop', 'outerloop') }}:
          scenarios:
          - normal
          - no_tiered_compilation
        ${{ if in(parameters.testGroup, 'jitstress') }}:
          scenarios:
          - jitminopts
          - jitstress1
          - jitstress1_tiered
          - jitstress2
          - jitstress2_tiered
          - zapdisable
          - tailcallstress
        ${{ if in(parameters.testGroup, 'jitstress-isas-arm') }}:
          scenarios:
          - jitstress_isas_incompletehwintrinsic
          - jitstress_isas_nohwintrinsic
          - jitstress_isas_nohwintrinsic_nosimd
          - jitstress_isas_nosimd
        ${{ if in(parameters.testGroup, 'jitstress-isas-x86') }}:
          scenarios:
          - jitstress_isas_incompletehwintrinsic
          - jitstress_isas_nohwintrinsic
          - jitstress_isas_nohwintrinsic_nosimd
          - jitstress_isas_nosimd
          - jitstress_isas_x86_noaes
          - jitstress_isas_x86_noavx
          - jitstress_isas_x86_noavx2
          - jitstress_isas_x86_nobmi1
          - jitstress_isas_x86_nobmi2
          - jitstress_isas_x86_nofma
          - jitstress_isas_x86_nohwintrinsic
          - jitstress_isas_x86_nolzcnt
          - jitstress_isas_x86_nopclmulqdq
          - jitstress_isas_x86_nopopcnt
          - jitstress_isas_x86_nosse
          - jitstress_isas_x86_nosse2
          - jitstress_isas_x86_nosse3
          - jitstress_isas_x86_nosse3_4
          - jitstress_isas_x86_nosse41
          - jitstress_isas_x86_nosse42
          - jitstress_isas_x86_nossse3
        ${{ if in(parameters.testGroup, 'jitstressregs-x86') }}:
          scenarios:
          - jitstressregs1_x86_noavx
          - jitstressregs2_x86_noavx
          - jitstressregs3_x86_noavx
          - jitstressregs4_x86_noavx
          - jitstressregs8_x86_noavx
          - jitstressregs0x10_x86_noavx
          - jitstressregs0x80_x86_noavx
          - jitstressregs0x1000_x86_noavx
        ${{ if in(parameters.testGroup, 'jitstressregs' ) }}:
          scenarios:
          - jitstressregs1
          - jitstressregs2
          - jitstressregs3
          - jitstressregs4
          - jitstressregs8
          - jitstressregs0x10
          - jitstressregs0x80
          - jitstressregs0x1000
        ${{ if in(parameters.testGroup, 'jitstress2-jitstressregs') }}:
          scenarios:
          - jitstress2_jitstressregs1
          - jitstress2_jitstressregs2
          - jitstress2_jitstressregs3
          - jitstress2_jitstressregs4
          - jitstress2_jitstressregs8
          - jitstress2_jitstressregs0x10
          - jitstress2_jitstressregs0x80
          - jitstress2_jitstressregs0x1000
        ${{ if in(parameters.testGroup, 'gcstress0x3-gcstress0xc') }}:
          scenarios:
          - gcstress0x3
          - gcstress0xc
        ${{ if in(parameters.testGroup, 'gcstress-extra') }}:
          scenarios:
          - heapverify1
          - gcstress0xc_zapdisable
          - gcstress0xc_zapdisable_jitstress2
          - gcstress0xc_zapdisable_heapverify1
          - gcstress0xc_jitstress1
          - gcstress0xc_jitstress2
          - gcstress0xc_jitminopts_heapverify1
        ${{ if in(parameters.testGroup, 'r2r-extra') }}:
          scenarios:
          - jitstress1
          - jitstress2
          - jitstress1_tiered
          - jitstress2_tiered
          - jitstressregs1
          - jitstressregs2
          - jitstressregs3
          - jitstressregs4
          - jitstressregs8
          - jitstressregs0x10
          - jitstressregs0x80
          - jitstressregs0x1000
          - jitminopts
          - forcerelocs
          - gcstress15
        ${{ if in(parameters.testGroup, 'gc-longrunning') }}:
          longRunningGcTests: true
          scenarios:
          - normal
        ${{ if in(parameters.testGroup, 'jitelthookenabled') }}:
          scenarios:
          - jitelthookenabled
          - jitelthookenabled_tiered
