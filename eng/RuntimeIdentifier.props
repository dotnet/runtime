<Project>
  <PropertyGroup Label="CalculatePortableBuild">
    <PortableBuild Condition="'$(PortableBuild)' == '' and '$(DotNetBuildSourceOnly)' == 'true'">false</PortableBuild>
    <PortableBuild Condition="'$(PortableBuild)' == ''">true</PortableBuild>
  </PropertyGroup>

  <!-- PortableOS is the portable rid-OS corresponding to the target platform. -->
  <PropertyGroup Label="CalculatePortableOS">
    <!-- To determine PortableOS we use TargetOS.
         TargetOS is not a rid-OS. For example: for Windows it is 'windows' instead of 'win'.
         And, for flavors of Linux, like 'linux-musl' and 'linux-bionic', TargetOS is 'linux'. -->

    <PortableOS>$(TargetOS.ToLowerInvariant())</PortableOS>
    <PortableOS Condition="'$(PortableOS)' == 'windows'">win</PortableOS>

    <!-- TargetOS=AnyOS is a sentinel value used by tests, ignore it.  -->
    <PortableOS Condition="'$(PortableOS)' == 'anyos'">$(__PortableTargetOS)</PortableOS>

    <!-- Detect linux flavors using __PortableTargetOS from the native script. -->
    <PortableOS Condition="'$(PortableOS)' == 'linux' and '$(__PortableTargetOS)' == 'linux-musl'">linux-musl</PortableOS>
    <PortableOS Condition="'$(PortableOS)' == 'linux' and '$(__PortableTargetOS)' == 'linux-bionic'">linux-bionic</PortableOS>

    <!-- On Windows, we can build for Windows and Mobile.
         For other TargetOSes, create a "win" build, built from TargetOS sources and "win" pre-built packages. -->
    <PortableOS Condition="'$(HostOS)' == 'win' and '$(TargetsMobile)' != 'true'">win</PortableOS>
  </PropertyGroup>

  <!-- OutputRID is used to name the target platform.
       For portable builds, OutputRID matches PortableOS.
       For non-portable builds, it uses __DistroRid (from the native build script), or falls back to RuntimeInformation.RuntimeIdentifier.
       Source-build sets OutputRID directly. -->
  <PropertyGroup Label="CalculateOutputRID">
    <_hostRid Condition="'$(MSBuildRuntimeType)' == 'core'">$([System.Runtime.InteropServices.RuntimeInformation]::RuntimeIdentifier)</_hostRid>
    <_hostRid Condition="'$(MSBuildRuntimeType)' != 'core'">win-$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture.ToString().ToLowerInvariant)</_hostRid>

    <_parseDistroRid>$(__DistroRid)</_parseDistroRid>
    <_parseDistroRid Condition="'$(_parseDistroRid)' == ''">$(_hostRid)</_parseDistroRid>
    <_distroRidIndex>$(_parseDistroRid.LastIndexOf('-'))</_distroRidIndex>

    <_outputOS>$(_parseDistroRid.SubString(0, $(_distroRidIndex)))</_outputOS>
    <_outputOS Condition="'$(PortableBuild)' == 'true'">$(PortableOS)</_outputOS>

    <OutputRID Condition="'$(OutputRID)' == ''">$(_outputOS)-$(TargetArchitecture)</OutputRID>
  </PropertyGroup>

  <PropertyGroup Label="CalculateTargetOSName">
    <TargetsFreeBSD Condition="'$(TargetOS)' == 'freebsd'">true</TargetsFreeBSD>
    <Targetsillumos Condition="'$(TargetOS)' == 'illumos'">true</Targetsillumos>
    <TargetsSolaris Condition="'$(TargetOS)' == 'solaris'">true</TargetsSolaris>
    <TargetsHaiku Condition="'$(TargetOS)' == 'haiku'">true</TargetsHaiku>
    <TargetsLinux Condition="'$(TargetOS)' == 'linux' or '$(TargetOS)' == 'android'">true</TargetsLinux>
    <TargetsLinuxBionic Condition="'$(PortableOS)' == 'linux-bionic'">true</TargetsLinuxBionic>
    <TargetsLinuxMusl Condition="'$(PortableOS)' == 'linux-musl'">true</TargetsLinuxMusl>
    <TargetsLinuxGlibc Condition="'$(TargetsLinux)' == 'true' and '$(TargetsLinuxMusl)' != 'true' and '$(TargetsLinuxBionic)' != 'true'">true</TargetsLinuxGlibc>
    <TargetsNetBSD Condition="'$(TargetOS)' == 'netbsd'">true</TargetsNetBSD>
    <TargetsOSX Condition="'$(TargetOS)' == 'osx'">true</TargetsOSX>
    <TargetsMacCatalyst Condition="'$(TargetOS)' == 'maccatalyst'">true</TargetsMacCatalyst>
    <TargetsiOS Condition="'$(TargetOS)' == 'ios' or '$(TargetOS)' == 'iossimulator'">true</TargetsiOS>
    <TargetstvOS Condition="'$(TargetOS)' == 'tvos' or '$(TargetOS)' == 'tvossimulator'">true</TargetstvOS>
    <TargetsiOSSimulator Condition="'$(TargetOS)' == 'iossimulator'">true</TargetsiOSSimulator>
    <TargetstvOSSimulator Condition="'$(TargetOS)' == 'tvossimulator'">true</TargetstvOSSimulator>
    <TargetsAndroid Condition="'$(TargetOS)' == 'android'">true</TargetsAndroid>
    <TargetsBrowser Condition="'$(TargetOS)' == 'browser'">true</TargetsBrowser>
    <TargetsWasi Condition="'$(TargetOS)' == 'wasi'">true</TargetsWasi>
    <TargetsWindows Condition="'$(TargetOS)' == 'windows'">true</TargetsWindows>
    <TargetsUnix Condition="'$(TargetsFreeBSD)' == 'true' or '$(Targetsillumos)' == 'true' or '$(TargetsSolaris)' == 'true' or '$(TargetsHaiku)' == 'true' or '$(TargetsLinux)' == 'true' or '$(TargetsNetBSD)' == 'true' or '$(TargetsOSX)' == 'true' or '$(TargetsMacCatalyst)' == 'true' or '$(TargetstvOS)' == 'true' or '$(TargetsiOS)' == 'true' or '$(TargetsAndroid)' == 'true'">true</TargetsUnix>
  </PropertyGroup>
  <PropertyGroup>
    <_ImportedRuntimeIdentifierProps>true</_ImportedRuntimeIdentifierProps>
  </PropertyGroup>
</Project>
