jobs:
- job: setupMaestroVars
  displayName: Setup Maestro Vars
  variables:
    - template: common-variables.yml
    - name: BuildId
      value: $[ coalesce(variables.BARBuildId, 0) ]
    - name: PromoteToMaestroChannels
      value: $[ coalesce(variables.PromoteToChannelIds, 0) ]
    - name: PromoteToMaestroChannel 
      value: $[ coalesce(variables.PromoteToMaestroChannelId, 0) ]
  pool:
    vmImage: 'windows-2019'
  steps:
    - checkout: none

    - task: DownloadBuildArtifacts@0
      displayName: Download Release Configs
      condition: and(eq(variables.PromoteToMaestroChannels, 0), eq(variables.PromoteToMaestroChannel, 0))
      inputs:
        buildType: current
        artifactName: ReleaseConfigs

    - task: PowerShell@2
      name: setReleaseVars
      displayName: Set Release Configs Vars
      inputs:
        targetType: inline
        script: |
          try {
            if ($Env:PromoteToMaestroChannels -eq 0 -and $Env:PromoteToMaestroChannel -eq 0) {
              $Content = Get-Content $(Build.StagingDirectory)/ReleaseConfigs/ReleaseConfigs.txt

              $BarId = $Content | Select -Index 0
              $Channels = $Content | Select -Index 1             
              $IsStableBuild = $Content | Select -Index 2

              $AzureDevOpsProject = $Env:System_TeamProject
              $AzureDevOpsBuildDefinitionId = $Env:System_DefinitionId
              $AzureDevOpsBuildId = $Env:Build_BuildId
            }
            else {
              $buildApiEndpoint = "${Env:MaestroApiEndPoint}/api/builds/${Env:BARBuildId}?api-version=${Env:MaestroApiVersion}"

              $apiHeaders = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
              $apiHeaders.Add('Accept', 'application/json')
              $apiHeaders.Add('Authorization',"Bearer ${Env:MAESTRO_API_TOKEN}")

              $buildInfo = try { Invoke-WebRequest -Method Get -Uri $buildApiEndpoint -Headers $apiHeaders | ConvertFrom-Json } catch { Write-Host "Error: $_" }
             
              $BarId = $Env:BARBuildId
              $Channels = $Env:PromoteToMaestroChannels -split ","
              $Channels = $Channels -join "]["
              $Channels = "[$Channels][$Env:PromoteToMaestroChannel]"

              $IsStableBuild = $buildInfo.stable
              $AzureDevOpsProject = $buildInfo.azureDevOpsProject
              $AzureDevOpsBuildDefinitionId = $buildInfo.azureDevOpsBuildDefinitionId
              $AzureDevOpsBuildId = $buildInfo.azureDevOpsBuildId
            }

            Write-Host "##vso[task.setvariable variable=BARBuildId;isOutput=true]$BarId"
            Write-Host "##vso[task.setvariable variable=TargetChannels;isOutput=true]$Channels"
            Write-Host "##vso[task.setvariable variable=IsStableBuild;isOutput=true]$IsStableBuild"

            Write-Host "##vso[task.setvariable variable=AzDOProjectName;isOutput=true]$AzureDevOpsProject"
            Write-Host "##vso[task.setvariable variable=AzDOPipelineId;isOutput=true]$AzureDevOpsBuildDefinitionId"
            Write-Host "##vso[task.setvariable variable=AzDOBuildId;isOutput=true]$AzureDevOpsBuildId"
          }
          catch {
            Write-Host $_
            Write-Host $_.Exception
            Write-Host $_.ScriptStackTrace
            exit 1
          }
      env:
        MAESTRO_API_TOKEN: $(MaestroApiAccessToken)
