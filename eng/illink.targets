<Project>
  <PropertyGroup>
    <PrepareResourcesDependsOn>
      _EmbedILLinkXmls;
      $(PrepareResourcesDependsOn)
    </PrepareResourcesDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <TargetsTriggeredByCompilation Condition="'$(DesignTimeBuild)' != 'true'">
      $(TargetsTriggeredByCompilation);
      _SetILLinkTrimAssembly;
      ILLinkTrimAssembly
    </TargetsTriggeredByCompilation>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.ILLink.Tasks"
                      Version="$(MicrosoftNETILLinkTasksVersion)"
                      PrivateAssets="all"
                      IsImplicitlyDefined="true"
                      ExcludeAssets="build"
                      GeneratePathProperty="true" />
  </ItemGroup>

  <!-- Inputs and outputs of ILLinkTrimAssembly -->
  <PropertyGroup>
    <ILLinkTasksDir>$([MSBuild]::NormalizeDirectory('$(PkgMicrosoft_NET_ILLink_Tasks)', 'tools'))</ILLinkTasksDir>
    <ILLinkTasksPath Condition="'$(ILLinkTasksPath)' == '' and '$(MSBuildRuntimeType)' == 'core'">$(ILLinkTasksDir)netcoreapp3.0/ILLink.Tasks.dll</ILLinkTasksPath>
    <ILLinkTasksPath Condition="'$(ILLinkTasksPath)' == '' and '$(MSBuildRuntimeType)' != 'core'">$(ILLinkTasksDir)net472/ILLink.Tasks.dll</ILLinkTasksPath>
    <ILLinkTrimAssemblyPath>$(IntermediateOutputPath)$(TargetName)$(TargetExt)</ILLinkTrimAssemblyPath>
    <ILLinkTrimAssemblySymbols>$(IntermediateOutputPath)$(TargetName).pdb</ILLinkTrimAssemblySymbols>
    <ILLinkTrimInputPath>$(IntermediateOutputPath)PreTrim/</ILLinkTrimInputPath>
    <ILLinkTrimInputAssembly>$(ILLinkTrimInputPath)$(TargetName)$(TargetExt)</ILLinkTrimInputAssembly>
    <ILLinkTrimInputSymbols>$(ILLinkTrimInputPath)$(TargetName).pdb</ILLinkTrimInputSymbols>
    <ILLinkTrimOutputPath>$(IntermediateOutputPath)</ILLinkTrimOutputPath>

    <ILLinkTrimXml Condition="'$(ILLinkTrimXml)' == '' and Exists('$(MSBuildProjectDirectory)/ILLinkTrim.xml')">$(MSBuildProjectDirectory)/ILLinkTrim.xml</ILLinkTrimXml>
    <!-- ILLinkTrim_LibraryBuild.xml files are only used during building the library, not an app. They shouldn't be embedded into the assembly. -->
    <ILLinkTrimXmlLibraryBuild Condition="'$(ILLinkTrimXmlLibraryBuild)' == '' and Exists('$(MSBuildProjectDirectory)/ILLinkTrim_LibraryBuild.xml')">$(MSBuildProjectDirectory)/ILLinkTrim_LibraryBuild.xml</ILLinkTrimXmlLibraryBuild>
    <ILLinkDescriptorsXmlIntermediatePath>$(IntermediateOutputPath)ILLink.Descriptors.xml</ILLinkDescriptorsXmlIntermediatePath>

    <ILLinkSubstitutionsXmlIntermediatePath>$(IntermediateOutputPath)ILLink.Substitutions.xml</ILLinkSubstitutionsXmlIntermediatePath>
    <ILLinkLinkAttributesXmlIntermediatePath>$(IntermediateOutputPath)ILLink.LinkAttributes.xml</ILLinkLinkAttributesXmlIntermediatePath>

    <!-- if building a PDB, tell illink to rewrite the symbols file -->
    <ILLinkRewritePDBs Condition="'$(ILLinkRewritePDBs)' == '' and '$(DebugSymbols)' != 'false'">true</ILLinkRewritePDBs>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(ILLinkTrimXmlLibraryBuild)" Condition="'$(ILLinkTrimXmlLibraryBuild)' != ''" />
    <None Include="@(ILLinkSubstitutionsXmls)" />
  </ItemGroup>

  <!-- Custom binplacing for pre/post-trimming and reports that is useful for analysis
       Must be enabled by setting BinPlaceILLinkTrimAssembly=true
  -->
  <ItemGroup Condition="'$(BinPlaceILLinkTrimAssembly)' == 'true'">
    <BinPlaceTargetFramework Include="$(BuildSettings)">
      <RuntimePath>$(ArtifactsBinDir)ILLinkTrimAssembly/$(BuildSettings)/trimmed</RuntimePath>
      <ItemName>TrimmedItem</ItemName>
    </BinPlaceTargetFramework>
    <BinPlaceTargetFramework Include="$(BuildSettings)">
      <RuntimePath>$(ArtifactsBinDir)ILLinkTrimAssembly/$(BuildSettings)/reports</RuntimePath>
      <ItemName>TrimmingReport</ItemName>
    </BinPlaceTargetFramework>
    <BinPlaceTargetFramework Include="$(BuildSettings)">
      <RuntimePath>$(ArtifactsBinDir)ILLinkTrimAssembly/$(BuildSettings)/pretrimmed</RuntimePath>
      <ItemName>PreTrimmedItem</ItemName>
    </BinPlaceTargetFramework>
  </ItemGroup>

  <Target Name="_EmbedILLinkXmls"
          DependsOnTargets="_CombineILLinkDescriptorsXmls;_CombineILLinkSubstitutionsXmls;_CombineILLinkLinkAttributesXmls">

    <ItemGroup Condition="'$(ILLinkTrimXml)' != ''">
      <EmbeddedResource Include="$(ILLinkTrimXml)">
        <LogicalName>$(AssemblyName).xml</LogicalName>
      </EmbeddedResource>
    </ItemGroup>

    <ItemGroup Condition="'$(ILLinkSubstitutionsXml)' != ''">
      <EmbeddedResource Include="$(ILLinkSubstitutionsXml)">
        <LogicalName>ILLink.Substitutions.xml</LogicalName>
      </EmbeddedResource>
    </ItemGroup>

    <ItemGroup Condition="'$(ILLinkLinkAttributesXml)' != ''">
      <EmbeddedResource Include="$(ILLinkLinkAttributesXml)">
        <LogicalName>ILLink.LinkAttributes.xml</LogicalName>
      </EmbeddedResource>
    </ItemGroup>

  </Target>

  <UsingTask TaskName="CombineLinkerXmlFiles" AssemblyFile="$(ILLinkTasksPath)" />
  <Target Name="_CombineILLinkDescriptorsXmls"
          Condition="'$(ILLinkTrimXml)' == '' and '@(ILLinkDescriptorsXmls)' != ''"
          Inputs="@(ILLinkDescriptorsXmls)"
          Outputs="$(ILLinkDescriptorsXmlIntermediatePath)">
    <PropertyGroup>
      <ILLinkTrimXml>$(ILLinkDescriptorsXmlIntermediatePath)</ILLinkTrimXml>
    </PropertyGroup>

    <CombineLinkerXmlFiles LinkerXmlFiles="@(ILLinkDescriptorsXmls)"
                           CombinedLinkerXmlFile="$(ILLinkTrimXml)" />

    <ItemGroup>
      <FileWrites Include="$(ILLinkTrimXml)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <ILLinkResourcesSubstitutionIntermediatePath>$(IntermediateOutputPath)ILLink.Resources.Substitutions.xml</ILLinkResourcesSubstitutionIntermediatePath>
    <GenerateResourcesSubstitutions Condition="'$(GenerateResourcesSubstitutions)' == '' and '$(StringResourcesPath)' != ''">true</GenerateResourcesSubstitutions>
  </PropertyGroup>

  <ItemGroup Condition="'$(GenerateResourcesSubstitutions)' == 'true'">
    <ILLinkSubstitutionsXmls Include="$(ILLinkResourcesSubstitutionIntermediatePath)" />
  </ItemGroup>

  <!-- If a library uses string resources, the following target generates a substitution xml that will be embedded on the
  library so that if a consumer wants to run the linker they can specify a feature switch to strip out all resources
  from the assembly. -->
  <Target Name="GenerateResourcesSubstitutionFile"
          Condition="'$(GenerateResourcesSubstitutions)' == 'true'"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(ILLinkResourcesSubstitutionIntermediatePath)">

    <PropertyGroup>
      <ILLinkResourcesSubstitutionTemplate>$(MSBuildThisFileDirectory)ILLink.Substitutions.Resources.template</ILLinkResourcesSubstitutionTemplate>
    </PropertyGroup>

    <WriteLinesToFile File="$(ILLinkResourcesSubstitutionIntermediatePath)"
                      Lines="$([System.IO.File]::ReadAllText('$(ILLinkResourcesSubstitutionTemplate)')
                                                 .Replace('{AssemblyName}', '$(AssemblyName)')
                                                 .Replace('{StringResourcesName}', '$(StringResourcesName)'))"
                      Overwrite="true" />

    <ItemGroup>
      <FileWrites Include="$(ILLinkResourcesSubstitutionIntermediatePath)" />
    </ItemGroup>
  </Target>

  <Target Name="_CombineILLinkSubstitutionsXmls"
          DependsOnTargets="GenerateResourcesSubstitutionFile"
          Condition="'@(ILLinkSubstitutionsXmls)' != ''"
          Inputs="@(ILLinkSubstitutionsXmls)"
          Outputs="$(ILLinkSubstitutionsXmlIntermediatePath)">
    <PropertyGroup>
      <ILLinkSubstitutionsXml>$(ILLinkSubstitutionsXmlIntermediatePath)</ILLinkSubstitutionsXml>
    </PropertyGroup>

    <CombineLinkerXmlFiles LinkerXmlFiles="@(ILLinkSubstitutionsXmls)"
                           CombinedLinkerXmlFile="$(ILLinkSubstitutionsXml)" />

    <ItemGroup>
      <FileWrites Include="$(ILLinkSubstitutionsXml)" />
    </ItemGroup>
  </Target>

  <Target Name="_CombineILLinkLinkAttributesXmls"
          Condition="'@(ILLinkLinkAttributesXmls)' != ''"
          Inputs="@(ILLinkLinkAttributesXmls)"
          Outputs="$(ILLinkLinkAttributesXmlIntermediatePath)">
    <PropertyGroup>
      <ILLinkLinkAttributesXml>$(ILLinkLinkAttributesXmlIntermediatePath)</ILLinkLinkAttributesXml>
    </PropertyGroup>

    <CombineLinkerXmlFiles LinkerXmlFiles="@(ILLinkLinkAttributesXmls)"
                           CombinedLinkerXmlFile="$(ILLinkLinkAttributesXml)" />

    <ItemGroup>
      <FileWrites Include="$(ILLinkLinkAttributesXml)" />
    </ItemGroup>
  </Target>

  <Target Name="_SetILLinkTrimAssembly"
          Condition="'$(ILLinkTrimAssembly)' == ''"
          DependsOnTargets="GetBinPlaceTargetFramework">
    <PropertyGroup>
      <!-- Currently ILLink cannot handle type projections from Windows.winmd, disable if the project references it -->
      <ILLinkTrimAssembly Condition="'%(ReferencePath.FileName)%(ReferencePath.Extension)' == 'Windows.winmd'">false</ILLinkTrimAssembly>
    </PropertyGroup>
  </Target>

  <!-- ILLink.Tasks arguments common to runs for both individual libraries and for the entire runtime pack -->
  <Target Name="SetCommonILLinkArgs">
    <PropertyGroup>
      <!-- keep type-forward assemblies (facades) -->
      <ILLinkArgs>$(ILLinkArgs) -t</ILLinkArgs>
      <!-- don't remove the embedded link attributes xml resource since ILLink may run again on the assembly -->
      <!-- and ignore the link attributes xml file during the library build, since we need the attributes preserved until the final app is linked -->
      <ILLinkArgs>$(ILLinkArgs) --strip-link-attributes false --ignore-link-attributes true</ILLinkArgs>
      <!-- ignore unresolved references -->
      <ILLinkArgs>$(ILLinkArgs) --skip-unresolved true</ILLinkArgs>
      <!-- keep interface implementations -->
      <ILLinkArgs>$(ILLinkArgs) --disable-opt unusedinterfaces</ILLinkArgs>
    </PropertyGroup>
  </Target>

  <!-- ILLinkTrimAssembly
       Examines the "input assembly" for IL that is unreachable from public API and trims that,
       rewriting the assembly to an "output assembly"
  -->
  <UsingTask TaskName="ILLink" AssemblyFile="$(ILLinkTasksPath)" />
  <Target Name="ILLinkTrimAssembly"
          Condition="'$(ILLinkTrimAssembly)' == 'true'"
          DependsOnTargets="SetCommonILLinkArgs">
    <PropertyGroup>
      <ILLinkArgs>$(ILLinkArgs) -r $(TargetName)</ILLinkArgs>
      <!-- default action for core assemblies -->
      <ILLinkArgs>$(ILLinkArgs) -c skip</ILLinkArgs>
      <!-- default action for non-core assemblies -->
      <ILLinkArgs>$(ILLinkArgs) -u skip</ILLinkArgs>
      <!-- trim the target assembly -->
      <ILLinkArgs>$(ILLinkArgs) -p link $(TargetName)</ILLinkArgs>
      <ILLinkArgs Condition="'$(ILLinkRewritePDBs)' == 'true' and Exists('$(ILLinkTrimAssemblySymbols)')">$(ILLinkArgs) -b true</ILLinkArgs>
      <!-- don't remove the embedded root xml resource since ILLink may run again on the assembly -->
      <ILLinkArgs Condition="'$(ILLinkTrimXml)' != ''">$(ILLinkArgs) --strip-descriptors false</ILLinkArgs>
      <!-- pass the non-embedded root xml file on the command line -->
      <ILLinkArgs Condition="'$(ILLinkTrimXmlLibraryBuild)' != ''">$(ILLinkArgs) -x "$(ILLinkTrimXmlLibraryBuild)"</ILLinkArgs>
      <!-- don't remove the embedded substitutions xml resource since ILLink may run again on the assembly -->
      <ILLinkArgs Condition="'$(ILLinkSubstitutionsXml)' != ''">$(ILLinkArgs) --strip-substitutions false</ILLinkArgs>
      <!-- keep DynamicDependencyAttribute unless a project explicitly disables it -->
      <ILLinkArgs Condition="'$(ILLinkKeepDepAttributes)' != 'false'">$(ILLinkArgs) --keep-dep-attributes true</ILLinkArgs>
      <!-- suppress warnings with the following codes:
           IL2006: The generic parameter 'T' from A with dynamically accessed member kinds B is passed into the generic parameter
                   'T' from 'System.Lazy<T>' which requires dynamically accessed member kinds 'PublicParameterlessConstructor'
           IL2008: Could not find type A specified in resource B
           IL2009: Could not find method A in type B specified in resource C
           IL2012: Could not find field A in type B specified in resource C
           IL2025: Duplicate preserve of A in B
           IL2026: Calling A which has B can break functionality when trimming application code. The target method might be removed.
           IL2035: Unresolved assembly A in DynamicDependencyAttribute on B
           IL2050: P/invoke method A declares a parameter with COM marshalling. Correctness of COM interop
                   cannot be guaranteed after trimming. Interfaces and interface members might be removed.
      -->
      <ILLinkArgs>$(ILLinkArgs) --nowarn IL2006;IL2008;IL2009;IL2012;IL2025;IL2026;IL2035;IL2050</ILLinkArgs>
    </PropertyGroup>

    <MakeDir Directories="$(ILLinkTrimInputPath)" />

    <!-- Move the assembly into a subdirectory for ILLink -->
    <Move SourceFiles="$(ILLinkTrimAssemblyPath)"
          DestinationFolder="$(ILLinkTrimInputPath)"
    />

    <!-- Move the PDB into a subdirectory for ILLink if we are rewriting PDBs -->
    <Move SourceFiles="$(ILLinkTrimAssemblySymbols)"
          DestinationFolder="$(ILLinkTrimInputPath)"
          Condition="'$(ILLinkRewritePDBs)' == 'true' and Exists('$(ILLinkTrimAssemblySymbols)')"
    />

    <ItemGroup>
      <_DependencyDirectoriesTemp Include="@(ReferencePath->'%(RootDir)%(Directory)')" />
      <!-- Remove duplicate directories by batching over them -->
      <!-- Add project references first to give precedence to project-specific files -->
      <_DependencyDirectories Condition="'%(_DependencyDirectoriesTemp.ReferenceSourceTarget)'=='ProjectReference'" Include="%(_DependencyDirectoriesTemp.Identity)" />
      <_DependencyDirectories Condition="'%(_DependencyDirectoriesTemp.ReferenceSourceTarget)'!='ProjectReference'" Include="%(_DependencyDirectoriesTemp.Identity)" />
      <!-- Remove trailing slash to work around response file parsing behavior -->
      <_DependencyDirectoriesSlash Include="@(_DependencyDirectories)">
        <PathWithSlash>$([MSBuild]::EnsureTrailingSlash('%(Identity)'))</PathWithSlash>
      </_DependencyDirectoriesSlash>
      <_DependencyDirectoriesNoSlash Include="@(_DependencyDirectoriesSlash)">
        <PathWithoutSlash>$([System.String]::new('%(PathWithSlash)').TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))</PathWithoutSlash>
      </_DependencyDirectoriesNoSlash>
      <_DependencyDirectories Remove="@(_DependencyDirectories)" />
      <_DependencyDirectories Include="%(_DependencyDirectoriesNoSlash.PathWithoutSlash)" />
    </ItemGroup>

    <PropertyGroup>
      <ILLinkArgs Condition="@(_DependencyDirectories->Count()) > 0">$(ILLinkArgs) -d @(_DependencyDirectories->'"%(Identity)"', ' -d ')</ILLinkArgs>
    </PropertyGroup>

    <!-- When running from Desktop MSBuild, DOTNET_HOST_PATH is not set.
         In this case, explicitly specify the path to the dotnet host. -->
    <PropertyGroup Condition=" '$(DOTNET_HOST_PATH)' == '' ">
      <_DotNetHostDirectory>$(DotNetRoot)</_DotNetHostDirectory>
      <_DotNetHostFileName>$([System.IO.Path]::GetFileName('$(DotNetTool)'))</_DotNetHostFileName>
    </PropertyGroup>

    <ILLink AssemblyPaths="$(ILLinkTrimInputAssembly)"
            RootAssemblyNames=""
            OutputDirectory="$(ILLinkTrimOutputPath)"
            ExtraArgs="$(ILLinkArgs)"
            ToolExe="$(_DotNetHostFileName)"
            ToolPath="$(_DotNetHostDirectory)" />

  </Target>

  <!-- ILLink reporting.
       Only enabled when developer specifies a path to the AsmDiff tool with property AsmDiffCmd.
       EG: AsmDiffCmd=d:\tools\asmdiff\asmdiff.exe
       This is necessary until the AsmDiff tool is ported to .NET Core. -->
  <Target Name="_CreateILLinkTrimAssemblyReports"
          AfterTargets="ILLinkTrimAssembly"
          Condition="'$(AsmDiffCmd)' != ''">
    <PropertyGroup>
      <AsmDiffArgs>$(AsmDiffArgs) $(ILLinkTrimInputAssembly)</AsmDiffArgs>
      <AsmDiffArgs>$(AsmDiffArgs) $(ILLinkTrimAssemblyPath)</AsmDiffArgs>
      <AsmDiffArgs>$(AsmDiffArgs) -includePrivateApis -includeInternalApis -alwaysDiffMembers -diffAttributes</AsmDiffArgs>

      <AsmDiffReport>$(IntermediateOutputPath)$(TargetName).diff.html</AsmDiffReport>
      <AsmDiffReportArgs>$(AsmDiffArgs) -out:$(AsmDiffReport)</AsmDiffReportArgs>
      <AsmDiffReportArgs>$(AsmDiffReportArgs) -unchanged -changed -added -removed</AsmDiffReportArgs>

      <AsmDiffList>$(IntermediateOutputPath)$(TargetName).diff.csv</AsmDiffList>
      <AsmDiffListArgs>$(AsmDiffArgs) -out:$(AsmDiffList)</AsmDiffListArgs>
      <AsmDiffListArgs>$(AsmDiffListArgs) -unchanged -changed -added -removed </AsmDiffListArgs>
      <AsmDiffListArgs>$(AsmDiffListArgs) -diffWriter:CSV</AsmDiffListArgs>
    </PropertyGroup>

    <Exec Command="$(AsmDiffCmd) $(AsmDiffReportArgs)" />
    <Message Text="Assembly trimming diff: $(AsmDiffReport)" />
    <Exec Command="$(AsmDiffCmd) $(AsmDiffListArgs)" />
    <Message Text="Assembly trimming report: $(AsmDiffList)" />
  </Target>

  <!-- Similar to _CheckForCompileOutputs and runs in the same places,
       always set these even if compile didn't run. -->
  <Target Name="_CheckForILLinkTrimAssemblyOutputs"
          BeforeTargets="CopyFilesToOutputDirectory;_CleanGetCurrentAndPriorFileWrites"
          Condition="'$(ILLinkTrimAssembly)' == 'true'">
    <ItemGroup>
      <PreTrimmedItem Condition="Exists('$(ILLinkTrimInputAssembly)')" Include="$(ILLinkTrimInputAssembly)" />
      <PreTrimmedItem Condition="'$(ILLinkRewritePDBs)' == 'true' and Exists('$(ILLinkTrimInputSymbols)')" Include="$(ILLinkTrimInputSymbols)" />
      <FileWrites Include="@(PreTrimmedItem)" />

      <TrimmedItem Condition="Exists('$(ILLinkTrimAssemblyPath)')" Include="$(ILLinkTrimAssemblyPath)" />
      <TrimmedItem Condition="'$(ILLinkRewritePDBs)' == 'true' and Exists('$(ILLinkTrimAssemblySymbols)')" Include="$(ILLinkTrimAssemblySymbols)" />

      <TrimmingReport Condition="Exists('$(AsmDiffReport)')" Include="$(AsmDiffReport)" />
      <TrimmingReport Condition="Exists('$(AsmDiffList)')" Include="$(AsmDiffList)" />
    </ItemGroup>
  </Target>
</Project>
