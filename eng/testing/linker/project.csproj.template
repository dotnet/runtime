<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!-- Needed for PublishTrimmed -->
    <NetCoreAppToolCurrent>{NetCoreAppToolCurrent}</NetCoreAppToolCurrent>
    <ToolsILLinkDir>{ToolsILLinkDir}</ToolsILLinkDir>
  </PropertyGroup>

  <!-- Use live illink bits. It is necessary to both import the package props and override
       the tasks assembly, because the live package props in the build output do not use
       the same layout as the NuGet package. -->
  <!-- This must be done after the usual nuget props imports, to override the implicitly referenced
       Microsoft.NET.ILLink.Tasks.props from the SDK. -->
  <Import Project="$(ToolsILLinkDir)$(NetCoreAppToolCurrent)/build/Microsoft.NET.ILLink.Tasks.props" />
  <PropertyGroup>
    <ILLinkTasksAssembly>$(ToolsILLinkDir)$(NetCoreAppToolCurrent)/ILLink.Tasks.dll</ILLinkTasksAssembly>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>{TargetFramework}</TargetFramework>
    <OutputType>Exe</OutputType>
    <NETCoreAppMaximumVersion>{NetCoreAppMaximumVersion}</NETCoreAppMaximumVersion>
    <UseMonoRuntime>{UseMonoRuntime}</UseMonoRuntime>
    <RuntimeIdentifier>{RuntimeIdentifier}</RuntimeIdentifier>
    <PublishAot>{PublishAot}</PublishAot>
    <AppHostSourcePath>{AppHostSourcePath}</AppHostSourcePath>
    <SingleFileHostSourcePath>{SingleFileHostSourcePath}</SingleFileHostSourcePath>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>

    <!-- wasm specific -->
    <MonoAOTCompilerDir>{MonoAOTCompilerDir}</MonoAOTCompilerDir>
    <MonoProjectRoot>{MonoProjectRoot}</MonoProjectRoot>
    <MonoAOTCompilerTasksAssemblyPath>{MonoAOTCompilerTasksAssemblyPath}</MonoAOTCompilerTasksAssemblyPath>
    <WasmAppBuilderTasksAssemblyPath>{WasmAppBuilderTasksAssemblyPath}</WasmAppBuilderTasksAssemblyPath>
    <MonoTargetsTasksAssemblyPath>{MonoTargetsTasksAssemblyPath}</MonoTargetsTasksAssemblyPath>
    <MicrosoftNetCoreAppRuntimePackRidDir>{MicrosoftNetCoreAppRuntimePackRidDir}</MicrosoftNetCoreAppRuntimePackRidDir>

    <!-- Needed for targetingpacks.targets -->
    <ProductVersion>{ProductVersion}</ProductVersion>
    <NetCoreAppCurrent>{NetCoreAppCurrent}</NetCoreAppCurrent>
    <NetCoreAppCurrentVersion>{NetCoreAppCurrentVersion}</NetCoreAppCurrentVersion>
    <MicrosoftNetCoreAppFrameworkName>{MicrosoftNetCoreAppFrameworkName}</MicrosoftNetCoreAppFrameworkName>
    <MicrosoftNetCoreAppRefPackDir>{MicrosoftNetCoreAppRefPackDir}</MicrosoftNetCoreAppRefPackDir>
    <MicrosoftNetCoreAppRuntimePackDir>{MicrosoftNetCoreAppRuntimePackDir}</MicrosoftNetCoreAppRuntimePackDir>

    <RepositoryEngineeringDir>{RepositoryEngineeringDir}</RepositoryEngineeringDir>
    <_ExtraTrimmerArgs>{ExtraTrimmerArgs} $(_ExtraTrimmerArgs)</_ExtraTrimmerArgs>
    {AdditionalProperties}

    <!-- Needed for PublishAot -->
    <IlcToolsPath>{IlcToolsPath}</IlcToolsPath>
    <IlcBuildTasksPath>{IlcBuildTasksPath}</IlcBuildTasksPath>
    <IlcSdkPath>{IlcSdkPath}</IlcSdkPath>
    <IlcFrameworkPath>{IlcFrameworkPath}</IlcFrameworkPath>
    <IlcFrameworkNativePath>{IlcFrameworkNativePath}</IlcFrameworkNativePath>
    <SysRoot Condition="('$(CrossBuild)' == 'true' or '$(BuildArchitecture)' != '$(TargetArchitecture)') and '$(ROOTFS_DIR)' != ''">$(ROOTFS_DIR)</SysRoot>
    <CoreCLRBuildIntegrationDir>{CoreCLRBuildIntegrationDir}</CoreCLRBuildIntegrationDir>
  </PropertyGroup>

  <ItemGroup>
    <CustomLinkerArg Condition="'$(CrossBuild)' == 'true' and '$(_hostArchitecture)' == '$(_targetArchitecture)' and '$(ROOTFS_DIR)' != ''" Include="--gcc-toolchain=$(ROOTFS_DIR)/usr" />
  </ItemGroup>

  <ItemGroup>
    {RuntimeHostConfigurationOptions}
  </ItemGroup>

  <ItemGroup>
    {AdditionalProjectReferences}
  </ItemGroup>

  <Target Name="LocateNativeCompiler"
          Condition="'$(PublishAot)' == 'true' and '$(_hostOS)' != 'win'"
          BeforeTargets="SetupOSSpecificProps">
    <PropertyGroup>
      <CppCompilerAndLinker Condition="'$(CppCompilerAndLinker)' == ''">clang</CppCompilerAndLinker>
    </PropertyGroup>

    <Exec Command="sh -c 'build_arch=&quot;$(TargetArchitecture)&quot; compiler=&quot;$(CppCompilerAndLinker)&quot; . &quot;$(RepositoryEngineeringDir)/common/native/init-compiler.sh&quot; &amp;&amp; echo &quot;$CC;$LDFLAGS&quot;' 2>/dev/null"
          EchoOff="true"
          ConsoleToMsBuild="true"
          StandardOutputImportance="Low">
      <Output TaskParameter="ConsoleOutput" PropertyName="_CC_LDFLAGS" />
    </Exec>

    <PropertyGroup>
      <CppLinker>$(_CC_LDFLAGS.SubString(0, $(_CC_LDFLAGS.IndexOf(';'))))</CppLinker>
      <_LDFLAGS>$(_CC_LDFLAGS.SubString($([MSBuild]::Add($(_CC_LDFLAGS.IndexOf(';')), 1))))</_LDFLAGS>
      <LinkerFlavor Condition="$(_LDFLAGS.Contains('lld'))">lld</LinkerFlavor>
    </PropertyGroup>
  </Target>

  <Import Project="{NativeSanitizersTargets}" />

</Project>
