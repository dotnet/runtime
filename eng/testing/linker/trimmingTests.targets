<Project>
  <PropertyGroup>
    <TrimmingTestDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsBinDir)', 'trimmingTests'))</TrimmingTestDir>
    <TrimmingTestProjectsDir>$([MSBuild]::NormalizeDirectory('$(TrimmingTestDir)', 'projects'))</TrimmingTestProjectsDir>
    <ProjectTemplate>$(MSBuildThisFileDirectory)project.csproj.template</ProjectTemplate>
  </PropertyGroup>

  <ItemGroup>
    <TestConsoleAppSourceFiles Condition="'@(TestConsoleAppSourceFiles)' == ''" Include="$(MSBuildProjectDirectory)\*.cs" />

    <TestSupportFiles Include="$(MSBuildThisFileDirectory)SupportFiles\Directory.Build.*">
      <DestinationFolder>$(TrimmingTestDir)</DestinationFolder>
    </TestSupportFiles>
  </ItemGroup>

  <Target Name="CreateTestDir"
          Inputs="@(TestSupportFiles)"
          Outputs="@(TestSupportFiles->'%(DestinationFolder)\%(FileName)%(Extension)')">
    <MakeDir Directories="%(TestSupportFiles.DestinationFolder)" />
    <Copy SourceFiles="@(TestSupportFiles)" DestinationFolder="%(TestSupportFiles.DestinationFolder)" />
  </Target>

  <Target Name="GetTestConsoleApps">
    <ItemGroup>
      <TestConsoleAppSourceFiles>
        <ProjectDir>$([MSBuild]::NormalizeDirectory('$(TrimmingTestProjectsDir)', '$(MSBuildProjectName)', '%(Filename)', '$(PackageRID)'))</ProjectDir>
        <TestRuntimeIdentifier>$(PackageRID)</TestRuntimeIdentifier>
      </TestConsoleAppSourceFiles>
      <!-- We need to separate Item metadata declaration in two in order to be able to use ProjectDir and TestRuntimeIdentifier bellow -->
      <TestConsoleAppSourceFiles>
        <ProjectFile>%(ProjectDir)project.csproj</ProjectFile>
        <TestCommand Condition="'$(TargetArchitecture)' != 'wasm' Or '$(TargetOs)' != 'browser'">$([MSBuild]::NormalizePath('%(ProjectDir)', 'bin', '$(Configuration)', '$(NetCoreAppCurrent)', '%(TestRuntimeIdentifier)', 'publish', 'project'))</TestCommand>
        <TestCommand Condition="'$(TargetArchitecture)' == 'wasm' And '$(TargetOs)' == 'browser'">$([MSBuild]::NormalizePath('%(ProjectDir)', 'bin', '$(Configuration)', '$(NetCoreAppCurrent)', '%(TestRuntimeIdentifier)', 'AppBundle', 'run-v8.sh'))</TestCommand>
        <TestExecutionDirectory Condition="'$(TargetArchitecture)' != 'wasm' Or '$(TargetOs)' != 'browser'">$([MSBuild]::NormalizeDirectory('%(ProjectDir)', 'bin', '$(Configuration)', '$(NetCoreAppCurrent)', '%(TestRuntimeIdentifier)', 'publish'))</TestExecutionDirectory>
        <TestExecutionDirectory Condition="'$(TargetArchitecture)' == 'wasm' And '$(TargetOs)' == 'browser'">$([MSBuild]::NormalizeDirectory('%(ProjectDir)', 'bin', '$(Configuration)', '$(NetCoreAppCurrent)', '%(TestRuntimeIdentifier)', 'AppBundle'))</TestExecutionDirectory>
      </TestConsoleAppSourceFiles>
    </ItemGroup>

    <ItemGroup Condition="!$(SkipOnTestRuntimes.Contains('$(PackageRID)'))">
      <TestConsoleApps Include="@(TestConsoleAppSourceFiles->'%(ProjectFile)')" Condition="!$([System.String]::Copy('%(TestConsoleAppSourceFiles.SkipOnTestRuntimes)').Contains('$(PackageRID)'))">
        <ProjectCompileItems>%(Identity)</ProjectCompileItems>
      </TestConsoleApps>
    </ItemGroup>
  </Target>

  <Target Name="GenerateProjects"
          DependsOnTargets="GetTestConsoleApps;CreateTestDir"
          Inputs="@(TestConsoleAppSourceFiles);$(ProjectTemplate);@(TestSupportFiles)"
          Outputs="%(TestConsoleApps.Identity)">
    <PropertyGroup>
      <_projectDir>%(TestConsoleApps.ProjectDir)\</_projectDir>
      <_projectFile>%(TestConsoleApps.ProjectFile)</_projectFile>
      <_projectSourceFile>%(TestConsoleApps.ProjectCompileItems)</_projectSourceFile>
    </PropertyGroup>

    <ItemGroup Condition="'$(AdditionalProjectReferences)' != ''">
      <_additionalProjectReferenceTemp Include="$(AdditionalProjectReferences)" />
      <_additionalProjectReference Include="&lt;ProjectReference Include=&quot;$(LibrariesProjectRoot)%(_additionalProjectReferenceTemp.Identity)\src\%(_additionalProjectReferenceTemp.Identity).csproj&quot; SkipUseReferenceAssembly=&quot;true&quot; /&gt;" />
    </ItemGroup>
    
    <PropertyGroup>
      <_additionalProjectReferencesString>@(_additionalProjectReference, '%0a')</_additionalProjectReferencesString>
    </PropertyGroup>

    <ItemGroup>
      <_additionalProjectSourceFiles Include="%(TestConsoleApps.AdditionalSourceFiles)" />
    </ItemGroup>

    <MakeDir Directories="$(_projectDir)" />
    <WriteLinesToFile File="$(_projectFile)"
                      Lines="$([System.IO.File]::ReadAllText('$(ProjectTemplate)')
                                                 .Replace('{MicrosoftNETCoreAppVersion}', '$(MicrosoftNETCoreAppVersion)')
                                                 .Replace('{NetCoreAppCurrent}', '$(NetCoreAppCurrent)')
                                                 .Replace('{NetCoreAppMaximumVersion}', '$(NetCoreAppMaximumVersion)')
                                                 .Replace('{TargetingPackDir}','$(MicrosoftNetCoreAppRefPackDir)')
                                                 .Replace('{RuntimeIdentifier}','%(TestConsoleApps.TestRuntimeIdentifier)')
                                                 .Replace('{UseMonoRuntime}','$(UseMonoRuntime)')
                                                 .Replace('{MicrosoftNETILLinkTasksVersion}', '$(MicrosoftNETILLinkTasksVersion)')
                                                 .Replace('{ExtraTrimmerArgs}', '%(TestConsoleApps.ExtraTrimmerArgs)')
                                                 .Replace('{AdditionalProjectReferences}', '$(_additionalProjectReferencesString)')
                                                 .Replace('{RepositoryEngineeringDir}', '$(RepositoryEngineeringDir)')
                                                 .Replace('{MonoAOTCompilerDir}', '$(MonoAOTCompilerDir)')
                                                 .Replace('{MonoProjectRoot}', '$(MonoProjectRoot)')
                                                 .Replace('{MonoAOTCompilerTasksAssemblyPath}', '$(MonoAOTCompilerTasksAssemblyPath)')
                                                 .Replace('{WasmAppBuilderTasksAssemblyPath}', '$(WasmAppBuilderTasksAssemblyPath)')
                                                 .Replace('{MicrosoftNetCoreAppRuntimePackRidDir}', '$(MicrosoftNetCoreAppRuntimePackRidDir)'))"
                      Overwrite="true" />
    <Copy SourceFiles="$(_projectSourceFile)"
          DestinationFolder="$(_projectDir)" />
    <Copy SourceFiles="@(_additionalProjectSourceFiles)"
          DestinationFolder="$(_projectDir)"
          Condition="'@(_additionalProjectSourceFiles)' != ''" />
    <Message Text="Generated $(_projectFile)" />
  </Target>

  <Target Name="GetTrimmingProjectsToRestore"
          DependsOnTargets="GenerateProjects"
          Returns="@(TestConsoleApps)" />

  <Target Name="PublishTrimmedProjects"
          DependsOnTargets="GenerateProjects">

    <MSBuild Projects="@(TestConsoleApps)"
             Targets="Restore"
             Condition="'$(SkipTrimmingProjectsRestore)' != 'true'"
             Properties="MSBuildRestoreSessionId=$([System.Guid]::NewGuid());Configuration=$(Configuration)" />

    <MSBuild Projects="@(TestConsoleApps)"
             Targets="Publish"
             Properties="Configuration=$(Configuration);BuildProjectReferences=false" />
  </Target>

  <Target Name="ExecuteApplications"
          DependsOnTargets="PublishTrimmedProjects"
          Inputs="%(TestConsoleApps.Identity)"
          Outputs="_unused"
          Condition="'$(ArchiveTests)' != 'true'">

    <Message Importance="High" Text="[Trimming Tests] Running test: %(TestConsoleApps.ProjectCompileItems)..." />
    <Exec IgnoreExitCode="true" Command="%(TestConsoleApps.TestCommand)" StandardOutputImportance="Low" WorkingDirectory="%(TestConsoleApps.TestExecutionDirectory)">
      <Output TaskParameter="ExitCode" PropertyName="ExecutionExitCode" />
    </Exec>

    <Error Condition="'$(ExecutionExitCode)' != '100'" Text="Error: [Failed Test]: %(TestConsoleApps.ProjectCompileItems) The Command %(TestConsoleApps.TestCommand) return a non-success exit code." ContinueOnError="ErrorAndContinue" />
  </Target>

  <Target Name="Build" DependsOnTargets="ExecuteApplications" />

  <!-- define test to do nothing, for this project Build does all the testing -->
  <Target Name="Test" DependsOnTargets="Build" />
  <Target Name="VSTest" DependsOnTargets="Build" />
</Project>
