<Project>
  <Import Project="$(MSBuildThisFileDirectory)ProvisioningVersions.props" />

  <PropertyGroup Condition="'$(ChromeOSIdentifier)' == 'linux'">
    <ChromeDirName>chrome-linux</ChromeDirName>
    <ChromeDriverDirName>chromedriver_linux64</ChromeDriverDirName>
    <ChromeBinaryName>chrome</ChromeBinaryName>
    <ChromeDriverBinaryName>chromedriver</ChromeDriverBinaryName>
    <_ChromeOSPrefix>Linux_x64</_ChromeOSPrefix>
  </PropertyGroup>

  <PropertyGroup Condition="'$(ChromeOSIdentifier)' == 'win'">
    <ChromeDirName>chrome-win</ChromeDirName>
    <ChromeDriverDirName>chromedriver_win32</ChromeDriverDirName>
    <ChromeBinaryName>chrome.exe</ChromeBinaryName>
    <ChromeDriverBinaryName>chromedriver.exe</ChromeDriverBinaryName>
    <_ChromeOSPrefix>Win_x64</_ChromeOSPrefix>
  </PropertyGroup>

  <PropertyGroup>
    <_BrowserStampDir>$(ArtifactsBinDir)\</_BrowserStampDir>
    <ChromeBinaryPath>$([MSBuild]::NormalizePath($(ChromeDir), $(ChromeDirName), $(ChromeBinaryName)))</ChromeBinaryPath>
    <ChromeDriverBinaryPath>$([MSBuild]::NormalizePath($(ChromeDriverDir), $(ChromeDriverDirName), $(ChromeDriverBinaryName)))</ChromeDriverBinaryPath>

    <GeneratePrereqsForTestingManifest Condition="'$(GeneratePrereqsForTestingManifest)' == ''">$(InstallChromeForTests)</GeneratePrereqsForTestingManifest>

    <InstallWasmTestsPrerequisitesDependsOn>
      $(InstallWasmTestsPrerequisitesDependsOn);
      GetChromeVersion;
      _DownloadAndInstallChrome;
      _DownloadAndInstallChromeDriver;
      DownloadAndInstallFirefox;
      ProvisionV8
    </InstallWasmTestsPrerequisitesDependsOn>

    <_JsvuDir>$([MSBuild]::NormalizeDirectory($(ArtifactsObjDir), 'jsvu'))</_JsvuDir>
    <EMSDK_PATH Condition="'$(EMSDK_PATH)' == '' and '$(MonoProjectRoot)' != ''">$([MSBuild]::NormalizeDirectory($(MonoProjectRoot), 'wasm', 'emsdk'))</EMSDK_PATH>
  </PropertyGroup>

  <Target Name="_DownloadAndInstallChrome"
          Condition="(!Exists($(ChromeStampFile)) or !Exists($(ChromeBinaryPath))) and '$(InstallChromeForTests)' == 'true'">

    <RemoveDir Directories="$(ChromeDir)" />

    <Message Text="** Installing chrome version $(ChromeVersion), rev: $(ChromeRevision). To disable this set the msuild property InstallChromeForTests=false ."
             Importance="High" />

    <DownloadFile SourceUrl="$(ChromeUrl)" DestinationFolder="$(ArtifactsObjDir)" SkipUnchangedFiles="false">
      <Output TaskParameter="DownloadedFile" PropertyName="_DownloadedFile" />
    </DownloadFile>
    <Unzip SourceFiles="$(_DownloadedFile)" DestinationFolder="$(ChromeDir)" />

    <Error Text="Cannot find chrome at $(ChromeBinaryPath) in the downloaded copy"
           Condition="!Exists($(ChromeBinaryPath))" />

    <Exec Command="chmod +x $(ChromeBinaryPath)" Condition="!$([MSBuild]::IsOSPlatform('windows'))" />

    <Touch Files="$(ChromeStampFile)" AlwaysCreate="true" />
  </Target>

  <Target Name="_DownloadAndInstallChromeDriver"
          Condition="(!Exists($(ChromeDriverStampFile)) or !Exists($(ChromeDriverBinaryPath))) and '$(InstallChromeForTests)' == 'true'">

    <RemoveDir Directories="$(ChromeDriverDir)" />

    <Message Text="** Installing chromedriver version $(ChromeVersion), rev: $(ChromeRevision). To disable this set the msuild property InstallChromeForTests=false ."
             Importance="High" />

    <DownloadFile SourceUrl="$(ChromeDriverUrl)" DestinationFolder="$(ArtifactsObjDir)" SkipUnchangedFiles="false">
      <Output TaskParameter="DownloadedFile" PropertyName="_DownloadedFile" />
    </DownloadFile>
    <Unzip SourceFiles="$(_DownloadedFile)" DestinationFolder="$(ChromeDriverDir)" />

    <Error Text="Cannot find chromedriver at $(ChromeDriverBinaryPath) in the downloaded copy"
           Condition="!Exists($(ChromeDriverBinaryPath))" />

    <Exec Command="chmod +x $(ChromeDriverBinaryPath)" Condition="!$([MSBuild]::IsOSPlatform('windows'))" />

    <Touch Files="$(ChromeDriverStampFile)" AlwaysCreate="true" />
  </Target>

  <Target Name="DownloadAndInstallFirefox"
          Condition="!Exists($(FirefoxStampFile)) and '$(InstallFirefoxForTests)' == 'true' and !$([MSBuild]::IsOSPlatform('windows'))">
    <ItemGroup>
      <_StampFile Include="$(_BrowserStampDir).install-firefox*.stamp" />
    </ItemGroup>

    <Delete Files="@(_StampFile)" />
    <RemoveDir Directories="$(FirefoxDir)" />

    <DownloadFile SourceUrl="$(FirefoxUrl)" DestinationFolder="$(FirefoxDir)" SkipUnchangedFiles="true">
      <Output TaskParameter="DownloadedFile" PropertyName="_DownloadedFile" />
    </DownloadFile>
    <Exec Command="tar -xf $(_DownloadedFile) -C $(FirefoxDir)"/>
    <Exec Command="rm -rf $(_DownloadedFile)"/>

    <PropertyGroup>
      <_FirefoxBinaryPath>$([MSBuild]::NormalizePath($(FirefoxDir), $(FirefoxBinaryName)))</_FirefoxBinaryPath>
    </PropertyGroup>

    <Error Text="Cannot find firefox at $(_FirefoxBinaryPath) in the downloaded copy"
           Condition="!Exists($(_FirefoxBinaryPath))" />

    <Exec Command="chmod +x $(_FirefoxBinaryPath)"/>

    <Touch Files="$(FirefoxStampFile)" AlwaysCreate="true" />
  </Target>

  <UsingTask AssemblyFile="$(WasmBuildTasksAssemblyPath)"
             TaskName="Microsoft.WebAssembly.Build.Tasks.GetChromeVersions" />

  <Target Name="GetChromeVersion"
          Condition="'$(InstallChromeForTests)' == 'true' or '$(GeneratePrereqsForTestingManifest)' == 'true'">

    <GetChromeVersions
                OSIdentifier="$(ChromeOSIdentifier)"
                OSPrefix="$(_ChromeOSPrefix)"
                Channel="$(ChromeChannel)"
                IntermediateOutputPath="$(ArtifactsObjDir)">
      <Output TaskParameter="ChromeVersion"      PropertyName="ChromeVersion" />
      <Output TaskParameter="V8Version"          PropertyName="V8Version" />
      <Output TaskParameter="BranchPosition"     PropertyName="ChromeRevision" />
      <Output TaskParameter="BaseSnapshotUrl"    PropertyName="_ChromeBaseSnapshotUrl" />
    </GetChromeVersions>

    <PropertyGroup Condition="'$(ChromeOSIdentifier)' == 'linux'">
      <ChromeUrl>$(_ChromeBaseSnapshotUrl)/chrome-linux.zip</ChromeUrl>
      <ChromeDriverUrl>$(_ChromeBaseSnapshotUrl)/chromedriver_linux64.zip</ChromeDriverUrl>
    </PropertyGroup>
    <PropertyGroup Condition="'$(ChromeOSIdentifier)' == 'win'">
      <ChromeUrl>$(_ChromeBaseSnapshotUrl)/chrome-win.zip</ChromeUrl>
      <ChromeDriverUrl>$(_ChromeBaseSnapshotUrl)/chromedriver_win32.zip</ChromeDriverUrl>
    </PropertyGroup>

    <PropertyGroup>
      <ChromeStampFile>$([MSBuild]::NormalizePath('$(ChromeDir)', '.install-$(ChromeVersion)-$(ChromeRevision).stamp'))</ChromeStampFile>
      <ChromeDriverStampFile>$([MSBuild]::NormalizePath('$(ChromeDriverDir)', '.install-$(ChromeVersion)-$(ChromeRevision).stamp'))</ChromeDriverStampFile>

      <_TestPrereqsManifestJson>
<![CDATA[
{
  "v8": {
    "version": "$(V8Version)"
  }
}
]]>
      </_TestPrereqsManifestJson>

      <_V8VersionTruncated />
      <_V8VersionTruncated Condition="'$(V8VersionForTesting)' != ''">$(V8VersionForTesting)</_V8VersionTruncated>
      <_V8VersionTruncated Condition="'$(_V8VersionTruncated)' == ''">$([System.Text.RegularExpressions.Regex]::Replace($(V8Version), '(^\d+\.\d+.\d+).*$', '$1'))</_V8VersionTruncated>

      <V8StampFile>$([MSBuild]::NormalizePath($(_JsvuDir), '.install-v8-$(_V8VersionTruncated).stamp'))</V8StampFile>
    </PropertyGroup>
    <ItemGroup>
      <_TestPrereqsManifestEnvVar Include="PREREQ_V8_VERSION=$(V8Version)" />
      <_TestPrereqsManifestEnvVar Condition="'$(_V8VersionTruncated)' != ''" Include="PREREQ_JSVU_INSTALL_ARGS=&quot;--engines=v8@$(_V8VersionTruncated)&quot;" />
      <_TestPrereqsManifestEnvVar Condition="'$(_V8VersionTruncated)' == ''" Include="PREREQ_JSVU_INSTALL_ARGS=&quot;--engines=v8&quot;" />

      <_TestPrereqsManifestEnvVar Include="PREREQ_NODEJS_SETUP_VERSION=14.x" />
    </ItemGroup>

    <WriteLinesToFile
              Lines="$(_TestPrereqsManifestJson)"
              File="$(ArtifactsBinDir)test-prereqs-manifest.json"
              Overwrite="true"
              WriteOnlyWhenDifferent="true"
              />
    <WriteLinesToFile
              Lines="@(_TestPrereqsManifestEnvVar)"
              File="$(ArtifactsBinDir)test-prereqs.env"
              Overwrite="true"
              WriteOnlyWhenDifferent="true"
              />
  </Target>

  <UsingTask TaskName="Microsoft.WebAssembly.Build.Tasks.RunWithEmSdkEnv" AssemblyFile="$(WasmAppBuilderTasksAssemblyPath)" />
  <Target Name="ProvisionV8"
          Condition="!Exists($(V8StampFile)) and '$(InstallChromeForTests)' == 'true'">

    <ItemGroup>
      <_JsvuInstallArgs Condition="'$(_V8VersionTruncated)' != ''" Include="v8@$(_V8VersionTruncated)" />
      <_JsvuInstallArgs Condition="'$(_V8VersionTruncated)' == ''" Include="--engines=v8" />

      <!-- os={mac64,mac64arm,linux32,linux64,win32,win64,default} -->
      <_JsvuInstallArgs Condition="$([MSBuild]::IsOSPlatform('windows'))"
                        Include="--os=win64" />
      <_JsvuInstallArgs Condition="$([MSBuild]::IsOSPlatform('linux'))"
                        Include="--os=linux64" />
      <_JsvuInstallArgs Condition="$([MSBuild]::IsOSPlatform('osx')) and '$(BuildArchitecture)' == 'arm64'"
                        Include="--os=mac64arm" />
      <_JsvuInstallArgs Condition="$([MSBuild]::IsOSPlatform('osx')) and '$(BuildArchitecture)' != 'arm64'"
                        Include="--os=mac64" />
    </ItemGroup>

    <RemoveDir Directories="$(_JsvuDir)" />
    <MakeDir Directories="$(_JsvuDir)" />

    <Message Text="** Installing V8@$(_V8VersionTruncated) . Set %24(V8VersionForTesting) to override, or %24(InstallChromeForTests)=false to skip." Importance="High" />

    <RunWithEmSdkEnv
              Command="npm install jsvu --prefix=$(_JsvuDir)"
              EmSdkPath="$(EMSDK_PATH)"
              IgnoreStandardErrorWarningFormat="true"
              WorkingDirectory="$(ArtifactsDir)" />

    <!-- FIXME: path sep on windows -->
    <RunWithEmSdkEnv
              Command="jsvu @(_JsvuInstallArgs, ' ')"
              EnvironmentVariables="PATH=$(_JsvuDir):$(PATH)"
              EmSdkPath="$(EMSDK_PATH)"
              StandardOutputImportance="High"
              StandardErrorImportance="High"
              IgnoreStandardErrorWarningFormat="true"
              WorkingDirectory="$(ArtifactsObjDir)" />

    <Touch Files="$(V8StampFile)" AlwaysCreate="true" />
  </Target>

  <Target Name="InstallWasmTestsPrerequisites"
          AfterTargets="Build"
          DependsOnTargets="$(InstallWasmTestsPrerequisitesDependsOn)" />
</Project>
