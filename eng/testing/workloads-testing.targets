<Project>

  <PropertyGroup Condition="'$(TestUsingWorkloads)' == 'true'">
    <!-- for non-ci builds, we install the sdk when tests are run -->
    <InstallWorkloadForTesting Condition="'$(ContinuousIntegrationBuild)' == 'true' and '$(ArchiveTests)' == 'true'">true</InstallWorkloadForTesting>
  </PropertyGroup>

  <ItemGroup>
    <_DefaultPropsForNuGetBuild Include="Configuration=$(Configuration)" />
    <_DefaultPropsForNuGetBuild Include="TargetOS=Browser" />
    <_DefaultPropsForNuGetBuild Include="TargetArchitecture=wasm" />
    <_DefaultPropsForNuGetBuild Include="ContinuousIntegrationBuild=$(ContinuousIntegrationBuild)" />
  </ItemGroup>

  <Target Name="ProvisionSdkForWorkloadTesting"
          DependsOnTargets="_ProvisionSdkWithNoWorkload"
          Condition="!Exists($(SdkWithNoWorkloadStampPath)) or !Exists($(SdkWithWorkloadStampPath))">

    <Error Text="%24(SdkWithWorkloadForTestingPath) is not set" Condition="'$(SdkWithWorkloadForTestingPath)' == ''" />

    <Message Text="** Installing sdk $(SdkVersionForWorkloadTesting) for workload based tests into $(SdkWithWorkloadForTestingPath)"
             Condition="'$(SdkVersionForWorkloadTesting)' != ''"
             Importance="High" />
    <Message Text="** Installing latest sdk for workload based tests into $(SdkWithWorkloadForTestingPath)"
             Condition="'$(SdkVersionForWorkloadTesting)' == ''"
             Importance="High" />

    <RemoveDir Directories="$(SdkWithWorkloadForTestingPath)" />
    <MakeDir Directories="$(SdkWithWorkloadForTestingPath)" />

    <ItemGroup>
      <_SourceFiles Include="$(SdkWithNoWorkloadForTestingPath)\**" />
    </ItemGroup>

    <Copy SourceFiles="@(_SourceFiles)" DestinationFolder="$(SdkWithWorkloadForTestingPath)\%(_SourceFiles.RecursiveDir)" />

    <WriteLinesToFile File="$(SdkWithWorkloadStampPath)" Lines="" Overwrite="true" />
  </Target>

  <Target Name="_ProvisionSdkWithNoWorkload" Condition="!Exists($(SdkWithNoWorkloadStampPath))">
    <Error Text="%24(SdkWithNoWorkloadForTestingPath) is not set" Condition="'$(SdkWithNoWorkloadForTestingPath)' == ''" />

    <Message Text="** Installing sdk $(SdkVersionForWorkloadTesting) for workload based tests into $(SdkWithNoWorkloadForTestingPath)"
             Condition="'$(SdkVersionForWorkloadTesting)' != ''"
             Importance="High" />
    <Message Text="** Installing latest sdk for workload based tests into $(SdkWithNoWorkloadForTestingPath)"
             Condition="'$(SdkVersionForWorkloadTesting)' == ''"
             Importance="High" />

    <RemoveDir Directories="$(SdkWithNoWorkloadForTestingPath)" />
    <MakeDir Directories="$(SdkWithNoWorkloadForTestingPath)" />

    <PropertyGroup>
      <_DotNetInstallScriptName Condition="!$([MSBuild]::IsOSPlatform('windows'))">dotnet-install.sh</_DotNetInstallScriptName>
      <_DotNetInstallScriptName Condition=" $([MSBuild]::IsOSPlatform('windows'))">dotnet-install.ps1</_DotNetInstallScriptName>

      <_DotNetInstallScriptPath>$(ArtifactsObjDir)$(_DotNetInstallScriptName)</_DotNetInstallScriptPath>
    </PropertyGroup>

    <PropertyGroup Condition="'$(SdkVersionForWorkloadTesting)' != ''">
      <_DotNetInstallCommand Condition="!$([MSBuild]::IsOSPlatform('windows'))"
              >$(_DotNetInstallScriptPath) -i $(SdkWithNoWorkloadForTestingPath) -v $(SdkVersionForWorkloadTesting)</_DotNetInstallCommand>
      <_DotNetInstallCommand Condition="$([MSBuild]::IsOSPlatform('windows'))"
              >$(_DotNetInstallScriptPath) -InstallDir $(SdkWithNoWorkloadForTestingPath) -Version $(SdkVersionForWorkloadTesting)</_DotNetInstallCommand>
    </PropertyGroup>

    <PropertyGroup Condition="'$(SdkVersionForWorkloadTesting)' == ''">
      <_DotNetInstallCommand Condition="!$([MSBuild]::IsOSPlatform('windows'))"
              >$(_DotNetInstallScriptPath) -i $(SdkWithNoWorkloadForTestingPath) -v latest -q daily --channel 7.0</_DotNetInstallCommand>
      <_DotNetInstallCommand Condition="$([MSBuild]::IsOSPlatform('windows'))"
              >$(_DotNetInstallScriptPath) -InstallDir $(SdkWithNoWorkloadForTestingPath) -Quality daily -Channel 7.0</_DotNetInstallCommand>
    </PropertyGroup>

    <DownloadFile SourceUrl="https://dot.net/v1/$(_DotNetInstallScriptName)"
                  DestinationFolder="$(ArtifactsObjDir)"
                  Retries="3"
                  Condition="!Exists($(_DotNetInstallScriptPath))"/>

    <Exec Condition="!$([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command="chmod +x $(_DotNetInstallScriptPath); $(_DotNetInstallCommand)" />

    <Exec Condition="$([MSBuild]::IsOSPlatform('windows'))"
          Command='powershell -ExecutionPolicy ByPass -NoProfile -command "&amp; $(_DotNetInstallCommand)"' />

    <WriteLinesToFile File="$(SdkWithNoWorkloadStampPath)" Lines="" Overwrite="true" />
  </Target>

  <Target Name="GetWorkloadInputs">
    <ItemGroup>
      <AvailableNuGetsInArtifacts Include="$(LibrariesShippingPackagesDir)\*.nupkg" />
    </ItemGroup>

    <Error Text="Cannot find any nupkg files in $(LibrariesShippingPackagesDir), needed for workloads" Condition="@(AvailableNuGetsInArtifacts->Count()) == 0" />
  </Target>

  <UsingTask Condition="'$(InstallWorkloadForTesting)' == 'true'"
             TaskName="Microsoft.Workload.Build.Tasks.InstallWorkloadFromArtifacts"
             AssemblyFile="$(WorkloadBuildTasksAssemblyPath)" />

  <UsingTask Condition="'$(InstallWorkloadForTesting)' == 'true'"
             TaskName="GenerateFileFromTemplate"
             AssemblyFile="$(WorkloadBuildTasksAssemblyPath)" />

  <Target Name="InstallWorkloadUsingArtifacts"
          AfterTargets="ArchiveTests"
          DependsOnTargets="_GetNuGetsToBuild;_PreparePackagesForWorkloadInstall;ProvisionSdkForWorkloadTesting;GetWorkloadInputs;_InstallWorkload;_UpdateManifestsForSdkWithNoWorkload"
          Condition="'$(InstallWorkloadForTesting)' == 'true'" />

  <Target Name="_GetNuGetsToBuild" Returns="@(_NuGetsToBuild)" DependsOnTargets="_GetRuntimePackNuGetsToBuild">
    <PropertyGroup>
      <_PackageVersion>$(PackageVersion)</_PackageVersion>
      <_PackageVersion Condition="'$(StabilizePackageVersion)' == 'true'">$(ProductVersion)</_PackageVersion>
      <!-- Eg. Microsoft.NETCore.App.Runtime.AOT.osx-x64.Cross.browser-wasm.6.0.0-dev.nupkg -->
      <_AOTCrossNuGetPath>$(LibrariesShippingPackagesDir)Microsoft.NETCore.App.Runtime.AOT.$(NETCoreSdkRuntimeIdentifier).Cross.$(RuntimeIdentifier).$(_PackageVersion).nupkg</_AOTCrossNuGetPath>
    </PropertyGroup>

    <ItemGroup>
      <_NuGetsToBuild Include="$(LibrariesShippingPackagesDir)Microsoft.NETCore.App.Ref.$(_PackageVersion).nupkg"
                      Project="$(InstallerProjectRoot)pkg/sfx/Microsoft.NETCore.App\Microsoft.NETCore.App.Ref.sfxproj"
                      Properties="@(_DefaultPropsForNuGetBuild, ';')"
                      Descriptor="Ref pack"/>

      <!-- AOT Cross compiler -->
      <_PropsForAOTCrossBuild Include="@(_DefaultPropsForNuGetBuild)" />
      <_PropsForAOTCrossBuild Include="TestingWorkloads=true" />
      <_PropsForAOTCrossBuild Include="RuntimeIdentifier=$(NETCoreSdkRuntimeIdentifier)" />
      <_PropsForAOTCrossBuild Include="TargetCrossRid=$(RuntimeIdentifier)" />
      <_PropsForAOTCrossBuild Include="DisableSourceLink=true" />

      <_NuGetsToBuild Include="$(_AOTCrossNuGetPath)"
                      Project="$(InstallerProjectRoot)pkg/sfx/Microsoft.NETCore.App\Microsoft.NETCore.App.MonoCrossAOT.sfxproj"
                      Properties="@(_PropsForAOTCrossBuild,';')"
                      Descriptor="AOT Cross compiler"/>
    </ItemGroup>
  </Target>

  <Target Name="_PreparePackagesForWorkloadInstall" Inputs="%(_NuGetsToBuild.Project);%(_NuGetsToBuild.Dependencies)" Outputs="%(_NuGetsToBuild.Identity)">
    <Message Importance="High" Text="
** Building %(_NuGetsToBuild.Descriptor) **
      " />

    <MSBuild Projects="%(_NuGetsToBuild.Project)"
             Properties="%(_NuGetsToBuild.Properties)"
             Targets="Restore" />
    <MSBuild Projects="%(_NuGetsToBuild.Project)"
             Properties="%(_NuGetsToBuild.Properties)"
             Targets="Pack" />
  </Target>

  <!-- For local builds, only one of the 3 required runtime packs might be available. In that case,
       build the other nugets with the *same runtime* but different names.
  -->
  <Target Name="_GetRuntimePackNuGetsToBuild" Condition="'$(TargetOS)' == 'Browser' and '$(WasmSkipMissingRuntimePackBuild)' != 'true'" Returns="@(_NuGetsToBuild)">
    <PropertyGroup>
      <_PackageVersion>$(PackageVersion)</_PackageVersion>
      <_PackageVersion Condition="'$(StabilizePackageVersion)' == 'true'">$(ProductVersion)</_PackageVersion>

      <_DefaultBuildVariant Condition="'$(WasmEnableThreads)' == 'true' or '$(MonoWasmBuildVariant)' == 'multithread'">.multithread.</_DefaultBuildVariant>
      <_DefaultBuildVariant Condition="'$(WasmEnablePerfTracing)' == 'true' or '$(MonoWasmBuildVariant)' == 'perftrace'">.perftrace.</_DefaultBuildVariant>
      <_DefaultBuildVariant Condition="'$(_DefaultBuildVariant)' == ''">.</_DefaultBuildVariant>

      <_DefaultRuntimePackNuGetPath>$(LibrariesShippingPackagesDir)Microsoft.NETCore.App.Runtime.Mono$(_DefaultBuildVariant)browser-wasm.$(_PackageVersion).nupkg</_DefaultRuntimePackNuGetPath>
    </PropertyGroup>

    <ItemGroup>
      <_RuntimePackNugetAvailable Include="$(LibrariesShippingPackagesDir)Microsoft.NETCore.App.Runtime.Mono*$(_PackageVersion).nupkg" />
    </ItemGroup>

    <Error Condition="@(_RuntimePackNugetAvailable -> Count()) != 3 and @(_RuntimePackNugetAvailable -> Count()) != 1"
           Text="Multiple runtime pack nugets found. Expected to find either one or three in $(LibrariesShippingPackagesDir): @(_RuntimePackNugetAvailable->'%(FileName)%(Extension)')" />

    <ItemGroup>
      <_BuildVariants Include="multithread" Condition="'$(_DefaultBuildVariant)' != '.multithread.'" />
      <_BuildVariants Include="perftrace"   Condition="'$(_DefaultBuildVariant)' != '.perftrace.'" />

      <_NuGetsToBuild Include="$(LibrariesShippingPackagesDir)Microsoft.NETCore.App.Runtime.Mono.%(_BuildVariants.Identity).browser-wasm.$(_PackageVersion).nupkg"
                      Project="$(InstallerProjectRoot)pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Runtime.sfxproj"
                      Dependencies="$(_DefaultRuntimePackNuGetPath)"
                      Properties="@(_DefaultPropsForNuGetBuild, ';');MonoWasmBuildVariant=%(_BuildVariants.Identity)"
                      Descriptor="runtime pack for %(_BuildVariants.Identity)" />

      <!-- add for non-threaded runtime also -->
      <_NuGetsToBuild Include="$(LibrariesShippingPackagesDir)Microsoft.NETCore.App.Runtime.Mono.browser-wasm.$(_PackageVersion).nupkg"
                      Project="$(InstallerProjectRoot)pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Runtime.sfxproj"
                      Properties="@(_DefaultPropsForNuGetBuild, ';')"
                      Dependencies="$(_DefaultRuntimePackNuGetPath)"
                      Descriptor="single threaded runtime pack"
                      Condition="'$(_DefaultBuildVariant)' != '.'" />
    </ItemGroup>

    <Message
        Condition="@(_RuntimePackNugetAvailable -> Count()) == 1"
        Importance="High"
        Text="
      ********************

      Note: Could not find the expected three runtime packs in $(LibrariesShippingPackagesDir). Found @(_RuntimePackNugetAvailable->'%(FileName)%(Extension)', ', ') .
            To support local builds, the same runtime pack will be built with the other variant names.
            To disable this behavior, pass `-p:WasmSkipMissingRuntimePackBuild=true` .

      *******************" />
  </Target>

  <Target Name="_InstallWorkload"
          Inputs="@(AvailableNuGetsInArtifacts)"
          Outputs="$(SdkWithWorkload_WorkloadStampPath)">
    <ItemGroup>
      <_BuiltNuGets Include="$(LibrariesShippingPackagesDir)\*.nupkg" />
    </ItemGroup>

    <PropertyGroup>
    </PropertyGroup>

    <Error Text="Could not find cross compiler nupkg at $(_AOTCrossNuGetPath). Found packages: @(_BuiltNuGets)"
           Condition="!Exists($(_AOTCrossNuGetPath))" />

    <Message Text="Packages found in $(LibrariesShippingPackagesDir): @(_BuiltNuGets)" Importance="Low" />

    <InstallWorkloadFromArtifacts
                     WorkloadIds="@(WorkloadIdForTesting)"
                     VersionBand="$(SdkBandVersion)"
                     LocalNuGetsPath="$(LibrariesShippingPackagesDir)"
                     TemplateNuGetConfigPath="$(RepoRoot)NuGet.config"
                     SdkDir="$(SdkWithWorkloadForTestingPath)" />
    <WriteLinesToFile File="$(SdkWithWorkload_WorkloadStampPath)" Lines="" Overwrite="true" />
  </Target>

  <Target Name="_UpdateManifestsForSdkWithNoWorkload"
          Inputs="@(AvailableNuGetsInArtifacts)"
          Outputs="$(SdkWithNoWorkload_WorkloadStampPath)">

    <InstallWorkloadFromArtifacts
                     WorkloadIds="@(WorkloadIdForTesting)"
                     VersionBand="$(SdkBandVersion)"
                     LocalNuGetsPath="$(LibrariesShippingPackagesDir)"
                     TemplateNuGetConfigPath="$(RepoRoot)NuGet.config"
                     SdkDir="$(SdkWithNoWorkloadForTestingPath)"
                     OnlyUpdateManifests="true"/>

    <WriteLinesToFile File="$(SdkWithNoWorkload_WorkloadStampPath)" Lines="" Overwrite="true" />
  </Target>
</Project>
