<Project>
  <PropertyGroup>
    <!-- OutDir is not set early enough to set this property in .props file. -->
    <BundleDir>$([MSBuild]::NormalizeDirectory('$(OutDir)', 'AppBundle'))</BundleDir>
    <RunScriptOutputPath>$([MSBuild]::NormalizePath('$(BundleDir)', '$(RunScriptOutputName)'))</RunScriptOutputPath>
    <RunAOTCompilation Condition="'$(TargetOS)' == 'iOS' and ('$(TargetArchitecture)' == 'arm64' or '$(TargetArchitecture)' == 'arm')">true</RunAOTCompilation>
  </PropertyGroup>

  <!-- Generate a self-contained app bundle for Android with tests. -->
  <UsingTask TaskName="AndroidAppBuilderTask" 
             AssemblyFile="$(AndroidAppBuilderDir)AndroidAppBuilder.dll" />

  <Target Condition="'$(TargetOS)' == 'Android'" Name="BundleTestAndroidApp">
    <PropertyGroup>
      <AndroidAbi Condition="'$(TargetArchitecture)' == 'arm64'">arm64-v8a</AndroidAbi>
      <AndroidAbi Condition="'$(TargetArchitecture)' == 'arm'">armeabi</AndroidAbi>
      <AndroidAbi Condition="'$(TargetArchitecture)' == 'x64'">x86_64</AndroidAbi>
      <AndroidAbi Condition="'$(TargetArchitecture)' == 'x86'">x86</AndroidAbi>
    </PropertyGroup>

    <Error Condition="!Exists('$(RuntimePackRidDir)')" Text="RuntimePackRidDir=$(RuntimePackRidDir) doesn't exist" />

    <!-- TEMP: consume OpenSSL binaries from external sources via env. variables -->
    <Copy Condition="'$(AndroidOpenSslCryptoLib)' != ''"
          SourceFiles="$(AndroidOpenSslCryptoLib)"
          DestinationFolder="$(PublishDir)" SkipUnchangedFiles="true"/>
    <Copy Condition="'$(AndroidOpenSslLib)' != ''"
          SourceFiles="$(AndroidOpenSslLib)"
          DestinationFolder="$(PublishDir)" SkipUnchangedFiles="true"/>

    <WriteLinesToFile File="$(PublishDir)xunit-excludes.txt" Lines="$(_withoutCategories.Replace(';', '%0dcategory='))" />

    <RemoveDir Directories="$(BundleDir)" />
    <AndroidAppBuilderTask
        Abi="$(AndroidAbi)"
        ProjectName="$(AssemblyName)"
        MonoRuntimeHeaders="$(RuntimePackNativeDir)include\mono-2.0"
        MainLibraryFileName="AndroidTestRunner.dll"
        StripDebugSymbols="False"
        OutputDir="$(BundleDir)"
        SourceDir="$(PublishDir)">
        <Output TaskParameter="ApkPackageId"  PropertyName="ApkPackageId" />
        <Output TaskParameter="ApkBundlePath" PropertyName="ApkBundlePath" />
    </AndroidAppBuilderTask>
    <Message Importance="High" Text="PackageId:       $(ApkPackageId)"/>
    <Message Importance="High" Text="Instrumentation: net.dot.MonoRunner"/>
    <Message Importance="High" Text="Apk:             $(ApkBundlePath)"/>
  </Target>

  <!-- Generate a self-contained app bundle for iOS with tests. -->
  <UsingTask TaskName="AppleAppBuilderTask" 
             AssemblyFile="$(AppleAppBuilderDir)AppleAppBuilder.dll" />
  <UsingTask TaskName="MonoAOTCompiler"
             AssemblyFile="$(MonoAOTCompilerDir)MonoAOTCompiler.dll" />

  <Import Project="$(MonoProjectRoot)msbuild\AotCompilerTask\MonoAOTCompiler.props" />

  <Target Condition="'$(TargetOS)' == 'iOS'" Name="BundleTestAppleApp">
    <Error Condition="!Exists('$(RuntimePackRidDir)')" Text="RuntimePackRidDir=$(RuntimePackRidDir) doesn't exist" />
    <Error Condition="('$(TargetArchitecture)' == 'arm64' or '$(TargetArchitecture)' == 'arm') and '$(DevTeamProvisioning)' == ''"
           Text="'DevTeamProvisioning' needs to be set for device builds. Set it to 'UBF8T346G9' if you're part of the Microsoft team account." />

    <WriteLinesToFile File="$(PublishDir)xunit-excludes.txt" Lines="$(_withoutCategories.Replace(';', '%0dcategory='))" />

    <ItemGroup>
      <AotInputAssemblies Condition="'$(RunAOTCompilation)' == 'true'" Include="$(PublishDir)*.dll" Exclude="$(PublishDir)System.Runtime.WindowsRuntime.dll">
        <AotArguments>@(MonoAOTCompilerDefaultAotArguments, ';')</AotArguments>
        <ProcessArguments>@(MonoAOTCompilerDefaultProcessArguments, ';')</ProcessArguments>
      </AotInputAssemblies>
      <BundleAssemblies Condition="'$(RunAOTCompilation)' != 'true'" Include="$(PublishDir)*.dll" />
    </ItemGroup>

    <MonoAOTCompiler Condition="'$(RunAOTCompilation)' == 'true'"
        CompilerBinaryPath="$(RuntimePackNativeDir)cross\mono-aot-cross"
        Mode="Full"
        OutputType="AsmOnly"
        Assemblies="@(AotInputAssemblies)"
        UseLLVM="$(MonoEnableLLVM)"
        LLVMPath="$(RuntimePackNativeDir)cross">
        <Output TaskParameter="CompiledAssemblies" ItemName="BundleAssemblies" />
    </MonoAOTCompiler>

    <!-- Run App bundler, it uses AOT libs (if needed), link all native bits, compile simple UI (written in ObjC)
         and produce an app bundle (with xcode project) -->
    <RemoveDir Directories="$(BundleDir)" />
    <AppleAppBuilderTask
        Arch="$(TargetArchitecture)"
        ProjectName="$(AssemblyName)"
        MonoRuntimeHeaders="$(RuntimePackNativeDir)include\mono-2.0"
        Assemblies="@(BundleAssemblies)"
        MainLibraryFileName="AppleTestRunner.dll"
        UseConsoleUITemplate="True"
        GenerateXcodeProject="True"
        BuildAppBundle="True"
        Optimized="True"
        DevTeamProvisioning="$(DevTeamProvisioning)"
        OutputDirectory="$(BundleDir)"
        AppDir="$(PublishDir)">
        <Output TaskParameter="AppBundlePath" PropertyName="AppBundlePath" />
        <Output TaskParameter="XcodeProjectPath" PropertyName="XcodeProjectPath" />
    </AppleAppBuilderTask>
    <Message Importance="High" Text="Xcode: $(XcodeProjectPath)"/>
    <Message Importance="High" Text="App: $(AppBundlePath)"/>
    <!-- This app is now can be consumed by xharness CLI to deploy on a device or simulator -->
  </Target>

  <Target Name="AddFrameworkReference">
    <ItemGroup>
      <FrameworkReference Include="$(SharedFrameworkName)" />
    </ItemGroup>
  </Target>

  <Target Name="UpdateRuntimePack"
          DependsOnTargets="AddFrameworkReference;ResolveFrameworkReferences">
    <ItemGroup>
      <ResolvedRuntimePack Update="@(ResolvedRuntimePack)" PackageDirectory="$(RuntimePackDir)" />
    </ItemGroup>
  </Target>

  <Target Name="PublishTestAsSelfContained"
          Condition="'$(IsCrossTargetingBuild)' != 'true'"
          AfterTargets="Build"
          DependsOnTargets="UpdateRuntimePack;Publish;BundleTestAppleApp;BundleTestAndroidApp" />
</Project>
