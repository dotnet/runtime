<Project>
  <PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'">
    <!--
      Disable RAR from transitively discovering dependencies for references. This is required as we don't copy
      dependencies over into the output directory which means RAR can't resolve them.
    -->
    <_FindDependencies>false</_FindDependencies>
  </PropertyGroup>

  <!-- Project references shouldn't be copied to the output for reference, source, or generator projects. -->
  <ItemDefinitionGroup Condition="'$(IsSourceProject)' == 'true' or '$(IsReferenceAssemblyProject)' == 'true' or '$(IsGeneratorProject)' == 'true'">
    <ProjectReference>
      <Private>false</Private>
    </ProjectReference>
  </ItemDefinitionGroup>

  <ItemGroup Condition="'@(ProjectReference)' != ''">
    <_coreLibProjectReference Include="@(ProjectReference->WithMetadataValue('Identity', '$(CoreLibProject)'))" />
    <ProjectReference Update="@(_coreLibProjectReference)"
                      Private="false">
      <SetConfiguration Condition="'$(RuntimeFlavor)' == 'CoreCLR' and
                                   '$(Configuration)' != '$(CoreCLRConfiguration)'">Configuration=$(CoreCLRConfiguration)</SetConfiguration>
      <SetConfiguration Condition="'$(RuntimeFlavor)' == 'Mono' and
                                   '$(Configuration)' != '$(MonoConfiguration)'">Configuration=$(MonoConfiguration)</SetConfiguration>
    </ProjectReference>
    <!-- If a CoreLib ProjectReference is present, make all P2P assets non transitive. -->
    <ProjectReference Update="@(ProjectReference->WithMetadataValue('PrivateAssets', ''))"
                      PrivateAssets="all"
                      Condition="'$(IsSourceProject)' == 'true' and '@(_coreLibProjectReference)' != ''" />
  </ItemGroup>

  <!-- Filter out transitive P2Ps which should be excluded. -->
  <Target Name="FilterTransitiveProjectReferences"
          AfterTargets="IncludeTransitiveProjectReferences"
          Condition="'$(DisableTransitiveProjectReferences)' != 'true' and
                     '@(DefaultReferenceExclusion)' != ''">
    <ItemGroup>
      <_transitiveProjectReferenceWithProjectName Include="@(ProjectReference->Metadata('NuGetPackageId'))"
                                                  OriginalIdentity="%(Identity)" />
      <_transitiveIncludedProjectReferenceWithProjectName Include="@(_transitiveProjectReferenceWithProjectName)"
                                                          Exclude="@(DefaultReferenceExclusion)" />
      <_transitiveExcludedProjectReferenceWithProjectName Include="@(_transitiveProjectReferenceWithProjectName)"
                                                          Exclude="@(_transitiveIncludedProjectReferenceWithProjectName)" />
      <ProjectReference Remove="@(_transitiveExcludedProjectReferenceWithProjectName->Metadata('OriginalIdentity'))" />
    </ItemGroup>
  </Target>

  <!-- Make shared framework assemblies not app-local (non private). -->
  <Target Name="UpdateProjectReferencesWithPrivateAttribute"
          AfterTargets="AssignProjectConfiguration"
          BeforeTargets="PrepareProjectReferences"
          Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' and
                     ('$(IsTestProject)' == 'true' or '$(IsTestSupportProject)' == 'true') and
                     '@(ProjectReferenceWithConfiguration)' != ''">
    <ItemGroup>
      <ProjectReferenceWithConfiguration PrivateAssets="all"
                                         Private="false"
                                         Condition="$(NetCoreAppLibrary.Contains('%(Filename);'))" />
    </ItemGroup>
  </Target>

  <!-- Allows building against source assemblies when the 'SkipUseReferenceAssembly' attribute is present on ProjectReference items. -->
  <Target Name="HandleReferenceAssemblyAttributeForProjectReferences"
          AfterTargets="ResolveProjectReferences"
          BeforeTargets="FindReferenceAssembliesForReferences"
          Condition="'@(ProjectReference)' != '' and '@(_ResolvedProjectReferencePaths)' != ''">
    <!-- If we have a ProjectReference to CoreLib, we need to compile against implementation assemblies. -->
    <PropertyGroup Condition="@(_ResolvedProjectReferencePaths->AnyHaveMetadataValue('MSBuildSourceProjectFile', '$(CoreLibProject)'))">
      <CompileUsingReferenceAssemblies Condition="'$(CompileUsingReferenceAssemblies)' == ''">false</CompileUsingReferenceAssemblies>
    </PropertyGroup>
    <!-- Clear the ReferenceAssembly attribute on resolved P2Ps that set SkipUseReferenceAssembly to true. -->
    <ItemGroup>
      <_resolvedP2PFiltered Include="@(ProjectReference)"
                            ProjectReferenceItemSpec="$([System.IO.Path]::GetFullPath('%(ProjectReference.Identity)'))" 
                            SkipUseReferenceAssembly="%(ProjectReference.SkipUseReferenceAssembly)" />
      <_ResolvedProjectReferencePaths Condition="'%(_resolvedP2PFiltered.ProjectReferenceItemSpec)' == '%(_resolvedP2PFiltered.MSBuildSourceProjectFile)' and
                                                 '%(_resolvedP2PFiltered.SkipUseReferenceAssembly)' == 'true'"
                                      ReferenceAssembly="" />
    </ItemGroup>
  </Target>

  <!-- An opt-in target to trim out private assemblies from the ref assembly ReferencePath. -->
  <Target Name="TrimOutPrivateAssembliesFromReferencePath"
          Condition="'$(CompileUsingReferenceAssemblies)' == 'true' and '$(TrimOutPrivateAssembliesFromReferencePath)' == 'true'"
          AfterTargets="FindReferenceAssembliesForReferences">
    <ItemGroup>
      <ReferencePathWithRefAssemblies Remove="@(ReferencePathWithRefAssemblies)"
                                      Condition="$(NetCoreAppLibraryNoReference.Contains('%(Filename);'))" />
    </ItemGroup>
  </Target>

  <Target Name="ReplaceCoreLibSrcWithRefAssemblyForCompilation"
          AfterTargets="FindReferenceAssembliesForReferences"
          Condition="'$(CompileUsingReferenceAssemblies)' != 'true' and '@(_coreLibProjectReference)' != ''">
    <ItemGroup>
      <_resolvedCoreLibProjectReference Include="@(_ResolvedProjectReferencePaths->WithMetadataValue('MSBuildSourceProjectFile','$(CoreLibProject)'))" />
      <ReferencePathWithRefAssemblies Remove="@(_resolvedCoreLibProjectReference)" />
      <ReferencePathWithRefAssemblies Include="@(_resolvedCoreLibProjectReference->Metadata('ReferenceAssembly'))" />
    </ItemGroup>
  </Target>
</Project>
