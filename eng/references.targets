<Project>
  <PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'">
    <!--
      Disable RAR from transitively discovering dependencies for references. This is required as we don't copy
      dependencies over into the output directory which means RAR can't resolve them.
    -->
    <_FindDependencies>false</_FindDependencies>
  </PropertyGroup>

  <!-- Project references shouldn't be copied to the output for reference or source projects. -->
  <ItemDefinitionGroup Condition="'$(IsSourceProject)' == 'true' or '$(IsReferenceAssemblyProject)' == 'true'">
    <ProjectReference>
      <Private>false</Private>
    </ProjectReference>
  </ItemDefinitionGroup>

  <ItemGroup Condition="'@(ProjectReference)' != ''">
    <_coreLibProjectReference Include="@(ProjectReference->WithMetadataValue('Identity', '$(CoreLibProject)'))" />
    <ProjectReference Update="@(_coreLibProjectReference)"
                      Private="false">
      <SetConfiguration Condition="'$(RuntimeFlavor)' == 'CoreCLR' and
                                   '$(Configuration)' != '$(CoreCLRConfiguration)'">Configuration=$(CoreCLRConfiguration)</SetConfiguration>
      <SetConfiguration Condition="'$(RuntimeFlavor)' == 'Mono' and
                                   '$(Configuration)' != '$(MonoConfiguration)'">Configuration=$(MonoConfiguration)</SetConfiguration>
    </ProjectReference>
    <!-- If a CoreLib ProjectReference is present, make all P2P assets non transitive. -->
    <ProjectReference Update="@(ProjectReference->WithMetadataValue('PrivateAssets', ''))"
                      PrivateAssets="all"
                      Condition="'$(IsSourceProject)' == 'true' and '@(_coreLibProjectReference)' != ''" />
  </ItemGroup>

  <ItemGroup Condition="'@(PackageReference)' != ''">
    <!-- Whenever a package with a transitive reference to System.Runtime.CompilerServices.Unsafe is referenced and there is no
         direct package reference to System.Runtime.CompilerServices.Unsafe, reference the Unsafe package so that libraries build
         against the latest available version (6.0.* instead of the old transitive reference which has a 4.5.* version). -->
    <PackageReference Include="System.Runtime.CompilerServices.Unsafe"
                      Version="$(SystemRuntimeCompilerServicesUnsafeVersion)"
                      PrivateAssets="all"
                      Condition="!@(PackageReference->AnyHaveMetadataValue('Identity', 'System.Runtime.CompilerServices.Unsafe')) and
                                 (
                                  @(PackageReference->AnyHaveMetadataValue('Identity', 'System.Memory')) or
                                  @(PackageReference->AnyHaveMetadataValue('Identity', 'System.Threading.Tasks.Extensions')) or
                                  @(PackageReference->AnyHaveMetadataValue('Identity', 'Microsoft.Bcl.AsyncInterfaces'))
                                 )" />
  </ItemGroup>

  <!-- Disable TargetArchitectureMismatch warning when we reference CoreLib as it is platform specific. -->
  <Target Name="DisableProjectReferenceArchitectureMismatchWarningForCoreLib"
          Condition="'@(_coreLibProjectReference)' != ''"
          BeforeTargets="ResolveAssemblyReferences">
    <PropertyGroup>
      <ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>None</ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>
    </PropertyGroup>
  </Target>

  <!-- Filter out transitive P2Ps which should be excluded. -->
  <Target Name="FilterTransitiveProjectReferences"
          AfterTargets="IncludeTransitiveProjectReferences"
          Condition="'$(DisableTransitiveProjectReferences)' != 'true' and
                     '@(DefaultReferenceExclusion)' != ''">
    <ItemGroup>
      <_transitiveProjectReferenceWithProjectName Include="@(ProjectReference->Metadata('NuGetPackageId'))"
                                                  OriginalIdentity="%(Identity)" />
      <_transitiveIncludedProjectReferenceWithProjectName Include="@(_transitiveProjectReferenceWithProjectName)"
                                                          Exclude="@(DefaultReferenceExclusion)" />
      <_transitiveExcludedProjectReferenceWithProjectName Include="@(_transitiveProjectReferenceWithProjectName)"
                                                          Exclude="@(_transitiveIncludedProjectReferenceWithProjectName)" />
      <ProjectReference Remove="@(_transitiveExcludedProjectReferenceWithProjectName->Metadata('OriginalIdentity'))" />
    </ItemGroup>
  </Target>

  <!-- Make shared framework assemblies not app-local (non private). -->
  <Target Name="UpdateProjectReferencesWithPrivateAttribute"
          AfterTargets="AssignProjectConfiguration"
          BeforeTargets="PrepareProjectReferences"
          Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' and
                     ('$(IsTestProject)' == 'true' or '$(IsTestSupportProject)' == 'true') and
                     '@(ProjectReferenceWithConfiguration)' != ''">
    <ItemGroup>
      <ProjectReferenceWithConfiguration PrivateAssets="all"
                                         Private="false"
                                         Condition="$(NetCoreAppLibrary.Contains('%(Filename);'))" />
    </ItemGroup>
  </Target>

  <ItemDefinitionGroup>
    <TargetPathWithTargetPlatformMoniker>
      <IsReferenceAssemblyProject>$(IsReferenceAssemblyProject)</IsReferenceAssemblyProject>
    </TargetPathWithTargetPlatformMoniker>
  </ItemDefinitionGroup>

  <Target Name="ValidateReferenceAssemblyProjectReferences"
          AfterTargets="ResolveReferences"
          Condition="'$(IsReferenceAssemblyProject)' == 'true' and
                     '$(SkipValidateReferenceAssemblyProjectReferences)' != 'true'">
    <Error Condition="'%(ReferencePath.ReferenceSourceTarget)' == 'ProjectReference' and '%(ReferencePath.IsReferenceAssemblyProject)' != 'true' and '%(ReferencePath.ReferenceAssembly)' == ''"
           Text="Reference assemblies must only reference other reference assemblies and '%(ReferencePath.ProjectReferenceOriginalItemSpec)' is not a reference assembly project and does not set 'ProduceReferenceAssembly'." />
  </Target>

  <!-- An opt-in target to trim out private assemblies from the ref assembly ReferencePath. -->
  <Target Name="TrimOutPrivateAssembliesFromReferencePath"
          Condition="'$(CompileUsingReferenceAssemblies)' == 'true' and '$(TrimOutPrivateAssembliesFromReferencePath)' == 'true'"
          AfterTargets="FindReferenceAssembliesForReferences">
    <ItemGroup>
      <ReferencePathWithRefAssemblies Remove="@(ReferencePathWithRefAssemblies)"
                                      Condition="$(NetCoreAppLibraryNoReference.Contains('%(Filename);'))" />
    </ItemGroup>
  </Target>
</Project>
