<Project>

  <!--
    This file defines the list of projects to build and divides them into subsets. In ordinary
    situations, you should perform a full build by running 'build.cmd' or './build.sh'. This ensures
    the projects are sequenced correctly so the outputs and test results are what you would expect.

    Examples:

      ./build.sh CoreHost

        This builds only the .NET Core Host.

      ./build.sh corehost installer.managed

        This builds the CoreHost and also the Managed installer portion (e.g. Microsoft.NET.HostModel)
        projects. A space ' ' or '+' are the delimiters between multiple subsets to build.

      ./build.sh -test installer.tests

        This builds and executes the installer test projects. (The '-test' argument is an Arcade SDK argument
        that indicates tests should be run. Otherwise, they'll only be built.)

    Quirks:

      This command looks useful, but doesn't work as expected:

        ./build.sh -test /p:Subset=CoreHost-Test    # (Doesn't work!)

      Intuitively, this should build the host, build the tests, then run the tests on the freshly
      built host. What actually happens is the tests run on a previously built host. This is because
      the depproj, pkgproj, and installer subsets process the host artifacts, and those didn't
      rebuild because those subsets were disabled.

      You can get around this limitation by running the corehost subset, manually copying host
      artifacts to the test layout, then running the test subset.
  -->

  <PropertyGroup>
    <DefaultSubsets>clr+mono+libs+installer</DefaultSubsets>
    <DefaultSubsets Condition="'$(TargetsMobile)' == 'true'">mono+libs+installer</DefaultSubsets>
  </PropertyGroup>

  <!-- Init _subset here in to allow RuntimeFlavor to be set as early as possible -->
  <PropertyGroup>
    <_subset Condition="'$(Subset)' != ''">+$(Subset.ToLowerInvariant())+</_subset>
    <_subset Condition="'$(Subset)' == ''">+$(DefaultSubsets)+</_subset>
  </PropertyGroup>

  <PropertyGroup>
    <RuntimeFlavor Condition="'$(TargetsMobile)' == 'true'">Mono</RuntimeFlavor>
    <RuntimeFlavor Condition="'$(RuntimeFlavor)' == '' and ($(_subset.Contains('+mono+')) or $(_subset.Contains('+mono.runtime+'))) and (!$(_subset.Contains('+clr+')) and !$(_subset.Contains('+clr.runtime+')))">Mono</RuntimeFlavor>
    <RuntimeFlavor Condition="'$(RuntimeFlavor)' == ''">CoreCLR</RuntimeFlavor>
  </PropertyGroup>

  <PropertyGroup>
    <DefaultCoreClrSubsets>clr.runtime+linuxdac+clr.corelib+clr.nativecorelib+clr.tools+clr.packages</DefaultCoreClrSubsets>

    <DefaultMonoSubsets Condition="'$(MonoEnableLLVM)' == 'true' and '$(MonoLLVMDir)' == ''">mono.llvm+</DefaultMonoSubsets>
    <DefaultMonoSubsets>$(DefaultMonoSubsets)mono.runtime+mono.corelib+mono.packages</DefaultMonoSubsets>

    <DefaultLibrariesSubsets>libs.native+libs.ref+libs.src+libs.pretest+libs.packages</DefaultLibrariesSubsets>

    <DefaultInstallerSubsets>corehost+installer.managed+installer.depprojs+installer.pkgprojs+bundles+installers+installer.tests</DefaultInstallerSubsets>
    <DefaultInstallerSubsets Condition="'$(RuntimeFlavor)' == 'Mono'">installer.pkgprojs</DefaultInstallerSubsets>
  </PropertyGroup>

  <PropertyGroup>
    <_subset>$(_subset.Replace('+clr+', '+$(DefaultCoreClrSubsets)+'))</_subset>
    <_subset>$(_subset.Replace('+mono+', '+$(DefaultMonoSubsets)+'))</_subset>
    <_subset>$(_subset.Replace('+libs+', '+$(DefaultLibrariesSubsets)+'))</_subset>
    <_subset>$(_subset.Replace('+installer+', '+$(DefaultInstallerSubsets)+'))</_subset>
    <_subset>$(_subset.Replace('+installer.nocorehost+', '+$(DefaultInstallerSubsets.Replace('corehost+', ''))+'))</_subset>

    <!-- Surround _subset in dashes to simplify checks below -->
    <_subset>+$(_subset.Trim('+'))+</_subset>
  </PropertyGroup>

  <ItemGroup>
    <!-- CoreClr -->
    <SubsetName Include="Clr" Description="The CoreCLR runtime, LinuxDac, CoreLib (+ native), tools and packages." />
    <SubsetName Include="Clr.Runtime" Description="The CoreCLR .NET runtime." />
    <SubsetName Include="Clr.CoreLib" Description="The managed System.Private.CoreLib library for CoreCLR." />
    <SubsetName Include="Clr.NativeCoreLib" Description="Run crossgen on System.Private.CoreLib library for CoreCLR." />
    <SubsetName Include="Clr.Tools" Description="Managed tools that support CoreCLR development and testing." />
    <SubsetName Include="Clr.Packages" Description="The projects that produce NuGet packages for the CoreCLR runtime, crossgen, and IL tools." />
    <SubsetName Include="LinuxDac" Condition="$([MSBuild]::IsOsPlatform(Windows))" Description="The cross-OS Windows->libc-based Linux DAC. Skipped on x86." />
    <SubsetName Include="AlpineDac" Condition="$([MSBuild]::IsOsPlatform(Windows))" OnDemand="true" Description="The cross-OS Windows->musl-libc-based Linux DAC. Skipped on x86 and arm." />
    <SubsetName Include="CrossDacPack" OnDemand="true"
            Description="Packaging of cross OS DAC. Requires all assets needed to be present at a folder specified by $(CrossDacArtifactsDir). See 'Microsoft.CrossOsDiag.Private.CoreCLR.proj' for details." />

    <!-- Mono -->
    <SubsetName Include="Mono" Description="The Mono runtime and CoreLib." />
    <SubsetName Include="Mono.Runtime" Description="The Mono .NET runtime." />
    <SubsetName Include="Mono.CoreLib" Description="The managed System.Private.CoreLib library for Mono." />
    <SubsetName Include="Mono.Packages" Description="The projects that produce NuGet packages for the Mono runtime." />

    <!-- Libs -->
    <SubsetName Include="Libs" Description="The libraries native part, refs and source assemblies, test infra and packages, but NOT the tests (use Libs.Tests to request those explicitly)" />
    <SubsetName Include="Libs.Native" Description="The native libraries used in the shared framework." />
    <SubsetName Include="Libs.Ref" Description="The managed reference libraries." />
    <SubsetName Include="Libs.Src" Description="The managed implementation libraries." />
    <SubsetName Include="Libs.PreTest" Description="Test assets which are necessary to run tests." />
    <SubsetName Include="Libs.Packages" Description="The projects that produce NuGet packages from libraries." />
    <SubsetName Include="Libs.Tests" OnDemand="true" Description="The test projects. Note that building this doesn't execute tests: you must also pass the '-test' argument." />

    <!-- Installer -->
    <SubsetName Include="Installer" Description="The .NET Core hosts, hosting libraries, bundles, and installers. Includes these projects' tests." />
    <SubsetName Include="CoreHost" Description="The .NET Core hosts." />
    <SubsetName Include="Installer.NoCoreHost" Description="Hosting libraries, bundles, and installers. Includes these projects' tests." />
    <SubsetName Include="Installer.Managed" Description="The managed .NET hosting projects. This includes HostModel." />
    <SubsetName Include="Installer.DepProjs" Description="The dependency projects. These gather shared framework files and run crossgen on them to turn them into ready-to-run (R2R) assemblies for the current platform." />
    <SubsetName Include="Installer.PkgProjs" Description="The packaging projects. These produce NETCoreApp assets: NuGet packages, installers, zips, and Linux packages." />
    <SubsetName Include="Bundles" Description="The shared framework bundle installer projects. Produces .exe installers for Windows." />
    <SubsetName Include="Installers" Description="Generates additional installers. This produces the shared frameworks and their installers." />
    <SubsetName Include="Installer.Tests" Description="The test projects. Note that building this doesn't execute tests: you must also pass the '-test' argument." />
    <SubsetName Include="Installer.Publish" OnDemand="true" Description="Builds the installer publish infrastructure." />
  </ItemGroup>

  <!-- Default targets, parallelization and configurations. -->
  <ItemDefinitionGroup>
    <ProjectToBuild>
      <Test>false</Test>
      <Pack>false</Pack>
      <Publish>false</Publish>
      <BuildInParallel>false</BuildInParallel>
    </ProjectToBuild>
  </ItemDefinitionGroup>

  <!-- CoreClr sets -->
  <ItemGroup Condition="$(_subset.Contains('+clr.corelib+'))">
    <ProjectToBuild Include="$(CoreClrProjectRoot)src\System.Private.CoreLib\System.Private.CoreLib.csproj" Category="clr" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+clr.runtime+'))">
    <ProjectToBuild Include="$(CoreClrProjectRoot)runtime.proj" Category="clr" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+linuxdac+')) and $([MSBuild]::IsOsPlatform(Windows)) and '$(TargetArchitecture)' != 'x86'">
    <ProjectToBuild Include="$(CoreClrProjectRoot)runtime.proj" AdditionalProperties="%(AdditionalProperties);CrossDac=linux" Category="clr" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+alpinedac+')) and $([MSBuild]::IsOsPlatform(Windows)) and '$(TargetArchitecture)' != 'x86' and '$(TargetArchitecture)' != 'arm'">
    <ProjectToBuild Include="$(CoreClrProjectRoot)runtime.proj" AdditionalProperties="%(AdditionalProperties);CrossDac=alpine" Category="clr" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+crossdacpack+'))">
    <ProjectToBuild Include="$(CoreClrProjectRoot)src\.nuget\Microsoft.CrossOsDiag.Private.CoreCLR\Microsoft.CrossOsDiag.Private.CoreCLR.proj" Category="clr" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+clr.nativecorelib+'))">
    <ProjectToBuild Include="$(CoreClrProjectRoot)crossgen-corelib.proj" Category="clr" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+clr.tools+'))">
    <ProjectToBuild Include="$(CoreClrProjectRoot)src\tools\runincontext\runincontext.csproj;
                             $(CoreClrProjectRoot)src\tools\r2rdump\R2RDump.csproj;
                             $(CoreClrProjectRoot)src\tools\dotnet-pgo\dotnet-pgo.csproj;
                             $(CoreClrProjectRoot)src\tools\r2rtest\R2RTest.csproj" Category="clr" BuildInParallel="true" />
    <ProjectToBuild Include="$(CoreClrProjectRoot)src\tools\aot\crossgen2\crossgen2.csproj" Category="clr" />
    <ProjectToBuild Include="$(CoreClrProjectRoot)src\tools\aot\ILCompiler.TypeSystem.ReadyToRun.Tests\ILCompiler.TypeSystem.ReadyToRun.Tests.csproj" Test="true" Category="clr" Condition="'$(__DistroRid)' != 'linux-musl-x64'"/>
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+clr.packages+'))">
    <ProjectToBuild Include="$(CoreClrProjectRoot)src\.nuget\coreclr-packages.proj" Pack="true" Category="clr" />
  </ItemGroup>

  <!-- Mono sets -->
  <ItemGroup Condition="$(_subset.Contains('+mono.llvm+')) or '$(TargetOS)' == 'iOS' or '$(TargetOS)' == 'tvOS' or '$(TargetOS)' == 'Browser'">
    <ProjectToBuild Include="$(MonoProjectRoot)llvm\llvm-init.proj" Category="mono" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+mono.packages+'))">
    <ProjectToBuild Include="$(MonoProjectRoot)netcore\nuget\mono-packages.proj" Category="mono" Pack="true" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+mono.runtime+'))">
    <ProjectToBuild Include="$(MonoProjectRoot)mono.proj" Category="mono" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+mono.corelib+'))">
    <ProjectToBuild Include="$(MonoProjectRoot)netcore\System.Private.CoreLib\System.Private.CoreLib.csproj" Category="mono" />
  </ItemGroup>

  <!-- Libraries sets -->
  <ItemGroup Condition="$(_subset.Contains('+libs.native+'))">
    <ProjectToBuild Include="$(LibrariesProjectRoot)Native\build-native.proj" Category="libs" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+libs.ref+'))">
    <ProjectToBuild Include="$(LibrariesProjectRoot)ref.proj" Category="libs" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+libs.src+'))">
    <ProjectToBuild Include="$(LibrariesProjectRoot)src.proj" Category="libs" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+libs.pretest+'))">
    <ProjectToBuild Include="$(LibrariesProjectRoot)pretest.proj" Category="libs"  />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+libs.packages+'))">
    <ProjectToBuild Include="$(LibrariesProjectRoot)libraries-packages.proj" Category="libs" Pack="true" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+libs.tests+'))">
    <ProjectToBuild Include="$(LibrariesProjectRoot)tests.proj" Category="libs" Test="true" />
  </ItemGroup>

  <!-- Installer sets -->
  <ItemGroup Condition="$(_subset.Contains('+corehost+'))">
    <CorehostProjectToBuild Include="$(InstallerProjectRoot)corehost\corehost.proj" SignPhase="Binaries" />
    <ProjectToBuild Include="@(CorehostProjectToBuild)" BuildInParallel="true" Pack="true" Category="installer" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+installer.managed+'))">
    <ManagedProjectToBuild Include="$(InstallerProjectRoot)managed\**\*.csproj" SignPhase="Binaries" />
    <ManagedProjectToBuild Include="$(InstallerProjectRoot)pkg\packaging\pack-managed.proj" />
    <ProjectToBuild Include="@(ManagedProjectToBuild)" BuildInParallel="true" Pack="true" Category="installer" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+installer.depprojs+'))">
    <DepprojProjectToBuild Condition="'$(RuntimeFlavor)' == 'CoreCLR'" Include="$(InstallerProjectRoot)pkg\projects\**\*.depproj" SignPhase="R2RBinaries" BuildInParallel="false" />
    <DepprojProjectToBuild Condition="'$(RuntimeFlavor)' == 'Mono'" Include="$(InstallerProjectRoot)pkg\projects\**\*.depproj" SignPhase="Binaries" BuildInParallel="false" />
    <ProjectToBuild Include="@(DepprojProjectToBuild)" Pack="true" Category="installer" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+installer.pkgprojs+'))">
    <PkgprojProjectToBuild Include="$(InstallerProjectRoot)pkg\projects\**\*.pkgproj" SignPhase="MsiFiles" BuildInParallel="false" />
    <ProjectToBuild Include="@(PkgprojProjectToBuild)" Pack="true" Category="installer" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+bundles+'))">
    <BundleProjectToBuild Include="$(InstallerProjectRoot)pkg\projects\**\*.bundleproj" SignPhase="BundleInstallerFiles" BuildInParallel="false" />
    <ProjectToBuild Include="@(BundleProjectToBuild)" Pack="true" Category="installer" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+installers+'))">
    <InstallerProjectToBuild Include="$(InstallerProjectRoot)pkg\packaging\installers.proj" BuildInParallel="false" />
    <InstallerProjectToBuild Include="$(InstallerProjectRoot)pkg\packaging\vs-insertion-packages.proj" BuildInParallel="false" />
    <ProjectToBuild Include="@(InstallerProjectToBuild)" Pack="true" Category="installer" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+installer.tests+'))">
    <TestProjectToBuild Include="$(InstallerProjectRoot)tests\Microsoft.NET.HostModel.Tests\AppHost.Bundle.Tests\AppHost.Bundle.Tests.csproj" />
    <TestProjectToBuild Include="$(InstallerProjectRoot)tests\Microsoft.NET.HostModel.Tests\Microsoft.NET.HostModel.AppHost.Tests\Microsoft.NET.HostModel.AppHost.Tests.csproj" />
    <TestProjectToBuild Include="$(InstallerProjectRoot)tests\Microsoft.NET.HostModel.Tests\Microsoft.NET.HostModel.Bundle.Tests\Microsoft.NET.HostModel.Bundle.Tests.csproj" />
    <TestProjectToBuild Include="$(InstallerProjectRoot)tests\Microsoft.NET.HostModel.Tests\Microsoft.NET.HostModel.ComHost.Tests\Microsoft.NET.HostModel.ComHost.Tests.csproj" />
    <TestProjectToBuild Include="$(InstallerProjectRoot)tests\HostActivation.Tests\HostActivation.Tests.csproj" />
    <TestProjectToBuild Include="$(InstallerProjectRoot)tests\Microsoft.DotNet.CoreSetup.Packaging.Tests\Microsoft.DotNet.CoreSetup.Packaging.Tests.csproj" />
    <ProjectToBuild Include="@(TestProjectToBuild)" BuildInParallel="true" Test="true" Category="installer" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+installer.publish+'))">
    <ProjectToBuild Include="$(InstallerProjectRoot)publish\prepare-artifacts.proj" Pack="true" BuildInParallel="false" Category="installer" />
  </ItemGroup>

  <!-- Set default configurations. -->
  <ItemGroup>
    <ProjectToBuild Update="@(ProjectToBuild)">
      <AdditionalProperties Condition="'%(ProjectToBuild.Category)' == 'clr' and '$(CoreCLRConfiguration)' != ''">%(AdditionalProperties);Configuration=$(CoreCLRConfiguration)</AdditionalProperties>
      <AdditionalProperties Condition="'%(ProjectToBuild.Category)' == 'mono' and '$(MonoConfiguration)' != ''">%(AdditionalProperties);Configuration=$(MonoConfiguration)</AdditionalProperties>
      <AdditionalProperties Condition="'%(ProjectToBuild.Category)' == 'libs' and '$(LibrariesConfiguration)' != ''">%(AdditionalProperties);Configuration=$(LibrariesConfiguration)</AdditionalProperties>
    </ProjectToBuild>
  </ItemGroup>

</Project>
