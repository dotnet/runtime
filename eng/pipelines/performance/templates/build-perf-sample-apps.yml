parameters:
  osGroup: ''
  runtimeType: 'mono' # Currently only used for Android Hello World app
  nameSuffix: ''

steps:
  # Build Android sample app
  - ${{ if eq(parameters.osGroup, 'android') }}:
    - ${{ if eq(parameters.runtimeType, 'mono') }}:
      # Mono JIT build
      - script: make run TARGET_ARCH=arm64 DEPLOY_AND_RUN=false RUNTIME_FLAVOR=Mono
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/Android
        displayName: Build HelloAndroid sample app RUNTIME_FLAVOR=Mono
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish binlog'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/Android/msbuild.binlog
          artifactName:  AndroidMonoArm64BuildLog
      - template: /eng/pipelines/common/upload-artifact-step.yml
        parameters:
          rootFolder: $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp/arm64/Release/android-arm64/AppBundle/bin/HelloAndroid.apk
          includeRootFolder: true
          displayName: Android Sample App JIT Mono
          artifactName: AndroidHelloWorldArm64Mono
          archiveExtension: '.tar.gz'
          archiveType: tar
          tarCompression: gz
      - script: rm -r -f $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp
        workingDirectory: $(Build.SourcesDirectory)/artifacts/bin
        displayName: clean bindir

      # Mono AOT build
      - script: make run TARGET_ARCH=arm64 DEPLOY_AND_RUN=false RUNTIME_FLAVOR=Mono AOT=true
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/Android
        displayName: Build HelloAndroid sample app RUNTIME_FLAVOR=Mono AOT=true
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish binlog'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/Android/msbuild.binlog
          artifactName:  AndroidMonoAOTArm64BuildLog
      - template: /eng/pipelines/common/upload-artifact-step.yml
        parameters:
          rootFolder: $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp/arm64/Release/android-arm64/AppBundle/bin/HelloAndroid.apk
          includeRootFolder: true
          displayName: Android Sample App AOT Mono
          artifactName: AndroidHelloWorldArm64MonoAOT
          archiveExtension: '.tar.gz'
          archiveType: tar
          tarCompression: gz
      - script: rm -r -f $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp
        workingDirectory: $(Build.SourcesDirectory)/artifacts/bin
        displayName: clean bindir

    - ${{ if eq(parameters.runtimeType, 'coreclr') }}:
      # CoreCLR JIT build
      - script: make run TARGET_ARCH=arm64 DEPLOY_AND_RUN=false RUNTIME_FLAVOR=CoreCLR
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/Android
        displayName: Build HelloAndroid sample app RUNTIME_FLAVOR=CoreCLR
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish binlog'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/Android/msbuild.binlog
          artifactName:  AndroidCoreCLRArm64BuildLog
      - template: /eng/pipelines/common/upload-artifact-step.yml
        parameters:
          rootFolder: $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp/arm64/Release/android-arm64/AppBundle/bin/HelloAndroid.apk
          includeRootFolder: true
          displayName: Android Sample App JIT CoreCLR
          artifactName: AndroidHelloWorldArm64CoreCLR
          archiveExtension: '.tar.gz'
          archiveType: tar
          tarCompression: gz
      - script: rm -r -f $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp
        workingDirectory: $(Build.SourcesDirectory)/artifacts/bin
        displayName: clean bindir

      # CoreCLR JIT static linking build
      - script: make run TARGET_ARCH=arm64 DEPLOY_AND_RUN=false RUNTIME_FLAVOR=CoreCLR STATIC_LINKING=true
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/Android
        displayName: Build HelloAndroid sample app RUNTIME_FLAVOR=CoreCLR STATIC_LINKING=true
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish binlog'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/Android/msbuild.binlog
          artifactName:  AndroidCoreCLRArm64StaticLinkingBuildLog
      - template: /eng/pipelines/common/upload-artifact-step.yml
        parameters:
          rootFolder: $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp/arm64/Release/android-arm64/AppBundle/bin/HelloAndroid.apk
          includeRootFolder: true
          displayName: Android Sample App JIT CoreCLR Static Linking
          artifactName: AndroidHelloWorldArm64CoreCLRStaticLinking
          archiveExtension: '.tar.gz'
          archiveType: tar
          tarCompression: gz
      - script: rm -r -f $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp
        workingDirectory: $(Build.SourcesDirectory)/artifacts/bin
        displayName: clean bindir

      # CoreCLR R2R build
      - script: make run TARGET_ARCH=arm64 DEPLOY_AND_RUN=false RUNTIME_FLAVOR=CoreCLR R2R=true
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/Android
        displayName: Build HelloAndroid sample app RUNTIME_FLAVOR=CoreCLR R2R=true
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish binlog'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/Android/msbuild.binlog
          artifactName:  AndroidCoreCLRR2RArm64BuildLog
      - template: /eng/pipelines/common/upload-artifact-step.yml
        parameters:
          rootFolder: $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp/arm64/Release/android-arm64/AppBundle/bin/HelloAndroid.apk
          includeRootFolder: true
          displayName: Android Sample App R2R CoreCLR
          artifactName: AndroidHelloWorldArm64CoreCLRR2R
          archiveExtension: '.tar.gz'
          archiveType: tar
          tarCompression: gz
      - script: rm -r -f $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp
        workingDirectory: $(Build.SourcesDirectory)/artifacts/bin
        displayName: clean bindir

  # Build iOS sample app
  - ${{ if eq(parameters.osGroup, 'ios') }}:
    - ${{ if eq(parameters.nameSuffix, 'iOSMono') }}:
      # Mono FullAOT (no LLVM) build 
      - script: make build-appbundle TARGET_OS=ios TARGET_ARCH=arm64 USE_MONO_RUNTIME=true BUILD_CONFIG=Release AOT=True INTERP=false USE_LLVM=False DEPLOY_AND_RUN=false STRIP_DEBUG_SYMBOLS=true
        env:
          DevTeamProvisioning: '-'
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
        displayName: Build HelloiOS Mono FullAOT sample app LLVM=False STRIP_SYMBOLS=True
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish binlog'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS/msbuild.binlog
          artifactName:  iOSMonoFullAOTArm64NoLLVMStripSymbolsBuildLog
      - template: /eng/pipelines/common/upload-artifact-step.yml
        parameters:
          rootFolder: $(Build.SourcesDirectory)/src/mono/sample/iOS/bin/ios-arm64/Bundle/HelloiOS/Release-iphoneos/HelloiOS.app
          includeRootFolder: true
          displayName: iOS Sample App Mono FullAOT NoLLVM NoSymbols
          artifactName: iOSSampleAppMonoFullAOTNoLLVMNoSymbols
          archiveExtension: '.zip'
          archiveType: zip
      - script: rm -r -f $(Build.SourcesDirectory)/src/mono/sample/iOS/bin
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
        displayName: Clean bindir

      # Mono FullAOT (with LLVM) build
      - script: make build-appbundle TARGET_OS=ios TARGET_ARCH=arm64 USE_MONO_RUNTIME=true BUILD_CONFIG=Release AOT=True INTERP=false USE_LLVM=True DEPLOY_AND_RUN=false STRIP_DEBUG_SYMBOLS=true
        env:
          DevTeamProvisioning: '-'
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
        displayName: Build HelloiOS Mono FullAOT sample app LLVM=True STRIP_SYMBOLS=True
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish binlog'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS/msbuild.binlog
          artifactName: iOSMonoFullAOTArm64LLVMStripSymbolsBuildLog
      - template: /eng/pipelines/common/upload-artifact-step.yml
        parameters:
          rootFolder: $(Build.SourcesDirectory)/src/mono/sample/iOS/bin/ios-arm64/Bundle/HelloiOS/Release-iphoneos/HelloiOS.app
          includeRootFolder: true
          displayName: iOS Sample App Mono FullAOT LLVM NoSymbols
          artifactName: iOSSampleAppMonoFullAOTLLVMNoSymbols
          archiveExtension: '.zip'
          archiveType: zip
      - script: rm -r -f $(Build.SourcesDirectory)/src/mono/sample/iOS/bin
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
        displayName: Clean bindir

    - ${{ if eq(parameters.runtimeType, 'coreclr') }}:
      # CoreCLR Interpreter build
      - script: make build-appbundle TARGET_OS=ios TARGET_ARCH=arm64 USE_MONO_RUNTIME=false BUILD_CONFIG=Checked AOT=false DEPLOY_AND_RUN=false STRIP_DEBUG_SYMBOLS=true
        env:
          DevTeamProvisioning: '-'
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
        displayName: Build HelloiOS CoreCLR Interpreter sample app STRIP_SYMBOLS=True
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish binlog'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS/msbuild.binlog
          artifactName:  iOSCoreCLRInterpreterArm64StripSymbolsBuildLog
      - template: /eng/pipelines/common/upload-artifact-step.yml
        parameters:
          rootFolder: $(Build.SourcesDirectory)/src/mono/sample/iOS/bin/ios-arm64/Bundle/HelloiOS/Debug-iphoneos/HelloiOS.app
          includeRootFolder: true
          displayName: iOS Sample App CoreCLR Interpreter NoSymbols
          artifactName: iOSSampleAppCoreCLRInterpreterNoSymbols
          archiveExtension: '.zip'
          archiveType: zip
      - script: rm -r -f $(Build.SourcesDirectory)/src/mono/sample/iOS/bin
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
        displayName: Clean bindir

    - ${{ if eq(parameters.nameSuffix, 'iOSNativeAOT') }}:
      # CoreCLR NativeAOT build
      - script: make hello-app TARGET_OS=ios TARGET_ARCH=arm64 BUILD_CONFIG=Release DEPLOY_AND_RUN=false STRIP_DEBUG_SYMBOLS=true
        env:
          DevTeamProvisioning: '-'
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT
        displayName: Build HelloiOS NativeAOT sample app STRIP_SYMBOLS=True
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish binlog'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT/msbuild.binlog
          artifactName: iOSNativeAOTArm64StripSymbolsBuildLog
      - template: /eng/pipelines/common/upload-artifact-step.yml
        parameters:
          rootFolder: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT/bin/ios-arm64/Bundle/HelloiOS/Release-iphoneos/HelloiOS.app
          includeRootFolder: true
          displayName: iOS Sample App NativeAOT NoSymbols
          artifactName: iOSSampleAppNativeAOTNoSymbols
          archiveExtension: '.zip'
          archiveType: zip
      - script: rm -r -f $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT/bin
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT
        displayName: Clean bindir
