parameters:
  osGroup: ''
  runtimeType: 'mono' # Currently only used for Android Hello World app
  nameSuffix: ''
  hybridGlobalization: False

steps:
# Build Android sample app
  - ${{ if eq(parameters.osGroup, 'android') }}:
    - ${{ if eq(parameters.runtimeType, 'mono') }}:
      - script: |
          make run TARGET_ARCH=arm64 DEPLOY_AND_RUN=false RUNTIME_FLAVOR=Mono > build.log
          cat build.log
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/Android
        displayName: Build HelloAndroid sample app RUNTIME_FLAVOR=Mono
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish binlog'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/Android/msbuild.binlog
          artifactName:  AndroidMonoArm64binlog
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish build log'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/Android/build.log
          artifactName:  AndroidMonoArm64buildlog
      - template: /eng/pipelines/common/upload-artifact-step.yml
        parameters:
          rootFolder: $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp/arm64/Release/android-arm64/Bundle/bin/HelloAndroid.apk
          includeRootFolder: true
          displayName: Android Sample App JIT Mono
          artifactName: AndroidHelloWorldArm64Mono
          archiveExtension: '.tar.gz'
          archiveType: tar
          tarCompression: gz
      - script: rm -r -f $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp
        workingDirectory: $(Build.SourcesDirectory)/artifacts/bin
        displayName: clean bindir

    - ${{ if eq(parameters.runtimeType, 'coreclr') }}:
      - script: |
          make run TARGET_ARCH=arm64 DEPLOY_AND_RUN=false RUNTIME_FLAVOR=CoreCLR > build.log
          cat build.log
        workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/Android
        displayName: Build HelloAndroid sample app RUNTIME_FLAVOR=CoreCLR
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish binlog'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/Android/msbuild.binlog
          artifactName:  AndroidCoreCLRArm64binlog
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish build log'
        inputs:
          pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/Android/build.log
          artifactName:  AndroidCoreCLRArm64buildlog
      - template: /eng/pipelines/common/upload-artifact-step.yml
        parameters:
          rootFolder: $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp/arm64/Release/android-arm64/Bundle/bin/HelloAndroid.apk
          includeRootFolder: true
          displayName: Android Sample App JIT CoreCLR
          artifactName: AndroidHelloWorldArm64CoreCLR
          archiveExtension: '.tar.gz'
          archiveType: tar
          tarCompression: gz
      - script: rm -r -f $(Build.SourcesDirectory)/artifacts/bin/AndroidSampleApp
        workingDirectory: $(Build.SourcesDirectory)/artifacts/bin
        displayName: clean bindir

  - ${{ if and(eq(parameters.osGroup, 'ios'), eq(parameters.nameSuffix, 'iOSMono')) }}:
    - script: |
        make build-appbundle TARGET_OS=ios TARGET_ARCH=arm64 BUILD_CONFIG=Release AOT=True USE_LLVM=False DEPLOY_AND_RUN=false STRIP_DEBUG_SYMBOLS=false HYBRID_GLOBALIZATION=${{ parameters.hybridGlobalization }} > build.log
        cat build.log
      env:
        DevTeamProvisioning: '-'
      workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
      displayName: Build HelloiOS AOT sample app LLVM=False STRIP_SYMBOLS=False HYBRID_GLOBALIZATION=${{ parameters.hybridGlobalization }}
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish binlog'
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS/msbuild.binlog
        artifactName:  iOSMonoArm64NoLLVMNoStripSymbolsbinlog
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish build log'
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS/build.log
        artifactName:  iOSMonoArm64NoLLVMNoStripSymbolsbuildlog
    - template: /eng/pipelines/common/upload-artifact-step.yml
      parameters:
        rootFolder: $(Build.SourcesDirectory)/src/mono/sample/iOS/bin/ios-arm64/Bundle/HelloiOS/Release-iphoneos/HelloiOS.app
        includeRootFolder: true
        displayName: iOS Sample App NoLLVM
        artifactName: iOSSampleAppNoLLVMSymbolsHybridGlobalization${{parameters.hybridGlobalization}}
        archiveExtension: '.zip'
        archiveType: zip
    - script: rm -r -f $(Build.SourcesDirectory)/src/mono/sample/iOS/bin
      workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
      displayName: Clean bindir
    - script: |
        make build-appbundle TARGET_OS=ios TARGET_ARCH=arm64 BUILD_CONFIG=Release AOT=True USE_LLVM=False DEPLOY_AND_RUN=false STRIP_DEBUG_SYMBOLS=true HYBRID_GLOBALIZATION=${{ parameters.hybridGlobalization }} > build.log
        cat build.log
      env:
        DevTeamProvisioning: '-'
      workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
      displayName: Build HelloiOS AOT sample app LLVM=False STRIP_SYMBOLS=True HYBRID_GLOBALIZATION=${{ parameters.hybridGlobalization }}
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish binlog'
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS/msbuild.binlog
        artifactName:  iOSMonoArm64NoLLVMStripSymbolsbinlog
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish build log'
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS/build.log
        artifactName:  iOSMonoArm64NoLLVMStripSymbolsbuildlog
    - template: /eng/pipelines/common/upload-artifact-step.yml
      parameters:
        rootFolder: $(Build.SourcesDirectory)/src/mono/sample/iOS/bin/ios-arm64/Bundle/HelloiOS/Release-iphoneos/HelloiOS.app
        includeRootFolder: true
        displayName: iOS Sample App NoLLVM NoSymbols
        artifactName: iOSSampleAppNoLLVMNoSymbolsHybridGlobalization${{parameters.hybridGlobalization}}
        archiveExtension: '.zip'
        archiveType: zip
    - script: rm -r -f $(Build.SourcesDirectory)/src/mono/sample/iOS/bin
      workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
      displayName: Clean bindir
    - script: |
        make build-appbundle TARGET_OS=ios TARGET_ARCH=arm64 BUILD_CONFIG=Release AOT=True USE_LLVM=True DEPLOY_AND_RUN=false STRIP_DEBUG_SYMBOLS=false HYBRID_GLOBALIZATION=${{ parameters.hybridGlobalization }} > build.log
        cat build.log
      env:
        DevTeamProvisioning: '-'
      workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
      displayName: Build HelloiOS AOT sample app LLVM=True STRIP_SYMBOLS=False HYBRID_GLOBALIZATION=${{ parameters.hybridGlobalization }}
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish binlog'
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS/msbuild.binlog
        artifactName:  iOSMonoArm64LLVMNoStripSymbolsbinlog
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish build log'
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS/build.log
        artifactName:  iOSMonoArm64LLVMNoStripSymbolsbuildlog
    - template: /eng/pipelines/common/upload-artifact-step.yml
      parameters:
        rootFolder: $(Build.SourcesDirectory)/src/mono/sample/iOS/bin/ios-arm64/Bundle/HelloiOS/Release-iphoneos/HelloiOS.app
        includeRootFolder: true
        displayName: iOS Sample App LLVM
        artifactName: iOSSampleAppLLVMSymbolsHybridGlobalization${{parameters.hybridGlobalization}}
        archiveExtension: '.zip'
        archiveType: zip
    - script: rm -r -f $(Build.SourcesDirectory)/src/mono/sample/iOS/bin
      workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
      displayName: Clean bindir
    - script: |
        make build-appbundle TARGET_OS=ios TARGET_ARCH=arm64 BUILD_CONFIG=Release AOT=True USE_LLVM=True DEPLOY_AND_RUN=false STRIP_DEBUG_SYMBOLS=true HYBRID_GLOBALIZATION=${{ parameters.hybridGlobalization }} > build.log
        cat build.log
      env:
        DevTeamProvisioning: '-'
      workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS
      displayName: Build HelloiOS AOT sample app LLVM=True STRIP_SYMBOLS=True HYBRID_GLOBALIZATION=${{ parameters.hybridGlobalization }}
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish binlog'
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS/msbuild.binlog
        artifactName: iOSMonoArm64LLVMStripSymbolsbinlog
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish build log'
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS/build.log
        artifactName:  iOSMonoArm64LLVMStripSymbolsbuildlog
    - template: /eng/pipelines/common/upload-artifact-step.yml
      parameters:
        rootFolder: $(Build.SourcesDirectory)/src/mono/sample/iOS/bin/ios-arm64/Bundle/HelloiOS/Release-iphoneos/HelloiOS.app
        includeRootFolder: true
        displayName: iOS Sample App LLVM NoSymbols
        artifactName: iOSSampleAppLLVMNoSymbolsHybridGlobalization${{parameters.hybridGlobalization}}
        archiveExtension: '.zip'
        archiveType: zip

  - ${{ if and(eq(parameters.osGroup, 'ios'), eq(parameters.nameSuffix, 'iOSNativeAOT')) }}:
    - script: |
        make hello-app TARGET_OS=ios TARGET_ARCH=arm64 BUILD_CONFIG=Release DEPLOY_AND_RUN=false STRIP_DEBUG_SYMBOLS=false HYBRID_GLOBALIZATION=${{ parameters.hybridGlobalization }} > build.log
        cat build.log
      env:
        DevTeamProvisioning: '-'
      workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT
      displayName: Build HelloiOS Native AOT sample app STRIP_SYMBOLS=False HYBRID_GLOBALIZATION=${{ parameters.hybridGlobalization }}
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish binlog'
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT/msbuild.binlog
        artifactName: iOSNativeAOTArm64NoStripSymbolsbinlog
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish build log'
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT/build.log
        artifactName:  iOSNativeAOTArm64NoStripSymbolsbuildlog
    - template: /eng/pipelines/common/upload-artifact-step.yml
      parameters:
        rootFolder: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT/bin/ios-arm64/Bundle/HelloiOS/Release-iphoneos/HelloiOS.app
        includeRootFolder: true
        displayName: iOS Sample App Symbols
        artifactName: iOSSampleAppSymbolsHybridGlobalization${{parameters.hybridGlobalization}}
        archiveExtension: '.zip'
        archiveType: zip
    - script: rm -r -f $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT/bin
      workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT
      displayName: Clean bindir
    - script: |
        make hello-app TARGET_OS=ios TARGET_ARCH=arm64 BUILD_CONFIG=Release DEPLOY_AND_RUN=false STRIP_DEBUG_SYMBOLS=true HYBRID_GLOBALIZATION=${{ parameters.hybridGlobalization }} > build.log
        cat build.log
      env:
        DevTeamProvisioning: '-'
      workingDirectory: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT
      displayName: Build HelloiOS Native AOT sample app STRIP_SYMBOLS=True HYBRID_GLOBALIZATION=${{ parameters.hybridGlobalization }}
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish binlog'
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT/msbuild.binlog
        artifactName: iOSNativeAOTArm64StripSymbolsbinlog
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish build log'
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT/build.log
        artifactName:  iOSNativeAOTArm64StripSymbolsbuildlog
    - template: /eng/pipelines/common/upload-artifact-step.yml
      parameters:
        rootFolder: $(Build.SourcesDirectory)/src/mono/sample/iOS-NativeAOT/bin/ios-arm64/Bundle/HelloiOS/Release-iphoneos/HelloiOS.app
        includeRootFolder: true
        displayName: iOS Sample App NoSymbols
        artifactName: iOSSampleAppNoSymbolsHybridGlobalization${{parameters.hybridGlobalization}}
        archiveExtension: '.zip'
        archiveType: zip
