# Setting batch to true, triggers one build at a time.
# if there is a push while a build in progress, it will wait,
# until the running build finishes, and produce a build with all the changes
# that happened during the last build.
trigger:
  batch: true
  branches:
    include:
    - main
    - release/*.*
  paths:
    include:
    - '*'
    - docs/manpages/*
    exclude:
    - eng/Version.Details.xml
    - .github/*
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

pr:
  branches:
    include:
    - main
    - release/*.*
  paths:
    include:
    - '*'
    - docs/manpages/*
    exclude:
    - eng/Version.Details.xml
    - .github/*
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

variables:
  - template: /eng/pipelines/common/variables.yml

jobs:

#
# Evaluate paths
#
- ${{ if eq(variables.dependOnEvaluatePaths, true) }}:
  - template: /eng/pipelines/common/evaluate-default-paths.yml


# Build Mono AOT offset headers once, for consumption elsewhere
# Only when mono changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/mono/templates/generate-offsets.yml
    buildConfig: release
    platforms:
    #- Android_x64
    #- Browser_wasm
    #- tvOS_arm64
    #- iOS_arm64
    #- MacCatalyst_x64
    jobParameters:
      condition: >-
        or(
          eq(dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_installer.containsChange'], true),
          eq(variables['isFullMatrix'], true))

# Build the whole product using Mono runtime
# Only when libraries, mono or installer are changed
#
#
# Build the whole product using Mono and run libraries tests, multi-scenario
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/common/global-build-job.yml
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    buildConfig: Release
    runtimeFlavor: mono
    platforms:
    - Browser_wasm
    variables:
      # map dependencies variables to local variables
      - name: librariesContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'] ]
      - name: monoContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'] ]
    jobParameters:
      testGroup: innerloop
      nameSuffix: AllSubsets_Mono
      buildArgs: -s mono+libs+host+packs+libs.tests -c $(_BuildConfig) /p:ArchiveTests=true
      timeoutInMinutes: 180
      condition: >-
        or(
          eq(dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_installer.containsChange'], true),
          eq(variables['isFullMatrix'], true))
      # extra steps, run tests
      extraStepsTemplate: /eng/pipelines/libraries/helix.yml
      extraStepsParameters:
        creator: dotnet-bot
        testRunNamePrefixSuffix: Mono_$(_BuildConfig)
        scenarios:
        - buildwasmapps
        - normal
        - wasmtestonbrowser
        condition: >-
          or(
          eq(variables['librariesContainsChange'], true),
          eq(variables['monoContainsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Build for Browser/wasm, with EnableAggressiveTrimming=true
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/common/global-build-job.yml
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    buildConfig: Release
    runtimeFlavor: mono
    platforms:
    - Browser_wasm
    variables:
      # map dependencies variables to local variables
      - name: librariesContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'] ]
      - name: monoContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'] ]
    jobParameters:
      testGroup: innerloop
      nameSuffix: AllSubsets_Mono_EAT
      buildArgs: -s mono+libs+host+packs+libs.tests -c $(_BuildConfig) /p:ArchiveTests=true /p:EnableAggressiveTrimming=true /p:BuildAOTTestsOnHelix=true /p:RunAOTCompilation=false
      timeoutInMinutes: 180
      condition: >-
        or(
          eq(dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_installer.containsChange'], true),
          eq(variables['isFullMatrix'], true))
      # extra steps, run tests
      extraStepsTemplate: /eng/pipelines/libraries/helix.yml
      extraStepsParameters:
        creator: dotnet-bot
        testRunNamePrefixSuffix: Mono_$(_BuildConfig)
        extraHelixArguments: /p:NeedsToBuildWasmAppsOnHelix=true
        scenarios:
        - normal
        condition: >-
          or(
          eq(variables['librariesContainsChange'], true),
          eq(variables['monoContainsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Build for Browser/wasm with RunAOTCompilation=true
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/common/global-build-job.yml
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    buildConfig: Release
    runtimeFlavor: mono
    platforms:
    - Browser_wasm
    variables:
      # map dependencies variables to local variables
      - name: librariesContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'] ]
      - name: monoContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'] ]
    jobParameters:
      testGroup: innerloop
      nameSuffix: AllSubsets_Mono_AOT
      buildArgs: -s mono+libs+host+packs+libs.tests -c $(_BuildConfig) /p:ArchiveTests=true /p:EnableAggressiveTrimming=true /p:BuildAOTTestsOnHelix=true /p:RunAOTCompilation=true
      timeoutInMinutes: 180
      condition: >-
        or(
          eq(dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_installer.containsChange'], true),
          eq(variables['isFullMatrix'], true))
      # extra steps, run tests
      extraStepsTemplate: /eng/pipelines/libraries/helix.yml
      extraStepsParameters:
        creator: dotnet-bot
        testRunNamePrefixSuffix: Mono_$(_BuildConfig)
        extraHelixArguments: /p:NeedsToBuildWasmAppsOnHelix=true
        scenarios:
        - normal
        condition: >-
          or(
          eq(variables['librariesContainsChange'], true),
          eq(variables['monoContainsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Build the whole product using Mono and run runtime tests
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/common/global-build-job.yml
    helixQueuesTemplate: /eng/pipelines/coreclr/templates/helix-queues-setup.yml
    buildConfig: Release
    runtimeFlavor: mono
    platforms:
    - Browser_wasm
    variables:
      - ${{ if and(eq(variables['System.TeamProject'], 'public'), eq(variables['Build.Reason'], 'PullRequest')) }}:
        - name: _HelixSource
          value: pr/dotnet/runtime/$(Build.SourceBranch)
      - ${{ if and(eq(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest')) }}:
        - name: _HelixSource
          value: ci/dotnet/runtime/$(Build.SourceBranch)
      - name: timeoutPerTestInMinutes
        value: 10
      - name: timeoutPerTestCollectionInMinutes
        value: 200
    jobParameters:
      testGroup: innerloop
      nameSuffix: AllSubsets_Mono_RuntimeTests
      buildArgs: -s mono+libs -c $(_BuildConfig)
      timeoutInMinutes: 180
      condition: >-
        or(
          eq(dependencies.evaluate_paths.outputs['SetPathVars_runtimetests.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'], true),
          eq(variables['isFullMatrix'], true))
      # extra steps, run tests
      extraStepsTemplate: /eng/pipelines/common/templates/runtimes/wasm-runtime-and-send-to-helix.yml
      extraStepsParameters:
        creator: dotnet-bot
        testRunNamePrefixSuffix: Mono_$(_BuildConfig)
