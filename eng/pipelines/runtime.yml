# Setting batch to true, triggers one build at a time.
# if there is a push while a build in progress, it will wait,
# until the running build finishes, and produce a build with all the changes
# that happened during the last build.
trigger:
  batch: true
  branches:
    include:
    - master
    - release/*.*
  paths:
    include:
    - '*'
    - docs/manpages/*
    exclude:
    - eng/Version.Details.xml
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

pr:
  branches:
    include:
    - master
    - release/*.*
  paths:
    include:
    - '*'
    - docs/manpages/*
    exclude:
    - eng/Version.Details.xml
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

variables:
  - template: /eng/pipelines/common/variables.yml

jobs:
#
# Checkout repository
#
- template: /eng/pipelines/common/checkout-job.yml
  parameters:
    paths:
    - subset: coreclr
      include:
      - src/libraries/System.Private.CoreLib/*
      - src/libraries/Native/Unix/System.Globalization.Native/*
      - src/libraries/Native/Unix/Common/*
      exclude:
      - eng/Version.Details.xml
      - '*.md'
      - LICENSE.TXT
      - PATENTS.TXT
      - THIRD-PARTY-NOTICES.TXT
      - docs/*
      - src/installer/*
      - src/mono/*
      - src/libraries/*
      - eng/pipelines/installer/*
      - eng/pipelines/mono/*
      - eng/pipelines/libraries/*
    - subset: mono
      include:
      - src/libraries/System.Private.CoreLib/*
      exclude:
      - eng/Version.Details.xml
      - '*.md'
      - LICENSE.TXT
      - PATENTS.TXT
      - THIRD-PARTY-NOTICES.TXT
      - docs/*
      - src/installer/*
      - src/coreclr/*
      - src/libraries/*
      - eng/pipelines/installer/*
      - eng/pipelines/coreclr/*
      - eng/pipelines/libraries/*
    - subset: libraries
      exclude:
      - eng/Version.Details.xml
      - '*.md'
      - LICENSE.TXT
      - PATENTS.TXT
      - THIRD-PARTY-NOTICES.TXT
      - docs/*
      - src/installer/*
      - src/mono/*
      - src/coreclr/*
      - eng/pipelines/coreclr/*
      - eng/pipelines/mono/*
      - eng/pipelines/installer/*
    - subset: installer
      include:
      - docs/manpages/*
      exclude:
      - eng/Version.Details.xml
      - '*.md'
      - LICENSE.TXT
      - PATENTS.TXT
      - THIRD-PARTY-NOTICES.TXT
      - docs/*
      - src/coreclr/*
      - src/mono/*
      - src/libraries/*
      - eng/pipelines/coreclr/*
      - eng/pipelines/mono/*
      - eng/pipelines/libraries/*

#
# Build CoreCLR checked
# Only when CoreCLR is changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/build-job.yml
    buildConfig: checked
    platforms:
    - linux_x64
    - linux_arm
    - linux_arm64
    - linux_musl_x64
    - win_x86
    - win_x64
    - win_arm
    - win_arm64
    jobParameters:
      testGroup: innerloop
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Build CoreCLR checked using GCC toolchain
# Only when CoreCLR is changed
# 
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/build-job.yml
    buildConfig: checked
    platforms:
    - Linux_x64
    jobParameters:
      testGroup: innerloop
      compilerName: gcc
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Build CoreCLR OSX_x64 checked
# Only when CoreCLR or Libraries is changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/build-job.yml
    buildConfig: checked
    platforms:
    - osx_x64
    jobParameters:
      testGroup: innerloop
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Build CoreCLR release
# Always as they are needed by Installer and we always build and test the Installer.
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/build-job.yml
    buildConfig: release
    platforms:
    - osx_x64
    - linux_x64
    - linux_arm
    - linux_arm64
    - linux_musl_x64
    - linux_musl_arm64
    - win_x64
    - win_x86
    - win_arm
    - win_arm64
    jobParameters:
      testGroup: innerloop

#
# Build CoreCLR Formatting Job
# Only when CoreCLR is changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/format-job.yml
    platforms:
    - linux_x64
    - win_x64
    jobParameters:
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Build Mono debug
# Only when libraries or mono changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/mono/templates/build-job.yml
    runtimeFlavor: mono
    buildConfig: debug
    platforms:
    - ios_x64
    - ios_arm
    - ios_arm64
    - osx_x64
    - linux_x64
    - linux_arm
    - linux_arm64
    - linux_musl_x64
    # - linux_musl_arm64
    - win_x64
    # - win_x86
    # - win_arm
    # - win_arm64
    jobParameters:
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(dependencies.checkout.outputs['SetPathVars_mono.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Build Mono release
# Only when libraries or mono changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/mono/templates/build-job.yml
    runtimeFlavor: mono
    buildConfig: release
    platforms:
    - ios_x64
    - ios_arm
    - ios_arm64
    - osx_x64
    - linux_x64
    - linux_arm
    - linux_arm64
    - linux_musl_x64
    # - linux_musl_arm64
    - win_x64
    # - win_x86
    # - win_arm
    # - win_arm64
    jobParameters:
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(dependencies.checkout.outputs['SetPathVars_mono.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Build Mono LLVM debug
# Only when libraries or mono changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/mono/templates/build-job.yml
    runtimeFlavor: mono
    buildConfig: debug
    platforms:
    - osx_x64
    - linux_x64
    # - linux_arm
    # - linux_arm64
    # - linux_musl_x64
    # - linux_musl_arm64
    # - win_x64
    # - win_x86
    # - win_arm
    # - win_arm64
    jobParameters:
      llvm: true
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(dependencies.checkout.outputs['SetPathVars_mono.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Build Mono LLVM release
# Only when libraries or mono changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/mono/templates/build-job.yml
    runtimeFlavor: mono
    buildConfig: release
    platforms:
    - osx_x64
    - linux_x64
    # - linux_arm
    # - linux_arm64
    # - linux_musl_x64
    # - linux_musl_arm64
    # - win_x64
    # - win_x86
    # - win_arm
    # - win_arm64
    jobParameters:
      llvm: true
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(dependencies.checkout.outputs['SetPathVars_mono.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Build libraries using live CoreLib
# These set of libraries are built always no matter what changed
# The reason for that is because Corelib and Installer needs it and
# These are part of the test matrix for Libraries changes.
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/build-job.yml
    buildConfig: Release
    platforms:
    - linux_arm
    - linux_musl_arm64
    - win_arm
    - win_arm64
    - win_x86
    jobParameters:
      liveRuntimeBuildConfig: release

- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/build-job.yml
    buildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
    platforms:
    - linux_arm64
    - linux_musl_x64
    - linux_x64
    - osx_x64
    - win_x64
    jobParameters:
      liveRuntimeBuildConfig: release

#
# Build libraries using Mono CoreLib only
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/build-job.yml
    buildConfig: Release
    runtimeFlavor: mono
    platforms:
    - iOS_arm
    - iOS_arm64
    - iOS_x64
    jobParameters:
      liveRuntimeBuildConfig: release

- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/build-job.yml
    buildConfig: Debug
    runtimeFlavor: mono
    platforms:
    - iOS_arm
    - iOS_arm64
    - iOS_x64
    jobParameters:
      liveRuntimeBuildConfig: debug

#
# Libraries Build that only run when libraries is changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/build-job.yml
    buildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
    platforms:
    - WebAssembly_wasm
    - ${{ if eq(variables['isFullMatrix'], false) }}:
      - win_x86
    jobParameters:
      liveRuntimeBuildConfig: release
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(variables['isFullMatrix'], true))

- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/build-job.yml
    buildConfig: Release
    platforms:
    - win_x86
    - ${{ if eq(variables['isFullMatrix'], true) }}:
      - win_x64
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    jobParameters:
      isFullMatrix: ${{ variables.isFullMatrix }}
      framework: net472
      runTests: true
      testScope: innerloop
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(variables['isFullMatrix'], true))

- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/build-job.yml
    buildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
    platforms:
    - win_x64
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    jobParameters:
      isFullMatrix: ${{ variables.isFullMatrix }}
      framework: allConfigurations
      runTests: true
      liveRuntimeBuildConfig: release
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Installer Build and Test
# These are always built since they only take like 15 minutes
# we expect these to be done before we finish libraries or coreclr testing.
#
- template: /eng/pipelines/installer/installer-matrix.yml
  parameters:
    buildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
    platforms:
      - linux_arm
      - linux_musl_arm64
      - win_x86
      - win_arm
      - win_arm64
    jobParameters:
      liveRuntimeBuildConfig: release
      liveLibrariesBuildConfig: Release

- template: /eng/pipelines/installer/installer-matrix.yml
  parameters:
    buildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
    platforms:
      - osx_x64
      - linux_x64
      - linux_arm64
      - linux_musl_x64
      - win_x64
    jobParameters:
      liveRuntimeBuildConfig: release
      liveLibrariesBuildConfig: ${{ variables.debugOnPrReleaseOnRolling }}

#
# Libraries Test Build
# Only when CoreCLR, Mono or Libraries is changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/build-test-job.yml
    buildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
    platforms:
    - osx_x64
    - linux_x64
    - win_x64
    jobParameters:
      isOfficialBuild: false
      liveRuntimeBuildConfig: release
      testScope: innerloop
      condition: >- 
        or(
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(dependencies.checkout.outputs['SetPathVars_mono.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Crossgen-comparison jobs
# Only when CoreCLR is changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/crossgen-comparison-job.yml
    buildConfig: checked
    platforms:
    - linux_arm
    helixQueueGroup: pr
    helixQueuesTemplate: /eng/pipelines/coreclr/templates/helix-queues-setup.yml
    jobParameters:
      liveLibrariesBuildConfig: Release
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# CoreCLR Test builds using live libraries release build
# Only when CoreCLR is changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/build-test-job.yml
    buildConfig: checked
    platforms:
    - linux_arm 
    - win_x86
    - win_arm
    - win_arm64
    jobParameters:
      testGroup: innerloop
      liveLibrariesBuildConfig: Release
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# CoreCLR Test builds using live libraries debug build
# Only when CoreCLR is changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/build-test-job.yml
    buildConfig: checked
    platforms:
    - osx_x64
    - linux_x64
    - linux_arm64
    - win_x64
    jobParameters:
      testGroup: innerloop
      liveLibrariesBuildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# CoreCLR Test executions using live libraries
# Only when CoreCLR is changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/run-test-job.yml
    buildConfig: checked
    platforms:
    - linux_arm
    - win_x86
    - win_arm
    - win_arm64
    helixQueueGroup: pr
    helixQueuesTemplate: /eng/pipelines/coreclr/templates/helix-queues-setup.yml
    jobParameters:
      testGroup: innerloop
      liveLibrariesBuildConfig: Release
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(variables['isFullMatrix'], true))

- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/run-test-job.yml
    buildConfig: checked
    platforms:
    - osx_x64
    - linux_x64
    - linux_arm64
    - win_x64
    helixQueueGroup: pr
    helixQueuesTemplate: /eng/pipelines/coreclr/templates/helix-queues-setup.yml
    jobParameters:
      testGroup: innerloop
      liveLibrariesBuildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Libraries Release Test Execution against a release mono runtime.
# Only when libraries or mono changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/run-test-job.yml
    runtimeFlavor: mono
    buildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
    platforms:
    # - win_x64
    - osx_x64
    - linux_arm64
    - linux_x64
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    jobParameters:
      isOfficialBuild: false
      isFullMatrix: ${{ variables.isFullMatrix }}
      testScope: innerloop
      liveRuntimeBuildConfig: release
      dependsOnTestBuildConfiguration: ${{ variables.debugOnPrReleaseOnRolling }}
      dependsOnTestArchitecture: x64
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(dependencies.checkout.outputs['SetPathVars_mono.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Libraries Release Test Execution against a release coreclr runtime
# Only when the PR contains a libraries change
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/run-test-job.yml
    buildConfig: Release
    platforms:
    - win_x86
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    jobParameters:
      isOfficialBuild: false
      isFullMatrix: ${{ variables.isFullMatrix }}
      testScope: innerloop
      liveRuntimeBuildConfig: release
      dependsOnTestBuildConfiguration: ${{ variables.debugOnPrReleaseOnRolling }}
      dependsOnTestArchitecture: x64
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Libraries Debug Test Execution against a release coreclr runtime
# Only when the PR contains a libraries change
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/run-test-job.yml
    buildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
    platforms:
    - win_x64
    - osx_x64
    - linux_x64
    - linux_musl_x64
    - ${{ if eq(variables['isFullMatrix'], true) }}:
      - linux_arm
      - linux_arm64
      - linux_musl_arm64
    - ${{ if eq(variables['isFullMatrix'], false) }}:
      - win_x86
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    jobParameters:
      isOfficialBuild: false
      isFullMatrix: ${{ variables.isFullMatrix }}
      testScope: innerloop
      liveRuntimeBuildConfig: release
      dependsOnTestBuildConfiguration: ${{ variables.debugOnPrReleaseOnRolling }}
      dependsOnTestArchitecture: x64
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Libraries Test Execution against a checked runtime
# Only when the PR contains a coreclr change
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/run-test-job.yml
    buildConfig: Release
    platforms:
    # - Windows_arm return this when https://github.com/dotnet/runtime/issues/1097 is fixed.
    - win_x86
    helixQueuesTemplate: /eng/pipelines/coreclr/templates/helix-queues-setup.yml
    helixQueueGroup: libraries
    jobParameters:
      testScope: innerloop
      liveRuntimeBuildConfig: checked
      dependsOnTestBuildConfiguration: ${{ variables.debugOnPrReleaseOnRolling }}
      dependsOnTestArchitecture: x64
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(variables['isFullMatrix'], true))

- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/run-test-job.yml
    buildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
    platforms:
    - win_x64
    - linux_x64
    - linux_musl_x64
    helixQueuesTemplate: /eng/pipelines/coreclr/templates/helix-queues-setup.yml
    helixQueueGroup: libraries
    jobParameters:
      testScope: innerloop
      liveRuntimeBuildConfig: checked
      dependsOnTestBuildConfiguration: ${{ variables.debugOnPrReleaseOnRolling }}
      dependsOnTestArchitecture: x64
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(variables['isFullMatrix'], true))

#
# Libraries Test Execution against a checked runtime
# Only if CoreCLR or Libraries is changed
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/libraries/run-test-job.yml
    buildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
    platforms:
    - osx_x64
    helixQueuesTemplate: /eng/pipelines/coreclr/templates/helix-queues-setup.yml
    helixQueueGroup: libraries
    jobParameters:
      testScope: innerloop
      liveRuntimeBuildConfig: checked
      dependsOnTestBuildConfiguration: ${{ variables.debugOnPrReleaseOnRolling }}
      dependsOnTestArchitecture: x64
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'], true),
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(variables['isFullMatrix'], true))
