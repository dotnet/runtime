# Setting batch to true, triggers one build at a time.
# if there is a push while a build in progress, it will wait,
# until the running build finishes, and produce a build with all the changes
# that happened during the last build.
trigger:
  batch: true
  branches:
    include:
    - release/*.*
  paths:
    include:
    - '*'
    exclude:
    - '**.md'
    - eng/Version.Details.xml
    - .devcontainer/*
    - .github/*
    - docs/*
    - LICENSE.TXT
    - PATENTS.TXT
    - THIRD-PARTY-NOTICES.TXT
    - eng/pipelines/coreclr/perf*yml
    - eng/pipelines/coreclr/templates/build-perf*
    - eng/pipelines/coreclr/templates/perf-job.yml
    - eng/pipelines/coreclr/templates/run-perf*
    - eng/testing/performance/*

schedules:
  - cron: "0 8,20 * * *" # run at 8:00 and 20:00 (UTC) which is 00:00 and 12:00 (PST).
    displayName: Runtime default schedule
    branches:
      include:
      - main
    always: false # run only if there were changes since the last successful scheduled run.

pr:
  branches:
    include:
    - main
    - release/*.*
  paths:
    include:
    - '*'
    exclude:
    - '**.md'
    - eng/Version.Details.xml
    - .devcontainer/*
    - .github/*
    - docs/*
    - LICENSE.TXT
    - PATENTS.TXT
    - THIRD-PARTY-NOTICES.TXT

variables:
  - template: /eng/pipelines/common/variables.yml

extends:
  template:  /eng/pipelines/common/templates/pipeline-with-resources.yml
  parameters:
    isOfficialBuild: false
    stages:
    - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      - stage: EvaluatePaths
        displayName: Evaluate Paths
        jobs:
          - template: /eng/pipelines/common/evaluate-default-paths.yml

    - stage: Build
      jobs:


      # Build Mono AOT offset headers once, for consumption elsewhere
      # Only when mono changed
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: release
          platforms:
          - wasi_wasm
          variables:
            - name: _osParameter
              value: -os linux
            - name: _archParameter
              value: -arch x64
          jobParameters:
            nameSuffix: MonoAOTOffsets
            buildArgs: -s mono.aotcross -c $(_BuildConfig) /p:MonoGenerateOffsetsOSGroups=$(osGroup)
            postBuildSteps:
              # Upload offset files
              - task: CopyFiles@2
                displayName: Collect offset files
                inputs:
                  sourceFolder: '$(Build.SourcesDirectory)/artifacts/obj/mono/'
                  contents: '**/offsets-*.h'
                  targetFolder: '$(Build.SourcesDirectory)/artifacts/obj/mono/offsetfiles/'

              - publish: '$(Build.SourcesDirectory)/artifacts/obj/mono/offsetfiles'
                artifact: Mono_Offsets_$(osGroup)$(osSubGroup)
                displayName: Upload offset files
            # needed by crossaot
            condition: >-
              or(
                eq(stageDependencies.EvaluatePaths.evaluate_paths.outputs['SetPathVars_mono_excluding_wasm.containsChange'], true),
                eq(stageDependencies.EvaluatePaths.evaluate_paths.outputs['SetPathVars_installer.containsChange'], true),
                eq(variables['isRollingBuild'], true))

      # WASI/WASM

      - template: /eng/pipelines/common/templates/wasm-library-tests.yml
        parameters:
          platforms:
            - wasi_wasm
            - wasi_wasm_win
          nameSuffix: '_Smoke'
          extraBuildArgs: /p:EnableAggressiveTrimming=true /p:RunWasmSamples=true /p:AotHostArchitecture=x64 /p:AotHostOS=$(_hostedOS)
          shouldRunSmokeOnly: true
          alwaysRun: ${{ variables.isRollingBuild }}
          scenarios:
            - WasmTestOnWasmtime

      - template: /eng/pipelines/common/templates/simple-wasm-build-tests.yml
        parameters:
          platforms:
            - wasi_wasm
            - wasi_wasm_win
          extraBuildArgs: /p:AotHostArchitecture=x64 /p:AotHostOS=$(_hostedOS)
          alwaysRun: ${{ variables.isRollingBuild }}

      #
      # Build Mono release AOT cross-compilers
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          runtimeFlavor: mono
          buildConfig: release
          platforms:
          - linux_x64
          - linux_musl_x64
          - linux_arm64
          - linux_musl_arm64
          jobParameters:
            buildArgs: -s mono+packs -c $(_BuildConfig)
                      /p:MonoCrossAOTTargetOS=android+browser+wasi /p:SkipMonoCrossJitConfigure=true /p:BuildMonoAOTCrossCompilerOnly=true
            nameSuffix: CrossAOT_Mono
            runtimeVariant: crossaot
            dependsOn:
            - build_wasi_wasm_linux_release_MonoAOTOffsets
            monoCrossAOTTargetOS:
            - wasi
            condition: >-
              or(
                eq(stageDependencies.EvaluatePaths.evaluate_paths.outputs['SetPathVars_mono_excluding_wasm.containsChange'], true),
                eq(stageDependencies.EvaluatePaths.evaluate_paths.outputs['SetPathVars_installer.containsChange'], true),
                eq(variables['isRollingBuild'], true))

      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          runtimeFlavor: mono
          buildConfig: release
          platforms:
          - windows_arm64
          - windows_x64
          jobParameters:
            buildArgs: -s mono+packs -c $(_BuildConfig)
                      /p:MonoCrossAOTTargetOS=android+browser+wasi /p:SkipMonoCrossJitConfigure=true /p:BuildMonoAOTCrossCompilerOnly=true
            nameSuffix: CrossAOT_Mono
            runtimeVariant: crossaot
            dependsOn:
            - build_android_x64_release_MonoAOTOffsets
            - build_browser_wasm_linux_release_MonoAOTOffsets
            - build_wasi_wasm_linux_release_MonoAOTOffsets
            monoCrossAOTTargetOS:
            - wasi
            condition: >-
              or(
                eq(stageDependencies.EvaluatePaths.evaluate_paths.outputs['SetPathVars_mono_excluding_wasm.containsChange'], true),
                eq(stageDependencies.EvaluatePaths.evaluate_paths.outputs['SetPathVars_installer.containsChange'], true),
                eq(variables['isRollingBuild'], true))
      #
      # Build Mono release AOT cross-compilers
      # Only when mono changed
      #

      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          runtimeFlavor: mono
          buildConfig: release
          platforms:
          - osx_x64
          - osx_arm64
          jobParameters:
            buildArgs: -s mono+packs -c $(_BuildConfig)
                      /p:MonoCrossAOTTargetOS=android+browser+wasi+tvos+ios+maccatalyst /p:SkipMonoCrossJitConfigure=true /p:BuildMonoAOTCrossCompilerOnly=true
            nameSuffix: CrossAOT_Mono
            runtimeVariant: crossaot
            dependsOn:
            - build_wasi_wasm_linux_release_MonoAOTOffsets
            monoCrossAOTTargetOS:
            - wasi
            condition: >-
              or(
                eq(stageDependencies.EvaluatePaths.evaluate_paths.outputs['SetPathVars_mono.containsChange'], true),
                eq(stageDependencies.EvaluatePaths.evaluate_paths.outputs['SetPathVars_installer.containsChange'], true),
                eq(variables['isRollingBuild'], true))

