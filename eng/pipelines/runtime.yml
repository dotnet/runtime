# Setting batch to true, triggers one build at a time.
# if there is a push while a build in progress, it will wait,
# until the running build finishes, and produce a build with all the changes
# that happened during the last build.
trigger:
  batch: true
  branches:
    include:
    - release/*.*
  paths:
    include:
    - '*'
    exclude:
    - '**.md'
    - eng/Version.Details.xml
    - .devcontainer/*
    - .github/*
    - docs/*
    - LICENSE.TXT
    - PATENTS.TXT
    - THIRD-PARTY-NOTICES.TXT
    - eng/pipelines/performance/*
    - eng/testing/performance/*

schedules:
  - cron: "0 8,20 * * *" # run at 8:00 and 20:00 (UTC) which is 00:00 and 12:00 (PST).
    displayName: Runtime default schedule
    branches:
      include:
      - main
    always: false # run only if there were changes since the last successful scheduled run.

pr:
  branches:
    include:
    - main
    - release/*.*
  paths:
    include:
    - '*'
    exclude:
    - '**.md'
    - eng/Version.Details.xml
    - .devcontainer/*
    - .github/*
    - docs/*
    - LICENSE.TXT
    - PATENTS.TXT
    - THIRD-PARTY-NOTICES.TXT

variables:
  - template: /eng/pipelines/common/variables.yml

extends:
  template:  /eng/pipelines/common/templates/pipeline-with-resources.yml
  parameters:
    isOfficialBuild: false
    stages:
    - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      - stage: EvaluatePaths
        displayName: Evaluate Paths
        jobs:
          - template: /eng/pipelines/common/evaluate-default-paths.yml

    - stage: Build
      jobs:

      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: ${{ variables.debugOnPrReleaseOnRolling }}
          platforms:
          - browser_wasm
          jobParameters:
            nameSuffix: AllSubsets_CoreCLR
            buildArgs: -s mono.emsdk+clr.paltests -rc Release -c Release -lc $(_BuildConfig)
            timeoutInMinutes: 120
            condition: >-
              or(
                eq(stageDependencies.EvaluatePaths.evaluate_paths.outputs['SetPathVars_non_mono_and_wasm.containsChange'], true),
                eq(variables['isRollingBuild'], true))

    - stage: SourceBuild
      displayName: Source Build Validation
      dependsOn: []
      condition: eq(variables['isRollingBuild'], true)
      jobs:
        #
        # Sourcebuild legs
        # We have 3 important legs for source-build:
        # - Centos.9 (ensures that known non-portable RID is working)
        # - Linux-x64 portable (used for dependency flow and downstream PR verification)
        # - Banana.24 - Non-existent RID to ensure we don't break RIDs we don't know about.
        #
        # Running all of these everywhere is wasteful. Run Banana.24 and CentOS.9 in rolling CI,
        # Run Linux-x64 in PR.
        - template: /eng/common/templates/jobs/source-build.yml
          parameters:
            platforms:
              - name: CentOS9
                targetRID: centos.9-x64
                portableBuild: false
                container: SourceBuild_centos_x64
              - name: NonexistentRID
                baseOS: linux
                targetRID: banana.24-x64
                portableBuild: false
                container: SourceBuild_centos_x64
