# Setting batch to true, triggers one build at a time.
# if there is a push while a build in progress, it will wait,
# until the running build finishes, and produce a build with all the changes
# that happened during the last build.
trigger:
  batch: true
  branches:
    include:
    - release/*.*
  paths:
    include:
    - '*'
    exclude:
    - '**.md'
    - eng/Version.Details.xml
    - .devcontainer/*
    - .github/*
    - docs/*
    - LICENSE.TXT
    - PATENTS.TXT
    - THIRD-PARTY-NOTICES.TXT
    - eng/pipelines/coreclr/perf*yml
    - eng/pipelines/coreclr/templates/build-perf*
    - eng/pipelines/coreclr/templates/perf-job.yml
    - eng/pipelines/coreclr/templates/run-perf*
    - eng/testing/performance/*

schedules:
  - cron: "0 8,20 * * *" # run at 8:00 and 20:00 (UTC) which is 00:00 and 12:00 (PST).
    displayName: Runtime default schedule
    branches:
      include:
      - main
    always: false # run only if there were changes since the last successful scheduled run.

pr:
  branches:
    include:
    - main
    - release/*.*
  paths:
    include:
    - '*'
    exclude:
    - '**.md'
    - eng/Version.Details.xml
    - .devcontainer/*
    - .github/*
    - docs/*
    - LICENSE.TXT
    - PATENTS.TXT
    - THIRD-PARTY-NOTICES.TXT

variables:
  - template: /eng/pipelines/common/variables.yml

extends:
  template:  /eng/pipelines/common/templates/pipeline-with-resources.yml
  parameters:
    stages:
    - stage: Build
      jobs:
      #
      # Evaluate paths
      #
      - ${{ if eq(variables.dependOnEvaluatePaths, true) }}:
        - template: /eng/pipelines/common/evaluate-default-paths.yml

      #
      # WebAssembly legs
      #
      - template: /eng/pipelines/common/templates/wasm-library-tests.yml
        parameters:
          platforms:
            - browser_wasm
          alwaysRun: ${{ variables.isRollingBuild }}
          extraBuildArgs: /p:AotHostArchitecture=x64 /p:AotHostOS=$(_hostedOS)
          scenarios:
            - normal
            - WasmTestOnBrowser

      - template: /eng/pipelines/common/templates/wasm-library-tests.yml
        parameters:
          platforms:
            - browser_wasm_win
          alwaysRun: ${{ variables.isRollingBuild }}
          extraBuildArgs: /p:AotHostArchitecture=x64 /p:AotHostOS=$(_hostedOS)
          scenarios:
            - WasmTestOnBrowser

      # Library tests with full threading
      - template: /eng/pipelines/common/templates/wasm-library-tests.yml
        parameters:
          platforms:
            - browser_wasm
            #- browser_wasm_win
          nameSuffix: _Threading
          extraBuildArgs: /p:WasmEnableThreads=true /p:AotHostArchitecture=x64 /p:AotHostOS=$(_hostedOS)
          alwaysRun: ${{ variables.isRollingBuild }}
          shouldRunSmokeOnly: onLibrariesAndIllinkChanges
          scenarios:
            - WasmTestOnBrowser
            #- WasmTestOnNodeJS - this is not supported yet, https://github.com/dotnet/runtime/issues/85592

      # For Wasm.Build.Tests - runtime pack builds
      - template: /eng/pipelines/common/templates/wasm-build-only.yml
        parameters:
          platforms:
            - browser_wasm
            - browser_wasm_win
          condition: or(eq(variables.isRollingBuild, true), eq(variables.wasmSingleThreadedBuildOnlyNeededOnDefaultPipeline, true))
          nameSuffix: SingleThreaded
          extraBuildArgs: /p:AotHostArchitecture=x64 /p:AotHostOS=$(_hostedOS)
          publishArtifactsForWorkload: true
          publishWBT: true

      - template: /eng/pipelines/common/templates/wasm-build-only.yml
        parameters:
          platforms:
            - browser_wasm
            - browser_wasm_win
          condition: or(eq(variables.isRollingBuild, true), eq(variables.wasmSingleThreadedBuildOnlyNeededOnDefaultPipeline, true))
          nameSuffix: MultiThreaded
          extraBuildArgs: /p:WasmEnableThreads=true /p:AotHostArchitecture=x64 /p:AotHostOS=$(_hostedOS)
          publishArtifactsForWorkload: true
          publishWBT: false

      # Browser Wasm.Build.Tests
      - template: /eng/pipelines/common/templates/browser-wasm-build-tests.yml
        parameters:
          platforms:
            - browser_wasm
            - browser_wasm_win
          alwaysRun: ${{ variables.isRollingBuild }}
          extraBuildArgs: /p:AotHostArchitecture=x64 /p:AotHostOS=$(_hostedOS)

      # Wasm runtime tests
      - template: /eng/pipelines/common/templates/wasm-runtime-tests.yml
        parameters:
          platforms:
            - browser_wasm
          alwaysRun: ${{ variables.isRollingBuild }}
          extraBuildArgs: /p:AotHostArchitecture=x64 /p:AotHostOS=$(_hostedOS)

