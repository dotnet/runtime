# Setting batch to true, triggers one build at a time.
# if there is a push while a build in progress, it will wait,
# until the running build finishes, and produce a build with all the changes
# that happened during the last build.
trigger:
  batch: true
  branches:
    include:
    - main
  paths:
    include:
    - '*'
    - docs/manpages/*
    exclude:
    - eng/Version.Details.xml
    - .github/*
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

pr:
  branches:
    include:
    - main
    - release/*.*
  paths:
    include:
    - '*'
    - docs/manpages/*
    exclude:
    - eng/Version.Details.xml
    - .github/*
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

variables:
  - template: /eng/pipelines/common/variables.yml

jobs:
#
# Evaluate paths
#
- ${{ if eq(variables.dependOnEvaluatePaths, true) }}:
  - template: /eng/pipelines/common/evaluate-default-paths.yml

#
# Build the whole product using Mono and run libraries tests
#
#- template: /eng/pipelines/common/platform-matrix.yml
  #parameters:
    #jobTemplate: /eng/pipelines/common/global-build-job.yml
    #helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    #buildConfig: Release
    #runtimeFlavor: mono
    #platforms:
    #- Android_x86
    #- Android_x64
    #- iOSSimulator_x64
    #- tvOSSimulator_x64
    #variables:
      ## map dependencies variables to local variables
      #- name: librariesContainsChange
        #value: $[ dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'] ]
      #- name: monoContainsChange
        #value: $[ dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'] ]
    #jobParameters:
      #testGroup: innerloop
      #nameSuffix: AllSubsets_Mono
      #buildArgs: -s mono+libs+host+packs+libs.tests -c $(_BuildConfig) /p:ArchiveTests=true
      #timeoutInMinutes: 180
      #condition: >-
        #or(
          #eq(dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'], true),
          #eq(dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'], true),
          #eq(dependencies.evaluate_paths.outputs['SetPathVars_installer.containsChange'], true),
          #eq(variables['isFullMatrix'], true))
      ## extra steps, run tests
      #extraStepsTemplate: /eng/pipelines/libraries/helix.yml
      #extraStepsParameters:
        #creator: dotnet-bot
        #testRunNamePrefixSuffix: Mono_$(_BuildConfig)
        #condition: >-
          #or(
          #eq(variables['librariesContainsChange'], true),
          #eq(variables['monoContainsChange'], true),
          #eq(variables['isFullMatrix'], true))

#- template: /eng/pipelines/common/platform-matrix.yml
  #parameters:
    #jobTemplate: /eng/pipelines/common/global-build-job.yml
    #buildConfig: Release
    #platforms:
    #- Android_arm
    #jobParameters:
      #testGroup: innerloop
      #nameSuffix: Build_Subset_Mono
      #buildArgs: -subset mono+libs

#
# Build the whole product using Mono and run libraries tests
#
#- template: /eng/pipelines/common/platform-matrix.yml
  #parameters:
    #jobTemplate: /eng/pipelines/common/global-build-job.yml
    #helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    #buildConfig: Release
    #runtimeFlavor: mono
    #platforms:
    #- Windows_x64
    #variables:
      ## map dependencies variables to local variables
      #- name: librariesContainsChange
        #value: $[ dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'] ]
      #- name: monoContainsChange
        #value: $[ dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'] ]
    #jobParameters:
      #testScope: innerloop
      #nameSuffix: AllSubsets_Mono
      #buildArgs: -s mono+libs+host+packs+libs.tests -c $(_BuildConfig) /p:ArchiveTests=true
      #timeoutInMinutes: 120
      #condition: >-
        #or(
          #eq(dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'], true),
          #eq(dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'], true),
          #eq(dependencies.evaluate_paths.outputs['SetPathVars_installer.containsChange'], true),
          #eq(variables['isFullMatrix'], true))
      ## extra steps, run tests
      #extraStepsTemplate: /eng/pipelines/libraries/helix.yml
      #extraStepsParameters:
        #creator: dotnet-bot
        #testRunNamePrefixSuffix: Mono_$(_BuildConfig)
        #condition: >-
          #or(
          #eq(variables['librariesContainsChange'], true),
          #eq(variables['monoContainsChange'], true),
          #eq(variables['isFullMatrix'], true))

#
# Build the whole product using Mono for Android and run runtime tests with interpreter
#
#
# Build Browser_wasm, on windows
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/common/global-build-job.yml
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    buildConfig: release
    runtimeFlavor: mono
    platforms:
    - Browser_wasm_win
    variables:
      # map dependencies variables to local variables
      - name: librariesContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'] ]
      - name: monoContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'] ]
    jobParameters:
      testGroup: innerloop
      nameSuffix: Browser_wasm_Windows
      buildArgs: -subset mono+libs+host+packs+libs.tests -c $(_BuildConfig) /p:ArchiveTests=true /p:BrowserHost=windows /p:TryOption1=false
      timeoutInMinutes: 120
      condition: >-
        or(
          eq(dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_installer.containsChange'], true),
          eq(variables['isFullMatrix'], true))
      # extra steps, run tests
      extraStepsTemplate: /eng/pipelines/libraries/helix.yml
      extraStepsParameters:
        creator: dotnet-bot
        testRunNamePrefixSuffix: Mono_$(_BuildConfig)
        extraHelixArguments: /p:BrowserHost=windows
        scenarios:
        - buildwasmapps
        - normal
        condition: >-
          or(
          eq(variables['librariesContainsChange'], true),
          eq(variables['monoContainsChange'], true),
          eq(variables['isFullMatrix'], true))
#
# CoreCLR Build for running Apple Silicon libraries-innerloop
#
#- template: /eng/pipelines/common/platform-matrix.yml
  #parameters:
    #jobTemplate: /eng/pipelines/coreclr/templates/build-job.yml
    #buildConfig: release
    #platforms:
    #- ${{ if eq(variables['isFullMatrix'], true) }}:
      #- OSX_arm64
    #jobParameters:
      #testGroup: innerloop
##
## Libraries Build for running Apple Silicon libraries-innerloop
##
#- template: /eng/pipelines/common/platform-matrix.yml
  #parameters:
    #jobTemplate: /eng/pipelines/libraries/build-job.yml
    #buildConfig: Release
    #platforms:
    #- ${{ if eq(variables['isFullMatrix'], true) }}:
      #- OSX_arm64
    #helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    #jobParameters:
      #isOfficialBuild: ${{ variables['isOfficialBuild'] }}
      #isFullMatrix: ${{ variables['isFullMatrix'] }}
      #runTests: true
      #testScope: innerloop
      #liveRuntimeBuildConfig: release
