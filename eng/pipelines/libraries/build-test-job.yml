parameters:
  buildConfig: ''
  osGroup: ''
  osSubgroup: ''
  archType: ''
  framework: ''
  isOfficialBuild: false
  liveRuntimeBuildConfig: ''
  runtimeFlavor: 'coreclr'
  runtimeVariant: ''
  timeoutInMinutes: 150
  container: ''
  publishTestArtifacs: true
  pool: ''
  testScope: ''
  variables: {}
  condition: true
  runTests: false

jobs:
  - template: /eng/pipelines/libraries/base-job.yml
    parameters:
      buildConfig: ${{ parameters.buildConfig }}
      osGroup:  ${{ parameters.osGroup }}
      osSubgroup:  ${{ parameters.osSubgroup }}
      archType:  ${{ parameters.archType }}
      framework:  ${{ parameters.framework }}
      isOfficialBuild: ${{ parameters.isOfficialBuild }}
      condition: ${{ parameters.condition }}
      liveRuntimeBuildConfig: ${{ parameters.liveRuntimeBuildConfig }}
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
      container: ${{ parameters.container }}
      runtimeVariant: ${{ parameters.runtimeVariant }}
      pool: ${{ parameters.pool }}
      testScope: ${{ parameters.testScope }}
      name: test_build
      displayName: 'Test Build'

      dependsOn:
      - ${{ format('libraries_build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
      # Libraries Test also depends on Product, now that the libraries build only depends on corelib
      - ${{ if ne(parameters.liveRuntimeBuildConfig, '') }}:
        - ${{ format('{0}_{1}_product_build_{2}{3}_{4}_{5}', parameters.runtimeFlavor, parameters.runtimeVariant, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.liveRuntimeBuildConfig) }}

      variables:
        - librariesTestsArtifactName: ${{ format('libraries_test_assets_{0}_{1}_{2}', parameters.osGroup, parameters.archType, parameters.buildConfig) }}
        - _archiveTestsParameter: /p:ArchiveTests=true
        
        - ${{ parameters.variables }}

      steps:
        - template: /eng/pipelines/common/download-artifact-step.yml
          parameters:
            displayName: Build Assets
            artifactName: $(librariesBuildArtifactName)
            artifactFileName: $(librariesBuildArtifactName)$(archiveExtension)
            unpackFolder: $(Build.SourcesDirectory)/artifacts
            cleanUnpackFolder: false

        - ${{ if in(parameters.osGroup, 'OSX', 'iOS','tvOS') }}: 
          - script: |
              du -sh $(Build.SourcesDirectory)/*
              df -h
            displayName: Disk Usage before Build

        - script: $(_buildScript)
                -subset libs.pretest+libs.tests
                $(_buildArguments)
                $(_archiveTestsParameter)
          displayName: Restore and Build

        - ${{ if in(parameters.osGroup, 'OSX', 'iOS','tvOS') }}: 
          - script: |
              du -sh $(Build.SourcesDirectory)/*
              df -h
            displayName: Disk Usage after Build

        - template: /eng/pipelines/common/upload-artifact-step.yml
          parameters:
            rootFolder: $(Build.SourcesDirectory)/artifacts/helix
            includeRootFolder: true
            archiveType: $(archiveType)
            archiveExtension: $(archiveExtension)
            tarCompression: $(tarCompression)
            artifactName: $(librariesTestsArtifactName)
            displayName: Test Assets
