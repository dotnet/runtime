parameters:
  buildConfig: ''
  osGroup: ''
  osSubgroup: ''
  archType: ''
  crossrootfsDir: ''
  framework: ''
  isOfficialBuild: false
  isOfficialAllConfigurations: false
  runtimeVariant: ''
  platform: ''

  # When set to a non-empty value (Debug / Release), it determines the runtime's
  # build configuration to use for building libraries and tests. Setting this
  # property implies a dependency of this job on the appropriate runtime build
  # and is used to construct the name of the Azure artifact representing
  # runtime build to use for building the libraries and library tests.
  liveRuntimeBuildConfig: ''
  runtimeFlavor: 'coreclr'

  timeoutInMinutes: 150
  preBuildSteps: []
  container: ''
  condition: true
  variables: {}
  pool: ''
  runTests: false
  testScope: ''
  testBuildPlatforms: []

jobs:
  - template: /eng/pipelines/libraries/base-job.yml
    parameters:
      buildConfig: ${{ parameters.buildConfig }}
      osGroup:  ${{ parameters.osGroup }}
      osSubgroup:  ${{ parameters.osSubgroup }}
      archType:  ${{ parameters.archType }}
      crossrootfsDir: ${{ parameters.crossrootfsDir }}
      framework:  ${{ parameters.framework }}
      isOfficialBuild: ${{ parameters.isOfficialBuild }}
      isOfficialAllConfigurations: ${{ parameters.isOfficialAllConfigurations }}
      liveRuntimeBuildConfig: ${{ parameters.liveRuntimeBuildConfig }}
      runtimeFlavor: ${{ parameters.runtimeFlavor }}
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
      preBuildSteps: ${{ parameters.preBuildSteps }}
      container: ${{ parameters.container }}
      condition: ${{ parameters.condition }}
      pool: ${{ parameters.pool }}
      runtimeVariant: ${{ parameters.runtimeVariant }}
      testScope: ${{ parameters.testScope }}
      name: build
      displayName: 'Build'

      variables:
        - librariesTestsArtifactName: ${{ format('libraries_test_assets_{0}_{1}_{2}', parameters.osGroup, parameters.archType, parameters.buildConfig) }}
        - _subset: libs
        - _additionalBuildArguments: ''
        - ${{ parameters.variables }}
        - ${{ if eq(parameters.osGroup, 'Browser') }}:
          - EMSDK_PATH: /usr/local/emscripten

        # Tests only run for 'allConfiguration' and 'net472' build-jobs
        # If platform is in testBuildPlatforms we build tests as well.
        - ${{ if or(eq(parameters.runTests, true), containsValue(parameters.testBuildPlatforms, parameters.platform)) }}:
          - _subset: libs+libs.tests
          - _additionalBuildArguments: /p:ArchiveTests=true

        - ${{ parameters.variables }}

      steps:
        - ${{ if eq(parameters.isOfficialBuild, true) }}:
          - template: /eng/pipelines/common/restore-internal-tools.yml

        - ${{ if in(parameters.osGroup, 'OSX', 'iOS', 'tvOS') }}:
          - script: $(Build.SourcesDirectory)/eng/install-native-dependencies.sh ${{ parameters.osGroup }}
            displayName: Install Build Dependencies

          - script: |
              du -sh $(Build.SourcesDirectory)/*
              df -h
            displayName: Disk Usage before Build

        - script: $(_buildScript)
                -subset $(_subset)
                $(_buildArguments)
                $(_additionalBuildArguments)
          displayName: Restore and Build Product

        - ${{ if in(parameters.osGroup, 'OSX', 'iOS','tvOS') }}: 
          - script: |
              du -sh $(Build.SourcesDirectory)/*
              df -h
            displayName: Disk Usage after Build

        - ${{ if eq(parameters.runTests, false) }}:
          - ${{ if ne(parameters.isOfficialBuild, true) }}:          
            - task: CopyFiles@2
              displayName: Prepare testhost folder to publish
              inputs:
                sourceFolder: $(Build.SourcesDirectory)/artifacts/bin/testhost
                targetFolder: $(Build.ArtifactStagingDirectory)/artifacts/bin/testhost

            - task: CopyFiles@2
              displayName: Prepare runtime folder to publish
              inputs:
                sourceFolder: $(Build.SourcesDirectory)/artifacts/bin/runtime
                targetFolder: $(Build.ArtifactStagingDirectory)/artifacts/bin/runtime

            - task: CopyFiles@2
              displayName: Prepare ref folder to publish
              inputs:
                sourceFolder: $(Build.SourcesDirectory)/artifacts/bin/ref
                targetFolder: $(Build.ArtifactStagingDirectory)/artifacts/bin/ref

          - task: CopyFiles@2
            displayName: Prepare shared framework ref assemblies to publish
            inputs:
              sourceFolder: $(Build.SourcesDirectory)/artifacts/bin/ref/microsoft.netcore.app
              targetFolder: $(Build.ArtifactStagingDirectory)/artifacts/bin/ref/microsoft.netcore.app

          - task: CopyFiles@2
            displayName: Prepare shared framework runtime folder to publish
            inputs:
              sourceFolder: $(Build.SourcesDirectory)/artifacts/bin/pkg
              targetFolder: $(Build.ArtifactStagingDirectory)/artifacts/bin/pkg

          - task: CopyFiles@2
            displayName: Prepare docs folder to publish
            inputs:
              sourceFolder: $(Build.SourcesDirectory)/artifacts/bin/docs
              targetFolder: $(Build.ArtifactStagingDirectory)/artifacts/bin/docs

          - task: CopyFiles@2
            displayName: Prepare native folder to publish
            inputs:
              sourceFolder: $(Build.SourcesDirectory)/artifacts/bin/native
              targetFolder: $(Build.ArtifactStagingDirectory)/artifacts/bin/native

          - task: CopyFiles@2
            displayName: Prepare artifacts packages folder to publish
            inputs:
              sourceFolder: $(Build.SourcesDirectory)/artifacts/packages
              targetFolder: $(Build.ArtifactStagingDirectory)/artifacts/packages
            condition: and(succeeded(), eq(variables['_librariesBuildProducedPackages'], true))

          - template: /eng/pipelines/common/upload-artifact-step.yml
            parameters:
              rootFolder: $(Build.ArtifactStagingDirectory)/artifacts
              includeRootFolder: false
              archiveType: $(archiveType)
              archiveExtension: $(archiveExtension)
              tarCompression: $(tarCompression)
              artifactName: $(librariesBuildArtifactName)
              displayName: Build Assets
          
          - ${{ if containsValue(parameters.testBuildPlatforms, parameters.platform) }}:
            - template: /eng/pipelines/common/upload-artifact-step.yml
              parameters:
                rootFolder: $(Build.SourcesDirectory)/artifacts/helix
                includeRootFolder: true
                archiveType: $(archiveType)
                archiveExtension: $(archiveExtension)
                tarCompression: $(tarCompression)
                artifactName: $(librariesTestsArtifactName)
                displayName: Test Assets

          # Save AllConfigurations artifacts using the prepare-signed-artifacts format. The
          # platform-specific jobs' nupkgs automatically flow through the matching platform-specific
          # Installer build, but AllConfigurations should only be uploaded once, here.
          - ${{ if eq(parameters.isOfficialAllConfigurations, true) }}:
            - template: /eng/pipelines/common/upload-unsigned-artifacts-step.yml
              parameters:
                name: Libraries_AllConfigurations

        - ${{ if eq(parameters.runTests, true) }}:
          - template: /eng/pipelines/libraries/helix.yml
            parameters:
              osGroup: ${{ parameters.osGroup }}
              archType: ${{ parameters.archType }}
              buildConfig: ${{ parameters.buildConfig }}
              helixQueues: ${{ parameters.helixQueues }}
              testScope: ${{ parameters.testScope }}
              creator: dotnet-bot
              testRunNamePrefixSuffix: $(_testRunNamePrefixSuffix)
              extraHelixArguments: $(_extraHelixArguments)
