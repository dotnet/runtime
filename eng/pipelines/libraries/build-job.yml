parameters:
  buildConfig: ''
  osGroup: ''
  osSubgroup: ''
  archType: ''
  framework: netcoreapp
  isOfficialBuild: false
  useLiveCoreClr: false
  timeoutInMinutes: 150
  preBuildSteps: []
  container: ''
  variables: {}
  pool: ''

jobs:
  - template: /eng/pipelines/libraries/base-job.yml
    parameters:
      buildConfig: ${{ parameters.buildConfig }}
      osGroup:  ${{ parameters.osGroup }}
      osSubgroup:  ${{ parameters.osSubgroup }}
      archType:  ${{ parameters.archType }}
      framework:  ${{ parameters.framework }}
      isOfficialBuild: ${{ parameters.isOfficialBuild }}
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
      container: ${{ parameters.container }}
      pool: ${{ parameters.pool }}

      name: ${{ format('libraries_build_{0}_{1}{2}_{3}_{4}', parameters.framework, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
      ${{ if eq(parameters.framework, 'netcoreapp') }}:
        displayName: ${{ format('{0}{1} Libraries Build {2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
      ${{ if ne(parameters.framework, 'netcoreapp') }}:
        displayName: ${{ format('{0} Libraries Build {1} {2}_{3}', parameters.osGroup, parameters.framework, parameters.archType, parameters.buildConfig) }}

      ${{ if eq(parameters.useLiveCoreClr, true) }}:
        dependsOn: ${{ format('build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}

      variables:
        - _skipTestRestoreArg: /p:SkipTestRestore=true

        - _coreClrArtifactName: ''
        - _coreClrDownloadPath: ''
        - _coreClrOverridePathArg: ''

        - ${{ if eq(parameters.useLiveCoreClr, true) }}:
          - _coreClrDownloadPath: '$(Build.SourcesDirectory)/artifacts/transport/coreclr'
          - _coreClrArtifactName: 'BinDir_${{ parameters.osGroup }}${{ parameters.osSubgroup }}_${{ parameters.archType }}_${{ parameters.buildConfig }}'
          - _coreClrOverridePathArg: ' /p:CoreCLROverridePath=$(_coreClrDownloadPath)'
          - _skipTestRestoreArg: /p:SkipTestRestore=true $(_coreClrOverridePathArg)

        - _archiveExtension: '.tar.gz'
        - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
          - _archiveExtension: '.zip'

        - ${{ parameters.variables }}

      preBuildSteps:
        - ${{ if eq(parameters.useLiveCoreClr, true) }}:
          - template: /eng/pipelines/common/download-artifact-step.yml
            parameters:
              unpackFolder: $(_coreClrDownloadPath)
              artifactFileName: '$(_coreClrArtifactName)$(_archiveExtension)'
              artifactName: '$(_coreClrArtifactName)'
              displayName: 'CoreCLR build drop'

        - ${{ parameters.preBuildSteps }}

      steps:
        - ${{ if eq(parameters.isOfficialBuild, true) }}:
          - task: DotNetCoreCLI@2
            displayName: Restore internal tools
            condition: and(succeeded(), ne(variables['_skipRestoreInternalTools'], 'true'))
            inputs:
              command: restore
              feedsToUse: config
              projects: 'eng/common/internal/Tools.csproj'
              nugetConfigPath: 'eng/internal/NuGet.config'
              restoreDirectory: '$(Build.SourcesDirectory)\.packages'
              verbosityRestore: 'normal'
              externalFeedCredentials: 'dotnet-core-internal-tooling'

        - script: $(_buildScript)
                -build
                $(_buildArguments)
                $(_coreClrOverridePathArg)
          displayName: Build

        - task: CopyFiles@2
          displayName: Prepare ref folder to publish
          inputs:
            sourceFolder: $(Build.SourcesDirectory)/artifacts/bin/ref
            targetFolder: $(Build.ArtifactStagingDirectory)/artifacts/bin/ref

        - task: CopyFiles@2
          displayName: Prepare runtime folder to publish
          inputs:
            sourceFolder: $(Build.SourcesDirectory)/artifacts/bin/runtime
            targetFolder: $(Build.ArtifactStagingDirectory)/artifacts/bin/runtime
        
        - task: CopyFiles@2
          displayName: Prepare testhost folder to publish
          inputs:
            sourceFolder: $(Build.SourcesDirectory)/artifacts/bin/testhost
            targetFolder: $(Build.ArtifactStagingDirectory)/artifacts/bin/testhost
        
        - template: /eng/pipelines/coreclr/templates/upload-artifact-step.yml
          parameters:
            rootFolder: $(Build.ArtifactStagingDirectory)/artifacts/bin
            includeRootFolder: true
            archiveType: $(archiveType)
            archiveExtension: $(archiveExtension)
            tarCompression: $(tarCompression)
            artifactName: ${{ format('libraries_bin_{0}_{1}{2}_{3}_{4}', parameters.framework, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
            displayName: Build Assets
