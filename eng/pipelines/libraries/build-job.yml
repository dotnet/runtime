parameters:
  buildConfig: ''
  osGroup: ''
  osSubgroup: ''
  archType: ''
  targetRid: ''
  crossBuild: false
  framework: 'net6.0'
  isOfficialBuild: false
  runtimeVariant: ''
  platform: ''
  testScope: ''

  timeoutInMinutes: 150
  container: ''
  condition: true
  dependOnEvaluatePaths: false
  shouldContinueOnError: false
  variables: {}
  pool: ''
  testBuildPlatforms: []

jobs:
  - template: /eng/pipelines/libraries/base-job.yml
    parameters:
      buildConfig: ${{ parameters.buildConfig }}
      osGroup:  ${{ parameters.osGroup }}
      osSubgroup:  ${{ parameters.osSubgroup }}
      archType:  ${{ parameters.archType }}
      crossBuild: ${{ parameters.crossBuild }}
      framework:  ${{ parameters.framework }}
      isOfficialBuild: ${{ parameters.isOfficialBuild }}
      runtimeFlavor: ${{ parameters.runtimeFlavor }}
      runTests: false
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
      container: ${{ parameters.container }}
      condition: ${{ parameters.condition }}
      dependOnEvaluatePaths: ${{ parameters.dependOnEvaluatePaths }}
      pool: ${{ parameters.pool }}
      runtimeVariant: ${{ parameters.runtimeVariant }}
      testScope: ${{ parameters.testScope }}
      name: build
      displayName: 'Build'

      variables:
        - librariesTestsArtifactName: ${{ format('libraries_test_assets_{0}_{1}_{2}', parameters.osGroup, parameters.archType, parameters.buildConfig) }}
        - _subset: libs+libs.tests
        - _buildAction: ''
        - _additionalBuildArguments: '/p:ArchiveTests=true'
        - ${{ parameters.variables }}

      steps:
        - ${{ if in(parameters.osGroup, 'OSX', 'MacCatalyst', 'iOS', 'iOSSimulator', 'tvOS', 'tvOSSimulator') }}:
          - script: $(Build.SourcesDirectory)/eng/install-native-dependencies.sh ${{ parameters.osGroup }} ${{ parameters.archType }} azDO
            displayName: Install Build Dependencies

          - script: |
              du -sh $(Build.SourcesDirectory)/*
              df -h
            displayName: Disk Usage before Build

        - script: $(_buildScript)
                -subset $(_subset)
                $(_buildAction)
                $(_buildArguments)
                $(_additionalBuildArguments)
          displayName: Restore and Build Product

        - ${{ if in(parameters.osGroup, 'OSX', 'iOS', 'tvOS') }}: 
          - script: |
              du -sh $(Build.SourcesDirectory)/*
              df -h
            displayName: Disk Usage after Build

        - template: /eng/pipelines/libraries/prepare-for-bin-publish.yml

        - template: /eng/pipelines/common/upload-artifact-step.yml
          parameters:
            rootFolder: $(Build.ArtifactStagingDirectory)/artifacts
            includeRootFolder: false
            archiveType: $(archiveType)
            archiveExtension: $(archiveExtension)
            tarCompression: $(tarCompression)
            artifactName: $(librariesBuildArtifactName)
            displayName: Build Assets

        # Upload test assets
        # We'll pull them down in another job to send to Helix
        - template: /eng/pipelines/common/upload-artifact-step.yml
          parameters:
            rootFolder: $(Build.SourcesDirectory)/artifacts/helix
            includeRootFolder: true
            archiveType: $(archiveType)
            archiveExtension: $(archiveExtension)
            tarCompression: $(tarCompression)
            artifactName: $(librariesTestsArtifactName)
            displayName: Test Assets