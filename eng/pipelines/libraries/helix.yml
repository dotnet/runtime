parameters:
  runtimeFlavor: ''
  archGroup: ''
  configuration: ''
  creator: ''
  framework: ''
  helixQueues: ''
  msbuildScript: ''
  targetOS: ''
  testRunNamePrefixSuffix: ''
  testScope: 'innerloop' # innerloop | outerloop | all
  condition: always()
  extraHelixArguments: ''

steps:
  - script: ${{ parameters.msbuildScript }}
            $(Build.SourcesDirectory)/src/libraries/sendtohelix.proj
            /t:test
            /p:RuntimeFlavor=${{ parameters.runtimeFlavor }}
            /p:TargetArchitecture=${{ parameters.archGroup }}
            /p:Configuration=${{ parameters.configuration }}
            /p:TargetOS=${{ parameters.targetOS }}
            /p:TestScope=${{ parameters.testScope }}
            /p:TestRunNamePrefixSuffix=${{ parameters.testRunNamePrefixSuffix }}
            /p:HelixBuild=$(Build.BuildNumber)
            /p:Creator=${{ parameters.creator }}
            ${{ parameters.extraHelixArguments }}
            /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/SendToHelix.binlog
    displayName: Send to Helix
    condition: and(succeeded(), ${{ parameters.condition }})
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken) # We need to set this env var to publish helix results to Azure Dev Ops
      HelixTargetQueues: ${{ parameters.helixQueues }} # Pass queues to MSBuild as env var to avoid need of escaping them
