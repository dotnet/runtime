parameters:
  buildConfig: ''
  osGroup: ''
  archType: ''
  osSubgroup: ''
  framework: netcoreapp
  isOfficialBuild: false
  timeoutInMinutes: 150
  preBuildSteps: []
  testScope: ''
  runTests: true
  publishTestArtifacts: false

jobs:
  - template: /eng/common/templates/job/job.yml
    parameters:
      variables:
      - _msbuildCommonParameters: ''
      - _finalFrameworkArg: -framework ${{ parameters.framework }}
      - _skipTestRestoreArg: ''
      - _testScopeArg: ''
      - _actionParameters: -build

      - ${{ if ne(parameters.testScope, '') }}:
        - _testScopeArg: -testscope ${{ parameters.testScope }}
        - _skipTestRestoreArg: /p:SkipTestRestore=true
        - _actionParameters: -buildtests

      - ${{ if eq(parameters.framework, 'allConfigurations' ) }}:
        - _finalFrameworkArg: -allConfigurations

      - ${{ if eq(parameters.isOfficialBuild, 'true') }}:
        - _msbuildCommonParameters: /p:OfficialBuildId=$(Build.BuildNumber)

      - _args: -configuration ${{ parameters.buildConfig }} -ci -arch ${{ parameters.archType }} $(_finalFrameworkArg) $(_testScopeArg) $(_skipTestRestoreArg)
      - _commonArguments: $(_args)

      # Windows variables
      - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
        - _buildScript: $(buildScriptFileName).cmd
        - _msbuildCommand: powershell -ExecutionPolicy ByPass -NoProfile eng\common\msbuild.ps1 -warnaserror:0 -ci

      # Non-Windows variables
      - ${{ if ne(parameters.targetOS, 'Windows_NT') }}:
        - _buildScript: ./$(buildScriptFileName).sh
        - _msbuildCommand: ./eng/common/msbuild.sh --warnaserror false --ci
        - ${{ if eq(parameters.isOfficialBuild, 'true') }}:
          - _commonArguments: $(_args) -stripSymbols

      - ${{ if or(eq(parameters.runTests, 'true'), eq(parameters.publishTestArtifacts, 'true')) }}:
        - ${{ if ne(parameters.framework, 'allConfigurations') }}:
          - _commonArguments: $(_args) /p:ArchiveTests=Tests
        - ${{ if eq(parameters.framework, 'allConfigurations') }}:
          - _commonArguments: $(_args) /p:ArchiveTests=Packages

      enableTelemetry: ${{ parameters.isOfficialBuild }} # TODO: figure out if it's needed
      helixRepo: dotnet/runtime

      ${{ if eq(parameters.testScope, '') }}:
        name: ${{ format('libraries_build_{0}_{1}{2}_{3}_{4}', parameters.framework, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        $ {{ if eq(parameters.framework, 'netcoreapp') }}:
          displayName: ${{ format('{0}{1} Build {2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        ${{ if ne(parameters.framework, 'netcoreapp') }}:
          displayName: ${{ format('{0} Build {1} {2}_{3}', parameters.osGroup, parameters.framework, parameters.archType, parameters.buildConfig) }}

      ${{ if ne(parameters.testScope, '') }}:
        name: ${{ format('libraries_test_{0}_{1}{2}_{3}_{4}', parameters.framework, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        $ {{ if eq(parameters.framework, 'netcoreapp') }}:
          displayName: ${{ format('{0}{1} Test {2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        ${{ if ne(parameters.framework, 'netcoreapp') }}:
          displayName: ${{ format('{0} Test {1} {2}_{3}', parameters.osGroup, parameters.framework, parameters.archType, parameters.buildConfig) }}

      ${{ if ne(parameters.testScope, '') }}:
        dependencies:
        - ${{ format('libraries_build_{0}_{1}{2}_{3}_{4}', parameters.framework, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}

      workspace:
        clean: all

      enablePublishBuildArtifacts: true
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}

      steps:
        - ${{ if ne(parameters.preBuildSteps[0], '') }}:
          - ${{ parameters.preBuildSteps }}
        
        - script: $(_buildScript) -restore $(_commonArguments)
          displayName: Restore

        - ${{ if eq(parameters.isOfficialBuild, 'true') }}:
          - task: DotNetCoreCLI@2
            displayName: Restore internal tools
            condition: and(succeeded(), ne(variables['_skipRestoreInternalTools'], 'true'))
            inputs:
              command: restore
              feedsToUse: config
              projects: 'eng/common/internal/Tools.csproj'
              nugetConfigPath: 'eng/internal/NuGet.config'
              restoreDirectory: '$(Build.SourcesDirectory)\.packages'
              verbosityRestore: 'normal'
              externalFeedCredentials: 'dotnet-core-internal-tooling'

        - script: $(_buildScript)
                $(_actionParameters)
                $(_commonArguments)
                $(_msbuildCommonParameters)
          displayName: Build

        - ${{ if and(eq(parameters.runTests, 'true'), ne(parameters.isOfficialBuild, 'false')) }}:
          - template: /eng/pipelines/libraries/helix.yml
                parameters:
                  targetOS: ${{ parameters.targetOS }}
                  archGroup: ${{ parameters.archType }}
                  configuration: ${{ parameters.buildConfig }}
                  helixQueues: $(_helixQueues)
                  msbuildScript: $(_msbuildCommand)
                  framework: ${{ parameters.framework }}
                  testScope: ${{ parameters.testScope }}
                  creator: dotnet-bot
                  helixToken: ''

          # TODO: publish test artifacts when publishTestArtifacts == true.
