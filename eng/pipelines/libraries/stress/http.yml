trigger: none

pr:
  branches:
    include:
    - "*"

schedules:
- cron: "0 13 * * *" # 1PM UTC => 5 AM PST
  displayName: HttpStress nightly run
  branches:
    include:
    - main
    - release/6.0

variables:
  - template: ../variables.yml
  - name: dockerfilesFolder
    value: $(Build.SourcesDirectory)/eng/docker
  - name: httpStressProject
    value: $(sourcesRoot)/System.Net.Http/tests/StressTests/HttpStress
  - name: sdkBaseImage
    value: dotnet-sdk-libraries-current
  - name: share_root
    value: $(System.DefaultWorkingDirectory)/share
  - name: server_share
    value: $(share_root)/server
  - name: client_share
    value: $(share_root)/client

jobs:
- job: linux
  displayName: Docker Linux
  timeoutInMinutes: 180
  pool:
    name: NetCorePublic-Pool
    queue: BuildPool.Ubuntu.1804.Amd64.Open

  steps:
  - checkout: self
    clean: true
    fetchDepth: 5

  - bash: |
      $(dockerfilesFolder)/build-docker-sdk.sh -t $(sdkBaseImage) -c $(BUILD_CONFIGURATION)
      echo "##vso[task.setvariable variable=succeeded;isOutput=true]true"
    name: buildRuntime
    displayName: Build CLR and Libraries

  - bash: |
      $(httpStressProject)/run-docker-compose.sh -o -c $(BUILD_CONFIGURATION) -t $(sdkBaseImage)
      echo "##vso[task.setvariable variable=succeeded;isOutput=true]true"
    name: buildStress
    displayName: Build HttpStress

  - bash: |
      cd '$(httpStressProject)'
      export HTTPSTRESS_CLIENT_ARGS="$HTTPSTRESS_CLIENT_ARGS -http 3.0 -xops 10"
      export HTTPSTRESS_SERVER_ARGS="$HTTPSTRESS_SERVER_ARGS -http 3.0"
      docker-compose up --abort-on-container-exit --no-color
    displayName: Run HttpStress - HTTP 3.0
    condition: and(eq(variables['buildRuntime.succeeded'], 'true'), eq(variables['buildStress.succeeded'], 'true'))

  - bash: |
      sudo chown -R $(id -u):$(id -g) $(share_root)
    displayName: Own shared dumps and files
    condition: failed()

  - publish: $(share_root)
    artifact: DumpsAndLogs
    condition: failed()

# TODO: deleting big part of pipeline to make the testing loop in CI faster, return it back once it's done.