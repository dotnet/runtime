parameters:
  buildConfig: ''
  osGroup: ''
  osSubgroup: ''
  archType: ''
  framework: ''
  isOfficialBuild: false
  liveRuntimeBuildConfig: ''
  runtimeFlavor: 'coreclr'
  timeoutInMinutes: 150
  pool: ''
  runtimeVariant: ''
  testScope: ''
  helixQueues: []
  dependsOnTestBuildConfiguration: Debug
  dependsOnTestArchitecture: x64
  condition: true
  variables: {}

jobs:
  - template: /eng/pipelines/libraries/base-job.yml
    parameters:
      buildConfig: ${{ parameters.buildConfig }}
      osGroup:  ${{ parameters.osGroup }}
      osSubgroup:  ${{ parameters.osSubgroup }}
      archType:  ${{ parameters.archType }}
      framework:  ${{ parameters.framework }}
      isOfficialBuild: ${{ parameters.isOfficialBuild }}
      liveRuntimeBuildConfig: ${{ parameters.liveRuntimeBuildConfig }}
      runtimeFlavor: ${{ parameters.runtimeFlavor }}
      runtimeVariant: ${{ parameters.runtimeVariant }}
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
      container: '' # we just send to helix, no need to use a container.
      condition: ${{ parameters.condition }}
      pool: ${{ parameters.pool }}
      testScope: ${{ parameters.testScope }}
      ${{ if ne(parameters.liveRuntimeBuildConfig, '') }}:
        displayName: ${{ format('Test Run {0} {1}', parameters.liveRuntimeBuildConfig, parameters.runtimeFlavor) }}
        name: ${{ format('test_run_{0}_{1}', parameters.liveRuntimeBuildConfig, parameters.runtimeFlavor) }}
      ${{ if eq(parameters.liveRuntimeBuildConfig, '') }}:
        displayName: 'Test Run'
        name: test_run

      dependsOn:
      - ${{ if notIn(parameters.framework, 'allConfigurations', 'net472') }}:
        - ${{ format('libraries_build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        - ${{ format('libraries_test_build_{0}_{1}_{2}', parameters.osGroup, parameters.dependsOnTestArchitecture, parameters.dependsOnTestBuildConfiguration) }}
      - ${{ if in(parameters.framework, 'allConfigurations', 'net472') }}:
        - ${{ format('libraries_build_{0}_{1}{2}_{3}_{4}', parameters.framework, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        - ${{ format('libraries_test_build_{0}_{1}_{2}_{3}', parameters.framework, parameters.osGroup, parameters.dependsOnTestArchitecture, parameters.dependsOnTestBuildConfiguration) }}
      - ${{ if ne(parameters.liveRuntimeBuildConfig, '') }}:
        - ${{ format('{0}_{1}_product_build_{2}{3}_{4}_{5}', parameters.runtimeFlavor, parameters.runtimeVariant, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.liveRuntimeBuildConfig) }}

      variables:
        - librariesTestsArtifactName: ${{ format('libraries_test_assets_{0}_{1}_{2}', parameters.osGroup, parameters.dependsOnTestArchitecture, parameters.dependsOnTestBuildConfiguration) }}
        - _archiveTestsParameter: /p:ArchiveTests=true
        - ${{ parameters.variables }}

      steps:
        - template: /eng/pipelines/common/download-artifact-step.yml
          parameters:
            displayName: Build Assets
            cleanUnpackFolder: false
            artifactName: $(librariesBuildArtifactName)
            artifactFileName: $(librariesBuildArtifactName)$(archiveExtension)
            unpackFolder: $(Build.SourcesDirectory)/artifacts

        - template: /eng/pipelines/common/download-artifact-step.yml
          parameters:
            displayName: Test Assets
            cleanUnpackFolder: false
            unpackFolder: $(Build.SourcesDirectory)/artifacts
            artifactName: $(librariesTestsArtifactName)
            artifactFileName: $(librariesTestsArtifactName)$(archiveExtension)

        - ${{ if ne(parameters.liveRuntimeBuildConfig, '') }}:
          - script: $(_buildScript)
                    -subset libs.pretest
                    $(_buildArguments)
                    /p:RuntimeFlavor=${{ parameters.runtimeFlavor }}
                    /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/overrideRuntimeFromLiveDrop.binlog
            displayName: Prepare TestHost with runtime $(runtimeFlavorName)

        - template: /eng/pipelines/libraries/helix.yml
          parameters:
            runtimeFlavor: ${{ parameters.runtimeFlavor }}
            targetOS: ${{ parameters.osGroup }}
            archGroup: ${{ parameters.archType }}
            configuration: ${{ parameters.buildConfig }}
            helixQueues: ${{ join('+', parameters.helixQueues) }}
            msbuildScript: $(_msbuildCommand)
            framework: ${{ parameters.framework }}
            testScope: ${{ parameters.testScope }}
            creator: dotnet-bot
            helixToken: ''
            testRunNamePrefixSuffix: $(_testRunNamePrefixSuffix)
            extraHelixArguments: $(_extraHelixArguments)
