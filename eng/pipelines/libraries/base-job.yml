parameters:
  buildConfig: ''
  osGroup: ''
  archType: ''
  osSubgroup: ''
  crossrootfsDir: ''
  framework: ''
  isOfficialBuild: false
  isOfficialAllConfigurations: false
  liveRuntimeBuildConfig: ''
  runtimeFlavor: 'coreclr'
  timeoutInMinutes: 150
  condition: true
  container: ''
  steps: []
  dependsOn: []
  variables: {}
  name: ''
  displayName: ''
  testScope: ''
  pool: ''

jobs:
  - template: /eng/common/templates/job/job.yml
    parameters:
      ${{ if notIn(parameters.framework, 'allConfigurations', 'net472') }}:
        displayName: ${{ format('Libraries {0} {1}{2} {3} {4}', parameters.displayName, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        name: ${{ format('libraries_{0}_{1}{2}_{3}_{4}', parameters.name, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
      ${{ if in(parameters.framework, 'allConfigurations', 'net472') }}:
        displayName: ${{ format('Libraries {0} {1} {2} {3} {4}', parameters.displayName, parameters.osGroup, parameters.framework, parameters.archType, parameters.buildConfig) }}
        name: ${{ format('libraries_{0}_{1}_{2}{3}_{4}_{5}', parameters.name, parameters.framework, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}

      enableTelemetry: ${{ parameters.isOfficialBuild }} # TODO: figure out if it's needed
      container: ${{ parameters.container }}
      condition: and(succeeded(), ${{ parameters.condition }})
      helixRepo: dotnet/runtime
      pool: ${{ parameters.pool }}
      variables:
        - _buildScriptFileName: build
        - _BuildConfig: ${{ parameters.buildConfig }}

        - _msbuildCommonParameters: ''
        # rename this variable, due to collision with build-native.proj
        - _runtimeOSArg: ''
        - _finalFrameworkArg: ''
        - _buildScript: $(_buildScriptFileName)$(scriptExt)
        - _testScopeArg: ''
        - _extraHelixArguments: ''
        - _crossBuildPropertyArg: ''
        - _testRunNamePrefixSuffix: ''

        - librariesBuildArtifactName: ${{ format('libraries_bin_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}

        - ${{ if ne(parameters.testScope, '') }}:
          - _testScopeArg: -testscope ${{ parameters.testScope }}

        - ${{ if eq(parameters.osGroup, 'Linux') }}:
          - _crossBuildPropertyArg: /p:CrossBuild=${{ ne(parameters.crossrootfsDir, '') }}

        - ${{ if and(eq(parameters.osGroup, 'Linux'), eq(parameters.osSubGroup, '_musl')) }}:
          - _runtimeOSArg: /p:RuntimeOS=linux-musl

        - ${{ if and(eq(parameters.osGroup, 'Linux'), eq(parameters.osSubGroup, ''), eq(parameters.archType, 'arm')) }}:
          - _runtimeOSArg: /p:RuntimeOS=ubuntu.16.04

        # force a value for OS when cross-building WebAssembly
        - ${{ if eq(parameters.osGroup, 'WebAssembly') }}:
          - _runtimeOSArg: -os ${{ parameters.osGroup }}

        # force a value for OS when cross-building tvOS on OSX
        - ${{ if eq(parameters.osGroup, 'tvOS') }}:
          - _runtimeOSArg: -os ${{ parameters.osGroup }}

        # force a value for OS when cross-building iOS on OSX
        - ${{ if eq(parameters.osGroup, 'iOS') }}:
          - _runtimeOSArg: -os ${{ parameters.osGroup }}

        # force a value for OS when cross-building Android on Linux
        - ${{ if eq(parameters.osGroup, 'Android') }}:
          - _runtimeOSArg: -os ${{ parameters.osGroup }}

        - ${{ if ne(parameters.framework, '') }}:
          - _finalFrameworkArg: -framework ${{ parameters.framework }}
          - _extraHelixArguments: /p:BuildTargetFramework=${{ parameters.framework }}

        - ${{ if eq(parameters.framework, 'allConfigurations') }}:
          - _finalFrameworkArg: -allConfigurations
          - _extraHelixArguments: /p:BuildAllConfigurations=true

        - ${{ if eq(parameters.isOfficialAllConfigurations, true) }}:
          - librariesBuildArtifactName: 'libraries_bin_official_allconfigurations'

        - ${{ if eq(parameters.isOfficialBuild, 'true') }}:
          - _msbuildCommonParameters: /p:OfficialBuildId=$(Build.BuildNumber)

        - _runtimeArtifactName: ''
        - _runtimeDownloadPath: ''
        - _runtimeArtifactsPathArg: ''
        - _runtimeConfigurationArg: ''

        - ${{ if ne(parameters.liveRuntimeBuildConfig, '') }}:
          - _runtimeDownloadPath: '$(Build.SourcesDirectory)/artifacts/transport/${{ parameters.runtimeFlavor }}'
          - _runtimeConfigurationArg: -rc ${{ parameters.liveRuntimeBuildConfig }}
          # Download full product dependencies for mono or test
          - ${{ if or(ne(parameters.runtimeFlavor, 'coreclr'), ne(parameters.testScope, '')) }}:
            - _runtimeArtifactName: '$(runtimeFlavorName)Product_${{ parameters.osGroup }}${{ parameters.osSubgroup }}_${{ parameters.archType }}_${{ parameters.liveRuntimeBuildConfig }}'
            - _runtimeArtifactsPathArg: ' /p:RuntimeArtifactsPath=$(_runtimeDownloadPath)'
          - _testRunNamePrefixSuffix: $(runtimeFlavorName)_${{ parameters.liveRuntimeBuildConfig }}

        # Windows variables
        - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
          - _runtimeOSArg: /p:RuntimeOS=win10

        # Non-Windows variables
        - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
          - _buildScript: ./$(_buildScriptFileName)$(scriptExt)

        - _buildArguments: $(_runtimeConfigurationArg) -configuration ${{ parameters.buildConfig }} -ci -arch ${{ parameters.archType }} $(_finalFrameworkArg) $(_testScopeArg) $(_runtimeOSArg) $(_msbuildCommonParameters) $(_runtimeArtifactsPathArg) $(_crossBuildPropertyArg)
        - ${{ parameters.variables }}

      dependsOn:
      - checkout
      - ${{ parameters.dependsOn }}
      workspace:
        clean: all

      enablePublishBuildArtifacts: true
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}

      steps:
      - template: /eng/pipelines/common/clone-checkout-bundle-step.yml

      - ${{ if and(ne(parameters.liveRuntimeBuildConfig, ''), or(ne(parameters.runtimeFlavor, 'coreclr'), ne(parameters.testScope, ''))) }}:
        - template: /eng/pipelines/common/download-artifact-step.yml
          parameters:
            unpackFolder: $(_runtimeDownloadPath)
            artifactFileName: '$(_runtimeArtifactName)$(archiveExtension)'
            artifactName: '$(_runtimeArtifactName)'
            displayName: '$(runtimeFlavorName) build drop'

      - ${{ parameters.steps }}
