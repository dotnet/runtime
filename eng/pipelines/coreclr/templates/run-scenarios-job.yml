parameters:
  steps: []                       # optional -- any additional steps that need to happen before pulling down the performance repo and sending the performance benchmarks to helix (ie building your repo)
  variables: []                   # optional -- list of additional variables to send to the template
  jobName: ''                     # required -- job name
  displayName: ''                 # optional -- display name for the job. Will use jobName if not passed
  pool: ''                        # required -- name of the Build pool
  container: ''                   # required -- name of the container
  buildConfig: ''                 # required -- build configuration
  archType: ''                    # required -- targeting CPU architecture
  osGroup: ''                     # required -- operating system for the job
  osSubgroup: ''                  # optional -- operating system subgroup
  extraSetupParameters: ''        # optional -- extra arguments to pass to the setup script
  frameworks: ['netcoreapp3.0']   # optional -- list of frameworks to run against
  continueOnError: 'false'        # optional -- determines whether to continue the build if the step errors
  dependsOn: ''                   # optional -- dependencies of the job
  timeoutInMinutes: 320           # optional -- timeout for the job
  enableTelemetry: false          # optional -- enable for telemetry
  liveLibrariesBuildConfig: ''    # optional -- live-live libraries configuration to use for the run
  runtimeType: 'coreclr'          # optional -- Sets the runtime as coreclr or mono
  codeGenType: 'JIT'              # optional -- Decides on the codegen technology if running on mono
  projectFile: ''                 # required -- project file to build helix workitems
  runKind: ''                     # required -- test category
  additionalSetupParameters: ''   # optional -- additional setup parameters that are job-specific

jobs:
- template: /eng/pipelines/common/templates/runtimes/xplat-job.yml
  parameters:
    dependsOn: ${{ parameters.dependsOn }}
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    osSubgroup: ${{ parameters.osSubgroup }}
    liveLibrariesBuildConfig: ${{ parameters.liveLibrariesBuildConfig }}
    enableTelemetry: ${{ parameters.enableTelemetry }}
    enablePublishBuildArtifacts: true
    continueOnError: ${{ parameters.continueOnError }}
    logsName: 'Performance_Run_$(osGroup)$(osSubgroup)_$(archType)_$(buildConfig)_${{ parameters.runtimeType }}_${{ parameters.codeGenType }}_${{ parameters.runKind }}_$(iOSLlvmBuild)_$(iOSStripSymbols)_$(hybridGlobalization)'

    ${{ if ne(parameters.displayName, '') }}:
      displayName: '${{ parameters.displayName }}'
    ${{ if eq(parameters.displayName, '') }}:
      displayName: '${{ parameters.jobName }}'
    name: ${{ replace(replace(parameters.jobName, ' ', '_'), '-', '_') }}

    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}

    variables:
    - ${{ each variable in parameters.variables }}:
      - ${{insert}}: ${{ variable }}

    - name: internalParam
      value: ''

    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - name: internalParam
        value: --internal
      - group: DotNet-HelixApi-Access
      - group: dotnet-benchview

    - ExtraSetupArguments: ''
    - name: ExtraSetupArguments
      ${{ if ne(parameters.runtimeType, 'wasm') }}:
        value: --install-dir $(PayloadDirectory)/dotnet

    - name: librariesDownloadDir
      value: '$(Build.SourcesDirectory)/artifacts'

    workspace:
      clean: all
    pool:
      ${{ parameters.pool }}
    ${{ if ne(parameters.runtimeType, 'wasm') }}:
      container: ${{ parameters.container }}
    strategy:
      matrix:
        ${{ each framework in parameters.frameworks }}:
          ${{ framework }}:
            _Framework: ${{ framework }}
    steps:
    - ${{ parameters.steps }}
    # copy wasm packs if running on wasm (TODO: move to run-performance-job.py)
    - script: >-
        mkdir -p $(librariesDownloadDir)/bin/wasm/data &&
        cp -r $(librariesDownloadDir)/BrowserWasm/staging/dotnet-latest $(librariesDownloadDir)/bin/wasm &&
        cp -r $(librariesDownloadDir)/BrowserWasm/staging/built-nugets $(librariesDownloadDir)/bin/wasm &&
        cp src/mono/browser/test-main.js $(librariesDownloadDir)/bin/wasm/data/test-main.js &&
        find $(librariesDownloadDir)/bin/wasm -type f -exec chmod 664 {} \;
      displayName: "Create wasm directory (Linux)"
      condition: and(succeeded(), eq('${{ parameters.runtimeType }}', 'wasm'))
    # run run-performance-job.py
    - script: $(Python) $(Agent.BuildDirectory)/performance/scripts/run_performance_job.py --is-scenario --framework $(_Framework) $(internalParam) ${{ parameters.extraSetupParameters }} ${{ parameters.additionalSetupParameters }}
      displayName: Run performance job script
      env:
        HelixAccessToken: '$(HelixApiAccessToken)'
        PerfCommandUploadToken: '$(PerfCommandUploadToken)'
        PerfCommandUploadTokenLinux: '$(PerfCommandUploadTokenLinux)'

    # run perf testing in helix
    - template: /eng/pipelines/coreclr/templates/perf-send-to-helix.yml
      parameters:
        ProjectFile: ${{ parameters.projectFile }}
        osGroup: ${{ parameters.osGroup }}
