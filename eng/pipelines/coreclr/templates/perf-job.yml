parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osSubgroup: ''
  container: ''
  runtimeVariant: ''
  framework: net8.0 # Specify the appropriate framework when running release branches (ie net6.0 for release/6.0)
  liveLibrariesBuildConfig: ''
  variables: {}
  runtimeType: 'coreclr'
  pool: ''
  codeGenType: 'JIT'
  projectFile: ''
  runKind: ''
  runJobTemplate: '/eng/pipelines/coreclr/templates/run-performance-job.yml'
  additionalSetupParameters: ''
  logicalMachine: ''
  pgoRunType: ''
  physicalPromotionRunType: ''
  javascriptEngine: 'NoJS'
  iOSLlvmBuild: 'False'
  iOSStripSymbols: 'False'
  skipLiveLibrariesDownload: false
  collectHelixLogsScript: ''
  timeoutInMinutes: 320
  compare: false
  onlySanityCheck: false
  downloadSpecificBuild: null # buildId, pipeline, branchName, project
  perfForkToUse: {} # url, branch
  crossBuild: false

### Perf job

### Each perf job depends on a corresponding build job with the same
### buildConfig and archType.

jobs:
- template: ${{ parameters.runJobTemplate }}
  parameters:
    # Compute job name from template parameters
    jobName: ${{ format('perfbuild_{0}{1}_{2}_{3}_{4}_{5}_{6}_{7}_{8}_{9}_{10}_{11}_{12}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig, parameters.runtimeType, parameters.codeGenType, parameters.runKind, parameters.logicalMachine, parameters.javascriptEngine, parameters.pgoRunType, parameters.physicalPromotionRunType, parameters.iosLlvmBuild, parameters.iosStripSymbols) }}
    displayName: ${{ format('Performance {0}{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig, parameters.runtimeType, parameters.codeGenType, parameters.runKind, parameters.logicalMachine, parameters.javascriptEngine, parameters.pgoRunType, parameters.physicalPromotionRunType, parameters.iosLlvmBuild, parameters.iosStripSymbols) }}
    pool: ${{ parameters.pool }}
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    osSubgroup: ${{ parameters.osSubgroup }}
    runtimeVariant: ${{ parameters.runtimeVariant }}
    liveLibrariesBuildConfig: ${{ parameters.liveLibrariesBuildConfig }}
    runtimeType: ${{ parameters.runtimeType }}
    codeGenType: ${{ parameters.codeGenType }}
    projectFile: ${{ parameters.projectFile }}
    runKind: ${{ parameters.runKind }}
    additionalSetupParameters: ${{ parameters.additionalSetupParameters }}
    container: ${{ parameters.container }}
    logicalmachine: ${{ parameters.logicalmachine }}
    pgoRunType: ${{ parameters.pgoRunType }}
    physicalPromotionRunType: ${{ parameters.physicalPromotionRunType }}
    javascriptEngine: ${{ parameters.javascriptEngine }}
    iosLlvmBuild: ${{ parameters.iosLlvmBuild }}
    iosStripSymbols: ${{ parameters.iosStripSymbols }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}

    ${{ if and(eq(parameters.runtimeType, 'wasm'), eq(parameters.codeGenType, 'aot')) }}:
      helixTypeSuffix: '/wasm/aot'
    ${{ if and(eq(parameters.runtimeType, 'wasm'), ne(parameters.codeGenType, 'aot')) }}:
      helixTypeSuffix: '/wasm'

    collectHelixLogsScript: ${{ parameters.collectHelixLogsScript }}

    # Test job depends on the corresponding build job
    ${{ if eq(parameters.downloadSpecificBuild.buildId, '') }}:
      dependsOn:
      - ${{ if not(in(parameters.runtimeType, 'AndroidMono', 'iOSMono', 'iOSNativeAOT', 'wasm')) }}:
        - ${{ format('coreclr_{0}_product_build_{1}{2}_{3}_{4}', parameters.runtimeVariant, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
      - ${{ if and(ne(parameters.liveLibrariesBuildConfig, ''), eq(parameters.skipLiveLibrariesDownload, 'false')) }}:
        - ${{ format('libraries_build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.liveLibrariesBuildConfig) }}
      - ${{ if and(eq(parameters.runtimeType, 'mono'), ne(parameters.codeGenType, 'AOT')) }}:
        - ${{ format('mono_{0}_product_build_{1}{2}_{3}_{4}', parameters.runtimeVariant, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
      - ${{ if eq(parameters.runtimeType, 'wasm')}}:
        - ${{ format('build_{0}{1}_{2}_{3}_{4}_{5}', 'browser', '', 'wasm', 'linux', parameters.buildConfig, parameters.runtimeType) }}
      - ${{ if and(eq(parameters.codeGenType, 'AOT'), ne(parameters.runtimeType, 'wasm'))}}:
        - ${{ format('build_{0}{1}_{2}_{3}_{4}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig, parameters.codeGenType) }}
      - ${{ if eq(parameters.runtimeType, 'AndroidMono')}}:
        - ${{ 'build_android_arm64_release_AndroidMono' }}
        - ${{ 'Build_ios_arm64_release_PerfBDNApp' }}
      - ${{ if eq(parameters.runtimeType, 'iOSMono')}}:
        - ${{ 'build_ios_arm64_release_iOSMono' }}
      - ${{ if eq(parameters.runtimeType, 'iOSNativeAOT')}}:
        - ${{ 'build_ios_arm64_release_iOSNativeAOT' }}

    ${{ if and(eq(parameters.osGroup, 'windows'), not(in(parameters.runtimeType, 'AndroidMono', 'iOSMono', 'iOSNativeAOT'))) }}:
      ${{ if eq(parameters.runtimeType, 'mono') }}:
        extraSetupParameters: -Architecture ${{ parameters.archType }} -MonoDotnet $(Build.SourcesDirectory)\.dotnet-mono
      ${{ if eq(parameters.runtimeType, 'coreclr') }}:
        extraSetupParameters: -CoreRootDirectory $(Build.SourcesDirectory)\artifacts\tests\coreclr\${{ parameters.osGroup }}.${{ parameters.archType }}.Release\Tests\Core_Root -Architecture ${{ parameters.archType }}
    ${{ if and(ne(parameters.osGroup, 'windows'), not(in(parameters.runtimeType, 'AndroidMono', 'iOSMono', 'iOSNativeAOT'))) }}:
      ${{ if and(eq(parameters.runtimeType, 'mono'), ne(parameters.codeGenType, 'AOT')) }}:
        extraSetupParameters: --architecture ${{ parameters.archType }} --monodotnet $(Build.SourcesDirectory)/.dotnet-mono
      ${{ if and(eq(parameters.runtimeType, 'wasm'), ne(parameters.codeGenType, 'AOT')) }}:
        extraSetupParameters: --architecture ${{ parameters.archType }} --wasmbundle $(librariesDownloadDir)/bin/wasm --javascriptengine ${{ parameters.javascriptEngine }} $(extraSetupParametersSuffix)
      ${{ if and(eq(parameters.runtimeType, 'wasm'), eq(parameters.codeGenType, 'AOT')) }}:
        extraSetupParameters: --architecture ${{ parameters.archType }} --wasmbundle $(librariesDownloadDir)/bin/wasm --wasmaot --javascriptengine ${{ parameters.javascriptEngine }} $(extraSetupParametersSuffix)
      ${{ if and(eq(parameters.codeGenType, 'AOT'), ne(parameters.runtimeType, 'wasm')) }}:
        extraSetupParameters: --architecture ${{ parameters.archType }} --monoaot $(librariesDownloadDir)/bin/aot
      ${{ if and(eq(parameters.runtimeType, 'coreclr'), ne(parameters.osSubGroup, '_musl')) }}:
        extraSetupParameters: --corerootdirectory $(Build.SourcesDirectory)/artifacts/tests/coreclr/${{ parameters.osGroup }}.${{ parameters.archType }}.Release/Tests/Core_Root --architecture ${{ parameters.archType }}
      ${{ if and(eq(parameters.runtimeType, 'coreclr'), eq(parameters.osSubGroup, '_musl')) }}:
        extraSetupParameters: --corerootdirectory $(Build.SourcesDirectory)/artifacts/tests/coreclr/${{ parameters.osGroup }}.${{ parameters.archType }}.Release/Tests/Core_Root --architecture ${{ parameters.archType }} --alpine
    ${{ if in(parameters.runtimeType, 'AndroidMono') }}:
      extraSetupParameters: -Architecture ${{ parameters.archType }} -AndroidMono
    ${{ if in(parameters.runtimeType, 'iOSMono') }}:
      extraSetupParameters: --architecture ${{ parameters.archType }} --iosmono --iosllvmbuild ${{ parameters.iOSLlvmBuild }} --iosstripsymbols ${{ parameters.iOSStripSymbols }}
    ${{ if in(parameters.runtimeType, 'iOSNativeAOT') }}:
      extraSetupParameters: --architecture ${{ parameters.archType }} --iosnativeaot --iosllvmbuild ${{ parameters.iOSLlvmBuild }} --iosstripsymbols ${{ parameters.iOSStripSymbols }}

    variables:
    - ${{ each variable in parameters.variables }}:
      - ${{insert}}: ${{ variable }}
    - _crossBuildPropertyArg: ''

    - name: _compareArg
      ${{ if eq(parameters.compare, 'true') }}:
        value: '--compare'
    - name: _onlySanityCheckArg
      ${{ if eq(parameters.onlySanityCheck, 'true') }}:
        value: '--only-sanity'
    - name: _perfForkArg
      ${{ if ne(parameters.perfForkToUse.url, '') }}:
        value: --perffork ${{ parameters.perfForkToUse.url }} --perfforkbranch ${{ coalesce(parameters.perfForkToUse.branch, 'main') }}

    - name: extraSetupParametersSuffix
      value: "$(_compareArg) $(_onlySanityCheckArg) $(_perfForkArg)"

    - ${{ if eq(parameters.crossBuild, true) }}:
      - _crossBuildPropertyArg: '-cross'

    frameworks:
      - ${{ parameters.framework }}
    steps:
    # Extra steps that will be passed to the performance template and run before sending the job to helix (all of which is done in the template)
    - script: |
        $(Build.SourcesDirectory)/eng/common/msbuild.sh $(Build.SourcesDirectory)/eng/testing/performance/add_properties_to_pipeline.proj /t:SetVariables
      displayName: Add Properties To Pipeline Env

    # Optionally download live-built libraries
    - ${{ if and(ne(parameters.liveLibrariesBuildConfig, ''), eq(parameters.skipLiveLibrariesDownload, 'false')) }}:
      - template: /eng/pipelines/common/download-artifact-step.yml
        parameters:
          unpackFolder: $(librariesDownloadDir)
          cleanUnpackFolder: false
          artifactFileName: '$(librariesBuildArtifactName)$(archiveExtension)'
          artifactName: '$(librariesBuildArtifactName)'
          displayName: 'live-built libraries'

    # Download coreclr
    - ${{ if not(in(parameters.runtimeType, 'AndroidMono', 'iOSMono', 'iOSNativeAOT', 'wasm')) }}:
      - template: /eng/pipelines/common/download-artifact-step.yml
        parameters:
          unpackFolder: $(buildProductRootFolderPath)
          artifactFileName: '$(buildProductArtifactName)$(archiveExtension)'
          artifactName: '$(buildProductArtifactName)'
          displayName: 'Coreclr product build'

    # Download mono
    - ${{ if and(eq(parameters.runtimeType, 'mono'), ne(parameters.codeGenType, 'AOT')) }}:
      - template: /eng/pipelines/common/download-artifact-step.yml
        parameters:
          unpackFolder: $(librariesDownloadDir)/bin/mono/$(osGroup).$(archType).$(buildConfigUpper)
          cleanUnpackFolder: false
          artifactFileName: 'MonoProduct__${{ parameters.runtimeVariant }}_$(osGroup)_$(archType)_$(buildConfig)$(archiveExtension)'
          artifactName: 'MonoProduct__${{ parameters.runtimeVariant }}_$(osGroup)_$(archType)_$(buildConfig)'
          displayName: 'Mono runtime'

    # Download wasm
    - ${{ if eq(parameters.runtimeType, 'wasm') }}:
      - ${{ if eq(parameters.downloadSpecificBuild.buildId, '') }}:
        - template: /eng/pipelines/common/download-artifact-step.yml
          parameters:
            unpackFolder: $(librariesDownloadDir)/BrowserWasm
            artifactFileName: BrowserWasm.tar.gz
            artifactName: BrowserWasm
            displayName: BrowserWasm
      - ${{ if ne(parameters.downloadSpecificBuild.buildId, '') }}:
        - template: /eng/pipelines/common/download-specific-artifact-step.yml
          parameters:
            unpackFolder: $(librariesDownloadDir)/BrowserWasm
            artifactFileName: BrowserWasm.tar.gz
            artifactName: BrowserWasm
            displayName: BrowserWasm
            ${{ insert }}: ${{ parameters.downloadSpecificBuild }}

      - script: >-
          mkdir -p $(librariesDownloadDir)/bin/wasm/wasm-data &&
          mkdir -p $(librariesDownloadDir)/bin/wasm/dotnet &&
          cp -r $(librariesDownloadDir)/BrowserWasm/staging/dotnet-latest/* $(librariesDownloadDir)/bin/wasm/dotnet &&
          cp -r $(librariesDownloadDir)/BrowserWasm/staging/built-nugets $(librariesDownloadDir)/bin/wasm &&
          cp src/mono/wasm/test-main.js $(librariesDownloadDir)/bin/wasm/wasm-data/test-main.js &&
          find $(librariesDownloadDir)/bin/wasm -type d &&
          find $(librariesDownloadDir)/bin/wasm -type f -exec chmod 664 {} \;
        displayName: "Create wasm directory (Linux)"

    # Download mono AOT
    - ${{ if and(eq(parameters.codeGenType, 'AOT'), ne(parameters.runtimeType, 'wasm')) }}:
      - template: /eng/pipelines/common/download-artifact-step.yml
        parameters:
          unpackFolder: $(librariesDownloadDir)/LinuxMonoAOT
          artifactFileName: LinuxMonoAOT${{ parameters.archType }}.tar.gz
          artifactName: LinuxMonoAOT${{ parameters.archType }}
          displayName: AOT Mono Artifacts

      - script: "mkdir -p $(librariesDownloadDir)/bin/aot;mkdir -p $(librariesDownloadDir)/bin/aot/pack;cp -r $(librariesDownloadDir)/LinuxMonoAOT/artifacts/bin/mono/linux.${{ parameters.archType }}.Release/cross/linux-${{ parameters.archType }}/* $(librariesDownloadDir)/bin/aot;cp -r $(librariesDownloadDir)/LinuxMonoAOT/artifacts/bin/microsoft.netcore.app.runtime.linux-${{ parameters.archType }}/Release/* $(librariesDownloadDir)/bin/aot/pack"
        displayName: "Create aot directory (Linux)"

    # Download artifacts for Android Testing
    - ${{ if eq(parameters.runtimeType, 'AndroidMono')}}:
      - template: /eng/pipelines/common/download-artifact-step.yml
        parameters:
          unpackFolder: $(Build.SourcesDirectory)/androidHelloWorld
          cleanUnpackFolder: false
          artifactFileName: 'AndroidMonoarm64.tar.gz'
          artifactName: 'AndroidMonoarm64'
          displayName: 'Mono Android HelloWorld'
      - template: /eng/pipelines/common/download-artifact-step.yml
        parameters:
          unpackFolder: $(Build.SourcesDirectory)
          cleanUnpackFolder: false
          artifactFileName: 'AndroidBDNApk.tar.gz'
          artifactName: 'AndroidBDNApk'
          displayName: 'Mono Android BDN Apk'
      
    # Download iOSMono and Native AOT tests
    - ${{ if or(eq(parameters.runtimeType, 'iOSMono'), eq(parameters.runtimeType, 'iOSNativeAOT')) }}:
      - template: /eng/pipelines/common/download-artifact-step.yml
        parameters:
          unpackFolder: $(Build.SourcesDirectory)/iosHelloWorld
          cleanUnpackFolder: false
          ${{ if and(eq(parameters.runtimeType, 'iOSMono'), eq(parameters.iOSLlvmBuild, 'False'), eq(parameters.iOSStripSymbols, 'False')) }}:
            artifactName: 'iOSSampleAppNoLLVMSymbols'
            artifactFileName: 'iOSSampleAppNoLLVMSymbols.zip'
          ${{ if and(eq(parameters.runtimeType, 'iOSMono'), eq(parameters.iOSLlvmBuild, 'False'), eq(parameters.iOSStripSymbols, 'True')) }}:
            artifactName: 'iOSSampleAppNoLLVMNoSymbols'
            artifactFileName: 'iOSSampleAppNoLLVMNoSymbols.zip'
          ${{ if and(eq(parameters.runtimeType, 'iOSMono'), eq(parameters.iOSLlvmBuild, 'True'), eq(parameters.iOSStripSymbols, 'False')) }}:
            artifactName: 'iOSSampleAppLLVMSymbols'
            artifactFileName: 'iOSSampleAppLLVMSymbols.zip'
          ${{ if and(eq(parameters.runtimeType, 'iOSMono'), eq(parameters.iOSLlvmBuild, 'True'), eq(parameters.iOSStripSymbols, 'True')) }}:
            artifactName: 'iOSSampleAppLLVMNoSymbols'
            artifactFileName: 'iOSSampleAppLLVMNoSymbols.zip'
          ${{ if and(eq(parameters.runtimeType, 'iOSNativeAOT'), eq(parameters.iOSStripSymbols, 'False')) }}:
            artifactName: 'iOSSampleAppSymbols'
            artifactFileName: 'iOSSampleAppSymbols.zip'
          ${{ if and(eq(parameters.runtimeType, 'iOSNativeAOT'), eq(parameters.iOSStripSymbols, 'True')) }}:
            artifactName: 'iOSSampleAppNoSymbols'
            artifactFileName: 'iOSSampleAppNoSymbols.zip'
          displayName: 'iOS Sample App'
      # same artifact as above but don't extract .zip
      - task: DownloadBuildArtifacts@0
        displayName: 'Download iOS Sample App'
        inputs:
          buildType: current
          downloadType: single
          downloadPath: '$(Build.SourcesDirectory)/iosHelloWorldZip'
          ${{ if and(eq(parameters.runtimeType, 'iOSMono'), eq(parameters.iOSLlvmBuild, 'False'), eq(parameters.iOSStripSymbols, 'False')) }}:
            artifactName: 'iOSSampleAppNoLLVMSymbols'
          ${{ if and(eq(parameters.runtimeType, 'iOSMono'), eq(parameters.iOSLlvmBuild, 'False'), eq(parameters.iOSStripSymbols, 'True')) }}:
            artifactName: 'iOSSampleAppNoLLVMNoSymbols'
          ${{ if and(eq(parameters.runtimeType, 'iOSMono'), eq(parameters.iOSLlvmBuild, 'True'), eq(parameters.iOSStripSymbols, 'False')) }}:
            artifactName: 'iOSSampleAppLLVMSymbols'
          ${{ if and(eq(parameters.runtimeType, 'iOSMono'), eq(parameters.iOSLlvmBuild, 'True'), eq(parameters.iOSStripSymbols, 'True')) }}:
            artifactName: 'iOSSampleAppLLVMNoSymbols'
          ${{ if and(eq(parameters.runtimeType, 'iOSNativeAOT'), eq(parameters.iOSStripSymbols, 'False')) }}:
            artifactName: 'iOSSampleAppSymbols'
          ${{ if and(eq(parameters.runtimeType, 'iOSNativeAOT'), eq(parameters.iOSStripSymbols, 'True')) }}:
            artifactName: 'iOSSampleAppNoSymbols'
          checkDownloadedFiles: true

    # Create Core_Root
    - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) $(buildConfig) $(archType) generatelayoutonly $(librariesOverrideArg) $(_crossBuildPropertyArg)
      displayName: Create Core_Root
      condition: and(succeeded(), ne(variables.runtimeFlavorName, 'Mono'), ne('${{ parameters.runtimeType }}', 'wasm'), not(in('${{ parameters.runtimeType }}', 'AndroidMono', 'iOSMono', 'iOSNativeAOT')))

    # Copy the runtime directory into the testhost folder to include OOBs.
    - script: "build.cmd -subset libs.pretest -configuration release -ci -arch $(archType) -testscope innerloop /p:RuntimeArtifactsPath=$(librariesDownloadDir)\\bin\\mono\\$(osGroup).$(archType).$(buildConfigUpper) /p:RuntimeFlavor=mono;xcopy $(Build.SourcesDirectory)\\artifacts\\bin\\runtime\\net8.0-$(osGroup)-$(buildConfigUpper)-$(archType)\\* $(Build.SourcesDirectory)\\artifacts\\bin\\testhost\\net8.0-$(osGroup)-$(buildConfigUpper)-$(archType)\\shared\\Microsoft.NETCore.App\\$(productVersion) /E /I /Y;xcopy $(Build.SourcesDirectory)\\artifacts\\bin\\testhost\\net8.0-$(osGroup)-$(buildConfigUpper)-$(archType)\\* $(Build.SourcesDirectory)\\.dotnet-mono /E /I /Y;copy $(Build.SourcesDirectory)\\artifacts\\bin\\coreclr\\$(osGroup).$(archType).$(buildConfigUpper)\\corerun.exe $(Build.SourcesDirectory)\\.dotnet-mono\\shared\\Microsoft.NETCore.App\\$(productVersion)\\corerun.exe"
      displayName: "Create mono dotnet (Windows)"
      condition: and(and(succeeded(), eq(variables.runtimeFlavorName, 'Mono')), eq(variables.osGroup, 'windows'), not(in('${{ parameters.runtimeType }}', 'AndroidMono', 'iOSMono', 'iOSNativeAOT')))

    - script: "mkdir $(Build.SourcesDirectory)/.dotnet-mono;./build.sh -subset libs.pretest -configuration release -ci -arch $(archType) -testscope innerloop /p:RuntimeArtifactsPath=$(librariesDownloadDir)/bin/mono/$(osGroup).$(archType).$(buildConfigUpper) /p:RuntimeFlavor=mono;cp $(Build.SourcesDirectory)/artifacts/bin/runtime/net8.0-$(osGroup)-$(buildConfigUpper)-$(archType)/* $(Build.SourcesDirectory)/artifacts/bin/testhost/net8.0-$(osGroup)-$(buildConfigUpper)-$(archType)/shared/Microsoft.NETCore.App/$(productVersion) -rf;cp $(Build.SourcesDirectory)/artifacts/bin/testhost/net8.0-$(osGroup)-$(buildConfigUpper)-$(archType)/* $(Build.SourcesDirectory)/.dotnet-mono -r;cp $(Build.SourcesDirectory)/artifacts/bin/coreclr/$(osGroup).$(archType).$(buildConfigUpper)/corerun $(Build.SourcesDirectory)/.dotnet-mono/shared/Microsoft.NETCore.App/$(productVersion)/corerun"
      displayName: "Create mono dotnet (Linux)"
      condition: and(and(succeeded(), eq(variables.runtimeFlavorName, 'Mono')), ne(variables.osGroup, 'windows'), not(in('${{ parameters.runtimeType }}', 'AndroidMono', 'iOSMono', 'iOSNativeAOT')))
