parameters:
  archType: ''
  isOfficialBuild: false
  osGroup: ''
  osSubgroup: ''
  hostArchType: ''

steps:
  # Always build the crossdac, that way we know in CI/PR if things break to build.
  - ${{ if and(eq(parameters.osGroup, 'windows'), notin(parameters.archType, 'x86')) }}:
    - script: $(Build.SourcesDirectory)/src/coreclr/build-runtime$(scriptExt) $(buildConfig) ${{ parameters.archType }} -hostarch ${{ parameters.hostArchType }} -ci -os linux -cmakeargs "-DCLR_CROSS_COMPONENTS_BUILD=1" -ninja $(officialBuildIdArg) -component crosscomponents
      displayName: Build Cross OS Linux DAC for Windows

    - script: $(Build.SourcesDirectory)/src/coreclr/build-runtime$(scriptExt) $(buildConfig) ${{ parameters.archType }} -hostarch ${{ parameters.hostArchType }} -ci -os alpine -cmakeargs "-DCLR_CROSS_COMPONENTS_BUILD=1" -ninja $(officialBuildIdArg) -component crosscomponents
      displayName: Build Cross OS Linux-musl DAC for Windows

    - powershell: |
        function CopyAndVerifyCrossOsAssets {
          [CmdletBinding()]
          param (
            [Parameter(Mandatory)][string]$crossDacDir,
            [Parameter(Mandatory)][string]$targetDir
          )

          $crossDacDir = Join-Path $crossDacDir -ChildPath '${{ parameters.hostArchType }}'

          $availableFiles = ls -File $crossDacDir

          Write-Host "Probed for files in ""$crossDacDir"", found:"
          $availableFiles | fl

          if (-not ("mscordaccore.dll" -in $availableFiles.Name `
                   -and "mscordaccore.pdb" -in $availableFiles.Name `
                   -and "mscordbi.dll" -in $availableFiles.Name `
                   -and "mscordbi.pdb" -in $availableFiles.Name`
                   ))
          {
            Write-Error "Couldn't find one of the expected crossdac files."
          }

          New-Item $targetDir -ItemType 'Directory' -Force -ea 0
          $availableFiles | %{ cp $_.FullName $targetDir -v }
        }

        $buildMuslDacRootFolderPath = "$(Build.SourcesDirectory)/artifacts/bin/coreclr/alpine.${{ parameters.archType }}.$(buildConfigUpper)"
        $buildMuslStagingPath = "$(crossDacArtifactPath)/Linux_musl.${{ parameters.archType }}.$(buildConfigUpper)/${{ parameters.hostArchType }}"
        
        $buildLinuxDacRootFolderPath = "$(Build.SourcesDirectory)/artifacts/bin/coreclr/Linux.${{ parameters.archType }}.$(buildConfigUpper)"
        $buildLinuxDacStagingPath = "$(crossDacArtifactPath)/Linux.${{ parameters.archType }}.$(buildConfigUpper)/${{ parameters.hostArchType }}"
        
        
        CopyAndVerifyCrossOsAssets -CrossDacDir $buildMuslDacRootFolderPath -TargetDir $buildMuslStagingPath
        CopyAndVerifyCrossOsAssets -CrossDacDir $buildLinuxDacRootFolderPath -TargetDir $buildLinuxDacStagingPath

        Write-Host "Final directory contents:"
        ls -R $(crossDacArtifactPath)

      displayName: Gather CrossDac Artifacts

    - template: /eng/pipelines/coreclr/templates/sign-diagnostic-files.yml
      parameters:
        basePath: $(crossDacArtifactPath)
        isOfficialBuild: ${{ parameters.isOfficialBuild }}
        timeoutInMinutes: 30

  - ${{ if eq(parameters.osGroup, 'linux') }}:
    - task: CopyFiles@2
      displayName: Gather runtime for CrossDac
      inputs:
        SourceFolder: $(coreClrProductRootFolderPath)
        Contents: libcoreclr.so
        TargetFolder: '$(crossDacArtifactPath)/${{ parameters.osGroup }}${{ parameters.osSubgroup }}.$(archType).$(buildConfigUpper)/${{ parameters.hostArchType }}'

  # Make the assets available in a single container for the packaging job.
  - task: PublishBuildArtifacts@1
    displayName: Publish runtime for CrossDac
    inputs:
      pathtoPublish:  $(crossDacArtifactPath)
      PublishLocation: Container
      artifactName:  $(buildCrossDacArtifactName)
