parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osSubgroup: ''
  container: ''
  runtimeVariant: ''
  testGroup: ''
  framework: net6.0 # Specify the appropriate framework when running release branches (ie netcoreapp3.0 for release/3.0)
  liveLibrariesBuildConfig: ''
  variables: {}
  helixQueues: ''
  runtimeType: 'coreclr'
  pool: ''
  codeGenType: 'JIT'
  projetFile: ''
  runKind: ''
  runJobTemplate: '/eng/pipelines/coreclr/templates/jit-run-exploratory-job.yml'
  additionalSetupParameters: ''

### Exploratory job

### Each exploratory job depends on a corresponding build job with the same
### buildConfig and archType.

jobs:
- template: ${{ parameters.runJobTemplate }}
  parameters:
    # Compute job name from template parameters
    jobName: ${{ format('exploratory_{0}{1}_{2}_{3}_{4}_{5}_{6}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig, parameters.runtimeType, parameters.codeGenType, parameters.runKind) }}
    displayName: ${{ format('Exploratory {0}{1} {2} {3} {4} {5} {6}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig, parameters.runtimeType, parameters.codeGenType, parameters.runKind) }}
    pool: ${{ parameters.pool }}
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    osSubgroup: ${{ parameters.osSubgroup }}
    runtimeVariant: ${{ parameters.runtimeVariant }}
    liveLibrariesBuildConfig: ${{ parameters.liveLibrariesBuildConfig }}
    runtimeType: ${{ parameters.runtimeType }}
    codeGenType: ${{ parameters.codeGenType }}
    runKind: ${{ parameters.runKind }}
    testGroup: ${{ parameters.testGroup }}
    helixQueues: ${{ parameters.helixQueues }}
    additionalSetupParameters: ${{ parameters.additionalSetupParameters }}
    # Test job depends on the corresponding build job
    dependsOn:
    - ${{ format('coreclr_{0}_product_build_{1}{2}_{3}_{4}', parameters.runtimeVariant, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
    - ${{ format('libraries_build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.liveLibrariesBuildConfig) }}

    variables: ${{ parameters.variables }}

    frameworks:
      - ${{ parameters.framework }}
    steps:
    # Extra steps that will be passed to the exploratory template and run before sending the job to helix (all of which is done in the template)

    # Optionally download live-built libraries
    - template: /eng/pipelines/common/download-artifact-step.yml
      parameters:
        unpackFolder: $(librariesDownloadDir)
        cleanUnpackFolder: false
        artifactFileName: '$(librariesBuildArtifactName)$(archiveExtension)'
        artifactName: '$(librariesBuildArtifactName)'
        displayName: 'live-built libraries'

    # Download coreclr
    - template: /eng/pipelines/common/download-artifact-step.yml
      parameters:
        unpackFolder: $(buildProductRootFolderPath)
        artifactFileName: '$(buildProductArtifactName)$(archiveExtension)'
        artifactName: '$(buildProductArtifactName)'
        displayName: 'Coreclr product build'

    # Create Core_Root
    - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) $(buildConfig) $(archType) generatelayoutonly $(librariesOverrideArg)
      displayName: Create Core_Root
      condition: succeeded()
