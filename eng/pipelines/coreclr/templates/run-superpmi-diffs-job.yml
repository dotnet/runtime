parameters:
  steps: []                       # optional -- any additional steps that need to happen before pulling down the jitutils repo and sending the jitutils to helix (ie building your repo)
  variables: []                   # optional -- list of additional variables to send to the template
  jobName: ''                     # required -- job name
  displayName: ''                 # optional -- display name for the job. Will use jobName if not passed
  pool: ''                        # required -- name of the Build pool
  container: ''                   # required -- name of the container
  buildConfig: ''                 # required -- build configuration
  archType: ''                    # required -- targeting CPU architecture
  osGroup: ''                     # required -- operating system for the job
  osSubgroup: ''                  # optional -- operating system subgroup
  continueOnError: 'false'        # optional -- determines whether to continue the build if the step errors
  dependsOn: ''                   # optional -- dependencies of the job
  timeoutInMinutes: 120           # optional -- timeout for the job
  enableTelemetry: false          # optional -- enable for telemetry
  liveLibrariesBuildConfig: ''    # optional -- live-live libraries configuration to use for the run
  helixQueues: ''                 # required -- Helix queues
  dependOnEvaluatePaths: false
  diffType: 'asmdiffs'            # required -- 'asmdiffs', 'tpdiff', or 'all'
  baseJitOptions: ''              # e.g. JitStressModeNames=STRESS_PHYSICAL_PROMOTION;JitFullyInt=1
  diffJitOptions: ''

jobs:
- template: xplat-pipeline-job.yml
  parameters:
    dependsOn: ${{ parameters.dependsOn }}
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    osSubgroup: ${{ parameters.osSubgroup }}
    liveLibrariesBuildConfig: ${{ parameters.liveLibrariesBuildConfig }}
    enableTelemetry: ${{ parameters.enableTelemetry }}
    enablePublishBuildArtifacts: true
    continueOnError: ${{ parameters.continueOnError }}
    dependOnEvaluatePaths: ${{ parameters.dependOnEvaluatePaths }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}

    ${{ if ne(parameters.displayName, '') }}:
      displayName: '${{ parameters.displayName }}'
    ${{ if eq(parameters.displayName, '') }}:
      displayName: '${{ parameters.jobName }}'

    variables:
    - ${{ each variable in parameters.variables }}:
      - ${{insert}}: ${{ variable }}

    - name: diffType
      value: ${{ parameters.diffType }}

    - ${{ if eq(parameters.osGroup, 'windows') }}:
      - name: PythonScript
        value: 'py -3'
      - name: PipScript
        value: 'py -3 -m pip'
      - name: SpmiCollectionLocation
        value: '$(Build.SourcesDirectory)\artifacts\spmi\'
      - name: SpmiLogsLocation
        value: '$(Build.SourcesDirectory)\artifacts\spmi_logs\'
      - name: SpmiDiffsLocation
        value: '$(Build.SourcesDirectory)\artifacts\spmi_diffs\'
      - name: HelixResultLocation
        value: '$(Build.SourcesDirectory)\artifacts\helixresults\'
    - ${{ if ne(parameters.osGroup, 'windows') }}:
      - name: PythonScript
        value: 'python3'
      - name: PipScript
        value: 'pip3'
      - name: SpmiCollectionLocation
        value: '$(Build.SourcesDirectory)/artifacts/spmi/'
      - name: SpmiLogsLocation
        value: '$(Build.SourcesDirectory)/artifacts/spmi_logs/'
      - name: SpmiDiffsLocation
        value: '$(Build.SourcesDirectory)/artifacts/spmi_diffs/'
      - name: HelixResultLocation
        value: '$(Build.SourcesDirectory)/artifacts/helixresults/'

    - name: SetupScriptDirs
      value: ''
    - ${{ if eq(parameters.diffType, 'asmdiffs') }}:
      - name: SetupScriptDirs
        value: '-checked_directory $(buildProductRootFolderPath)'
    - ${{ if eq(parameters.diffType, 'tpdiff') }}:
      - name: SetupScriptDirs
        value: '-release_directory $(releaseProductRootFolderPath)'
    - ${{ if eq(parameters.diffType, 'all') }}:
      - name: SetupScriptDirs
        value: '-checked_directory $(buildProductRootFolderPath) -release_directory $(releaseProductRootFolderPath)'

    workspace:
      clean: all
    pool:
      ${{ parameters.pool }}
    container: ${{ parameters.container }}
    steps:
    - ${{ parameters.steps }}

    - ${{ if ne(parameters.osGroup, 'windows') }}:
      - script: |
          mkdir -p $(SpmiCollectionLocation)
          mkdir -p $(SpmiLogsLocation)
          mkdir -p $(SpmiDiffsLocation)
        displayName: Create directories
    - ${{ if eq(parameters.osGroup, 'windows') }}:
      - script: |
          mkdir $(SpmiCollectionLocation)
          mkdir $(SpmiLogsLocation)
          mkdir $(SpmiDiffsLocation)
        displayName: Create directories

    - script: $(PythonScript) $(Build.SourcesDirectory)/src/coreclr/scripts/superpmi_diffs_setup.py -source_directory $(Build.SourcesDirectory) $(SetupScriptDirs) -type $(diffType) -platform $(osGroup) -arch $(archType)
      displayName: ${{ format('SuperPMI diffs setup ({0} {1}{2} {3})', parameters.diffType, parameters.osGroup, parameters.osSubgroup, parameters.archType) }}

      # Run superpmi-diffs.py script in helix
    - template: /eng/pipelines/common/templates/runtimes/send-to-helix-step.yml
      parameters:
        displayName: 'Send job to Helix'
        helixBuild: $(Build.BuildNumber)
        helixSource: $(_HelixSource)
        helixType: 'build/tests/'
        helixQueues: ${{ join(',', parameters.helixQueues) }}
        creator: dotnet-bot
        WorkItemTimeout: 2:00 # 2 hours
        WorkItemDirectory: '$(WorkItemDirectory)'
        CorrelationPayloadDirectory: '$(CorrelationPayloadDirectory)'
        helixProjectArguments: '$(Build.SourcesDirectory)/src/coreclr/scripts/superpmi-diffs.proj'
        BuildConfig: ${{ parameters.buildConfig }}
        osGroup: ${{ parameters.osGroup }}
        osSubgroup: ${{ parameters.osSubgroup }}
        archType: ${{ parameters.archType }}
        SuperPmiDiffType: ${{ parameters.diffType }}
        SuperPmiBaseJitOptions: ${{ parameters.baseJitOptions }}
        SuperPmiDiffJitOptions: ${{ parameters.diffJitOptions }}

      # Always upload the available logs for diagnostics
    - task: CopyFiles@2
      displayName: Copying superpmi.log of all partitions
      inputs:
        sourceFolder: '$(HelixResultLocation)'
        contents: '**/superpmi_*.log'
        targetFolder: '$(SpmiLogsLocation)'
      condition: always()

    - task: CopyFiles@2
      displayName: Copying superpmi.md of all partitions
      inputs:
        sourceFolder: '$(HelixResultLocation)'
        contents: '**/superpmi_*.md'
        targetFolder: '$(SpmiDiffsLocation)'
      condition: always()

    - ${{ if eq(parameters.diffType, 'asmdiffs') }}:
      - task: CopyFiles@2
        displayName: Copying dasm files of all partitions
        inputs:
          sourceFolder: '$(HelixResultLocation)'
          contents: '**/Asmdiffs_*.zip'
          targetFolder: '$(SpmiDiffsLocation)'
        condition: always()

    - script: $(PythonScript) $(Build.SourcesDirectory)/src/coreclr/scripts/superpmi_diffs_summarize.py -diff_summary_dir $(SpmiDiffsLocation) -type $(diffType) -platform $(osGroup) -arch $(archType)
      displayName: ${{ format('Summarize ({0} {1}{2} {3})', parameters.diffType, parameters.osGroup, parameters.osSubgroup, parameters.archType) }}
      condition: always()

    - task: PublishPipelineArtifact@1
      displayName: Publish SuperPMI logs
      inputs:
        targetPath: $(SpmiLogsLocation)
        artifactName: 'SuperPMI_Logs_$(diffType)_$(osGroup)$(osSubgroup)_$(archType)_$(buildConfig)_Attempt$(System.JobAttempt)'
      condition: always()
      continueOnError: true

    - task: PublishPipelineArtifact@1
      displayName: Publish SuperPMI diffs files
      inputs:
        targetPath: $(SpmiDiffsLocation)
        artifactName: 'SuperPMI_Diffs_$(diffType)_$(osGroup)$(osSubgroup)_$(archType)_$(buildConfig)_Attempt$(System.JobAttempt)'
      condition: always()
      continueOnError: true

    - task: PublishPipelineArtifact@1
      displayName: Publish SuperPMI build logs
      inputs:
        targetPath: $(Build.SourcesDirectory)/artifacts/log
        artifactName: 'SuperPMI_BuildLogs_$(diffType)_$(osGroup)$(osSubgroup)_$(archType)_$(buildConfig)_Attempt$(System.JobAttempt)'
      condition: always()
      continueOnError: true
