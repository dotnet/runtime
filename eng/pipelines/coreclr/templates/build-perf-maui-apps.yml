parameters:
  osGroup: ''
  osSubgroup: ''
  archType: ''
  buildConfig: ''
  runtimeFlavor: ''
  helixQueues: ''
  targetRid: ''
  nameSuffix: ''
  platform: ''
  shouldContinueOnError: ''
  rootFolder: ''
  includeRootFolder: ''
  displayName: ''
  artifactName: ''
  archiveExtension: ''
  archiveType: ''
  tarCompression: ''


steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: 'IntermediateArtifacts'
      path: $(Build.SourcesDirectory)/MauiTesting/ArtifactPacks
      patterns: |
        IntermediateArtifacts/MonoRuntimePacks/Shipping/Microsoft.NETCore.App.Runtime.Mono.android-!(*.symbols).nupkg
        
      # IntermediateArtifacts/MonoRuntimePacks/Shipping/Microsoft.NETCore.App.Runtime.Mono.ios-*.nupkg
      # IntermediateArtifacts/MonoRuntimePacks/Shipping/Microsoft.NETCore.App.Runtime.Mono.iossimulator-*.nupkg
      # IntermediateArtifacts/MonoRuntimePacks/Shipping/Microsoft.NETCore.App.Runtime.Mono.maccatalyst-*.nupkg

  - task: CopyFiles@2
    displayName: Flatten packages
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/MauiTesting/ArtifactPacks
      contents: '*/Shipping/*.nupkg'
      cleanTargetFolder: false
      targetFolder: $(Build.SourcesDirectory)/MauiTesting/ArtifactPacks
      flattenFolders: true
  
  - script: |
      for file in *.nupkg
        do     
          mv -v "$file" "${file%.nupkg}.zip" 
        done
    displayName: Update File Extensions
    workingDirectory: $(Build.SourcesDirectory)/MauiTesting/ArtifactPacks
    

  #Unzip the nuget packages to make the actual runtimes accessible
  - task: ExtractFiles@1
    inputs:
        archiveFilePatterns: $(Build.SourcesDirectory)/MauiTesting/ArtifactPacks/Microsoft.NETCore.App.Runtime.Mono.android-arm.*.zip
        destinationFolder: $(Build.SourcesDirectory)/MauiTesting/ArtifactPacks/Microsoft.NETCore.App.Runtime.Mono.android-arm
        overwriteExistingFiles: true
        cleanDestinationFolder: false
  - task: ExtractFiles@1
    inputs:
        archiveFilePatterns: $(Build.SourcesDirectory)/MauiTesting/ArtifactPacks/Microsoft.NETCore.App.Runtime.Mono.android-arm64.*.zip
        destinationFolder: $(Build.SourcesDirectory)/MauiTesting/ArtifactPacks/Microsoft.NETCore.App.Runtime.Mono.android-arm64
        overwriteExistingFiles: true
        cleanDestinationFolder: false
  - task: ExtractFiles@1
    inputs:
        archiveFilePatterns: $(Build.SourcesDirectory)/MauiTesting/ArtifactPacks/Microsoft.NETCore.App.Runtime.Mono.android-x86.*.zip
        destinationFolder: $(Build.SourcesDirectory)/MauiTesting/ArtifactPacks/Microsoft.NETCore.App.Runtime.Mono.android-x86
        overwriteExistingFiles: true
        cleanDestinationFolder: false
  - task: ExtractFiles@1
    inputs:
        archiveFilePatterns: $(Build.SourcesDirectory)/MauiTesting/ArtifactPacks/Microsoft.NETCore.App.Runtime.Mono.android-x64.*.zip
        destinationFolder: $(Build.SourcesDirectory)/MauiTesting/ArtifactPacks/Microsoft.NETCore.App.Runtime.Mono.android-x64
        overwriteExistingFiles: true
        cleanDestinationFolder: false

  # Download and CI install dotnet
  # Download latest MAUI
  # Update the manifests based on the gated source
  # Install the MAUI workload install maui (with proper feeds in the nuget.config)
  # Create MAUI Sample app (Do we want this here or lower?)
  - script: |
      curl -o ./rollback.json 'maui.blob.core.windows.net/metadata/rollbacks/main.json'
      ./dotnet.sh workload update --from-rollback-file ./rollback.json
      ./dotnet.sh workload install maui --skip-manifest-update
    displayName: Install MAUI
    workingDirectory: $(Build.SourcesDirectory)
    condition: succeededOrFailed()
  - script: |
      ./dotnet.sh new maui -n MauiTesting
      cd MauiTesting
      cp $(Build.SourcesDirectory)/src/mono/sample/MauiScenario.props ./Directory.Build.props
      cp $(Build.SourcesDirectory)/src/mono/sample/MauiScenario.targets ./Directory.Build.targets
      ls -laR
    displayName: Setup MAUI Project
    workingDirectory: $(Build.SourcesDirectory)
    condition: succeededOrFailed()


  - script: |
      chmod -R -a+r .
      ls -laR
      ../dotnet.sh publish -bl:MauiAndroid.binlog -f net6.0-android -c Release
    condition: succeededOrFailed()
    displayName: Build MAUI Android
    workingDirectory: $(Build.SourcesDirectory)/MauiTesting
  - task: PublishBuildArtifacts@1 #
    condition: succeededOrFailed() #
    displayName: 'Publish Android binlog' #
    inputs:
      pathtoPublish: $(Build.SourcesDirectory)/MauiTesting/MauiAndroid.binlog #
      artifactName:  ${{ parameters.artifactName }} #
  - template: /eng/pipelines/common/upload-artifact-step.yml
    parameters:
        rootFolder: $(Build.SourcesDirectory)/MauiTesting # TODO Make the APK
        includeRootFolder: true #
        displayName: Maui Android App #
        artifactName: MauiAndroidApp #
        archiveExtension: '.tar.gz' #
        archiveType: tar #
        tarCompression: gz #
  - script: rm -r -f ./bin
    workingDirectory: $(Build.SourcesDirectory)/MauiTesting
    displayName: Clean bindir
    condition: succeededOrFailed()
  
  # - script: |
  #     ../dotnet.sh build -bl:MauiMacCatalyst.binlog -f net6.0-maccatalyst -o MacCatalystBuildOutput
  #   displayName: Build MAUI MacCatalyst
  #   workingDirectory: $(Build.SourcesDirectory)/MauiTesting
  # - task: PublishBuildArtifacts@1 #
  #   condition: succeededOrFailed() #
  #   displayName: 'Publish MacCatalyst binlog' #
  #   inputs:
  #     pathtoPublish: $(Build.SourcesDirectory)/MauiTesting/MauiMacCatalyst.binlog #
  #     artifactName:  ${{ parameters.artifactName }} #
  # - template: /eng/pipelines/common/upload-artifact-step.yml
  #   parameters:
  #       rootFolder: $(Build.SourcesDirectory)/MauiTesting #
  #       includeRootFolder: true #
  #       displayName: Maui MacCatalyst App #
  #       artifactName: MauiMacatalystApp #
  #       archiveExtension: '.tar.gz' #
  #       archiveType: tar #
  #       tarCompression: gz #
  # - script: rm -r -f ./bin
  #   workingDirectory: $(Build.SourcesDirectory)/MauiTesting
  #   displayName: Clean bindir
  #   condition: succeededOrFailed()

  # - script: |
  #     ../dotnet.sh build -bl:MauiiOS.binlog -f net6.0-ios -o iOSBuildOutput
  #   condition: succeededOrFailed()
  #   displayName: Build MAUI iOS
  #   workingDirectory: $(Build.SourcesDirectory)/MauiTesting
  # - task: PublishBuildArtifacts@1 #
  #   condition: succeededOrFailed() #
  #   displayName: 'Publish iOS binlog' #
  #   inputs:
  #     pathtoPublish: $(Build.SourcesDirectory)/MauiTesting/MauiiOS.binlog #
  #     artifactName:  ${{ parameters.artifactName }} #
  # - template: /eng/pipelines/common/upload-artifact-step.yml
  #   parameters:
  #       rootFolder: $(Build.SourcesDirectory)/MauiTesting #
  #       includeRootFolder: true #
  #       displayName: Maui iOS App #
  #       artifactName: MauiiOSApp #
  #       archiveExtension: '.tar.gz' #
  #       archiveType: tar #
  #       tarCompression: gz #
  # - script: rm -r -f ./bin
  #   workingDirectory: $(Build.SourcesDirectory)/MauiTesting
  #   displayName: Clean bindir
  #   condition: succeededOrFailed()

  - template: /eng/pipelines/common/upload-artifact-step.yml
    parameters:
      osGroup: ${{ parameters.osGroup }}
      osSubgroup: ${{ parameters.osSubgroup }}
      archType: ${{ parameters.archType }}
      buildConfig: ${{ parameters.buildConfig }}
      runtimeFlavor: ${{ parameters.runtimeFlavor }}
      helixQueues: ${{ parameters.helixQueues }}
      targetRid: ${{ parameters.targetRid }}
      nameSuffix: ${{ parameters.nameSuffix }}
      platform: ${{ parameters.platform }}
      shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      rootFolder:  ${{ parameters.rootFolder }}
      includeRootFolder:  ${{ parameters.includeRootFolder }}
      displayName:  ${{ parameters.displayName }}
      artifactName:  ${{ parameters.artifactName }}
      archiveExtension:  ${{ parameters.archiveExtension }}
      archiveType:  ${{ parameters.archiveType }}
      tarCompression:  ${{ parameters.tarCompression }}
  