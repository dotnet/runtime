parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osSubgroup: ''
  container: ''
  helixQueues: ''
  crossrootfsDir: ''
  stagedBuild: false
  variables: {}
  pool: ''

  # When set to a non-empty value (Debug / Release), it determines libraries
  # build configuration to use for the tests. Setting this property implies
  # a dependency of this job on the appropriate libraries build and is used
  # to construct the name of the Azure artifact representing libraries build
  # to use for building the tests.
  liveLibrariesBuildConfig: ''

### Crossgen-comparison job
###
### Ensure that the output of cross-architecture, e.g. x64-hosted-arm-targeting,
### crossgen matches that of native, e.g. arm-hosted-arm-targeting, crossgen.

jobs:
- template: xplat-pipeline-job.yml
  parameters:
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    osSubgroup: ${{ parameters.osSubgroup }}
    stagedBuild: ${{ parameters.stagedBuild }}
    liveLibrariesBuildConfig: ${{ parameters.liveLibrariesBuildConfig }}
    helixType: 'test/crossgen-comparison/'
    pool: ${{ parameters.pool }}

    # Compute job name from template parameters
    name: ${{ format('test_crossgen_comparison_{0}{1}_{1}_{2}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
    displayName: ${{ format('Test crossgen-comparison {0}{1} {2} {3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}

    crossrootfsDir: ${{ parameters.crossrootfsDir }}

    variables:
    - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      - group: DotNet-HelixApi-Access
    - name: hostArchType
      value: x64
    - name: targetFlavor
      value: $(osGroup).$(archType).$(buildConfigUpper)
    - name: crossFlavor
      value: $(osGroup).$(hostArchType)_$(archType).$(buildConfigUpper)
    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - name: artifactsDirectory
        value: $(Build.SourcesDirectory)/artifacts
      - name: binDirectory
        value: $(artifactsDirectory)/bin
      - name: productDirectory
        value: $(binDirectory)/coreclr
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - name: artifactsDirectory
        value: $(Build.SourcesDirectory)\artifacts
      - name: binDirectory
        value: $(artifactsDirectory)\bin
      - name: productDirectory
        value: $(binDirectory)\coreclr

    - ${{ parameters.variables }}

    # Test job depends on the corresponding build job
    dependsOn:
    - ${{ format('coreclr_product_build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
    - ${{ if ne(parameters.liveLibrariesBuildConfig, '') }}:
      - ${{ format('libraries_build_{0}_{1}{2}_{3}_{4}', 'netcoreapp', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.liveLibrariesBuildConfig) }}

    # Run all steps in the container.
    # Note that the containers are defined in platform-matrix.yml
    container: ${{ parameters.container }}

    ${{ if eq(parameters.testGroup, 'innerloop') }}:
      timeoutInMinutes: 150 # 2.5 hrs

    steps:

    # Download product build
    - template: /eng/pipelines/common/download-artifact-step.yml
      parameters:
        unpackFolder: $(buildProductRootFolderPath)
        artifactFileName: '$(buildProductArtifactName)$(archiveExtension)'
        artifactName: '$(buildProductArtifactName)'
        displayName: 'product build'

    # Optionally download live-built libraries
    - ${{ if ne(parameters.liveLibrariesBuildConfig, '') }}:
      - template: /eng/pipelines/common/download-artifact-step.yml
        parameters:
          unpackFolder: $(librariesDownloadDir)
          cleanUnpackFolder: false
          artifactFileName: '$(librariesBuildArtifactName)$(archiveExtension)'
          artifactName: '$(librariesBuildArtifactName)'
          displayName: 'live-built libraries'


    # Create directories and ensure crossgen is executable
    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - script: |
          chmod +x $(productDirectory)/$(targetFlavor)/$(hostArchType)/crossgen
          mkdir -p $(artifactsDirectory)/log/$(crossFlavor)
        displayName: Create directories and ensure crossgen is executable
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - script: |
          mkdir $(artifactsDirectory)\log\$(crossFlavor)
        displayName: Create directories


    # Populate Core_Root
    - script: $(coreClrRepoRootDir)build-test$(scriptExt) $(buildConfig) $(archType) $(crossArg) generatelayoutonly
      displayName: Populate Core_Root


    # Create baseline output on the host (x64) machine
    - task: PythonScript@0
      displayName: Create cross-platform crossgen baseline
      inputs:
        scriptSource: 'filePath'
        scriptPath: $(coreClrRepoRoot)/tests/scripts/crossgen_comparison.py
        ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
          arguments:
            crossgen_framework
            --crossgen   $(productDirectory)/$(targetFlavor)/$(hostArchType)/crossgen
            --il_corelib $(productDirectory)/$(targetFlavor)/IL/System.Private.CoreLib.dll
            --core_root  $(artifactsDirectory)/tests/coreclr/$(targetFlavor)/Tests/Core_Root
            --result_dir $(artifactsDirectory)/log/$(crossFlavor)
        ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
          arguments:
            crossgen_framework
            --crossgen   $(productDirectory)\$(targetFlavor)\$(hostArchType)\crossgen
            --il_corelib $(productDirectory)\$(targetFlavor)\IL\System.Private.CoreLib.dll
            --core_root  $(artifactsDirectory)\tests\coreclr\$(targetFlavor)\Tests\Core_Root
            --result_dir $(artifactsDirectory)\log\$(crossFlavor)


    # Send payload to Helix where the native output is generated and compared to the baseline
    - template: /eng/common/templates/steps/send-to-helix.yml
      parameters:
        DisplayNamePrefix: Run native crossgen and compare output to baseline
        HelixSource: $(_HelixSource)
        HelixType: 'test/crossgen-comparison/'
        ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          HelixAccessToken: $(HelixApiAccessToken)
        HelixTargetQueues: ${{ join(' ', parameters.helixQueues) }}
        ${{ if ne(variables['System.TeamProject'], 'internal') }}:
          Creator: $(Creator)
        WorkItemTimeout: 2:00 # 2 hours
        WorkItemDirectory: '$(artifactsDirectory)'
        CorrelationPayloadDirectory: '$(coreClrRepoRoot)/tests/scripts'
        ${{ if ne(parameters.osName, 'Windows_NT') }}:
          WorkItemCommand:
            chmod +x     $HELIX_WORKITEM_PAYLOAD/bin/coreclr/$(targetFlavor)/crossgen;
            mkdir -p     $HELIX_WORKITEM_PAYLOAD/log/$(targetFlavor);
            python -u $HELIX_CORRELATION_PAYLOAD/crossgen_comparison.py crossgen_framework
            --crossgen   $HELIX_WORKITEM_PAYLOAD/bin/coreclr/$(targetFlavor)/crossgen
            --il_corelib $HELIX_WORKITEM_PAYLOAD/bin/coreclr/$(targetFlavor)/IL/System.Private.CoreLib.dll
            --core_root  $HELIX_WORKITEM_PAYLOAD/tests/coreclr/$(targetFlavor)/Tests/Core_Root
            --result_dir $HELIX_WORKITEM_PAYLOAD/log/$(targetFlavor);
            python -u $HELIX_CORRELATION_PAYLOAD/crossgen_comparison.py compare
            --base_dir   $HELIX_WORKITEM_PAYLOAD/log/$(crossFlavor)
            --diff_dir   $HELIX_WORKITEM_PAYLOAD/log/$(targetFlavor)
        ${{ if eq(parameters.osName, 'Windows_NT') }}:
          WorkItemCommand:
            mkdir        %HELIX_WORKITEM_PAYLOAD%\log\$(targetFlavor);
            python -u %HELIX_CORRELATION_PAYLOAD%\crossgen_comparison.py crossgen_framework
            --crossgen   %HELIX_WORKITEM_PAYLOAD%\bin\coreclr\$(targetFlavor)\crossgen
            --il_corelib %HELIX_WORKITEM_PAYLOAD%\bin\coreclr\$(targetFlavor)\IL\System.Private.CoreLib.dll
            --core_root  %HELIX_WORKITEM_PAYLOAD%\tests\coreclr\$(targetFlavor)\Tests\Core_Root
            --result_dir %HELIX_WORKITEM_PAYLOAD%\log\$(targetFlavor);
            python -u %HELIX_CORRELATION_PAYLOAD%\crossgen_comparison.py compare
            --base_dir   %HELIX_WORKITEM_PAYLOAD%\log\$(crossFlavor)
            --diff_dir   %HELIX_WORKITEM_PAYLOAD%\log\$(targetFlavor)

    # Publish log
    - task: PublishBuildArtifacts@1
      displayName: Publish log
      inputs:
        pathtoPublish: $(artifactsDirectory)/log
        artifactName: ${{ format('Testlog_crossgen_comparison_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
      continueOnError: true
      condition: always()
