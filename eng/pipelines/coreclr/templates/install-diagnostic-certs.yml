parameters:
  isOfficialBuild: false
  certNames: []
  vaultName: ''
  azureSubscription: ''
  scriptRoot: '$(Build.SourcesDirectory)'

steps:
- ${{ if and(eq(parameters.isOfficialBuild, true), ne(variables['Build.Reason'], 'PullRequest'), or(startswith(variables['Build.SourceBranch'], 'refs/heads/release/'), startswith(variables['Build.SourceBranch'], 'refs/heads/internal/release/'), startswith(variables['Build.SourceBranch'], 'refs/heads/reltest/')), not(endsWith(variables['Build.SourceBranch'], '-staging'))) }}:
  - task: AzureKeyVault@2
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      KeyVaultName: ${{ parameters.vaultName }}
      SecretsFilter: ${{ join(',', parameters.certNames) }}
    displayName: 'Download secrets: Diagnostic Certificates'

  - task: NuGetCommand@2
    displayName: Install ESRPClient Tool
    inputs:
      command: 'custom'
      arguments: 'install microsoft.esrpclient
                -Source https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
                -DependencyVersion Highest -OutputDirectory $(Build.StagingDirectory)'

  - powershell: |
      eng/pipelines/install-diagnostic-certs.ps1 "${{ join(',', parameters.certNames) }}"
      $esrpclient = Get-ChildItem -Path '$(Build.StagingDirectory)\microsoft.esrpclient*' -Filter esrpclient.exe -Recurse | Select-Object -First 1 | select -ExpandProperty FullName

      if ($esrpclient -eq $null) {
        throw "Failed to find esrpclient.exe in $(Build.StagingDirectory)"
      }

      $signArgs = "/p:DotNetEsrpToolPath=$esrpclient"
      echo "##vso[task.setvariable variable=_SignDiagnosticFilesArgs;]$signArgs"
    displayName: 'Install diagnostic certificates'
    workingDirectory: ${{ parameters.scriptRoot }}
    env:
      ${{ each cert in parameters.certNames }}:
        ${{ cert }}: $(${{ cert }})
