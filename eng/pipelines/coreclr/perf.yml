trigger:
  batch: true
  branches:
    include:
    - main
    - release/*
  paths:
    include:
    - '*'
    - src/libraries/System.Private.CoreLib/*
    exclude:
    - /**/*.md
    - .github/*
    - docs/*
    - LICENSE.TXT
    - PATENTS.TXT
    - THIRD-PARTY-NOTICES.TXT

variables:
  - template: /eng/pipelines/common/variables.yml
  - name: _wasmCollectHelixLogsScript
    value: >-
      test "$_commandExitCode" -eq 0 || (
        test -d "$HELIX_WORKITEM_UPLOAD_ROOT" && (
          export _PERF_DIR=$HELIX_WORKITEM_ROOT/performance;
          mkdir -p $HELIX_WORKITEM_UPLOAD_ROOT/log/MicroBenchmarks/obj;
          mkdir -p $HELIX_WORKITEM_UPLOAD_ROOT/log/MicroBenchmarks/bin;
          mkdir -p $HELIX_WORKITEM_UPLOAD_ROOT/log/BenchmarkDotNet.Autogenerated/obj;
          mkdir -p $HELIX_WORKITEM_UPLOAD_ROOT/log/BenchmarkDotNet.Autogenerated/bin;
          find $_PERF_DIR -name '*.binlog' | xargs -I{} cp {} $HELIX_WORKITEM_UPLOAD_ROOT/log;
          cp -R $_PERF_DIR/artifacts/obj/MicroBenchmarks $HELIX_WORKITEM_UPLOAD_ROOT/log/MicroBenchmarks/obj;
          cp -R $_PERF_DIR/artifacts/bin/MicroBenchmarks $HELIX_WORKITEM_UPLOAD_ROOT/log/MicroBenchmarks/bin;
          cp -R $_PERF_DIR/artifacts/obj/BenchmarkDotNet.Autogenerated $HELIX_WORKITEM_UPLOAD_ROOT/log/BenchmarkDotNet.Autogenerated/obj;
          cp -R $_PERF_DIR/artifacts/bin/BenchmarkDotNet.Autogenerated $HELIX_WORKITEM_UPLOAD_ROOT/log/BenchmarkDotNet.Autogenerated/bin))

schedules:
- cron: "30 2 * * *"
  displayName: Every night at 2:30AM
  branches:
    include:
    - main
  always: true

jobs:

- ${{ if and(ne(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'Schedule')) }}:
  
  # build mono
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/mono/templates/build-job.yml
      runtimeFlavor: mono
      buildConfig: release
      platforms:
      - Linux_x64

  # build coreclr and libraries
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/common/build-coreclr-and-libraries-job.yml
      buildConfig: release
      platforms:
      - Linux_x64
      jobParameters:
        testGroup: perf

  # build mono on wasm
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/common/global-build-job.yml
      buildConfig: Release
      runtimeFlavor: mono
      platforms:
      - Browser_wasm
      jobParameters:
        buildArgs: -s mono+libs+host+packs -c $(_BuildConfig)
        nameSuffix: wasm
        isOfficialBuild: false
        extraStepsTemplate: /eng/pipelines/coreclr/perf-wasm-prepare-artifacts-steps.yml
        extraStepsParameters:
          configForBuild: Release

  #run mono wasm microbenchmarks perf job
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml # NOTE: should we move this file out of coreclr tempelates because it contains mono jobs?
      buildConfig: Release
      runtimeFlavor: wasm
      platforms:
      - Linux_x64
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        runtimeType: wasm
        codeGenType: 'wasm'
        projectFile: microbenchmarks.proj
        runKind: micro
        runJobTemplate: /eng/pipelines/coreclr/templates/run-performance-job.yml
        logicalmachine: 'perftiger'
        javascriptEngine: 'javascriptcore'
        collectHelixLogsScript: ${{ variables['_wasmCollectHelixLogsScript'] }}

  #run mono wasm aot microbenchmarks perf job
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobtemplate: /eng/pipelines/coreclr/templates/perf-job.yml # note: should we move this file out of coreclr tempelates because it contains mono jobs?
      buildconfig: Release
      runtimeflavor: wasm
      platforms:
      - linux_x64
      jobparameters:
        testgroup: perf
        livelibrariesbuildconfig: Release
        skipLiveLibrariesDownload: true
        runtimetype: wasm
        codegentype: 'aot'
        projectfile: microbenchmarks.proj
        runkind: micro
        runjobtemplate: /eng/pipelines/coreclr/templates/run-performance-job.yml
        logicalmachine: 'perftiger'
        javascriptengine: 'javascriptcore'
        collectHelixLogsScript: ${{ variables['_wasmCollectHelixLogsScript'] }}

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'Schedule')) }}:

  # build coreclr and libraries
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/common/build-coreclr-and-libraries-job.yml
      buildConfig: release
      platforms:
      - Linux_x64
      - windows_x64
      - windows_x86
      - Linux_musl_x64
      jobParameters:
        testGroup: perf

  # build mono on wasm
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/common/global-build-job.yml
      buildConfig: Release
      runtimeFlavor: mono
      platforms:
      - Browser_wasm
      jobParameters:
        buildArgs: -s mono+libs+host+packs -c $(_BuildConfig)
        nameSuffix: wasm
        isOfficialBuild: false
        extraStepsTemplate: /eng/pipelines/coreclr/perf-wasm-prepare-artifacts-steps.yml
        extraStepsParameters:
          configForBuild: Release

  # build mono for AOT
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/common/global-build-job.yml
      buildConfig: release
      runtimeFlavor: mono
      platforms:
      - Linux_x64
      jobParameters:
        buildArgs: -s mono+libs+host+packs -c $(_BuildConfig)
        nameSuffix: AOT
        isOfficialBuild: false
        extraStepsTemplate: /eng/pipelines/common/upload-artifact-step.yml
        extraStepsParameters:
          rootFolder: '$(Build.SourcesDirectory)/artifacts/'
          includeRootFolder: true
          displayName: AOT Mono Artifacts
          artifactName: LinuxMonoAOTx64
          archiveExtension: '.tar.gz'
          archiveType: tar
          tarCompression: gz

  # build mono Android scenarios
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/common/global-build-job.yml
      buildConfig: release
      runtimeFlavor: mono
      platforms:
      - Android_arm64
      jobParameters:
        buildArgs: -s mono+libs+host+packs -c $(_BuildConfig)
        nameSuffix: AndroidMono
        isOfficialBuild: false
        extraStepsTemplate: /eng/pipelines/coreclr/templates/build-perf-sample-apps.yml
        extraStepsParameters:
          rootFolder: '$(Build.SourcesDirectory)/artifacts/'
          includeRootFolder: true
          displayName: Android Mono Artifacts
          artifactName: AndroidMonoarm64
          archiveExtension: '.tar.gz'
          archiveType: tar
          tarCompression: gz
    
  # build mono iOS scenarios
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/common/global-build-job.yml
      buildConfig: release
      runtimeFlavor: mono
      platforms:
      - iOS_arm64
      jobParameters:
        buildArgs: -s mono+libs+host+packs -c $(_BuildConfig)
        nameSuffix: iOSMono
        isOfficialBuild: false
        extraStepsTemplate: /eng/pipelines/coreclr/templates/build-perf-sample-apps.yml
        extraStepsParameters:
          rootFolder: '$(Build.SourcesDirectory)/artifacts/'
          includeRootFolder: true
          displayName: iOS Mono Artifacts
          artifactName: iOSMonoarm64
          archiveExtension: '.tar.gz'
          archiveType: tar
          tarCompression: gz

  # build mono
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/mono/templates/build-job.yml
      runtimeFlavor: mono
      buildConfig: release
      platforms:
      - Linux_x64

  # run mono and maui android scenarios
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: mono
      platforms:
        - Windows_x64
      variables:
        - name: mauiVersion
          value: $[ dependencies.Build_iOS_arm64_release_MACiOSAndroidMaui.outputs['getMauiVersion.mauiVersion'] ]
      jobParameters:
        testGroup: perf
        runtimeType: AndroidMono
        projectFile: android_scenarios.proj
        runKind: android_scenarios
        runJobTemplate: /eng/pipelines/coreclr/templates/run-scenarios-job.yml
        logicalmachine: 'perfpixel4a'
        additionalSetupParameters: "-MauiVersion $env:mauiVersion"

  # run mono iOS scenarios and maui iOS scenarios
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: mono
      platforms:
        - OSX_x64
      variables:
        - name: mauiVersion
          value: $[ dependencies.Build_iOS_arm64_release_MACiOSAndroidMaui.outputs['getMauiVersion.mauiVersion'] ]
      jobParameters:
        testGroup: perf
        runtimeType: iOSMono
        projectFile: ios_scenarios.proj
        runKind: ios_scenarios
        runJobTemplate: /eng/pipelines/coreclr/templates/run-scenarios-job.yml
        logicalmachine: 'perfiphone12mini'
        iOSLlvmBuild: False
        additionalSetupParameters: "--mauiversion $(mauiVersion)"

  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: mono
      platforms:
        - OSX_x64
      variables:
        - name: mauiVersion
          value: $[ dependencies.Build_iOS_arm64_release_MACiOSAndroidMaui.outputs['getMauiVersion.mauiVersion'] ]
      jobParameters:
        testGroup: perf
        runtimeType: iOSMono
        projectFile: ios_scenarios.proj
        runKind: ios_scenarios
        runJobTemplate: /eng/pipelines/coreclr/templates/run-scenarios-job.yml
        logicalmachine: 'perfiphone12mini'
        iOSLlvmBuild: True
        additionalSetupParameters: "--mauiversion $(mauiVersion)"

  # run mono microbenchmarks perf job
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: mono
      platforms:
      - Linux_x64
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        runtimeType: mono
        projectFile: microbenchmarks.proj
        runKind: micro_mono
        runJobTemplate: /eng/pipelines/coreclr/templates/run-performance-job.yml
        logicalmachine: 'perftiger'

  # run mono interpreter perf job
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: mono
      platforms:
      - Linux_x64
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        runtimeType: mono
        codeGenType: 'Interpreter'
        projectFile: microbenchmarks.proj
        runKind: micro_mono
        runJobTemplate: /eng/pipelines/coreclr/templates/run-performance-job.yml
        logicalmachine: 'perftiger'

  # run mono wasm interpreter (default) microbenchmarks perf job
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml # NOTE: should we move this file out of coreclr tempelates because it contains mono jobs?
      buildConfig: release
      runtimeFlavor: wasm
      platforms:
      - Linux_x64
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        skipLiveLibrariesDownload: true
        runtimeType: wasm
        codeGenType: 'wasm'
        projectFile: microbenchmarks.proj
        runKind: micro
        runJobTemplate: /eng/pipelines/coreclr/templates/run-performance-job.yml
        logicalmachine: 'perftiger'
        javascriptEngine: 'v8'
        collectHelixLogsScript: ${{ variables['_wasmCollectHelixLogsScript'] }}

  #run mono wasm aot microbenchmarks perf job
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobtemplate: /eng/pipelines/coreclr/templates/perf-job.yml # note: should we move this file out of coreclr tempelates because it contains mono jobs?
      buildconfig: release
      runtimeflavor: wasm
      platforms:
      - linux_x64
      jobparameters:
        testgroup: perf
        livelibrariesbuildconfig: Release
        skipLiveLibrariesDownload: true
        runtimetype: wasm
        codegentype: 'aot'
        projectfile: microbenchmarks.proj
        runkind: micro
        runjobtemplate: /eng/pipelines/coreclr/templates/run-performance-job.yml
        logicalmachine: 'perftiger'
        javascriptEngine: 'v8'
        collectHelixLogsScript: ${{ variables['_wasmCollectHelixLogsScript'] }}

  # run mono aot microbenchmarks perf job
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml # NOTE: should we move this file out of coreclr tempelates because it contains mono jobs?
      buildConfig: release
      runtimeFlavor: aot
      platforms:
      - Linux_x64
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        runtimeType: mono
        codeGenType: 'AOT'
        projectFile: microbenchmarks.proj
        runKind: micro_mono
        runJobTemplate: /eng/pipelines/coreclr/templates/run-performance-job.yml
        logicalmachine: 'perftiger'

  # run coreclr perftiger microbenchmarks perf job
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: coreclr
      platforms:
      - Linux_x64
      - windows_x64
      - windows_x86
      - Linux_musl_x64
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        projectFile: microbenchmarks.proj
        runKind: micro
        runJobTemplate: /eng/pipelines/coreclr/templates/run-performance-job.yml
        logicalmachine: 'perftiger'

  # run coreclr perftiger microbenchmarks pgo perf jobs
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: coreclr
      platforms:
      - windows_x64
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        projectFile: microbenchmarks.proj
        runKind: micro
        runJobTemplate: /eng/pipelines/coreclr/templates/run-performance-job.yml
        logicalmachine: 'perftiger'
        pgoRunType: -NoPgo

  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: coreclr
      platforms:
      - windows_x64
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        projectFile: microbenchmarks.proj
        runKind: micro
        runJobTemplate: /eng/pipelines/coreclr/templates/run-performance-job.yml
        logicalmachine: 'perftiger'
        pgoRunType: -DynamicPgo

  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: coreclr
      platforms:
      - windows_x64
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        projectFile: microbenchmarks.proj
        runKind: micro
        runJobTemplate: /eng/pipelines/coreclr/templates/run-performance-job.yml
        logicalmachine: 'perftiger'
        pgoRunType: -FullPgo

  # run coreclr perfowl microbenchmarks perf job
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: coreclr
      platforms:
      - Linux_x64
      - windows_x64
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        projectFile: microbenchmarks.proj
        runKind: micro
        runJobTemplate: /eng/pipelines/coreclr/templates/run-performance-job.yml
        logicalmachine: 'perfowl'

  # run coreclr crossgen perf job
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: coreclr
      platforms:
      - Linux_x64
      - windows_x64
      - windows_x86
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        projectFile: crossgen_perf.proj
        runKind: crossgen_scenarios
        runJobTemplate: /eng/pipelines/coreclr/templates/run-scenarios-job.yml
        logicalmachine: 'perftiger'

  # run mono wasm blazor perf job
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: wasm
      platforms:
      - Linux_x64
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        skipLiveLibrariesDownload: true
        runtimeType: wasm
        projectFile: blazor_perf.proj
        runKind: blazor_scenarios
        runJobTemplate: /eng/pipelines/coreclr/templates/run-scenarios-job.yml
        additionalSetupParameters: '--latestdotnet'
        logicalmachine: 'perftiger'

  # Uncomment to reenable package replacement
  ## build maui runtime packs
  #- template: /eng/pipelines/common/platform-matrix.yml
  #  parameters:
  #    jobTemplate: /eng/pipelines/common/global-build-job.yml
  #    buildConfig: release
  #    runtimeFlavor: mono
  #    platforms:
  #    - Android_x86
  #    - Android_x64
  #    - Android_arm
  #    - Android_arm64
  #    - MacCatalyst_x64
  #    - iOSSimulator_x64
  #    - iOS_arm64
  #    - iOS_arm
  #    jobParameters:
  #      buildArgs: -s mono+libs+host+packs -c $(_BuildConfig)
  #      nameSuffix: Maui_Packs_Mono
  #      isOfficialBuild: false
  #      extraStepsTemplate: /eng/pipelines/common/upload-intermediate-artifacts-step.yml
  #      extraStepsParameters:
  #        name: MonoRuntimePacks
  
  # build maui app
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/common/global-build-job.yml
      buildConfig: release
      runtimeFlavor: mono
      platforms:
      - iOS_arm64
      jobParameters:
      # Uncomment to reenable package replacement
        #dependsOn:
        #  - Build_Android_arm_release_Maui_Packs_Mono
        #  - Build_Android_arm64_release_Maui_Packs_Mono
        #  - Build_Android_x86_release_Maui_Packs_Mono
        #  - Build_Android_x64_release_Maui_Packs_Mono
        #  - Build_MacCatalyst_x64_release_Maui_Packs_Mono
        #  - Build_iOSSimulator_x64_release_Maui_Packs_Mono
        #  - Build_iOS_arm_release_Maui_Packs_Mono
        #  - Build_iOS_arm64_release_Maui_Packs_Mono
        buildArgs: -s mono -c $(_BuildConfig)
        nameSuffix: MACiOSAndroidMaui
        isOfficialBuild: false
        pool:
          vmImage: 'macos-11'
        extraStepsTemplate: /eng/pipelines/coreclr/templates/build-perf-maui-apps.yml
        extraStepsParameters:
          rootFolder: '$(Build.SourcesDirectory)/artifacts/'
          includeRootFolder: true
          displayName: MAC, iOS, and Android Maui Artifacts
          artifactName: MACiOSAndroidMauiArm
          archiveExtension: '.tar.gz'
          archiveType: tar
          tarCompression: gz
