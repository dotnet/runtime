trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - '*'
    - src/libraries/System.Private.CoreLib/*
    exclude:
    - .github/*
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT


pr:
  branches:
    include:
    - master
  paths:
    include:
    - '*'
    - src/libraries/System.Private.CoreLib/*
    exclude:
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

jobs:
#
# Checkout repository
#
- template: /eng/pipelines/common/checkout-job.yml

# build coreclr and libraries
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/common/build-coreclr-and-libraries-job.yml
    buildConfig: release
    platforms:
    - Linux_x64
    - Windows_NT_x64
    - Windows_NT_x86
    jobParameters:
      testGroup: perf

# build mono
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/mono/templates/build-job.yml
    runtimeFlavor: mono
    buildConfig: release
    platforms:
    - Linux_x64

# run mono perf job
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
    buildConfig: release
    runtimeFlavor: mono
    platforms:
    - Linux_x64
    jobParameters:
      testGroup: perf
      liveLibrariesBuildConfig: Release
      runtimeType: mono
      projectFile: microbenchmarks.proj
      runKind: micro

# run mono interpreter job (private CI only)
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - template: /eng/pipelines/common/platform-matrix.yml
    parameters:
      jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
      buildConfig: release
      runtimeFlavor: mono
      platforms:
      - Linux_x64
      jobParameters:
        testGroup: perf
        liveLibrariesBuildConfig: Release
        runtimeType: mono
        codeGenType: 'Interpreter'
        projectFile: microbenchmarks.proj
        runKind: micro

# run coreclr microbenchmarks perf job
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
    buildConfig: release
    runtimeFlavor: coreclr
    platforms:
    - Linux_x64
    - Windows_NT_x64
    - Windows_NT_x86
    jobParameters:
      testGroup: perf
      liveLibrariesBuildConfig: Release
      projectFile: microbenchmarks.proj
      runKind: micro

# run coreclr crossgen perf job
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/coreclr/templates/perf-job.yml
    buildConfig: release
    runtimeFlavor: coreclr
    platforms:
    #- Linux_x64
    - Windows_NT_x64
    - Windows_NT_x86
    jobParameters:
      testGroup: perf
      liveLibrariesBuildConfig: Release
      projectFile: crossgen_perf.proj
      runKind: crossgen_scenarios

# blazor job
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/common/global-build-job.yml
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    buildConfig: Release
    runtimeFlavor: mono
    platforms:
    - Browser_wasm
    variables:
      # map dependencies variables to local variables
      - name: librariesContainsChange
        value: $[ dependencies.checkout.outputs['SetPathVars_libraries.containsChange'] ]
      - name: monoContainsChange
        value: $[ dependencies.checkout.outputs['SetPathVars_mono.containsChange'] ]
    jobParameters:
      testGroup: innerloop
      nameSuffix: AllSubsets_Mono
      buildArgs: -s mono+libs+installer+libs.tests -c $(_BuildConfig) /p:ArchiveTests=true
      timeoutInMinutes: 120
      condition: >-
        or(
          eq(dependencies.checkout.outputs['SetPathVars_libraries.containsChange'], true),
          eq(dependencies.checkout.outputs['SetPathVars_mono.containsChange'], true),
          eq(dependencies.checkout.outputs['SetPathVars_installer.containsChange'], true),
          eq(variables['isFullMatrix'], true))
      # extra steps, run tests
      extraStepsTemplate: /eng/pipelines/libraries/helix.yml
      extraStepsParameters:
        creator: dotnet-bot
        testRunNamePrefixSuffix: Mono_$(_BuildConfig)
        condition: >-
          or(
          eq(variables['librariesContainsChange'], true),
          eq(variables['monoContainsChange'], true),
          eq(variables['isFullMatrix'], true))