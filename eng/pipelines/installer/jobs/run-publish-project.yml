parameters:
  projectName: ''
  dependency: null

jobs:

- template: /eng/common/templates/post-build/setup-maestro-vars.yml

- job: CustomPublish
  displayName: Custom Publish
  dependsOn: setupMaestroVars
  # Only run this job if setup-maestro-vars says the current branch publishes to this channel.
  # Logic copied from ../common/templates/post-build/channels/netcore-dev-5.yml
  condition: contains(
    dependencies.setupMaestroVars.outputs['setReleaseVars.InitialChannels'],
    format('[{0}]', variables['${{ parameters.dependency.channel.bar }}']))
  pool:
    name: Hosted VS2017
  # Double the default timeout.
  timeoutInMinutes: 120
  workspace:
    clean: all

  variables:
  # Only get the secret variable groups if the def has the official name. Reduce dev build def risk.
  - ${{ if eq(variables['Build.DefinitionName'], 'dotnet-core-setup') }}:
    # Used for publishing individual leg assets to azure blob storage
    - ${{ if eq(parameters.dependency.channel.public, 'true') }}:
      - group: DotNet-DotNetCli-Storage
    - ${{ if ne(parameters.dependency.channel.public, 'true') }}:
      - group: DotNet-MSRC-Storage
    # Used for dotnet/versions update
    - group: DotNet-Versions-Publish

  - name: _DefaultContainerName
    value: dotnet
  - name: _DefaultChecksumsContainerName
    value: dotnet

  - ${{ if eq(parameters.dependency.channel.public, 'true') }}:
    - name: _DefaultAzureAccountName
      value: dotnetcli
    - name: _DefaultAzureAccessToken
      value: $(dotnetcli-storage-key)
    - name: _DefaultChecksumAzureAccountName
      value: dotnetclichecksums
    - name: _DefaultChecksumAzureAccessToken
      value: $(dotnetclichecksums-storage-key)
    # dotnet/versions update
    - name: _GitHubUser
      value: $[ coalesce(variables.GitHubUser, 'dotnet-build-bot') ]
    - name: _GitHubEmail
      value: $[ coalesce(variables.GitHubEmail, 'dotnet-build-bot@microsoft.com') ]
    - name: _GitHubAuthToken
      value: $[ coalesce(variables.GitHubAuthToken, '$(AccessToken-dotnet-build-bot-public-repo)') ]
    - name: _VersionsRepoOwner
      value: $[ coalesce(variables.VersionsRepoOwner, 'dotnet') ]
    - name: _VersionsRepo
      value: $[ coalesce(variables.VersionsRepo, 'versions') ]
    - name: _DotNetVersionsArgs
      value: >-
        /p:GitHubUser=$(_GitHubUser)
        /p:GitHubEmail=$(_GitHubEmail)
        /p:GitHubAuthToken=$(_GitHubAuthToken)
        /p:VersionsRepoOwner=$(_VersionsRepoOwner)
        /p:VersionsRepo=$(_VersionsRepo)
        /p:VersionsRepoPath=build-info/dotnet/core-setup/$(FullBranchName)

  - ${{ if ne(parameters.dependency.channel.public, 'true') }}:
    - name: _DefaultAzureAccountName
      value: dotnetclimsrc
    - name: _DefaultAzureAccessToken
      value: $(dotnetclimsrc-access-key)
    - name: _DefaultChecksumAzureAccountName
      value: dotnetclimsrc
    - name: _DefaultChecksumsContainerName
      value: dotnet-checksums
    - name: _DefaultChecksumAzureAccessToken
      value: $(dotnetclimsrc-access-key)
    # dotnet/versions update (disabled)
    - name: _DotNetVersionsArgs
      value: ''

  # Blob storage publish (installers and checksums)
  - name: _AzureAccountName
    value: $[ coalesce(variables.AzureAccountName, '$(_DefaultAzureAccountName)') ]
  - name: _ContainerName
    value: $[ coalesce(variables.ContainerName, '$(_DefaultContainerName)') ]
  - name: _AzureAccessToken
    value: $[ coalesce(variables.AzureAccessToken, '$(_DefaultAzureAccessToken)') ]
  - name: _ChecksumAzureAccountName
    value: $[ coalesce(variables.ChecksumAzureAccountName, '$(_DefaultChecksumAzureAccountName)') ]
  - name: _ChecksumContainerName
    value: $[ coalesce(variables.ChecksumContainerName, '$(_DefaultChecksumsContainerName)') ]
  - name: _ChecksumAzureAccessToken
    value: $[ coalesce(variables.ChecksumAzureAccessToken, '$(_DefaultChecksumAzureAccessToken)') ]

  - name: _CommonPublishArgs
    value: >-
      /p:AzureAccountName=$(_AzureAccountName)
      /p:ContainerName=$(_ContainerName)
      /p:AzureAccessToken=$(_AzureAccessToken)
      /p:ChecksumAzureAccountName=$(_ChecksumAzureAccountName)
      /p:ChecksumContainerName=$(_ChecksumContainerName)
      /p:ChecksumAzureAccessToken=$(_ChecksumAzureAccessToken)

  steps:

  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - task: NuGetAuthenticate@0

  - task: DownloadBuildArtifacts@0
    displayName: Download Artifacts
    inputs:
      artifactName: PreparedArtifacts
      downloadPath: $(Build.SourcesDirectory)\artifacts\PackageDownload

  - powershell: |
      $prefix = "refs/heads/"
      $branch = "$(Build.SourceBranch)"
      $branchName = $branch
      if ($branchName.StartsWith($prefix))
      {
        $branchName = $branchName.Substring($prefix.Length)
      }
      Write-Host "For Build.SourceBranch $branch, FullBranchName is $branchName"
      Write-Host "##vso[task.setvariable variable=FullBranchName;]$branchName"
    displayName: Find true SourceBranchName

  - script: >-
      build.cmd -ci
      -projects $(Build.SourcesDirectory)\src\publish\${{ parameters.projectName }}.proj
      /p:Channel=${{ parameters.dependency.channel.storage }}
      /p:Configuration=Release
      $(_CommonPublishArgs)
      $(_DotNetVersionsArgs)
      /bl:$(Build.SourcesDirectory)\${{ parameters.projectName }}.binlog
    displayName: Publish to custom locations

  - task: CopyFiles@2
    displayName: Copy Files to $(Build.StagingDirectory)\BuildLogs
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        **/*.log
        **/*.binlog
      TargetFolder: '$(Build.StagingDirectory)\BuildLogs'
    continueOnError: true
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact BuildLogs
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)\BuildLogs'
      ArtifactName: Logs-CustomPublish-${{ parameters.dependency.dependsOn }}-${{ parameters.projectName }}
    condition: succeededOrFailed()
