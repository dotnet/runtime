parameters:
  name: ''
  skipTests: false

steps:
# Upload build outputs as build artifacts only if internal and not PR, to save storage space.
- ${{ if eq(variables.isOfficialBuild, true) }}:
  - task: CopyFiles@2
    displayName: Prepare job-specific Artifacts subdirectory
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
      Contents: |
        Shipping/**/*
        NonShipping/**/*
      TargetFolder: '$(Build.StagingDirectory)/Artifacts/${{ parameters.name }}'
      CleanTargetFolder: true
    condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      pathToPublish: '$(Build.StagingDirectory)/Artifacts'
      artifactName: IntermediateUnsignedArtifacts
      artifactType: container
    condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))

- ${{ if eq(parameters.skipTests, false) }}:
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: 'xUnit'
      testResultsFiles: '*.xml'
      searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
      mergeTestResults: true
      testRunTitle: Installer-${{ parameters.name }}-$(_BuildConfig)
    continueOnError: true
    condition: always()

- task: CopyFiles@2
  displayName: Prepare BuildLogs staging directory
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      **/*.log
      **/*.binlog
    TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
    CleanTargetFolder: true
  continueOnError: true
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: Publish BuildLogs
  inputs:
    PathtoPublish: '$(Build.StagingDirectory)/BuildLogs'
    ArtifactName: Installer-Logs-${{ parameters.name }}-$(_BuildConfig)
  continueOnError: true
  condition: succeededOrFailed()
