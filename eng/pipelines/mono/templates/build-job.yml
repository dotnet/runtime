parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osSubgroup: ''
  platform: ''
  container: ''
  timeoutInMinutes: ''
  variables: {}
  pool: ''
  condition: true
  runtimeVariant: ''
  isOfficialBuild: false
  crossBuild: false
  dependsOn: []
  monoCrossAOTTargetOS: []
  dependOnEvaluatePaths: false
  pgoType: ''

### Product build
jobs:
- template: xplat-pipeline-job.yml
  parameters:
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    osSubgroup: ${{ parameters.osSubgroup }}
    helixType: 'build/product/'
    enableMicrobuild: true
    pool: ${{ parameters.pool }}
    runtimeVariant: ${{ parameters.runtimeVariant }}
    crossBuild: ${{ parameters.crossBuild }}
    monoCrossAOTTargetOS: ${{ parameters.monoCrossAOTTargetOS }}
    condition: ${{ parameters.condition }}
    dependOnEvaluatePaths: ${{ parameters.dependOnEvaluatePaths }}

    # Compute job name from template parameters
    name: ${{ format('mono_{0}_product_build_{1}{2}_{3}_{4}', parameters.runtimeVariant, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
    displayName: ${{ format('Mono {0} Product Build {1}{2} {3} {4}', parameters.runtimeVariant, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}

    # Run all steps in the container.
    # Note that the containers are defined in platform-matrix.yml
    container: ${{ parameters.container }}

    dependsOn: ${{ parameters.dependsOn }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}

    gatherAssetManifests: true
    variables:
    - name: osGroup
      value: ${{ parameters.osGroup }}
    - name: osSubgroup
      value: ${{ parameters.osSubgroup }}
    - name: officialBuildIdArg
      value: ''
    - name: osOverride
      value: ''
    - name: aotCrossParameter
      value: ''
    - name: llvmParameter
      value: ''
    - name: darwinFrameworks
      value: ''
    - ${{ if eq(parameters.isOfficialBuild, true) }}:
      - name: officialBuildIdArg
        value: '/p:OfficialBuildId=$(Build.BuildNumber)'
    - ${{ if and(eq(parameters.osSubgroup, '_musl'), eq(parameters.osGroup, 'linux')) }}:
      # Set output RID manually: musl isn't properly detected. Make sure to also convert linux to
      # lowercase for RID format. (Detection normally converts, but we're preventing it.)
      - name: OutputRidArg
        value: /p:OutputRID=linux-musl-${{ parameters.archType }}
      - name: _PortableBuild
        value: true
    - ${{ if eq(parameters.osGroup, 'tvos') }}:
      - name: osOverride
        value: -os tvos
      - name: darwinFrameworks
        value: /p:BuildDarwinFrameworks=true
    - ${{ if eq(parameters.osGroup, 'tvossimulator') }}:
      - name: osOverride
        value: -os tvossimulator
      - name: darwinFrameworks
        value: /p:BuildDarwinFrameworks=true
    - ${{ if eq(parameters.osGroup, 'ios') }}:
      - name: osOverride
        value: -os ios
      - name: darwinFrameworks
        value: /p:BuildDarwinFrameworks=true
    - ${{ if eq(parameters.osGroup, 'iossimulator') }}:
      - name: osOverride
        value: -os iossimulator
      - name: darwinFrameworks
        value: /p:BuildDarwinFrameworks=true
    - ${{ if eq(parameters.osGroup, 'android') }}:
      - name: osOverride
        value: -os android
    - ${{ if eq(parameters.osGroup, 'browser') }}:
      - name: archType
        value: wasm
      - name: osOverride
        value: '-os browser'
    - ${{ if eq(parameters.osGroup, 'wasi') }}:
      - name: archType
        value: wasm
      - name: osOverride
        value: '-os wasi'
    - ${{ if eq(parameters.runtimeVariant, 'llvmjit') }}:
      - name: llvmParameter
        value: /p:MonoEnableLLVM=true /p:MonoBundleLLVMOptimizer=false
    - ${{ if eq(parameters.runtimeVariant, 'llvmaot') }}:
      - name: llvmParameter
        value: /p:MonoEnableLLVM=true /p:MonoBundleLLVMOptimizer=true
    - ${{ if gt(length(parameters.monoCrossAOTTargetOS),0) }}:
      - name: aotCrossParameter
        value: /p:MonoCrossAOTTargetOS=${{join('+',parameters.monoCrossAOTTargetOS)}} /p:SkipMonoCrossJitConfigure=true /p:BuildMonoAOTCrossCompilerOnly=true
    - ${{ parameters.variables }}

    steps:

    # Install native dependencies
    # Linux builds use docker images with dependencies preinstalled,
    # and FreeBSD builds use a build agent with dependencies
    # preinstalled, so we only need this step for OSX and Windows.
    - ${{ if in(parameters.osGroup, 'osx', 'maccatalyst', 'ios', 'iossimulator', 'tvos', 'tvossimulator') }}:
      - script: $(Build.SourcesDirectory)/eng/install-native-dependencies.sh $(osGroup)
        displayName: Install native dependencies

    - ${{ each monoCrossAOTTargetOS in parameters.monoCrossAOTTargetOS }}:
      - task: DownloadPipelineArtifact@2
        displayName: Download ${{monoCrossAOTTargetOS}} AOT offset files
        inputs:
          artifact: Mono_Offsets_${{monoCrossAOTTargetOS}}
          path: '$(Build.SourcesDirectory)/artifacts/obj/mono/offsetfiles'

    - ${{ if in(parameters.osGroup, 'osx', 'ios', 'tvos') }}:
      - script: |
          du -sh $(Build.SourcesDirectory)/*
          df -h
        displayName: Disk Usage before Build

    # Build
    - ${{ if ne(parameters.osGroup, 'windows') }}:
      - script: ./build$(scriptExt) -subset mono+clr.hosts $(crossArg) -c $(buildConfig) -arch $(archType) $(osOverride) -ci $(officialBuildIdArg) $(aotCrossParameter) $(llvmParameter) $(darwinFrameworks)
        displayName: Build product
    - ${{ if eq(parameters.osGroup, 'windows') }}:
      - script: build$(scriptExt) -subset mono+clr.hosts -c $(buildConfig) -arch $(archType) $(osOverride) -ci $(officialBuildIdArg) $(aotCrossParameter) $(llvmParameter)
        displayName: Build product

    - ${{ if in(parameters.osGroup, 'osx', 'ios', 'tvos') }}:
      - script: |
          du -sh $(Build.SourcesDirectory)/*
          df -h
        displayName: Disk Usage after Build

    # Publish product output directory for consumption by tests.
    - template: /eng/pipelines/common/upload-artifact-step.yml
      parameters:
        rootFolder: $(buildProductRootFolderPath)
        includeRootFolder: false
        archiveType: $(archiveType)
        tarCompression: $(tarCompression)
        archiveExtension: $(archiveExtension)
        artifactName: $(buildProductArtifactName)
        displayName: 'product build'

    # Build packages
    - ${{ if ne(parameters.osGroup, 'windows') }}:
      - script: ./build$(scriptExt) -subset mono+clr.hosts $(crossArg) -c $(buildConfig) -arch $(archType) $(osOverride) -ci $(officialBuildIdArg) $(aotCrossParameter) $(llvmParameter) -pack $(OutputRidArg)
        displayName: Build nupkg
    - ${{ if eq(parameters.osGroup, 'windows') }}:
      - script: build$(scriptExt) -subset mono+clr.hosts -c $(buildConfig) -arch $(archType) $(osOverride) -ci $(officialBuildIdArg) $(aotCrossParameter) $(llvmParameter) -pack $(OutputRidArg)
        displayName: Build nupkg

    # Publish official build
    - ${{ if eq(parameters.publishToBlobFeed, 'true') }}:
      - ${{ if ne(parameters.osGroup, 'windows') }}:
        - script: $(Build.SourcesDirectory)/eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) /p:DotNetPublishUsingPipelines=true /p:DotNetPublishToBlobFeed=true /p:DotNetPublishBlobFeedUrl=$(dotnetfeedUrl) /p:DotNetPublishBlobFeedKey=$(dotnetfeedPAT) /p:Configuration=$(_BuildConfig) /p:TargetArchitecture=$(archType) /p:TargetOS=$(osGroup) /p:OSIdentifier=$(osGroup)$(osSubgroup) /bl:"$(Build.SourcesDirectory)/artifacts/log/publish-pkgs.binlog" --projects $(Build.SourcesDirectory)/eng/empty.csproj
          displayName: Publish packages to blob feed
          env:
            # TODO: remove NUGET_PACKAGES once https://github.com/dotnet/arcade/issues/1578 is fixed
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            ${{ if eq(parameters.osGroup, 'freebsd') }}:
              # Arcade uses this SDK instead of trying to restore one.
              DotNetCoreSdkDir: /usr/local/dotnet
      - ${{ if eq(parameters.osGroup, 'windows') }}:
        # TODO: pass publish feed url and access token in from the internal pipeline
        - powershell: eng\common\build.ps1 -ci -restore -publish -configuration $(_BuildConfig) /p:DotNetPublishUsingPipelines=true /p:DotNetPublishToBlobFeed=true /p:DotNetPublishBlobFeedUrl=$(dotnetfeedUrl) /p:DotNetPublishBlobFeedKey=$(dotnetfeedPAT) /p:Configuration=$(_BuildConfig) /p:TargetArchitecture=$(archType) /p:TargetOS=$(osGroup) /p:OSIdentifier=$(osGroup)$(osSubgroup) /bl:"$(Build.SourcesDirectory)\artifacts\log\publish-pkgs.binlog" -projects $(Build.SourcesDirectory)\eng\empty.csproj
          displayName: Publish packages to blob feed
          env:
            # TODO: remove NUGET_PACKAGES once https://github.com/dotnet/arcade/issues/1578 is fixed
            NUGET_PACKAGES: $(Build.SourcesDirectory)\.packages

    # Publish Logs
    - task: PublishPipelineArtifact@1
      displayName: Publish Logs
      inputs:
        targetPath: $(Build.SourcesDirectory)/artifacts/log
        artifactName: 'BuildLogs_Mono_${{ parameters.runtimeVariant }}_$(osGroup)$(osSubgroup)_$(archType)_$(buildConfig)'
      continueOnError: true
      condition: always()
