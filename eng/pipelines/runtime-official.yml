trigger:
  batch: true
  branches:
    include:
    - main
    - release/*
    - internal/release/*
  paths:
    include:
    - '*'
    exclude:
    - '**.md'
    - .devcontainer/*
    - .github/*
    - docs/*
    - LICENSE.TXT
    - PATENTS.TXT
    - THIRD-PARTY-NOTICES.TXT

# This is an official pipeline that should not be triggerable from a PR,
# there is no public pipeline associated with it.
pr: none

variables:
- template: /eng/pipelines/common/variables.yml
  parameters:
    templatePath: 'templates-official'
- template: /eng/pipelines/common/internal-variables.yml
  parameters:
    teamName: dotnet-core-acquisition

extends:
  template:  /eng/pipelines/official/pipeline.yml
  parameters:
    otherStages:
    - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
      - stage: Localization
        jobs:
        #
        # Localization build
        #
        - template: /eng/common/templates-official/job/onelocbuild.yml
          parameters:
            MirrorRepo: runtime
            MirrorBranch: main
            LclSource: lclFilesfromPackage
            LclPackageId: 'LCL-JUNO-PROD-RUNTIME'
      - stage: Source_Index
        displayName: Source Index
        jobs:
        #
        # Source Index Build
        #
          - template: /eng/common/templates-official/job/source-index-stage1.yml
            parameters:
              sourceIndexBuildCommand: build.cmd -subset libs.sfx+libs.oob -binarylog -os linux -ci /p:SkipLibrariesNativeRuntimePackages=true
    buildStage:
      stage: Build
      jobs:
      #
      # Build CoreCLR runtime packs
      # Windows x64/arm64
      # Sign diagnostic files after native build
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: release
          platforms:
          - windows_x64
          - windows_x86
          - windows_arm64
          variables:
            - name: _SignDiagnosticFilesArgs
              value: ''
            - name: _EnableDefaultArtifactsArg
              value: $[iif(and(eq(variables.osGroup, 'windows'), eq(variables.archType, 'x64')),'/p:EnableDefaultRidSpecificArtifacts=false','')]
          jobParameters:
            templatePath: 'templates-official'
            preBuildSteps:
            - template: /eng/pipelines/coreclr/templates/install-diagnostic-certs.yml
              parameters:
                isOfficialBuild: true
                certNames:
                - 'dotnetesrp-diagnostics-aad-ssl-cert'
                - 'dotnet-diagnostics-esrp-pki-onecert'
                vaultName: 'clrdiag-esrp-id'
                azureSubscription: 'diagnostics-esrp-kvcertuser'

            buildArgs: -c $(_BuildConfig) -restore -build -publish /p:DotNetBuildAllRuntimePacks=true $(_SignDiagnosticFilesArgs) $(_EnableDefaultArtifactsArg)
            nameSuffix: AllRuntimes
            isOfficialBuild: true
            timeoutInMinutes: 120
            postBuildSteps:
            - template: /eng/pipelines/coreclr/templates/remove-diagnostic-certs.yml
              parameters:
                isOfficialBuild: true

      #
      # Build all runtime packs
      # Mac x64/arm64
      # Sign and entitle createdump and corerun after native build.
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: release
          platforms:
          - osx_arm64
          - osx_x64
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -s clr.corelib+clr.nativecorelib+clr.nativeaotlibs+clr.tools+clr.packages+mono+libs+host.tools+host.pkg+packs -restore -build -publish -c $(_BuildConfig) /p:DotNetBuildAllRuntimePacks=true
            nameSuffix: AllRuntimes
            isOfficialBuild: ${{ variables.isOfficialBuild }}
            timeoutInMinutes: 120
            preBuildSteps:
              # Build our native assets first so we can sign them.
              - template: /eng/pipelines/common/templates/global-build-step.yml
                parameters:
                  buildArgs: -s clr.runtime+clr.alljits+clr.nativeaotruntime+host.native -c $(_BuildConfig) /bl:$(Build.SourcesDirectory)/artifacts/logs/$(_BuildConfig)/CoreClrNativeBuild.binlog
                  displayName: Build native CoreCLR and host components
              - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
                - template: /eng/pipelines/common/macos-sign-with-entitlements.yml
                  parameters:
                    filesToSign:
                    - name: createdump
                      path: $(Build.SourcesDirectory)/artifacts/bin/coreclr/$(osGroup).$(archType).$(_BuildConfig)
                    - name: corerun
                      path: $(Build.SourcesDirectory)/artifacts/bin/coreclr/$(osGroup).$(archType).$(_BuildConfig)
                    - name: dotnet
                      path: $(Build.SourcesDirectory)/artifacts/bin/$(osGroup)-$(archType).$(_BuildConfig)/corehost
                    - name: apphost
                      path: $(Build.SourcesDirectory)/artifacts/bin/$(osGroup)-$(archType).$(_BuildConfig)/corehost

                - task: CopyFiles@2
                  displayName: 'Copy signed createdump to sharedFramework'
                  inputs:
                    contents: createdump
                    sourceFolder: $(Build.SourcesDirectory)/artifacts/bin/coreclr/$(osGroup).$(archType).$(_BuildConfig)
                    targetFolder: $(Build.SourcesDirectory)/artifacts/bin/coreclr/$(osGroup).$(archType).$(_BuildConfig)/sharedFramework
                    overWrite: true

      #
      # Build all runtime packs for Linux, Linux musl, and mobile
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: release
          platforms:
          - linux_x64
          - linux_arm
          - linux_arm64
          - linux_musl_x64
          - linux_musl_arm
          - linux_musl_arm64
          - android_x64
          - android_x86
          - android_arm
          - android_arm64
          - maccatalyst_x64
          - maccatalyst_arm64
          - tvossimulator_x64
          - tvossimulator_arm64
          - tvos_arm64
          - iossimulator_x64
          - iossimulator_arm64
          - ios_arm64
          - linux_bionic_x64
          - linux_bionic_arm
          - linux_bionic_arm64
          - browser_wasm
          - wasi_wasm
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -c $(_BuildConfig) -restore -build -publish /p:DotNetBuildAllRuntimePacks=true
            nameSuffix: AllRuntimes
            isOfficialBuild: true
            timeoutInMinutes: 120

      #
      # Build and Pack CrossDac
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: release
          platforms:
          - windows_x64
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -s crossdacpack -restore -build -publish -c $(_BuildConfig) /p:EnableDefaultRidSpecificArtifacts=false /p:CrossRuntimeExtractionRoot=$(CrossRuntimeExtractionRoot) $(_SignDiagnosticFilesArgs)
            nameSuffix: CrossDac
            isOfficialBuild: true
            timeoutInMinutes: 120
            templateContext:
              inputs:
              - input: pipelineArtifact
                artifactName: Build_linux_x64_release_AllRuntimes_Artifacts
                targetPath: $(Build.ArtifactStagingDirectory)/artifacts/RuntimeDownload
                itemPattern: |
                  packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-x64.*.nupkg
                  !packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-x64.*.symbols.nupkg
              - input: pipelineArtifact
                artifactName: Build_linux_arm64_release_AllRuntimes_Artifacts
                targetPath: $(Build.ArtifactStagingDirectory)/artifacts/RuntimeDownload
                itemPattern: |
                  packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-arm64.*.nupkg
                  !packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-arm64.*.symbols.nupkg
              - input: pipelineArtifact
                artifactName: Build_linux_musl_x64_release_AllRuntimes_Artifacts
                targetPath: $(Build.ArtifactStagingDirectory)/artifacts/RuntimeDownload
                itemPattern: |
                  packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-musl-x64.*.nupkg
                  !packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-musl-x64.*.symbols.nupkg
              - input: pipelineArtifact
                artifactName: Build_linux_musl_arm64_release_AllRuntimes_Artifacts
                targetPath: $(Build.ArtifactStagingDirectory)/artifacts/RuntimeDownload
                itemPattern: |
                  packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-musl-arm64.*.nupkg
                  !packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-musl-arm64.*.symbols.nupkg
              - input: pipelineArtifact
                artifactName: Build_linux_arm_release_AllRuntimes_Artifacts
                targetPath: $(Build.ArtifactStagingDirectory)/artifacts/RuntimeDownload
                itemPattern: |
                  packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-arm.*.nupkg
                  !packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-arm.*.symbols.nupkg
              - input: pipelineArtifact
                artifactName: Build_linux_musl_arm_release_AllRuntimes_Artifacts
                targetPath: $(Build.ArtifactStagingDirectory)/artifacts/RuntimeDownload
                itemPattern: |
                  packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-musl-arm.*.nupkg
                  !packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-musl-arm.*.symbols.nupkg
            preBuildSteps:
            - powershell: $(Build.SourcesDirectory)/eng/extract-for-crossdac.ps1 -DownloadDirectory $(Build.ArtifactStagingDirectory)/artifacts/RuntimeDownload -ExtractDirectory $(CrossRuntimeExtractionRoot)
              displayName: Extract runtime packs
            - template: /eng/pipelines/coreclr/templates/install-diagnostic-certs.yml
              parameters:
                isOfficialBuild: true
                certNames:
                - 'dotnetesrp-diagnostics-aad-ssl-cert'
                - 'dotnet-diagnostics-esrp-pki-onecert'
                vaultName: 'clrdiag-esrp-id'
                azureSubscription: 'diagnostics-esrp-kvcertuser'
            postBuildSteps:
            - template: /eng/pipelines/coreclr/templates/remove-diagnostic-certs.yml
              parameters:
                isOfficialBuild: true
            dependsOn:
            - build_linux_x64_release_AllRuntimes
            - build_linux_arm_release_AllRuntimes
            - build_linux_arm64_release_AllRuntimes
            - build_linux_musl_x64_release_AllRuntimes
            - build_linux_musl_arm_release_AllRuntimes
            - build_linux_musl_arm64_release_AllRuntimes
          variables:
          - name: CrossRuntimeExtractionRoot
            value: $(Build.SourcesDirectory)/artifacts/CrossDac
          - name: _SignDiagnosticFilesArgs
            value: ''

      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: release
          runtimeFlavor: mono
          platforms:
          - browser_wasm
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -c $(_BuildConfig) -restore -build -publish /p:DotNetBuildAllRuntimePacks=true /p:WasmEnableThreads=true
            nameSuffix: Mono_multithread
            isOfficialBuild: true
            runtimeVariant: multithread

      #
      # Build Mono LLVM runtime packs
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          platforms:
          - osx_x64
          - linux_x64
          - linux_arm64
          buildConfig: release
          runtimeFlavor: mono
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -s mono+libs+host+packs -c $(_BuildConfig) -restore -build -publish
                        /p:MonoEnableLLVM=true /p:MonoAOTEnableLLVM=true /p:MonoBundleLLVMOptimizer=true
            nameSuffix: Mono_LLVMAOT
            runtimeVariant: LLVMAOT
            isOfficialBuild: true

      #
      # Build libraries (all TFMs) and packages
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: Release
          platforms:
          - windows_x64
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -s tools.illink+libs -restore -build -pack -publish -c $(_BuildConfig) /p:TestAssemblies=false /p:TestPackages=true /p:EnableDefaultRidSpecificArtifacts=false
            nameSuffix: Libraries_WithPackages
            isOfficialBuild: true
            timeoutInMinutes: 95
      #
      # Build SourceBuild packages
      #
      - template: /eng/common/templates-official/jobs/source-build.yml
        parameters:
          platforms:
          - name: Linux_x64
            targetRID: linux-x64
            container: SourceBuild_linux_x64

      #
      # Build PGO Instrumented CoreCLR Release
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: Release
          helixQueueGroup: ci
          platforms:
          - windows_x64
          - windows_x86
          - linux_x64
          - windows_arm64
          - linux_arm64
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -s clr.native+clr.corelib+clr.tools+clr.nativecorelib+libs+host+packs -c $(_BuildConfig) -restore -build -publish -pgoinstrument /p:SkipLibrariesNativeRuntimePackages=true
            isOfficialBuild: true
            nameSuffix: PGO
            timeoutInMinutes: 95

      #
      # Build Workloads
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: release
          platforms:
          - windows_x64
          jobParameters:
            templatePath: 'templates-official'
            nameSuffix: Workloads
            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: Build_windows_x64_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.android-*.nupkg
                    **/Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.browser-wasm*.nupkg
                    **/Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.wasi-wasm*.nupkg
                    **/Microsoft.NETCore.App.Runtime.win-x64*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_windows_arm64_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.AOT.win-arm64.Cross.android-*.nupkg
                    **/Microsoft.NETCore.App.Runtime.AOT.win-arm64.Cross.browser-wasm*.nupkg
                    **/Microsoft.NETCore.App.Runtime.AOT.win-arm64.Cross.wasi-wasm*.nupkg
                    **/Microsoft.NETCore.App.Runtime.win-arm64*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_windows_x86_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.win-x86*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_android_x64_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.android-*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_android_x86_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.android-*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_android_arm_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.android-*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_android_arm64_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.android-*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_browser_wasm_Linux_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NET.Runtime.MonoAOTCompiler.Task*.nupkg
                    **/Microsoft.NETCore.App.Runtime.Mono.browser-wasm*.nupkg
                    **/Microsoft.NET.Workload.Mono.ToolChain.Current.Manifest*.nupkg
                    **/Microsoft.NET.Workload.Mono.ToolChain.net6.Manifest*.nupkg
                    **/Microsoft.NET.Workload.Mono.ToolChain.net7.Manifest*.nupkg
                    **/Microsoft.NET.Workload.Mono.ToolChain.net8.Manifest*.nupkg
                    **/Microsoft.NET.Workload.Mono.ToolChain.net9.Manifest*.nupkg
                    **/Microsoft.NET.Runtime.MonoTargets.Sdk*.nupkg
                    **/Microsoft.NET.Runtime.WebAssembly.Sdk*.nupkg
                    **/Microsoft.NET.Runtime.WebAssembly.Templates*.nupkg
                    **/Microsoft.NET.Sdk.WebAssembly.Pack*.nupkg
                - input: pipelineArtifact
                  artifactName: build_browser_wasm_linux_release_Mono_multithread_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.multithread.browser-wasm*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_wasi_wasm_Linux_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NET.Runtime.WebAssembly.Wasi*.nupkg
                    **/Microsoft.NETCore.App.Runtime.Mono.wasi-wasm*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_ios_arm64_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.ios-*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_iossimulator_x64_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.iossimulator-*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_iossimulator_arm64_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.iossimulator-*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_maccatalyst_x64_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.maccatalyst-*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_maccatalyst_arm64_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.maccatalyst-*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_tvos_arm64_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.tvos-*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_tvossimulator_x64_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.tvossimulator-*.nupkg
                - input: pipelineArtifact
                  artifactName: Build_tvossimulator_arm64_release_AllRuntimes_Artifacts
                  targetPath: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                  itemPattern: |
                    **/Microsoft.NETCore.App.Runtime.Mono.tvossimulator-*.nupkg

            preBuildSteps:
            - task: CopyFiles@2
              displayName: Flatten packages
              inputs:
                sourceFolder: $(Build.ArtifactStagingDirectory)/artifacts/workloadPackages
                contents: 'packages/Release/Shipping/*.nupkg'
                cleanTargetFolder: true
                targetFolder: $(Build.SourcesDirectory)/artifacts/workloadPackages
                flattenFolders: true

            buildArgs: -s mono.workloads -c $(_BuildConfig) -restore -build -publish /p:PackageSource=$(Build.SourcesDirectory)/artifacts/workloadPackages /p:WorkloadOutputPath=$(Build.SourcesDirectory)/artifacts/workloads /p:ShouldGenerateProductVersionFiles=true /p:EnableDefaultRidSpecificArtifacts=false

            isOfficialBuild: true
            timeoutInMinutes: 120
            dependsOn:
            - Build_android_arm_release_AllRuntimes
            - Build_android_arm64_release_AllRuntimes
            - Build_android_x86_release_AllRuntimes
            - Build_android_x64_release_AllRuntimes
            - Build_browser_wasm_Linux_release_AllRuntimes
            - Build_wasi_wasm_linux_release_AllRuntimes
            - Build_ios_arm64_release_AllRuntimes
            - Build_iossimulator_x64_release_AllRuntimes
            - Build_iossimulator_arm64_release_AllRuntimes
            - Build_maccatalyst_arm64_release_AllRuntimes
            - Build_maccatalyst_x64_release_AllRuntimes
            - Build_tvos_arm64_release_AllRuntimes
            - Build_tvossimulator_arm64_release_AllRuntimes
            - Build_tvossimulator_x64_release_AllRuntimes
            - Build_windows_x64_release_AllRuntimes
            - Build_windows_x86_release_AllRuntimes
            - Build_windows_arm64_release_AllRuntimes
            - build_browser_wasm_linux_release_Mono_multithread
