trigger:
  batch: true
  branches:
    include:
    - main
    - release/*
    - internal/release/*
  paths:
    include:
    - '*'
    exclude:
    - '**.md'
    - .devcontainer/*
    - .github/*
    - docs/*
    - LICENSE.TXT
    - PATENTS.TXT
    - THIRD-PARTY-NOTICES.TXT

# This is an official pipeline that should not be triggerable from a PR,
# there is no public pipeline associated with it.
pr: none

variables:
- template: /eng/pipelines/common/variables.yml
  parameters:
    templatePath: 'templates-official'
- template: /eng/pipelines/common/internal-variables.yml
  parameters:
    teamName: dotnet-core-acquisition

extends:
  template:  /eng/pipelines/common/templates/pipeline-with-resources.yml
  parameters:
    isOfficialBuild: true
    stages:
    - stage: Build
      jobs:

      #
      # Localization build
      #
      - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
        - template: /eng/common/templates-official/job/onelocbuild.yml
          parameters:
            MirrorRepo: runtime
            MirrorBranch: main
            LclSource: lclFilesfromPackage
            LclPackageId: 'LCL-JUNO-PROD-RUNTIME'

      #
      # Source Index Build
      #
      - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
        - template: /eng/common/templates-official/job/source-index-stage1.yml
          parameters:
            sourceIndexBuildCommand: build.cmd -subset libs.sfx+libs.oob -binarylog -os linux -ci /p:SkipLibrariesNativeRuntimePackages=true

      #
      # Build CoreCLR runtime packs
      # Windows x64/arm64
      # Sign diagnostic files after native build
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: release
          platforms:
          - windows_x64
          - windows_x86
          - windows_arm64
          variables:
            - name: _SignDiagnosticFilesArgs
              value: ''
            - name: _EnableDefaultArtifactsArg
              value: $[iif(and(eq(variables.osGroup, 'windows'), eq(variables.archType, 'x64')),'/p:EnableDefaultArtifacts=true','')]
          jobParameters:
            templatePath: 'templates-official'
            preBuildSteps:
            - template: /eng/pipelines/coreclr/templates/install-diagnostic-certs.yml
              parameters:
                isOfficialBuild: ${{ variables.isOfficialBuild }}
                certNames:
                - 'dotnetesrp-diagnostics-aad-ssl-cert'
                - 'dotnet-diagnostics-esrp-pki-onecert'
                vaultName: 'clrdiag-esrp-id'
                azureSubscription: 'diagnostics-esrp-kvcertuser'

            buildArgs: -c $(_BuildConfig) -restore -build -sign -publish /p:DotNetBuildAllRuntimePacks=true $(_SignDiagnosticFilesArgs) $(_EnableDefaultArtifactsArg)
            nameSuffix: AllRuntimes
            isOfficialBuild: ${{ variables.isOfficialBuild }}
            timeoutInMinutes: 120
            postBuildSteps:
            - template: /eng/pipelines/coreclr/templates/remove-diagnostic-certs.yml
              parameters:
                isOfficialBuild: ${{ variables.isOfficialBuild }}

      #
      # Build all runtime packs for MacOS, Linux, Linux musl, and mobile
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: release
          platforms:
          - linux_x64
          - linux_arm
          - linux_arm64
          - linux_musl_x64
          - linux_musl_arm
          - linux_musl_arm64
          - osx_arm64
          - osx_x64
          - android_x64
          - android_x86
          - android_arm
          - android_arm64
          - maccatalyst_x64
          - maccatalyst_arm64
          - tvossimulator_x64
          - tvossimulator_arm64
          - tvos_arm64
          - iossimulator_x64
          - iossimulator_arm64
          - ios_arm64
          - linux_bionic_x64
          - linux_bionic_arm
          - linux_bionic_arm64
          - browser_wasm
          - wasi_wasm
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -c $(_BuildConfig) -restore -build -sign -publish /p:DotNetBuildAllRuntimePacks=true
            nameSuffix: AllRuntimes
            isOfficialBuild: ${{ variables.isOfficialBuild }}
            timeoutInMinutes: 120

      #
      # Build and Pack CrossDac
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: release
          platforms:
          - windows_x64
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -s crossdacpack -c $(_BuildConfig) /p:CrossRuntimeExtractionRoot=$(CrossRuntimeExtractionRoot) $(_SignDiagnosticFilesArgs)
            nameSuffix: CrossDac
            isOfficialBuild: ${{ variables.isOfficialBuild }}
            timeoutInMinutes: 120
            preBuildSteps:
            - task: DownloadPipelineArtifact@2
              displayName: Download runtime packs for CrossDac
              inputs:
                artifact: 'PackageArtifacts'
                path: $(Build.SourcesDirectory)/artifacts/RuntimeDownload
                patterns: |
                  PackageArtifacts/linux_*/Shipping/Microsoft.NETCore.App.Runtime.linux-*.nupkg
            - powershell: $(Build.SourcesDirectory)/eng/extract-for-crossdac.ps1 -DownloadDirectory $(Build.SourcesDirectory)/artifacts/RuntimeDownload -ExtractDirectory $(CrossRuntimeExtractionRoot)
              displayName: Extract runtime packs
            - template: /eng/pipelines/coreclr/templates/install-diagnostic-certs.yml
              parameters:
                isOfficialBuild: ${{ variables.isOfficialBuild }}
                certNames:
                - 'dotnetesrp-diagnostics-aad-ssl-cert'
                - 'dotnet-diagnostics-esrp-pki-onecert'
                vaultName: 'clrdiag-esrp-id'
                azureSubscription: 'diagnostics-esrp-kvcertuser'
            postBuildSteps:
            - template: /eng/pipelines/coreclr/templates/remove-diagnostic-certs.yml
              parameters:
                isOfficialBuild: ${{ variables.isOfficialBuild }}
            dependsOn:
            - build_linux_x64_release_AllRuntimes
            - build_linux_arm_release_AllRuntimes
            - build_linux_arm64_release_AllRuntimes
            - build_linux_musl_x64_release_AllRuntimes
            - build_linux_musl_arm_release_AllRuntimes
            - build_linux_musl_arm64_release_AllRuntimes
          variables:
          - name: CrossRuntimeExtractionRoot
            value: $(Build.SourcesDirectory)/artifacts/CrossDac
          - name: _SignDiagnosticFilesArgs
            value: ''

      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: release
          runtimeFlavor: mono
          platforms:
          - browser_wasm
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -c $(_BuildConfig) -restore -build -sign -publish /p:DotNetBuildAllRuntimePacks=true /p:WasmEnableThreads=true
            nameSuffix: Mono_multithread
            isOfficialBuild: ${{ variables.isOfficialBuild }}
            runtimeVariant: multithread

      #
      # Build Mono LLVM runtime packs
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          platforms:
          - osx_x64
          - linux_x64
          - linux_arm64
          buildConfig: release
          runtimeFlavor: mono
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -s mono+libs+host+packs -c $(_BuildConfig) -restore -build -sign -publish
                        /p:MonoEnableLLVM=true /p:MonoAOTEnableLLVM=true /p:MonoBundleLLVMOptimizer=true
            nameSuffix: Mono_LLVMAOT
            runtimeVariant: LLVMAOT
            isOfficialBuild: ${{ variables.isOfficialBuild }}

      #
      # Build libraries (all TFMs) and packages
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: Release
          platforms:
          - windows_x64
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -s tools+libs -restore -build -pack -sign -publish -c $(_BuildConfig) /p:TestAssemblies=false /p:TestPackages=true /p:EnableDefaultArtifacts=true
            nameSuffix: Libraries_WithPackages
            isOfficialBuild: ${{ variables.isOfficialBuild }}
            timeoutInMinutes: 95
      #
      # Build SourceBuild packages
      #
      - template: /eng/common/templates-official/jobs/source-build.yml
        parameters:
          platforms:
          - name: Linux_x64
            targetRID: linux-x64
            container: SourceBuild_linux_x64

      #
      # Build PGO Instrumented CoreCLR Release
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: Release
          helixQueueGroup: ci
          platforms:
          - windows_x64
          - windows_x86
          - linux_x64
          - windows_arm64
          - linux_arm64
          jobParameters:
            templatePath: 'templates-official'
            buildArgs: -s clr.native+clr.corelib+clr.tools+clr.nativecorelib+libs+host+packs -c $(_BuildConfig) -restore -build -sign -publish -pgoinstrument /p:SkipLibrariesNativeRuntimePackages=true
            isOfficialBuild: ${{ variables.isOfficialBuild }}
            nameSuffix: PGO
            timeoutInMinutes: 95

      #
      # Build Workloads
      #
      - template: /eng/pipelines/common/platform-matrix.yml
        parameters:
          jobTemplate: /eng/pipelines/common/global-build-job.yml
          buildConfig: release
          platforms:
          - windows_x64
          jobParameters:
            templatePath: 'templates-official'
            nameSuffix: Workloads
            preBuildSteps:
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'PackageArtifacts'
                path: $(Build.SourcesDirectory)/artifacts/workloadPackages
                patterns: |
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.android-*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.AOT.win-arm64.Cross.android-*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.browser-wasm*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.AOT.win-arm64.Cross.browser-wasm*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.wasi-wasm*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.AOT.win-arm64.Cross.wasi-wasm*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.Mono.android-*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.Mono.browser-wasm*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.Mono.multithread.browser-wasm*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.Mono.ios-*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.Mono.iossimulator-*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.Mono.maccatalyst-*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.Mono.multithread.browser-wasm*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.Mono.tvos-*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.Mono.tvossimulator-*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.Mono.wasi-wasm*.nupkg
                  PackageArtifacts/Microsoft.NET.Workload.Mono.ToolChain.Current.Manifest*.nupkg
                  PackageArtifacts/Microsoft.NET.Workload.Mono.ToolChain.net6.Manifest*.nupkg
                  PackageArtifacts/Microsoft.NET.Workload.Mono.ToolChain.net7.Manifest*.nupkg
                  PackageArtifacts/Microsoft.NET.Workload.Mono.ToolChain.net8.Manifest*.nupkg
                  PackageArtifacts/Microsoft.NET.Workload.Mono.ToolChain.net9.Manifest*.nupkg
                  PackageArtifacts/Microsoft.NET.Runtime.MonoTargets.Sdk*.nupkg
                  PackageArtifacts/Microsoft.NET.Runtime.MonoAOTCompiler.Task*.nupkg
                  PackageArtifacts/Microsoft.NET.Runtime.WebAssembly.Sdk*.nupkg
                  PackageArtifacts/Microsoft.NET.Runtime.WebAssembly.Wasi*.nupkg
                  PackageArtifacts/Microsoft.NET.Runtime.WebAssembly.Templates*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.win-arm64*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.win-x64*.nupkg
                  PackageArtifacts/Microsoft.NETCore.App.Runtime.win-x86*.nupkg
                  PackageArtifacts/Microsoft.NET.Sdk.WebAssembly.Pack*.nupkg

            buildArgs: -s mono.workloads -c $(_BuildConfig) -restore -build -sign -publish /p:PackageSource=$(Build.SourcesDirectory)/artifacts/workloadPackages /p:WorkloadOutputPath=$(Build.SourcesDirectory)/artifacts/workloads /p:ShouldGenerateProductVersionFiles=true /p:EnableDefaultArtifacts=true

            isOfficialBuild: ${{ variables.isOfficialBuild }}
            timeoutInMinutes: 120
            dependsOn:
            - Build_android_arm_release_AllRuntimes
            - Build_android_arm64_release_AllRuntimes
            - Build_android_x86_release_AllRuntimes
            - Build_android_x64_release_AllRuntimes
            - Build_browser_wasm_Linux_release_Mono
            - Build_wasi_wasm_linux_release_Mono
            - Build_ios_arm64_release_AllRuntimes
            - Build_iossimulator_x64_release_AllRuntimes
            - Build_iossimulator_arm64_release_AllRuntimes
            - Build_maccatalyst_arm64_release_AllRuntimes
            - Build_maccatalyst_x64_release_AllRuntimes
            - Build_tvos_arm64_release_AllRuntimes
            - Build_tvossimulator_arm64_release_AllRuntimes
            - Build_tvossimulator_x64_release_AllRuntimes
            - Build_windows_x64_release_AllRuntimes
            - Build_windows_x86_release_AllRuntimes
            - Build_windows_arm64_release_AllRuntimes

    - stage: Publish
      jobs:
      - template: /eng/common/templates-official/job/publish-build-assets.yml
        parameters:
          publishUsingPipelines: true
          publishAssetsImmediately: true
          pool:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals 1es-windows-2022
          symbolPublishingAdditionalParameters: '/p:PublishSpecialClrFiles=true'
