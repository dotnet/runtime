parameters:
  jobTemplate: ''
  osGroup: ''
  osSubgroup: ''
  archType: ''
  container: ''
  helixQueuesTemplate: ''
  platform: ''
  jobParameters: {}

jobs:
- template: ${{ coalesce(parameters.helixQueuesTemplate, parameters.jobTemplate) }}
  parameters:
    variables:
      - name: _containsCoreClrChange
        value: $[ dependencies.checkout.outputs['SetPathVars_coreclr.containsChange'] ]
      - name: _containsLibrariesChange
        value: $[ dependencies.checkout.outputs['SetPathVars_libraries.containsChange'] ]
      - name: _containsInstallerChange
        value: $[ dependencies.checkout.outputs['SetPathVars_installer.containsChange'] ]

      - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
        - name: archiveExtension
          value: '.zip'
        - name: archiveType
          value: zip
        - name: tarCompression
          value: ''
        - name: scriptExt
          value: '.cmd'
        - name: dir
          value: '\'
        - name: _msbuildCommand
          value: powershell -ExecutionPolicy ByPass -NoProfile eng\common\msbuild.ps1 -warnaserror:0 -ci
        - name: setScriptToEchoAndFailOnNonZero
          value: ''

      - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
        - name: archiveExtension
          value: '.tar.gz'
        - name: archiveType
          value: tar
        - name: tarCompression
          value: gz
        - name: scriptExt
          value: '.sh'
        - name: dir
          value: '/'
        - name: _msbuildCommand
          value: ./eng/common/msbuild.sh --warnaserror false --ci
        # Set the bash script to display each command, and stop if any command exits nonzero.
        - name: setScriptToEchoAndFailOnNonZero
          value: 'set -xe'

      - ${{ if ne(parameters.jobParameters.crossrootfsDir, '') }}:
        # This is only required for cross builds.
        - name: ROOTFS_DIR
          value: ${{ parameters.jobParameters.crossrootfsDir }}

    osGroup: ${{ parameters.osGroup }}
    osSubgroup: ${{ parameters.osSubgroup }}
    archType: ${{ parameters.archType }}
    platform: ${{ parameters.platform }}

    ${{ if ne(parameters.container, '') }}:
      ${{ if eq(parameters.container.registry, 'mcr') }}:
        container: ${{ format('{0}:{1}', 'mcr.microsoft.com/dotnet-buildtools/prereqs', parameters.container.image) }}
      ${{ if ne(parameters.container.registry, 'mcr') }}:
        container: ${{ format('{0}:{1}', parameters.container.registry, parameters.container.image) }}

    ${{ if eq(parameters.jobParameters.pool, '') }}:
      pool:
        # Public Linux Build Pool
        ${{ if and(eq(parameters.osGroup, 'Linux'), eq(variables['System.TeamProject'], 'public')) }}:
          name:  NetCorePublic-Pool
          queue: BuildPool.Ubuntu.1604.Amd64.Open

        # Official Build Linux Pool
        ${{ if and(eq(parameters.osGroup, 'Linux'), ne(variables['System.TeamProject'], 'public')) }}:
          name: NetCoreInternal-Pool
          queue: BuildPool.Ubuntu.1604.Amd64

        # FreeBSD builds only in the internal project
        ${{ if and(eq(parameters.osGroup, 'FreeBSD'), ne(variables['System.TeamProject'], 'public')) }}:
          name: dnceng-freebsd-internal

        # Official Build OSX Pool
        ${{ if and(eq(parameters.osGroup, 'OSX'), ne(variables['System.TeamProject'], 'public')) }}:
          name: Hosted Mac Internal

        # Public OSX Build Pool
        ${{ if and(eq(parameters.osGroup, 'OSX'), eq(variables['System.TeamProject'], 'public')) }}:
          name: Hosted macOS

        # Official Build Windows Pool
        ${{ if and(eq(parameters.osGroup, 'Windows_NT'), ne(variables['System.TeamProject'], 'public')) }}:
          name: NetCoreInternal-Pool
          queue: BuildPool.Windows.10.Amd64.VS2019

        # Public Windows Build Pool
        ${{ if and(eq(parameters.osGroup, 'Windows_NT'), eq(variables['System.TeamProject'], 'public')) }}:
          name: NetCorePublic-Pool
          queue: BuildPool.Windows.10.Amd64.VS2019.Open

    ${{ if eq(parameters.helixQueuesTemplate, '') }}:
      ${{ insert }}: ${{ parameters.jobParameters }}
    ${{ if ne(parameters.helixQueuesTemplate, '') }}:
      jobTemplate: ${{ parameters.jobTemplate }}
      jobParameters: ${{ parameters.jobParameters }}
