parameters:
  buildConfig: ''
  nameSuffix: ''
  buildArgs: ''
  archType: ''
  osGroup: ''
  osSubgroup: ''
  container: ''
  crossBuild: false
  crossrootfsDir: ''
  variables: []
  targetRid: ''
  timeoutInMinutes: ''
  dependsOn: []
  pool: ''
  platform: ''
  condition: true
  useContinueOnErrorDuringBuild: false
  shouldContinueOnError: false
  dependOnEvaluatePaths: false
  isOfficialBuild: false
  runtimeFlavor: 'coreclr'
  helixQueues: ''
  enablePublishTestResults: false
  testResultsFormat: ''
  extraStepsTemplate: ''
  extraStepsParameters: {}
  enableRichCodeNavigation: false
  richCodeNavigationLanguage: 'csharp'
  richCodeNavigationEnvironment: 'production'

jobs:
- template: /eng/common/templates/job/job.yml
  parameters:
    name: ${{ format('build_{0}{1}_{2}_{3}_{4}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig, parameters.nameSuffix) }}
    displayName: ${{ format('Build {0}{1} {2} {3} {4}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig, parameters.nameSuffix) }}
    pool: ${{ parameters.pool }}
    container: ${{ parameters.container }}
    condition: and(succeeded(), ${{ parameters.condition }})
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    enablePublishTestResults: ${{ parameters.enablePublishTestResults }}
    testResultsFormat: ${{ parameters.testResultsFormat }}

    workspace:
      clean: all
    enableRichCodeNavigation: ${{ parameters.enableRichCodeNavigation }}
    richCodeNavigationLanguage: ${{ parameters.richCodeNavigationLanguage }}
    richCodeNavigationEnvironment: ${{ parameters.richCodeNavigationEnvironment }}

    ${{ if and(ne(parameters.dependOnEvaluatePaths, true),ne(parameters.dependsOn,'')) }}:
      dependsOn: ${{ parameters.dependsOn }}

    ${{ if eq(parameters.dependOnEvaluatePaths, true) }}:
      dependsOn: 
      - evaluate_paths
      - ${{ if ne(parameters.dependsOn,'') }}:
        - ${{ parameters.dependsOn }}

    variables:
      - name: _osParameter
        value: -os ${{ parameters.osGroup }}
      
      - ${{ if and(eq(parameters.osGroup, 'Linux'), eq(parameters.osSubGroup, '_musl')) }}:
        - name: _osParameter
          value: /p:RuntimeOS=linux-musl /p:OutputRid=linux-musl-${{ parameters.archType }}

      # Do not rename as it clashes with MSBuild property in libraries/build-native.proj
      - name: _crossBuildPropertyArg
        value: /p:CrossBuild=${{ parameters.crossBuild }}

      - name: _cxx11Parameter
        ${{ if and(eq(parameters.osGroup, 'Linux'), eq(parameters.archType, 'arm64')) }}:
          value: /p:MonoLLVMUseCxx11Abi=true
        ${{ if and(eq(parameters.osGroup, 'Linux'), not(eq(parameters.archType, 'arm64'))) }}:
          value: /p:MonoLLVMUseCxx11Abi=false

      - name: _officialBuildParameter
        ${{ if eq(parameters.isOfficialBuild, true) }}:
          value: /p:OfficialBuildId=$(Build.BuildNumber)
        ${{ if ne(parameters.isOfficialBuild, true) }}:
          value: ''
      
      - name: _richCodeNavigationParam
        ${{ if eq(parameters.enableRichCodeNavigation, true) }}:
          value: /p:EnableRichCodeNavigation=true
        ${{ if ne(parameters.enableRichCodeNavigation, true) }}:
          value: ''

      - ${{ if eq(parameters.osGroup, 'Android') }}:
        - name: ANDROID_OPENSSL_AAR
          value: /tmp/openssl-android

      - ${{ each variable in parameters.variables }}:
        - ${{ variable }}

    steps:
    - checkout: self
      clean: true
      fetchDepth: $(checkoutFetchDepth)

    - ${{ if eq(parameters.isOfficialBuild, true) }}:
      - template: /eng/pipelines/common/restore-internal-tools.yml

    - ${{ each monoCrossAOTTargetOS in parameters.monoCrossAOTTargetOS }}:
      - task: DownloadPipelineArtifact@2
        displayName: Download ${{monoCrossAOTTargetOS}} AOT offset files
        inputs:
          artifact: Mono_Offsets_${{monoCrossAOTTargetOS}}
          path: '$(Build.SourcesDirectory)/artifacts/obj/mono/offsetfiles'

    - ${{ if in(parameters.osGroup, 'OSX', 'iOS', 'tvOS', 'Android') }}:
      - script: $(Build.SourcesDirectory)/eng/install-native-dependencies.sh ${{ parameters.osGroup }} ${{ parameters.archType }} azDO
        displayName: Install Build Dependencies

      - script: |
          du -sh $(Build.SourcesDirectory)/*
          df -h
        displayName: Disk Usage before Build

    # Build
    - script: $(Build.SourcesDirectory)$(dir)build$(scriptExt) -ci -arch ${{ parameters.archType }} $(_osParameter) ${{ parameters.buildArgs }} $(_officialBuildParameter) $(_crossBuildPropertyArg) $(_cxx11Parameter) $(_richCodeNavigationParam)
      displayName: Build product
      ${{ if eq(parameters.useContinueOnErrorDuringBuild, true) }}:
        continueOnError: ${{ parameters.shouldContinueOnError }}

    - ${{ if in(parameters.osGroup, 'OSX', 'iOS', 'tvOS', 'Android') }}:
      - script: |
          du -sh $(Build.SourcesDirectory)/*
          df -h
        displayName: Disk Usage after Build
        condition: always()

      # If intended to send extra steps after regular build add them here.
    - ${{ if ne(parameters.extraStepsTemplate, '') }}:
      - template: ${{ parameters.extraStepsTemplate }}
        parameters:
          osGroup: ${{ parameters.osGroup }}
          osSubgroup: ${{ parameters.osSubgroup }}
          archType: ${{ parameters.archType }}
          buildConfig: ${{ parameters.buildConfig }}
          runtimeFlavor: ${{ parameters.runtimeFlavor }}
          helixQueues: ${{ parameters.helixQueues }}
          targetRid: ${{ parameters.targetRid }}
          nameSuffix: ${{ parameters.nameSuffix }}
          platform: ${{ parameters.platform }}
          shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
          ${{ insert }}: ${{ parameters.extraStepsParameters }}

    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/'
        PublishLocation: Container
        ArtifactName: Logs_Build_${{ parameters.osGroup }}_${{ parameters.osSubGroup }}_${{ parameters.archType }}_${{ parameters.buildConfig }}_${{ parameters.nameSuffix }}
      continueOnError: true
      condition: always()
