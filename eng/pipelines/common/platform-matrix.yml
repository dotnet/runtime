parameters:
  runtimeFlavor: 'coreclr'
  jobTemplate: ''
  buildConfig: ''
  platforms: []
  # platformGroup is a named collection of platforms. Allowed values:
  # 'all' - all platforms
  # 'gcstress' - platforms that support running under GCStress0x3 and GCStress0xC scenarios
  platformGroup: ''
  # helixQueueGroup is a named collection of Helix Queues. If specified, it determines which Helix queues are
  # used, instead of the usual criteria. Allowed values:
  # 'pr' - the queues used for a pull request for the platform. Typically a small set.
  # 'ci' - the queues used for a CI (post-merge) test run.
  # 'all' - the queues used for non-PR, non-CI test runs, e.g., Manual or Scheduled runs. Typically this is all available queues.
  helixQueueGroup: 'pr'
  # helixQueuesTemplate is a yaml template which will be expanded in order to set up the helix queues
  # for the given platform and helixQueueGroup.
  helixQueuesTemplate: ''
  container: ''
  shouldContinueOnError: false
  jobParameters: {}
  variables: []

jobs:

# WASI WebAssembly

- ${{ if containsValue(parameters.platforms, 'wasi_wasm') }}:
  - template: xplat-setup.yml
    parameters:
      jobTemplate: ${{ parameters.jobTemplate }}
      helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      variables: ${{ parameters.variables }}
      osGroup: wasi
      archType: wasm
      targetRid: wasi-wasm
      platform: wasi_wasm
      shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      container: wasi_wasm
      jobParameters:
        hostedOs: linux
        runtimeFlavor: ${{ parameters.runtimeFlavor }}
        stagedBuild: ${{ parameters.stagedBuild }}
        buildConfig: ${{ parameters.buildConfig }}
        ${{ insert }}: ${{ parameters.jobParameters }}

# WASI WebAssembly windows

- ${{ if containsValue(parameters.platforms, 'wasi_wasm_win') }}:
  - template: xplat-setup.yml
    parameters:
      jobTemplate: ${{ parameters.jobTemplate }}
      helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      variables: ${{ parameters.variables }}
      osGroup: wasi
      archType: wasm
      targetRid: wasi-wasm
      platform: wasi_wasm_win
      shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      jobParameters:
        hostedOs: windows
        runtimeFlavor: ${{ parameters.runtimeFlavor }}
        stagedBuild: ${{ parameters.stagedBuild }}
        buildConfig: ${{ parameters.buildConfig }}
        ${{ insert }}: ${{ parameters.jobParameters }}

# Browser WebAssembly

#- ${{ if containsValue(parameters.platforms, 'browser_wasm') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: browser
      #archType: wasm
      #targetRid: browser-wasm
      #platform: browser_wasm
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #container: browser_wasm
      #jobParameters:
        #hostedOs: linux
        #runtimeFlavor: ${{ parameters.runtimeFlavor }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## Browser WebAssembly Linux Firefox

#- ${{ if containsValue(parameters.platforms, 'browser_wasm_firefox') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: browser
      #archType: wasm
      #targetRid: browser-wasm
      #platform: browser_wasm_firefox
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #container: browser_wasm
      #jobParameters:
        #hostedOs: linux
        #runtimeFlavor: ${{ parameters.runtimeFlavor }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## Browser WebAssembly on Windows

#- ${{ if containsValue(parameters.platforms, 'browser_wasm_win') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: browser
      #archType: wasm
      #targetRid: browser-wasm
      #platform: browser_wasm_win
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #hostedOs: windows
        #runtimeFlavor: ${{ parameters.runtimeFlavor }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ insert }}: ${{ parameters.jobParameters }}
