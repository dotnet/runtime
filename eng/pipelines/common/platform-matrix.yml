parameters:
  runtimeFlavor: 'coreclr'
  jobTemplate: ''
  buildConfig: ''
  platforms: []
  # platformGroup is a named collection of platforms. Allowed values:
  # 'all' - all platforms
  # 'gcstress' - platforms that support running under GCStress0x3 and GCStress0xC scenarios
  platformGroup: ''
  # helixQueueGroup is a named collection of Helix Queues. If specified, it determines which Helix queues are
  # used, instead of the usual criteria. Allowed values:
  # 'pr' - the queues used for a pull request for the platform. Typically a small set.
  # 'ci' - the queues used for a CI (post-merge) test run.
  # 'all' - the queues used for non-PR, non-CI test runs, e.g., Manual or Scheduled runs. Typically this is all available queues.
  helixQueueGroup: 'pr'
  # helixQueuesTemplate is a yaml template which will be expanded in order to set up the helix queues
  # for the given platform and helixQueueGroup.
  helixQueuesTemplate: ''
  stagedBuild: false
  # When set to false, suppresses reuse of OSX managed build artifacts (for pipelines without an OSX obj)
  # When set to true, passes the 'platforms' value as a job parameter also named 'platforms'.
  # Handled as an opt-in parameter to avoid excessive yaml.
  passPlatforms: false
  container: ''
  shouldContinueOnError: false
  jobParameters: {}
  variables: []

jobs:

# WebAssembly

- ${{ if containsValue(parameters.platforms, 'Browser_wasm') }}:
  - template: xplat-setup.yml
    parameters:
      jobTemplate: ${{ parameters.jobTemplate }}
      helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      variables: ${{ parameters.variables }}
      osGroup: Browser
      archType: wasm
      targetRid: browser-wasm
      platform: Browser_wasm
      shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      container:
        image: ubuntu-18.04-webassembly-20220317214646-1ad56e8
        registry: mcr
      jobParameters:
        hostedOs: Linux
        runtimeFlavor: ${{ parameters.runtimeFlavor }}
        stagedBuild: ${{ parameters.stagedBuild }}
        buildConfig: ${{ parameters.buildConfig }}
        ${{ if eq(parameters.passPlatforms, true) }}:
          platforms: ${{ parameters.platforms }}
        ${{ insert }}: ${{ parameters.jobParameters }}

## WebAssembly Linux Firefox

#- ${{ if containsValue(parameters.platforms, 'Browser_wasm_firefox') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: Browser
      #archType: wasm
      #targetRid: browser-wasm
      #platform: Browser_wasm_firefox
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #container:
        #image: ubuntu-18.04-webassembly-20220317214646-1ad56e8
        #registry: mcr
      #jobParameters:
        #hostedOs: Linux
        #runtimeFlavor: ${{ parameters.runtimeFlavor }}
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #${{ insert }}: ${{ parameters.jobParameters }}

# WebAssembly on Windows

- ${{ if containsValue(parameters.platforms, 'Browser_wasm_win') }}:
  - template: xplat-setup.yml
    parameters:
      jobTemplate: ${{ parameters.jobTemplate }}
      helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      variables: ${{ parameters.variables }}
      osGroup: Browser
      archType: wasm
      targetRid: browser-wasm
      platform: Browser_wasm_win
      shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      jobParameters:
        hostedOs: windows
        runtimeFlavor: ${{ parameters.runtimeFlavor }}
        stagedBuild: ${{ parameters.stagedBuild }}
        buildConfig: ${{ parameters.buildConfig }}
        ${{ if eq(parameters.passPlatforms, true) }}:
          platforms: ${{ parameters.platforms }}
        ${{ insert }}: ${{ parameters.jobParameters }}

# FreeBSD
#- ${{ if containsValue(parameters.platforms, 'FreeBSD_x64') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: FreeBSD
      #archType: x64
      #targetRid: freebsd-x64
      #platform: FreeBSD_x64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #container:
        #image: ubuntu-18.04-cross-freebsd-12-20210917001307-f13d79e
        #registry: mcr
      #jobParameters:
        #runtimeFlavor: ${{ parameters.runtimeFlavor }}
        #buildConfig: ${{ parameters.buildConfig }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #crossBuild: true
        #crossrootfsDir: '/crossrootfs/x64'
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## Android x64

#- ${{ if containsValue(parameters.platforms, 'Android_x64') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: Android
      #archType: x64
      #targetRid: android-x64
      #platform: Android_x64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #container:
        #image: ubuntu-18.04-android-20220131172314-3983b4e
        #registry: mcr
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## Android x86

#- ${{ if containsValue(parameters.platforms, 'Android_x86') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: Android
      #archType: x86
      #targetRid: android-x86
      #platform: Android_x86
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #container:
        #image: ubuntu-18.04-android-20220131172314-3983b4e
        #registry: mcr
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## Android arm

#- ${{ if containsValue(parameters.platforms, 'Android_arm') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: Android
      #archType: arm
      #targetRid: android-arm
      #platform: Android_arm
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #container:
        #image: ubuntu-18.04-android-20220131172314-3983b4e
        #registry: mcr
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## Android arm64

#- ${{ if containsValue(parameters.platforms, 'Android_arm64') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: Android
      #archType: arm64
      #targetRid: android-arm64
      #platform: Android_arm64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #container:
        #image: ubuntu-18.04-android-20220131172314-3983b4e
        #registry: mcr
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## Mac Catalyst x64

#- ${{ if containsValue(parameters.platforms, 'MacCatalyst_x64') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: MacCatalyst
      #archType: x64
      #targetRid: maccatalyst-x64
      #platform: MacCatalyst_x64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## Mac Catalyst arm64

#- ${{ if containsValue(parameters.platforms, 'MacCatalyst_arm64') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: MacCatalyst
      #archType: arm64
      #targetRid: maccatalyst-arm64
      #platform: MacCatalyst_arm64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## tvOS arm64

#- ${{ if containsValue(parameters.platforms, 'tvOS_arm64') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: tvOS
      #archType: arm64
      #targetRid: tvos-arm64
      #platform: tvOS_arm64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## tvOS Simulator x64

#- ${{ if containsValue(parameters.platforms, 'tvOSSimulator_x64') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: tvOSSimulator
      #archType: x64
      #targetRid: tvossimulator-x64
      #platform: tvOSSimulator_x64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## tvOS Simulator arm64

#- ${{ if containsValue(parameters.platforms, 'tvOSSimulator_arm64') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: tvOSSimulator
      #archType: arm64
      #targetRid: tvossimulator-arm64
      #platform: tvOSSimulator_arm64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## iOS arm

#- ${{ if containsValue(parameters.platforms, 'iOS_arm') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: iOS
      #archType: arm
      #targetRid: ios-arm
      #platform: iOS_arm
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## iOS arm64

#- ${{ if containsValue(parameters.platforms, 'iOS_arm64') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: iOS
      #archType: arm64
      #targetRid: ios-arm64
      #platform: iOS_arm64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## iOS Simulator x64

#- ${{ if containsValue(parameters.platforms, 'iOSSimulator_x64') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: iOSSimulator
      #archType: x64
      #targetRid: iossimulator-x64
      #platform: iOSSimulator_x64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## iOS Simulator x86

#- ${{ if containsValue(parameters.platforms, 'iOSSimulator_x86') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: iOSSimulator
      #archType: x86
      #targetRid: iossimulator-x86
      #platform: iOSsimulator_x86
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #managedTestBuildOsGroup: OSX
        #${{ insert }}: ${{ parameters.jobParameters }}

## iOS Simulator arm64

#- ${{ if containsValue(parameters.platforms, 'iOSSimulator_arm64') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: iOSSimulator
      #archType: arm64
      #targetRid: iossimulator-arm64
      #platform: iOSSimulator_arm64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: mono
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## macOS arm64

#- ${{ if containsValue(parameters.platforms, 'OSX_arm64') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: OSX
      #archType: arm64
      #targetRid: osx-arm64
      #platform: OSX_arm64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: ${{ parameters.runtimeFlavor }}
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #crossBuild: true
        #${{ insert }}: ${{ parameters.jobParameters }}

## macOS x64

#- ${{ if or(containsValue(parameters.platforms, 'OSX_x64'), eq(parameters.platformGroup, 'all')) }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: OSX
      #archType: x64
      #targetRid: osx-x64
      #platform: OSX_x64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: ${{ parameters.runtimeFlavor }}
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## Tizen armel

#- ${{ if containsValue(parameters.platforms, 'Tizen_armel') }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: Tizen
      #archType: armel
      #targetRid: tizen-armel
      #platform: Tizen_armel
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #container:
        #image: ubuntu-18.04-cross-armel-tizen-20210719212651-8b02f56
        #registry: mcr
      #jobParameters:
        #runtimeFlavor: ${{ parameters.runtimeFlavor }}
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #crossBuild: true
        #crossrootfsDir: '/crossrootfs/armel'
        #disableClrTest: true
        #${{ insert }}: ${{ parameters.jobParameters }}

## Windows x64

#- ${{ if or(containsValue(parameters.platforms, 'windows_x64'), in(parameters.platformGroup, 'all', 'gcstress')) }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: windows
      #archType: x64
      #targetRid: win-x64
      #platform: windows_x64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: ${{ parameters.runtimeFlavor }}
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## Windows x86

#- ${{ if or(containsValue(parameters.platforms, 'windows_x86'), in(parameters.platformGroup, 'all', 'gcstress')) }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: windows
      #archType: x86
      #targetRid: win-x86
      #platform: windows_x86
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: ${{ parameters.runtimeFlavor }}
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## Windows arm
#- ${{ if or(containsValue(parameters.platforms, 'windows_arm'), eq(parameters.platformGroup, 'all')) }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: windows
      #archType: arm
      #targetRid: win-arm
      #platform: windows_arm
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: ${{ parameters.runtimeFlavor }}
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}

## Windows arm64

#- ${{ if or(containsValue(parameters.platforms, 'windows_arm64'), in(parameters.platformGroup, 'all', 'gcstress')) }}:
  #- template: xplat-setup.yml
    #parameters:
      #jobTemplate: ${{ parameters.jobTemplate }}
      #helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      #variables: ${{ parameters.variables }}
      #osGroup: windows
      #archType: arm64
      #targetRid: win-arm64
      #platform: windows_arm64
      #shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      #jobParameters:
        #runtimeFlavor: ${{ parameters.runtimeFlavor }}
        #stagedBuild: ${{ parameters.stagedBuild }}
        #buildConfig: ${{ parameters.buildConfig }}
        #${{ if eq(parameters.passPlatforms, true) }}:
          #platforms: ${{ parameters.platforms }}
        #helixQueueGroup: ${{ parameters.helixQueueGroup }}
        #${{ insert }}: ${{ parameters.jobParameters }}
