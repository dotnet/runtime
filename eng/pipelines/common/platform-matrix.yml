parameters:
  runtimeFlavor: 'coreclr'
  jobTemplate: ''
  buildConfig: ''
  platforms: []
  # platformGroup is a named collection of platforms. Allowed values:
  # 'all' - all platforms
  # 'gcstress' - platforms that support running under GCStress0x3 and GCStress0xC scenarios
  platformGroup: ''
  # helixQueueGroup is a named collection of Helix Queues. If specified, it determines which Helix queues are
  # used, instead of the usual criteria. Allowed values:
  # 'pr' - the queues used for a pull request for the platform. Typically a small set.
  # 'ci' - the queues used for a CI (post-merge) test run.
  # 'all' - the queues used for non-PR, non-CI test runs, e.g., Manual or Scheduled runs. Typically this is all available queues.
  helixQueueGroup: 'pr'
  # helixQueuesTemplate is a yaml template which will be expanded in order to set up the helix queues
  # for the given platform and helixQueueGroup.
  helixQueuesTemplate: ''
  stagedBuild: false
  # When set to false, suppresses reuse of OSX managed build artifacts (for pipelines without an OSX obj)
  # When set to true, passes the 'platforms' value as a job parameter also named 'platforms'.
  # Handled as an opt-in parameter to avoid excessive yaml.
  passPlatforms: false
  container: ''
  shouldContinueOnError: false
  jobParameters: {}
  variables: []

jobs:

# Linux x64

- ${{ if or(containsValue(parameters.platforms, 'Linux_x64'), containsValue(parameters.platforms, 'CoreClrTestBuildHost'), in(parameters.platformGroup, 'all', 'gcstress')) }}:
  - template: xplat-setup.yml
    parameters:
      jobTemplate: ${{ parameters.jobTemplate }}
      helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      variables: ${{ parameters.variables }}
      osGroup: Linux
      archType: x64
      targetRid: linux-x64
      platform: Linux_x64
      shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      container:
        ${{ if eq(parameters.container, '') }}:
          image: centos-7-20210714125435-9b5bbc2
        ${{ if ne(parameters.container, '') }}:
          image: ${{ parameters.container }}
        registry: mcr
      jobParameters:
        runtimeFlavor: ${{ parameters.runtimeFlavor }}
        stagedBuild: ${{ parameters.stagedBuild }}
        buildConfig: ${{ parameters.buildConfig }}
        ${{ if eq(parameters.passPlatforms, true) }}:
          platforms: ${{ parameters.platforms }}
        helixQueueGroup: ${{ parameters.helixQueueGroup }}
        ${{ insert }}: ${{ parameters.jobParameters }}

# Linux x86

- ${{ if containsValue(parameters.platforms, 'Linux_x86') }}:
  - template: xplat-setup.yml
    parameters:
      jobTemplate: ${{ parameters.jobTemplate }}
      helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      variables: ${{ parameters.variables }}
      osGroup: Linux
      archType: x86
      targetRid: linux-x86
      platform: Linux_x86
      shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      container:
        image: ubuntu-18.04-cross-x86-linux-20211022152824-f853169
        registry: mcr
      jobParameters:
        runtimeFlavor: ${{ parameters.runtimeFlavor }}
        stagedBuild: ${{ parameters.stagedBuild }}
        buildConfig: ${{ parameters.buildConfig }}
        ${{ if eq(parameters.passPlatforms, true) }}:
          platforms: ${{ parameters.platforms }}
        helixQueueGroup: ${{ parameters.helixQueueGroup }}
        crossBuild: true
        crossrootfsDir: '/crossrootfs/x86'
        disableClrTest: true
        ${{ insert }}: ${{ parameters.jobParameters }}

# WebAssembly

- ${{ if containsValue(parameters.platforms, 'Browser_wasm') }}:
  - template: xplat-setup.yml
    parameters:
      jobTemplate: ${{ parameters.jobTemplate }}
      helixQueuesTemplate: ${{ parameters.helixQueuesTemplate }}
      variables: ${{ parameters.variables }}
      osGroup: Browser
      archType: wasm
      targetRid: browser-wasm
      platform: Browser_wasm
      shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      container:
        image: ubuntu-18.04-webassembly-20220531132048-00a561c
        registry: mcr
      jobParameters:
        hostedOs: Linux
        runtimeFlavor: ${{ parameters.runtimeFlavor }}
        stagedBuild: ${{ parameters.stagedBuild }}
        buildConfig: ${{ parameters.buildConfig }}
        ${{ if eq(parameters.passPlatforms, true) }}:
          platforms: ${{ parameters.platforms }}
        ${{ insert }}: ${{ parameters.jobParameters }}

