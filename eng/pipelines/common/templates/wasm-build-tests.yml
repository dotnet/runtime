parameters:
  alwaysRun: false
  isExtraPlatformsBuild: false
  platforms: []

jobs:

#
# Build the whole product using Mono and run libraries tests, for Wasm.Build.Tests
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/common/global-build-job.yml
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    buildConfig: Release
    runtimeFlavor: mono
    platforms: ${{ parameters.platforms }}
    variables:
      # map dependencies variables to local variables
      - name: wasmbuildtestsContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_wasmbuildtests.containsChange'] ]
      - name: allWasmContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_allwasm.containsChange'] ]
      - name: alwaysRunVar
        value: ${{ parameters.alwaysRun }}
    jobParameters:
      isExtraPlatforms: ${{ parameters.isExtraPlatformsBuild }}
      testGroup: innerloop
      nameSuffix: WasmBuildTests
      buildArgs: -s mono+libs+host+packs+libs.tests -c $(_BuildConfig) /p:ArchiveTests=true /p:TestWasmBuildTests=true /p:TestAssemblies=false /p:BrowserHost=$(_hostedOs)
      timeoutInMinutes: 180
      condition: >-
        or(
          eq(variables['alwaysRunVar'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_allwasm.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_wasmbuildtests.containsChange'], true))
      # extra steps, run tests
      extraStepsTemplate: /eng/pipelines/libraries/helix.yml
      extraStepsParameters:
        creator: dotnet-bot
        testRunNamePrefixSuffix: Mono_$(_BuildConfig)_$(_hostedOs)
        extraHelixArguments: /p:BrowserHost=$(_hostedOs)
        scenarios:
        - buildwasmapps
