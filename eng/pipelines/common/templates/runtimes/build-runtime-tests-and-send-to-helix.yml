parameters:
  buildConfig: ''
  osSubgroup: ''
  container: ''
  testGroup: ''
  crossBuild: false
  readyToRun: false
  liveLibrariesBuildConfig: ''
  compositeBuildMode: false
  helixQueues: ''
  displayNameArgs: ''
  runInUnloadableContext: false
  runtimeFlavor: 'mono'
  runtimeVariant: 'monointerpreter'
  variables: {}
  pool: ''
  dependsOn: []
  #arcade-specific parameters
  condition: always()
  continueOnError: false
  displayName: ''
  timeoutInMinutes: ''
  enableMicrobuild: ''
  gatherAssetManifests: false
  shouldContinueOnError: false

steps:
  - ${{ if eq(parameters.runtimeFlavor, 'mono') }}:
    - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) /p:RuntimeVariant=${{ parameters.runtimeVariant }} /p:LibrariesConfiguration=${{ parameters.buildConfig }} -mono -ci os ${{ parameters.osGroup }} ${{ parameters.archType }} $(buildConfigUpper)
      displayName: Build Tests

  - ${{ if ne(parameters.runtimeFlavor, 'mono') }}:
    - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) /p:LibrariesConfiguration=${{ parameters.buildConfig }} -ci os ${{ parameters.osGroup }} ${{ parameters.archType }} $(buildConfigUpper)
      displayName: Build Tests


  # Build a Mono LLVM AOT cross-compiler for non-amd64 targets (in this case, just arm64)
  - ${{ if and(eq(parameters.runtimeFlavor, 'mono'), or(eq(parameters.runtimeVariant, 'llvmaot'), eq(parameters.runtimeVariant, 'llvmfullaot'))) }}:
    - ${{ if eq(parameters.archType, 'arm64') }}:
      - script: ./build.sh
                -subset mono
                -c ${{ parameters.buildConfig }}
                -arch ${{ parameters.archType }}
                /p:BuildMonoAotCrossCompiler=true
                /p:BuildMonoAotCrossCompilerOnly=true
                /p:MonoLibClang="/usr/lib/llvm-9/lib/libclang-9.so.1"
                /p:MonoAOTEnableLLVM=true
                /p:MonoAOTLLVMUseCxx11Abi=true
                /p:CrossBuild=true
        displayName: "Build Mono LLVM AOT cross compiler"

    - ${{ if eq(parameters.archType, 'x64') }}:
      - ${{ if eq(parameters.runtimeVariant, 'llvmaot') }}:
        - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) $(logRootNameArg)MonoAot mono_aot ${{ parameters.buildConfig }} ${{ parameters.archType }}
          displayName: "LLVM AOT compile CoreCLR tests"
      - ${{ if eq(parameters.runtimeVariant, 'llvmfullaot') }}:
        - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) $(logRootNameArg)MonoAot mono_fullaot ${{ parameters.buildConfig }} ${{ parameters.archType }}
          displayName: "LLVM AOT compile CoreCLR tests"
    - ${{ if eq(parameters.archType, 'arm64') }}:
      - ${{ if eq(parameters.runtimeVariant, 'llvmaot') }}:
        - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) $(logRootNameArg)MonoAot mono_aot ${{ parameters.buildConfig }} ${{ parameters.archType }}  $(_monoAotCrossCompileArg) /p:RuntimeVariant=llvmfullaot -maxcpucount:2
          displayName: "LLVM AOT cross-compile CoreCLR tests"
          env:
            __MonoToolPrefix: aarch64-linux-gnu-
      - ${{ if eq(parameters.runtimeVariant, 'llvmfullaot') }}:
        - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) $(logRootNameArg)MonoAot mono_fullaot ${{ parameters.buildConfig }} ${{ parameters.archType }} $(_monoAotCrossCompileArg) /p:RuntimeVariant=llvmfullaot -maxcpucount:2
          displayName: "LLVM AOT cross-compile CoreCLR tests"
          env:
            __MonoToolPrefix: aarch64-linux-gnu-

  #  Send tests to Helix
  - template: /eng/pipelines/common/templates/runtimes/send-to-helix-step.yml
    parameters:
      displayName: Send tests to Helix
      buildConfig: $(buildConfigUpper)
      archType: ${{ parameters.archType }}
      osGroup: ${{ parameters.osGroup }}
      osSubgroup: ${{ parameters.osSubgroup}}
      coreClrRepoRoot: $(Build.SourcesDirectory)/src/coreclr
      shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      runtimeFlavor: ${{ parameters.runtimeFlavor }}
      runtimeVariant: ${{ parameters.runtimeVariant }}

      ${{ if eq(variables['System.TeamProject'], 'public') }}:
        creator: $(Build.DefinitionName)

        helixBuild: $(Build.BuildNumber)
        helixSource: $(_HelixSource)

        ${{ if ne(parameters.readyToRun, true) }}:
          helixType: 'test/functional/cli/'

        helixQueues: ${{ parameters.helixQueues }}

        # This tests whether an array is empty
        ${{ if eq(join('', parameters.helixQueues), '') }}:
          condition: false

        publishTestResults: true

        timeoutPerTestInMinutes: $(timeoutPerTestInMinutes)
        timeoutPerTestCollectionInMinutes: $(timeoutPerTestCollectionInMinutes)

        runCrossGen2: ${{ eq(parameters.readyToRun, true) }}
        compositeBuildMode: ${{ parameters.compositeBuildMode }}
        runInUnloadableContext: ${{ parameters.runInUnloadableContext }}

        ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          # Access token variable for internal project from the
          # DotNet-HelixApi-Access variable group
          helixAccessToken: $(HelixApiAccessToken)

        helixProjectArguments: '$(Build.SourcesDirectory)/src/tests/Common/helixpublishwitharcade.proj'

        scenarios: normal
