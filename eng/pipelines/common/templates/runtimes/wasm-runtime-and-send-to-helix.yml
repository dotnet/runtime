parameters:
  buildConfig: ''
  archType: 'wasm'
  osGroup: 'Browser'
  osSubgroup: ''
  container: ''
  testGroup: ''
  crossBuild: false
  crossrootfsDir: ''
  readyToRun: false
  liveLibrariesBuildConfig: ''
  crossgen2: false
  compositeBuildMode: false
  helixQueues: ''
  stagedBuild: false
  displayNameArgs: ''
  runInUnloadableContext: false
  runtimeVariant: ''
  variables: {}
  pool: ''
  dependsOn: []
  #arcade-specific parameters
  condition: always()
  continueOnError: false
  displayName: ''
  timeoutInMinutes: ''
  enableMicrobuild: ''
  gatherAssetManifests: false
  shouldContinueOnError: false


steps:
  - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) /p:RuntimeVariant=${{ parameters.runtimeVariant }} /p:LibrariesConfiguration=${{ parameters.buildConfig }} -ci -mono os Browser wasm $(buildConfigUpper)
    displayName: Build Tests

  #  Send tests to Helix
  - template: /eng/pipelines/common/templates/runtimes/send-to-helix-step.yml
    parameters:
      displayName: Send tests to Helix
      buildConfig: $(buildConfigUpper)
      archType: ${{ parameters.archType }}
      osGroup: ${{ parameters.osGroup }}
      osSubgroup: ${{ parameters.osSubgroup}}
      coreClrRepoRoot: $(Build.SourcesDirectory)/src/coreclr
      shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
      runtimeFlavor: ${{ parameters.runtimeFlavor }}
      runtimeVariant: ${{ parameters.runtimeVariant }}

      ${{ if eq(variables['System.TeamProject'], 'public') }}:
        creator: $(Build.DefinitionName)

        helixBuild: $(Build.BuildNumber)
        helixSource: $(_HelixSource)

        ${{ if ne(parameters.readyToRun, true) }}:
          helixType: 'test/functional/cli/'

        helixQueues: ${{ parameters.helixQueues }}

        # This tests whether an array is empty
        ${{ if eq(join('', parameters.helixQueues), '') }}:
          condition: false

        publishTestResults: true

        timeoutPerTestInMinutes: $(timeoutPerTestInMinutes)
        timeoutPerTestCollectionInMinutes: $(timeoutPerTestCollectionInMinutes)

        runCrossGen: ${{ and(eq(parameters.readyToRun, true), ne(parameters.crossgen2, true)) }}
        runCrossGen2: ${{ and(eq(parameters.readyToRun, true), eq(parameters.crossgen2, true)) }}
        compositeBuildMode: ${{ parameters.compositeBuildMode }}
        runInUnloadableContext: ${{ parameters.runInUnloadableContext }}

        ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          # Access token variable for internal project from the
          # DotNet-HelixApi-Access variable group
          helixAccessToken: $(HelixApiAccessToken)

        helixProjectArguments: '$(Build.SourcesDirectory)/src/tests/Common/helixpublishwitharcade.proj'

        scenarios: normal
