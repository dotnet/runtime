parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osSubgroup: ''
  container: ''
  testGroup: ''
  crossBuild: false
  crossrootfsDir: ''
  readyToRun: false
  liveLibrariesBuildConfig: ''
  crossgen2: false
  compositeBuildMode: false
  helixQueues: ''
  condition: true
  stagedBuild: false
  displayNameArgs: ''
  runInUnloadableContext: false
  runtimeVariant: ''
  variables: {}
  pool: ''
  runtimeFlavor: 'coreclr'
  runtimeFlavorDisplayName: 'CoreCLR'
  shouldContinueOnError: false
  dependsOn: []
  dependOnEvaluatePaths: false

### Test run job

### Each test run job depends on a corresponding test build job with the same
### buildConfig and archType.

jobs:
- template: /eng/pipelines/${{ parameters.runtimeFlavor }}/templates/xplat-pipeline-job.yml
  parameters:
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    osSubgroup: ${{ parameters.osSubgroup }}
    container: ${{ parameters.container }}
    testGroup: ${{ parameters.testGroup }}
    crossBuild: ${{ parameters.crossBuild }}
    crossrootfsDir: ${{ parameters.crossrootfsDir }}
    stagedBuild: ${{ parameters.stagedBuild }}
    liveLibrariesBuildConfig: ${{ parameters.liveLibrariesBuildConfig }}
    helixType: 'build/tests/'
    runtimeVariant: ${{ parameters.runtimeVariant }}
    pool: ${{ parameters.pool }}
    condition: ${{ parameters.condition }}
    dependOnEvaluatePaths: ${{ parameters.dependOnEvaluatePaths }}

    # Test jobs should continue on error for internal builds
    ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      continueOnError: true

    ${{ if ne(parameters.dependsOn[0], '') }}:
      dependsOn: ${{ parameters.dependsOn }}

    ${{ if eq(parameters.dependsOn[0], '') }}:
      dependsOn:
      - ${{ if in(parameters.testGroup, 'innerloop', 'clrinterpreter') }}:
        - '${{ parameters.runtimeFlavor }}_common_test_build_p0_AnyOS_AnyCPU_${{parameters.buildConfig }}'
      - ${{ if notIn(parameters.testGroup, 'innerloop', 'clrinterpreter') }}:
        - '${{ parameters.runtimeFlavor }}_common_test_build_p1_AnyOS_AnyCPU_${{parameters.buildConfig }}'
      - ${{ if ne(parameters.stagedBuild, true) }}:
        - ${{ if or( eq(parameters.runtimeVariant, 'minijit'), eq(parameters.runtimeVariant, 'monointerpreter'))  }}:
          # This is needed for creating a CORE_ROOT in the current design.
          - ${{ format('coreclr_{0}_product_build_{1}{2}_{3}_{4}', '', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
          # minijit and mono interpreter runtimevariants do not require any special build of the runtime
          - ${{ format('{0}_{1}_product_build_{2}{3}_{4}_{5}', parameters.runtimeFlavor, '', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        - ${{ if not(or(eq(parameters.runtimeVariant, 'minijit'), eq(parameters.runtimeVariant, 'monointerpreter')))  }}:
          - ${{ format('{0}_{1}_product_build_{2}{3}_{4}_{5}', parameters.runtimeFlavor, parameters.runtimeVariant, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        - ${{ if ne(parameters.liveLibrariesBuildConfig, '') }}:
          - ${{ format('libraries_build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.liveLibrariesBuildConfig) }}

    # Compute job name from template parameters
    ${{ if in(parameters.testGroup, 'innerloop', 'clrinterpreter') }}:
      name: 'run_test_p0_${{ parameters.runtimeFlavor }}${{ parameters.runtimeVariant }}_${{ parameters.displayNameArgs }}_${{ parameters.osGroup }}${{ parameters.osSubgroup }}_${{ parameters.archType }}_${{ parameters.buildConfig }}'
      displayName: '${{ parameters.runtimeFlavorDisplayName }} ${{ parameters.runtimeVariant}} Pri0 Runtime Tests Run ${{ parameters.displayNameArgs }} ${{ parameters.osGroup }}${{ parameters.osSubgroup }} ${{ parameters.archType }} ${{ parameters.buildConfig }}'
    ${{ if notIn(parameters.testGroup, 'innerloop', 'clrinterpreter') }}:
      name: 'run_test_p1_${{ parameters.displayNameArgs }}_${{ parameters.osGroup }}${{ parameters.osSubgroup }}_${{ parameters.archType }}_${{ parameters.buildConfig }}'
      displayName: '${{ parameters.runtimeFlavorDisplayName }} ${{ parameters.runtimeVariant }} Pri1 Runtime Tests Run ${{ parameters.displayNameArgs }} ${{ parameters.osGroup }}${{ parameters.osSubgroup }} ${{ parameters.archType }} ${{ parameters.buildConfig }}'

    variables:

    - name: runtimeFlavorArgs
      value: ''

    - ${{ if eq(parameters.runtimeFlavor, 'mono') }}:
      - name: runtimeFlavorArgs
        value: '-excludemonofailures'

    - name: runtimeVariantArg
      value: ''

    - ${{ if not(eq(parameters.runtimeVariant, '')) }}:
      - name: runtimeVariantArg
        value: '/p:RuntimeVariant=${{ parameters.runtimeVariant }}'

    - name: crossgenArg
      value: ''
    - name: LogNamePrefix
      value: TestRunLogs

    - ${{ if eq(parameters.readyToRun, true) }}:
      - name: crossgenArg
      # Switch R2R to use cg2 by default
        value: 'crossgen2'
      - name: LogNamePrefix
        value: TestRunLogs_R2R
      - ${{ if eq(parameters.crossgen2, true) }}:
        - name: crossgenArg
          value: 'crossgen2'
        - name: LogNamePrefix
          value: TestRunLogs_R2R_CG2
      - ${{ if eq(parameters.compositeBuildMode, true) }}:
        - name: crossgenArg
          value: 'composite'
        - name: LogNamePrefix
          value: TestRunLogs_R2R_CG2_Composite

    # Set job timeouts
    #
    # "timeoutPerTestCollectionInMinutes" is the time needed for the "biggest" xUnit test collection to complete.
    # In case xUnit test wrappers get refactored this number should also be adjusted.
    #
    # "timeoutPerTestInMinutes" corresponds to individual test running time. This is implemented by setting
    # the __TestTimeout variable, which is later read by the coreclr xunit test wrapper code (the code in the
    # xunit test dlls that invokes the actual tests).
    #
    # Note that "timeoutInMinutes" is an Azure DevOps Pipelines parameter for a "job" that specifies the
    # total time allowed for a job, and is specified lower down. Make sure you set it properly for any new testGroup.
    #
    # Please note that for Crossgen / Crossgen2 R2R runs, the "test running time" also includes the
    # time needed to compile the test into native code with the Crossgen compiler.

    - name: timeoutPerTestInMinutes
      value: 10
    - name: timeoutPerTestCollectionInMinutes
      value: 30
    - ${{ if in(parameters.testGroup, 'outerloop') }}:
      - name: timeoutPerTestCollectionInMinutes
        value: 120
    - ${{ if eq(parameters.crossgen2, true) }}:
        - name: timeoutPerTestCollectionInMinutes
          value: 90
        - name: timeoutPerTestInMinutes
          value: 30
    - ${{ if in(parameters.testGroup, 'gc-longrunning', 'gc-simulator') }}:
      - name: timeoutPerTestCollectionInMinutes
        value: 360
      # gc reliability may take up to 2 hours to shutdown. Some scenarios have very long iteration times.
      - name: timeoutPerTestInMinutes
        value: 240
    - ${{ if in(parameters.testGroup, 'jitstress', 'jitstress-isas-arm', 'jitstress-isas-x86', 'jitstressregs-x86', 'jitstressregs', 'jitstress2-jitstressregs', 'jitelthookenabled' ) }}:
      - name: timeoutPerTestCollectionInMinutes
        value: 120
      - name: timeoutPerTestInMinutes
        value: 30
    - ${{ if in(parameters.testGroup, 'gcstress0x3-gcstress0xc') }}:
      - name: timeoutPerTestCollectionInMinutes
        value: 240
      - name: timeoutPerTestInMinutes
        value: 60
    - ${{ if in(parameters.testGroup, 'gcstress-extra', 'r2r-extra') }}:
      - name: timeoutPerTestCollectionInMinutes
        value: 300
      - name: timeoutPerTestInMinutes
        value: 90
    - ${{ if eq(parameters.testGroup, 'ilasm') }}:
      # ilasm-ildasm round trip testing runs every test twice, plus runs ilasm and ildasm, so double the 'outerloop' timeout numbers.
      - name: timeoutPerTestInMinutes
        value: 20
      - name: timeoutPerTestCollectionInMinutes
        value: 240
    - ${{ if in(parameters.testGroup, 'clrinterpreter') }}:
      - name: timeoutPerTestCollectionInMinutes
        value: 180
      - name: timeoutPerTestInMinutes
        value: 30
    - ${{ if in(parameters.testGroup, 'pgo') }}:
      - name: timeoutPerTestCollectionInMinutes
        value: 120

    - ${{ if eq(parameters.compositeBuildMode, true) }}:
      - name: crossgenArg
        value: 'composite'

    - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      - group: DotNet-HelixApi-Access

    - ${{ parameters.variables }}

    # TODO: update these numbers as they were determined long ago
    ${{ if eq(parameters.testGroup, 'innerloop') }}:
      timeoutInMinutes: 200
    ${{ if in(parameters.testGroup, 'outerloop', 'jit-experimental', 'pgo') }}:
      timeoutInMinutes: 270
    ${{ if in(parameters.testGroup, 'gc-longrunning', 'gc-simulator') }}:
      timeoutInMinutes: 480
    ${{ if in(parameters.testGroup, 'jitstress', 'jitstress-isas-arm', 'jitstressregs-x86', 'jitstressregs', 'jitstress2-jitstressregs', 'gcstress0x3-gcstress0xc', 'ilasm') }}:
      timeoutInMinutes: 390
    ${{ if in(parameters.testGroup, 'jitstress-isas-x86', 'gcstress-extra', 'r2r-extra', 'clrinterpreter') }}:
      timeoutInMinutes: 510

    steps:

    # Optionally download live-built libraries
    - ${{ if ne(parameters.liveLibrariesBuildConfig, '') }}:
      - template: /eng/pipelines/common/download-artifact-step.yml
        parameters:
          unpackFolder: $(librariesDownloadDir)
          cleanUnpackFolder: false
          artifactFileName: '$(librariesBuildArtifactName)$(archiveExtension)'
          artifactName: '$(librariesBuildArtifactName)'
          displayName: 'live-built libraries'


    # Download and unzip managed test artifacts
    - template: /eng/pipelines/common/download-artifact-step.yml
      parameters:
        unpackFolder: '$(managedTestArtifactRootFolderPath)'
        artifactFileName: '$(managedGenericTestArtifactName).tar.gz'
        artifactName: '$(managedGenericTestArtifactName)'
        displayName: 'generic managed test artifacts'


    # Download product binaries directory
    - template: /eng/pipelines/common/download-artifact-step.yml
      parameters:
        unpackFolder: $(buildProductRootFolderPath)
        artifactFileName: '$(buildProductArtifactName)$(archiveExtension)'
        artifactName: '$(buildProductArtifactName)'
        displayName: 'product build'


    - ${{ if eq(parameters.runtimeFlavor, 'mono') }}:
      # We need to explictly download CoreCLR for Mono
      - template: /eng/pipelines/common/download-artifact-step.yml
        parameters:
          unpackFolder: $(coreClrProductRootFolderPath)
          artifactFileName: '$(coreClrProductArtifactName)$(archiveExtension)'
          artifactName: '$(coreClrProductArtifactName)'
          displayName: 'CoreCLR product download for Mono'

    # Download and unzip the Microsoft.NET.Sdk.IL package needed for traversing
    # ilproj test projects during copynativeonly.
    - template: /eng/pipelines/common/download-artifact-step.yml
      parameters:
        unpackFolder: '$(microsoftNetSdkIlFolderPath)'
        artifactFileName: '$(microsoftNetSdkIlArtifactName).tar.gz'
        artifactName: '$(microsoftNetSdkIlArtifactName)'
        displayName: 'Microsoft.NET.Sdk.IL package'


    # Download and unzip native test artifacts
    - template: /eng/pipelines/common/download-artifact-step.yml
      parameters:
        unpackFolder: '$(nativeTestArtifactRootFolderPath)'
        artifactFileName: '$(nativeTestArtifactName)$(archiveExtension)'
        artifactName: '$(nativeTestArtifactName)'
        displayName: 'native test artifacts'


    # Publish native test components to test output folder. Sadly we cannot do this
    # during product build (so that we could zip up the files in their final test location
    # and directly unzip them there after download). Unfortunately the logic to copy
    # the native artifacts to the final test folders is dependent on availability of the
    # managed test artifacts.
    - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) copynativeonly $(crossgenArg) $(buildConfig) $(archType) $(priorityArg) $(librariesOverrideArg)
      displayName: Copy native test components to test output folder


    # Generate test wrappers. This is the step that examines issues.targets to exclude tests.
    - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) buildtestwrappersonly $(runtimeFlavorArgs) $(runtimeVariantArg) $(crossgenArg) $(buildConfig) $(archType) $(crossArg) $(priorityArg) $(librariesOverrideArg)
      displayName: Generate test wrappers


    # Compose the Core_Root folder containing all artifacts needed for running
    # CoreCLR tests. This step also compiles the framework using Crossgen / Crossgen2
    # in ReadyToRun jobs.
    - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) generatelayoutonly $(runtimeFlavorArgs) $(crossgenArg) $(buildConfig) $(archType) $(crossArg) $(priorityArg) $(librariesOverrideArg)
      displayName: Generate CORE_ROOT

    # Build a Mono LLVM AOT cross-compiler for non-amd64 targets (in this case, just arm64)
    - ${{ if and(eq(parameters.runtimeFlavor, 'mono'), eq(parameters.runtimeVariant, 'llvmaot')) }}:
      - ${{ if eq(parameters.archType, 'arm64') }}:
        - script: ./build.sh
                  -subset mono
                  -c $(buildConfigUpper)
                  -arch $(archType)
                  /p:BuildMonoAotCrossCompiler=true
                  /p:BuildMonoAotCrossCompilerOnly=true
                  /p:MonoLibClang="/usr/lib/llvm-9/lib/libclang-9.so.1"
                  /p:MonoAOTEnableLLVM=true
                  /p:MonoAOTLLVMUseCxx11Abi=true
          displayName: "Build Mono LLVM AOT cross compiler"


    # Overwrite coreclr runtime binaries with mono ones
    - ${{ if eq(parameters.runtimeFlavor, 'mono') }}:
      - script: $(_msbuildCommand)
                $(Build.SourcesDirectory)/src/mono/mono.proj
                /t:PatchCoreClrCoreRoot
                /p:Configuration=$(buildConfigUpper)
                /p:TargetArchitecture=$(archType)
        displayName: "Patch dotnet with mono"

    - ${{ if and(eq(parameters.runtimeFlavor, 'mono'), eq(parameters.runtimeVariant, 'llvmaot')) }}:
      - ${{ if eq(parameters.archType, 'x64') }}:
        - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) mono_aot $(buildConfig) $(archType) $(runtimeVariantArg)
          displayName: "LLVM AOT compile CoreCLR tests"
      - ${{ if eq(parameters.archType, 'arm64') }}:
        - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) mono_aot $(buildConfig) $(archType) cross $(runtimeVariantArg)
          displayName: "LLVM AOT cross-compile CoreCLR tests"
          env:
            __MonoToolPrefix: aarch64-linux-gnu-

    # Send tests to Helix
    - template: /eng/pipelines/common/templates/runtimes/send-to-helix-step.yml
      parameters:
        displayName: Send tests to Helix
        buildConfig: $(buildConfigUpper)
        archType: ${{ parameters.archType }}
        osGroup: ${{ parameters.osGroup }}
        osSubgroup: ${{ parameters.osSubgroup}}
        runtimeFlavorDisplayName: ${{ parameters.runtimeFlavorDisplayName }}
        shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
        runtimeVariant: ${{ parameters.runtimeVariant }}

        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          creator: $(Build.DefinitionName)

        helixBuild: $(Build.BuildNumber)
        helixSource: $(_HelixSource)

        # REVIEW: not sure why "cli" is part of the names here. Leave it for the ones that already had it,
        # but don't add it to new ones.
        ${{ if eq(parameters.readyToRun, true) }}:
          helixType: 'test/functional/r2r/cli/'
        ${{ if ne(parameters.readyToRun, true) }}:
          helixType: 'test/functional/cli/'

        helixQueues: ${{ parameters.helixQueues }}

        # This tests whether an array is empty
        ${{ if eq(join('', parameters.helixQueues), '') }}:
          condition: false

        publishTestResults: true

        timeoutPerTestInMinutes: $(timeoutPerTestInMinutes)
        timeoutPerTestCollectionInMinutes: $(timeoutPerTestCollectionInMinutes)

        runCrossGen: ${{ and(eq(parameters.readyToRun, true), ne(parameters.crossgen2, true)) }}
        runCrossGen2: ${{ and(eq(parameters.readyToRun, true), eq(parameters.crossgen2, true)) }}
        ${{ if and(ne(parameters.testGroup, 'innerloop'), eq(parameters.runtimeFlavor, 'coreclr')) }}:
          runPALTestsDir: '$(coreClrProductRootFolderPath)/paltests'

        compositeBuildMode: ${{ parameters.compositeBuildMode }}
        runInUnloadableContext: ${{ parameters.runInUnloadableContext }}

        ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          # Access token variable for internal project from the
          # DotNet-HelixApi-Access variable group
          helixAccessToken: $(HelixApiAccessToken)

        helixProjectArguments: '$(Build.SourcesDirectory)/src/tests/Common/helixpublishwitharcade.proj'

        ${{ if in(parameters.testGroup, 'innerloop', 'outerloop') }}:
          scenarios:
          - normal
          - ${{ if eq(parameters.runtimeFlavor, 'coreclr') }}:
            - no_tiered_compilation

        ${{ if in(parameters.testGroup, 'jitstress') }}:
          scenarios:
          - jitminopts
          - jitstress1
          - jitstress1_tiered
          - jitstress2
          - jitstress2_tiered
          - zapdisable
          - tailcallstress
        ${{ if in(parameters.testGroup, 'jitstress-isas-arm') }}:
          scenarios:
          - jitstress_isas_incompletehwintrinsic
          - jitstress_isas_nohwintrinsic
          - jitstress_isas_nohwintrinsic_nosimd
          - jitstress_isas_nosimd
        ${{ if in(parameters.testGroup, 'jitstress-isas-x86') }}:
          scenarios:
          - jitstress_isas_incompletehwintrinsic
          - jitstress_isas_nohwintrinsic
          - jitstress_isas_nohwintrinsic_nosimd
          - jitstress_isas_nosimd
          - jitstress_isas_x86_noaes
          - jitstress_isas_x86_noavx
          - jitstress_isas_x86_noavx2
          - jitstress_isas_x86_nobmi1
          - jitstress_isas_x86_nobmi2
          - jitstress_isas_x86_nofma
          - jitstress_isas_x86_nohwintrinsic
          - jitstress_isas_x86_nolzcnt
          - jitstress_isas_x86_nopclmulqdq
          - jitstress_isas_x86_nopopcnt
          - jitstress_isas_x86_nosse
          - jitstress_isas_x86_nosse2
          - jitstress_isas_x86_nosse3
          - jitstress_isas_x86_nosse3_4
          - jitstress_isas_x86_nosse41
          - jitstress_isas_x86_nosse42
          - jitstress_isas_x86_nossse3
        ${{ if in(parameters.testGroup, 'jitstressregs-x86') }}:
          scenarios:
          - jitstressregs1_x86_noavx
          - jitstressregs2_x86_noavx
          - jitstressregs3_x86_noavx
          - jitstressregs4_x86_noavx
          - jitstressregs8_x86_noavx
          - jitstressregs0x10_x86_noavx
          - jitstressregs0x80_x86_noavx
          - jitstressregs0x1000_x86_noavx
        ${{ if in(parameters.testGroup, 'jitstressregs' ) }}:
          scenarios:
          - jitstressregs1
          - jitstressregs2
          - jitstressregs3
          - jitstressregs4
          - jitstressregs8
          - jitstressregs0x10
          - jitstressregs0x80
          - jitstressregs0x1000
        ${{ if in(parameters.testGroup, 'jitstress2-jitstressregs') }}:
          scenarios:
          - jitstress2_jitstressregs1
          - jitstress2_jitstressregs2
          - jitstress2_jitstressregs3
          - jitstress2_jitstressregs4
          - jitstress2_jitstressregs8
          - jitstress2_jitstressregs0x10
          - jitstress2_jitstressregs0x80
          - jitstress2_jitstressregs0x1000
        ${{ if in(parameters.testGroup, 'gcstress0x3-gcstress0xc') }}:
          scenarios:
          - gcstress0x3
          - gcstress0xc
        ${{ if in(parameters.testGroup, 'gcstress-extra') }}:
          scenarios:
          - heapverify1
          - gcstress0xc_zapdisable
          - gcstress0xc_zapdisable_jitstress2
          - gcstress0xc_zapdisable_heapverify1
          - gcstress0xc_jitstress1
          - gcstress0xc_jitstress2
          - gcstress0xc_tailcallstress
          - gcstress0xc_jitminopts_heapverify1
        ${{ if in(parameters.testGroup, 'r2r-extra') }}:
          scenarios:
          - jitstress1
          - jitstress2
          - jitstress1_tiered
          - jitstress2_tiered
          - jitstressregs1
          - jitstressregs2
          - jitstressregs3
          - jitstressregs4
          - jitstressregs8
          - jitstressregs0x10
          - jitstressregs0x80
          - jitstressregs0x1000
          - jitminopts
          - forcerelocs
          - gcstress0xf
        ${{ if in(parameters.testGroup, 'pgo') }}:
          scenarios:
          - nopgo
          - defaultpgo
          - dynamicpgo
          - fullpgo
        ${{ if in(parameters.testGroup, 'gc-longrunning') }}:
          longRunningGcTests: true
          scenarios:
          - normal
        ${{ if in(parameters.testGroup, 'gc-simulator') }}:
          gcSimulatorTests: true
          scenarios:
          - normal
        ${{ if in(parameters.testGroup, 'jitelthookenabled') }}:
          scenarios:
          - jitelthookenabled
          - jitelthookenabled_tiered
        ${{ if in(parameters.testGroup, 'jit-experimental') }}:
          scenarios:
          - jitosr
          - jitosr_stress
          - jitobjectstackallocation
        ${{ if in(parameters.testGroup, 'ilasm') }}:
          scenarios:
          - ilasmroundtrip
        ${{ if in(parameters.testGroup, 'clrinterpreter') }}:
          scenarios:
          - clrinterpreter

    # Publish Logs
    - task: PublishPipelineArtifact@1
      displayName: Publish Logs
      inputs:
        targetPath: $(Build.SourcesDirectory)/artifacts/log
        artifactName: '${{ parameters.runtimeFlavor }}_${{ parameters.runtimeVariant }}_$(LogNamePrefix)_$(osGroup)$(osSubgroup)_$(archType)_$(buildConfig)_${{ parameters.testGroup }}'
      continueOnError: true
      condition: always()
