parameters:
  displayName: ''
  condition: ''
  archType: ''
  osGroup: ''
  osSubgroup: ''
  buildConfig: ''
  creator: ''
  publishTestResults: ''
  helixAccessToken: ''
  helixBuild: ''
  helixSource: ''
  helixQueues: ''
  helixType: ''
  scenarios: ''
  timeoutPerTestCollectionInMinutes: ''
  timeoutPerTestInMinutes: ''
  runCrossGen: ''
  runCrossGen2: ''
  compositeBuildMode: false
  helixProjectArguments: ''
  runInUnloadableContext: ''
  longRunningGcTests: ''
  gcSimulatorTests: ''
  runtimeFlavorDisplayName: 'CoreCLR'
  runtimeVariant: ''

steps:
  template: send-to-helix-inner-step.yml
  parameters:
    restoreParams: /p:DotNetPublishToBlobFeed=true -ci -restore -projects $(Build.SourcesDirectory)\eng\empty.csproj
    sendParams: ${{ parameters.helixProjectArguments }} /maxcpucount /bl:$(Build.SourcesDirectory)/artifacts/log/SendToHelix.binlog
    ${{ if ne(parameters.condition, '') }}:
      condition: ${{ parameters.condition }}
    ${{ if eq(parameters.condition, '') }}:
      condition: true
    helixParameters:
      displayName: ${{ parameters.displayName }}
      condition: ${{ parameters.condition }}
      archType: ${{ parameters.archType }}
      osGroup: ${{ parameters.osGroup }}
      osSubgroup: ${{ parameters.osSubgroup }}
      buildConfig: ${{ parameters.buildConfig }}
      creator: ${{ parameters.creator }}
      publishTestResults: ${{ parameters.publishTestResults }}
      helixAccessToken: ${{ parameters.helixAccessToken }}
      helixBuild: ${{ parameters.helixBuild }}
      helixSource: ${{ parameters.helixSource }}
      helixQueues: ${{ parameters.helixQueues }}
      helixType: ${{ parameters.helixType }}
      scenarios: ${{ parameters.scenarios }}
      timeoutPerTestCollectionInMinutes: ${{ parameters.timeoutPerTestCollectionInMinutes }}
      timeoutPerTestInMinutes: ${{ parameters.timeoutPerTestInMinutes }}
      runCrossGen: ${{ parameters.runCrossGen }}
      runCrossGen2: ${{ parameters.runCrossGen2 }}
      compositeBuildMode: ${{ parameters.compositeBuildMode }}
      runInUnloadableContext: ${{ parameters.runInUnloadableContext }}
      longRunningGcTests: ${{ parameters.longRunningGcTests }}
      gcSimulatorTests: ${{ parameters.gcSimulatorTests }}
      runtimeFlavorDisplayName: ${{ parameters.runtimeFlavorDisplayName }}
      runtimeVariant: ${{ parameters.runtimeVariant }}
      helixEnvironment:
        __BuildArch: ${{ parameters.archType }}
        __TargetOS: ${{ parameters.osGroup }}${{ parameters.osSubgroup }}
        __BuildType: ${{ parameters.buildConfig }}
        _Creator: ${{ parameters.creator }}
        _PublishTestResults: ${{ parameters.publishTestResults }}
        _HelixAccessToken: ${{ parameters.helixAccessToken }}
        _HelixBuild: ${{ parameters.helixBuild }}
        _HelixSource: ${{ parameters.helixSource }}
        _HelixTargetQueues: ${{ join(',', parameters.helixQueues) }}
        _HelixType: ${{ parameters.helixType }}
        _RunCrossGen: ${{ parameters.runCrossGen }}
        _RunCrossGen2: ${{ parameters.runCrossGen2 }}
        _CompositeBuildMode: ${{ parameters.compositeBuildMode }}
        _RunInUnloadableContext: ${{ parameters.runInUnloadableContext }}
        _LongRunningGcTests: ${{ parameters.longRunningGcTests }}
        _GcSimulatorTests: ${{ parameters.gcSimulatorTests }}
        _Scenarios: ${{ join(',', parameters.scenarios) }}
        _TimeoutPerTestCollectionInMinutes: ${{ parameters.timeoutPerTestCollectionInMinutes }}
        _TimeoutPerTestInMinutes: ${{ parameters.timeoutPerTestInMinutes }}
        runtimeFlavorDisplayName: ${{ parameters.runtimeFlavorDisplayName }}
        _RuntimeVariant: ${{ parameters.runtimeVariant }}
        ${{ if eq(parameters.publishTestResults, 'true') }}:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        # TODO: remove NUGET_PACKAGES once https://github.com/dotnet/arcade/issues/1578 is fixed
        NUGET_PACKAGES: $(Build.SourcesDirectory)$(dir).packages
