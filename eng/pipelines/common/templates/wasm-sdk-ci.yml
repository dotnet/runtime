parameters:
  alwaysRun: false
  isExtraPlatformsBuild: false
  isWasmOnlyBuild: false
  platforms: []
  shouldContinueOnError: false

#resources:
  #repositories:
    #- repository: SdkRepo # The name used to reference this repository in the checkout step
      #type: github
      #name: dotnet/sdk

jobs:

#
# Build the whole product using Mono and run libraries tests, for Wasm.Build.Tests
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/common/global-build-job.yml
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    buildConfig: Release
    runtimeFlavor: mono
    platforms: ${{ parameters.platforms }}
    shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
    variables:
      # map dependencies variables to local variables
      - name: alwaysRunVar
        value: ${{ parameters.alwaysRun }}
      - name: workloadsTestPreviousVersionsVar
        value: $[
          or(
            eq(variables['Build.SourceBranchName'], 'main'),
            eq(variables['System.PullRequest.TargetBranch'], 'main'))
          ]
      - name: shouldRunOnDefaultPipelines
        value: $[
          or(
            eq(variables['wasmDarcDependenciesChanged'], true),
            eq(dependencies.evaluate_paths.outputs['SetPathVars_tools_illink.containsChange'], true),
            eq(dependencies.evaluate_paths.outputs['SetPathVars_wasmbuildtests.containsChange'], true))
          ]
    jobParameters:
      isExtraPlatforms: ${{ parameters.isExtraPlatformsBuild }}
      testGroup: innerloop
      nameSuffix: SdkTestsForWasm
      buildArgs: -s mono+libs+host+packs+libs.tests -c $(_BuildConfig) /p:ArchiveTests=true /p:TestWasmBuildTests=true /p:TestAssemblies=false /p:BrowserHost=$(_hostedOs) /p:WorkloadsTestPreviousVersions=$(workloadsTestPreviousVersionsVar)
      timeoutInMinutes: 180
      condition: >-
        or(
          eq(variables['alwaysRunVar'], true),
          eq(variables['isDefaultPipeline'], variables['shouldRunOnDefaultPipelines']))
      # extra steps, run tests
      extraStepsTemplate: /eng/pipelines/common/templates/additional-steps-then-helix.yml
      extraStepsParameters:
        additionalSteps:
          - script: git clone https://www.github.com/dotnet/sdk.git --depth 1
            workingDirectory: $(Pipeline.Workspace)
            displayName: Checkout dotnet/sdk
          - script: >-
              cd sdk;
              mkdir -p artifacts/bin/redist/$(_BuildConfig);
              ln -s $(Build.SourcesDirectory)/artifacts/bin/dotnet-latest artifacts/bin/redist/$(_BuildConfig)/dotnet;
              ls -l artifacts/bin/redist/$(_BuildConfig);
              ls -l artifacts/bin/redist/$(_BuildConfig)/dotnet/;
              ls -l artifacts/bin/redist/$(_BuildConfig)/dotnet/dotnet;
              export RestoreAdditionalProjectSources=$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/Shipping;
              ./build.sh -c $(_BuildConfig) -restore -test --projects $PWD/src/Tests/Microsoft.NET.Sdk.BlazorWebAssembly.Tests/Microsoft.NET.Sdk.BlazorWebAssembly.Tests.csproj /bl
            workingDirectory: $(Pipeline.Workspace)
            displayName: Build tests
          - task: PublishTestResults@2
            displayName: Publish Test Results
            inputs:
              testResultsFormat: 'XUnit'
              testResultsFiles: '*.xml'
              searchFolder: '$(Pipeline.Workspace)/sdk/artifacts/TestResults/$(_BuildConfig)'
              mergeTestResults: true
              testRunTitle: Sdk-WasmTestResults
            continueOnError: true
            condition: always()
        creator: dotnet-bot
        testRunNamePrefixSuffix: Mono_$(_BuildConfig)_$(_hostedOs)
        extraHelixArguments: /p:BrowserHost=$(_hostedOs)
        scenarios:
        - buildwasmapps
