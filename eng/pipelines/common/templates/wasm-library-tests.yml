# build-wasm-and-library-tests.yml
parameters:
  alwaysRun: false
  extraBuildArgs: ''
  extraHelixArguments: ''
  isExtraPlatformsBuild: false
  nameSuffix: ''
  platforms: []
  runSmokeOnlyArg: ''
  runTests: true
  scenarios: ['normal']
  shouldContinueOnError: false
  uploadNuGets: false
  uploadTests: false
  useExactNameSuffix: false
  testVariants: {} # { name, scenario }
  # perf variant scenarios
  # platforms also?

jobs:

#
# Build for Browser/wasm and test it
#
- template: /eng/pipelines/common/platform-matrix.yml
  parameters:
    jobTemplate: /eng/pipelines/common/global-build-job.yml
    helixQueuesTemplate: /eng/pipelines/libraries/helix-queues-setup.yml
    buildConfig: Release
    runtimeFlavor: mono
    platforms: ${{ parameters.platforms }}
    shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
    variables:
      # map dependencies variables to local variables
      - name: librariesContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'] ]
      - name: monoContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'] ]
      - name: alwaysRunVar
        value: ${{ parameters.alwaysRun }}
      - name: allWasmContainsChange
        value: $[ dependencies.evaluate_paths.outputs['SetPathVars_allwasm.containsChange'] ]
      - ${{ if containsValue(parameters.testVariants.name, 'libtests_eat') }}:
        - testsSpecificBuildArgs: /p:EnableAggressiveTrimming=true /p:BuildAOTTestsOnHelix=true
        - testsSpecificHelixArgs: /p:NeedsToBuildWasmAppsOnHelix=true
      - ${{ if containsValue(parameters.testVariants.name, 'libtests_high_aot') }}:
        - testsSpecificBuildArgs: /p:TestAssemblies=false /p:RunHighAOTResourceRequiringTestsOnly=true

    jobParameters:
      isExtraPlatforms: ${{ parameters.isExtraPlatformsBuild }}
      testGroup: innerloop

      # Different names when building tests
      #${{ if and(ne(parameters.useExactNameSuffix, true), or(eq(parameters.runTests, true), eq(parameters.uploadTests, true))) }}:
        #nameSuffix: LibraryTests${{ parameters.nameSuffix }}
      #${{ if not(and(ne(parameters.useExactNameSuffix, true), or(eq(parameters.runTests, true), eq(parameters.uploadTests, true)))) }}:
      nameSuffix: ${{ parameters.nameSuffix }}

      # with tests
      ${{ if or(eq(parameters.runTests, true), eq(parameters.uploadTests, true)) }}:
        buildArgs: -s mono+libs+host+packs+libs.tests -c $(_BuildConfig) /p:ArchiveTests=true /p:BrowserHost=$(_hostedOs) ${{ parameters.runSmokeOnlyArg }} ${{ parameters.extraBuildArgs }} $(testsSpecificBuildArgs)
      # without tests
      ${{ if not(or(eq(parameters.runTests, true), eq(parameters.uploadTests, true))) }}:
        buildArgs: -s mono+libs+host -c $(_BuildConfig) /p:BrowserHost=$(_hostedOs) ${{ parameters.runSmokeOnlyArg }} ${{ parameters.extraBuildArgs }}

      timeoutInMinutes: 240
      # always run for runtime-wasm builds (triggered manually)
      # Always run for rolling builds
      # Else run on path changes
      condition: >-
        or(
          eq(variables['alwaysRunVar'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_libraries.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_allwasm.containsChange'], true),
          eq(dependencies.evaluate_paths.outputs['SetPathVars_mono.containsChange'], true))
      extraStepsTemplate: /eng/pipelines/common/templates/pre-steps-with-helix-at-end.yml
      extraStepsParameters:
        extraHelixArguments: ${{ parameters.runSmokeOnlyArg }} ${{ parameters.extraHelixArguments }} $(testsSpecificHelixArgs)
        scenarios: ${{ parameters.scenarios }}
        runTests: ${{ parameters.runTests }}
        preTemplate: /eng/pipelines/common/wasm-libtests-upload-artifacts-steps.yml
        preTemplateParameters:
          artifactsNameSuffix: ${{ parameters.nameSuffix }}
          uploadNuGets: ${{ parameters.uploadNuGets }}
          uploadTests: ${{ parameters.uploadTests }}
          testVariants: ${{ parameters.testVariants }}
