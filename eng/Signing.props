<Project>
  <Import Project="$(MSBuildThisFileDirectory)OSArch.props" />
  <Import Project="$(MSBuildThisFileDirectory)RuntimeIdentifier.props" />

  <PropertyGroup>
    <!--
      By default, we don't use the default artifacts settings for signing or publishing.
      Every job will publish their RID-specific packages.
      For non-RID-specific packages, we have various rules:

      - A job can specify EnableDefaultArtifacts=true as a global property to publish all packages it produces.
        We have specific jobs that produce RID-agnostic packages or packages for multiple RIDs set this property.
      - For some target RIDs, we also include specific RID-agnostic packages.

      VMR jobs control whether or not a vertical has EnableDefaultArtifacts set to true or false in DotNetBuild.props.

      Packages that do not meet the above rules are added with Vertical visibility in the VMR and excluded in non-VMR builds.
    -->
    <EnableDefaultArtifacts Condition="'$(DotNetBuildOrchestrator)' != 'true'">false</EnableDefaultArtifacts>
    <EnableBlobArtifacts>true</EnableBlobArtifacts>
    <EnableBlobArtifacts Condition="'$(MonoAOTEnableLLVM)' == 'true'">false</EnableBlobArtifacts>

    <UseDotNetCertificate>true</UseDotNetCertificate>
  </PropertyGroup>

  <ItemGroup>
    <!-- apphost and comhost template files are not signed, by design. -->
    <FileSignInfo Include="apphost.exe;singlefilehost.exe;comhost.dll" CertificateName="None" />

    <!--
      The DAC and the DBI must go through special signing provisioning using a system separate
      from MicroBuild.
    -->
    <FileSignInfo Include="mscordaccore.dll" CertificateName="None" />
    <FileSignInfo Include="mscordbi.dll" CertificateName="None" />

    <!-- On MacOS, we need to sign a number of our executables with the Mac developer cert with hardening enabled. -->
    <FileSignInfo Condition="'$(TargetsOSX)' == 'true'" Include="dotnet;apphost;corerun;createdump" CertificateName="MacDeveloperHarden" />

    <!-- We don't need to code sign .js files because they are not used in Windows Script Host. -->
    <!-- WARNING: Needs to happed outside of any target -->
    <FileExtensionSignInfo Update=".js" CertificateName="None" />

    <!-- Third-party components which should be signed.  -->
    <FileSignInfo Include="Newtonsoft.Json.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="Mono.Cecil.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="Mono.Cecil.Mdb.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="Mono.Cecil.Pdb.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="Mono.Cecil.Rocks.dll" CertificateName="3PartySHA2" />

    <FileExtensionSignInfo Include=".msi" CertificateName="MicrosoftDotNet500" />

    <!--
      Removal is temporarily needed as we integrate support for these extensions into SignTool.
      Should be cleaned up after https://github.com/dotnet/arcade/issues/14432,
      https://github.com/dotnet/arcade/issues/14433, and
      https://github.com/dotnet/arcade/issues/14435 are completed.
     -->
    <FileExtensionSignInfo Remove=".deb;.rpm;.pkg" />
    <FileExtensionSignInfo Include=".pkg" CertificateName="8003" />
    <FileExtensionSignInfo Include=".deb;.rpm" CertificateName="LinuxSign" />
  </ItemGroup>

  <!--
    Ensure that we sign the AZL3 RPM with the LinuxSignMariner key.
    This package name has the version in it, so we need to use a wildcard to discover the right name.
  -->
  <ItemGroup>
    <AzureLinuxPrereqsRPM Include="$(ArtifactsPackagesDir)**/dotnet-runtime-deps-*-azl.3-*.rpm" />
    <FileSignInfo Include="@(AzureLinuxPrereqsRPM->'%(Filename)%(Extension)')" CertificateName="LinuxSignMariner" />
  </ItemGroup>

  <!-- In build signing and publishing without a join point -->
  <ItemGroup Condition="'$(EnableBlobArtifacts)' == 'true'">
    <Artifact Include="$(ArtifactsPackagesDir)**\*.tar.gz;
                       $(ArtifactsPackagesDir)**\*.zip;
                       $(ArtifactsPackagesDir)**\*.deb;
                       $(ArtifactsPackagesDir)**\*.rpm;
                       $(ArtifactsPackagesDir)**\*.pkg;
                       $(ArtifactsPackagesDir)**\*.exe;
                       $(ArtifactsPackagesDir)**\*.msi;"
              Exclude="$(ArtifactsPackagesDir)**\Symbols.runtime.tar.gz"
              IsShipping="$([System.String]::Copy('%(RecursiveDir)').StartsWith('Shipping'))">
      <!-- Exclude wixpack.zip files from checksum generation -->
      <ChecksumPath Condition="$([System.String]::Copy('%(Filename)%(Extension)').EndsWith('.wixpack.zip')) != 'true'">%(FullPath).sha512</ChecksumPath>
    </Artifact>

    <Artifact Include="$(ArtifactsDir)VSSetup\**\*.zip"
              Condition="Exists('$(ArtifactsDir)VSSetup')"
              IsShipping="false"
              ChecksumPath="%(FullPath).sha512"
              SubBlobFolder="workloads/" />
  </ItemGroup>

  <!--
    Filter out the RID-specific (Runtime) nupkgs for this RID.
    Every job will publish their RID-specific packages.
    For non-RID-specific packages, we have various rules:

    - A job can specify EnableDefaultArtifacts=true as a global property to publish all packages it produces.
      We have specific jobs that produce RID-agnostic packages or packages for multiple RIDs set this property.
    - For some target RIDs, we also include specific RID-agnostic packages.
    - For LLVM builds, we only publish LLVM-specific packages.
  -->
  <Choose>
    <When Condition="'$(MonoAOTEnableLLVM)' == 'true'">
      <ItemGroup>
        <PackageArtifacts Include="$(ArtifactsPackagesDir)**\*.LLVM.AOT.$(PackageRID).*.nupkg" />
        <Artifact Include="@(PackageArtifacts)"
                  IsShipping="$([System.String]::Copy('%(RecursiveDir)').StartsWith('Shipping'))"
                  Kind="Package" />
      </ItemGroup>
    </When>
    <When Condition="'$(EnableDefaultArtifacts)' != 'true'">
      <ItemGroup>
        <PackageArtifacts Include="$(ArtifactsPackagesDir)**\*.$(PackageRID).*.nupkg" />
      </ItemGroup>

      <ItemGroup Condition="'$(PackageRID)' == 'ios-arm64'">
        <PackageArtifacts
          Include="$(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.iOS.Sample.Mono.*.nupkg;
                  $(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.LibraryBuilder.Sdk.*.nupkg;
                  $(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.MonoAOTCompiler.Task.*.nupkg;
                  $(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.MonoTargets.Sdk.*.nupkg" />
      </ItemGroup>
      <ItemGroup Condition="'$(PackageRID)' == 'android-arm64'">
        <PackageArtifacts
          Include="$(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.Android.Sample.Mono.*.nupkg" />
      </ItemGroup>
      <ItemGroup Condition="'$(PackageRID)' == 'wasi-wasm'">
        <PackageArtifacts
          Include="$(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.WebAssembly.Wasi.Sdk.*.nupkg" />
      </ItemGroup>
      <ItemGroup Condition="'$(PackageRID)' == 'browser-wasm' and '$(WasmEnableThreads)' != 'true'">
        <PackageArtifacts
          Include="$(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.wasm.Sample.Mono.*.nupkg;
                  $(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.WorkloadTesting.Internal.*.nupkg;
                  $(ArtifactsPackagesDir)**\Microsoft.NETCore.BrowserDebugHost.Transport.*.nupkg;
                  $(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.WebAssembly.Sdk.*.nupkg;
                  $(ArtifactsPackagesDir)**\Microsoft.NET.Runtime.WebAssembly.Templates.net10.*.nupkg;
                  $(ArtifactsPackagesDir)**\Microsoft.NET.Sdk.WebAssembly.Pack.*.nupkg;
                  $(ArtifactsPackagesDir)**\Microsoft.NET.Workload.Mono.ToolChain.*.nupkg" />
      </ItemGroup>
      <ItemGroup Condition="$(PackageRID.StartsWith('win-'))">
        <PackageArtifacts
          Include="$(ArtifactsPackagesDir)**\VS.Redist.Common.NetCore.*.nupkg" />
      </ItemGroup>

      <ItemGroup>
        <VerticalOnlyPackageArtifacts Include="$(ArtifactsPackagesDir)**\*.nupkg" Exclude="@(PackageArtifacts)" />
        <!--
          In non-VMR builds, we can skip publishing RID-agnostic packages entirely when we're not the lane that is supposed to publish them.
          In VMR builds, we need to publish them for upstack jobs to consume.
        -->
        <Artifact Include="@(PackageArtifacts)"
                  IsShipping="$([System.String]::Copy('%(RecursiveDir)').StartsWith('Shipping'))"
                  Kind="Package" />

        <Artifact Include="@(VerticalOnlyPackageArtifacts)"
                  IsShipping="false"
                  Visibility="Vertical"
                  Kind="Package"
                  Condition="'$(DotNetBuildOrchestrator)' == 'true'" />
      </ItemGroup>
    </When>
    <Otherwise>
    </Otherwise>
  </Choose>
</Project>
